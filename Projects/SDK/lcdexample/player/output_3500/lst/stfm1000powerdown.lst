TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfce82b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;stfm1000powerdo:
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2005
                               98 ; 3    |//
                               99 ; 4    |// Filename: STFM1000PowerDown.c
                              100 ; 5    |// Description: 
                              101 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |#include "hwequ.h"
                              103 
                              105 
                              106 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              107 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                              108 ; 3    |//  File        : hwequ.inc
                              109 ; 4    |//  Description : STMP Hardware Constants
                              110 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              111 ; 6    |
                              112 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                              113 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                              114 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                              115 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                              116 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                              117 ; 12   |
                              118 ; 13   |#if (!defined(HWEQU_INC))
                              119 ; 14   |#define HWEQU_INC 1
                              120 ; 15   |
                              121 ; 16   |#include "types.h"
                              122 
                              124 
                              125 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              126 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              127 ; 3    |//
                              128 ; 4    |// Filename: types.h
                              129 ; 5    |// Description: Standard data types
                              130 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              131 ; 7    |
                              132 ; 8    |#ifndef _TYPES_H
                              133 ; 9    |#define _TYPES_H
                              134 ; 10   |
                              135 ; 11   |// TODO:  move this outta here!
                              136 ; 12   |#if !defined(NOERROR)
                              137 ; 13   |#define NOERROR 0
                              138 ; 14   |#define SUCCESS 0
                              139 ; 15   |#endif 
                              140 ; 16   |#if !defined(SUCCESS)
                              141 ; 17   |#define SUCCESS  0
                              142 ; 18   |#endif
                              143 ; 19   |#if !defined(ERROR)
                              144 ; 20   |#define ERROR   -1
                              145 ; 21   |#endif
                              146 ; 22   |#if !defined(FALSE)
                              147 ; 23   |#define FALSE 0
                              148 ; 24   |#endif
                              149 ; 25   |#if !defined(TRUE)
                              150 ; 26   |#define TRUE  1
                              151 ; 27   |#endif
                              152 ; 28   |
                              153 ; 29   |#if !defined(NULL)
                              154 ; 30   |#define NULL 0
                              155 ; 31   |#endif
                              156 ; 32   |
                              157 ; 33   |#define MAX_INT     0x7FFFFF
                              158 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              159 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              160 ; 36   |#define MAX_ULONG   (-1) 
                              161 ; 37   |
                              162 ; 38   |#define WORD_SIZE   24              // word size in bits
                              163 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              164 ; 40   |
                              165 ; 41   |
                              166 ; 42   |#define BYTE    unsigned char       // btVarName
                              167 ; 43   |#define CHAR    signed char         // cVarName
                              168 ; 44   |#define USHORT  unsigned short      // usVarName
                              169 ; 45   |#define SHORT   unsigned short      // sVarName
                              170 ; 46   |#define WORD    unsigned int        // wVarName
                              171 ; 47   |#define INT     signed int          // iVarName
                              172 ; 48   |#define DWORD   unsigned long       // dwVarName
                              173 ; 49   |#define LONG    signed long         // lVarName
                              174 ; 50   |#define BOOL    unsigned int        // bVarName
                              175 ; 51   |#define FRACT   _fract              // frVarName
                              176 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              177 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              178 ; 54   |#define FLOAT   float               // fVarName
                              179 ; 55   |#define DBL     double              // dVarName
                              180 ; 56   |#define ENUM    enum                // eVarName
                              181 ; 57   |#define CMX     _complex            // cmxVarName
                              182 ; 58   |typedef WORD UCS3;                   // 
                              183 ; 59   |
                              184 ; 60   |#define UINT16  unsigned short
                              185 ; 61   |#define UINT8   unsigned char   
                              186 ; 62   |#define UINT32  unsigned long
                              187 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              188 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              189 ; 65   |#define WCHAR   UINT16
                              190 ; 66   |
                              191 ; 67   |//UINT128 is 16 bytes or 6 words
                              192 ; 68   |typedef struct UINT128_3500 {   
                              193 ; 69   |    int val[6];     
                              194 ; 70   |} UINT128_3500;
                              195 ; 71   |
                              196 ; 72   |#define UINT128   UINT128_3500
                              197 ; 73   |
                              198 ; 74   |// Little endian word packed byte strings:   
                              199 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              200 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              201 ; 77   |// Little endian word packed byte strings:   
                              202 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              203 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              204 ; 80   |
                              205 ; 81   |// Declare Memory Spaces To Use When Coding
                              206 ; 82   |// A. Sector Buffers
                              207 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              208 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              209 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              210 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              211 
                              213 
                              214 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              215 ; 88   |// B. Media DDI Memory
                              216 ; 89   |#define MEDIA_DDI_MEM _Y
                              217 ; 90   |
                              218 ; 91   |
                              219 ; 92   |
                              220 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              221 ; 94   |// Examples of circular pointers:
                              222 ; 95   |//    INT CIRC cpiVarName
                              223 ; 96   |//    DWORD CIRC cpdwVarName
                              224 ; 97   |
                              225 ; 98   |#define RETCODE INT                 // rcVarName
                              226 ; 99   |
                              227 ; 100  |// generic bitfield structure
                              228 ; 101  |struct Bitfield {
                              229 ; 102  |    unsigned int B0  :1;
                              230 ; 103  |    unsigned int B1  :1;
                              231 ; 104  |    unsigned int B2  :1;
                              232 ; 105  |    unsigned int B3  :1;
                              233 ; 106  |    unsigned int B4  :1;
                              234 ; 107  |    unsigned int B5  :1;
                              235 ; 108  |    unsigned int B6  :1;
                              236 ; 109  |    unsigned int B7  :1;
                              237 ; 110  |    unsigned int B8  :1;
                              238 ; 111  |    unsigned int B9  :1;
                              239 ; 112  |    unsigned int B10 :1;
                              240 ; 113  |    unsigned int B11 :1;
                              241 ; 114  |    unsigned int B12 :1;
                              242 ; 115  |    unsigned int B13 :1;
                              243 ; 116  |    unsigned int B14 :1;
                              244 ; 117  |    unsigned int B15 :1;
                              245 ; 118  |    unsigned int B16 :1;
                              246 ; 119  |    unsigned int B17 :1;
                              247 ; 120  |    unsigned int B18 :1;
                              248 ; 121  |    unsigned int B19 :1;
                              249 ; 122  |    unsigned int B20 :1;
                              250 ; 123  |    unsigned int B21 :1;
                              251 ; 124  |    unsigned int B22 :1;
                              252 ; 125  |    unsigned int B23 :1;
                              253 ; 126  |};
                              254 ; 127  |
                              255 ; 128  |union BitInt {
                              256 ; 129  |        struct Bitfield B;
                              257 ; 130  |        int        I;
                              258 ; 131  |};
                              259 ; 132  |
                              260 ; 133  |#define MAX_MSG_LENGTH 10
                              261 ; 134  |struct CMessage
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                              262 ; 135  |{
                              263 ; 136  |        unsigned int m_uLength;
                              264 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              265 ; 138  |};
                              266 ; 139  |
                              267 ; 140  |typedef struct {
                              268 ; 141  |    WORD m_wLength;
                              269 ; 142  |    WORD m_wMessage;
                              270 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              271 ; 144  |} Message;
                              272 ; 145  |
                              273 ; 146  |struct MessageQueueDescriptor
                              274 ; 147  |{
                              275 ; 148  |        int *m_pBase;
                              276 ; 149  |        int m_iModulo;
                              277 ; 150  |        int m_iSize;
                              278 ; 151  |        int *m_pHead;
                              279 ; 152  |        int *m_pTail;
                              280 ; 153  |};
                              281 ; 154  |
                              282 ; 155  |struct ModuleEntry
                              283 ; 156  |{
                              284 ; 157  |    int m_iSignaledEventMask;
                              285 ; 158  |    int m_iWaitEventMask;
                              286 ; 159  |    int m_iResourceOfCode;
                              287 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              288 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              289 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              290 ; 163  |    int m_uTimeOutHigh;
                              291 ; 164  |    int m_uTimeOutLow;
                              292 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              293 ; 166  |};
                              294 ; 167  |
                              295 ; 168  |union WaitMask{
                              296 ; 169  |    struct B{
                              297 ; 170  |        unsigned int m_bNone     :1;
                              298 ; 171  |        unsigned int m_bMessage  :1;
                              299 ; 172  |        unsigned int m_bTimer    :1;
                              300 ; 173  |        unsigned int m_bButton   :1;
                              301 ; 174  |    } B;
                              302 ; 175  |    int I;
                              303 ; 176  |} ;
                              304 ; 177  |
                              305 ; 178  |
                              306 ; 179  |struct Button {
                              307 ; 180  |        WORD wButtonEvent;
                              308 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              309 ; 182  |};
                              310 ; 183  |
                              311 ; 184  |struct Message {
                              312 ; 185  |        WORD wMsgLength;
                              313 ; 186  |        WORD wMsgCommand;
                              314 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              315 ; 188  |};
                              316 ; 189  |
                              317 ; 190  |union EventTypes {
                              318 ; 191  |        struct CMessage msg;
                              319 ; 192  |        struct Button Button ;
                              320 ; 193  |        struct Message Message;
                              321 ; 194  |};
                              322 ; 195  |
                              323 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              324 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              325 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              326 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              327 ; 200  |
                              328 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              329 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              330 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              331 ; 204  |
                              332 ; 205  |#if DEBUG
                              333 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              334 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              335 ; 208  |#else 
                              336 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              337 ; 210  |#define DebugBuildAssert(x)    
                              338 ; 211  |#endif
                              339 ; 212  |
                              340 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              341 ; 214  |//  #pragma asm
                              342 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              343 ; 216  |//  #pragma endasm
                              344 ; 217  |
                              345 ; 218  |
                              346 ; 219  |#ifdef COLOR_262K
                              347 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              348 ; 221  |#elif defined(COLOR_65K)
                              349 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              350 ; 223  |#else
                              351 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              352 ; 225  |#endif
                              353 ; 226  |    
                              354 ; 227  |#endif // #ifndef _TYPES_H
                              355 
                              357 
                              358 ; 17   |#include "regsclkctrl.h"
                              359 
                              361 
                              362 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                              363 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                              364 ; 3    |
                              365 ; 4    |
                              366 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              367 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                              368 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                              369 ; 8    |#define HW_CCR_LTC_BITPOS 1
                              370 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                              371 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                              372 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                              373 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                              374 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                              375 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                              376 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                              377 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                              378 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                              379 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                              380 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                              381 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                              382 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                              383 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                              384 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                              385 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                              386 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                              387 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                              388 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                              389 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                              390 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                              391 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                              392 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                              393 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                              394 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                              395 ; 34   |
                              396 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                              397 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                              398 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                              399 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                              400 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                              401 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                              402 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                              403 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                              404 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                              405 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                              406 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                              407 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                              408 ; 47   |
                              409 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                              410 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                              411 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                              412 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                              413 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                              414 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                              415 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                              416 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                              417 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                              418 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                              419 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                              420 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                              421 ; 60   |
                              422 ; 61   |typedef union               
                              423 ; 62   |{
                              424 ; 63   |    struct
                              425 ; 64   |    {
                              426 ; 65   |        int CKRST       :1; // Clock Reset
                              427 ; 66   |        int LTC         :1;
                              428 ; 67   |        int PLLEN       :1;
                              429 ; 68   |        int XTLEN       :1;
                              430 ; 69   |        int FLB         :1;
                              431 ; 70   |        unsigned ADIV   :3;
                              432 ; 71   |        int CKSRC       :1;
                              433 ; 72   |        unsigned DDIV   :3;
                              434 ; 73   |        unsigned PDIV   :5;
                              435 ; 74   |        int PWDN        :1;
                              436 ; 75   |        int ACKEN       :1;
                              437 ; 76   |        int LOCK        :1;
                              438 ; 77   |        unsigned ADIV1  :3;
                              439 ; 78   |        unsigned DDIV_MSB:1;
                              440 ; 79   |    } B;
                              441 ; 80   |
                              442 ; 81   |    int I;
                              443 ; 82   |    unsigned int U;
                              444 ; 83   |
                              445 ; 84   |} ccr_type;
                              446 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                              447 ; 86   |
                              448 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              449 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                              450 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                              451 ; 90   |#define HW_RCR_SRST_BITPOS 4
                              452 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                              453 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                              454 ; 93   |#define HW_RCR_NMI_BITPOS 10
                              455 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                              456 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                              457 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                              458 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                              459 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                              460 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                              461 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                              462 ; 101  |
                              463 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                              464 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                              465 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                              466 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                              467 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                              468 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                              469 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                              470 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                              471 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                              472 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                              473 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                              474 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                              475 ; 114  |
                              476 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                              477 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                              478 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                              479 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                              480 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                              481 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                              482 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                              483 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                              484 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                              485 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                              486 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                              487 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                              488 ; 127  |
                              489 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                              490 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                              491 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                              492 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                              493 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                              494 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                              495 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                              496 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                              497 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                              498 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                              499 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                              500 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                              501 ; 140  |
                              502 ; 141  |typedef union               
                              503 ; 142  |{
                              504 ; 143  |    struct
                              505 ; 144  |   {
                              506 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                              507 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                              508 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                              509 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                              510 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                              511 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                              512 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                              513 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                              514 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              515 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                              516 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                              517 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                              518 ; 157  |    } B;
                              519 ; 158  |
                              520 ; 159  |    int I;
                              521 ; 160  |    unsigned int U;
                              522 ; 161  |
                              523 ; 162  |} rcr_type;
                              524 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                              525 ; 164  |
                              526 ; 165  |
                              527 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                              528 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                              529 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                              530 ; 169  |
                              531 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                              532 ; 171  |
                              533 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                              534 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                              535 ; 174  |typedef union               
                              536 ; 175  |{
                              537 ; 176  |    struct
                              538 ; 177  |   {
                              539 ; 178  |        int LOW;
                              540 ; 179  |    } B;
                              541 ; 180  |
                              542 ; 181  |    int I;
                              543 ; 182  |    unsigned int U;
                              544 ; 183  |
                              545 ; 184  |} dclkcntl_type;
                              546 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                              547 ; 186  |
                              548 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                              549 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                              550 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                              551 ; 190  |
                              552 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                              553 ; 192  |
                              554 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS) 
                              555 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                              556 ; 195  |typedef union               
                              557 ; 196  |{
                              558 ; 197  |    struct
                              559 ; 198  |   {
                              560 ; 199  |        int HIGH;
                              561 ; 200  |    } B;
                              562 ; 201  |
                              563 ; 202  |    int I;
                              564 ; 203  |    unsigned int U;
                              565 ; 204  |
                              566 ; 205  |} dclkcntu_type;
                              567 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                              568 ; 207  |
                              569 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                              570 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                              571 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                              572 ; 211  |
                              573 ; 212  |// Clock count register (lower)
                              574 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                              575 ; 214  |// Clock count register (upper)
                              576 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                              577 ; 216  |// Cycle steal count register
                              578 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                              579 ; 218  |
                              580 ; 219  |#endif
                              581 ; 220  |
                              582 ; 221  |
                              583 
                              585 
                              586 ; 18   |#include "regscore.h"
                              587 
                              589 
                              590 ; 1    |#if !(defined(__REGS_STATUS_INC))
                              591 ; 2    |#define __REGS_STATUS_INC 1
                              592 ; 3    |
                              593 ; 4    |
                              594 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              595 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                              596 ; 7    |#define HW_OMR_MA_BITPOS 0
                              597 ; 8    |#define HW_OMR_MB_BITPOS 1
                              598 ; 9    |#define HW_OMR_DE_BITPOS 2
                              599 ; 10   |#define HW_OMR_YE_BITPOS 3
                              600 ; 11   |#define HW_OMR_MC_BITPOS 4
                              601 ; 12   |#define HW_OMR_SD_BITPOS 6
                              602 ; 13   |
                              603 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                              604 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                              605 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                              606 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                              607 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                              608 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                              609 ; 20   |
                              610 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                              611 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                              612 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                              613 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                              614 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                              615 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                              616 ; 27   |
                              617 ; 28   |
                              618 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                              619 ; 30   |//  Status Register (HW_SR) Bit Positions
                              620 ; 31   |#define HW_SR_C_BITPOS 0
                              621 ; 32   |#define HW_SR_O_BITPOS 1
                              622 ; 33   |#define HW_SR_Z_BITPOS 2
                              623 ; 34   |#define HW_SR_N_BITPOS 3
                              624 ; 35   |#define HW_SR_U_BITPOS 4
                              625 ; 36   |#define HW_SR_E_BITPOS 5
                              626 ; 37   |#define HW_SR_L_BITPOS 6
                              627 ; 38   |#define HW_SR_IM_BITPOS 8
                              628 ; 39   |#define HW_SR_IM0_BITPOS 8
                              629 ; 40   |#define HW_SR_IM1_BITPOS 9
                              630 ; 41   |#define HW_SR_SM_BITPOS 10
                              631 ; 42   |#define HW_SR_SM0_BITPOS 10
                              632 ; 43   |#define HW_SR_SM1_BITPOS 11
                              633 ; 44   |#define HW_SR_TM_BITPOS 13
                              634 ; 45   |#define HW_SR_DP_BITPOS 14
                              635 ; 46   |#define HW_SR_LOOP_BITPOS 15
                              636 ; 47   |
                              637 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                              638 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                              639 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                              640 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                              641 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                              642 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                              643 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                              644 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                              645 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                              646 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                              647 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                              648 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                              649 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                              650 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                              651 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                              652 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                              653 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                              654 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                              655 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                              656 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                              657 ; 68   |
                              658 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                              659 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                              660 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                              661 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                              662 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                              663 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                              664 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                              665 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                              666 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                              667 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                              668 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                              669 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                              670 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                              671 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                              672 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                              673 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                              674 ; 85   |
                              675 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                              676 ; 87   |//  RAM/ROM Config Register Bit Positions
                              677 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                              678 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                              679 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                              680 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                              681 ; 92   |#endif
                              682 ; 93   |
                              683 ; 94   |
                              684 
                              686 
                              687 ; 19   |#include "regscodec.h"
                              688 
                              690 
                              691 ; 1    |#if !(defined(regscodecinc))
                              692 ; 2    |#define regscodecinc 1
                              693 ; 3    |
                              694 ; 4    |
                              695 ; 5    |
                              696 ; 6    |#include "types.h"
                              697 
                              699 
                              700 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              701 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              702 ; 3    |//
                              703 ; 4    |// Filename: types.h
                              704 ; 5    |// Description: Standard data types
                              705 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              706 ; 7    |
                              707 ; 8    |#ifndef _TYPES_H
                              708 ; 9    |#define _TYPES_H
                              709 ; 10   |
                              710 ; 11   |// TODO:  move this outta here!
                              711 ; 12   |#if !defined(NOERROR)
                              712 ; 13   |#define NOERROR 0
                              713 ; 14   |#define SUCCESS 0
                              714 ; 15   |#endif 
                              715 ; 16   |#if !defined(SUCCESS)
                              716 ; 17   |#define SUCCESS  0
                              717 ; 18   |#endif
                              718 ; 19   |#if !defined(ERROR)
                              719 ; 20   |#define ERROR   -1
                              720 ; 21   |#endif
                              721 ; 22   |#if !defined(FALSE)
                              722 ; 23   |#define FALSE 0
                              723 ; 24   |#endif
                              724 ; 25   |#if !defined(TRUE)
                              725 ; 26   |#define TRUE  1
                              726 ; 27   |#endif
                              727 ; 28   |
                              728 ; 29   |#if !defined(NULL)
                              729 ; 30   |#define NULL 0
                              730 ; 31   |#endif
                              731 ; 32   |
                              732 ; 33   |#define MAX_INT     0x7FFFFF
                              733 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              734 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              735 ; 36   |#define MAX_ULONG   (-1) 
                              736 ; 37   |
                              737 ; 38   |#define WORD_SIZE   24              // word size in bits
                              738 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              739 ; 40   |
                              740 ; 41   |
                              741 ; 42   |#define BYTE    unsigned char       // btVarName
                              742 ; 43   |#define CHAR    signed char         // cVarName
                              743 ; 44   |#define USHORT  unsigned short      // usVarName
                              744 ; 45   |#define SHORT   unsigned short      // sVarName
                              745 ; 46   |#define WORD    unsigned int        // wVarName
                              746 ; 47   |#define INT     signed int          // iVarName
                              747 ; 48   |#define DWORD   unsigned long       // dwVarName
                              748 ; 49   |#define LONG    signed long         // lVarName
                              749 ; 50   |#define BOOL    unsigned int        // bVarName
                              750 ; 51   |#define FRACT   _fract              // frVarName
                              751 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              752 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              753 ; 54   |#define FLOAT   float               // fVarName
                              754 ; 55   |#define DBL     double              // dVarName
                              755 ; 56   |#define ENUM    enum                // eVarName
                              756 ; 57   |#define CMX     _complex            // cmxVarName
                              757 ; 58   |typedef WORD UCS3;                   // 
                              758 ; 59   |
                              759 ; 60   |#define UINT16  unsigned short
                              760 ; 61   |#define UINT8   unsigned char   
                              761 ; 62   |#define UINT32  unsigned long
                              762 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              763 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              764 ; 65   |#define WCHAR   UINT16
                              765 ; 66   |
                              766 ; 67   |//UINT128 is 16 bytes or 6 words
                              767 ; 68   |typedef struct UINT128_3500 {   
                              768 ; 69   |    int val[6];     
                              769 ; 70   |} UINT128_3500;
                              770 ; 71   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              771 ; 72   |#define UINT128   UINT128_3500
                              772 ; 73   |
                              773 ; 74   |// Little endian word packed byte strings:   
                              774 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              775 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              776 ; 77   |// Little endian word packed byte strings:   
                              777 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              778 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              779 ; 80   |
                              780 ; 81   |// Declare Memory Spaces To Use When Coding
                              781 ; 82   |// A. Sector Buffers
                              782 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              783 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              784 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              785 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              786 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              787 ; 88   |// B. Media DDI Memory
                              788 ; 89   |#define MEDIA_DDI_MEM _Y
                              789 ; 90   |
                              790 ; 91   |
                              791 ; 92   |
                              792 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              793 ; 94   |// Examples of circular pointers:
                              794 ; 95   |//    INT CIRC cpiVarName
                              795 ; 96   |//    DWORD CIRC cpdwVarName
                              796 ; 97   |
                              797 ; 98   |#define RETCODE INT                 // rcVarName
                              798 ; 99   |
                              799 ; 100  |// generic bitfield structure
                              800 ; 101  |struct Bitfield {
                              801 ; 102  |    unsigned int B0  :1;
                              802 ; 103  |    unsigned int B1  :1;
                              803 ; 104  |    unsigned int B2  :1;
                              804 ; 105  |    unsigned int B3  :1;
                              805 ; 106  |    unsigned int B4  :1;
                              806 ; 107  |    unsigned int B5  :1;
                              807 ; 108  |    unsigned int B6  :1;
                              808 ; 109  |    unsigned int B7  :1;
                              809 ; 110  |    unsigned int B8  :1;
                              810 ; 111  |    unsigned int B9  :1;
                              811 ; 112  |    unsigned int B10 :1;
                              812 ; 113  |    unsigned int B11 :1;
                              813 ; 114  |    unsigned int B12 :1;
                              814 ; 115  |    unsigned int B13 :1;
                              815 ; 116  |    unsigned int B14 :1;
                              816 ; 117  |    unsigned int B15 :1;
                              817 ; 118  |    unsigned int B16 :1;
                              818 ; 119  |    unsigned int B17 :1;
                              819 ; 120  |    unsigned int B18 :1;
                              820 ; 121  |    unsigned int B19 :1;
                              821 ; 122  |    unsigned int B20 :1;
                              822 ; 123  |    unsigned int B21 :1;
                              823 ; 124  |    unsigned int B22 :1;
                              824 ; 125  |    unsigned int B23 :1;
                              825 ; 126  |};
                              826 ; 127  |
                              827 ; 128  |union BitInt {
                              828 ; 129  |        struct Bitfield B;
                              829 ; 130  |        int        I;
                              830 ; 131  |};
                              831 ; 132  |
                              832 ; 133  |#define MAX_MSG_LENGTH 10
                              833 ; 134  |struct CMessage
                              834 ; 135  |{
                              835 ; 136  |        unsigned int m_uLength;
                              836 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              837 ; 138  |};
                              838 ; 139  |
                              839 ; 140  |typedef struct {
                              840 ; 141  |    WORD m_wLength;
                              841 ; 142  |    WORD m_wMessage;
                              842 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              843 ; 144  |} Message;
                              844 ; 145  |
                              845 ; 146  |struct MessageQueueDescriptor
                              846 ; 147  |{
                              847 ; 148  |        int *m_pBase;
                              848 ; 149  |        int m_iModulo;
                              849 ; 150  |        int m_iSize;
                              850 ; 151  |        int *m_pHead;
                              851 ; 152  |        int *m_pTail;
                              852 ; 153  |};
                              853 ; 154  |
                              854 ; 155  |struct ModuleEntry
                              855 ; 156  |{
                              856 ; 157  |    int m_iSignaledEventMask;
                              857 ; 158  |    int m_iWaitEventMask;
                              858 ; 159  |    int m_iResourceOfCode;
                              859 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              860 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              861 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              862 ; 163  |    int m_uTimeOutHigh;
                              863 ; 164  |    int m_uTimeOutLow;
                              864 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              865 ; 166  |};
                              866 ; 167  |
                              867 ; 168  |union WaitMask{
                              868 ; 169  |    struct B{
                              869 ; 170  |        unsigned int m_bNone     :1;
                              870 ; 171  |        unsigned int m_bMessage  :1;
                              871 ; 172  |        unsigned int m_bTimer    :1;
                              872 ; 173  |        unsigned int m_bButton   :1;
                              873 ; 174  |    } B;
                              874 ; 175  |    int I;
                              875 ; 176  |} ;
                              876 ; 177  |
                              877 ; 178  |
                              878 ; 179  |struct Button {
                              879 ; 180  |        WORD wButtonEvent;
                              880 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              881 ; 182  |};
                              882 ; 183  |
                              883 ; 184  |struct Message {
                              884 ; 185  |        WORD wMsgLength;
                              885 ; 186  |        WORD wMsgCommand;
                              886 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              887 ; 188  |};
                              888 ; 189  |
                              889 ; 190  |union EventTypes {
                              890 ; 191  |        struct CMessage msg;
                              891 ; 192  |        struct Button Button ;
                              892 ; 193  |        struct Message Message;
                              893 ; 194  |};
                              894 ; 195  |
                              895 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              896 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              897 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              898 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              899 ; 200  |
                              900 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              901 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              902 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              903 ; 204  |
                              904 ; 205  |#if DEBUG
                              905 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              906 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              907 ; 208  |#else 
                              908 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              909 ; 210  |#define DebugBuildAssert(x)    
                              910 ; 211  |#endif
                              911 ; 212  |
                              912 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              913 ; 214  |//  #pragma asm
                              914 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              915 ; 216  |//  #pragma endasm
                              916 ; 217  |
                              917 ; 218  |
                              918 ; 219  |#ifdef COLOR_262K
                              919 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              920 ; 221  |#elif defined(COLOR_65K)
                              921 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              922 ; 223  |#else
                              923 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              924 ; 225  |#endif
                              925 ; 226  |    
                              926 ; 227  |#endif // #ifndef _TYPES_H
                              927 
                              929 
                              930 ; 7    |
                              931 ; 8    |
                              932 ; 9    |
                              933 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              934 ; 11   |
                              935 ; 12   |//   SYSTEM STMP Registers 
                              936 ; 13   |//      Last Edited 7.17.2003 M. Henson
                              937 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              938 ; 15   |
                              939 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                              940 ; 17   |
                              941 ; 18   |
                              942 ; 19   |
                              943 ; 20   |
                              944 ; 21   |
                              945 ; 22   |
                              946 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                              947 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                              948 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                              949 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                              950 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                              951 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                              952 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                              953 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                              954 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                              955 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                              956 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                              957 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                              958 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                              959 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                              960 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                              961 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                              962 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                              963 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                              964 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                              965 ; 42   |
                              966 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                              967 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                              968 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                              969 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                              970 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                              971 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                              972 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                              973 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                              974 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                              975 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                              976 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                              977 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                              978 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                              979 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                              980 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                              981 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                              982 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                              983 ; 60   |
                              984 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                              985 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                              986 ; 63   |
                              987 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              988 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              989 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              990 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              991 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              992 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              993 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              994 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              995 ; 72   |
                              996 ; 73   |#if defined(CAPLESS_HP)
                              997 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                              998 ; 75   |#else 
                              999 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             1000 ; 77   |#endif
                             1001 ; 78   |
                             1002 ; 79   |// Headphone control register
                             1003 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             1004 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1005 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             1006 ; 83   |typedef union               
                             1007 ; 84   |{
                             1008 ; 85   |    struct {
                             1009 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             1010 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             1011 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             1012 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             1013 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             1014 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             1015 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             1016 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             1017 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             1018 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             1019 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             1020 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             1021 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             1022 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1023 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             1024 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             1025 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             1026 ; 103  |    } B;
                             1027 ; 104  |    int I;
                             1028 ; 105  |    unsigned int U;
                             1029 ; 106  |} hpctrl_type;
                             1030 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             1031 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             1032 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             1033 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             1034 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             1035 ; 112  |
                             1036 ; 113  |
                             1037 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             1038 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             1039 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             1040 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             1041 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             1042 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             1043 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             1044 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             1045 ; 122  |
                             1046 ; 123  |
                             1047 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             1048 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             1049 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             1050 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             1051 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             1052 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             1053 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             1054 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             1055 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             1056 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             1057 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             1058 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             1059 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             1060 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             1061 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             1062 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             1063 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             1064 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             1065 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             1066 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             1067 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             1068 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             1069 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             1070 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             1071 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             1072 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             1073 ; 150  |
                             1074 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             1075 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             1076 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             1077 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             1078 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             1079 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             1080 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             1081 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             1082 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             1083 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             1084 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             1085 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             1086 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             1087 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             1088 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             1089 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             1090 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             1091 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             1092 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             1093 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             1094 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             1095 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             1096 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             1097 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             1098 ; 175  |
                             1099 ; 176  |
                             1100 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             1101 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             1102 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             1103 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             1104 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             1105 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             1106 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             1107 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             1108 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             1109 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             1110 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             1111 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             1112 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             1113 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             1114 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             1115 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             1116 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             1117 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             1118 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             1119 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             1120 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             1121 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             1122 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             1123 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             1124 ; 201  |
                             1125 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             1126 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             1127 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             1128 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             1129 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             1130 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             1131 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             1132 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             1133 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             1134 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             1135 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             1136 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             1137 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             1138 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             1139 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             1140 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             1141 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             1142 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             1143 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             1144 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             1145 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             1146 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             1147 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             1148 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             1149 ; 226  |
                             1150 ; 227  |typedef union               
                             1151 ; 228  |{
                             1152 ; 229  |    struct {
                             1153 ; 230  |        int INV_USB_CLK            : 1;
                             1154 ; 231  |        int USB_DFF_BYPASS         : 1;
                             1155 ; 232  |        int HOLD_GND               : 1;
                             1156 ; 233  |        int ACKI                   : 1;
                             1157 ; 234  |        int ASD2X                  : 1;
                             1158 ; 235  |        int PCPCU                  : 1;
                             1159 ; 236  |        int PCPCD                  : 1;
                             1160 ; 237  |        int DCKI                   : 1;
                             1161 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             1162 ; 239  |        int PSRN                   : 1;
                             1163 ; 240  |        int FX2                    : 1;
                             1164 ; 241  |        int VCOS                   : 1;
                             1165 ; 242  |        int XBCO                   : 1;
                             1166 ; 243  |        int XBGC                   : 1;
                             1167 ; 244  |        int ADTHD                  : 1;
                             1168 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             1169 ; 246  |        int PWDADC                 : 1;
                             1170 ; 247  |        int MICBIAS1               : 1;
                             1171 ; 248  |        int EZD                    : 1;
                             1172 ; 249  |        int DZCDA                  : 1;
                             1173 ; 250  |        int DZCFM                  : 1;
                             1174 ; 251  |        int DZCLI                  : 1;
                             1175 ; 252  |        int DZCMI                  : 1;
                             1176 ; 253  |        int DZCMA                  : 1;
                             1177 ; 254  |    } B;
                             1178 ; 255  |    int I;
                             1179 ; 256  |    unsigned int U;
                             1180 ; 257  |} mix_tbr_type;
                             1181 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             1182 ; 259  |
                             1183 ; 260  |
                             1184 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             1185 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1186 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             1187 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             1188 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             1189 ; 266  |
                             1190 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             1191 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             1192 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             1193 ; 270  |
                             1194 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             1195 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             1196 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             1197 ; 274  |
                             1198 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             1199 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             1200 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             1201 ; 278  |
                             1202 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             1203 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             1204 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             1205 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             1206 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             1207 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             1208 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             1209 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             1210 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             1211 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             1212 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             1213 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             1214 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             1215 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             1216 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             1217 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             1218 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             1219 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             1220 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             1221 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             1222 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             1223 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             1224 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             1225 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             1226 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             1227 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             1228 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             1229 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             1230 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             1231 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             1232 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             1233 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             1234 ; 311  |
                             1235 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             1236 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             1237 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             1238 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             1239 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             1240 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             1241 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             1242 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             1243 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             1244 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             1245 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             1246 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             1247 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             1248 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             1249 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             1250 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             1251 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             1252 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             1253 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             1254 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             1255 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             1256 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             1257 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             1258 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             1259 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             1260 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             1261 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             1262 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             1263 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             1264 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             1265 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             1266 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             1267 ; 344  |
                             1268 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             1269 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1270 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             1271 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             1272 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             1273 ; 350  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1274 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             1275 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             1276 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             1277 ; 354  |
                             1278 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             1279 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             1280 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             1281 ; 358  |
                             1282 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             1283 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             1284 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             1285 ; 362  |
                             1286 ; 363  |
                             1287 ; 364  |typedef union               
                             1288 ; 365  |{
                             1289 ; 366  |    struct
                             1290 ; 367  |    {
                             1291 ; 368  |        unsigned MR :5;
                             1292 ; 369  |        int         :3;
                             1293 ; 370  |        unsigned ML :5;
                             1294 ; 371  |        int         :2;
                             1295 ; 372  |        int MUTE    :1;
                             1296 ; 373  |    } B;
                             1297 ; 374  |    int I;
                             1298 ; 375  |    unsigned int U;
                             1299 ; 376  |} mix_mastervr_type;
                             1300 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             1301 ; 378  |
                             1302 ; 379  |
                             1303 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             1304 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             1305 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             1306 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             1307 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             1308 ; 385  |
                             1309 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             1310 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             1311 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             1312 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             1313 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             1314 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             1315 ; 392  |
                             1316 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             1317 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             1318 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             1319 ; 396  |
                             1320 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             1321 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             1322 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             1323 ; 400  |
                             1324 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             1325 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             1326 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             1327 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             1328 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             1329 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             1330 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             1331 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             1332 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             1333 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             1334 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             1335 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             1336 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             1337 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             1338 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             1339 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             1340 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             1341 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             1342 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             1343 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             1344 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             1345 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             1346 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             1347 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             1348 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             1349 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             1350 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             1351 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             1352 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             1353 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             1354 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             1355 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             1356 ; 433  |
                             1357 ; 434  |typedef union               
                             1358 ; 435  |{
                             1359 ; 436  |    struct {
                             1360 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             1361 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             1362 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             1363 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             1364 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             1365 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             1366 ; 443  |    } B;
                             1367 ; 444  |    int I;
                             1368 ; 445  |    unsigned int U;
                             1369 ; 446  |} mix_micinvr_type;
                             1370 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             1371 ; 448  |
                             1372 ; 449  |
                             1373 ; 450  |
                             1374 ; 451  |
                             1375 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             1376 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             1377 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             1378 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             1379 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             1380 ; 457  |
                             1381 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             1382 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             1383 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             1384 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             1385 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             1386 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             1387 ; 464  |
                             1388 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             1389 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             1390 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             1391 ; 468  |
                             1392 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             1393 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             1394 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             1395 ; 472  |
                             1396 ; 473  |typedef union               
                             1397 ; 474  |{
                             1398 ; 475  |    struct {
                             1399 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             1400 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             1401 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             1402 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             1403 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             1404 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             1405 ; 482  |    } B;
                             1406 ; 483  |    int I;
                             1407 ; 484  |    unsigned int U;
                             1408 ; 485  |} mix_line1invr_type;
                             1409 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             1410 ; 487  |
                             1411 ; 488  |
                             1412 ; 489  |
                             1413 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             1414 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             1415 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             1416 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             1417 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             1418 ; 495  |
                             1419 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             1420 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             1421 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             1422 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             1423 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             1424 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             1425 ; 502  |
                             1426 ; 503  |
                             1427 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             1428 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             1429 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             1430 ; 507  |
                             1431 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             1432 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             1433 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             1434 ; 511  |
                             1435 ; 512  |typedef union               
                             1436 ; 513  |{
                             1437 ; 514  |    struct {
                             1438 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             1439 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             1440 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             1441 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             1442 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             1443 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             1444 ; 521  |    } B;
                             1445 ; 522  |    int I;
                             1446 ; 523  |    unsigned int U;
                             1447 ; 524  |} mix_line2invr_type;
                             1448 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             1449 ; 526  |
                             1450 ; 527  |
                             1451 ; 528  |
                             1452 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             1453 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             1454 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             1455 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             1456 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             1457 ; 534  |
                             1458 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             1459 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             1460 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             1461 ; 538  |
                             1462 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             1463 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             1464 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             1465 ; 542  |
                             1466 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             1467 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             1468 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             1469 ; 546  |
                             1470 ; 547  |typedef union               
                             1471 ; 548  |{
                             1472 ; 549  |    struct {
                             1473 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             1474 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             1475 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             1476 ; 553  |    } B;
                             1477 ; 554  |    int I;
                             1478 ; 555  |    unsigned int U;
                             1479 ; 556  |} mix_dacinvr_type;
                             1480 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             1481 ; 558  |
                             1482 ; 559  |
                             1483 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             1484 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             1485 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             1486 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             1487 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             1488 ; 565  |
                             1489 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             1490 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             1491 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             1492 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             1493 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             1494 ; 571  |
                             1495 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             1496 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             1497 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             1498 ; 575  |
                             1499 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             1500 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             1501 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             1502 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             1503 ; 580  |
                             1504 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             1505 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             1506 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             1507 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             1508 ; 585  |
                             1509 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             1510 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             1511 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETMASK)
                             1512 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             1513 ; 590  |
                             1514 ; 591  |typedef union               
                             1515 ; 592  |{
                             1516 ; 593  |    struct {
                             1517 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             1518 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             1519 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             1520 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             1521 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             1522 ; 599  |    } B;
                             1523 ; 600  |    int I;
                             1524 ; 601  |    unsigned int U;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1525 ; 602  |} mix_recselr_type;
                             1526 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             1527 ; 604  |
                             1528 ; 605  |
                             1529 ; 606  |
                             1530 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             1531 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             1532 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             1533 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             1534 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             1535 ; 612  |
                             1536 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             1537 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             1538 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             1539 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             1540 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             1541 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             1542 ; 619  |
                             1543 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             1544 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             1545 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             1546 ; 623  |
                             1547 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             1548 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             1549 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             1550 ; 627  |
                             1551 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             1552 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             1553 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             1554 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             1555 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             1556 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             1557 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             1558 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             1559 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             1560 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             1561 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             1562 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             1563 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             1564 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             1565 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             1566 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             1567 ; 644  |
                             1568 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             1569 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             1570 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             1571 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             1572 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             1573 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             1574 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             1575 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             1576 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             1577 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             1578 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             1579 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             1580 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             1581 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             1582 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             1583 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             1584 ; 661  |
                             1585 ; 662  |typedef union               
                             1586 ; 663  |{
                             1587 ; 664  |    struct {
                             1588 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             1589 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             1590 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             1591 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             1592 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             1593 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             1594 ; 671  |    } B;
                             1595 ; 672  |    int I;
                             1596 ; 673  |    unsigned int U;
                             1597 ; 674  |} mix_adcgainr_type;
                             1598 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             1599 ; 676  |
                             1600 ; 677  |
                             1601 ; 678  |
                             1602 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             1603 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             1604 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             1605 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             1606 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             1607 ; 684  |
                             1608 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             1609 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             1610 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             1611 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             1612 ; 689  |
                             1613 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             1614 ; 691  |
                             1615 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             1616 ; 693  |
                             1617 ; 694  |typedef union               
                             1618 ; 695  |{
                             1619 ; 696  |    struct {
                             1620 ; 697  |                int                     : 9;
                             1621 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             1622 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             1623 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             1624 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             1625 ; 702  |    } B;
                             1626 ; 703  |    int I;
                             1627 ; 704  |    unsigned int U;
                             1628 ; 705  |} mix_pwrdnr_type;
                             1629 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             1630 ; 707  |
                             1631 ; 708  |
                             1632 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             1633 ; 710  |
                             1634 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             1635 ; 712  |
                             1636 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             1637 ; 714  |
                             1638 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             1639 ; 716  |
                             1640 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             1641 ; 718  |
                             1642 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             1643 ; 720  |
                             1644 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             1645 ; 722  |
                             1646 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             1647 ; 724  |
                             1648 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             1649 ; 726  |
                             1650 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             1651 ; 728  |
                             1652 ; 729  |
                             1653 ; 730  |
                             1654 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             1655 ; 732  |
                             1656 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             1657 ; 734  |
                             1658 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             1659 ; 736  |
                             1660 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             1661 ; 738  |
                             1662 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             1663 ; 740  |
                             1664 ; 741  |
                             1665 ; 742  |
                             1666 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_TEST_DAC_CHOP_CLK_BITPOS)        
                             1667 ; 744  |
                             1668 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             1669 ; 746  |
                             1670 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             1671 ; 748  |
                             1672 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_CFG_BITPOS) 
                             1673 ; 750  |
                             1674 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_BITPOS) 
                             1675 ; 752  |
                             1676 ; 753  |
                             1677 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             1678 ; 755  |
                             1679 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)     
                             1680 ; 757  |
                             1681 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             1682 ; 759  |
                             1683 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             1684 ; 761  |
                             1685 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             1686 ; 763  |
                             1687 ; 764  |
                             1688 ; 765  |typedef union               
                             1689 ; 766  |{
                             1690 ; 767  |    struct {
                             1691 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             1692 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             1693 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             1694 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             1695 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             1696 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             1697 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             1698 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             1699 ; 776  |    } B;
                             1700 ; 777  |    int I;
                             1701 ; 778  |    unsigned int U;
                             1702 ; 779  |} mix_test_type;
                             1703 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Analog Persistent Config Register */
                             1704 ; 781  |
                             1705 ; 782  |
                             1706 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             1707 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             1708 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             1709 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             1710 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             1711 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             1712 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             1713 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             1714 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             1715 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             1716 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             1717 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             1718 ; 795  |
                             1719 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             1720 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             1721 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             1722 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             1723 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             1724 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             1725 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             1726 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             1727 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             1728 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             1729 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             1730 ; 807  |
                             1731 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_DACVBGVAL_BITPOS)
                             1732 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_BITPOS)
                             1733 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_BITPOS)
                             1734 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS)
                             1735 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCREFV_BITPOS)
                             1736 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_BITPOS)
                             1737 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDWNS_BITPOS)
                             1738 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BITPOS)
                             1739 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BITPOS)
                             1740 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_PWR_BITPOS)
                             1741 ; 818  |
                             1742 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             1743 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             1744 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             1745 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             1746 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             1747 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             1748 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             1749 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             1750 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             1751 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             1752 ; 829  |
                             1753 ; 830  |typedef union               
                             1754 ; 831  |{
                             1755 ; 832  |    struct {
                             1756 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             1757 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             1758 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             1759 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             1760 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             1761 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             1762 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             1763 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             1764 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             1765 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             1766 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             1767 ; 844  |    } B;
                             1768 ; 845  |    int I;
                             1769 ; 846  |    unsigned int U;
                             1770 ; 847  |} ref_ctrl_type;
                             1771 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             1772 ; 849  |
                             1773 ; 850  |
                             1774 ; 851  |
                             1775 ; 852  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1776 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             1777 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             1778 ; 855  |//////  DAC Registers
                             1779 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             1780 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             1781 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             1782 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             1783 ; 860  |
                             1784 ; 861  |
                             1785 ; 862  |
                             1786 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             1787 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             1788 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             1789 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             1790 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             1791 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             1792 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             1793 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             1794 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             1795 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             1796 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             1797 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             1798 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             1799 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             1800 ; 877  |
                             1801 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             1802 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             1803 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             1804 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             1805 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             1806 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             1807 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             1808 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             1809 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             1810 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             1811 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             1812 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             1813 ; 890  |
                             1814 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             1815 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             1816 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             1817 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             1818 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             1819 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             1820 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             1821 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             1822 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             1823 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             1824 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             1825 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             1826 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             1827 ; 904  |
                             1828 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             1829 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             1830 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             1831 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             1832 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             1833 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             1834 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             1835 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             1836 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             1837 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             1838 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             1839 ; 916  |
                             1840 ; 917  |
                             1841 ; 918  |typedef union               
                             1842 ; 919  |{
                             1843 ; 920  |    struct {
                             1844 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             1845 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             1846 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             1847 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             1848 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             1849 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             1850 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             1851 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             1852 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             1853 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             1854 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             1855 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             1856 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             1857 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             1858 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             1859 ; 936  |    } B;
                             1860 ; 937  |    int I;
                             1861 ; 938  |    unsigned int U;
                             1862 ; 939  |} dac_csr_type;
                             1863 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             1864 ; 941  |
                             1865 ; 942  |
                             1866 ; 943  |
                             1867 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             1868 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             1869 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             1870 ; 947  |
                             1871 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             1872 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             1873 ; 950  |
                             1874 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             1875 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             1876 ; 953  |
                             1877 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             1878 ; 955  |
                             1879 ; 956  |typedef union               
                             1880 ; 957  |{
                             1881 ; 958  |    struct {
                             1882 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             1883 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             1884 ; 961  |    } B;
                             1885 ; 962  |    int I;
                             1886 ; 963  |    unsigned int U;
                             1887 ; 964  |} dac_srr_type;
                             1888 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             1889 ; 966  |
                             1890 ; 967  |
                             1891 ; 968  |
                             1892 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             1893 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             1894 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             1895 ; 972  |
                             1896 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             1897 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             1898 ; 975  |
                             1899 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             1900 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                             1901 ; 978  |
                             1902 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             1903 ; 980  |
                             1904 ; 981  |typedef union               
                             1905 ; 982  |{
                             1906 ; 983  |    struct {
                             1907 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             1908 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             1909 ; 986  |    } B;
                             1910 ; 987  |    int I;
                             1911 ; 988  |    unsigned int U;
                             1912 ; 989  |} dac_wcr_type;
                             1913 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             1914 ; 991  |
                             1915 ; 992  |
                             1916 ; 993  |
                             1917 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             1918 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             1919 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             1920 ; 997  |
                             1921 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             1922 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             1923 ; 1000 |
                             1924 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             1925 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                             1926 ; 1003 |
                             1927 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             1928 ; 1005 |
                             1929 ; 1006 |typedef union               
                             1930 ; 1007 |{
                             1931 ; 1008 |    struct {
                             1932 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             1933 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             1934 ; 1011 |    } B;
                             1935 ; 1012 |    int I;
                             1936 ; 1013 |    unsigned int U;
                             1937 ; 1014 |} dac_cpr_type;
                             1938 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             1939 ; 1016 |
                             1940 ; 1017 |
                             1941 ; 1018 |
                             1942 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             1943 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             1944 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             1945 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             1946 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             1947 ; 1024 |
                             1948 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             1949 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             1950 ; 1027 |
                             1951 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             1952 ; 1029 |
                             1953 ; 1030 |typedef union               
                             1954 ; 1031 |{
                             1955 ; 1032 |    struct {
                             1956 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             1957 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             1958 ; 1035 |    } B;
                             1959 ; 1036 |    int I;
                             1960 ; 1037 |    unsigned int U;
                             1961 ; 1038 |} dac_mr_type;
                             1962 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             1963 ; 1040 |
                             1964 ; 1041 |
                             1965 ; 1042 |
                             1966 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             1967 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             1968 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             1969 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             1970 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             1971 ; 1048 |
                             1972 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             1973 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                             1974 ; 1051 |
                             1975 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             1976 ; 1053 |
                             1977 ; 1054 |typedef union               
                             1978 ; 1055 |{
                             1979 ; 1056 |    struct {
                             1980 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             1981 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             1982 ; 1059 |    } B;
                             1983 ; 1060 |    int I;
                             1984 ; 1061 |    unsigned int U;
                             1985 ; 1062 |} dac_bar_type;
                             1986 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             1987 ; 1064 |
                             1988 ; 1065 |
                             1989 ; 1066 |
                             1990 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             1991 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             1992 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             1993 ; 1070 |
                             1994 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             1995 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             1996 ; 1073 |
                             1997 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                             1998 ; 1075 |
                             1999 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             2000 ; 1077 |
                             2001 ; 1078 |typedef union               
                             2002 ; 1079 |{
                             2003 ; 1080 |    struct {
                             2004 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             2005 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             2006 ; 1083 |    } B;
                             2007 ; 1084 |    int I;
                             2008 ; 1085 |    unsigned int U;
                             2009 ; 1086 |} dac_icr_type;
                             2010 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             2011 ; 1088 |
                             2012 ; 1089 |
                             2013 ; 1090 |
                             2014 ; 1091 |
                             2015 ; 1092 |
                             2016 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             2017 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             2018 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             2019 ; 1096 |//////  ADC Registers
                             2020 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             2021 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             2022 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             2023 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             2024 ; 1101 |
                             2025 ; 1102 |
                             2026 ; 1103 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2027 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             2028 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             2029 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             2030 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             2031 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             2032 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             2033 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             2034 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             2035 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             2036 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             2037 ; 1114 |
                             2038 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             2039 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             2040 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             2041 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             2042 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             2043 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             2044 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             2045 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             2046 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             2047 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             2048 ; 1125 |
                             2049 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             2050 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             2051 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             2052 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             2053 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             2054 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS)        
                             2055 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BITPOS)        
                             2056 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             2057 ; 1134 |
                             2058 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             2059 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             2060 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             2061 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             2062 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             2063 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             2064 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             2065 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             2066 ; 1143 |
                             2067 ; 1144 |typedef union               
                             2068 ; 1145 |{
                             2069 ; 1146 |    struct {
                             2070 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             2071 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             2072 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             2073 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             2074 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             2075 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             2076 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             2077 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             2078 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             2079 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             2080 ; 1157 |    } B;
                             2081 ; 1158 |    int I;
                             2082 ; 1159 |    unsigned int U;
                             2083 ; 1160 |} adc_csr_type;
                             2084 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             2085 ; 1162 |
                             2086 ; 1163 |
                             2087 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             2088 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             2089 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             2090 ; 1167 |
                             2091 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             2092 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             2093 ; 1170 |
                             2094 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                             2095 ; 1172 |
                             2096 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             2097 ; 1174 |
                             2098 ; 1175 |typedef union               
                             2099 ; 1176 |{
                             2100 ; 1177 |    struct {
                             2101 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             2102 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             2103 ; 1180 |    } B;
                             2104 ; 1181 |    int I;
                             2105 ; 1182 |    unsigned int U;
                             2106 ; 1183 |} adc_wcr_type;
                             2107 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             2108 ; 1185 |
                             2109 ; 1186 |
                             2110 ; 1187 |
                             2111 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             2112 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             2113 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             2114 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             2115 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             2116 ; 1193 |
                             2117 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             2118 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                             2119 ; 1196 |
                             2120 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             2121 ; 1198 |
                             2122 ; 1199 |typedef union               
                             2123 ; 1200 |{
                             2124 ; 1201 |    struct {
                             2125 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             2126 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             2127 ; 1204 |    } B;
                             2128 ; 1205 |    int I;
                             2129 ; 1206 |    unsigned int U;
                             2130 ; 1207 |} adc_bar_type;
                             2131 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             2132 ; 1209 |
                             2133 ; 1210 |
                             2134 ; 1211 |
                             2135 ; 1212 |
                             2136 ; 1213 |
                             2137 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             2138 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             2139 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             2140 ; 1217 |
                             2141 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             2142 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             2143 ; 1220 |
                             2144 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                             2145 ; 1222 |
                             2146 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             2147 ; 1224 |
                             2148 ; 1225 |typedef union               
                             2149 ; 1226 |{
                             2150 ; 1227 |    struct {
                             2151 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             2152 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             2153 ; 1230 |    } B;
                             2154 ; 1231 |    int I;
                             2155 ; 1232 |    unsigned int U;
                             2156 ; 1233 |} adc_cpr_type;
                             2157 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             2158 ; 1235 |
                             2159 ; 1236 |
                             2160 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             2161 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             2162 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             2163 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             2164 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             2165 ; 1242 |
                             2166 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             2167 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             2168 ; 1245 |
                             2169 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             2170 ; 1247 |
                             2171 ; 1248 |typedef union               
                             2172 ; 1249 |{
                             2173 ; 1250 |    struct {
                             2174 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             2175 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             2176 ; 1253 |    } B;
                             2177 ; 1254 |    int I;
                             2178 ; 1255 |    unsigned int U;
                             2179 ; 1256 |} adc_mr_type;
                             2180 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             2181 ; 1258 |
                             2182 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             2183 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             2184 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             2185 ; 1262 |
                             2186 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             2187 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             2188 ; 1265 |
                             2189 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             2190 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             2191 ; 1268 |
                             2192 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             2193 ; 1270 |
                             2194 ; 1271 |typedef union               
                             2195 ; 1272 |{
                             2196 ; 1273 |    struct {
                             2197 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             2198 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             2199 ; 1276 |    } B;
                             2200 ; 1277 |    int I;
                             2201 ; 1278 |    unsigned int U;
                             2202 ; 1279 |} adc_srr_type;
                             2203 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             2204 ; 1281 |
                             2205 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             2206 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             2207 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             2208 ; 1285 |
                             2209 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             2210 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             2211 ; 1288 |
                             2212 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                             2213 ; 1290 |
                             2214 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             2215 ; 1292 |
                             2216 ; 1293 |typedef union               
                             2217 ; 1294 |{
                             2218 ; 1295 |    struct {
                             2219 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             2220 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             2221 ; 1298 |    } B;
                             2222 ; 1299 |    int I;
                             2223 ; 1300 |    unsigned int U;
                             2224 ; 1301 |} adc_icr_type;
                             2225 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             2226 ; 1303 |
                             2227 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             2228 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             2229 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             2230 ; 1307 |
                             2231 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             2232 ; 1309 |
                             2233 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             2234 ; 1311 |
                             2235 ; 1312 |#endif
                             2236 ; 1313 |
                             2237 
                             2239 
                             2240 ; 20   |#include "regsdcdc.h"
                             2241 
                             2243 
                             2244 ; 1    |#if !(defined(regsdcdcinc))
                             2245 ; 2    |
                             2246 ; 3    |#define regssysteminc 1
                             2247 ; 4    |
                             2248 ; 5    |
                             2249 ; 6    |
                             2250 ; 7    |#include "types.h"
                             2251 
                             2253 
                             2254 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2255 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2256 ; 3    |//
                             2257 ; 4    |// Filename: types.h
                             2258 ; 5    |// Description: Standard data types
                             2259 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2260 ; 7    |
                             2261 ; 8    |#ifndef _TYPES_H
                             2262 ; 9    |#define _TYPES_H
                             2263 ; 10   |
                             2264 ; 11   |// TODO:  move this outta here!
                             2265 ; 12   |#if !defined(NOERROR)
                             2266 ; 13   |#define NOERROR 0
                             2267 ; 14   |#define SUCCESS 0
                             2268 ; 15   |#endif 
                             2269 ; 16   |#if !defined(SUCCESS)
                             2270 ; 17   |#define SUCCESS  0
                             2271 ; 18   |#endif
                             2272 ; 19   |#if !defined(ERROR)
                             2273 ; 20   |#define ERROR   -1
                             2274 ; 21   |#endif
                             2275 ; 22   |#if !defined(FALSE)
                             2276 ; 23   |#define FALSE 0
                             2277 ; 24   |#endif
                             2278 ; 25   |#if !defined(TRUE)
                             2279 ; 26   |#define TRUE  1
                             2280 ; 27   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2281 ; 28   |
                             2282 ; 29   |#if !defined(NULL)
                             2283 ; 30   |#define NULL 0
                             2284 ; 31   |#endif
                             2285 ; 32   |
                             2286 ; 33   |#define MAX_INT     0x7FFFFF
                             2287 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2288 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2289 ; 36   |#define MAX_ULONG   (-1) 
                             2290 ; 37   |
                             2291 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2292 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2293 ; 40   |
                             2294 ; 41   |
                             2295 ; 42   |#define BYTE    unsigned char       // btVarName
                             2296 ; 43   |#define CHAR    signed char         // cVarName
                             2297 ; 44   |#define USHORT  unsigned short      // usVarName
                             2298 ; 45   |#define SHORT   unsigned short      // sVarName
                             2299 ; 46   |#define WORD    unsigned int        // wVarName
                             2300 ; 47   |#define INT     signed int          // iVarName
                             2301 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2302 ; 49   |#define LONG    signed long         // lVarName
                             2303 ; 50   |#define BOOL    unsigned int        // bVarName
                             2304 ; 51   |#define FRACT   _fract              // frVarName
                             2305 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2306 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2307 ; 54   |#define FLOAT   float               // fVarName
                             2308 ; 55   |#define DBL     double              // dVarName
                             2309 ; 56   |#define ENUM    enum                // eVarName
                             2310 ; 57   |#define CMX     _complex            // cmxVarName
                             2311 ; 58   |typedef WORD UCS3;                   // 
                             2312 ; 59   |
                             2313 ; 60   |#define UINT16  unsigned short
                             2314 ; 61   |#define UINT8   unsigned char   
                             2315 ; 62   |#define UINT32  unsigned long
                             2316 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2317 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2318 ; 65   |#define WCHAR   UINT16
                             2319 ; 66   |
                             2320 ; 67   |//UINT128 is 16 bytes or 6 words
                             2321 ; 68   |typedef struct UINT128_3500 {   
                             2322 ; 69   |    int val[6];     
                             2323 ; 70   |} UINT128_3500;
                             2324 ; 71   |
                             2325 ; 72   |#define UINT128   UINT128_3500
                             2326 ; 73   |
                             2327 ; 74   |// Little endian word packed byte strings:   
                             2328 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2329 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2330 ; 77   |// Little endian word packed byte strings:   
                             2331 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2332 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2333 ; 80   |
                             2334 ; 81   |// Declare Memory Spaces To Use When Coding
                             2335 ; 82   |// A. Sector Buffers
                             2336 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2337 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2338 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2339 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2340 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2341 ; 88   |// B. Media DDI Memory
                             2342 ; 89   |#define MEDIA_DDI_MEM _Y
                             2343 ; 90   |
                             2344 ; 91   |
                             2345 ; 92   |
                             2346 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2347 ; 94   |// Examples of circular pointers:
                             2348 ; 95   |//    INT CIRC cpiVarName
                             2349 ; 96   |//    DWORD CIRC cpdwVarName
                             2350 ; 97   |
                             2351 ; 98   |#define RETCODE INT                 // rcVarName
                             2352 ; 99   |
                             2353 ; 100  |// generic bitfield structure
                             2354 ; 101  |struct Bitfield {
                             2355 ; 102  |    unsigned int B0  :1;
                             2356 ; 103  |    unsigned int B1  :1;
                             2357 ; 104  |    unsigned int B2  :1;
                             2358 ; 105  |    unsigned int B3  :1;
                             2359 ; 106  |    unsigned int B4  :1;
                             2360 ; 107  |    unsigned int B5  :1;
                             2361 ; 108  |    unsigned int B6  :1;
                             2362 ; 109  |    unsigned int B7  :1;
                             2363 ; 110  |    unsigned int B8  :1;
                             2364 ; 111  |    unsigned int B9  :1;
                             2365 ; 112  |    unsigned int B10 :1;
                             2366 ; 113  |    unsigned int B11 :1;
                             2367 ; 114  |    unsigned int B12 :1;
                             2368 ; 115  |    unsigned int B13 :1;
                             2369 ; 116  |    unsigned int B14 :1;
                             2370 ; 117  |    unsigned int B15 :1;
                             2371 ; 118  |    unsigned int B16 :1;
                             2372 ; 119  |    unsigned int B17 :1;
                             2373 ; 120  |    unsigned int B18 :1;
                             2374 ; 121  |    unsigned int B19 :1;
                             2375 ; 122  |    unsigned int B20 :1;
                             2376 ; 123  |    unsigned int B21 :1;
                             2377 ; 124  |    unsigned int B22 :1;
                             2378 ; 125  |    unsigned int B23 :1;
                             2379 ; 126  |};
                             2380 ; 127  |
                             2381 ; 128  |union BitInt {
                             2382 ; 129  |        struct Bitfield B;
                             2383 ; 130  |        int        I;
                             2384 ; 131  |};
                             2385 ; 132  |
                             2386 ; 133  |#define MAX_MSG_LENGTH 10
                             2387 ; 134  |struct CMessage
                             2388 ; 135  |{
                             2389 ; 136  |        unsigned int m_uLength;
                             2390 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2391 ; 138  |};
                             2392 ; 139  |
                             2393 ; 140  |typedef struct {
                             2394 ; 141  |    WORD m_wLength;
                             2395 ; 142  |    WORD m_wMessage;
                             2396 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2397 ; 144  |} Message;
                             2398 ; 145  |
                             2399 ; 146  |struct MessageQueueDescriptor
                             2400 ; 147  |{
                             2401 ; 148  |        int *m_pBase;
                             2402 ; 149  |        int m_iModulo;
                             2403 ; 150  |        int m_iSize;
                             2404 ; 151  |        int *m_pHead;
                             2405 ; 152  |        int *m_pTail;
                             2406 ; 153  |};
                             2407 ; 154  |
                             2408 ; 155  |struct ModuleEntry
                             2409 ; 156  |{
                             2410 ; 157  |    int m_iSignaledEventMask;
                             2411 ; 158  |    int m_iWaitEventMask;
                             2412 ; 159  |    int m_iResourceOfCode;
                             2413 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2414 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             2415 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2416 ; 163  |    int m_uTimeOutHigh;
                             2417 ; 164  |    int m_uTimeOutLow;
                             2418 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2419 ; 166  |};
                             2420 ; 167  |
                             2421 ; 168  |union WaitMask{
                             2422 ; 169  |    struct B{
                             2423 ; 170  |        unsigned int m_bNone     :1;
                             2424 ; 171  |        unsigned int m_bMessage  :1;
                             2425 ; 172  |        unsigned int m_bTimer    :1;
                             2426 ; 173  |        unsigned int m_bButton   :1;
                             2427 ; 174  |    } B;
                             2428 ; 175  |    int I;
                             2429 ; 176  |} ;
                             2430 ; 177  |
                             2431 ; 178  |
                             2432 ; 179  |struct Button {
                             2433 ; 180  |        WORD wButtonEvent;
                             2434 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2435 ; 182  |};
                             2436 ; 183  |
                             2437 ; 184  |struct Message {
                             2438 ; 185  |        WORD wMsgLength;
                             2439 ; 186  |        WORD wMsgCommand;
                             2440 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2441 ; 188  |};
                             2442 ; 189  |
                             2443 ; 190  |union EventTypes {
                             2444 ; 191  |        struct CMessage msg;
                             2445 ; 192  |        struct Button Button ;
                             2446 ; 193  |        struct Message Message;
                             2447 ; 194  |};
                             2448 ; 195  |
                             2449 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2450 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2451 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2452 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2453 ; 200  |
                             2454 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2455 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2456 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2457 ; 204  |
                             2458 ; 205  |#if DEBUG
                             2459 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2460 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2461 ; 208  |#else 
                             2462 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             2463 ; 210  |#define DebugBuildAssert(x)    
                             2464 ; 211  |#endif
                             2465 ; 212  |
                             2466 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2467 ; 214  |//  #pragma asm
                             2468 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2469 ; 216  |//  #pragma endasm
                             2470 ; 217  |
                             2471 ; 218  |
                             2472 ; 219  |#ifdef COLOR_262K
                             2473 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             2474 ; 221  |#elif defined(COLOR_65K)
                             2475 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             2476 ; 223  |#else
                             2477 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             2478 ; 225  |#endif
                             2479 ; 226  |    
                             2480 ; 227  |#endif // #ifndef _TYPES_H
                             2481 
                             2483 
                             2484 ; 8    |
                             2485 ; 9    |
                             2486 ; 10   |
                             2487 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2488 ; 12   |
                             2489 ; 13   |//   SYSTEM STMP Registers 
                             2490 ; 14   |//      Last Edited 2.19.2003 M. May
                             2491 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2492 ; 16   |
                             2493 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             2494 ; 18   |
                             2495 ; 19   |
                             2496 ; 20   |
                             2497 ; 21   |
                             2498 ; 22   |
                             2499 ; 23   |
                             2500 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             2501 ; 25   |
                             2502 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             2503 ; 27   |
                             2504 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             2505 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             2506 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             2507 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             2508 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             2509 ; 33   |
                             2510 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             2511 ; 35   |
                             2512 ; 36   |
                             2513 ; 37   |
                             2514 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             2515 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             2516 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             2517 ; 41   |
                             2518 ; 42   |
                             2519 ; 43   |
                             2520 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBU_BITPOS)        
                             2521 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBO_BITPOS) 
                             2522 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NLEV_BITPOS)  
                             2523 ; 47   |
                             2524 ; 48   |
                             2525 ; 49   |
                             2526 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             2527 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             2528 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             2529 ; 53   |
                             2530 ; 54   |
                             2531 ; 55   |
                             2532 ; 56   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2533 ; 57   |
                             2534 ; 58   |typedef union               
                             2535 ; 59   |{
                             2536 ; 60   |    struct {
                             2537 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             2538 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             2539 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             2540 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             2541 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             2542 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             2543 ; 67   |    } B;
                             2544 ; 68   |    unsigned int I;
                             2545 ; 69   |} dcdc1_ctrl0_type;
                             2546 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* DcDc#1 Limit Level Register */
                             2547 ; 71   |
                             2548 ; 72   |
                             2549 ; 73   |
                             2550 ; 74   |
                             2551 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             2552 ; 76   |
                             2553 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             2554 ; 78   |
                             2555 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             2556 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             2557 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             2558 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             2559 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             2560 ; 84   |
                             2561 ; 85   |
                             2562 ; 86   |
                             2563 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             2564 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             2565 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             2566 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             2567 ; 91   |
                             2568 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS)        
                             2569 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS) 
                             2570 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FFOR_BITPOS)  
                             2571 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CTRL1_PFMCTRL_BITPOS)   
                             2572 ; 96   |
                             2573 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             2574 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             2575 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             2576 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             2577 ; 101  |
                             2578 ; 102  |
                             2579 ; 103  |typedef union               
                             2580 ; 104  |{
                             2581 ; 105  |    struct {
                             2582 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             2583 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             2584 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2585 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             2586 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2587 ; 111  |    } B;
                             2588 ; 112  |    unsigned int I;
                             2589 ; 113  |} dcdc1_ctrl1_type;
                             2590 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* DcDc#1 Ctrl #1 Register */
                             2591 ; 115  |
                             2592 ; 116  |
                             2593 ; 117  |
                             2594 ; 118  |
                             2595 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             2596 ; 120  |
                             2597 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             2598 ; 122  |
                             2599 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             2600 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             2601 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             2602 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             2603 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             2604 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             2605 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             2606 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             2607 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             2608 ; 132  |
                             2609 ; 133  |
                             2610 ; 134  |
                             2611 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             2612 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             2613 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             2614 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             2615 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             2616 ; 140  |
                             2617 ; 141  |
                             2618 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             2619 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             2620 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             2621 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             2622 ; 146  |
                             2623 ; 147  |
                             2624 ; 148  |
                             2625 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)     
                             2626 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK) 
                             2627 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK)  
                             2628 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK)  
                             2629 ; 153  |
                             2630 ; 154  |
                             2631 ; 155  |typedef union               
                             2632 ; 156  |{
                             2633 ; 157  |    struct {
                             2634 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             2635 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             2636 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             2637 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             2638 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             2639 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             2640 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             2641 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             2642 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             2643 ; 167  |    } B;
                             2644 ; 168  |    unsigned int I;
                             2645 ; 169  |} dcdc_vddio_type;
                             2646 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* DcDc VDDIO Register */
                             2647 ; 171  |
                             2648 ; 172  |
                             2649 ; 173  |
                             2650 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             2651 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             2652 ; 176  |
                             2653 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             2654 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             2655 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             2656 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             2657 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             2658 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             2659 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             2660 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             2661 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             2662 ; 186  |
                             2663 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             2664 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             2665 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             2666 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             2667 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             2668 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             2669 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             2670 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             2671 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             2672 ; 196  |
                             2673 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)     
                             2674 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             2675 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)  
                             2676 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)  
                             2677 ; 201  |
                             2678 ; 202  |typedef union               
                             2679 ; 203  |{
                             2680 ; 204  |    struct {
                             2681 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             2682 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             2683 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             2684 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             2685 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             2686 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             2687 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             2688 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             2689 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             2690 ; 214  |    } B;
                             2691 ; 215  |   unsigned int I;
                             2692 ; 216  |        unsigned U;
                             2693 ; 217  |} dcdc_vddd_type;
                             2694 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc VDDD Register */
                             2695 ; 219  |
                             2696 ; 220  |
                             2697 ; 221  |
                             2698 ; 222  |
                             2699 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             2700 ; 224  |
                             2701 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             2702 ; 226  |
                             2703 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             2704 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             2705 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             2706 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             2707 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             2708 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             2709 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             2710 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             2711 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             2712 ; 236  |
                             2713 ; 237  |
                             2714 ; 238  |
                             2715 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             2716 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             2717 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             2718 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             2719 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             2720 ; 244  |
                             2721 ; 245  |
                             2722 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             2723 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             2724 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             2725 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             2726 ; 250  |
                             2727 ; 251  |
                             2728 ; 252  |
                             2729 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)     
                             2730 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             2731 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)  
                             2732 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)  
                             2733 ; 257  |
                             2734 ; 258  |
                             2735 ; 259  |typedef union               
                             2736 ; 260  |{
                             2737 ; 261  |    struct {
                             2738 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             2739 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             2740 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             2741 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             2742 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             2743 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             2744 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             2745 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             2746 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             2747 ; 271  |    } B;
                             2748 ; 272  |    unsigned int I;
                             2749 ; 273  |} dcdc_vdda_type;
                             2750 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc VDDA Register */
                             2751 ; 275  |
                             2752 ; 276  |
                             2753 ; 277  |
                             2754 ; 278  |
                             2755 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             2756 ; 280  |
                             2757 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             2758 ; 282  |
                             2759 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             2760 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             2761 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             2762 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             2763 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             2764 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             2765 ; 289  |
                             2766 ; 290  |
                             2767 ; 291  |
                             2768 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             2769 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             2770 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             2771 ; 295  |
                             2772 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBU_BITPOS)        
                             2773 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBO_BITPOS) 
                             2774 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NLEV_BITPOS)  
                             2775 ; 299  |
                             2776 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             2777 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             2778 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             2779 ; 303  |
                             2780 ; 304  |
                             2781 ; 305  |typedef union               
                             2782 ; 306  |{
                             2783 ; 307  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2784 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             2785 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             2786 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             2787 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             2788 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             2789 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             2790 ; 314  |    } B;
                             2791 ; 315  |    unsigned int I;
                             2792 ; 316  |} dcdc2_ctrl0_type; 
                             2793 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* DcDc#2 Limit Level Register */
                             2794 ; 318  |
                             2795 ; 319  |
                             2796 ; 320  |
                             2797 ; 321  |
                             2798 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             2799 ; 323  |
                             2800 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             2801 ; 325  |
                             2802 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             2803 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             2804 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             2805 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             2806 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             2807 ; 331  |
                             2808 ; 332  |
                             2809 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             2810 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             2811 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             2812 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             2813 ; 337  |
                             2814 ; 338  |
                             2815 ; 339  |
                             2816 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS)        
                             2817 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS) 
                             2818 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FFOR_BITPOS)  
                             2819 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CTRL1_PFMCTRL_BITPOS)  
                             2820 ; 344  |
                             2821 ; 345  |
                             2822 ; 346  |
                             2823 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             2824 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             2825 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             2826 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             2827 ; 351  |
                             2828 ; 352  |
                             2829 ; 353  |typedef union               
                             2830 ; 354  |{
                             2831 ; 355  |    struct {
                             2832 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             2833 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                             2834 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             2835 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             2836 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             2837 ; 361  |    } B;
                             2838 ; 362  |    unsigned int I;
                             2839 ; 363  |} dcdc2_ctrl1_type;
                             2840 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* DcDc#2 Ctrl Register #1 */
                             2841 ; 365  |
                             2842 ; 366  |
                             2843 ; 367  |
                             2844 ; 368  |
                             2845 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             2846 ; 370  |
                             2847 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             2848 ; 372  |
                             2849 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             2850 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             2851 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             2852 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             2853 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             2854 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             2855 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             2856 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             2857 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             2858 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             2859 ; 383  |
                             2860 ; 384  |
                             2861 ; 385  |
                             2862 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             2863 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             2864 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             2865 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             2866 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             2867 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             2868 ; 392  |
                             2869 ; 393  |
                             2870 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWRUP_BITPOS)        
                             2871 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC1_START_COUNT_BITPOS)        
                             2872 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BITPOS) 
                             2873 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWRUP_BITPOS)        
                             2874 ; 398  |
                             2875 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC2_START_COUNT_BITPOS)        
                             2876 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BITPOS) 
                             2877 ; 401  |
                             2878 ; 402  |
                             2879 ; 403  |
                             2880 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             2881 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             2882 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             2883 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             2884 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             2885 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             2886 ; 410  |
                             2887 ; 411  |
                             2888 ; 412  |typedef union               
                             2889 ; 413  |{
                             2890 ; 414  |    struct {
                             2891 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             2892 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             2893 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             2894 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             2895 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             2896 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             2897 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             2898 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             2899 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             2900 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             2901 ; 425  |    } B;
                             2902 ; 426  |    unsigned int I;
                             2903 ; 427  |} speed_type;
                             2904 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measurement Register */
                             2905 ; 429  |
                             2906 ; 430  |
                             2907 ; 431  |
                             2908 ; 432  |
                             2909 ; 433  |
                             2910 ; 434  |
                             2911 ; 435  |
                             2912 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             2913 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             2914 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             2915 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             2916 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             2917 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             2918 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             2919 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             2920 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             2921 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             2922 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             2923 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             2924 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             2925 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             2926 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             2927 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             2928 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             2929 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             2930 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             2931 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             2932 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             2933 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             2934 ; 458  |
                             2935 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             2936 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             2937 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             2938 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             2939 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             2940 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             2941 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             2942 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             2943 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             2944 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             2945 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             2946 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             2947 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             2948 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             2949 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             2950 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             2951 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             2952 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             2953 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             2954 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             2955 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             2956 ; 480  |
                             2957 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)
                             2958 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             2959 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1)<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             2960 ; 484  |
                             2961 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             2962 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             2963 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             2964 ; 488  |
                             2965 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the change should happen
                             2966 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             2967 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             2968 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)+((1<<HW_DCDC_TBR_DC
                                  DC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             2969 ; 493  |
                             2970 ; 494  |typedef union               
                             2971 ; 495  |{
                             2972 ; 496  |    struct {
                             2973 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             2974 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             2975 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             2976 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             2977 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             2978 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             2979 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             2980 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             2981 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             2982 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             2983 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             2984 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             2985 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             2986 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             2987 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             2988 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             2989 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             2990 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             2991 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             2992 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             2993 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             2994 ; 518  |    } B;
                             2995 ; 519  |    unsigned int I;
                             2996 ; 520  |} usb_dcdctbr_type;
                             2997 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADDR+8))    /* Analog test bit register*/
                             2998 ; 522  |
                             2999 ; 523  |
                             3000 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             3001 ; 525  |
                             3002 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             3003 ; 527  |
                             3004 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             3005 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             3006 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             3007 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             3008 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             3009 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             3010 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             3011 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             3012 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             3013 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             3014 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             3015 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             3016 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             3017 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             3018 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             3019 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             3020 ; 544  |
                             3021 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             3022 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             3023 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             3024 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             3025 ; 549  |
                             3026 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             3027 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             3028 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             3029 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             3030 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             3031 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             3032 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             3033 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3034 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             3035 ; 559  |
                             3036 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             3037 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWD_BITPOS)        
                             3038 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_RES_BITPOS) 
                             3039 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_NIMH_BITPOS) 
                             3040 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             3041 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             3042 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             3043 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             3044 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             3045 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             3046 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             3047 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             3048 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             3049 ; 573  |
                             3050 ; 574  |
                             3051 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK)     
                             3052 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             3053 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             3054 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             3055 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             3056 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK)     
                             3057 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK)     
                             3058 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK) 
                             3059 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK) 
                             3060 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK) 
                             3061 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK) 
                             3062 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK) 
                             3063 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK) 
                             3064 ; 588  |
                             3065 ; 589  |typedef union               
                             3066 ; 590  |{
                             3067 ; 591  |    struct {
                             3068 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             3069 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             3070 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             3071 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             3072 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             3073 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             3074 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH;
                             3075 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH;
                             3076 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             3077 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             3078 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             3079 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             3080 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             3081 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                             3082 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             3083 ; 607  |    } B;
                             3084 ; 608  |    unsigned int I;
                             3085 ; 609  |} usb_pwr_charge_type;
                             3086 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17))    /* Analog Persistent Config Register */
                             3087 ; 611  |
                             3088 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             3089 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             3090 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             3091 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             3092 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             3093 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             3094 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             3095 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             3096 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             3097 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             3098 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             3099 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             3100 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             3101 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             3102 ; 626  |
                             3103 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             3104 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             3105 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             3106 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             3107 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             3108 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             3109 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             3110 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             3111 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             3112 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             3113 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             3114 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             3115 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             3116 ; 640  |
                             3117 ; 641  |typedef union               
                             3118 ; 642  |{
                             3119 ; 643  |    struct {       
                             3120 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             3121 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             3122 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             3123 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             3124 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             3125 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             3126 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             3127 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             3128 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             3129 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             3130 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             3131 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                             3132 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             3133 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             3134 ; 658  |    } B;
                             3135 ; 659  |    int I;
                             3136 ; 660  |} usb_dcdcpersist_type;
                             3137 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASEADDR+15))    /* Analog test bit register*/
                             3138 ; 662  |
                             3139 ; 663  |
                             3140 ; 664  |
                             3141 ; 665  |#endif
                             3142 ; 666  |
                             3143 ; 667  |
                             3144 ; 668  |
                             3145 
                             3147 
                             3148 ; 21   |#include "regsemc.h"
                             3149 
                             3151 
                             3152 ; 1    |#if !(defined(__REGS_EMC_INC))
                             3153 ; 2    |#define __REGS_EMC_INC 1
                             3154 ; 3    |
                             3155 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             3156 ; 5    |//   Module base addresses
                             3157 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             3158 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             3159 ; 8    |
                             3160 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             3161 ; 10   |//  EMC Registers
                             3162 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             3163 ; 12   |
                             3164 ; 13   |
                             3165 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             3166 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             3167 ; 16   |
                             3168 ; 17   |typedef union               /*Flash Control Register*/
                             3169 ; 18   |{
                             3170 ; 19   |    struct
                             3171 ; 20   |    {
                             3172 ; 21   |    int KICK        :1;
                             3173 ; 22   |    int RW          :1;
                             3174 ; 23   |    int TCIE        :1;
                             3175 ; 24   |    int IRQP        :1;
                             3176 ; 25   |    unsigned MMD    :2;
                             3177 ; 26   |    unsigned NB     :11;
                             3178 ; 27   |    unsigned RSVD   :4;
                             3179 ; 28   |    int SRST        :1;
                             3180 ; 29   |    } B;
                             3181 ; 30   |    int I;
                             3182 ; 31   |} flcr_type;
                             3183 ; 32   |
                             3184 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             3185 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             3186 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             3187 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             3188 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             3189 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             3190 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             3191 ; 40   |
                             3192 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             3193 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             3194 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             3195 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             3196 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             3197 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             3198 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             3199 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             3200 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             3201 ; 50   |
                             3202 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             3203 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             3204 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             3205 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             3206 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             3207 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             3208 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             3209 ; 58   |
                             3210 ; 59   |
                             3211 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             3212 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             3213 ; 62   |
                             3214 ; 63   |typedef union           /* Flash Start Address Low*/
                             3215 ; 64   |{
                             3216 ; 65   |    struct
                             3217 ; 66   |    {
                             3218 ; 67   |    unsigned XA     : 24;
                             3219 ; 68   |    } B;
                             3220 ; 69   |    int I;
                             3221 ; 70   |} flsalr_type;
                             3222 ; 71   |
                             3223 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                             3224 ; 73   |
                             3225 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             3226 ; 75   |
                             3227 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             3228 ; 77   |
                             3229 ; 78   |
                             3230 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             3231 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             3232 ; 81   |
                             3233 ; 82   |typedef union           /* Flash Start Address High*/
                             3234 ; 83   |{
                             3235 ; 84   |    struct
                             3236 ; 85   |    {
                             3237 ; 86   |    unsigned XA     :8;
                             3238 ; 87   |    unsigned DA     :16;
                             3239 ; 88   |    } B;
                             3240 ; 89   |    int I;
                             3241 ; 90   |} flsahr_type;
                             3242 ; 91   |
                             3243 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             3244 ; 93   |
                             3245 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             3246 ; 95   |
                             3247 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             3248 ; 97   |
                             3249 ; 98   |
                             3250 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             3251 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             3252 ; 101  |
                             3253 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             3254 ; 103  |{
                             3255 ; 104  |    struct
                             3256 ; 105  |    {
                             3257 ; 106  |        int WP          :1;
                             3258 ; 107  |        int CDP         :1;
                             3259 ; 108  |        unsigned SM     :2;
                             3260 ; 109  |        int XATTR       :1;
                             3261 ; 110  |        int CRST        :1;
                             3262 ; 111  |        int XWT         :1;
                             3263 ; 112  |        int RI          :1;
                             3264 ; 113  |        int IFCE        :1;
                             3265 ; 114  |        int ISCE        :1;
                             3266 ; 115  |        int INCE        :1;
                             3267 ; 116  |        int IFCS        :1;
                             3268 ; 117  |        int ISCS        :1;
                             3269 ; 118  |        int INCS        :1;
                             3270 ; 119  |        unsigned CFAI   :2;
                             3271 ; 120  |        int XDDI        :1;
                             3272 ; 121  |        unsigned CS     :2;
                             3273 ; 122  |        int CRE         :1;
                             3274 ; 123  |        unsigned VS     :2;
                             3275 ; 124  |        int DASP        :1;
                             3276 ; 125  |        int MODE16      :1; 
                             3277 ; 126  |    } B;
                             3278 ; 127  |    int I;
                             3279 ; 128  |} flcfcr_type;
                             3280 ; 129  |
                             3281 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             3282 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             3283 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             3284 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             3285 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
                             3286 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3287 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             3288 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             3289 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             3290 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             3291 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             3292 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             3293 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             3294 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             3295 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             3296 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             3297 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             3298 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             3299 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             3300 ; 149  |
                             3301 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             3302 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             3303 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             3304 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             3305 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             3306 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             3307 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             3308 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             3309 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             3310 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             3311 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             3312 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             3313 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             3314 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             3315 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             3316 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             3317 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             3318 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             3319 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             3320 ; 169  |
                             3321 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             3322 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             3323 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             3324 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             3325 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             3326 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             3327 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             3328 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             3329 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             3330 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             3331 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             3332 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             3333 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             3334 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             3335 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             3336 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             3337 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             3338 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             3339 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             3340 ; 189  |
                             3341 ; 190  |
                             3342 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             3343 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             3344 ; 193  |
                             3345 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             3346 ; 195  |{
                             3347 ; 196  |    struct
                             3348 ; 197  |    {
                             3349 ; 198  |        unsigned TRWSU  :5;
                             3350 ; 199  |        unsigned TRPW   :7;
                             3351 ; 200  |        unsigned TWPW   :7;
                             3352 ; 201  |        unsigned TRWH   :5;
                             3353 ; 202  |    } B;
                             3354 ; 203  |    int I;
                             3355 ; 204  |} flcftmr1r_type;
                             3356 ; 205  |
                             3357 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             3358 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             3359 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             3360 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             3361 ; 210  |
                             3362 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             3363 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             3364 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             3365 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             3366 ; 215  |
                             3367 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             3368 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             3369 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             3370 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             3371 ; 220  |
                             3372 ; 221  |
                             3373 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             3374 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             3375 ; 224  |
                             3376 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             3377 ; 226  |{
                             3378 ; 227  |    struct
                             3379 ; 228  |    {
                             3380 ; 229  |        unsigned TWW    :4;
                             3381 ; 230  |        unsigned TWTO   :10;
                             3382 ; 231  |        unsigned THW    :5; 
                             3383 ; 232  |        unsigned TRAQ   :5;
                             3384 ; 233  |    } B;
                             3385 ; 234  |    int I;
                             3386 ; 235  |} flcftmr2r_type;
                             3387 ; 236  |
                             3388 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             3389 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             3390 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             3391 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             3392 ; 241  |
                             3393 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             3394 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             3395 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             3396 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             3397 ; 246  |
                             3398 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             3399 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             3400 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             3401 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             3402 ; 251  |
                             3403 ; 252  |
                             3404 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             3405 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             3406 ; 255  |
                             3407 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             3408 ; 257  |{
                             3409 ; 258  |    struct
                             3410 ; 259  |    {
                             3411 ; 260  |        unsigned CS     :2;
                             3412 ; 261  |        int SE          :1;
                             3413 ; 262  |        int WP          :1;
                             3414 ; 263  |        int SIZE        :1;
                             3415 ; 264  |        int ICMD        :8;
                             3416 ; 265  |        int TOIE        :1;
                             3417 ; 266  |        int BPIE        :1;
                             3418 ; 267  |        int TOIRQ       :1;
                             3419 ; 268  |        int BPIRQ       :1;
                             3420 ; 269  |    } B;
                             3421 ; 270  |    int I;
                             3422 ; 271  |} flsmcr_type;
                             3423 ; 272  |
                             3424 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             3425 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             3426 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             3427 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             3428 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             3429 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             3430 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             3431 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             3432 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             3433 ; 282  |
                             3434 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             3435 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             3436 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             3437 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             3438 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             3439 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             3440 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             3441 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             3442 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             3443 ; 292  |
                             3444 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             3445 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             3446 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             3447 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             3448 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             3449 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             3450 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             3451 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             3452 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             3453 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             3454 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             3455 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             3456 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             3457 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             3458 ; 307  |
                             3459 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             3460 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             3461 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             3462 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             3463 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             3464 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             3465 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             3466 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             3467 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             3468 ; 317  |
                             3469 ; 318  |
                             3470 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             3471 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                             3472 ; 321  |
                             3473 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             3474 ; 323  |{
                             3475 ; 324  |    struct
                             3476 ; 325  |    {
                             3477 ; 326  |        unsigned TRWSU  :5;
                             3478 ; 327  |        unsigned TRPW   :6;
                             3479 ; 328  |        unsigned TWPW   :6;
                             3480 ; 329  |        unsigned TRWH   :5;
                             3481 ; 330  |    } B;
                             3482 ; 331  |    int I;
                             3483 ; 332  |} flsmtmr1r_type;
                             3484 ; 333  |
                             3485 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             3486 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             3487 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             3488 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             3489 ; 338  |
                             3490 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             3491 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             3492 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             3493 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             3494 ; 343  |
                             3495 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             3496 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             3497 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             3498 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             3499 ; 348  |
                             3500 ; 349  |
                             3501 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             3502 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             3503 ; 352  |
                             3504 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             3505 ; 354  |{
                             3506 ; 355  |    struct
                             3507 ; 356  |    {
                             3508 ; 357  |        unsigned TWT    :6;
                             3509 ; 358  |        unsigned TWTO   :18;
                             3510 ; 359  |    } B;
                             3511 ; 360  |    int I;
                             3512 ; 361  |} flsmtmr2r_type;
                             3513 ; 362  |
                             3514 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             3515 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             3516 ; 365  |
                             3517 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             3518 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             3519 ; 368  |
                             3520 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             3521 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             3522 ; 371  |
                             3523 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             3524 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             3525 ; 374  |typedef union 
                             3526 ; 375  |{
                             3527 ; 376  |  struct
                             3528 ; 377  |  {
                             3529 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             3530 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers */
                             3531 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers */
                             3532 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             3533 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             3534 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             3535 ; 384  |    int PAD0          :17;    
                             3536 ; 385  |  } B;
                             3537 ; 386  |  int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3538 ; 387  |} flcr2_type;
                             3539 ; 388  |
                             3540 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             3541 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             3542 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             3543 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             3544 ; 393  |
                             3545 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Control Register */
                             3546 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash Start Address Low Register */
                             3547 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash Start Address High Register */
                             3548 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             3549 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Control Register2 */
                             3550 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash CompactFlash Control Register*/
                             3551 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Compact Flash Timer1 Register*/
                             3552 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Compact Flash Timer2 Register*/
                             3553 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash SmartMedia Control Register*/
                             3554 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash SmartMedia Timer1 Register*/
                             3555 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash SmartMedia Timer2 Register*/
                             3556 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             3557 ; 406  |
                             3558 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             3559 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             3560 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             3561 ; 410  |
                             3562 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             3563 ; 412  |
                             3564 ; 413  |#endif
                             3565 ; 414  |
                             3566 
                             3568 
                             3569 ; 22   |#include "regsgpio.h"
                             3570 
                             3572 
                             3573 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             3574 ; 2    |#define __REGS_GPIO_INC 1
                             3575 ; 3    |
                             3576 ; 4    |#include "types.h"
                             3577 
                             3579 
                             3580 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3581 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3582 ; 3    |//
                             3583 ; 4    |// Filename: types.h
                             3584 ; 5    |// Description: Standard data types
                             3585 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3586 ; 7    |
                             3587 ; 8    |#ifndef _TYPES_H
                             3588 ; 9    |#define _TYPES_H
                             3589 ; 10   |
                             3590 ; 11   |// TODO:  move this outta here!
                             3591 ; 12   |#if !defined(NOERROR)
                             3592 ; 13   |#define NOERROR 0
                             3593 ; 14   |#define SUCCESS 0
                             3594 ; 15   |#endif 
                             3595 ; 16   |#if !defined(SUCCESS)
                             3596 ; 17   |#define SUCCESS  0
                             3597 ; 18   |#endif
                             3598 ; 19   |#if !defined(ERROR)
                             3599 ; 20   |#define ERROR   -1
                             3600 ; 21   |#endif
                             3601 ; 22   |#if !defined(FALSE)
                             3602 ; 23   |#define FALSE 0
                             3603 ; 24   |#endif
                             3604 ; 25   |#if !defined(TRUE)
                             3605 ; 26   |#define TRUE  1
                             3606 ; 27   |#endif
                             3607 ; 28   |
                             3608 ; 29   |#if !defined(NULL)
                             3609 ; 30   |#define NULL 0
                             3610 ; 31   |#endif
                             3611 ; 32   |
                             3612 ; 33   |#define MAX_INT     0x7FFFFF
                             3613 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3614 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3615 ; 36   |#define MAX_ULONG   (-1) 
                             3616 ; 37   |
                             3617 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3618 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3619 ; 40   |
                             3620 ; 41   |
                             3621 ; 42   |#define BYTE    unsigned char       // btVarName
                             3622 ; 43   |#define CHAR    signed char         // cVarName
                             3623 ; 44   |#define USHORT  unsigned short      // usVarName
                             3624 ; 45   |#define SHORT   unsigned short      // sVarName
                             3625 ; 46   |#define WORD    unsigned int        // wVarName
                             3626 ; 47   |#define INT     signed int          // iVarName
                             3627 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3628 ; 49   |#define LONG    signed long         // lVarName
                             3629 ; 50   |#define BOOL    unsigned int        // bVarName
                             3630 ; 51   |#define FRACT   _fract              // frVarName
                             3631 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3632 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3633 ; 54   |#define FLOAT   float               // fVarName
                             3634 ; 55   |#define DBL     double              // dVarName
                             3635 ; 56   |#define ENUM    enum                // eVarName
                             3636 ; 57   |#define CMX     _complex            // cmxVarName
                             3637 ; 58   |typedef WORD UCS3;                   // 
                             3638 ; 59   |
                             3639 ; 60   |#define UINT16  unsigned short
                             3640 ; 61   |#define UINT8   unsigned char   
                             3641 ; 62   |#define UINT32  unsigned long
                             3642 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3643 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3644 ; 65   |#define WCHAR   UINT16
                             3645 ; 66   |
                             3646 ; 67   |//UINT128 is 16 bytes or 6 words
                             3647 ; 68   |typedef struct UINT128_3500 {   
                             3648 ; 69   |    int val[6];     
                             3649 ; 70   |} UINT128_3500;
                             3650 ; 71   |
                             3651 ; 72   |#define UINT128   UINT128_3500
                             3652 ; 73   |
                             3653 ; 74   |// Little endian word packed byte strings:   
                             3654 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3655 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3656 ; 77   |// Little endian word packed byte strings:   
                             3657 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3658 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3659 ; 80   |
                             3660 ; 81   |// Declare Memory Spaces To Use When Coding
                             3661 ; 82   |// A. Sector Buffers
                             3662 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3663 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3664 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3665 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3666 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3667 ; 88   |// B. Media DDI Memory
                             3668 ; 89   |#define MEDIA_DDI_MEM _Y
                             3669 ; 90   |
                             3670 ; 91   |
                             3671 ; 92   |
                             3672 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3673 ; 94   |// Examples of circular pointers:
                             3674 ; 95   |//    INT CIRC cpiVarName
                             3675 ; 96   |//    DWORD CIRC cpdwVarName
                             3676 ; 97   |
                             3677 ; 98   |#define RETCODE INT                 // rcVarName
                             3678 ; 99   |
                             3679 ; 100  |// generic bitfield structure
                             3680 ; 101  |struct Bitfield {
                             3681 ; 102  |    unsigned int B0  :1;
                             3682 ; 103  |    unsigned int B1  :1;
                             3683 ; 104  |    unsigned int B2  :1;
                             3684 ; 105  |    unsigned int B3  :1;
                             3685 ; 106  |    unsigned int B4  :1;
                             3686 ; 107  |    unsigned int B5  :1;
                             3687 ; 108  |    unsigned int B6  :1;
                             3688 ; 109  |    unsigned int B7  :1;
                             3689 ; 110  |    unsigned int B8  :1;
                             3690 ; 111  |    unsigned int B9  :1;
                             3691 ; 112  |    unsigned int B10 :1;
                             3692 ; 113  |    unsigned int B11 :1;
                             3693 ; 114  |    unsigned int B12 :1;
                             3694 ; 115  |    unsigned int B13 :1;
                             3695 ; 116  |    unsigned int B14 :1;
                             3696 ; 117  |    unsigned int B15 :1;
                             3697 ; 118  |    unsigned int B16 :1;
                             3698 ; 119  |    unsigned int B17 :1;
                             3699 ; 120  |    unsigned int B18 :1;
                             3700 ; 121  |    unsigned int B19 :1;
                             3701 ; 122  |    unsigned int B20 :1;
                             3702 ; 123  |    unsigned int B21 :1;
                             3703 ; 124  |    unsigned int B22 :1;
                             3704 ; 125  |    unsigned int B23 :1;
                             3705 ; 126  |};
                             3706 ; 127  |
                             3707 ; 128  |union BitInt {
                             3708 ; 129  |        struct Bitfield B;
                             3709 ; 130  |        int        I;
                             3710 ; 131  |};
                             3711 ; 132  |
                             3712 ; 133  |#define MAX_MSG_LENGTH 10
                             3713 ; 134  |struct CMessage
                             3714 ; 135  |{
                             3715 ; 136  |        unsigned int m_uLength;
                             3716 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3717 ; 138  |};
                             3718 ; 139  |
                             3719 ; 140  |typedef struct {
                             3720 ; 141  |    WORD m_wLength;
                             3721 ; 142  |    WORD m_wMessage;
                             3722 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3723 ; 144  |} Message;
                             3724 ; 145  |
                             3725 ; 146  |struct MessageQueueDescriptor
                             3726 ; 147  |{
                             3727 ; 148  |        int *m_pBase;
                             3728 ; 149  |        int m_iModulo;
                             3729 ; 150  |        int m_iSize;
                             3730 ; 151  |        int *m_pHead;
                             3731 ; 152  |        int *m_pTail;
                             3732 ; 153  |};
                             3733 ; 154  |
                             3734 ; 155  |struct ModuleEntry
                             3735 ; 156  |{
                             3736 ; 157  |    int m_iSignaledEventMask;
                             3737 ; 158  |    int m_iWaitEventMask;
                             3738 ; 159  |    int m_iResourceOfCode;
                             3739 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3740 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             3741 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3742 ; 163  |    int m_uTimeOutHigh;
                             3743 ; 164  |    int m_uTimeOutLow;
                             3744 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3745 ; 166  |};
                             3746 ; 167  |
                             3747 ; 168  |union WaitMask{
                             3748 ; 169  |    struct B{
                             3749 ; 170  |        unsigned int m_bNone     :1;
                             3750 ; 171  |        unsigned int m_bMessage  :1;
                             3751 ; 172  |        unsigned int m_bTimer    :1;
                             3752 ; 173  |        unsigned int m_bButton   :1;
                             3753 ; 174  |    } B;
                             3754 ; 175  |    int I;
                             3755 ; 176  |} ;
                             3756 ; 177  |
                             3757 ; 178  |
                             3758 ; 179  |struct Button {
                             3759 ; 180  |        WORD wButtonEvent;
                             3760 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3761 ; 182  |};
                             3762 ; 183  |
                             3763 ; 184  |struct Message {
                             3764 ; 185  |        WORD wMsgLength;
                             3765 ; 186  |        WORD wMsgCommand;
                             3766 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3767 ; 188  |};
                             3768 ; 189  |
                             3769 ; 190  |union EventTypes {
                             3770 ; 191  |        struct CMessage msg;
                             3771 ; 192  |        struct Button Button ;
                             3772 ; 193  |        struct Message Message;
                             3773 ; 194  |};
                             3774 ; 195  |
                             3775 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3776 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3777 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3778 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3779 ; 200  |
                             3780 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3781 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3782 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3783 ; 204  |
                             3784 ; 205  |#if DEBUG
                             3785 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3786 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3787 ; 208  |#else 
                             3788 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             3789 ; 210  |#define DebugBuildAssert(x)    
                             3790 ; 211  |#endif
                             3791 ; 212  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3792 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3793 ; 214  |//  #pragma asm
                             3794 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3795 ; 216  |//  #pragma endasm
                             3796 ; 217  |
                             3797 ; 218  |
                             3798 ; 219  |#ifdef COLOR_262K
                             3799 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             3800 ; 221  |#elif defined(COLOR_65K)
                             3801 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             3802 ; 223  |#else
                             3803 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             3804 ; 225  |#endif
                             3805 ; 226  |    
                             3806 ; 227  |#endif // #ifndef _TYPES_H
                             3807 
                             3809 
                             3810 ; 5    |
                             3811 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             3812 ; 7    |//  Interrupt Collector Registers
                             3813 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             3814 ; 9    |
                             3815 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             3816 ; 11   |
                             3817 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             3818 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             3819 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             3820 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             3821 ; 16   |
                             3822 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             3823 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             3824 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             3825 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             3826 ; 21   |
                             3827 ; 22   |#define HW_GPB_GPENR 0
                             3828 ; 23   |#define HW_GPB_GPDOR 1
                             3829 ; 24   |#define HW_GPB_GPDIR 2
                             3830 ; 25   |#define HW_GPB_GPDOER 3
                             3831 ; 26   |#define HW_GPB_GPIPENR 4
                             3832 ; 27   |#define HW_GPB_GPIENR 5
                             3833 ; 28   |#define HW_GPB_GPILVLR 6
                             3834 ; 29   |#define HW_GPB_GPIPOLR 7
                             3835 ; 30   |#define HW_GPB_GPISTATR 8
                             3836 ; 31   |#define HW_GPB_GPPWR 9
                             3837 ; 32   |#define HW_GPB_GP8MA 10
                             3838 ; 33   |
                             3839 ; 34   |
                             3840 ; 35   |
                             3841 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             3842 ; 37   |//  GPIO Register Bit Positions
                             3843 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             3844 ; 39   |{
                             3845 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             3846 ; 41   |    unsigned int I;
                             3847 ; 42   |    unsigned int U;
                             3848 ; 43   |} gpr_type;
                             3849 ; 44   |
                             3850 ; 45   |#define HW_GP_B0_BITPOS 0
                             3851 ; 46   |#define HW_GP_B1_BITPOS 1
                             3852 ; 47   |#define HW_GP_B2_BITPOS 2
                             3853 ; 48   |#define HW_GP_B3_BITPOS 3
                             3854 ; 49   |#define HW_GP_B4_BITPOS 4
                             3855 ; 50   |#define HW_GP_B5_BITPOS 5
                             3856 ; 51   |#define HW_GP_B6_BITPOS 6
                             3857 ; 52   |#define HW_GP_B7_BITPOS 7
                             3858 ; 53   |#define HW_GP_B8_BITPOS 8
                             3859 ; 54   |#define HW_GP_B9_BITPOS 9
                             3860 ; 55   |#define HW_GP_B10_BITPOS 10
                             3861 ; 56   |#define HW_GP_B11_BITPOS 11
                             3862 ; 57   |#define HW_GP_B12_BITPOS 12
                             3863 ; 58   |#define HW_GP_B13_BITPOS 13
                             3864 ; 59   |#define HW_GP_B14_BITPOS 14
                             3865 ; 60   |#define HW_GP_B15_BITPOS 15
                             3866 ; 61   |#define HW_GP_B16_BITPOS 16
                             3867 ; 62   |#define HW_GP_B17_BITPOS 17
                             3868 ; 63   |#define HW_GP_B18_BITPOS 18
                             3869 ; 64   |#define HW_GP_B19_BITPOS 19
                             3870 ; 65   |#define HW_GP_B20_BITPOS 20
                             3871 ; 66   |#define HW_GP_B21_BITPOS 21
                             3872 ; 67   |#define HW_GP_B22_BITPOS 22
                             3873 ; 68   |#define HW_GP_B23_BITPOS 23
                             3874 ; 69   |
                             3875 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             3876 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             3877 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             3878 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             3879 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             3880 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             3881 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             3882 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             3883 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             3884 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             3885 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             3886 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             3887 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             3888 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             3889 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             3890 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             3891 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             3892 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             3893 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             3894 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             3895 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             3896 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             3897 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             3898 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             3899 ; 94   |
                             3900 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             3901 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             3902 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             3903 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             3904 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             3905 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             3906 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             3907 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             3908 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             3909 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             3910 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             3911 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             3912 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             3913 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             3914 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             3915 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             3916 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             3917 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             3918 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             3919 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             3920 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             3921 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             3922 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             3923 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             3924 ; 119  |
                             3925 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             3926 ; 121  |//  GPIO 8mA Register Bit Positions
                             3927 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             3928 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             3929 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             3930 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             3931 ; 126  |
                             3932 ; 127  |
                             3933 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             3934 ; 129  |//  Logical GPIO numbers
                             3935 ; 130  |#define HW_GPIO_000 0
                             3936 ; 131  |#define HW_GPIO_001 1
                             3937 ; 132  |#define HW_GPIO_002 2
                             3938 ; 133  |#define HW_GPIO_003 3
                             3939 ; 134  |#define HW_GPIO_004 4
                             3940 ; 135  |#define HW_GPIO_005 5
                             3941 ; 136  |#define HW_GPIO_006 6
                             3942 ; 137  |#define HW_GPIO_007 7
                             3943 ; 138  |#define HW_GPIO_008 8
                             3944 ; 139  |#define HW_GPIO_009 9
                             3945 ; 140  |#define HW_GPIO_010 10
                             3946 ; 141  |#define HW_GPIO_011 11
                             3947 ; 142  |#define HW_GPIO_012 12
                             3948 ; 143  |#define HW_GPIO_013 13
                             3949 ; 144  |#define HW_GPIO_014 14
                             3950 ; 145  |#define HW_GPIO_015 15
                             3951 ; 146  |#define HW_GPIO_016 16
                             3952 ; 147  |#define HW_GPIO_017 17
                             3953 ; 148  |#define HW_GPIO_018 18
                             3954 ; 149  |#define HW_GPIO_019 19
                             3955 ; 150  |#define HW_GPIO_020 20
                             3956 ; 151  |#define HW_GPIO_021 21
                             3957 ; 152  |#define HW_GPIO_022 22
                             3958 ; 153  |#define HW_GPIO_023 23
                             3959 ; 154  |#define HW_GPIO_024 24
                             3960 ; 155  |#define HW_GPIO_025 25
                             3961 ; 156  |#define HW_GPIO_026 26
                             3962 ; 157  |#define HW_GPIO_027 27
                             3963 ; 158  |#define HW_GPIO_028 28
                             3964 ; 159  |#define HW_GPIO_029 29
                             3965 ; 160  |#define HW_GPIO_030 30
                             3966 ; 161  |#define HW_GPIO_031 31
                             3967 ; 162  |#define HW_GPIO_032 32
                             3968 ; 163  |#define HW_GPIO_033 33
                             3969 ; 164  |#define HW_GPIO_034 34
                             3970 ; 165  |#define HW_GPIO_035 35
                             3971 ; 166  |#define HW_GPIO_036 36
                             3972 ; 167  |#define HW_GPIO_037 37
                             3973 ; 168  |#define HW_GPIO_038 38
                             3974 ; 169  |#define HW_GPIO_039 39
                             3975 ; 170  |#define HW_GPIO_040 40
                             3976 ; 171  |#define HW_GPIO_041 41
                             3977 ; 172  |#define HW_GPIO_042 42
                             3978 ; 173  |#define HW_GPIO_043 43
                             3979 ; 174  |#define HW_GPIO_044 44
                             3980 ; 175  |#define HW_GPIO_045 45
                             3981 ; 176  |#define HW_GPIO_046 46
                             3982 ; 177  |#define HW_GPIO_047 47
                             3983 ; 178  |#define HW_GPIO_048 48
                             3984 ; 179  |#define HW_GPIO_049 49
                             3985 ; 180  |#define HW_GPIO_050 50
                             3986 ; 181  |#define HW_GPIO_051 51
                             3987 ; 182  |#define HW_GPIO_052 52
                             3988 ; 183  |#define HW_GPIO_053 53
                             3989 ; 184  |#define HW_GPIO_054 54
                             3990 ; 185  |#define HW_GPIO_055 55
                             3991 ; 186  |#define HW_GPIO_056 56
                             3992 ; 187  |#define HW_GPIO_057 57
                             3993 ; 188  |#define HW_GPIO_058 58
                             3994 ; 189  |#define HW_GPIO_059 59
                             3995 ; 190  |#define HW_GPIO_060 60
                             3996 ; 191  |#define HW_GPIO_061 61
                             3997 ; 192  |#define HW_GPIO_062 62
                             3998 ; 193  |#define HW_GPIO_063 63
                             3999 ; 194  |#define HW_GPIO_064 64
                             4000 ; 195  |#define HW_GPIO_065 65
                             4001 ; 196  |#define HW_GPIO_066 66
                             4002 ; 197  |#define HW_GPIO_067 67
                             4003 ; 198  |#define HW_GPIO_068 68
                             4004 ; 199  |#define HW_GPIO_069 69
                             4005 ; 200  |#define HW_GPIO_070 70
                             4006 ; 201  |#define HW_GPIO_071 71
                             4007 ; 202  |#define HW_GPIO_072 72
                             4008 ; 203  |#define HW_GPIO_073 73
                             4009 ; 204  |#define HW_GPIO_074 74
                             4010 ; 205  |#define HW_GPIO_075 75
                             4011 ; 206  |#define HW_GPIO_076 76
                             4012 ; 207  |#define HW_GPIO_077 77
                             4013 ; 208  |#define HW_GPIO_078 78
                             4014 ; 209  |#define HW_GPIO_079 79
                             4015 ; 210  |#define HW_GPIO_080 80
                             4016 ; 211  |#define HW_GPIO_081 81
                             4017 ; 212  |#define HW_GPIO_082 82
                             4018 ; 213  |#define HW_GPIO_083 83
                             4019 ; 214  |#define HW_GPIO_084 84
                             4020 ; 215  |#define HW_GPIO_085 85
                             4021 ; 216  |#define HW_GPIO_086 86
                             4022 ; 217  |#define HW_GPIO_087 87
                             4023 ; 218  |#define HW_GPIO_088 88
                             4024 ; 219  |#define HW_GPIO_089 89
                             4025 ; 220  |#define HW_GPIO_090 90
                             4026 ; 221  |#define HW_GPIO_091 91
                             4027 ; 222  |#define HW_GPIO_092 92
                             4028 ; 223  |#define HW_GPIO_093 93
                             4029 ; 224  |#define HW_GPIO_094 94
                             4030 ; 225  |#define HW_GPIO_095 95
                             4031 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             4032 ; 227  |
                             4033 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO 0 Enable Register   */
                             4034 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 0 Data Out Register */
                             4035 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 0 Dait In Register  */
                             4036 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO 0 Dait Out Enable Register  */
                             4037 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 0 Interrupt Pin Enable Register */
                             4038 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO 0 Interrupt Enable Register */
                             4039 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 0 Interrupt Level Register  */
                             4040 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 0 Interrupt Polarity Register   */
                             4041 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 0 Interrupt Status Register */
                             4042 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4043 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4044 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* GPIO 1 Enable Register   */
                             4045 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 1 Data Out Register */
                             4046 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 1 Dait In Register  */
                             4047 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO 1 Dait Out Enable Register  */
                             4048 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 1 Interrupt Pin Enable Register */
                             4049 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO 1 Interrupt Enable Register */
                             4050 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 1 Interrupt Level Register  */
                             4051 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 1 Interrupt Polarity Register   */
                             4052 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 1 Interrupt Status Register */
                             4053 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4054 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             4055 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                             4056 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                             4057 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                             4058 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                             4059 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                             4060 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                             4061 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                             4062 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                             4063 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                             4064 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4065 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             4066 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                             4067 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                             4068 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                             4069 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                             4070 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                             4071 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                             4072 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                             4073 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                             4074 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                             4075 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4076 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             4077 ; 272  |
                             4078 ; 273  |#endif
                             4079 ; 274  |
                             4080 
                             4082 
                             4083 ; 23   |#include "regsi2c.h"
                             4084 
                             4086 
                             4087 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4088 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4089 ; 3    |// Filename: regsI2C.inc
                             4090 ; 4    |// Description: Register definitions for GPFLASH interface
                             4091 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4092 ; 6    |// The following naming conventions are followed in this file.
                             4093 ; 7    |// All registers are named using the format...
                             4094 ; 8    |//     HW_<module>_<regname>
                             4095 ; 9    |// where <module> is the module name which can be any of the following...
                             4096 ; 10   |//     USB20
                             4097 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4098 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4099 ; 13   |// that module)
                             4100 ; 14   |// <regname> is the specific register within that module
                             4101 ; 15   |// We also define the following...
                             4102 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4103 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4104 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4105 ; 19   |// which does something else, and
                             4106 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4107 ; 21   |// which does something else.
                             4108 ; 22   |// Other rules
                             4109 ; 23   |//     All caps
                             4110 ; 24   |//     Numeric identifiers start at 0
                             4111 ; 25   |#if !(defined(regsi2cinc))
                             4112 ; 26   |#define regsi2cinc 1
                             4113 ; 27   |
                             4114 ; 28   |#include "types.h"
                             4115 
                             4117 
                             4118 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4119 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4120 ; 3    |//
                             4121 ; 4    |// Filename: types.h
                             4122 ; 5    |// Description: Standard data types
                             4123 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4124 ; 7    |
                             4125 ; 8    |#ifndef _TYPES_H
                             4126 ; 9    |#define _TYPES_H
                             4127 ; 10   |
                             4128 ; 11   |// TODO:  move this outta here!
                             4129 ; 12   |#if !defined(NOERROR)
                             4130 ; 13   |#define NOERROR 0
                             4131 ; 14   |#define SUCCESS 0
                             4132 ; 15   |#endif 
                             4133 ; 16   |#if !defined(SUCCESS)
                             4134 ; 17   |#define SUCCESS  0
                             4135 ; 18   |#endif
                             4136 ; 19   |#if !defined(ERROR)
                             4137 ; 20   |#define ERROR   -1
                             4138 ; 21   |#endif
                             4139 ; 22   |#if !defined(FALSE)
                             4140 ; 23   |#define FALSE 0
                             4141 ; 24   |#endif
                             4142 ; 25   |#if !defined(TRUE)
                             4143 ; 26   |#define TRUE  1
                             4144 ; 27   |#endif
                             4145 ; 28   |
                             4146 ; 29   |#if !defined(NULL)
                             4147 ; 30   |#define NULL 0
                             4148 ; 31   |#endif
                             4149 ; 32   |
                             4150 ; 33   |#define MAX_INT     0x7FFFFF
                             4151 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4152 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4153 ; 36   |#define MAX_ULONG   (-1) 
                             4154 ; 37   |
                             4155 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4156 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4157 ; 40   |
                             4158 ; 41   |
                             4159 ; 42   |#define BYTE    unsigned char       // btVarName
                             4160 ; 43   |#define CHAR    signed char         // cVarName
                             4161 ; 44   |#define USHORT  unsigned short      // usVarName
                             4162 ; 45   |#define SHORT   unsigned short      // sVarName
                             4163 ; 46   |#define WORD    unsigned int        // wVarName
                             4164 ; 47   |#define INT     signed int          // iVarName
                             4165 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4166 ; 49   |#define LONG    signed long         // lVarName
                             4167 ; 50   |#define BOOL    unsigned int        // bVarName
                             4168 ; 51   |#define FRACT   _fract              // frVarName
                             4169 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4170 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4171 ; 54   |#define FLOAT   float               // fVarName
                             4172 ; 55   |#define DBL     double              // dVarName
                             4173 ; 56   |#define ENUM    enum                // eVarName
                             4174 ; 57   |#define CMX     _complex            // cmxVarName
                             4175 ; 58   |typedef WORD UCS3;                   // 
                             4176 ; 59   |
                             4177 ; 60   |#define UINT16  unsigned short
                             4178 ; 61   |#define UINT8   unsigned char   
                             4179 ; 62   |#define UINT32  unsigned long
                             4180 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4181 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4182 ; 65   |#define WCHAR   UINT16
                             4183 ; 66   |
                             4184 ; 67   |//UINT128 is 16 bytes or 6 words
                             4185 ; 68   |typedef struct UINT128_3500 {   
                             4186 ; 69   |    int val[6];     
                             4187 ; 70   |} UINT128_3500;
                             4188 ; 71   |
                             4189 ; 72   |#define UINT128   UINT128_3500
                             4190 ; 73   |
                             4191 ; 74   |// Little endian word packed byte strings:   
                             4192 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4193 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4194 ; 77   |// Little endian word packed byte strings:   
                             4195 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4196 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4197 ; 80   |
                             4198 ; 81   |// Declare Memory Spaces To Use When Coding
                             4199 ; 82   |// A. Sector Buffers
                             4200 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4201 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4202 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4203 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4204 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4205 ; 88   |// B. Media DDI Memory
                             4206 ; 89   |#define MEDIA_DDI_MEM _Y
                             4207 ; 90   |
                             4208 ; 91   |
                             4209 ; 92   |
                             4210 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4211 ; 94   |// Examples of circular pointers:
                             4212 ; 95   |//    INT CIRC cpiVarName
                             4213 ; 96   |//    DWORD CIRC cpdwVarName
                             4214 ; 97   |
                             4215 ; 98   |#define RETCODE INT                 // rcVarName
                             4216 ; 99   |
                             4217 ; 100  |// generic bitfield structure
                             4218 ; 101  |struct Bitfield {
                             4219 ; 102  |    unsigned int B0  :1;
                             4220 ; 103  |    unsigned int B1  :1;
                             4221 ; 104  |    unsigned int B2  :1;
                             4222 ; 105  |    unsigned int B3  :1;
                             4223 ; 106  |    unsigned int B4  :1;
                             4224 ; 107  |    unsigned int B5  :1;
                             4225 ; 108  |    unsigned int B6  :1;
                             4226 ; 109  |    unsigned int B7  :1;
                             4227 ; 110  |    unsigned int B8  :1;
                             4228 ; 111  |    unsigned int B9  :1;
                             4229 ; 112  |    unsigned int B10 :1;
                             4230 ; 113  |    unsigned int B11 :1;
                             4231 ; 114  |    unsigned int B12 :1;
                             4232 ; 115  |    unsigned int B13 :1;
                             4233 ; 116  |    unsigned int B14 :1;
                             4234 ; 117  |    unsigned int B15 :1;
                             4235 ; 118  |    unsigned int B16 :1;
                             4236 ; 119  |    unsigned int B17 :1;
                             4237 ; 120  |    unsigned int B18 :1;
                             4238 ; 121  |    unsigned int B19 :1;
                             4239 ; 122  |    unsigned int B20 :1;
                             4240 ; 123  |    unsigned int B21 :1;
                             4241 ; 124  |    unsigned int B22 :1;
                             4242 ; 125  |    unsigned int B23 :1;
                             4243 ; 126  |};
                             4244 ; 127  |
                             4245 ; 128  |union BitInt {
                             4246 ; 129  |        struct Bitfield B;
                             4247 ; 130  |        int        I;
                             4248 ; 131  |};
                             4249 ; 132  |
                             4250 ; 133  |#define MAX_MSG_LENGTH 10
                             4251 ; 134  |struct CMessage
                             4252 ; 135  |{
                             4253 ; 136  |        unsigned int m_uLength;
                             4254 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4255 ; 138  |};
                             4256 ; 139  |
                             4257 ; 140  |typedef struct {
                             4258 ; 141  |    WORD m_wLength;
                             4259 ; 142  |    WORD m_wMessage;
                             4260 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4261 ; 144  |} Message;
                             4262 ; 145  |
                             4263 ; 146  |struct MessageQueueDescriptor
                             4264 ; 147  |{
                             4265 ; 148  |        int *m_pBase;
                             4266 ; 149  |        int m_iModulo;
                             4267 ; 150  |        int m_iSize;
                             4268 ; 151  |        int *m_pHead;
                             4269 ; 152  |        int *m_pTail;
                             4270 ; 153  |};
                             4271 ; 154  |
                             4272 ; 155  |struct ModuleEntry
                             4273 ; 156  |{
                             4274 ; 157  |    int m_iSignaledEventMask;
                             4275 ; 158  |    int m_iWaitEventMask;
                             4276 ; 159  |    int m_iResourceOfCode;
                             4277 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4278 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             4279 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4280 ; 163  |    int m_uTimeOutHigh;
                             4281 ; 164  |    int m_uTimeOutLow;
                             4282 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4283 ; 166  |};
                             4284 ; 167  |
                             4285 ; 168  |union WaitMask{
                             4286 ; 169  |    struct B{
                             4287 ; 170  |        unsigned int m_bNone     :1;
                             4288 ; 171  |        unsigned int m_bMessage  :1;
                             4289 ; 172  |        unsigned int m_bTimer    :1;
                             4290 ; 173  |        unsigned int m_bButton   :1;
                             4291 ; 174  |    } B;
                             4292 ; 175  |    int I;
                             4293 ; 176  |} ;
                             4294 ; 177  |
                             4295 ; 178  |
                             4296 ; 179  |struct Button {
                             4297 ; 180  |        WORD wButtonEvent;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4298 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4299 ; 182  |};
                             4300 ; 183  |
                             4301 ; 184  |struct Message {
                             4302 ; 185  |        WORD wMsgLength;
                             4303 ; 186  |        WORD wMsgCommand;
                             4304 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4305 ; 188  |};
                             4306 ; 189  |
                             4307 ; 190  |union EventTypes {
                             4308 ; 191  |        struct CMessage msg;
                             4309 ; 192  |        struct Button Button ;
                             4310 ; 193  |        struct Message Message;
                             4311 ; 194  |};
                             4312 ; 195  |
                             4313 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4314 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4315 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4316 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4317 ; 200  |
                             4318 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4319 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4320 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4321 ; 204  |
                             4322 ; 205  |#if DEBUG
                             4323 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4324 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4325 ; 208  |#else 
                             4326 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             4327 ; 210  |#define DebugBuildAssert(x)    
                             4328 ; 211  |#endif
                             4329 ; 212  |
                             4330 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4331 ; 214  |//  #pragma asm
                             4332 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4333 ; 216  |//  #pragma endasm
                             4334 ; 217  |
                             4335 ; 218  |
                             4336 ; 219  |#ifdef COLOR_262K
                             4337 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             4338 ; 221  |#elif defined(COLOR_65K)
                             4339 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             4340 ; 223  |#else
                             4341 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             4342 ; 225  |#endif
                             4343 ; 226  |    
                             4344 ; 227  |#endif // #ifndef _TYPES_H
                             4345 
                             4347 
                             4348 ; 29   |
                             4349 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             4350 ; 31   |////   I2C STMP Registers
                             4351 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             4352 ; 33   |
                             4353 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                             4354 ; 35   |
                             4355 ; 36   |
                             4356 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                             4357 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                             4358 ; 39   |
                             4359 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                             4360 ; 41   |
                             4361 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                             4362 ; 43   |
                             4363 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                             4364 ; 45   |
                             4365 ; 46   |typedef union               /* I2C Clock Divider Register */
                             4366 ; 47   |{
                             4367 ; 48   |    struct {
                             4368 ; 49   |        int                :1; 
                             4369 ; 50   |        unsigned FACT      :8;
                             4370 ; 51   |    } B;
                             4371 ; 52   |    int I;
                             4372 ; 53   |    unsigned U;
                             4373 ; 54   |} i2cdivr_type;
                             4374 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Registers        */
                             4375 ; 56   |
                             4376 ; 57   |
                             4377 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                             4378 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                             4379 ; 60   |
                             4380 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                             4381 ; 62   |
                             4382 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                             4383 ; 64   |
                             4384 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                             4385 ; 66   |
                             4386 ; 67   |typedef union               /* I2C Data Register */
                             4387 ; 68   |{
                             4388 ; 69   |    struct {
                             4389 ; 70   |         unsigned DATA :24; 
                             4390 ; 71   |    } B;
                             4391 ; 72   |    int I;
                             4392 ; 73   |    unsigned U;
                             4393 ; 74   |} i2cdatr_type;
                             4394 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers (I2CDAT)      */
                             4395 ; 76   |
                             4396 ; 77   |
                             4397 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                             4398 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                             4399 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                             4400 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
                             4401 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                             4402 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                             4403 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                             4404 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                             4405 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                             4406 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                             4407 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                             4408 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                             4409 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                             4410 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                             4411 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                             4412 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                             4413 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                             4414 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                             4415 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                             4416 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                             4417 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                             4418 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                             4419 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                             4420 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                             4421 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                             4422 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                             4423 ; 104  |
                             4424 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                             4425 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                             4426 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                             4427 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                             4428 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                             4429 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                             4430 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                             4431 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                             4432 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                             4433 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                             4434 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                             4435 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                             4436 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                             4437 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                             4438 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                             4439 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                             4440 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                             4441 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                             4442 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                             4443 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                             4444 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                             4445 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                             4446 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                             4447 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                             4448 ; 129  |
                             4449 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                             4450 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                             4451 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                             4452 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                             4453 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                             4454 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                             4455 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                             4456 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                             4457 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                             4458 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                             4459 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                             4460 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                             4461 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                             4462 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
                             4463 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                             4464 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                             4465 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                             4466 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                             4467 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                             4468 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                             4469 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                             4470 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                             4471 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                             4472 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                             4473 ; 154  |
                             4474 ; 155  |typedef union               /* I2C Control Register         */
                             4475 ; 156  |{
                             4476 ; 157  |    struct {
                             4477 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                             4478 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                             4479 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                             4480 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                             4481 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                             4482 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                             4483 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                             4484 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                             4485 ; 166  |       int RWN         :1; /* Read/Not Write           */
                             4486 ; 167  |       unsigned WL     :2; /* Word Length              */
                             4487 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                             4488 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                             4489 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                             4490 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                             4491 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                             4492 ; 173  |        int LWORD       :1; /* Last Word                */
                             4493 ; 174  |        int SUBA        :1; /* Sub Address              */
                             4494 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                             4495 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                             4496 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                             4497 ; 178  |    } B;
                             4498 ; 179  |    int I;
                             4499 ; 180  |    unsigned U;
                             4500 ; 181  |} i2ccsr_type;
                             4501 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status Register (I2CCSR) */
                             4502 ; 183  |
                             4503 ; 184  |#endif
                             4504 
                             4506 
                             4507 ; 24   |#include "regsi2s.h"
                             4508 
                             4510 
                             4511 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4512 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4513 ; 3    |// Filename: regsi2s.inc
                             4514 ; 4    |// Description: Register definitions for I2S interface
                             4515 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4516 ; 6    |// The following naming conventions are followed in this file.
                             4517 ; 7    |// All registers are named using the format...
                             4518 ; 8    |//     HW_<module>_<regname>
                             4519 ; 9    |// where <module> is the module name which can be any of the following...
                             4520 ; 10   |//     USB20
                             4521 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4522 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4523 ; 13   |// that module)
                             4524 ; 14   |// <regname> is the specific register within that module
                             4525 ; 15   |// We also define the following...
                             4526 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4527 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4528 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4529 ; 19   |// which does something else, and
                             4530 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4531 ; 21   |// which does something else.
                             4532 ; 22   |// Other rules
                             4533 ; 23   |//     All caps
                             4534 ; 24   |//     Numeric identifiers start at 0
                             4535 ; 25   |#if !(defined(regsi2sinc))
                             4536 ; 26   |#define regsi2sinc 1
                             4537 ; 27   |
                             4538 ; 28   |#include "types.h"
                             4539 
                             4541 
                             4542 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4543 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4544 ; 3    |//
                             4545 ; 4    |// Filename: types.h
                             4546 ; 5    |// Description: Standard data types
                             4547 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4548 ; 7    |
                             4549 ; 8    |#ifndef _TYPES_H
                             4550 ; 9    |#define _TYPES_H
                             4551 ; 10   |
                             4552 ; 11   |// TODO:  move this outta here!
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4553 ; 12   |#if !defined(NOERROR)
                             4554 ; 13   |#define NOERROR 0
                             4555 ; 14   |#define SUCCESS 0
                             4556 ; 15   |#endif 
                             4557 ; 16   |#if !defined(SUCCESS)
                             4558 ; 17   |#define SUCCESS  0
                             4559 ; 18   |#endif
                             4560 ; 19   |#if !defined(ERROR)
                             4561 ; 20   |#define ERROR   -1
                             4562 ; 21   |#endif
                             4563 ; 22   |#if !defined(FALSE)
                             4564 ; 23   |#define FALSE 0
                             4565 ; 24   |#endif
                             4566 ; 25   |#if !defined(TRUE)
                             4567 ; 26   |#define TRUE  1
                             4568 ; 27   |#endif
                             4569 ; 28   |
                             4570 ; 29   |#if !defined(NULL)
                             4571 ; 30   |#define NULL 0
                             4572 ; 31   |#endif
                             4573 ; 32   |
                             4574 ; 33   |#define MAX_INT     0x7FFFFF
                             4575 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4576 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4577 ; 36   |#define MAX_ULONG   (-1) 
                             4578 ; 37   |
                             4579 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4580 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4581 ; 40   |
                             4582 ; 41   |
                             4583 ; 42   |#define BYTE    unsigned char       // btVarName
                             4584 ; 43   |#define CHAR    signed char         // cVarName
                             4585 ; 44   |#define USHORT  unsigned short      // usVarName
                             4586 ; 45   |#define SHORT   unsigned short      // sVarName
                             4587 ; 46   |#define WORD    unsigned int        // wVarName
                             4588 ; 47   |#define INT     signed int          // iVarName
                             4589 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4590 ; 49   |#define LONG    signed long         // lVarName
                             4591 ; 50   |#define BOOL    unsigned int        // bVarName
                             4592 ; 51   |#define FRACT   _fract              // frVarName
                             4593 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4594 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4595 ; 54   |#define FLOAT   float               // fVarName
                             4596 ; 55   |#define DBL     double              // dVarName
                             4597 ; 56   |#define ENUM    enum                // eVarName
                             4598 ; 57   |#define CMX     _complex            // cmxVarName
                             4599 ; 58   |typedef WORD UCS3;                   // 
                             4600 ; 59   |
                             4601 ; 60   |#define UINT16  unsigned short
                             4602 ; 61   |#define UINT8   unsigned char   
                             4603 ; 62   |#define UINT32  unsigned long
                             4604 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4605 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4606 ; 65   |#define WCHAR   UINT16
                             4607 ; 66   |
                             4608 ; 67   |//UINT128 is 16 bytes or 6 words
                             4609 ; 68   |typedef struct UINT128_3500 {   
                             4610 ; 69   |    int val[6];     
                             4611 ; 70   |} UINT128_3500;
                             4612 ; 71   |
                             4613 ; 72   |#define UINT128   UINT128_3500
                             4614 ; 73   |
                             4615 ; 74   |// Little endian word packed byte strings:   
                             4616 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4617 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4618 ; 77   |// Little endian word packed byte strings:   
                             4619 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4620 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4621 ; 80   |
                             4622 ; 81   |// Declare Memory Spaces To Use When Coding
                             4623 ; 82   |// A. Sector Buffers
                             4624 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4625 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4626 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4627 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4628 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4629 ; 88   |// B. Media DDI Memory
                             4630 ; 89   |#define MEDIA_DDI_MEM _Y
                             4631 ; 90   |
                             4632 ; 91   |
                             4633 ; 92   |
                             4634 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4635 ; 94   |// Examples of circular pointers:
                             4636 ; 95   |//    INT CIRC cpiVarName
                             4637 ; 96   |//    DWORD CIRC cpdwVarName
                             4638 ; 97   |
                             4639 ; 98   |#define RETCODE INT                 // rcVarName
                             4640 ; 99   |
                             4641 ; 100  |// generic bitfield structure
                             4642 ; 101  |struct Bitfield {
                             4643 ; 102  |    unsigned int B0  :1;
                             4644 ; 103  |    unsigned int B1  :1;
                             4645 ; 104  |    unsigned int B2  :1;
                             4646 ; 105  |    unsigned int B3  :1;
                             4647 ; 106  |    unsigned int B4  :1;
                             4648 ; 107  |    unsigned int B5  :1;
                             4649 ; 108  |    unsigned int B6  :1;
                             4650 ; 109  |    unsigned int B7  :1;
                             4651 ; 110  |    unsigned int B8  :1;
                             4652 ; 111  |    unsigned int B9  :1;
                             4653 ; 112  |    unsigned int B10 :1;
                             4654 ; 113  |    unsigned int B11 :1;
                             4655 ; 114  |    unsigned int B12 :1;
                             4656 ; 115  |    unsigned int B13 :1;
                             4657 ; 116  |    unsigned int B14 :1;
                             4658 ; 117  |    unsigned int B15 :1;
                             4659 ; 118  |    unsigned int B16 :1;
                             4660 ; 119  |    unsigned int B17 :1;
                             4661 ; 120  |    unsigned int B18 :1;
                             4662 ; 121  |    unsigned int B19 :1;
                             4663 ; 122  |    unsigned int B20 :1;
                             4664 ; 123  |    unsigned int B21 :1;
                             4665 ; 124  |    unsigned int B22 :1;
                             4666 ; 125  |    unsigned int B23 :1;
                             4667 ; 126  |};
                             4668 ; 127  |
                             4669 ; 128  |union BitInt {
                             4670 ; 129  |        struct Bitfield B;
                             4671 ; 130  |        int        I;
                             4672 ; 131  |};
                             4673 ; 132  |
                             4674 ; 133  |#define MAX_MSG_LENGTH 10
                             4675 ; 134  |struct CMessage
                             4676 ; 135  |{
                             4677 ; 136  |        unsigned int m_uLength;
                             4678 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4679 ; 138  |};
                             4680 ; 139  |
                             4681 ; 140  |typedef struct {
                             4682 ; 141  |    WORD m_wLength;
                             4683 ; 142  |    WORD m_wMessage;
                             4684 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4685 ; 144  |} Message;
                             4686 ; 145  |
                             4687 ; 146  |struct MessageQueueDescriptor
                             4688 ; 147  |{
                             4689 ; 148  |        int *m_pBase;
                             4690 ; 149  |        int m_iModulo;
                             4691 ; 150  |        int m_iSize;
                             4692 ; 151  |        int *m_pHead;
                             4693 ; 152  |        int *m_pTail;
                             4694 ; 153  |};
                             4695 ; 154  |
                             4696 ; 155  |struct ModuleEntry
                             4697 ; 156  |{
                             4698 ; 157  |    int m_iSignaledEventMask;
                             4699 ; 158  |    int m_iWaitEventMask;
                             4700 ; 159  |    int m_iResourceOfCode;
                             4701 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4702 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             4703 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4704 ; 163  |    int m_uTimeOutHigh;
                             4705 ; 164  |    int m_uTimeOutLow;
                             4706 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4707 ; 166  |};
                             4708 ; 167  |
                             4709 ; 168  |union WaitMask{
                             4710 ; 169  |    struct B{
                             4711 ; 170  |        unsigned int m_bNone     :1;
                             4712 ; 171  |        unsigned int m_bMessage  :1;
                             4713 ; 172  |        unsigned int m_bTimer    :1;
                             4714 ; 173  |        unsigned int m_bButton   :1;
                             4715 ; 174  |    } B;
                             4716 ; 175  |    int I;
                             4717 ; 176  |} ;
                             4718 ; 177  |
                             4719 ; 178  |
                             4720 ; 179  |struct Button {
                             4721 ; 180  |        WORD wButtonEvent;
                             4722 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4723 ; 182  |};
                             4724 ; 183  |
                             4725 ; 184  |struct Message {
                             4726 ; 185  |        WORD wMsgLength;
                             4727 ; 186  |        WORD wMsgCommand;
                             4728 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4729 ; 188  |};
                             4730 ; 189  |
                             4731 ; 190  |union EventTypes {
                             4732 ; 191  |        struct CMessage msg;
                             4733 ; 192  |        struct Button Button ;
                             4734 ; 193  |        struct Message Message;
                             4735 ; 194  |};
                             4736 ; 195  |
                             4737 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4738 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4739 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4740 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4741 ; 200  |
                             4742 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4743 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4744 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4745 ; 204  |
                             4746 ; 205  |#if DEBUG
                             4747 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4748 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4749 ; 208  |#else 
                             4750 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             4751 ; 210  |#define DebugBuildAssert(x)    
                             4752 ; 211  |#endif
                             4753 ; 212  |
                             4754 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4755 ; 214  |//  #pragma asm
                             4756 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4757 ; 216  |//  #pragma endasm
                             4758 ; 217  |
                             4759 ; 218  |
                             4760 ; 219  |#ifdef COLOR_262K
                             4761 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             4762 ; 221  |#elif defined(COLOR_65K)
                             4763 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             4764 ; 223  |#else
                             4765 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             4766 ; 225  |#endif
                             4767 ; 226  |    
                             4768 ; 227  |#endif // #ifndef _TYPES_H
                             4769 
                             4771 
                             4772 ; 29   |
                             4773 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                             4774 ; 31   |////  I2S Registers (SAI)
                             4775 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                             4776 ; 33   |
                             4777 ; 34   |
                             4778 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                             4779 ; 36   |
                             4780 ; 37   |
                             4781 ; 38   |
                             4782 ; 39   |
                             4783 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                             4784 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                             4785 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                             4786 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                             4787 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                             4788 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                             4789 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                             4790 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                             4791 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                             4792 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                             4793 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                             4794 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                             4795 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                             4796 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                             4797 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                             4798 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                             4799 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                             4800 ; 57   |
                             4801 ; 58   |
                             4802 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                             4803 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                             4804 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4805 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                             4806 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                             4807 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                             4808 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                             4809 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                             4810 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                             4811 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                             4812 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                             4813 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                             4814 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                             4815 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                             4816 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                             4817 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                             4818 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                             4819 ; 76   |
                             4820 ; 77   |
                             4821 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                             4822 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                             4823 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                             4824 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                             4825 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                             4826 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                             4827 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                             4828 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                             4829 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                             4830 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                             4831 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                             4832 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                             4833 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                             4834 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                             4835 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                             4836 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                             4837 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                             4838 ; 95   |
                             4839 ; 96   |
                             4840 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                             4841 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                             4842 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                             4843 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                             4844 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                             4845 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                             4846 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                             4847 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                             4848 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                             4849 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                             4850 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                             4851 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                             4852 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                             4853 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                             4854 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                             4855 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                             4856 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                             4857 ; 114  |
                             4858 ; 115  |typedef union
                             4859 ; 116  |{
                             4860 ; 117  |    struct {
                             4861 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                             4862 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                             4863 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                             4864 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                             4865 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                             4866 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                             4867 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                             4868 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                             4869 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                             4870 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                             4871 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                             4872 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                             4873 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                             4874 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                             4875 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                             4876 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                             4877 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                             4878 ; 135  |    } B;
                             4879 ; 136  |    int I;
                             4880 ; 137  |    unsigned U;
                             4881 ; 138  |} saircsr_type;
                             4882 ; 139  |
                             4883 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive CSR         */
                             4884 ; 141  |
                             4885 ; 142  |typedef union
                             4886 ; 143  |{
                             4887 ; 144  |    struct {
                             4888 ; 145  |        unsigned SAI :24;
                             4889 ; 146  |    } B;
                             4890 ; 147  |    int I;
                             4891 ; 148  |    unsigned U;
                             4892 ; 149  |} saixr_type;
                             4893 ; 150  |
                             4894 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received data reg 0 */
                             4895 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received data reg 1 */
                             4896 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received data reg 2 */
                             4897 ; 154  |
                             4898 ; 155  |
                             4899 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                             4900 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                             4901 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                             4902 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                             4903 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                             4904 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                             4905 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                             4906 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                             4907 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                             4908 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                             4909 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                             4910 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                             4911 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                             4912 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                             4913 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                             4914 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                             4915 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                             4916 ; 173  |
                             4917 ; 174  |
                             4918 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                             4919 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                             4920 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                             4921 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                             4922 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                             4923 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                             4924 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                             4925 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                             4926 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                             4927 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                             4928 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                             4929 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                             4930 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                             4931 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                             4932 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                             4933 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                             4934 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                             4935 ; 192  |
                             4936 ; 193  |
                             4937 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                             4938 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                             4939 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                             4940 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                             4941 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                             4942 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                             4943 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                             4944 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                             4945 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                             4946 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                             4947 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                             4948 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                             4949 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                             4950 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                             4951 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                             4952 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                             4953 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                             4954 ; 211  |
                             4955 ; 212  |
                             4956 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                             4957 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                             4958 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                             4959 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                             4960 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                             4961 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                             4962 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                             4963 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                             4964 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                             4965 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                             4966 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                             4967 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                             4968 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                             4969 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                             4970 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                             4971 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                             4972 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                             4973 ; 230  |
                             4974 ; 231  |
                             4975 ; 232  |typedef union
                             4976 ; 233  |{
                             4977 ; 234  |    struct {
                             4978 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                             4979 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                             4980 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                             4981 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                             4982 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                             4983 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                             4984 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction 
                             4985 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                             4986 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                             4987 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                             4988 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justification
                             4989 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                             4990 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                             4991 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                             4992 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                             4993 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                             4994 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                             4995 ; 252  |    } B;
                             4996 ; 253  |    int I;
                             4997 ; 254  |    unsigned U;
                             4998 ; 255  |} saitcsr_type;
                             4999 ; 256  |
                             5000 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR      */
                             5001 ; 258  |
                             5002 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit data reg 0 */
                             5003 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit data reg 1 */
                             5004 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit data reg 2 */
                             5005 ; 262  |
                             5006 ; 263  |#endif
                             5007 
                             5009 
                             5010 ; 25   |#include "regsicoll.h"
                             5011 
                             5013 
                             5014 ; 1    |#if !defined(__REGS_ICOLL_INC)
                             5015 ; 2    |#define __REGS_ICOLL_INC 1
                             5016 ; 3    |
                             5017 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             5018 ; 5    |//  Interrupt Collector Registers
                             5019 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             5020 ; 7    |
                             5021 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                             5022 ; 9    |
                             5023 ; 10   |
                             5024 ; 11   |
                             5025 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                             5026 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                             5027 ; 14   |
                             5028 ; 15   |typedef union
                             5029 ; 16   |{
                             5030 ; 17   |    struct {
                             5031 ; 18   |        int SEN0        :1;
                             5032 ; 19   |        int SEN1        :1;
                             5033 ; 20   |        int SEN2        :1;
                             5034 ; 21   |        int SEN3        :1;
                             5035 ; 22   |        int SEN4        :1;
                             5036 ; 23   |        int SEN5        :1;
                             5037 ; 24   |        int SEN6        :1;
                             5038 ; 25   |        int SEN7        :1;
                             5039 ; 26   |        int SEN8        :1;
                             5040 ; 27   |        int SEN9        :1;
                             5041 ; 28   |        int SEN10       :1;
                             5042 ; 29   |        int SEN11       :1;
                             5043 ; 30   |        int SEN12       :1;
                             5044 ; 31   |        int SEN13       :1;
                             5045 ; 32   |        int SEN14       :1;
                             5046 ; 33   |        int SEN15       :1;
                             5047 ; 34   |        int SEN16       :1;
                             5048 ; 35   |        int SEN17       :1;
                             5049 ; 36   |        int SEN18       :1;
                             5050 ; 37   |        int SEN19       :1;
                             5051 ; 38   |        int SEN20       :1;
                             5052 ; 39   |        int SEN21       :1;
                             5053 ; 40   |        int SEN22       :1;
                             5054 ; 41   |        int SEN23       :1;
                             5055 ; 42   |    } B;
                             5056 ; 43   |    int I;
                             5057 ; 44   |} iclenable0_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5058 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt Priority Register Core   */
                             5059 ; 46   |
                             5060 ; 47   |
                             5061 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                             5062 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                             5063 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                             5064 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                             5065 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                             5066 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                             5067 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                             5068 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                             5069 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                             5070 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                             5071 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                             5072 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                             5073 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                             5074 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                             5075 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                             5076 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                             5077 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                             5078 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                             5079 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                             5080 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                             5081 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                             5082 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                             5083 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                             5084 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                             5085 ; 72   |
                             5086 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                             5087 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                             5088 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                             5089 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                             5090 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                             5091 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                             5092 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                             5093 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                             5094 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                             5095 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                             5096 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                             5097 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                             5098 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                             5099 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                             5100 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                             5101 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                             5102 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                             5103 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                             5104 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                             5105 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                             5106 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                             5107 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                             5108 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                             5109 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                             5110 ; 97   |
                             5111 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                             5112 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                             5113 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                             5114 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                             5115 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                             5116 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                             5117 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                             5118 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                             5119 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                             5120 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                             5121 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                             5122 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                             5123 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                             5124 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                             5125 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                             5126 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                             5127 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                             5128 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                             5129 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                             5130 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                             5131 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                             5132 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                             5133 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                             5134 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                             5135 ; 122  |
                             5136 ; 123  |
                             5137 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             5138 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                             5139 ; 126  |typedef union
                             5140 ; 127  |{
                             5141 ; 128  |    struct {
                             5142 ; 129  |        
                             5143 ; 130  |        int SEN24       :1;
                             5144 ; 131  |        int SEN25       :1;
                             5145 ; 132  |        int SEN26       :1;
                             5146 ; 133  |        int SEN27       :1;
                             5147 ; 134  |        int SEN28       :1;
                             5148 ; 135  |        int SEN29       :1;
                             5149 ; 136  |        int SEN30       :1;
                             5150 ; 137  |        int SEN31       :1;
                             5151 ; 138  |        int SEN32       :1;
                             5152 ; 139  |        int SEN33       :1;
                             5153 ; 140  |    } B;
                             5154 ; 141  |    int I;
                             5155 ; 142  |} iclenable1_type;
                             5156 ; 143  |
                             5157 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interrupt Priority Register Core    */
                             5158 ; 145  |
                             5159 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                             5160 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                             5161 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                             5162 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                             5163 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                             5164 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                             5165 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                             5166 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                             5167 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                             5168 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                             5169 ; 156  |
                             5170 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                             5171 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                             5172 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                             5173 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                             5174 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                             5175 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                             5176 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                             5177 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                             5178 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                             5179 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                             5180 ; 167  |
                             5181 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                             5182 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                             5183 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                             5184 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                             5185 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                             5186 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                             5187 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                             5188 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                             5189 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                             5190 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                             5191 ; 178  |
                             5192 ; 179  |
                             5193 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             5194 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                             5195 ; 182  |typedef union
                             5196 ; 183  |{
                             5197 ; 184  |    struct {
                             5198 ; 185  |        int SST0        :1;
                             5199 ; 186  |        int SST1        :1;
                             5200 ; 187  |        int SST2        :1;
                             5201 ; 188  |        int SST3        :1;
                             5202 ; 189  |        int SST4        :1;
                             5203 ; 190  |        int SST5        :1;
                             5204 ; 191  |        int SST6        :1;
                             5205 ; 192  |        int SST7        :1;
                             5206 ; 193  |        int SST8        :1;
                             5207 ; 194  |        int SST9        :1;
                             5208 ; 195  |        int SST10       :1;
                             5209 ; 196  |        int SST11       :1;
                             5210 ; 197  |        int SST12       :1;
                             5211 ; 198  |        int SST13       :1;
                             5212 ; 199  |        int SST14       :1;
                             5213 ; 200  |        int SST15       :1;
                             5214 ; 201  |        int SST16       :1;
                             5215 ; 202  |        int SST17       :1;
                             5216 ; 203  |        int SST18       :1;
                             5217 ; 204  |        int SST19       :1;
                             5218 ; 205  |        int SST20       :1;
                             5219 ; 206  |        int SST21       :1;
                             5220 ; 207  |        int SST22       :1;
                             5221 ; 208  |        int SST23       :1;
                             5222 ; 209  |    } B;
                             5223 ; 210  |    int I;
                             5224 ; 211  |} iclstatus0_type;
                             5225 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interrupt Priority Register Core */
                             5226 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                             5227 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                             5228 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                             5229 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                             5230 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                             5231 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                             5232 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                             5233 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                             5234 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                             5235 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                             5236 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                             5237 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                             5238 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                             5239 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                             5240 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                             5241 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                             5242 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                             5243 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                             5244 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                             5245 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                             5246 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                             5247 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                             5248 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                             5249 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                             5250 ; 237  |
                             5251 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                             5252 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                             5253 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                             5254 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                             5255 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                             5256 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                             5257 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                             5258 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                             5259 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                             5260 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                             5261 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                             5262 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                             5263 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                             5264 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                             5265 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                             5266 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                             5267 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                             5268 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                             5269 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                             5270 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                             5271 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                             5272 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                             5273 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                             5274 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                             5275 ; 262  |
                             5276 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                             5277 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                             5278 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                             5279 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                             5280 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                             5281 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                             5282 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                             5283 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                             5284 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                             5285 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                             5286 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                             5287 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                             5288 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                             5289 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                             5290 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                             5291 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                             5292 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                             5293 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                             5294 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                             5295 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                             5296 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                             5297 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                             5298 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                             5299 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                             5300 ; 287  |
                             5301 ; 288  |
                             5302 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                             5303 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                             5304 ; 291  |typedef union
                             5305 ; 292  |{
                             5306 ; 293  |    struct {
                             5307 ; 294  |        int SST24       :1;
                             5308 ; 295  |        int SST25       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5309 ; 296  |        int SST26       :1;
                             5310 ; 297  |        int SST27       :1;
                             5311 ; 298  |        int SST28       :1;
                             5312 ; 299  |        int SST29       :1;
                             5313 ; 300  |        int SST30       :1;
                             5314 ; 301  |        int SST31       :1;
                             5315 ; 302  |        int SST32       :1;
                             5316 ; 303  |        int SST33       :1;
                             5317 ; 304  |    } B;
                             5318 ; 305  |    int I;
                             5319 ; 306  |} iclstatus1_type;
                             5320 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interrupt Priority Register Core */
                             5321 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                             5322 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                             5323 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                             5324 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                             5325 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                             5326 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                             5327 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                             5328 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                             5329 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                             5330 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                             5331 ; 318  |
                             5332 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                             5333 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                             5334 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                             5335 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                             5336 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                             5337 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                             5338 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                             5339 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                             5340 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                             5341 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                             5342 ; 329  |
                             5343 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                             5344 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                             5345 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                             5346 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                             5347 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                             5348 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                             5349 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                             5350 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                             5351 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                             5352 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                             5353 ; 340  |
                             5354 ; 341  |
                             5355 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                             5356 ; 343  |//  Interrupt Collector Priority Defs
                             5357 ; 344  |typedef union
                             5358 ; 345  |{
                             5359 ; 346  |    struct {
                             5360 ; 347  |        unsigned S0P    :3;
                             5361 ; 348  |        unsigned S1P    :3;
                             5362 ; 349  |        unsigned S2P    :3;
                             5363 ; 350  |        unsigned S3P    :3;
                             5364 ; 351  |        unsigned S4P    :3;
                             5365 ; 352  |        unsigned S5P    :3;
                             5366 ; 353  |        unsigned S6P    :3;
                             5367 ; 354  |        unsigned S7P    :3;
                             5368 ; 355  |    } B;
                             5369 ; 356  |    int I;
                             5370 ; 357  |
                             5371 ; 358  |} iclprior0_type;
                             5372 ; 359  |
                             5373 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrupt Collector Register 0 Priority   */
                             5374 ; 361  |
                             5375 ; 362  |#define HW_ICLPRIORR_SP_0 0
                             5376 ; 363  |#define HW_ICLPRIORR_SP_1 1
                             5377 ; 364  |#define HW_ICLPRIORR_SP_2 2
                             5378 ; 365  |#define HW_ICLPRIORR_SP_3 3
                             5379 ; 366  |#define HW_ICLPRIORR_SP_4 4
                             5380 ; 367  |#define HW_ICLPRIORR_SP_5 5
                             5381 ; 368  |#define HW_ICLPRIORR_SP_6 6
                             5382 ; 369  |#define HW_ICLPRIORR_SP_7 7
                             5383 ; 370  |
                             5384 ; 371  |
                             5385 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                             5386 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                             5387 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                             5388 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                             5389 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                             5390 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                             5391 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                             5392 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                             5393 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                             5394 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                             5395 ; 382  |
                             5396 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                             5397 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                             5398 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                             5399 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                             5400 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                             5401 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                             5402 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                             5403 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                             5404 ; 391  |
                             5405 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                             5406 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                             5407 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                             5408 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                             5409 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                             5410 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                             5411 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                             5412 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                             5413 ; 400  |
                             5414 ; 401  |
                             5415 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                             5416 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                             5417 ; 404  |typedef union
                             5418 ; 405  |{
                             5419 ; 406  |    struct {
                             5420 ; 407  |        unsigned S8P    :3;
                             5421 ; 408  |        unsigned S9P    :3;
                             5422 ; 409  |        unsigned S10P   :3;
                             5423 ; 410  |        unsigned S11P   :3;
                             5424 ; 411  |        unsigned S12P   :3;
                             5425 ; 412  |        unsigned S13P   :3;
                             5426 ; 413  |        unsigned S14P   :3;
                             5427 ; 414  |        unsigned S15P   :3;
                             5428 ; 415  |    } B;
                             5429 ; 416  |    int I;
                             5430 ; 417  |} iclprior1_type;
                             5431 ; 418  |
                             5432 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrupt Collector Register 1 Priority   */
                             5433 ; 420  |
                             5434 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                             5435 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                             5436 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                             5437 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                             5438 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                             5439 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                             5440 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                             5441 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                             5442 ; 429  |
                             5443 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                             5444 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                             5445 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                             5446 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                             5447 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                             5448 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                             5449 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                             5450 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                             5451 ; 438  |
                             5452 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                             5453 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                             5454 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                             5455 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                             5456 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                             5457 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                             5458 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                             5459 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                             5460 ; 447  |
                             5461 ; 448  |
                             5462 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                             5463 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                             5464 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                             5465 ; 452  |{
                             5466 ; 453  |    struct {
                             5467 ; 454  |        unsigned S16P   :3;
                             5468 ; 455  |        unsigned S17P   :3;
                             5469 ; 456  |        unsigned S18P   :3;
                             5470 ; 457  |        unsigned S19P   :3;
                             5471 ; 458  |        unsigned S20P   :3;
                             5472 ; 459  |        unsigned S21P   :3;
                             5473 ; 460  |        unsigned S22P   :3;
                             5474 ; 461  |        unsigned S23P   :3;
                             5475 ; 462  |    } B;
                             5476 ; 463  |    int I;
                             5477 ; 464  |} iclprior2_type;
                             5478 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrupt Collector Register 2 Priority   */
                             5479 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                             5480 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                             5481 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                             5482 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                             5483 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                             5484 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                             5485 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                             5486 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                             5487 ; 474  |
                             5488 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                             5489 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                             5490 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                             5491 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                             5492 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                             5493 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                             5494 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                             5495 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                             5496 ; 483  |
                             5497 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                             5498 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                             5499 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                             5500 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                             5501 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                             5502 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                             5503 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                             5504 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                             5505 ; 492  |
                             5506 ; 493  |
                             5507 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                             5508 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                             5509 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5510 ; 497  |{
                             5511 ; 498  |    struct {
                             5512 ; 499  |        unsigned S24P   :3;
                             5513 ; 500  |        unsigned S25P   :3;
                             5514 ; 501  |        unsigned S26P   :3;
                             5515 ; 502  |        unsigned S27P   :3;
                             5516 ; 503  |        unsigned S28P   :3;
                             5517 ; 504  |        unsigned S29P   :3;
                             5518 ; 505  |        unsigned S30P   :3;
                             5519 ; 506  |        unsigned S31P   :3;
                             5520 ; 507  |    } B;
                             5521 ; 508  |    int I;
                             5522 ; 509  |} iclprior3_type;
                             5523 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrupt Collector Register 3 Priority   */
                             5524 ; 511  |
                             5525 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                             5526 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             5527 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             5528 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             5529 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             5530 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             5531 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             5532 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             5533 ; 520  |
                             5534 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             5535 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                             5536 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             5537 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             5538 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             5539 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                             5540 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             5541 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             5542 ; 529  |
                             5543 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             5544 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             5545 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             5546 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             5547 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             5548 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             5549 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                             5550 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             5551 ; 538  |
                             5552 ; 539  |
                             5553 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             5554 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             5555 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5556 ; 543  |{
                             5557 ; 544  |    struct {
                             5558 ; 545  |        unsigned S32P   :3;
                             5559 ; 546  |        unsigned S33P   :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5560 ; 547  |    } B;
                             5561 ; 548  |    int I;
                             5562 ; 549  |} iclprior4_type;
                             5563 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt Collector Register 4 Priority   */
                             5564 ; 551  |
                             5565 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             5566 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             5567 ; 554  |
                             5568 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             5569 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                             5570 ; 557  |
                             5571 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             5572 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             5573 ; 560  |
                             5574 ; 561  |
                             5575 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             5576 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             5577 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             5578 ; 565  |{
                             5579 ; 566  |    struct {
                             5580 ; 567  |        unsigned S0S    :2;
                             5581 ; 568  |        unsigned S1S    :2;
                             5582 ; 569  |        unsigned S2S    :2;
                             5583 ; 570  |        unsigned S3S    :2;
                             5584 ; 571  |        unsigned S4S    :2;
                             5585 ; 572  |        unsigned S5S    :2;
                             5586 ; 573  |        unsigned S6S    :2;
                             5587 ; 574  |        unsigned S7S    :2;
                             5588 ; 575  |        unsigned S8S    :2;
                             5589 ; 576  |        unsigned S9S    :2;
                             5590 ; 577  |        unsigned S10S   :2;
                             5591 ; 578  |        unsigned S11S   :2;
                             5592 ; 579  |    } B;
                             5593 ; 580  |    int I;
                             5594 ; 581  |} iclsteer0_type;
                             5595 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrupt Collector Steering Register 0   */
                             5596 ; 583  |
                             5597 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             5598 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             5599 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                             5600 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             5601 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             5602 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                             5603 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             5604 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             5605 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             5606 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             5607 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             5608 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             5609 ; 596  |
                             5610 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             5611 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             5612 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                             5613 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             5614 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             5615 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             5616 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             5617 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             5618 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             5619 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             5620 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             5621 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             5622 ; 609  |
                             5623 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             5624 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             5625 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             5626 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             5627 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             5628 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             5629 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             5630 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                             5631 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             5632 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             5633 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             5634 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             5635 ; 622  |
                             5636 ; 623  |
                             5637 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             5638 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             5639 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             5640 ; 627  |{
                             5641 ; 628  |    struct {
                             5642 ; 629  |        unsigned S12S   :2;
                             5643 ; 630  |        unsigned S13S   :2;
                             5644 ; 631  |        unsigned S14S   :2;
                             5645 ; 632  |        unsigned S15S   :2;
                             5646 ; 633  |        unsigned S16S   :2;
                             5647 ; 634  |        unsigned S17S   :2;
                             5648 ; 635  |        unsigned S18S   :2;
                             5649 ; 636  |        unsigned S19S   :2;
                             5650 ; 637  |        unsigned S20S   :2;
                             5651 ; 638  |        unsigned S21S   :2;
                             5652 ; 639  |        unsigned S22S   :2;
                             5653 ; 640  |        unsigned S23S   :2;
                             5654 ; 641  |    } B;
                             5655 ; 642  |    int I;
                             5656 ; 643  |} iclsteer1_type;
                             5657 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrupt Collector Steering Register 1   */
                             5658 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             5659 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             5660 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                             5661 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             5662 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             5663 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                             5664 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             5665 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             5666 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             5667 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             5668 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             5669 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             5670 ; 657  |
                             5671 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             5672 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             5673 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             5674 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             5675 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             5676 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             5677 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             5678 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             5679 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             5680 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             5681 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             5682 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             5683 ; 670  |
                             5684 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             5685 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             5686 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             5687 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             5688 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             5689 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             5690 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             5691 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             5692 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             5693 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             5694 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             5695 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             5696 ; 683  |
                             5697 ; 684  |
                             5698 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             5699 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             5700 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             5701 ; 688  |{
                             5702 ; 689  |    struct {
                             5703 ; 690  |        unsigned S24S   :2;
                             5704 ; 691  |        unsigned S25S   :2;
                             5705 ; 692  |        unsigned S26S   :2;
                             5706 ; 693  |        unsigned S27S   :2;
                             5707 ; 694  |        unsigned S28S   :2;
                             5708 ; 695  |        unsigned S29S   :2;
                             5709 ; 696  |        unsigned S30S   :2;
                             5710 ; 697  |        unsigned S31S   :2;
                             5711 ; 698  |        unsigned S32S   :2;
                             5712 ; 699  |        unsigned S33S   :2;
                             5713 ; 700  |    } B;
                             5714 ; 701  |    int I;
                             5715 ; 702  |} iclsteer2_type;
                             5716 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interrupt Collector Steering Register 2  */
                             5717 ; 704  |
                             5718 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             5719 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             5720 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             5721 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             5722 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             5723 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             5724 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             5725 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             5726 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             5727 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             5728 ; 715  |
                             5729 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             5730 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             5731 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                             5732 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             5733 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             5734 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             5735 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             5736 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             5737 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             5738 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             5739 ; 726  |
                             5740 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             5741 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             5742 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             5743 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             5744 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             5745 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             5746 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             5747 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             5748 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             5749 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             5750 ; 737  |
                             5751 ; 738  |
                             5752 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             5753 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             5754 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             5755 ; 742  |{
                             5756 ; 743  |    struct {
                             5757 ; 744  |        int S0FV        :1;
                             5758 ; 745  |        int S1FV        :1;
                             5759 ; 746  |        int S2FV        :1;
                             5760 ; 747  |        int S3FV        :1;
                             5761 ; 748  |        int S4FV        :1;
                             5762 ; 749  |        int S5FV        :1;
                             5763 ; 750  |        int S6FV        :1;
                             5764 ; 751  |        int S7FV        :1;
                             5765 ; 752  |        int S8FV        :1;
                             5766 ; 753  |        int S9FV        :1;
                             5767 ; 754  |        int S10FV       :1;
                             5768 ; 755  |        int S11FV       :1;
                             5769 ; 756  |        int S12FV       :1;
                             5770 ; 757  |        int S13FV       :1;
                             5771 ; 758  |        int S14FV       :1;
                             5772 ; 759  |        int S15FV       :1;
                             5773 ; 760  |        int S16FV       :1;
                             5774 ; 761  |        int S17FV       :1;
                             5775 ; 762  |        int S18FV       :1;
                             5776 ; 763  |        int S19FV       :1;
                             5777 ; 764  |        int S20FV       :1;
                             5778 ; 765  |        int S21FV       :1;
                             5779 ; 766  |        int S22FV       :1;
                             5780 ; 767  |        int S23FV       :1;
                             5781 ; 768  |    } B;
                             5782 ; 769  |    int I;
                             5783 ; 770  |} iclforce0_type;
                             5784 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interrupt Collector Debug Force Register 0   */
                             5785 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             5786 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             5787 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             5788 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             5789 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             5790 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             5791 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             5792 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                             5793 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             5794 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             5795 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             5796 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             5797 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             5798 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             5799 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             5800 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             5801 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             5802 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             5803 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             5804 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             5805 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             5806 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             5807 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             5808 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             5809 ; 796  |
                             5810 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5811 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             5812 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             5813 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             5814 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             5815 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             5816 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             5817 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             5818 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             5819 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             5820 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             5821 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             5822 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             5823 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             5824 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             5825 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             5826 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             5827 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             5828 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             5829 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             5830 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             5831 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             5832 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             5833 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             5834 ; 821  |
                             5835 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             5836 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             5837 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             5838 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             5839 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             5840 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             5841 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             5842 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             5843 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             5844 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             5845 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             5846 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             5847 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             5848 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             5849 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             5850 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             5851 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             5852 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             5853 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             5854 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                             5855 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             5856 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             5857 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             5858 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             5859 ; 846  |
                             5860 ; 847  |
                             5861 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             5862 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             5863 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             5864 ; 851  |{
                             5865 ; 852  |    struct {
                             5866 ; 853  |        int S24FV       :1;
                             5867 ; 854  |        int S25FV       :1;
                             5868 ; 855  |        int S26FV       :1;
                             5869 ; 856  |        int S27FV       :1;
                             5870 ; 857  |        int S28FV       :1;
                             5871 ; 858  |        int S29FV       :1;
                             5872 ; 859  |        int S30FV       :1;
                             5873 ; 860  |        int S31FV       :1;
                             5874 ; 861  |        int S32FV       :1;
                             5875 ; 862  |        int S33FV       :1;
                             5876 ; 863  |    } B;
                             5877 ; 864  |    int I;
                             5878 ; 865  |} iclforce1_type;
                             5879 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interrupt Collector Debug Force Register 1   */
                             5880 ; 867  |
                             5881 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             5882 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             5883 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             5884 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             5885 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             5886 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             5887 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             5888 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             5889 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             5890 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             5891 ; 878  |
                             5892 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             5893 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             5894 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             5895 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             5896 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             5897 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             5898 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             5899 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             5900 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             5901 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             5902 ; 889  |
                             5903 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             5904 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             5905 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             5906 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             5907 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             5908 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             5909 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             5910 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             5911 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             5912 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             5913 ; 900  |
                             5914 ; 901  |
                             5915 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                             5916 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             5917 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             5918 ; 905  |{
                             5919 ; 906  |    struct {
                             5920 ; 907  |        int S0FE        :1;
                             5921 ; 908  |        int S1FE        :1;
                             5922 ; 909  |        int S2FE        :1;
                             5923 ; 910  |        int S3FE        :1;
                             5924 ; 911  |        int S4FE        :1;
                             5925 ; 912  |        int S5FE        :1;
                             5926 ; 913  |        int S6FE        :1;
                             5927 ; 914  |        int S7FE        :1;
                             5928 ; 915  |        int S8FE        :1;
                             5929 ; 916  |        int S9FE        :1;
                             5930 ; 917  |        int S10FE       :1;
                             5931 ; 918  |        int S11FE       :1;
                             5932 ; 919  |        int S12FE       :1;
                             5933 ; 920  |        int S13FE       :1;
                             5934 ; 921  |        int S14FE       :1;
                             5935 ; 922  |        int S15FE       :1;
                             5936 ; 923  |        int S16FE       :1;
                             5937 ; 924  |        int S17FE       :1;
                             5938 ; 925  |        int S18FE       :1;
                             5939 ; 926  |        int S19FE       :1;
                             5940 ; 927  |        int S20FE       :1;
                             5941 ; 928  |        int S21FE       :1;
                             5942 ; 929  |        int S22FE       :1;
                             5943 ; 930  |        int S23FE       :1;
                             5944 ; 931  |    } B;
                             5945 ; 932  |    int I;
                             5946 ; 933  |} iclfenable0_type;
                             5947 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Interrupt Collector Force Enable Register 0    */
                             5948 ; 935  |
                             5949 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             5950 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             5951 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             5952 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             5953 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             5954 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             5955 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             5956 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             5957 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             5958 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             5959 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             5960 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             5961 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             5962 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             5963 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             5964 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             5965 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             5966 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             5967 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             5968 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             5969 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             5970 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             5971 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             5972 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             5973 ; 960  |
                             5974 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             5975 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             5976 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             5977 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             5978 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             5979 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             5980 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             5981 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             5982 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             5983 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             5984 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             5985 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             5986 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             5987 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             5988 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             5989 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             5990 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             5991 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             5992 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             5993 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             5994 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             5995 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             5996 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             5997 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             5998 ; 985  |
                             5999 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             6000 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             6001 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             6002 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             6003 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             6004 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             6005 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             6006 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             6007 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             6008 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             6009 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             6010 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             6011 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             6012 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             6013 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             6014 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             6015 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             6016 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             6017 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             6018 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             6019 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             6020 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             6021 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             6022 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             6023 ; 1010 |
                             6024 ; 1011 |
                             6025 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             6026 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             6027 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             6028 ; 1015 |{
                             6029 ; 1016 |    struct {
                             6030 ; 1017 |        int S24FE       :1;
                             6031 ; 1018 |        int S25FE       :1;
                             6032 ; 1019 |        int S26FE       :1;
                             6033 ; 1020 |        int S27FE       :1;
                             6034 ; 1021 |        int S28FE       :1;
                             6035 ; 1022 |        int S29FE       :1;
                             6036 ; 1023 |        int S30FE       :1;
                             6037 ; 1024 |        int S31FE       :1;
                             6038 ; 1025 |        int S32FE       :1;
                             6039 ; 1026 |        int S33FE       :1;
                             6040 ; 1027 |    } B;
                             6041 ; 1028 |    int I;
                             6042 ; 1029 |} iclfenable1_type;
                             6043 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Interrupt Collector Force Enable Register 1    */
                             6044 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             6045 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             6046 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             6047 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             6048 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             6049 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             6050 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             6051 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             6052 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             6053 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             6054 ; 1041 |
                             6055 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             6056 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             6057 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             6058 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             6059 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             6060 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             6061 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6062 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             6063 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             6064 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             6065 ; 1052 |
                             6066 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             6067 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             6068 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             6069 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             6070 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             6071 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             6072 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             6073 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             6074 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             6075 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                             6076 ; 1063 |
                             6077 ; 1064 |
                             6078 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             6079 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             6080 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             6081 ; 1068 |{
                             6082 ; 1069 |    struct {
                             6083 ; 1070 |        unsigned RQ     :7;
                             6084 ; 1071 |        unsigned IVA    :7;
                             6085 ; 1072 |        unsigned IVB    :7;
                             6086 ; 1073 |    } B;
                             6087 ; 1074 |    int I;
                             6088 ; 1075 |} iclobsvz0_type;
                             6089 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interrupt Collector Observation Register 0   */
                             6090 ; 1077 |
                             6091 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             6092 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             6093 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             6094 ; 1081 |
                             6095 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             6096 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             6097 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             6098 ; 1085 |
                             6099 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             6100 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             6101 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             6102 ; 1089 |
                             6103 ; 1090 |
                             6104 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             6105 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             6106 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             6107 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             6108 ; 1095 |
                             6109 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             6110 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             6111 ; 1098 |
                             6112 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             6113 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             6114 ; 1101 |
                             6115 ; 1102 |
                             6116 ; 1103 |
                             6117 ; 1104 |
                             6118 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             6119 ; 1106 |//  Interrupt Vectors
                             6120 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             6121 ; 1108 |// Reset Vector
                             6122 ; 1109 |#define HW_IVECRESET 0x0000           
                             6123 ; 1110 |// Stack Error
                             6124 ; 1111 |#define HW_IVECSTERR 0x0002           
                             6125 ; 1112 |// Trace
                             6126 ; 1113 |#define HW_IVECTRAC 0x0004           
                             6127 ; 1114 |// SWI
                             6128 ; 1115 |#define HW_IVECSWI 0x0006           
                             6129 ; 1116 |// ~IRQA
                             6130 ; 1117 |#define HW_IVECIRQA 0x0008           
                             6131 ; 1118 |// ~IRQB - BROWNOUT
                             6132 ; 1119 |#define HW_IVECIRQB 0x000A           
                             6133 ; 1120 |// Fatal Error
                             6134 ; 1121 |#define HW_IVECERROR 0x000C           
                             6135 ; 1122 |// SPI
                             6136 ; 1123 |#define HW_IVECSPI 0x000E           
                             6137 ; 1124 |// I2S TX Data Empty
                             6138 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             6139 ; 1126 |// I2S TX Underflow
                             6140 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             6141 ; 1128 |// I2S RX Data Full
                             6142 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             6143 ; 1130 |// I2S RX Overflow
                             6144 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             6145 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors here
                             6146 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors here
                             6147 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors here
                             6148 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             6149 ; 1136 |// GPIO1
                             6150 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             6151 ; 1138 |// GPIO2
                             6152 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             6153 ; 1140 |// GPIO0
                             6154 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             6155 ; 1142 |// TIMER0
                             6156 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             6157 ; 1144 |// TIMER1
                             6158 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             6159 ; 1146 |// TIMER2
                             6160 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             6161 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors here
                             6162 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors here
                             6163 ; 1150 |// I2C RX Data Ready
                             6164 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             6165 ; 1152 |// I2C RX Overflow
                             6166 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             6167 ; 1154 |// I2C TX Data Empty
                             6168 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             6169 ; 1156 |// I2C TX Underflow
                             6170 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             6171 ; 1158 |// Illegal Instruction
                             6172 ; 1159 |#define HW_IVECILI 0x0038           
                             6173 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors here
                             6174 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             6175 ; 1162 |#define HW_IVECDACE 0x003C           
                             6176 ; 1163 |// DAC Underflow ISR
                             6177 ; 1164 |#define HW_IVECDACUF 0x003E           
                             6178 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors here
                             6179 ; 1166 |// ADC Full ISR
                             6180 ; 1167 |#define HW_IVECADCF 0x0042           
                             6181 ; 1168 |// ADC Overflow ISR
                             6182 ; 1169 |#define HW_IVECADCOF 0x0044           
                             6183 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors here
                             6184 ; 1171 |// TIMER3
                             6185 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             6186 ; 1173 |// GPIO3
                             6187 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             6188 ; 1175 |// SDRAM
                             6189 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             6190 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors here
                             6191 ; 1178 |// 5 volt power connected
                             6192 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             6193 ; 1180 |// USB Controller
                             6194 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             6195 ; 1182 |// USB Wakeup 
                             6196 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             6197 ; 1184 |// 5 volt power disconnected
                             6198 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             6199 ; 1186 |// enhanced SPI
                             6200 ; 1187 |#define HW_IVECESPI 0x0058           
                             6201 ; 1188 |// filter coprocessor
                             6202 ; 1189 |#define HW_IVECFILCO 0x005A           
                             6203 ; 1190 |// low res ADC #1
                             6204 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             6205 ; 1192 |// real time clock alarm
                             6206 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             6207 ; 1194 |// low res ADC #2
                             6208 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             6209 ; 1196 |// flash hardware ECC
                             6210 ; 1197 |#define HW_IVECHWECC 0x0062           
                             6211 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors here
                             6212 ; 1199 |// CDSYNC Interrupt
                             6213 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             6214 ; 1201 |// CDSYNC Exception
                             6215 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             6216 ; 1203 |// RS
                             6217 ; 1204 |#define HW_IVECRS 0x006A           
                             6218 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors here
                             6219 ; 1206 |// Flash Done ISR
                             6220 ; 1207 |#define HW_IVECFD 0x006E           
                             6221 ; 1208 |// CompactFlash ISR
                             6222 ; 1209 |#define HW_IVECCF 0x0070           
                             6223 ; 1210 |// SmartMedia Timeout ISR
                             6224 ; 1211 |#define HW_IVECSMTO 0x0072           
                             6225 ; 1212 |// SmartMedia Invalid Programming
                             6226 ; 1213 |#define HW_IVECSMIP 0x0074           
                             6227 ; 1214 |// CompactFlash No Card ISR
                             6228 ; 1215 |#define HW_IVECCFNC 0x0076           
                             6229 ; 1216 |// CompactFlash Status Change ISR
                             6230 ; 1217 |#define HW_IVECCFSC 0x0078           
                             6231 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors here
                             6232 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors here
                             6233 ; 1220 |// CDI
                             6234 ; 1221 |#define HW_IVECCDI 0x007E           
                             6235 ; 1222 |
                             6236 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             6237 ; 1224 |//  Interrupt Vectors
                             6238 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             6239 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             6240 ; 1227 |#define VECTOR(address,isr) \ 
                             6241 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             6242 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             6243 ; 1230 |
                             6244 ; 1231 |
                             6245 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             6246 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             6247 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             6248 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             6249 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             6250 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             6251 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             6252 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             6253 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             6254 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             6255 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             6256 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             6257 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             6258 ; 1245 |
                             6259 ; 1246 |// Interrupt Disabled
                             6260 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             6261 ; 1248 |// Interrupt Priority Level 0
                             6262 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             6263 ; 1250 |// Interrupt Priority Level 1
                             6264 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             6265 ; 1252 |// Interrupt Priority Level 2
                             6266 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             6267 ; 1254 |
                             6268 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             6269 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             6270 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             6271 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                             6272 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             6273 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             6274 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             6275 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             6276 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             6277 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             6278 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             6279 ; 1266 |
                             6280 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             6281 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             6282 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             6283 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             6284 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             6285 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             6286 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             6287 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             6288 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             6289 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             6290 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             6291 ; 1278 |
                             6292 ; 1279 |// Interrupt Priority register
                             6293 ; 1280 |typedef union               
                             6294 ; 1281 |{
                             6295 ; 1282 |    struct {
                             6296 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             6297 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             6298 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             6299 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             6300 ; 1287 |        int                 :4; /* Reserved */
                             6301 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             6302 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             6303 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             6304 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             6305 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             6306 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             6307 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             6308 ; 1295 |    } B;
                             6309 ; 1296 |
                             6310 ; 1297 |    int I;
                             6311 ; 1298 |
                             6312 ; 1299 |} ipr_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6313 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             6314 ; 1301 |
                             6315 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             6316 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             6317 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             6318 ; 1305 |
                             6319 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             6320 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             6321 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             6322 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             6323 ; 1310 |
                             6324 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             6325 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             6326 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             6327 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             6328 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             6329 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             6330 ; 1317 |
                             6331 ; 1318 |#endif
                             6332 ; 1319 |
                             6333 
                             6335 
                             6336 ; 26   |#include "regslradc.h"
                             6337 
                             6339 
                             6340 ; 1    |#if !(defined(regslradcinc))
                             6341 ; 2    |
                             6342 ; 3    |#define regslradcinc 1
                             6343 ; 4    |
                             6344 ; 5    |#include "types.h"
                             6345 
                             6347 
                             6348 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6349 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6350 ; 3    |//
                             6351 ; 4    |// Filename: types.h
                             6352 ; 5    |// Description: Standard data types
                             6353 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6354 ; 7    |
                             6355 ; 8    |#ifndef _TYPES_H
                             6356 ; 9    |#define _TYPES_H
                             6357 ; 10   |
                             6358 ; 11   |// TODO:  move this outta here!
                             6359 ; 12   |#if !defined(NOERROR)
                             6360 ; 13   |#define NOERROR 0
                             6361 ; 14   |#define SUCCESS 0
                             6362 ; 15   |#endif 
                             6363 ; 16   |#if !defined(SUCCESS)
                             6364 ; 17   |#define SUCCESS  0
                             6365 ; 18   |#endif
                             6366 ; 19   |#if !defined(ERROR)
                             6367 ; 20   |#define ERROR   -1
                             6368 ; 21   |#endif
                             6369 ; 22   |#if !defined(FALSE)
                             6370 ; 23   |#define FALSE 0
                             6371 ; 24   |#endif
                             6372 ; 25   |#if !defined(TRUE)
                             6373 ; 26   |#define TRUE  1
                             6374 ; 27   |#endif
                             6375 ; 28   |
                             6376 ; 29   |#if !defined(NULL)
                             6377 ; 30   |#define NULL 0
                             6378 ; 31   |#endif
                             6379 ; 32   |
                             6380 ; 33   |#define MAX_INT     0x7FFFFF
                             6381 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6382 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6383 ; 36   |#define MAX_ULONG   (-1) 
                             6384 ; 37   |
                             6385 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6386 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6387 ; 40   |
                             6388 ; 41   |
                             6389 ; 42   |#define BYTE    unsigned char       // btVarName
                             6390 ; 43   |#define CHAR    signed char         // cVarName
                             6391 ; 44   |#define USHORT  unsigned short      // usVarName
                             6392 ; 45   |#define SHORT   unsigned short      // sVarName
                             6393 ; 46   |#define WORD    unsigned int        // wVarName
                             6394 ; 47   |#define INT     signed int          // iVarName
                             6395 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6396 ; 49   |#define LONG    signed long         // lVarName
                             6397 ; 50   |#define BOOL    unsigned int        // bVarName
                             6398 ; 51   |#define FRACT   _fract              // frVarName
                             6399 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6400 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6401 ; 54   |#define FLOAT   float               // fVarName
                             6402 ; 55   |#define DBL     double              // dVarName
                             6403 ; 56   |#define ENUM    enum                // eVarName
                             6404 ; 57   |#define CMX     _complex            // cmxVarName
                             6405 ; 58   |typedef WORD UCS3;                   // 
                             6406 ; 59   |
                             6407 ; 60   |#define UINT16  unsigned short
                             6408 ; 61   |#define UINT8   unsigned char   
                             6409 ; 62   |#define UINT32  unsigned long
                             6410 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6411 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6412 ; 65   |#define WCHAR   UINT16
                             6413 ; 66   |
                             6414 ; 67   |//UINT128 is 16 bytes or 6 words
                             6415 ; 68   |typedef struct UINT128_3500 {   
                             6416 ; 69   |    int val[6];     
                             6417 ; 70   |} UINT128_3500;
                             6418 ; 71   |
                             6419 ; 72   |#define UINT128   UINT128_3500
                             6420 ; 73   |
                             6421 ; 74   |// Little endian word packed byte strings:   
                             6422 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6423 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6424 ; 77   |// Little endian word packed byte strings:   
                             6425 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6426 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6427 ; 80   |
                             6428 ; 81   |// Declare Memory Spaces To Use When Coding
                             6429 ; 82   |// A. Sector Buffers
                             6430 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6431 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6432 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6433 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6434 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6435 ; 88   |// B. Media DDI Memory
                             6436 ; 89   |#define MEDIA_DDI_MEM _Y
                             6437 ; 90   |
                             6438 ; 91   |
                             6439 ; 92   |
                             6440 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6441 ; 94   |// Examples of circular pointers:
                             6442 ; 95   |//    INT CIRC cpiVarName
                             6443 ; 96   |//    DWORD CIRC cpdwVarName
                             6444 ; 97   |
                             6445 ; 98   |#define RETCODE INT                 // rcVarName
                             6446 ; 99   |
                             6447 ; 100  |// generic bitfield structure
                             6448 ; 101  |struct Bitfield {
                             6449 ; 102  |    unsigned int B0  :1;
                             6450 ; 103  |    unsigned int B1  :1;
                             6451 ; 104  |    unsigned int B2  :1;
                             6452 ; 105  |    unsigned int B3  :1;
                             6453 ; 106  |    unsigned int B4  :1;
                             6454 ; 107  |    unsigned int B5  :1;
                             6455 ; 108  |    unsigned int B6  :1;
                             6456 ; 109  |    unsigned int B7  :1;
                             6457 ; 110  |    unsigned int B8  :1;
                             6458 ; 111  |    unsigned int B9  :1;
                             6459 ; 112  |    unsigned int B10 :1;
                             6460 ; 113  |    unsigned int B11 :1;
                             6461 ; 114  |    unsigned int B12 :1;
                             6462 ; 115  |    unsigned int B13 :1;
                             6463 ; 116  |    unsigned int B14 :1;
                             6464 ; 117  |    unsigned int B15 :1;
                             6465 ; 118  |    unsigned int B16 :1;
                             6466 ; 119  |    unsigned int B17 :1;
                             6467 ; 120  |    unsigned int B18 :1;
                             6468 ; 121  |    unsigned int B19 :1;
                             6469 ; 122  |    unsigned int B20 :1;
                             6470 ; 123  |    unsigned int B21 :1;
                             6471 ; 124  |    unsigned int B22 :1;
                             6472 ; 125  |    unsigned int B23 :1;
                             6473 ; 126  |};
                             6474 ; 127  |
                             6475 ; 128  |union BitInt {
                             6476 ; 129  |        struct Bitfield B;
                             6477 ; 130  |        int        I;
                             6478 ; 131  |};
                             6479 ; 132  |
                             6480 ; 133  |#define MAX_MSG_LENGTH 10
                             6481 ; 134  |struct CMessage
                             6482 ; 135  |{
                             6483 ; 136  |        unsigned int m_uLength;
                             6484 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6485 ; 138  |};
                             6486 ; 139  |
                             6487 ; 140  |typedef struct {
                             6488 ; 141  |    WORD m_wLength;
                             6489 ; 142  |    WORD m_wMessage;
                             6490 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6491 ; 144  |} Message;
                             6492 ; 145  |
                             6493 ; 146  |struct MessageQueueDescriptor
                             6494 ; 147  |{
                             6495 ; 148  |        int *m_pBase;
                             6496 ; 149  |        int m_iModulo;
                             6497 ; 150  |        int m_iSize;
                             6498 ; 151  |        int *m_pHead;
                             6499 ; 152  |        int *m_pTail;
                             6500 ; 153  |};
                             6501 ; 154  |
                             6502 ; 155  |struct ModuleEntry
                             6503 ; 156  |{
                             6504 ; 157  |    int m_iSignaledEventMask;
                             6505 ; 158  |    int m_iWaitEventMask;
                             6506 ; 159  |    int m_iResourceOfCode;
                             6507 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6508 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             6509 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6510 ; 163  |    int m_uTimeOutHigh;
                             6511 ; 164  |    int m_uTimeOutLow;
                             6512 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6513 ; 166  |};
                             6514 ; 167  |
                             6515 ; 168  |union WaitMask{
                             6516 ; 169  |    struct B{
                             6517 ; 170  |        unsigned int m_bNone     :1;
                             6518 ; 171  |        unsigned int m_bMessage  :1;
                             6519 ; 172  |        unsigned int m_bTimer    :1;
                             6520 ; 173  |        unsigned int m_bButton   :1;
                             6521 ; 174  |    } B;
                             6522 ; 175  |    int I;
                             6523 ; 176  |} ;
                             6524 ; 177  |
                             6525 ; 178  |
                             6526 ; 179  |struct Button {
                             6527 ; 180  |        WORD wButtonEvent;
                             6528 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6529 ; 182  |};
                             6530 ; 183  |
                             6531 ; 184  |struct Message {
                             6532 ; 185  |        WORD wMsgLength;
                             6533 ; 186  |        WORD wMsgCommand;
                             6534 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6535 ; 188  |};
                             6536 ; 189  |
                             6537 ; 190  |union EventTypes {
                             6538 ; 191  |        struct CMessage msg;
                             6539 ; 192  |        struct Button Button ;
                             6540 ; 193  |        struct Message Message;
                             6541 ; 194  |};
                             6542 ; 195  |
                             6543 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6544 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6545 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6546 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6547 ; 200  |
                             6548 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6549 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6550 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6551 ; 204  |
                             6552 ; 205  |#if DEBUG
                             6553 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6554 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             6555 ; 208  |#else 
                             6556 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             6557 ; 210  |#define DebugBuildAssert(x)    
                             6558 ; 211  |#endif
                             6559 ; 212  |
                             6560 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6561 ; 214  |//  #pragma asm
                             6562 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6563 ; 216  |//  #pragma endasm
                             6564 ; 217  |
                             6565 ; 218  |
                             6566 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6567 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             6568 ; 221  |#elif defined(COLOR_65K)
                             6569 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             6570 ; 223  |#else
                             6571 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             6572 ; 225  |#endif
                             6573 ; 226  |    
                             6574 ; 227  |#endif // #ifndef _TYPES_H
                             6575 
                             6577 
                             6578 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6579 ; 7    |
                             6580 ; 8    |//   SYSTEM STMP Registers 
                             6581 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             6582 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6583 ; 11   |
                             6584 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             6585 ; 13   |
                             6586 ; 14   |
                             6587 ; 15   |
                             6588 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             6589 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             6590 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             6591 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             6592 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6593 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             6594 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             6595 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             6596 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             6597 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             6598 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             6599 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             6600 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             6601 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             6602 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             6603 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             6604 ; 32   |
                             6605 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             6606 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6607 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             6608 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             6609 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             6610 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             6611 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             6612 ; 40   |
                             6613 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BATT_CTRL_INPUT_OFFSET_BITPOS)        
                             6614 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BATT_CTRL_HALF_CMP_PWR_BITPOS)        
                             6615 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_CTRL_INPUT_DIV2_BITPOS) 
                             6616 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_BITPOS) 
                             6617 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS) 
                             6618 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CLK_DIV_BITPOS)        
                             6619 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_REF_VAL_BITPOS)        
                             6620 ; 48   |
                             6621 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             6622 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             6623 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             6624 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             6625 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             6626 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             6627 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             6628 ; 56   |
                             6629 ; 57   |typedef union               
                             6630 ; 58   |{
                             6631 ; 59   |    struct {
                             6632 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             6633 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             6634 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             6635 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             6636 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             6637 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             6638 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             6639 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             6640 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             6641 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             6642 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH;
                             6643 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH;
                             6644 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDTH;
                             6645 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_WIDTH;
                             6646 ; 74   |    } B;
                             6647 ; 75   |   unsigned int I;
                             6648 ; 76   |        unsigned int U;
                             6649 ; 77   |} lradc_ctrl_type;
                             6650 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Battery LRADC Control Register */
                             6651 ; 79   |
                             6652 ; 80   |
                             6653 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             6654 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             6655 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             6656 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             6657 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             6658 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             6659 ; 87   |
                             6660 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             6661 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             6662 ; 90   |
                             6663 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             6664 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             6665 ; 93   |
                             6666 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK)     
                             6667 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK)     
                             6668 ; 96   |
                             6669 ; 97   |
                             6670 ; 98   |typedef union               
                             6671 ; 99   |{
                             6672 ; 100  |    struct {
                             6673 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             6674 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             6675 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             6676 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             6677 ; 105  |    } B;
                             6678 ; 106  |    unsigned int I;
                             6679 ; 107  |} lradc_thrsh_type;
                             6680 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* Battery LRADC Threshold Register */
                             6681 ; 109  |
                             6682 ; 110  |
                             6683 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             6684 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             6685 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             6686 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             6687 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             6688 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             6689 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             6690 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             6691 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             6692 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             6693 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             6694 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             6695 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             6696 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             6697 ; 125  |
                             6698 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             6699 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             6700 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             6701 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             6702 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             6703 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             6704 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             6705 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             6706 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             6707 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             6708 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             6709 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             6710 ; 138  |
                             6711 ; 139  |
                             6712 ; 140  |
                             6713 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT1_BITPOS)
                             6714 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT0_BITPOS)
                             6715 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT1_BITPOS)
                             6716 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT0_BITPOS)
                             6717 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT1_BITPOS)
                             6718 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT0_BITPOS)
                             6719 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_RSVD0_BITPOS)
                             6720 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_RESULT_DATA_OUT_BITPOS)
                             6721 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_RSVD1_BITPOS)
                             6722 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT0_BITPOS)
                             6723 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT1_BITPOS)
                             6724 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_RSVD2_BITPOS)
                             6725 ; 153  |
                             6726 ; 154  |
                             6727 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             6728 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             6729 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             6730 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             6731 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             6732 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             6733 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             6734 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             6735 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             6736 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             6737 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             6738 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             6739 ; 167  |
                             6740 ; 168  |typedef union               
                             6741 ; 169  |{
                             6742 ; 170  |    struct {
                             6743 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             6744 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             6745 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             6746 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             6747 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             6748 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             6749 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             6750 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             6751 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             6752 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_IRQ_EVENT0_WIDTH;
                             6753 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_IRQ_EVENT1_WIDTH;                      
                             6754 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESULT_RSVD2_WIDTH;
                             6755 ; 183  |    } B;
                             6756 ; 184  |    unsigned int I;
                             6757 ; 185  |} lradc_result_type;
                             6758 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /* Battery LRADC Result Register */
                             6759 ; 187  |
                             6760 ; 188  |
                             6761 ; 189  |
                             6762 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             6763 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             6764 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             6765 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             6766 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6767 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             6768 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             6769 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             6770 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             6771 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             6772 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             6773 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             6774 ; 202  |
                             6775 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             6776 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6777 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             6778 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             6779 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             6780 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             6781 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             6782 ; 210  |
                             6783 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             6784 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             6785 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_DIV2_BITPOS) 
                             6786 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_CLEAR_BITPOS) 
                             6787 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_BITPOS) 
                             6788 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_CTRL_CLK_DIV_BITPOS)        
                             6789 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_CTRL_REF_VAL_BITPOS)        
                             6790 ; 218  |
                             6791 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)     
                             6792 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)     
                             6793 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             6794 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             6795 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             6796 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             6797 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             6798 ; 226  |
                             6799 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* LRADC1 Control Register */
                             6800 ; 228  |
                             6801 ; 229  |
                             6802 ; 230  |
                             6803 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             6804 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             6805 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             6806 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             6807 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             6808 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             6809 ; 237  |
                             6810 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             6811 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             6812 ; 240  |
                             6813 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             6814 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             6815 ; 243  |
                             6816 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK)     
                             6817 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK)     
                             6818 ; 246  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6819 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /* LRADC1 Threshold Register */
                             6820 ; 248  |
                             6821 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             6822 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             6823 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             6824 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             6825 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             6826 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             6827 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             6828 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             6829 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             6830 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             6831 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             6832 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             6833 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             6834 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             6835 ; 263  |
                             6836 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             6837 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             6838 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             6839 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             6840 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             6841 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             6842 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             6843 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             6844 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             6845 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             6846 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             6847 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             6848 ; 276  |
                             6849 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             6850 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             6851 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT1_BITPOS)
                             6852 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT0_BITPOS)
                             6853 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT1_BITPOS)
                             6854 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT0_BITPOS)
                             6855 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD0_BITPOS)
                             6856 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC1_RESULT_DATA_OUT_BITPOS)
                             6857 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD1_BITPOS)
                             6858 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             6859 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             6860 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD2_BITPOS)
                             6861 ; 289  |
                             6862 ; 290  |
                             6863 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             6864 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             6865 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             6866 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             6867 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             6868 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             6869 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             6870 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             6871 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             6872 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             6873 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             6874 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             6875 ; 303  |
                             6876 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))    /* LRADC1 Result Register */
                             6877 ; 305  |
                             6878 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             6879 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             6880 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             6881 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             6882 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6883 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             6884 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             6885 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             6886 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             6887 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             6888 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             6889 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             6890 ; 318  |
                             6891 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             6892 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6893 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             6894 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             6895 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             6896 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             6897 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             6898 ; 326  |
                             6899 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             6900 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             6901 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             6902 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             6903 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_PWD_BITPOS) 
                             6904 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             6905 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             6906 ; 334  |
                             6907 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK)     
                             6908 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK)     
                             6909 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK) 
                             6910 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             6911 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             6912 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)     
                             6913 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)     
                             6914 ; 342  |
                             6915 ; 343  |
                             6916 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* LRADC2_CTRL Control Register */
                             6917 ; 345  |
                             6918 ; 346  |
                             6919 ; 347  |
                             6920 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             6921 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             6922 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             6923 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             6924 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             6925 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             6926 ; 354  |
                             6927 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             6928 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             6929 ; 357  |
                             6930 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             6931 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             6932 ; 360  |
                             6933 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK)     
                             6934 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK)     
                             6935 ; 363  |
                             6936 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /* LRADC2 Threshold Register */
                             6937 ; 365  |
                             6938 ; 366  |
                             6939 ; 367  |
                             6940 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             6941 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             6942 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             6943 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             6944 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             6945 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             6946 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             6947 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             6948 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             6949 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             6950 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             6951 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             6952 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             6953 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             6954 ; 382  |
                             6955 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             6956 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             6957 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             6958 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             6959 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             6960 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             6961 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             6962 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             6963 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             6964 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             6965 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             6966 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             6967 ; 395  |
                             6968 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             6969 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             6970 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT1_BITPOS)
                             6971 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT0_BITPOS)
                             6972 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT1_BITPOS)
                             6973 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT0_BITPOS)
                             6974 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD0_BITPOS)
                             6975 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC2_RESULT_DATA_OUT_BITPOS)
                             6976 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD1_BITPOS)
                             6977 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             6978 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             6979 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD2_BITPOS)
                             6980 ; 408  |
                             6981 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             6982 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             6983 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             6984 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             6985 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             6986 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             6987 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             6988 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             6989 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             6990 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             6991 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             6992 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             6993 ; 421  |
                             6994 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))    /* LRADC2 Result Register */
                             6995 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             6996 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             6997 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             6998 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             6999 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7000 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7001 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7002 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7003 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             7004 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             7005 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             7006 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             7007 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             7008 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             7009 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             7010 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             7011 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK          
                             7012 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementation
                             7013 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             7014 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             7015 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             7016 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             7017 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             7018 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             7019 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             7020 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             7021 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             7022 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             7023 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             7024 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             7025 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             7026 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             7027 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             7028 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             7029 ; 457  |
                             7030 ; 458  |//Needed by button.asm
                             7031 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             7032 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             7033 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             7034 ; 462  |
                             7035 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7036 ; 464  |
                             7037 ; 465  |#endif
                             7038 ; 466  |
                             7039 ; 467  |
                             7040 
                             7042 
                             7043 ; 27   |#include "regspwm.h"
                             7044 
                             7046 
                             7047 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7048 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             7049 ; 3    |// Filename: regspwm.inc
                             7050 ; 4    |// Description: Register definitions for PWM interface
                             7051 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7052 ; 6    |// The following naming conventions are followed in this file.
                             7053 ; 7    |// All registers are named using the format...
                             7054 ; 8    |//     HW_<module>_<regname>
                             7055 ; 9    |// where <module> is the module name which can be any of the following...
                             7056 ; 10   |//     USB20
                             7057 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7058 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7059 ; 13   |// that module)
                             7060 ; 14   |// <regname> is the specific register within that module
                             7061 ; 15   |// We also define the following...
                             7062 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7063 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7064 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7065 ; 19   |// which does something else, and
                             7066 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7067 ; 21   |// which does something else.
                             7068 ; 22   |// Other rules
                             7069 ; 23   |//     All caps
                             7070 ; 24   |//     Numeric identifiers start at 0
                             7071 ; 25   |#if !(defined(regspwminc))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7072 ; 26   |#define regspwminc 1
                             7073 ; 27   |
                             7074 ; 28   |#include "types.h"
                             7075 
                             7077 
                             7078 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7079 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7080 ; 3    |//
                             7081 ; 4    |// Filename: types.h
                             7082 ; 5    |// Description: Standard data types
                             7083 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7084 ; 7    |
                             7085 ; 8    |#ifndef _TYPES_H
                             7086 ; 9    |#define _TYPES_H
                             7087 ; 10   |
                             7088 ; 11   |// TODO:  move this outta here!
                             7089 ; 12   |#if !defined(NOERROR)
                             7090 ; 13   |#define NOERROR 0
                             7091 ; 14   |#define SUCCESS 0
                             7092 ; 15   |#endif 
                             7093 ; 16   |#if !defined(SUCCESS)
                             7094 ; 17   |#define SUCCESS  0
                             7095 ; 18   |#endif
                             7096 ; 19   |#if !defined(ERROR)
                             7097 ; 20   |#define ERROR   -1
                             7098 ; 21   |#endif
                             7099 ; 22   |#if !defined(FALSE)
                             7100 ; 23   |#define FALSE 0
                             7101 ; 24   |#endif
                             7102 ; 25   |#if !defined(TRUE)
                             7103 ; 26   |#define TRUE  1
                             7104 ; 27   |#endif
                             7105 ; 28   |
                             7106 ; 29   |#if !defined(NULL)
                             7107 ; 30   |#define NULL 0
                             7108 ; 31   |#endif
                             7109 ; 32   |
                             7110 ; 33   |#define MAX_INT     0x7FFFFF
                             7111 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7112 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7113 ; 36   |#define MAX_ULONG   (-1) 
                             7114 ; 37   |
                             7115 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7116 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7117 ; 40   |
                             7118 ; 41   |
                             7119 ; 42   |#define BYTE    unsigned char       // btVarName
                             7120 ; 43   |#define CHAR    signed char         // cVarName
                             7121 ; 44   |#define USHORT  unsigned short      // usVarName
                             7122 ; 45   |#define SHORT   unsigned short      // sVarName
                             7123 ; 46   |#define WORD    unsigned int        // wVarName
                             7124 ; 47   |#define INT     signed int          // iVarName
                             7125 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7126 ; 49   |#define LONG    signed long         // lVarName
                             7127 ; 50   |#define BOOL    unsigned int        // bVarName
                             7128 ; 51   |#define FRACT   _fract              // frVarName
                             7129 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7130 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7131 ; 54   |#define FLOAT   float               // fVarName
                             7132 ; 55   |#define DBL     double              // dVarName
                             7133 ; 56   |#define ENUM    enum                // eVarName
                             7134 ; 57   |#define CMX     _complex            // cmxVarName
                             7135 ; 58   |typedef WORD UCS3;                   // 
                             7136 ; 59   |
                             7137 ; 60   |#define UINT16  unsigned short
                             7138 ; 61   |#define UINT8   unsigned char   
                             7139 ; 62   |#define UINT32  unsigned long
                             7140 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7141 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7142 ; 65   |#define WCHAR   UINT16
                             7143 ; 66   |
                             7144 ; 67   |//UINT128 is 16 bytes or 6 words
                             7145 ; 68   |typedef struct UINT128_3500 {   
                             7146 ; 69   |    int val[6];     
                             7147 ; 70   |} UINT128_3500;
                             7148 ; 71   |
                             7149 ; 72   |#define UINT128   UINT128_3500
                             7150 ; 73   |
                             7151 ; 74   |// Little endian word packed byte strings:   
                             7152 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7153 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7154 ; 77   |// Little endian word packed byte strings:   
                             7155 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7156 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7157 ; 80   |
                             7158 ; 81   |// Declare Memory Spaces To Use When Coding
                             7159 ; 82   |// A. Sector Buffers
                             7160 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7161 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7162 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7163 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7164 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7165 ; 88   |// B. Media DDI Memory
                             7166 ; 89   |#define MEDIA_DDI_MEM _Y
                             7167 ; 90   |
                             7168 ; 91   |
                             7169 ; 92   |
                             7170 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7171 ; 94   |// Examples of circular pointers:
                             7172 ; 95   |//    INT CIRC cpiVarName
                             7173 ; 96   |//    DWORD CIRC cpdwVarName
                             7174 ; 97   |
                             7175 ; 98   |#define RETCODE INT                 // rcVarName
                             7176 ; 99   |
                             7177 ; 100  |// generic bitfield structure
                             7178 ; 101  |struct Bitfield {
                             7179 ; 102  |    unsigned int B0  :1;
                             7180 ; 103  |    unsigned int B1  :1;
                             7181 ; 104  |    unsigned int B2  :1;
                             7182 ; 105  |    unsigned int B3  :1;
                             7183 ; 106  |    unsigned int B4  :1;
                             7184 ; 107  |    unsigned int B5  :1;
                             7185 ; 108  |    unsigned int B6  :1;
                             7186 ; 109  |    unsigned int B7  :1;
                             7187 ; 110  |    unsigned int B8  :1;
                             7188 ; 111  |    unsigned int B9  :1;
                             7189 ; 112  |    unsigned int B10 :1;
                             7190 ; 113  |    unsigned int B11 :1;
                             7191 ; 114  |    unsigned int B12 :1;
                             7192 ; 115  |    unsigned int B13 :1;
                             7193 ; 116  |    unsigned int B14 :1;
                             7194 ; 117  |    unsigned int B15 :1;
                             7195 ; 118  |    unsigned int B16 :1;
                             7196 ; 119  |    unsigned int B17 :1;
                             7197 ; 120  |    unsigned int B18 :1;
                             7198 ; 121  |    unsigned int B19 :1;
                             7199 ; 122  |    unsigned int B20 :1;
                             7200 ; 123  |    unsigned int B21 :1;
                             7201 ; 124  |    unsigned int B22 :1;
                             7202 ; 125  |    unsigned int B23 :1;
                             7203 ; 126  |};
                             7204 ; 127  |
                             7205 ; 128  |union BitInt {
                             7206 ; 129  |        struct Bitfield B;
                             7207 ; 130  |        int        I;
                             7208 ; 131  |};
                             7209 ; 132  |
                             7210 ; 133  |#define MAX_MSG_LENGTH 10
                             7211 ; 134  |struct CMessage
                             7212 ; 135  |{
                             7213 ; 136  |        unsigned int m_uLength;
                             7214 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7215 ; 138  |};
                             7216 ; 139  |
                             7217 ; 140  |typedef struct {
                             7218 ; 141  |    WORD m_wLength;
                             7219 ; 142  |    WORD m_wMessage;
                             7220 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7221 ; 144  |} Message;
                             7222 ; 145  |
                             7223 ; 146  |struct MessageQueueDescriptor
                             7224 ; 147  |{
                             7225 ; 148  |        int *m_pBase;
                             7226 ; 149  |        int m_iModulo;
                             7227 ; 150  |        int m_iSize;
                             7228 ; 151  |        int *m_pHead;
                             7229 ; 152  |        int *m_pTail;
                             7230 ; 153  |};
                             7231 ; 154  |
                             7232 ; 155  |struct ModuleEntry
                             7233 ; 156  |{
                             7234 ; 157  |    int m_iSignaledEventMask;
                             7235 ; 158  |    int m_iWaitEventMask;
                             7236 ; 159  |    int m_iResourceOfCode;
                             7237 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7238 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             7239 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7240 ; 163  |    int m_uTimeOutHigh;
                             7241 ; 164  |    int m_uTimeOutLow;
                             7242 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7243 ; 166  |};
                             7244 ; 167  |
                             7245 ; 168  |union WaitMask{
                             7246 ; 169  |    struct B{
                             7247 ; 170  |        unsigned int m_bNone     :1;
                             7248 ; 171  |        unsigned int m_bMessage  :1;
                             7249 ; 172  |        unsigned int m_bTimer    :1;
                             7250 ; 173  |        unsigned int m_bButton   :1;
                             7251 ; 174  |    } B;
                             7252 ; 175  |    int I;
                             7253 ; 176  |} ;
                             7254 ; 177  |
                             7255 ; 178  |
                             7256 ; 179  |struct Button {
                             7257 ; 180  |        WORD wButtonEvent;
                             7258 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7259 ; 182  |};
                             7260 ; 183  |
                             7261 ; 184  |struct Message {
                             7262 ; 185  |        WORD wMsgLength;
                             7263 ; 186  |        WORD wMsgCommand;
                             7264 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7265 ; 188  |};
                             7266 ; 189  |
                             7267 ; 190  |union EventTypes {
                             7268 ; 191  |        struct CMessage msg;
                             7269 ; 192  |        struct Button Button ;
                             7270 ; 193  |        struct Message Message;
                             7271 ; 194  |};
                             7272 ; 195  |
                             7273 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7274 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7275 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7276 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7277 ; 200  |
                             7278 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7279 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7280 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7281 ; 204  |
                             7282 ; 205  |#if DEBUG
                             7283 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7284 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7285 ; 208  |#else 
                             7286 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             7287 ; 210  |#define DebugBuildAssert(x)    
                             7288 ; 211  |#endif
                             7289 ; 212  |
                             7290 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7291 ; 214  |//  #pragma asm
                             7292 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7293 ; 216  |//  #pragma endasm
                             7294 ; 217  |
                             7295 ; 218  |
                             7296 ; 219  |#ifdef COLOR_262K
                             7297 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             7298 ; 221  |#elif defined(COLOR_65K)
                             7299 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             7300 ; 223  |#else
                             7301 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             7302 ; 225  |#endif
                             7303 ; 226  |    
                             7304 ; 227  |#endif // #ifndef _TYPES_H
                             7305 
                             7307 
                             7308 ; 29   |
                             7309 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7310 ; 31   |//   Pulse Width Modulator STMP Registers 
                             7311 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7312 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                             7313 ; 34   |
                             7314 ; 35   |
                             7315 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             7316 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                             7317 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                             7318 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                             7319 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                             7320 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                             7321 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                             7322 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                             7323 ; 44   |
                             7324 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7325 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                             7326 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                             7327 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                             7328 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                             7329 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
                             7330 ; 51   |
                             7331 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_BITPOS)
                             7332 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_BITPOS)
                             7333 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_BITPOS)
                             7334 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_BITPOS)
                             7335 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                             7336 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_BITPOS)
                             7337 ; 58   |
                             7338 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                             7339 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                             7340 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                             7341 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                             7342 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                             7343 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                             7344 ; 65   |
                             7345 ; 66   |typedef union               
                             7346 ; 67   |{
                             7347 ; 68   |    struct {
                             7348 ; 69   |        int PWM0_EN                    :1;
                             7349 ; 70   |        int PWM1_EN                    :1;
                             7350 ; 71   |        int PWM2_EN                    :1;
                             7351 ; 72   |        int PWM3_EN                    :1;
                             7352 ; 73   |        int RSVD0                      :4;
                             7353 ; 74   |        int CDIV                       :2;
                             7354 ; 75   |        int RSVD1                      :13;
                             7355 ; 76   |        int MSTR_EN                    :1;
                             7356 ; 77   |    } B;
                             7357 ; 78   |    int I;
                             7358 ; 79   |} pwmcsr_type;
                             7359 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control Status Register */
                             7360 ; 81   |
                             7361 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                             7362 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                             7363 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                             7364 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                             7365 ; 86   |
                             7366 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                             7367 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                             7368 ; 89   |
                             7369 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTIVE_BITPOS)
                             7370 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_INACTIVE_BITPOS)
                             7371 ; 92   |
                             7372 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                             7373 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                             7374 ; 95   |
                             7375 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                             7376 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                             7377 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                             7378 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                             7379 ; 100  |
                             7380 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                             7381 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                             7382 ; 103  |
                             7383 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTIVE_BITPOS)
                             7384 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_INACTIVE_BITPOS)
                             7385 ; 106  |
                             7386 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
                             7387 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                             7388 ; 109  |
                             7389 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                             7390 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                             7391 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                             7392 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                             7393 ; 114  |
                             7394 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                             7395 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                             7396 ; 117  |
                             7397 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTIVE_BITPOS)
                             7398 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_INACTIVE_BITPOS)
                             7399 ; 120  |
                             7400 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                             7401 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                             7402 ; 123  |
                             7403 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             7404 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                             7405 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                             7406 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                             7407 ; 128  |
                             7408 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                             7409 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                             7410 ; 131  |
                             7411 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTIVE_BITPOS)
                             7412 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_INACTIVE_BITPOS)
                             7413 ; 134  |
                             7414 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                             7415 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                             7416 ; 137  |
                             7417 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             7418 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                             7419 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                             7420 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                             7421 ; 142  |
                             7422 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                             7423 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                             7424 ; 145  |
                             7425 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTIVE_BITPOS)
                             7426 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_INACTIVE_BITPOS)
                             7427 ; 148  |
                             7428 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                             7429 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                             7430 ; 151  |
                             7431 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             7432 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                             7433 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                             7434 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                             7435 ; 156  |
                             7436 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                             7437 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                             7438 ; 159  |
                             7439 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTIVE_BITPOS)
                             7440 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_INACTIVE_BITPOS)
                             7441 ; 162  |
                             7442 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                             7443 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                             7444 ; 165  |
                             7445 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             7446 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                             7447 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
                             7448 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                             7449 ; 170  |
                             7450 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                             7451 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                             7452 ; 173  |
                             7453 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTIVE_BITPOS)
                             7454 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_INACTIVE_BITPOS)
                             7455 ; 176  |
                             7456 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                             7457 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                             7458 ; 179  |
                             7459 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             7460 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                             7461 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                             7462 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                             7463 ; 184  |
                             7464 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                             7465 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                             7466 ; 187  |
                             7467 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTIVE_BITPOS)
                             7468 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_INACTIVE_BITPOS)
                             7469 ; 190  |
                             7470 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                             7471 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                             7472 ; 193  |
                             7473 ; 194  |typedef union               
                             7474 ; 195  |{
                             7475 ; 196  |    struct {
                             7476 ; 197  |       int ACTIVE                    :12;
                             7477 ; 198  |       int INACTIVE                  :12;
                             7478 ; 199  |    } B;
                             7479 ; 200  |    int I;
                             7480 ; 201  |} pwmchan_type;
                             7481 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Channel 0 A Register */
                             7482 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Channel 0 B Register */
                             7483 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Channel 1 A Register */
                             7484 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Channel 1 B Register */
                             7485 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Channel 2 A Register */
                             7486 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Channel 2 B Register */
                             7487 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Channel 3 A Register */
                             7488 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Channel 3 B Register */
                             7489 ; 210  |
                             7490 ; 211  |#endif
                             7491 ; 212  |
                             7492 ; 213  |
                             7493 ; 214  |
                             7494 ; 215  |
                             7495 
                             7497 
                             7498 ; 28   |#include "regsrevision.h"
                             7499 
                             7501 
                             7502 ; 1    |#if !(defined(__HW_REVR))
                             7503 ; 2    |#define __HW_REVR 1
                             7504 ; 3    |
                             7505 ; 4    |
                             7506 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             7507 ; 6    |
                             7508 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             7509 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             7510 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             7511 ; 10   |
                             7512 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                             7513 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             7514 ; 13   |
                             7515 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS)
                             7516 ; 15   |
                             7517 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                             7518 ; 17   |
                             7519 ; 18   |
                             7520 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             7521 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             7522 ; 21   |//  June15 2004: C struct updated to be correct: 
                             7523 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits.
                             7524 ; 23   |typedef union               
                             7525 ; 24   |{
                             7526 ; 25   |    struct {
                             7527 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             7528 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapping
                             7529 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             7530 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             7531 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                             7532 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             7533 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                             7534 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             7535 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                             7536 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                             7537 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                             7538 ; 37   |        unsigned RMJ    :16;    //Major Revision
                             7539 ; 38   |    } B;
                             7540 ; 39   |
                             7541 ; 40   |    int I;
                             7542 ; 41   |
                             7543 ; 42   |} revr_type;
                             7544 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                             7545 ; 44   |
                             7546 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                             7547 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                             7548 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                             7549 ; 48   |
                             7550 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                             7551 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE_B0_BITPOS)
                             7552 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                             7553 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                             7554 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                             7555 ; 54   |
                             7556 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                             7557 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                             7558 ; 57   |
                             7559 ; 58   |#endif //!@def(__HW_REVR)
                             7560 ; 59   |
                             7561 
                             7563 
                             7564 ; 29   |#include "regsrtc.h"
                             7565 
                             7567 
                             7568 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7569 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7570 ; 3    |// Filename: regsrtc.inc
                             7571 ; 4    |// Description: Register definitions for RTC interface
                             7572 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7573 ; 6    |// The following naming conventions are followed in this file.
                             7574 ; 7    |// All registers are named using the format...
                             7575 ; 8    |//     HW_<module>_<regname>
                             7576 ; 9    |// where <module> is the module name which can be any of the following...
                             7577 ; 10   |//     USB20
                             7578 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7579 ; 12   |// module name includes a number starting from 0 for the first instance of
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7580 ; 13   |// that module)
                             7581 ; 14   |// <regname> is the specific register within that module
                             7582 ; 15   |// We also define the following...
                             7583 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7584 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7585 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7586 ; 19   |// which does something else, and
                             7587 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7588 ; 21   |// which does something else.
                             7589 ; 22   |// Other rules
                             7590 ; 23   |//     All caps
                             7591 ; 24   |//     Numeric identifiers start at 0
                             7592 ; 25   |#if !(defined(regsrtcinc))
                             7593 ; 26   |#define regsrtcinc 1
                             7594 ; 27   |
                             7595 ; 28   |#include "types.h"
                             7596 
                             7598 
                             7599 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7600 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7601 ; 3    |//
                             7602 ; 4    |// Filename: types.h
                             7603 ; 5    |// Description: Standard data types
                             7604 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7605 ; 7    |
                             7606 ; 8    |#ifndef _TYPES_H
                             7607 ; 9    |#define _TYPES_H
                             7608 ; 10   |
                             7609 ; 11   |// TODO:  move this outta here!
                             7610 ; 12   |#if !defined(NOERROR)
                             7611 ; 13   |#define NOERROR 0
                             7612 ; 14   |#define SUCCESS 0
                             7613 ; 15   |#endif 
                             7614 ; 16   |#if !defined(SUCCESS)
                             7615 ; 17   |#define SUCCESS  0
                             7616 ; 18   |#endif
                             7617 ; 19   |#if !defined(ERROR)
                             7618 ; 20   |#define ERROR   -1
                             7619 ; 21   |#endif
                             7620 ; 22   |#if !defined(FALSE)
                             7621 ; 23   |#define FALSE 0
                             7622 ; 24   |#endif
                             7623 ; 25   |#if !defined(TRUE)
                             7624 ; 26   |#define TRUE  1
                             7625 ; 27   |#endif
                             7626 ; 28   |
                             7627 ; 29   |#if !defined(NULL)
                             7628 ; 30   |#define NULL 0
                             7629 ; 31   |#endif
                             7630 ; 32   |
                             7631 ; 33   |#define MAX_INT     0x7FFFFF
                             7632 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7633 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7634 ; 36   |#define MAX_ULONG   (-1) 
                             7635 ; 37   |
                             7636 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7637 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7638 ; 40   |
                             7639 ; 41   |
                             7640 ; 42   |#define BYTE    unsigned char       // btVarName
                             7641 ; 43   |#define CHAR    signed char         // cVarName
                             7642 ; 44   |#define USHORT  unsigned short      // usVarName
                             7643 ; 45   |#define SHORT   unsigned short      // sVarName
                             7644 ; 46   |#define WORD    unsigned int        // wVarName
                             7645 ; 47   |#define INT     signed int          // iVarName
                             7646 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7647 ; 49   |#define LONG    signed long         // lVarName
                             7648 ; 50   |#define BOOL    unsigned int        // bVarName
                             7649 ; 51   |#define FRACT   _fract              // frVarName
                             7650 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7651 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7652 ; 54   |#define FLOAT   float               // fVarName
                             7653 ; 55   |#define DBL     double              // dVarName
                             7654 ; 56   |#define ENUM    enum                // eVarName
                             7655 ; 57   |#define CMX     _complex            // cmxVarName
                             7656 ; 58   |typedef WORD UCS3;                   // 
                             7657 ; 59   |
                             7658 ; 60   |#define UINT16  unsigned short
                             7659 ; 61   |#define UINT8   unsigned char   
                             7660 ; 62   |#define UINT32  unsigned long
                             7661 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7662 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7663 ; 65   |#define WCHAR   UINT16
                             7664 ; 66   |
                             7665 ; 67   |//UINT128 is 16 bytes or 6 words
                             7666 ; 68   |typedef struct UINT128_3500 {   
                             7667 ; 69   |    int val[6];     
                             7668 ; 70   |} UINT128_3500;
                             7669 ; 71   |
                             7670 ; 72   |#define UINT128   UINT128_3500
                             7671 ; 73   |
                             7672 ; 74   |// Little endian word packed byte strings:   
                             7673 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7674 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7675 ; 77   |// Little endian word packed byte strings:   
                             7676 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7677 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7678 ; 80   |
                             7679 ; 81   |// Declare Memory Spaces To Use When Coding
                             7680 ; 82   |// A. Sector Buffers
                             7681 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7682 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7683 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7684 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7685 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7686 ; 88   |// B. Media DDI Memory
                             7687 ; 89   |#define MEDIA_DDI_MEM _Y
                             7688 ; 90   |
                             7689 ; 91   |
                             7690 ; 92   |
                             7691 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7692 ; 94   |// Examples of circular pointers:
                             7693 ; 95   |//    INT CIRC cpiVarName
                             7694 ; 96   |//    DWORD CIRC cpdwVarName
                             7695 ; 97   |
                             7696 ; 98   |#define RETCODE INT                 // rcVarName
                             7697 ; 99   |
                             7698 ; 100  |// generic bitfield structure
                             7699 ; 101  |struct Bitfield {
                             7700 ; 102  |    unsigned int B0  :1;
                             7701 ; 103  |    unsigned int B1  :1;
                             7702 ; 104  |    unsigned int B2  :1;
                             7703 ; 105  |    unsigned int B3  :1;
                             7704 ; 106  |    unsigned int B4  :1;
                             7705 ; 107  |    unsigned int B5  :1;
                             7706 ; 108  |    unsigned int B6  :1;
                             7707 ; 109  |    unsigned int B7  :1;
                             7708 ; 110  |    unsigned int B8  :1;
                             7709 ; 111  |    unsigned int B9  :1;
                             7710 ; 112  |    unsigned int B10 :1;
                             7711 ; 113  |    unsigned int B11 :1;
                             7712 ; 114  |    unsigned int B12 :1;
                             7713 ; 115  |    unsigned int B13 :1;
                             7714 ; 116  |    unsigned int B14 :1;
                             7715 ; 117  |    unsigned int B15 :1;
                             7716 ; 118  |    unsigned int B16 :1;
                             7717 ; 119  |    unsigned int B17 :1;
                             7718 ; 120  |    unsigned int B18 :1;
                             7719 ; 121  |    unsigned int B19 :1;
                             7720 ; 122  |    unsigned int B20 :1;
                             7721 ; 123  |    unsigned int B21 :1;
                             7722 ; 124  |    unsigned int B22 :1;
                             7723 ; 125  |    unsigned int B23 :1;
                             7724 ; 126  |};
                             7725 ; 127  |
                             7726 ; 128  |union BitInt {
                             7727 ; 129  |        struct Bitfield B;
                             7728 ; 130  |        int        I;
                             7729 ; 131  |};
                             7730 ; 132  |
                             7731 ; 133  |#define MAX_MSG_LENGTH 10
                             7732 ; 134  |struct CMessage
                             7733 ; 135  |{
                             7734 ; 136  |        unsigned int m_uLength;
                             7735 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7736 ; 138  |};
                             7737 ; 139  |
                             7738 ; 140  |typedef struct {
                             7739 ; 141  |    WORD m_wLength;
                             7740 ; 142  |    WORD m_wMessage;
                             7741 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7742 ; 144  |} Message;
                             7743 ; 145  |
                             7744 ; 146  |struct MessageQueueDescriptor
                             7745 ; 147  |{
                             7746 ; 148  |        int *m_pBase;
                             7747 ; 149  |        int m_iModulo;
                             7748 ; 150  |        int m_iSize;
                             7749 ; 151  |        int *m_pHead;
                             7750 ; 152  |        int *m_pTail;
                             7751 ; 153  |};
                             7752 ; 154  |
                             7753 ; 155  |struct ModuleEntry
                             7754 ; 156  |{
                             7755 ; 157  |    int m_iSignaledEventMask;
                             7756 ; 158  |    int m_iWaitEventMask;
                             7757 ; 159  |    int m_iResourceOfCode;
                             7758 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7759 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             7760 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7761 ; 163  |    int m_uTimeOutHigh;
                             7762 ; 164  |    int m_uTimeOutLow;
                             7763 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7764 ; 166  |};
                             7765 ; 167  |
                             7766 ; 168  |union WaitMask{
                             7767 ; 169  |    struct B{
                             7768 ; 170  |        unsigned int m_bNone     :1;
                             7769 ; 171  |        unsigned int m_bMessage  :1;
                             7770 ; 172  |        unsigned int m_bTimer    :1;
                             7771 ; 173  |        unsigned int m_bButton   :1;
                             7772 ; 174  |    } B;
                             7773 ; 175  |    int I;
                             7774 ; 176  |} ;
                             7775 ; 177  |
                             7776 ; 178  |
                             7777 ; 179  |struct Button {
                             7778 ; 180  |        WORD wButtonEvent;
                             7779 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7780 ; 182  |};
                             7781 ; 183  |
                             7782 ; 184  |struct Message {
                             7783 ; 185  |        WORD wMsgLength;
                             7784 ; 186  |        WORD wMsgCommand;
                             7785 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7786 ; 188  |};
                             7787 ; 189  |
                             7788 ; 190  |union EventTypes {
                             7789 ; 191  |        struct CMessage msg;
                             7790 ; 192  |        struct Button Button ;
                             7791 ; 193  |        struct Message Message;
                             7792 ; 194  |};
                             7793 ; 195  |
                             7794 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7795 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7796 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7797 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7798 ; 200  |
                             7799 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7800 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7801 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7802 ; 204  |
                             7803 ; 205  |#if DEBUG
                             7804 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7805 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7806 ; 208  |#else 
                             7807 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             7808 ; 210  |#define DebugBuildAssert(x)    
                             7809 ; 211  |#endif
                             7810 ; 212  |
                             7811 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7812 ; 214  |//  #pragma asm
                             7813 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7814 ; 216  |//  #pragma endasm
                             7815 ; 217  |
                             7816 ; 218  |
                             7817 ; 219  |#ifdef COLOR_262K
                             7818 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             7819 ; 221  |#elif defined(COLOR_65K)
                             7820 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             7821 ; 223  |#else
                             7822 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             7823 ; 225  |#endif
                             7824 ; 226  |    
                             7825 ; 227  |#endif // #ifndef _TYPES_H
                             7826 
                             7828 
                             7829 ; 29   |
                             7830 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7831 ; 31   |
                             7832 ; 32   |//   RTC STMP Registers 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7833 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             7834 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7835 ; 35   |
                             7836 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             7837 ; 37   |
                             7838 ; 38   |
                             7839 ; 39   |
                             7840 ; 40   |
                             7841 ; 41   |
                             7842 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             7843 ; 43   |
                             7844 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             7845 ; 45   |
                             7846 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             7847 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             7848 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             7849 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             7850 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             7851 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             7852 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             7853 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             7854 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             7855 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             7856 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             7857 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             7858 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             7859 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             7860 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             7861 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                                           
                             7862 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             7863 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             7864 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             7865 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             7866 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             7867 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             7868 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             7869 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             7870 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             7871 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             7872 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             7873 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             7874 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             7875 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             7876 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             7877 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             7878 ; 78   |
                             7879 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMINT_BITPOS) 
                             7880 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_ALARMINTEN_BITPOS) 
                             7881 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WATCHDOGEN_BITPOS) 
                             7882 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS) 
                             7883 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STALEREGS_BITPOS) 
                             7884 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS) 
                             7885 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_BITPOS) 
                             7886 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             7887 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             7888 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             7889 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             7890 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             7891 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS) 
                             7892 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS) 
                             7893 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS) 
                             7894 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BITPOS) 
                             7895 ; 95   |
                             7896 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             7897 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             7898 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             7899 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             7900 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             7901 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             7902 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             7903 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             7904 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             7905 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                             7906 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             7907 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             7908 ; 108  |
                             7909 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             7910 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             7911 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             7912 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             7913 ; 113  |
                             7914 ; 114  |
                             7915 ; 115  |typedef union               
                             7916 ; 116  |{
                             7917 ; 117  |    struct {
                             7918 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             7919 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             7920 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             7921 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             7922 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             7923 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             7924 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             7925 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             7926 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             7927 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             7928 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             7929 ; 129  |    } B;
                             7930 ; 130  |    int I;
                             7931 ; 131  |    unsigned int U;
                             7932 ; 132  |} rtc_csr_type;
                             7933 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Control / Status Register */
                             7934 ; 134  |
                             7935 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             7936 ; 136  |
                             7937 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             7938 ; 138  |
                             7939 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             7940 ; 140  |
                             7941 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             7942 ; 142  |
                             7943 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<<HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             7944 ; 144  |
                             7945 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                             7946 ; 146  |
                             7947 ; 147  |typedef union               
                             7948 ; 148  |{
                             7949 ; 149  |    struct {
                             7950 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             7951 ; 151  |    } B;
                             7952 ; 152  |    int I;
                             7953 ; 153  |    unsigned int U;
                             7954 ; 154  |} rtc_mseconds0_type;
                             7955 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    /* RTC MSECONDS Lower Word Register */
                             7956 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             7957 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             7958 ; 158  |
                             7959 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             7960 ; 160  |
                             7961 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             7962 ; 162  |
                             7963 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             7964 ; 164  |
                             7965 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1)<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             7966 ; 166  |
                             7967 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK)
                             7968 ; 168  |
                             7969 ; 169  |typedef union               
                             7970 ; 170  |{
                             7971 ; 171  |    struct {
                             7972 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             7973 ; 173  |    } B;
                             7974 ; 174  |    int I;
                             7975 ; 175  |    unsigned int U;
                             7976 ; 176  |} rtc_mseconds1_type;
                             7977 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    /* RTC MSECONDS Upper Word Register */
                             7978 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             7979 ; 179  |
                             7980 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             7981 ; 181  |#define HW_RTC_UP_OFFSET 2
                             7982 ; 182  |
                             7983 ; 183  |
                             7984 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             7985 ; 185  |
                             7986 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             7987 ; 187  |
                             7988 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             7989 ; 189  |
                             7990 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             7991 ; 191  |
                             7992 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             7993 ; 193  |
                             7994 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             7995 ; 195  |
                             7996 ; 196  |typedef union               
                             7997 ; 197  |{
                             7998 ; 198  |    struct {
                             7999 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             8000 ; 200  |    } B;
                             8001 ; 201  |    int I;
                             8002 ; 202  |    unsigned int U;
                             8003 ; 203  |} rtc_watchdog_type;
                             8004 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* RTC Watchdog Timeout Register */
                             8005 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             8006 ; 206  |
                             8007 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             8008 ; 208  |
                             8009 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             8010 ; 210  |
                             8011 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             8012 ; 212  |
                             8013 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALARM0_ALARMLOW_BITPOS) 
                             8014 ; 214  |
                             8015 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             8016 ; 216  |
                             8017 ; 217  |typedef union               
                             8018 ; 218  |{
                             8019 ; 219  |    struct {
                             8020 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             8021 ; 221  |    } B;
                             8022 ; 222  |    int I;
                             8023 ; 223  |    unsigned int U;
                             8024 ; 224  |} rtc_alarm0_type;
                             8025 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC ALARM Lower Word Register */
                             8026 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             8027 ; 227  |
                             8028 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             8029 ; 229  |
                             8030 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             8031 ; 231  |
                             8032 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             8033 ; 233  |
                             8034 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_ALARM1_ALARMHIGH_BITPOS) 
                             8035 ; 235  |
                             8036 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             8037 ; 237  |
                             8038 ; 238  |typedef union               
                             8039 ; 239  |{
                             8040 ; 240  |    struct {
                             8041 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             8042 ; 242  |    } B;
                             8043 ; 243  |    int I;
                             8044 ; 244  |    unsigned int U;
                             8045 ; 245  |} rtc_alarm1_type;
                             8046 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC ALARM Upper Word Register */
                             8047 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             8048 ; 248  |
                             8049 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             8050 ; 250  |
                             8051 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             8052 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             8053 ; 253  |
                             8054 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             8055 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             8056 ; 256  |
                             8057 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             8058 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS) 
                             8059 ; 259  |
                             8060 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             8061 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             8062 ; 262  |
                             8063 ; 263  |typedef union               
                             8064 ; 264  |{
                             8065 ; 265  |    struct {
                             8066 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             8067 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             8068 ; 268  |    } B;
                             8069 ; 269  |    int I;
                             8070 ; 270  |    unsigned int U;
                             8071 ; 271  |} rtc_xtaldivide_type;
                             8072 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* RTC Xtal-clock Pre-Divider Word Register */
                             8073 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             8074 ; 274  |
                             8075 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             8076 ; 276  |
                             8077 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             8078 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             8079 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             8080 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             8081 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             8082 ; 282  |
                             8083 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8084 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             8085 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             8086 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             8087 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             8088 ; 288  |
                             8089 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             8090 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             8091 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             8092 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<<HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             8093 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT0_RSVD0_BITPOS) 
                             8094 ; 294  |
                             8095 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             8096 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK)
                             8097 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                             8098 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                             8099 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             8100 ; 300  |
                             8101 ; 301  |typedef union               
                             8102 ; 302  |{
                             8103 ; 303  |   struct {
                             8104 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             8105 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             8106 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             8107 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             8108 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             8109 ; 309  |   } B;
                             8110 ; 310  |    int I;
                             8111 ; 311  |    unsigned int U;
                             8112 ; 312  |} rtc_PERSISTENT0_type;
                             8113 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /* RTC PERSISTENT Register0 */
                             8114 ; 314  |
                             8115 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             8116 ; 316  |
                             8117 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             8118 ; 318  |
                             8119 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             8120 ; 320  |
                             8121 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             8122 ; 322  |
                             8123 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT1_RSVD0_BITPOS) 
                             8124 ; 324  |
                             8125 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             8126 ; 326  |
                             8127 ; 327  |
                             8128 ; 328  |typedef union               
                             8129 ; 329  |{
                             8130 ; 330  |    struct {
                             8131 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             8132 ; 332  |    } B;
                             8133 ; 333  |    int I;
                             8134 ; 334  |    unsigned int U;
                             8135 ; 335  |} rtc_PERSISTENT1_type;
                             8136 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /* RTC PERSISTENT Register1 */
                             8137 ; 337  |
                             8138 ; 338  |
                             8139 ; 339  |#endif
                             8140 ; 340  |
                             8141 ; 341  |
                             8142 ; 342  |
                             8143 ; 343  |
                             8144 ; 344  |
                             8145 ; 345  |
                             8146 ; 346  |
                             8147 ; 347  |
                             8148 ; 348  |
                             8149 ; 349  |
                             8150 ; 350  |
                             8151 ; 351  |
                             8152 ; 352  |
                             8153 ; 353  |
                             8154 
                             8156 
                             8157 ; 30   |#include "regsspare.h"
                             8158 
                             8160 
                             8161 ; 1    |#if !(defined(RESGSSPARE_INC))
                             8162 ; 2    |#define RESGSSPARE_INC 1
                             8163 ; 3    |
                             8164 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                             8165 ; 5    |
                             8166 ; 6    |
                             8167 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                             8168 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                             8169 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                             8170 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                             8171 ; 11   |
                             8172 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                             8173 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                             8174 ; 14   |
                             8175 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                             8176 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                             8177 ; 17   |
                             8178 ; 18   |
                             8179 ; 19   |
                             8180 ; 20   |typedef union               
                             8181 ; 21   |{
                             8182 ; 22   |    struct {
                             8183 ; 23   |        int      I2SS       :1;     
                             8184 ; 24   |        int      USBSELECT  :1;     
                             8185 ; 25   |        unsigned            :6;
                             8186 ; 26   |        int      USBPLUGIN  :1;     
                             8187 ; 27   |        int      PSWITCH    :1;     
                             8188 ; 28   |    } B;
                             8189 ; 29   |
                             8190 ; 30   |    int I;
                             8191 ; 31   |
                             8192 ; 32   |} spare_type;
                             8193 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                             8194 ; 34   |
                             8195 ; 35   |
                             8196 ; 36   |
                             8197 ; 37   |#endif
                             8198 
                             8200 
                             8201 ; 31   |#include "regsspi.h"
                             8202 
                             8204 
                             8205 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8206 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8207 ; 3    |//;; Filename    : regsspi.inc
                             8208 ; 4    |//;; Description : Register definitions for SPI interface
                             8209 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8210 ; 6    |
                             8211 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8212 ; 8    |// The following naming conventions are followed in this file.
                             8213 ; 9    |// All registers are named using the format...
                             8214 ; 10   |//     HW_<module>_<regname>
                             8215 ; 11   |// where <module> is the module name which can be any of the following...
                             8216 ; 12   |//     USB20
                             8217 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8218 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8219 ; 15   |// that module)
                             8220 ; 16   |// <regname> is the specific register within that module
                             8221 ; 17   |// We also define the following...
                             8222 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8223 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8224 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8225 ; 21   |// which does something else, and
                             8226 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8227 ; 23   |// which does something else.
                             8228 ; 24   |// Other rules
                             8229 ; 25   |//     All caps
                             8230 ; 26   |//     Numeric identifiers start at 0
                             8231 ; 27   |#if !(defined(regsspiinc))
                             8232 ; 28   |#define regsspiinc 1
                             8233 ; 29   |
                             8234 ; 30   |#include "types.h"
                             8235 
                             8237 
                             8238 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8239 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8240 ; 3    |//
                             8241 ; 4    |// Filename: types.h
                             8242 ; 5    |// Description: Standard data types
                             8243 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8244 ; 7    |
                             8245 ; 8    |#ifndef _TYPES_H
                             8246 ; 9    |#define _TYPES_H
                             8247 ; 10   |
                             8248 ; 11   |// TODO:  move this outta here!
                             8249 ; 12   |#if !defined(NOERROR)
                             8250 ; 13   |#define NOERROR 0
                             8251 ; 14   |#define SUCCESS 0
                             8252 ; 15   |#endif 
                             8253 ; 16   |#if !defined(SUCCESS)
                             8254 ; 17   |#define SUCCESS  0
                             8255 ; 18   |#endif
                             8256 ; 19   |#if !defined(ERROR)
                             8257 ; 20   |#define ERROR   -1
                             8258 ; 21   |#endif
                             8259 ; 22   |#if !defined(FALSE)
                             8260 ; 23   |#define FALSE 0
                             8261 ; 24   |#endif
                             8262 ; 25   |#if !defined(TRUE)
                             8263 ; 26   |#define TRUE  1
                             8264 ; 27   |#endif
                             8265 ; 28   |
                             8266 ; 29   |#if !defined(NULL)
                             8267 ; 30   |#define NULL 0
                             8268 ; 31   |#endif
                             8269 ; 32   |
                             8270 ; 33   |#define MAX_INT     0x7FFFFF
                             8271 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8272 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8273 ; 36   |#define MAX_ULONG   (-1) 
                             8274 ; 37   |
                             8275 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8276 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8277 ; 40   |
                             8278 ; 41   |
                             8279 ; 42   |#define BYTE    unsigned char       // btVarName
                             8280 ; 43   |#define CHAR    signed char         // cVarName
                             8281 ; 44   |#define USHORT  unsigned short      // usVarName
                             8282 ; 45   |#define SHORT   unsigned short      // sVarName
                             8283 ; 46   |#define WORD    unsigned int        // wVarName
                             8284 ; 47   |#define INT     signed int          // iVarName
                             8285 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8286 ; 49   |#define LONG    signed long         // lVarName
                             8287 ; 50   |#define BOOL    unsigned int        // bVarName
                             8288 ; 51   |#define FRACT   _fract              // frVarName
                             8289 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8290 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8291 ; 54   |#define FLOAT   float               // fVarName
                             8292 ; 55   |#define DBL     double              // dVarName
                             8293 ; 56   |#define ENUM    enum                // eVarName
                             8294 ; 57   |#define CMX     _complex            // cmxVarName
                             8295 ; 58   |typedef WORD UCS3;                   // 
                             8296 ; 59   |
                             8297 ; 60   |#define UINT16  unsigned short
                             8298 ; 61   |#define UINT8   unsigned char   
                             8299 ; 62   |#define UINT32  unsigned long
                             8300 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8301 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8302 ; 65   |#define WCHAR   UINT16
                             8303 ; 66   |
                             8304 ; 67   |//UINT128 is 16 bytes or 6 words
                             8305 ; 68   |typedef struct UINT128_3500 {   
                             8306 ; 69   |    int val[6];     
                             8307 ; 70   |} UINT128_3500;
                             8308 ; 71   |
                             8309 ; 72   |#define UINT128   UINT128_3500
                             8310 ; 73   |
                             8311 ; 74   |// Little endian word packed byte strings:   
                             8312 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8313 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8314 ; 77   |// Little endian word packed byte strings:   
                             8315 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8316 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8317 ; 80   |
                             8318 ; 81   |// Declare Memory Spaces To Use When Coding
                             8319 ; 82   |// A. Sector Buffers
                             8320 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8321 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8322 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8323 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8324 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8325 ; 88   |// B. Media DDI Memory
                             8326 ; 89   |#define MEDIA_DDI_MEM _Y
                             8327 ; 90   |
                             8328 ; 91   |
                             8329 ; 92   |
                             8330 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8331 ; 94   |// Examples of circular pointers:
                             8332 ; 95   |//    INT CIRC cpiVarName
                             8333 ; 96   |//    DWORD CIRC cpdwVarName
                             8334 ; 97   |
                             8335 ; 98   |#define RETCODE INT                 // rcVarName
                             8336 ; 99   |
                             8337 ; 100  |// generic bitfield structure
                             8338 ; 101  |struct Bitfield {
                             8339 ; 102  |    unsigned int B0  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8340 ; 103  |    unsigned int B1  :1;
                             8341 ; 104  |    unsigned int B2  :1;
                             8342 ; 105  |    unsigned int B3  :1;
                             8343 ; 106  |    unsigned int B4  :1;
                             8344 ; 107  |    unsigned int B5  :1;
                             8345 ; 108  |    unsigned int B6  :1;
                             8346 ; 109  |    unsigned int B7  :1;
                             8347 ; 110  |    unsigned int B8  :1;
                             8348 ; 111  |    unsigned int B9  :1;
                             8349 ; 112  |    unsigned int B10 :1;
                             8350 ; 113  |    unsigned int B11 :1;
                             8351 ; 114  |    unsigned int B12 :1;
                             8352 ; 115  |    unsigned int B13 :1;
                             8353 ; 116  |    unsigned int B14 :1;
                             8354 ; 117  |    unsigned int B15 :1;
                             8355 ; 118  |    unsigned int B16 :1;
                             8356 ; 119  |    unsigned int B17 :1;
                             8357 ; 120  |    unsigned int B18 :1;
                             8358 ; 121  |    unsigned int B19 :1;
                             8359 ; 122  |    unsigned int B20 :1;
                             8360 ; 123  |    unsigned int B21 :1;
                             8361 ; 124  |    unsigned int B22 :1;
                             8362 ; 125  |    unsigned int B23 :1;
                             8363 ; 126  |};
                             8364 ; 127  |
                             8365 ; 128  |union BitInt {
                             8366 ; 129  |        struct Bitfield B;
                             8367 ; 130  |        int        I;
                             8368 ; 131  |};
                             8369 ; 132  |
                             8370 ; 133  |#define MAX_MSG_LENGTH 10
                             8371 ; 134  |struct CMessage
                             8372 ; 135  |{
                             8373 ; 136  |        unsigned int m_uLength;
                             8374 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8375 ; 138  |};
                             8376 ; 139  |
                             8377 ; 140  |typedef struct {
                             8378 ; 141  |    WORD m_wLength;
                             8379 ; 142  |    WORD m_wMessage;
                             8380 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8381 ; 144  |} Message;
                             8382 ; 145  |
                             8383 ; 146  |struct MessageQueueDescriptor
                             8384 ; 147  |{
                             8385 ; 148  |        int *m_pBase;
                             8386 ; 149  |        int m_iModulo;
                             8387 ; 150  |        int m_iSize;
                             8388 ; 151  |        int *m_pHead;
                             8389 ; 152  |        int *m_pTail;
                             8390 ; 153  |};
                             8391 ; 154  |
                             8392 ; 155  |struct ModuleEntry
                             8393 ; 156  |{
                             8394 ; 157  |    int m_iSignaledEventMask;
                             8395 ; 158  |    int m_iWaitEventMask;
                             8396 ; 159  |    int m_iResourceOfCode;
                             8397 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8398 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             8399 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8400 ; 163  |    int m_uTimeOutHigh;
                             8401 ; 164  |    int m_uTimeOutLow;
                             8402 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8403 ; 166  |};
                             8404 ; 167  |
                             8405 ; 168  |union WaitMask{
                             8406 ; 169  |    struct B{
                             8407 ; 170  |        unsigned int m_bNone     :1;
                             8408 ; 171  |        unsigned int m_bMessage  :1;
                             8409 ; 172  |        unsigned int m_bTimer    :1;
                             8410 ; 173  |        unsigned int m_bButton   :1;
                             8411 ; 174  |    } B;
                             8412 ; 175  |    int I;
                             8413 ; 176  |} ;
                             8414 ; 177  |
                             8415 ; 178  |
                             8416 ; 179  |struct Button {
                             8417 ; 180  |        WORD wButtonEvent;
                             8418 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8419 ; 182  |};
                             8420 ; 183  |
                             8421 ; 184  |struct Message {
                             8422 ; 185  |        WORD wMsgLength;
                             8423 ; 186  |        WORD wMsgCommand;
                             8424 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8425 ; 188  |};
                             8426 ; 189  |
                             8427 ; 190  |union EventTypes {
                             8428 ; 191  |        struct CMessage msg;
                             8429 ; 192  |        struct Button Button ;
                             8430 ; 193  |        struct Message Message;
                             8431 ; 194  |};
                             8432 ; 195  |
                             8433 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8434 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8435 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8436 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8437 ; 200  |
                             8438 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8439 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8440 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8441 ; 204  |
                             8442 ; 205  |#if DEBUG
                             8443 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8444 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8445 ; 208  |#else 
                             8446 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             8447 ; 210  |#define DebugBuildAssert(x)    
                             8448 ; 211  |#endif
                             8449 ; 212  |
                             8450 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8451 ; 214  |//  #pragma asm
                             8452 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8453 ; 216  |//  #pragma endasm
                             8454 ; 217  |
                             8455 ; 218  |
                             8456 ; 219  |#ifdef COLOR_262K
                             8457 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             8458 ; 221  |#elif defined(COLOR_65K)
                             8459 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             8460 ; 223  |#else
                             8461 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             8462 ; 225  |#endif
                             8463 ; 226  |    
                             8464 ; 227  |#endif // #ifndef _TYPES_H
                             8465 
                             8467 
                             8468 ; 31   |
                             8469 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8470 ; 33   |
                             8471 ; 34   |//   SPI STMP3500 Registers 
                             8472 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                             8473 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8474 ; 37   |
                             8475 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                             8476 ; 39   |
                             8477 ; 40   |
                             8478 ; 41   |
                             8479 ; 42   |// /////////////////////////////////////////////
                             8480 ; 43   |// //  SPI Control/Status Register Bit Definitions
                             8481 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                             8482 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                             8483 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                             8484 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                             8485 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                             8486 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                             8487 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                             8488 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                             8489 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                             8490 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                             8491 ; 54   |
                             8492 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                             8493 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                             8494 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                             8495 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                             8496 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                             8497 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                             8498 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                             8499 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                             8500 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
                             8501 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                             8502 ; 65   |
                             8503 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                             8504 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                             8505 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                             8506 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                             8507 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                             8508 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                             8509 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                             8510 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                             8511 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                             8512 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                             8513 ; 76   |
                             8514 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                             8515 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                             8516 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                             8517 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                             8518 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                             8519 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                             8520 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                             8521 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                             8522 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                             8523 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                             8524 ; 87   |
                             8525 ; 88   |typedef union               
                             8526 ; 89   |{
                             8527 ; 90   |    struct {
                             8528 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                             8529 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                             8530 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                             8531 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                             8532 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                             8533 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                             8534 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                             8535 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                             8536 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                             8537 ; 100  |    } B;
                             8538 ; 101  |
                             8539 ; 102  |    int I;
                             8540 ; 103  |    unsigned int U;
                             8541 ; 104  |} spcsr_type;
                             8542 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / Status Register */
                             8543 ; 106  |
                             8544 ; 107  |// /////////////////////////////////////////////
                             8545 ; 108  |// //  SPI Data Register Bit Definitions
                             8546 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                             8547 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                             8548 ; 111  |
                             8549 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                             8550 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                             8551 ; 114  |
                             8552 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                             8553 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                             8554 ; 117  |
                             8555 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                             8556 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                             8557 ; 120  |
                             8558 ; 121  |typedef union               
                             8559 ; 122  |{
                             8560 ; 123  |    struct {
                             8561 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                             8562 ; 125  |    } B;
                             8563 ; 126  |
                             8564 ; 127  |    int I;
                             8565 ; 128  |    unsigned int U;
                             8566 ; 129  |} spdr_type;
                             8567 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Register */
                             8568 ; 131  |
                             8569 ; 132  |
                             8570 ; 133  |#endif
                             8571 ; 134  |
                             8572 ; 135  |
                             8573 
                             8575 
                             8576 ; 32   |#include "regsswizzle.h"
                             8577 
                             8579 
                             8580 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8581 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8582 ; 3    |//;; Filename    : regsswizzle.inc
                             8583 ; 4    |//;; Description : Register definitions for Swizzle interface
                             8584 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8585 ; 6    |
                             8586 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8587 ; 8    |// The following naming conventions are followed in this file.
                             8588 ; 9    |// All registers are named using the format...
                             8589 ; 10   |//     HW_<module>_<regname>
                             8590 ; 11   |// where <module> is the module name which can be any of the following...
                             8591 ; 12   |//     USB20
                             8592 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8593 ; 14   |// module name includes a number starting from 0 for the first instance of
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8594 ; 15   |// that module)
                             8595 ; 16   |// <regname> is the specific register within that module
                             8596 ; 17   |// We also define the following...
                             8597 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8598 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8599 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8600 ; 21   |// which does something else, and
                             8601 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8602 ; 23   |// which does something else.
                             8603 ; 24   |// Other rules
                             8604 ; 25   |//     All caps
                             8605 ; 26   |//     Numeric identifiers start at 0
                             8606 ; 27   |#if !(defined(regsswizzleinc))
                             8607 ; 28   |#define regsswizzleinc 1
                             8608 ; 29   |
                             8609 ; 30   |#include "types.h"
                             8610 
                             8612 
                             8613 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8614 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8615 ; 3    |//
                             8616 ; 4    |// Filename: types.h
                             8617 ; 5    |// Description: Standard data types
                             8618 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8619 ; 7    |
                             8620 ; 8    |#ifndef _TYPES_H
                             8621 ; 9    |#define _TYPES_H
                             8622 ; 10   |
                             8623 ; 11   |// TODO:  move this outta here!
                             8624 ; 12   |#if !defined(NOERROR)
                             8625 ; 13   |#define NOERROR 0
                             8626 ; 14   |#define SUCCESS 0
                             8627 ; 15   |#endif 
                             8628 ; 16   |#if !defined(SUCCESS)
                             8629 ; 17   |#define SUCCESS  0
                             8630 ; 18   |#endif
                             8631 ; 19   |#if !defined(ERROR)
                             8632 ; 20   |#define ERROR   -1
                             8633 ; 21   |#endif
                             8634 ; 22   |#if !defined(FALSE)
                             8635 ; 23   |#define FALSE 0
                             8636 ; 24   |#endif
                             8637 ; 25   |#if !defined(TRUE)
                             8638 ; 26   |#define TRUE  1
                             8639 ; 27   |#endif
                             8640 ; 28   |
                             8641 ; 29   |#if !defined(NULL)
                             8642 ; 30   |#define NULL 0
                             8643 ; 31   |#endif
                             8644 ; 32   |
                             8645 ; 33   |#define MAX_INT     0x7FFFFF
                             8646 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8647 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8648 ; 36   |#define MAX_ULONG   (-1) 
                             8649 ; 37   |
                             8650 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8651 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8652 ; 40   |
                             8653 ; 41   |
                             8654 ; 42   |#define BYTE    unsigned char       // btVarName
                             8655 ; 43   |#define CHAR    signed char         // cVarName
                             8656 ; 44   |#define USHORT  unsigned short      // usVarName
                             8657 ; 45   |#define SHORT   unsigned short      // sVarName
                             8658 ; 46   |#define WORD    unsigned int        // wVarName
                             8659 ; 47   |#define INT     signed int          // iVarName
                             8660 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8661 ; 49   |#define LONG    signed long         // lVarName
                             8662 ; 50   |#define BOOL    unsigned int        // bVarName
                             8663 ; 51   |#define FRACT   _fract              // frVarName
                             8664 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8665 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8666 ; 54   |#define FLOAT   float               // fVarName
                             8667 ; 55   |#define DBL     double              // dVarName
                             8668 ; 56   |#define ENUM    enum                // eVarName
                             8669 ; 57   |#define CMX     _complex            // cmxVarName
                             8670 ; 58   |typedef WORD UCS3;                   // 
                             8671 ; 59   |
                             8672 ; 60   |#define UINT16  unsigned short
                             8673 ; 61   |#define UINT8   unsigned char   
                             8674 ; 62   |#define UINT32  unsigned long
                             8675 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8676 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8677 ; 65   |#define WCHAR   UINT16
                             8678 ; 66   |
                             8679 ; 67   |//UINT128 is 16 bytes or 6 words
                             8680 ; 68   |typedef struct UINT128_3500 {   
                             8681 ; 69   |    int val[6];     
                             8682 ; 70   |} UINT128_3500;
                             8683 ; 71   |
                             8684 ; 72   |#define UINT128   UINT128_3500
                             8685 ; 73   |
                             8686 ; 74   |// Little endian word packed byte strings:   
                             8687 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8688 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8689 ; 77   |// Little endian word packed byte strings:   
                             8690 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8691 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8692 ; 80   |
                             8693 ; 81   |// Declare Memory Spaces To Use When Coding
                             8694 ; 82   |// A. Sector Buffers
                             8695 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8696 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8697 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8698 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8699 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8700 ; 88   |// B. Media DDI Memory
                             8701 ; 89   |#define MEDIA_DDI_MEM _Y
                             8702 ; 90   |
                             8703 ; 91   |
                             8704 ; 92   |
                             8705 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8706 ; 94   |// Examples of circular pointers:
                             8707 ; 95   |//    INT CIRC cpiVarName
                             8708 ; 96   |//    DWORD CIRC cpdwVarName
                             8709 ; 97   |
                             8710 ; 98   |#define RETCODE INT                 // rcVarName
                             8711 ; 99   |
                             8712 ; 100  |// generic bitfield structure
                             8713 ; 101  |struct Bitfield {
                             8714 ; 102  |    unsigned int B0  :1;
                             8715 ; 103  |    unsigned int B1  :1;
                             8716 ; 104  |    unsigned int B2  :1;
                             8717 ; 105  |    unsigned int B3  :1;
                             8718 ; 106  |    unsigned int B4  :1;
                             8719 ; 107  |    unsigned int B5  :1;
                             8720 ; 108  |    unsigned int B6  :1;
                             8721 ; 109  |    unsigned int B7  :1;
                             8722 ; 110  |    unsigned int B8  :1;
                             8723 ; 111  |    unsigned int B9  :1;
                             8724 ; 112  |    unsigned int B10 :1;
                             8725 ; 113  |    unsigned int B11 :1;
                             8726 ; 114  |    unsigned int B12 :1;
                             8727 ; 115  |    unsigned int B13 :1;
                             8728 ; 116  |    unsigned int B14 :1;
                             8729 ; 117  |    unsigned int B15 :1;
                             8730 ; 118  |    unsigned int B16 :1;
                             8731 ; 119  |    unsigned int B17 :1;
                             8732 ; 120  |    unsigned int B18 :1;
                             8733 ; 121  |    unsigned int B19 :1;
                             8734 ; 122  |    unsigned int B20 :1;
                             8735 ; 123  |    unsigned int B21 :1;
                             8736 ; 124  |    unsigned int B22 :1;
                             8737 ; 125  |    unsigned int B23 :1;
                             8738 ; 126  |};
                             8739 ; 127  |
                             8740 ; 128  |union BitInt {
                             8741 ; 129  |        struct Bitfield B;
                             8742 ; 130  |        int        I;
                             8743 ; 131  |};
                             8744 ; 132  |
                             8745 ; 133  |#define MAX_MSG_LENGTH 10
                             8746 ; 134  |struct CMessage
                             8747 ; 135  |{
                             8748 ; 136  |        unsigned int m_uLength;
                             8749 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8750 ; 138  |};
                             8751 ; 139  |
                             8752 ; 140  |typedef struct {
                             8753 ; 141  |    WORD m_wLength;
                             8754 ; 142  |    WORD m_wMessage;
                             8755 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8756 ; 144  |} Message;
                             8757 ; 145  |
                             8758 ; 146  |struct MessageQueueDescriptor
                             8759 ; 147  |{
                             8760 ; 148  |        int *m_pBase;
                             8761 ; 149  |        int m_iModulo;
                             8762 ; 150  |        int m_iSize;
                             8763 ; 151  |        int *m_pHead;
                             8764 ; 152  |        int *m_pTail;
                             8765 ; 153  |};
                             8766 ; 154  |
                             8767 ; 155  |struct ModuleEntry
                             8768 ; 156  |{
                             8769 ; 157  |    int m_iSignaledEventMask;
                             8770 ; 158  |    int m_iWaitEventMask;
                             8771 ; 159  |    int m_iResourceOfCode;
                             8772 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8773 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             8774 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8775 ; 163  |    int m_uTimeOutHigh;
                             8776 ; 164  |    int m_uTimeOutLow;
                             8777 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8778 ; 166  |};
                             8779 ; 167  |
                             8780 ; 168  |union WaitMask{
                             8781 ; 169  |    struct B{
                             8782 ; 170  |        unsigned int m_bNone     :1;
                             8783 ; 171  |        unsigned int m_bMessage  :1;
                             8784 ; 172  |        unsigned int m_bTimer    :1;
                             8785 ; 173  |        unsigned int m_bButton   :1;
                             8786 ; 174  |    } B;
                             8787 ; 175  |    int I;
                             8788 ; 176  |} ;
                             8789 ; 177  |
                             8790 ; 178  |
                             8791 ; 179  |struct Button {
                             8792 ; 180  |        WORD wButtonEvent;
                             8793 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8794 ; 182  |};
                             8795 ; 183  |
                             8796 ; 184  |struct Message {
                             8797 ; 185  |        WORD wMsgLength;
                             8798 ; 186  |        WORD wMsgCommand;
                             8799 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8800 ; 188  |};
                             8801 ; 189  |
                             8802 ; 190  |union EventTypes {
                             8803 ; 191  |        struct CMessage msg;
                             8804 ; 192  |        struct Button Button ;
                             8805 ; 193  |        struct Message Message;
                             8806 ; 194  |};
                             8807 ; 195  |
                             8808 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8809 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8810 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8811 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8812 ; 200  |
                             8813 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8814 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8815 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8816 ; 204  |
                             8817 ; 205  |#if DEBUG
                             8818 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8819 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8820 ; 208  |#else 
                             8821 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             8822 ; 210  |#define DebugBuildAssert(x)    
                             8823 ; 211  |#endif
                             8824 ; 212  |
                             8825 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8826 ; 214  |//  #pragma asm
                             8827 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8828 ; 216  |//  #pragma endasm
                             8829 ; 217  |
                             8830 ; 218  |
                             8831 ; 219  |#ifdef COLOR_262K
                             8832 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             8833 ; 221  |#elif defined(COLOR_65K)
                             8834 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             8835 ; 223  |#else
                             8836 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             8837 ; 225  |#endif
                             8838 ; 226  |    
                             8839 ; 227  |#endif // #ifndef _TYPES_H
                             8840 
                             8842 
                             8843 ; 31   |
                             8844 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8845 ; 33   |
                             8846 ; 34   |//   SWIZZLE STMP3500 Registers 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8847 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                             8848 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8849 ; 37   |
                             8850 ; 38   |
                             8851 ; 39   |
                             8852 ; 40   |
                             8853 ; 41   |
                             8854 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                             8855 ; 43   |
                             8856 ; 44   |
                             8857 ; 45   |
                             8858 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                             8859 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                             8860 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                             8861 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                             8862 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                             8863 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                             8864 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                             8865 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                             8866 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                             8867 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                             8868 ; 56   |
                             8869 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                             8870 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                             8871 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                             8872 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                             8873 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                             8874 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                             8875 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                             8876 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                             8877 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                             8878 ; 66   |
                             8879 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITPOS)
                             8880 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITPOS)
                             8881 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_BITPOS)
                             8882 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIGN_BITPOS)
                             8883 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_SHIFT_BITPOS)
                             8884 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_BITPOS)
                             8885 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECSR1_CLK_OFF_BITPOS)
                             8886 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1_NEWADD_BITPOS)
                             8887 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSVD_BITPOS)
                             8888 ; 76   |
                             8889 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                             8890 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                             8891 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                             8892 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                             8893 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                             8894 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                             8895 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                             8896 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                             8897 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                             8898 ; 86   |
                             8899 ; 87   |////////////////////////////////////////////////////////////////////////////////
                             8900 ; 88   |//  Bit Manipulation Unit Registers
                             8901 ; 89   |////////////////////////////////////////////////////////////////////////////////
                             8902 ; 90   |typedef union
                             8903 ; 91   |{
                             8904 ; 92   |    struct
                             8905 ; 93   |    {
                             8906 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                             8907 ; 95   |    int LA      :1;     /* Left Align Data                          */
                             8908 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                             8909 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                             8910 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                             8911 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                             8912 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                             8913 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                             8914 ; 102  |    } B;
                             8915 ; 103  |    int I;
                             8916 ; 104  |    unsigned U;
                             8917 ; 105  |} swizzlecsr1_type;
                             8918 ; 106  |////////////////////////////////////////////////////////////////////////////////
                             8919 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* Swizzle Control & Status Register 1 */
                             8920 ; 108  |
                             8921 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                             8922 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                             8923 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                             8924 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                             8925 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                             8926 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                             8927 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                             8928 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                             8929 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                             8930 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                             8931 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                             8932 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                             8933 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                             8934 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                             8935 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                             8936 ; 124  |
                             8937 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                             8938 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                             8939 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                             8940 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                             8941 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                             8942 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                             8943 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                             8944 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                             8945 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                             8946 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                             8947 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                             8948 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                             8949 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                             8950 ; 138  |
                             8951 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KICK_BITPOS)
                             8952 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_SASEL_BITPOS)
                             8953 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECSR2_DESASEL_BITPOS)
                             8954 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIGE_BITPOS)
                             8955 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2_BITREV_BITPOS)
                             8956 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLSB_BITPOS)
                             8957 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMSB_BITPOS)
                             8958 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16L_BITPOS)
                             8959 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16I_BITPOS)
                             8960 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_BS_EN_BITPOS)
                             8961 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZLECSR2_SBYTEDEST_BITPOS)
                             8962 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2_UNKICK_BITPOS)
                             8963 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSVD_BITPOS)
                             8964 ; 152  |
                             8965 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                             8966 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                             8967 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                             8968 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                             8969 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                             8970 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                             8971 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                             8972 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                             8973 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                             8974 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                             8975 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                             8976 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                             8977 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                             8978 ; 166  |
                             8979 ; 167  |///////////////////////////////////////////////////////////////////////////////
                             8980 ; 168  |typedef union
                             8981 ; 169  |{
                             8982 ; 170  |    struct
                             8983 ; 171  |    {
                             8984 ; 172  |    int KICK    :1;         /* Start transfer                      */
                             8985 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                             8986 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                             8987 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                             8988 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                             8989 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                             8990 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                             8991 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                             8992 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                             8993 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                             8994 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                             8995 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                             8996 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                             8997 ; 185  |    } B;
                             8998 ; 186  |    unsigned int I;
                             8999 ; 187  |    unsigned int U;
                             9000 ; 188  |} swizzlecsr2_type;
                             9001 ; 189  |///////////////////////////////////////////////////////////////////////////////
                             9002 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* Swizzle Control & Status Register 2 */
                             9003 ; 191  |
                             9004 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                             9005 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                             9006 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                             9007 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                             9008 ; 196  |
                             9009 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                             9010 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                             9011 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                             9012 ; 200  |
                             9013 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_SIZE_BITPOS)
                             9014 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWIZZLESIZER_NEW_SHIFT_BITPOS)
                             9015 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_RSVD_BITPOS)
                             9016 ; 204  |
                             9017 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                             9018 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                             9019 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                             9020 ; 208  |
                             9021 ; 209  |///////////////////////////////////////////////////////////////////////////////
                             9022 ; 210  |typedef union
                             9023 ; 211  |{
                             9024 ; 212  |    struct
                             9025 ; 213  |    {
                             9026 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                             9027 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                             9028 ; 216  |    } B;
                             9029 ; 217  |    int I;
                             9030 ; 218  |    unsigned U;
                             9031 ; 219  |} swizzlesizer_type;
                             9032 ; 220  |///////////////////////////////////////////////////////////////////////////////
                             9033 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))        /* Swizzle Transfer Size Register */
                             9034 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* Swizzle Source Address Register */
                             9035 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* Swizzle Data1 Register */
                             9036 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* Swizzle Data2 Register */
                             9037 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* Swizzle Destination Address Register */
                             9038 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* Swizzle Big Endian Register */
                             9039 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* Swizzle BITREV Register */
                             9040 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* Swizzle Pass Least Significant Byte Register */
                             9041 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* Swizzle Pass Intermediate Byte Register */
                             9042 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* Swizzle Pass Most Significant Byte Register */
                             9043 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* Swizzle Pass Least Significant Word Register */
                             9044 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* Swizzle Pass Intermediate Significant Word Register */
                             9045 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* Swizzle Pass Most Significant Word Register */
                             9046 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Swizzle Barrel Shift Register */
                             9047 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swizzle Divide By 3 Lower Register */
                             9048 ; 236  |
                             9049 ; 237  |
                             9050 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                             9051 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                             9052 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                             9053 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                             9054 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                             9055 ; 243  |
                             9056 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                             9057 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                             9058 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                             9059 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                             9060 ; 248  |
                             9061 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                             9062 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD0_BITPOS)
                             9063 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_REMAINDER_BITPOS)
                             9064 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD1_BITPOS)
                             9065 ; 253  |
                             9066 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                             9067 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                             9068 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                             9069 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                             9070 ; 258  |
                             9071 ; 259  |///////////////////////////////////////////////////////////////////////////////
                             9072 ; 260  |typedef union
                             9073 ; 261  |{
                             9074 ; 262  |    struct
                             9075 ; 263  |    {
                             9076 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                             9077 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                             9078 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                             9079 ; 267  |    } B;
                             9080 ; 268  |    int I;
                             9081 ; 269  |    unsigned U;
                             9082 ; 270  |} swizzlediv3ur_type;
                             9083 ; 271  |///////////////////////////////////////////////////////////////////////////////
                             9084 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    /* Swizzle Divide By 3 Upper Register */
                             9085 ; 273  |
                             9086 ; 274  |#endif
                             9087 ; 275  |
                             9088 
                             9090 
                             9091 ; 33   |#include "regssdram.h"
                             9092 
                             9094 
                             9095 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9096 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                             9097 ; 3    |//;  File        : regssdram.inc
                             9098 ; 4    |//;  Description : Mixed Signal IP Register definition
                             9099 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9100 ; 6    |
                             9101 ; 7    |// The following naming conventions are followed in this file.
                             9102 ; 8    |// All registers are named using the format...
                             9103 ; 9    |//     HW_<module>_<regname>
                             9104 ; 10   |// where <module> is the module name which can be any of the following...
                             9105 ; 11   |//     SYSTEM
                             9106 ; 12   |// (Note that when there is more than one copy of a particular module, the
                             9107 ; 13   |// module name includes a number starting from 0 for the first instance of
                             9108 ; 14   |// that module)
                             9109 ; 15   |// <regname> is the specific register within that module
                             9110 ; 16   |// We also define the following...
                             9111 ; 17   |//     HW_<module>_<regname>_BITPOS
                             9112 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9113 ; 19   |//     HW_<module>_<regname>_SETMASK
                             9114 ; 20   |// which does something else, and
                             9115 ; 21   |//     HW_<module>_<regname>_CLRMASK
                             9116 ; 22   |// which does something else.
                             9117 ; 23   |// Other rules
                             9118 ; 24   |//     All caps
                             9119 ; 25   |//     Numeric identifiers start at 0
                             9120 ; 26   |
                             9121 ; 27   |#if !(defined(regssdraminc))
                             9122 ; 28   |#define regssdraminc 1
                             9123 ; 29   |
                             9124 ; 30   |#include "types.h"
                             9125 
                             9127 
                             9128 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9129 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9130 ; 3    |//
                             9131 ; 4    |// Filename: types.h
                             9132 ; 5    |// Description: Standard data types
                             9133 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9134 ; 7    |
                             9135 ; 8    |#ifndef _TYPES_H
                             9136 ; 9    |#define _TYPES_H
                             9137 ; 10   |
                             9138 ; 11   |// TODO:  move this outta here!
                             9139 ; 12   |#if !defined(NOERROR)
                             9140 ; 13   |#define NOERROR 0
                             9141 ; 14   |#define SUCCESS 0
                             9142 ; 15   |#endif 
                             9143 ; 16   |#if !defined(SUCCESS)
                             9144 ; 17   |#define SUCCESS  0
                             9145 ; 18   |#endif
                             9146 ; 19   |#if !defined(ERROR)
                             9147 ; 20   |#define ERROR   -1
                             9148 ; 21   |#endif
                             9149 ; 22   |#if !defined(FALSE)
                             9150 ; 23   |#define FALSE 0
                             9151 ; 24   |#endif
                             9152 ; 25   |#if !defined(TRUE)
                             9153 ; 26   |#define TRUE  1
                             9154 ; 27   |#endif
                             9155 ; 28   |
                             9156 ; 29   |#if !defined(NULL)
                             9157 ; 30   |#define NULL 0
                             9158 ; 31   |#endif
                             9159 ; 32   |
                             9160 ; 33   |#define MAX_INT     0x7FFFFF
                             9161 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9162 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9163 ; 36   |#define MAX_ULONG   (-1) 
                             9164 ; 37   |
                             9165 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9166 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9167 ; 40   |
                             9168 ; 41   |
                             9169 ; 42   |#define BYTE    unsigned char       // btVarName
                             9170 ; 43   |#define CHAR    signed char         // cVarName
                             9171 ; 44   |#define USHORT  unsigned short      // usVarName
                             9172 ; 45   |#define SHORT   unsigned short      // sVarName
                             9173 ; 46   |#define WORD    unsigned int        // wVarName
                             9174 ; 47   |#define INT     signed int          // iVarName
                             9175 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9176 ; 49   |#define LONG    signed long         // lVarName
                             9177 ; 50   |#define BOOL    unsigned int        // bVarName
                             9178 ; 51   |#define FRACT   _fract              // frVarName
                             9179 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9180 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9181 ; 54   |#define FLOAT   float               // fVarName
                             9182 ; 55   |#define DBL     double              // dVarName
                             9183 ; 56   |#define ENUM    enum                // eVarName
                             9184 ; 57   |#define CMX     _complex            // cmxVarName
                             9185 ; 58   |typedef WORD UCS3;                   // 
                             9186 ; 59   |
                             9187 ; 60   |#define UINT16  unsigned short
                             9188 ; 61   |#define UINT8   unsigned char   
                             9189 ; 62   |#define UINT32  unsigned long
                             9190 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9191 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9192 ; 65   |#define WCHAR   UINT16
                             9193 ; 66   |
                             9194 ; 67   |//UINT128 is 16 bytes or 6 words
                             9195 ; 68   |typedef struct UINT128_3500 {   
                             9196 ; 69   |    int val[6];     
                             9197 ; 70   |} UINT128_3500;
                             9198 ; 71   |
                             9199 ; 72   |#define UINT128   UINT128_3500
                             9200 ; 73   |
                             9201 ; 74   |// Little endian word packed byte strings:   
                             9202 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9203 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9204 ; 77   |// Little endian word packed byte strings:   
                             9205 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9206 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9207 ; 80   |
                             9208 ; 81   |// Declare Memory Spaces To Use When Coding
                             9209 ; 82   |// A. Sector Buffers
                             9210 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9211 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9212 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9213 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9214 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9215 ; 88   |// B. Media DDI Memory
                             9216 ; 89   |#define MEDIA_DDI_MEM _Y
                             9217 ; 90   |
                             9218 ; 91   |
                             9219 ; 92   |
                             9220 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9221 ; 94   |// Examples of circular pointers:
                             9222 ; 95   |//    INT CIRC cpiVarName
                             9223 ; 96   |//    DWORD CIRC cpdwVarName
                             9224 ; 97   |
                             9225 ; 98   |#define RETCODE INT                 // rcVarName
                             9226 ; 99   |
                             9227 ; 100  |// generic bitfield structure
                             9228 ; 101  |struct Bitfield {
                             9229 ; 102  |    unsigned int B0  :1;
                             9230 ; 103  |    unsigned int B1  :1;
                             9231 ; 104  |    unsigned int B2  :1;
                             9232 ; 105  |    unsigned int B3  :1;
                             9233 ; 106  |    unsigned int B4  :1;
                             9234 ; 107  |    unsigned int B5  :1;
                             9235 ; 108  |    unsigned int B6  :1;
                             9236 ; 109  |    unsigned int B7  :1;
                             9237 ; 110  |    unsigned int B8  :1;
                             9238 ; 111  |    unsigned int B9  :1;
                             9239 ; 112  |    unsigned int B10 :1;
                             9240 ; 113  |    unsigned int B11 :1;
                             9241 ; 114  |    unsigned int B12 :1;
                             9242 ; 115  |    unsigned int B13 :1;
                             9243 ; 116  |    unsigned int B14 :1;
                             9244 ; 117  |    unsigned int B15 :1;
                             9245 ; 118  |    unsigned int B16 :1;
                             9246 ; 119  |    unsigned int B17 :1;
                             9247 ; 120  |    unsigned int B18 :1;
                             9248 ; 121  |    unsigned int B19 :1;
                             9249 ; 122  |    unsigned int B20 :1;
                             9250 ; 123  |    unsigned int B21 :1;
                             9251 ; 124  |    unsigned int B22 :1;
                             9252 ; 125  |    unsigned int B23 :1;
                             9253 ; 126  |};
                             9254 ; 127  |
                             9255 ; 128  |union BitInt {
                             9256 ; 129  |        struct Bitfield B;
                             9257 ; 130  |        int        I;
                             9258 ; 131  |};
                             9259 ; 132  |
                             9260 ; 133  |#define MAX_MSG_LENGTH 10
                             9261 ; 134  |struct CMessage
                             9262 ; 135  |{
                             9263 ; 136  |        unsigned int m_uLength;
                             9264 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9265 ; 138  |};
                             9266 ; 139  |
                             9267 ; 140  |typedef struct {
                             9268 ; 141  |    WORD m_wLength;
                             9269 ; 142  |    WORD m_wMessage;
                             9270 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9271 ; 144  |} Message;
                             9272 ; 145  |
                             9273 ; 146  |struct MessageQueueDescriptor
                             9274 ; 147  |{
                             9275 ; 148  |        int *m_pBase;
                             9276 ; 149  |        int m_iModulo;
                             9277 ; 150  |        int m_iSize;
                             9278 ; 151  |        int *m_pHead;
                             9279 ; 152  |        int *m_pTail;
                             9280 ; 153  |};
                             9281 ; 154  |
                             9282 ; 155  |struct ModuleEntry
                             9283 ; 156  |{
                             9284 ; 157  |    int m_iSignaledEventMask;
                             9285 ; 158  |    int m_iWaitEventMask;
                             9286 ; 159  |    int m_iResourceOfCode;
                             9287 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9288 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             9289 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9290 ; 163  |    int m_uTimeOutHigh;
                             9291 ; 164  |    int m_uTimeOutLow;
                             9292 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9293 ; 166  |};
                             9294 ; 167  |
                             9295 ; 168  |union WaitMask{
                             9296 ; 169  |    struct B{
                             9297 ; 170  |        unsigned int m_bNone     :1;
                             9298 ; 171  |        unsigned int m_bMessage  :1;
                             9299 ; 172  |        unsigned int m_bTimer    :1;
                             9300 ; 173  |        unsigned int m_bButton   :1;
                             9301 ; 174  |    } B;
                             9302 ; 175  |    int I;
                             9303 ; 176  |} ;
                             9304 ; 177  |
                             9305 ; 178  |
                             9306 ; 179  |struct Button {
                             9307 ; 180  |        WORD wButtonEvent;
                             9308 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9309 ; 182  |};
                             9310 ; 183  |
                             9311 ; 184  |struct Message {
                             9312 ; 185  |        WORD wMsgLength;
                             9313 ; 186  |        WORD wMsgCommand;
                             9314 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9315 ; 188  |};
                             9316 ; 189  |
                             9317 ; 190  |union EventTypes {
                             9318 ; 191  |        struct CMessage msg;
                             9319 ; 192  |        struct Button Button ;
                             9320 ; 193  |        struct Message Message;
                             9321 ; 194  |};
                             9322 ; 195  |
                             9323 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9324 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9325 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9326 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9327 ; 200  |
                             9328 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9329 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9330 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9331 ; 204  |
                             9332 ; 205  |#if DEBUG
                             9333 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9334 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9335 ; 208  |#else 
                             9336 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             9337 ; 210  |#define DebugBuildAssert(x)    
                             9338 ; 211  |#endif
                             9339 ; 212  |
                             9340 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9341 ; 214  |//  #pragma asm
                             9342 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9343 ; 216  |//  #pragma endasm
                             9344 ; 217  |
                             9345 ; 218  |
                             9346 ; 219  |#ifdef COLOR_262K
                             9347 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             9348 ; 221  |#elif defined(COLOR_65K)
                             9349 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             9350 ; 223  |#else
                             9351 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9352 ; 225  |#endif
                             9353 ; 226  |    
                             9354 ; 227  |#endif // #ifndef _TYPES_H
                             9355 
                             9357 
                             9358 ; 31   |
                             9359 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                             9360 ; 33   |
                             9361 ; 34   |
                             9362 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                             9363 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                             9364 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                             9365 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                             9366 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
                             9367 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                             9368 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                             9369 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                             9370 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                             9371 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                             9372 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                             9373 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                             9374 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                             9375 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                             9376 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                             9377 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                             9378 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                             9379 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                             9380 ; 53   |
                             9381 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                             9382 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                             9383 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                             9384 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                             9385 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                             9386 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                             9387 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                             9388 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                             9389 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                             9390 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                             9391 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                             9392 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                             9393 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                             9394 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                             9395 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                             9396 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                             9397 ; 70   |
                             9398 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SDRAMEN_BITPOS)
                             9399 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                             9400 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS)
                             9401 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BITPOS)
                             9402 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                             9403 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_BITPOS)
                             9404 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BITPOS)
                             9405 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_BITPOS)
                             9406 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS)
                             9407 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BITPOS)
                             9408 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_BITPOS)
                             9409 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_BITPOS)
                             9410 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS)
                             9411 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_BITPOS)
                             9412 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_BITPOS)
                             9413 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BITPOS)
                             9414 ; 87   |
                             9415 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                             9416 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                             9417 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                             9418 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                             9419 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                             9420 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                             9421 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                             9422 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                             9423 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                             9424 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                             9425 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                             9426 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                             9427 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                             9428 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                             9429 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                             9430 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                             9431 ; 104  |
                             9432 ; 105  |typedef union               
                             9433 ; 106  |{
                             9434 ; 107  |    struct {
                             9435 ; 108  |        int SDRAMEN                     :1;
                             9436 ; 109  |        int IE                          :1;
                             9437 ; 110  |        int RNW                         :1;
                             9438 ; 111  |        int KICK                        :1;
                             9439 ; 112  |        int LM                          :1;
                             9440 ; 113  |        int ISTAT                       :1;
                             9441 ; 114  |        int PWDN                        :1;
                             9442 ; 115  |        int RSVD                        :1;
                             9443 ; 116  |        int SBYTE                       :2;
                             9444 ; 117  |        int MEM                         :2;
                             9445 ; 118  |        int BIGE                        :1;
                             9446 ; 119  |        int ASIZE                       :3;
                             9447 ; 120  |        int UKICK                       :1;
                             9448 ; 121  |        int DIV                         :4;
                             9449 ; 122  |        int MULTI                       :1;
                             9450 ; 123  |        int SDRAM                       :1;
                             9451 ; 124  |        int SIGN                        :1;
                             9452 ; 125  |    } B;
                             9453 ; 126  |    int I;
                             9454 ; 127  |} sdramcsr_type;
                             9455 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                             9456 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                             9457 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                             9458 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                             9459 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                             9460 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                             9461 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                             9462 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                             9463 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                             9464 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                             9465 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                             9466 ; 139  |
                             9467 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                             9468 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                             9469 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                             9470 ; 143  |
                             9471 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                             9472 ; 145  |
                             9473 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                             9474 ; 147  |
                             9475 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                             9476 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                             9477 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                             9478 ; 151  |
                             9479 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                             9480 ; 153  |
                             9481 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                             9482 ; 155  |
                             9483 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                             9484 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                             9485 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                             9486 ; 159  |
                             9487 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                             9488 ; 161  |
                             9489 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                             9490 ; 163  |
                             9491 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                             9492 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                             9493 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                             9494 ; 167  |
                             9495 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                             9496 ; 169  |
                             9497 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                             9498 ; 171  |
                             9499 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                             9500 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                             9501 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                             9502 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                             9503 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                             9504 ; 177  |
                             9505 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                             9506 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                             9507 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                             9508 ; 181  |
                             9509 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1_INIT_BITPOS)
                             9510 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_TRP_BITPOS)
                             9511 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1_TRFC_BITPOS)
                             9512 ; 185  |
                             9513 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                             9514 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                             9515 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                             9516 ; 189  |
                             9517 ; 190  |typedef union               
                             9518 ; 191  |{
                             9519 ; 192  |    struct {
                             9520 ; 193  |        int INIT                :16;
                             9521 ; 194  |        int TRP                 :4;
                             9522 ; 195  |        int TRFC                :4;
                             9523 ; 196  |    } B;
                             9524 ; 197  |    int I;
                             9525 ; 198  |} sdramtimer1_type;
                             9526 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                             9527 ; 200  |
                             9528 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                             9529 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                             9530 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                             9531 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                             9532 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                             9533 ; 206  |
                             9534 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                             9535 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                             9536 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                             9537 ; 210  |
                             9538 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2_TXSR_BITPOS)
                             9539 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2_TREF_BITPOS)
                             9540 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2_TRCD_BITPOS)
                             9541 ; 214  |
                             9542 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                             9543 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                             9544 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                             9545 ; 218  |
                             9546 ; 219  |typedef union               
                             9547 ; 220  |{
                             9548 ; 221  |    struct {
                             9549 ; 222  |        int TXSR                :4;
                             9550 ; 223  |        int TREF                :12;
                             9551 ; 224  |        int TRCD                :4;
                             9552 ; 225  |        int RSVD                :4; 
                             9553 ; 226  |    } B;
                             9554 ; 227  |    int I;
                             9555 ; 228  |} sdramtimer2_type;
                             9556 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                             9557 ; 230  |
                             9558 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             9559 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                             9560 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                             9561 ; 234  |
                             9562 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                             9563 ; 236  |
                             9564 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                             9565 ; 238  |
                             9566 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                             9567 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                             9568 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                             9569 ; 242  |
                             9570 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                             9571 ; 244  |
                             9572 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                             9573 ; 246  |
                             9574 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             9575 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                             9576 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                             9577 ; 250  |
                             9578 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                             9579 ; 252  |
                             9580 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS)
                             9581 ; 254  |
                             9582 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                             9583 ; 256  |
                             9584 ; 257  |typedef union               
                             9585 ; 258  |{
                             9586 ; 259  |    struct {
                             9587 ; 260  |        int VALUE               :14;
                             9588 ; 261  |        int RSVD                :10; 
                             9589 ; 262  |    } B;
                             9590 ; 263  |    int I;
                             9591 ; 264  |} sdrammode_type;
                             9592 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                             9593 ; 266  |
                             9594 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                             9595 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                             9596 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                             9597 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                             9598 ; 271  |
                             9599 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                             9600 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                             9601 ; 274  |
                             9602 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_COLWIDTH_BITPOS)
                             9603 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_ROWWIDTH_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9604 ; 277  |
                             9605 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                             9606 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                             9607 ; 280  |
                             9608 ; 281  |typedef union               
                             9609 ; 282  |{
                             9610 ; 283  |    struct {
                             9611 ; 284  |        int COLWIDTH               :4;
                             9612 ; 285  |        int ROWWIDTH               :4; 
                             9613 ; 286  |    } B;
                             9614 ; 287  |    int I;
                             9615 ; 288  |} sdramtype_type;
                             9616 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                             9617 ; 290  |
                             9618 ; 291  |#endif
                             9619 ; 292  |
                             9620 ; 293  |
                             9621 ; 294  |
                             9622 ; 295  |
                             9623 ; 296  |
                             9624 ; 297  |
                             9625 
                             9627 
                             9628 ; 34   |#include "regstb.h"
                             9629 
                             9631 
                             9632 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             9633 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             9634 ; 3    |// Filename: regstb.inc
                             9635 ; 4    |// Description: Register definitions for Trace Buffer
                             9636 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             9637 ; 6    |// The following naming conventions are followed in this file.
                             9638 ; 7    |// All registers are named using the format...
                             9639 ; 8    |//     HW_<module>_<regname>
                             9640 ; 9    |// where <module> is the module name which can be any of the following...
                             9641 ; 10   |//     USB20
                             9642 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             9643 ; 12   |// module name includes a number starting from 0 for the first instance of
                             9644 ; 13   |// that module)
                             9645 ; 14   |// <regname> is the specific register within that module
                             9646 ; 15   |// We also define the following...
                             9647 ; 16   |//     HW_<module>_<regname>_BITPOS
                             9648 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9649 ; 18   |//     HW_<module>_<regname>_SETMASK
                             9650 ; 19   |// which does something else, and
                             9651 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             9652 ; 21   |// which does something else.
                             9653 ; 22   |// Other rules
                             9654 ; 23   |//     All caps
                             9655 ; 24   |//     Numeric identifiers start at 0
                             9656 ; 25   |#if !(defined(regstbinc))
                             9657 ; 26   |#define regstbinc 1
                             9658 ; 27   |
                             9659 ; 28   |#include "types.h"
                             9660 
                             9662 
                             9663 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9664 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9665 ; 3    |//
                             9666 ; 4    |// Filename: types.h
                             9667 ; 5    |// Description: Standard data types
                             9668 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9669 ; 7    |
                             9670 ; 8    |#ifndef _TYPES_H
                             9671 ; 9    |#define _TYPES_H
                             9672 ; 10   |
                             9673 ; 11   |// TODO:  move this outta here!
                             9674 ; 12   |#if !defined(NOERROR)
                             9675 ; 13   |#define NOERROR 0
                             9676 ; 14   |#define SUCCESS 0
                             9677 ; 15   |#endif 
                             9678 ; 16   |#if !defined(SUCCESS)
                             9679 ; 17   |#define SUCCESS  0
                             9680 ; 18   |#endif
                             9681 ; 19   |#if !defined(ERROR)
                             9682 ; 20   |#define ERROR   -1
                             9683 ; 21   |#endif
                             9684 ; 22   |#if !defined(FALSE)
                             9685 ; 23   |#define FALSE 0
                             9686 ; 24   |#endif
                             9687 ; 25   |#if !defined(TRUE)
                             9688 ; 26   |#define TRUE  1
                             9689 ; 27   |#endif
                             9690 ; 28   |
                             9691 ; 29   |#if !defined(NULL)
                             9692 ; 30   |#define NULL 0
                             9693 ; 31   |#endif
                             9694 ; 32   |
                             9695 ; 33   |#define MAX_INT     0x7FFFFF
                             9696 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9697 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9698 ; 36   |#define MAX_ULONG   (-1) 
                             9699 ; 37   |
                             9700 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9701 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9702 ; 40   |
                             9703 ; 41   |
                             9704 ; 42   |#define BYTE    unsigned char       // btVarName
                             9705 ; 43   |#define CHAR    signed char         // cVarName
                             9706 ; 44   |#define USHORT  unsigned short      // usVarName
                             9707 ; 45   |#define SHORT   unsigned short      // sVarName
                             9708 ; 46   |#define WORD    unsigned int        // wVarName
                             9709 ; 47   |#define INT     signed int          // iVarName
                             9710 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9711 ; 49   |#define LONG    signed long         // lVarName
                             9712 ; 50   |#define BOOL    unsigned int        // bVarName
                             9713 ; 51   |#define FRACT   _fract              // frVarName
                             9714 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9715 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9716 ; 54   |#define FLOAT   float               // fVarName
                             9717 ; 55   |#define DBL     double              // dVarName
                             9718 ; 56   |#define ENUM    enum                // eVarName
                             9719 ; 57   |#define CMX     _complex            // cmxVarName
                             9720 ; 58   |typedef WORD UCS3;                   // 
                             9721 ; 59   |
                             9722 ; 60   |#define UINT16  unsigned short
                             9723 ; 61   |#define UINT8   unsigned char   
                             9724 ; 62   |#define UINT32  unsigned long
                             9725 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9726 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9727 ; 65   |#define WCHAR   UINT16
                             9728 ; 66   |
                             9729 ; 67   |//UINT128 is 16 bytes or 6 words
                             9730 ; 68   |typedef struct UINT128_3500 {   
                             9731 ; 69   |    int val[6];     
                             9732 ; 70   |} UINT128_3500;
                             9733 ; 71   |
                             9734 ; 72   |#define UINT128   UINT128_3500
                             9735 ; 73   |
                             9736 ; 74   |// Little endian word packed byte strings:   
                             9737 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9738 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9739 ; 77   |// Little endian word packed byte strings:   
                             9740 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9741 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9742 ; 80   |
                             9743 ; 81   |// Declare Memory Spaces To Use When Coding
                             9744 ; 82   |// A. Sector Buffers
                             9745 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9746 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9747 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9748 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9749 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9750 ; 88   |// B. Media DDI Memory
                             9751 ; 89   |#define MEDIA_DDI_MEM _Y
                             9752 ; 90   |
                             9753 ; 91   |
                             9754 ; 92   |
                             9755 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9756 ; 94   |// Examples of circular pointers:
                             9757 ; 95   |//    INT CIRC cpiVarName
                             9758 ; 96   |//    DWORD CIRC cpdwVarName
                             9759 ; 97   |
                             9760 ; 98   |#define RETCODE INT                 // rcVarName
                             9761 ; 99   |
                             9762 ; 100  |// generic bitfield structure
                             9763 ; 101  |struct Bitfield {
                             9764 ; 102  |    unsigned int B0  :1;
                             9765 ; 103  |    unsigned int B1  :1;
                             9766 ; 104  |    unsigned int B2  :1;
                             9767 ; 105  |    unsigned int B3  :1;
                             9768 ; 106  |    unsigned int B4  :1;
                             9769 ; 107  |    unsigned int B5  :1;
                             9770 ; 108  |    unsigned int B6  :1;
                             9771 ; 109  |    unsigned int B7  :1;
                             9772 ; 110  |    unsigned int B8  :1;
                             9773 ; 111  |    unsigned int B9  :1;
                             9774 ; 112  |    unsigned int B10 :1;
                             9775 ; 113  |    unsigned int B11 :1;
                             9776 ; 114  |    unsigned int B12 :1;
                             9777 ; 115  |    unsigned int B13 :1;
                             9778 ; 116  |    unsigned int B14 :1;
                             9779 ; 117  |    unsigned int B15 :1;
                             9780 ; 118  |    unsigned int B16 :1;
                             9781 ; 119  |    unsigned int B17 :1;
                             9782 ; 120  |    unsigned int B18 :1;
                             9783 ; 121  |    unsigned int B19 :1;
                             9784 ; 122  |    unsigned int B20 :1;
                             9785 ; 123  |    unsigned int B21 :1;
                             9786 ; 124  |    unsigned int B22 :1;
                             9787 ; 125  |    unsigned int B23 :1;
                             9788 ; 126  |};
                             9789 ; 127  |
                             9790 ; 128  |union BitInt {
                             9791 ; 129  |        struct Bitfield B;
                             9792 ; 130  |        int        I;
                             9793 ; 131  |};
                             9794 ; 132  |
                             9795 ; 133  |#define MAX_MSG_LENGTH 10
                             9796 ; 134  |struct CMessage
                             9797 ; 135  |{
                             9798 ; 136  |        unsigned int m_uLength;
                             9799 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9800 ; 138  |};
                             9801 ; 139  |
                             9802 ; 140  |typedef struct {
                             9803 ; 141  |    WORD m_wLength;
                             9804 ; 142  |    WORD m_wMessage;
                             9805 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9806 ; 144  |} Message;
                             9807 ; 145  |
                             9808 ; 146  |struct MessageQueueDescriptor
                             9809 ; 147  |{
                             9810 ; 148  |        int *m_pBase;
                             9811 ; 149  |        int m_iModulo;
                             9812 ; 150  |        int m_iSize;
                             9813 ; 151  |        int *m_pHead;
                             9814 ; 152  |        int *m_pTail;
                             9815 ; 153  |};
                             9816 ; 154  |
                             9817 ; 155  |struct ModuleEntry
                             9818 ; 156  |{
                             9819 ; 157  |    int m_iSignaledEventMask;
                             9820 ; 158  |    int m_iWaitEventMask;
                             9821 ; 159  |    int m_iResourceOfCode;
                             9822 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9823 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             9824 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9825 ; 163  |    int m_uTimeOutHigh;
                             9826 ; 164  |    int m_uTimeOutLow;
                             9827 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9828 ; 166  |};
                             9829 ; 167  |
                             9830 ; 168  |union WaitMask{
                             9831 ; 169  |    struct B{
                             9832 ; 170  |        unsigned int m_bNone     :1;
                             9833 ; 171  |        unsigned int m_bMessage  :1;
                             9834 ; 172  |        unsigned int m_bTimer    :1;
                             9835 ; 173  |        unsigned int m_bButton   :1;
                             9836 ; 174  |    } B;
                             9837 ; 175  |    int I;
                             9838 ; 176  |} ;
                             9839 ; 177  |
                             9840 ; 178  |
                             9841 ; 179  |struct Button {
                             9842 ; 180  |        WORD wButtonEvent;
                             9843 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9844 ; 182  |};
                             9845 ; 183  |
                             9846 ; 184  |struct Message {
                             9847 ; 185  |        WORD wMsgLength;
                             9848 ; 186  |        WORD wMsgCommand;
                             9849 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9850 ; 188  |};
                             9851 ; 189  |
                             9852 ; 190  |union EventTypes {
                             9853 ; 191  |        struct CMessage msg;
                             9854 ; 192  |        struct Button Button ;
                             9855 ; 193  |        struct Message Message;
                             9856 ; 194  |};
                             9857 ; 195  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9858 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9859 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9860 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9861 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9862 ; 200  |
                             9863 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9864 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9865 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9866 ; 204  |
                             9867 ; 205  |#if DEBUG
                             9868 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9869 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9870 ; 208  |#else 
                             9871 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             9872 ; 210  |#define DebugBuildAssert(x)    
                             9873 ; 211  |#endif
                             9874 ; 212  |
                             9875 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9876 ; 214  |//  #pragma asm
                             9877 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9878 ; 216  |//  #pragma endasm
                             9879 ; 217  |
                             9880 ; 218  |
                             9881 ; 219  |#ifdef COLOR_262K
                             9882 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             9883 ; 221  |#elif defined(COLOR_65K)
                             9884 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             9885 ; 223  |#else
                             9886 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             9887 ; 225  |#endif
                             9888 ; 226  |    
                             9889 ; 227  |#endif // #ifndef _TYPES_H
                             9890 
                             9892 
                             9893 ; 29   |
                             9894 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9895 ; 31   |
                             9896 ; 32   |//   Trace Buffer STMP Registers 
                             9897 ; 33   |//   Last Updated 6.30.2003 D. Baker
                             9898 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9899 ; 35   |
                             9900 ; 36   |#define HW_TB_BASEADDR (0xF080)
                             9901 ; 37   |
                             9902 ; 38   |
                             9903 ; 39   |
                             9904 ; 40   |
                             9905 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                             9906 ; 42   |
                             9907 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                             9908 ; 44   |
                             9909 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                             9910 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                             9911 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                             9912 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                             9913 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                             9914 ; 50   |
                             9915 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                             9916 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                             9917 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                             9918 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                             9919 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                             9920 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                             9921 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                             9922 ; 58   |
                             9923 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_ENABLE_BITPOS) 
                             9924 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS) 
                             9925 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                             9926 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_BITPOS) 
                             9927 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_EVENT_BITPOS) 
                             9928 ; 64   |
                             9929 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                             9930 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                             9931 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                             9932 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                             9933 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                             9934 ; 70   |
                             9935 ; 71   |typedef union               
                             9936 ; 72   |{
                             9937 ; 73   |    struct {
                             9938 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                             9939 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                             9940 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                             9941 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                             9942 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                             9943 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                             9944 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                             9945 ; 81   |    } B;
                             9946 ; 82   |    int I;
                             9947 ; 83   |    unsigned int U;
                             9948 ; 84   |} tb_cfg_type;
                             9949 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer Configuration Register */
                             9950 ; 86   |
                             9951 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             9952 ; 88   |
                             9953 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                             9954 ; 90   |
                             9955 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                             9956 ; 92   |
                             9957 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                             9958 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                             9959 ; 95   |
                             9960 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BITPOS) 
                             9961 ; 97   |
                             9962 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                             9963 ; 99   |
                             9964 ; 100  |typedef union               
                             9965 ; 101  |{
                             9966 ; 102  |    struct {
                             9967 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                             9968 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                             9969 ; 105  |    } B;
                             9970 ; 106  |    int I;
                             9971 ; 107  |    unsigned int U;
                             9972 ; 108  |} tb_bar_type;
                             9973 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer Base Address Register */
                             9974 ; 110  |
                             9975 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             9976 ; 112  |
                             9977 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                             9978 ; 114  |
                             9979 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                             9980 ; 116  |
                             9981 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                             9982 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                             9983 ; 119  |
                             9984 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BITPOS) 
                             9985 ; 121  |
                             9986 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                             9987 ; 123  |
                             9988 ; 124  |typedef union               
                             9989 ; 125  |{
                             9990 ; 126  |    struct {
                             9991 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                             9992 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                             9993 ; 129  |    } B;
                             9994 ; 130  |    int I;
                             9995 ; 131  |    unsigned int U;
                             9996 ; 132  |} tb_mod_type;
                             9997 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer Modulus Register */
                             9998 ; 134  |
                             9999 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            10000 ; 136  |
                            10001 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            10002 ; 138  |
                            10003 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            10004 ; 140  |
                            10005 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            10006 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            10007 ; 143  |
                            10008 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            10009 ; 145  |
                            10010 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            10011 ; 147  |
                            10012 ; 148  |typedef union               
                            10013 ; 149  |{
                            10014 ; 150  |    struct {
                            10015 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            10016 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            10017 ; 153  |    } B;
                            10018 ; 154  |    int I;
                            10019 ; 155  |    unsigned int U;
                            10020 ; 156  |} tb_cir_type;
                            10021 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer Current Index Register */
                            10022 ; 158  |
                            10023 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            10024 ; 160  |
                            10025 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            10026 ; 162  |
                            10027 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            10028 ; 164  |
                            10029 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            10030 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            10031 ; 167  |
                            10032 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            10033 ; 169  |
                            10034 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            10035 ; 171  |
                            10036 ; 172  |typedef union               
                            10037 ; 173  |{
                            10038 ; 174  |    struct {
                            10039 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            10040 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            10041 ; 177  |    } B;
                            10042 ; 178  |    int I;
                            10043 ; 179  |    unsigned int U;
                            10044 ; 180  |} tb_obc_type;
                            10045 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer one byte code Register */
                            10046 ; 182  |
                            10047 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            10048 ; 184  |
                            10049 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            10050 ; 186  |
                            10051 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            10052 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            10053 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            10054 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            10055 ; 191  |
                            10056 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            10057 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            10058 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            10059 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            10060 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            10061 ; 197  |
                            10062 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STYLE_BITPOS) 
                            10063 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLASS_BITPOS) 
                            10064 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLASS_BITPOS) 
                            10065 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS) 
                            10066 ; 202  |
                            10067 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            10068 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            10069 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            10070 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            10071 ; 207  |
                            10072 ; 208  |typedef union               
                            10073 ; 209  |{
                            10074 ; 210  |    struct {
                            10075 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            10076 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            10077 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            10078 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            10079 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            10080 ; 216  |    } B;
                            10081 ; 217  |    int I;
                            10082 ; 218  |    unsigned int U;
                            10083 ; 219  |} tb_tcs_type;
                            10084 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffer Trigger Command Register */
                            10085 ; 221  |
                            10086 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            10087 ; 223  |
                            10088 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            10089 ; 225  |
                            10090 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            10091 ; 227  |
                            10092 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            10093 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            10094 ; 230  |
                            10095 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH_ADDR_BITPOS) 
                            10096 ; 232  |
                            10097 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            10098 ; 234  |
                            10099 ; 235  |typedef union               
                            10100 ; 236  |{
                            10101 ; 237  |    struct {
                            10102 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            10103 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            10104 ; 240  |    } B;
                            10105 ; 241  |    int I;
                            10106 ; 242  |    unsigned int U;
                            10107 ; 243  |} tb_tvr_type;
                            10108 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffer Trigger Value Register */
                            10109 ; 245  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10110 ; 246  |
                            10111 ; 247  |
                            10112 ; 248  |#endif
                            10113 ; 249  |
                            10114 ; 250  |
                            10115 ; 251  |
                            10116 ; 252  |
                            10117 ; 253  |
                            10118 ; 254  |
                            10119 ; 255  |
                            10120 ; 256  |
                            10121 ; 257  |
                            10122 ; 258  |
                            10123 ; 259  |
                            10124 ; 260  |
                            10125 ; 261  |
                            10126 ; 262  |
                            10127 ; 263  |
                            10128 ; 264  |
                            10129 ; 265  |
                            10130 
                            10132 
                            10133 ; 35   |#include "regstimer.h"
                            10134 
                            10136 
                            10137 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10138 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            10139 ; 3    |// Filename: regstimer.inc
                            10140 ; 4    |// Description: Register definitions for  Timers interface
                            10141 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10142 ; 6    |// The following naming conventions are followed in this file.
                            10143 ; 7    |// All registers are named using the format...
                            10144 ; 8    |//     HW_<module>_<regname>
                            10145 ; 9    |// where <module> is the module name which can be any of the following...
                            10146 ; 10   |//     USB20
                            10147 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10148 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10149 ; 13   |// that module)
                            10150 ; 14   |// <regname> is the specific register within that module
                            10151 ; 15   |// We also define the following...
                            10152 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10153 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10154 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10155 ; 19   |// which does something else, and
                            10156 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10157 ; 21   |// which does something else.
                            10158 ; 22   |// Other rules
                            10159 ; 23   |//     All caps
                            10160 ; 24   |//     Numeric identifiers start at 0
                            10161 ; 25   |#if !(defined(regstimerinc))
                            10162 ; 26   |#define regstimerinc 1
                            10163 ; 27   |
                            10164 ; 28   |#include "types.h"
                            10165 
                            10167 
                            10168 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10169 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10170 ; 3    |//
                            10171 ; 4    |// Filename: types.h
                            10172 ; 5    |// Description: Standard data types
                            10173 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10174 ; 7    |
                            10175 ; 8    |#ifndef _TYPES_H
                            10176 ; 9    |#define _TYPES_H
                            10177 ; 10   |
                            10178 ; 11   |// TODO:  move this outta here!
                            10179 ; 12   |#if !defined(NOERROR)
                            10180 ; 13   |#define NOERROR 0
                            10181 ; 14   |#define SUCCESS 0
                            10182 ; 15   |#endif 
                            10183 ; 16   |#if !defined(SUCCESS)
                            10184 ; 17   |#define SUCCESS  0
                            10185 ; 18   |#endif
                            10186 ; 19   |#if !defined(ERROR)
                            10187 ; 20   |#define ERROR   -1
                            10188 ; 21   |#endif
                            10189 ; 22   |#if !defined(FALSE)
                            10190 ; 23   |#define FALSE 0
                            10191 ; 24   |#endif
                            10192 ; 25   |#if !defined(TRUE)
                            10193 ; 26   |#define TRUE  1
                            10194 ; 27   |#endif
                            10195 ; 28   |
                            10196 ; 29   |#if !defined(NULL)
                            10197 ; 30   |#define NULL 0
                            10198 ; 31   |#endif
                            10199 ; 32   |
                            10200 ; 33   |#define MAX_INT     0x7FFFFF
                            10201 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10202 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10203 ; 36   |#define MAX_ULONG   (-1) 
                            10204 ; 37   |
                            10205 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10206 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10207 ; 40   |
                            10208 ; 41   |
                            10209 ; 42   |#define BYTE    unsigned char       // btVarName
                            10210 ; 43   |#define CHAR    signed char         // cVarName
                            10211 ; 44   |#define USHORT  unsigned short      // usVarName
                            10212 ; 45   |#define SHORT   unsigned short      // sVarName
                            10213 ; 46   |#define WORD    unsigned int        // wVarName
                            10214 ; 47   |#define INT     signed int          // iVarName
                            10215 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10216 ; 49   |#define LONG    signed long         // lVarName
                            10217 ; 50   |#define BOOL    unsigned int        // bVarName
                            10218 ; 51   |#define FRACT   _fract              // frVarName
                            10219 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10220 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10221 ; 54   |#define FLOAT   float               // fVarName
                            10222 ; 55   |#define DBL     double              // dVarName
                            10223 ; 56   |#define ENUM    enum                // eVarName
                            10224 ; 57   |#define CMX     _complex            // cmxVarName
                            10225 ; 58   |typedef WORD UCS3;                   // 
                            10226 ; 59   |
                            10227 ; 60   |#define UINT16  unsigned short
                            10228 ; 61   |#define UINT8   unsigned char   
                            10229 ; 62   |#define UINT32  unsigned long
                            10230 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10231 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10232 ; 65   |#define WCHAR   UINT16
                            10233 ; 66   |
                            10234 ; 67   |//UINT128 is 16 bytes or 6 words
                            10235 ; 68   |typedef struct UINT128_3500 {   
                            10236 ; 69   |    int val[6];     
                            10237 ; 70   |} UINT128_3500;
                            10238 ; 71   |
                            10239 ; 72   |#define UINT128   UINT128_3500
                            10240 ; 73   |
                            10241 ; 74   |// Little endian word packed byte strings:   
                            10242 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10243 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10244 ; 77   |// Little endian word packed byte strings:   
                            10245 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10246 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10247 ; 80   |
                            10248 ; 81   |// Declare Memory Spaces To Use When Coding
                            10249 ; 82   |// A. Sector Buffers
                            10250 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10251 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10252 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10253 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10254 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10255 ; 88   |// B. Media DDI Memory
                            10256 ; 89   |#define MEDIA_DDI_MEM _Y
                            10257 ; 90   |
                            10258 ; 91   |
                            10259 ; 92   |
                            10260 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10261 ; 94   |// Examples of circular pointers:
                            10262 ; 95   |//    INT CIRC cpiVarName
                            10263 ; 96   |//    DWORD CIRC cpdwVarName
                            10264 ; 97   |
                            10265 ; 98   |#define RETCODE INT                 // rcVarName
                            10266 ; 99   |
                            10267 ; 100  |// generic bitfield structure
                            10268 ; 101  |struct Bitfield {
                            10269 ; 102  |    unsigned int B0  :1;
                            10270 ; 103  |    unsigned int B1  :1;
                            10271 ; 104  |    unsigned int B2  :1;
                            10272 ; 105  |    unsigned int B3  :1;
                            10273 ; 106  |    unsigned int B4  :1;
                            10274 ; 107  |    unsigned int B5  :1;
                            10275 ; 108  |    unsigned int B6  :1;
                            10276 ; 109  |    unsigned int B7  :1;
                            10277 ; 110  |    unsigned int B8  :1;
                            10278 ; 111  |    unsigned int B9  :1;
                            10279 ; 112  |    unsigned int B10 :1;
                            10280 ; 113  |    unsigned int B11 :1;
                            10281 ; 114  |    unsigned int B12 :1;
                            10282 ; 115  |    unsigned int B13 :1;
                            10283 ; 116  |    unsigned int B14 :1;
                            10284 ; 117  |    unsigned int B15 :1;
                            10285 ; 118  |    unsigned int B16 :1;
                            10286 ; 119  |    unsigned int B17 :1;
                            10287 ; 120  |    unsigned int B18 :1;
                            10288 ; 121  |    unsigned int B19 :1;
                            10289 ; 122  |    unsigned int B20 :1;
                            10290 ; 123  |    unsigned int B21 :1;
                            10291 ; 124  |    unsigned int B22 :1;
                            10292 ; 125  |    unsigned int B23 :1;
                            10293 ; 126  |};
                            10294 ; 127  |
                            10295 ; 128  |union BitInt {
                            10296 ; 129  |        struct Bitfield B;
                            10297 ; 130  |        int        I;
                            10298 ; 131  |};
                            10299 ; 132  |
                            10300 ; 133  |#define MAX_MSG_LENGTH 10
                            10301 ; 134  |struct CMessage
                            10302 ; 135  |{
                            10303 ; 136  |        unsigned int m_uLength;
                            10304 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10305 ; 138  |};
                            10306 ; 139  |
                            10307 ; 140  |typedef struct {
                            10308 ; 141  |    WORD m_wLength;
                            10309 ; 142  |    WORD m_wMessage;
                            10310 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10311 ; 144  |} Message;
                            10312 ; 145  |
                            10313 ; 146  |struct MessageQueueDescriptor
                            10314 ; 147  |{
                            10315 ; 148  |        int *m_pBase;
                            10316 ; 149  |        int m_iModulo;
                            10317 ; 150  |        int m_iSize;
                            10318 ; 151  |        int *m_pHead;
                            10319 ; 152  |        int *m_pTail;
                            10320 ; 153  |};
                            10321 ; 154  |
                            10322 ; 155  |struct ModuleEntry
                            10323 ; 156  |{
                            10324 ; 157  |    int m_iSignaledEventMask;
                            10325 ; 158  |    int m_iWaitEventMask;
                            10326 ; 159  |    int m_iResourceOfCode;
                            10327 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10328 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10329 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10330 ; 163  |    int m_uTimeOutHigh;
                            10331 ; 164  |    int m_uTimeOutLow;
                            10332 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10333 ; 166  |};
                            10334 ; 167  |
                            10335 ; 168  |union WaitMask{
                            10336 ; 169  |    struct B{
                            10337 ; 170  |        unsigned int m_bNone     :1;
                            10338 ; 171  |        unsigned int m_bMessage  :1;
                            10339 ; 172  |        unsigned int m_bTimer    :1;
                            10340 ; 173  |        unsigned int m_bButton   :1;
                            10341 ; 174  |    } B;
                            10342 ; 175  |    int I;
                            10343 ; 176  |} ;
                            10344 ; 177  |
                            10345 ; 178  |
                            10346 ; 179  |struct Button {
                            10347 ; 180  |        WORD wButtonEvent;
                            10348 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10349 ; 182  |};
                            10350 ; 183  |
                            10351 ; 184  |struct Message {
                            10352 ; 185  |        WORD wMsgLength;
                            10353 ; 186  |        WORD wMsgCommand;
                            10354 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10355 ; 188  |};
                            10356 ; 189  |
                            10357 ; 190  |union EventTypes {
                            10358 ; 191  |        struct CMessage msg;
                            10359 ; 192  |        struct Button Button ;
                            10360 ; 193  |        struct Message Message;
                            10361 ; 194  |};
                            10362 ; 195  |
                            10363 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10364 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10365 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10366 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10367 ; 200  |
                            10368 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10369 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10370 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10371 ; 204  |
                            10372 ; 205  |#if DEBUG
                            10373 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10374 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10375 ; 208  |#else 
                            10376 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            10377 ; 210  |#define DebugBuildAssert(x)    
                            10378 ; 211  |#endif
                            10379 ; 212  |
                            10380 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10381 ; 214  |//  #pragma asm
                            10382 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10383 ; 216  |//  #pragma endasm
                            10384 ; 217  |
                            10385 ; 218  |
                            10386 ; 219  |#ifdef COLOR_262K
                            10387 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            10388 ; 221  |#elif defined(COLOR_65K)
                            10389 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10390 ; 223  |#else
                            10391 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10392 ; 225  |#endif
                            10393 ; 226  |    
                            10394 ; 227  |#endif // #ifndef _TYPES_H
                            10395 
                            10397 
                            10398 ; 29   |
                            10399 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10400 ; 31   |//   TIMER STMP Registers 
                            10401 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10402 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            10403 ; 34   |
                            10404 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            10405 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            10406 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            10407 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            10408 ; 39   |
                            10409 ; 40   |#define HW_TIMER_NUMBER_0 0
                            10410 ; 41   |#define HW_TIMER_NUMBER_1 1
                            10411 ; 42   |#define HW_TIMER_NUMBER_2 2
                            10412 ; 43   |#define HW_TIMER_NUMBER_3 3
                            10413 ; 44   |
                            10414 ; 45   |#define HW_TMRCSR 0
                            10415 ; 46   |#define HW_TMRCNTR 1
                            10416 ; 47   |
                            10417 ; 48   |
                            10418 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            10419 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            10420 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            10421 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            10422 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            10423 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            10424 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            10425 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            10426 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            10427 ; 58   |
                            10428 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            10429 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            10430 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            10431 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            10432 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            10433 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            10434 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            10435 ; 66   |
                            10436 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CSR_TIMER_ENABLE_BITPOS)
                            10437 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CSR_TIMER_INT_EN_BITPOS)
                            10438 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BITPOS)
                            10439 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0CSR_TIMER_CONTROL_BITPOS)
                            10440 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CSR_TIMER_STATUS_BITPOS)
                            10441 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TIMER_MODE_BITPOS)
                            10442 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS)
                            10443 ; 74   |
                            10444 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            10445 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            10446 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            10447 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            10448 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            10449 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            10450 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            10451 ; 82   |
                            10452 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            10453 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            10454 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            10455 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            10456 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            10457 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            10458 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            10459 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            10460 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            10461 ; 92   |
                            10462 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            10463 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            10464 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            10465 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            10466 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            10467 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            10468 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            10469 ; 100  |
                            10470 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CSR_TIMER_ENABLE_BITPOS)
                            10471 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CSR_TIMER_INT_EN_BITPOS)
                            10472 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BITPOS)
                            10473 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1CSR_TIMER_CONTROL_BITPOS)
                            10474 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CSR_TIMER_STATUS_BITPOS)
                            10475 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TIMER_MODE_BITPOS)
                            10476 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS)
                            10477 ; 108  |
                            10478 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            10479 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            10480 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            10481 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            10482 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            10483 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            10484 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            10485 ; 116  |
                            10486 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            10487 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            10488 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            10489 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            10490 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            10491 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            10492 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            10493 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            10494 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            10495 ; 126  |
                            10496 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            10497 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            10498 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            10499 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            10500 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            10501 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            10502 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            10503 ; 134  |
                            10504 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CSR_TIMER_ENABLE_BITPOS)
                            10505 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CSR_TIMER_INT_EN_BITPOS)
                            10506 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BITPOS)
                            10507 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2CSR_TIMER_CONTROL_BITPOS)
                            10508 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CSR_TIMER_STATUS_BITPOS)
                            10509 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TIMER_MODE_BITPOS)
                            10510 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS)
                            10511 ; 142  |
                            10512 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            10513 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            10514 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            10515 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            10516 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            10517 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            10518 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            10519 ; 150  |
                            10520 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            10521 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            10522 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            10523 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            10524 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            10525 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            10526 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            10527 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            10528 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            10529 ; 160  |
                            10530 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            10531 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            10532 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            10533 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            10534 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            10535 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            10536 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            10537 ; 168  |
                            10538 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CSR_TIMER_ENABLE_BITPOS)
                            10539 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CSR_TIMER_INT_EN_BITPOS)
                            10540 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BITPOS)
                            10541 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3CSR_TIMER_CONTROL_BITPOS)
                            10542 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CSR_TIMER_STATUS_BITPOS)
                            10543 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TIMER_MODE_BITPOS)
                            10544 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS)
                            10545 ; 176  |
                            10546 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            10547 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            10548 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            10549 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            10550 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            10551 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            10552 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            10553 ; 184  |
                            10554 ; 185  |typedef union               
                            10555 ; 186  |{
                            10556 ; 187  |    struct {
                            10557 ; 188  |       int TIMER_ENABLE              :1;
                            10558 ; 189  |       int TIMER_INT_EN              :1;
                            10559 ; 190  |       int INVERT                    :1;
                            10560 ; 191  |       int TIMER_CONTROL             :3;
                            10561 ; 192  |       int RSVD0                     :1;
                            10562 ; 193  |       int TIMER_STATUS              :1;
                            10563 ; 194  |       int TIMER_MODE                :2;
                            10564 ; 195  |       int RSVD1                     :13;
                            10565 ; 196  |       int CLKGT                     :1;
                            10566 ; 197  |    } B;
                            10567 ; 198  |    int I;
                            10568 ; 199  |} timercsr_type;
                            10569 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /* Timer0 Control Status Register */
                            10570 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /* Timer1 Control Status Register */
                            10571 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /* Timer2 Control Status Register */
                            10572 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /* Timer3 Control Status Register */
                            10573 ; 204  |
                            10574 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            10575 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            10576 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            10577 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            10578 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BITPOS)
                            10579 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            10580 ; 211  |
                            10581 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            10582 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            10583 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            10584 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            10585 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BITPOS)
                            10586 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            10587 ; 218  |
                            10588 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            10589 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            10590 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            10591 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            10592 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BITPOS)
                            10593 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            10594 ; 225  |
                            10595 ; 226  |typedef union               
                            10596 ; 227  |{
                            10597 ; 228  |    struct {
                            10598 ; 229  |       int COUNT                    :24;
                            10599 ; 230  |    } B;
                            10600 ; 231  |    int I;
                            10601 ; 232  |} tmrcntr_type;
                            10602 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /* Timer0 Count Register */
                            10603 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /* Timer1 Count Register */
                            10604 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /* Timer2 Count Register */
                            10605 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /* Timer3 Count Register */
                            10606 ; 237  |
                            10607 ; 238  |
                            10608 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                            10609 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                            10610 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            10611 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            10612 ; 243  |
                            10613 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            10614 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            10615 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10616 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            10617 ; 248  |
                            10618 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            10619 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            10620 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            10621 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            10622 ; 253  |
                            10623 ; 254  |// Timer enable
                            10624 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            10625 ; 256  |// Timer clock gating control
                            10626 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            10627 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            10628 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            10629 ; 260  |#endif
                            10630 ; 261  |
                            10631 ; 262  |
                            10632 ; 263  |
                            10633 ; 264  |
                            10634 
                            10636 
                            10637 ; 36   |#include "regsusb20.h"
                            10638 
                            10640 
                            10641 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10642 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            10643 ; 3    |//;  File        : regsusb20ip.inc
                            10644 ; 4    |//;  Description : USB20 IP Register definition
                            10645 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10646 ; 6    |
                            10647 ; 7    |// The following naming conventions are followed in this file.
                            10648 ; 8    |// All registers are named using the format...
                            10649 ; 9    |//     HW_<module>_<regname>
                            10650 ; 10   |// where <module> is the module name which can be any of the following...
                            10651 ; 11   |//     USB20
                            10652 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            10653 ; 13   |// module name includes a number starting from 0 for the first instance of
                            10654 ; 14   |// that module)
                            10655 ; 15   |// <regname> is the specific register within that module
                            10656 ; 16   |// We also define the following...
                            10657 ; 17   |//     HW_<module>_<regname>_BITPOS
                            10658 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10659 ; 19   |//     HW_<module>_<regname>_SETMASK
                            10660 ; 20   |// which does something else, and
                            10661 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            10662 ; 22   |// which does something else.
                            10663 ; 23   |// Other rules
                            10664 ; 24   |//     All caps
                            10665 ; 25   |//     Numeric identifiers start at 0
                            10666 ; 26   |
                            10667 ; 27   |#if !(defined(regsusb20inc))
                            10668 ; 28   |#define regsusb20inc 1
                            10669 ; 29   |
                            10670 ; 30   |#include "types.h"
                            10671 
                            10673 
                            10674 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10675 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10676 ; 3    |//
                            10677 ; 4    |// Filename: types.h
                            10678 ; 5    |// Description: Standard data types
                            10679 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10680 ; 7    |
                            10681 ; 8    |#ifndef _TYPES_H
                            10682 ; 9    |#define _TYPES_H
                            10683 ; 10   |
                            10684 ; 11   |// TODO:  move this outta here!
                            10685 ; 12   |#if !defined(NOERROR)
                            10686 ; 13   |#define NOERROR 0
                            10687 ; 14   |#define SUCCESS 0
                            10688 ; 15   |#endif 
                            10689 ; 16   |#if !defined(SUCCESS)
                            10690 ; 17   |#define SUCCESS  0
                            10691 ; 18   |#endif
                            10692 ; 19   |#if !defined(ERROR)
                            10693 ; 20   |#define ERROR   -1
                            10694 ; 21   |#endif
                            10695 ; 22   |#if !defined(FALSE)
                            10696 ; 23   |#define FALSE 0
                            10697 ; 24   |#endif
                            10698 ; 25   |#if !defined(TRUE)
                            10699 ; 26   |#define TRUE  1
                            10700 ; 27   |#endif
                            10701 ; 28   |
                            10702 ; 29   |#if !defined(NULL)
                            10703 ; 30   |#define NULL 0
                            10704 ; 31   |#endif
                            10705 ; 32   |
                            10706 ; 33   |#define MAX_INT     0x7FFFFF
                            10707 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10708 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10709 ; 36   |#define MAX_ULONG   (-1) 
                            10710 ; 37   |
                            10711 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10712 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10713 ; 40   |
                            10714 ; 41   |
                            10715 ; 42   |#define BYTE    unsigned char       // btVarName
                            10716 ; 43   |#define CHAR    signed char         // cVarName
                            10717 ; 44   |#define USHORT  unsigned short      // usVarName
                            10718 ; 45   |#define SHORT   unsigned short      // sVarName
                            10719 ; 46   |#define WORD    unsigned int        // wVarName
                            10720 ; 47   |#define INT     signed int          // iVarName
                            10721 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10722 ; 49   |#define LONG    signed long         // lVarName
                            10723 ; 50   |#define BOOL    unsigned int        // bVarName
                            10724 ; 51   |#define FRACT   _fract              // frVarName
                            10725 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10726 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10727 ; 54   |#define FLOAT   float               // fVarName
                            10728 ; 55   |#define DBL     double              // dVarName
                            10729 ; 56   |#define ENUM    enum                // eVarName
                            10730 ; 57   |#define CMX     _complex            // cmxVarName
                            10731 ; 58   |typedef WORD UCS3;                   // 
                            10732 ; 59   |
                            10733 ; 60   |#define UINT16  unsigned short
                            10734 ; 61   |#define UINT8   unsigned char   
                            10735 ; 62   |#define UINT32  unsigned long
                            10736 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10737 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10738 ; 65   |#define WCHAR   UINT16
                            10739 ; 66   |
                            10740 ; 67   |//UINT128 is 16 bytes or 6 words
                            10741 ; 68   |typedef struct UINT128_3500 {   
                            10742 ; 69   |    int val[6];     
                            10743 ; 70   |} UINT128_3500;
                            10744 ; 71   |
                            10745 ; 72   |#define UINT128   UINT128_3500
                            10746 ; 73   |
                            10747 ; 74   |// Little endian word packed byte strings:   
                            10748 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10749 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10750 ; 77   |// Little endian word packed byte strings:   
                            10751 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10752 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10753 ; 80   |
                            10754 ; 81   |// Declare Memory Spaces To Use When Coding
                            10755 ; 82   |// A. Sector Buffers
                            10756 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10757 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10758 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10759 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10760 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10761 ; 88   |// B. Media DDI Memory
                            10762 ; 89   |#define MEDIA_DDI_MEM _Y
                            10763 ; 90   |
                            10764 ; 91   |
                            10765 ; 92   |
                            10766 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10767 ; 94   |// Examples of circular pointers:
                            10768 ; 95   |//    INT CIRC cpiVarName
                            10769 ; 96   |//    DWORD CIRC cpdwVarName
                            10770 ; 97   |
                            10771 ; 98   |#define RETCODE INT                 // rcVarName
                            10772 ; 99   |
                            10773 ; 100  |// generic bitfield structure
                            10774 ; 101  |struct Bitfield {
                            10775 ; 102  |    unsigned int B0  :1;
                            10776 ; 103  |    unsigned int B1  :1;
                            10777 ; 104  |    unsigned int B2  :1;
                            10778 ; 105  |    unsigned int B3  :1;
                            10779 ; 106  |    unsigned int B4  :1;
                            10780 ; 107  |    unsigned int B5  :1;
                            10781 ; 108  |    unsigned int B6  :1;
                            10782 ; 109  |    unsigned int B7  :1;
                            10783 ; 110  |    unsigned int B8  :1;
                            10784 ; 111  |    unsigned int B9  :1;
                            10785 ; 112  |    unsigned int B10 :1;
                            10786 ; 113  |    unsigned int B11 :1;
                            10787 ; 114  |    unsigned int B12 :1;
                            10788 ; 115  |    unsigned int B13 :1;
                            10789 ; 116  |    unsigned int B14 :1;
                            10790 ; 117  |    unsigned int B15 :1;
                            10791 ; 118  |    unsigned int B16 :1;
                            10792 ; 119  |    unsigned int B17 :1;
                            10793 ; 120  |    unsigned int B18 :1;
                            10794 ; 121  |    unsigned int B19 :1;
                            10795 ; 122  |    unsigned int B20 :1;
                            10796 ; 123  |    unsigned int B21 :1;
                            10797 ; 124  |    unsigned int B22 :1;
                            10798 ; 125  |    unsigned int B23 :1;
                            10799 ; 126  |};
                            10800 ; 127  |
                            10801 ; 128  |union BitInt {
                            10802 ; 129  |        struct Bitfield B;
                            10803 ; 130  |        int        I;
                            10804 ; 131  |};
                            10805 ; 132  |
                            10806 ; 133  |#define MAX_MSG_LENGTH 10
                            10807 ; 134  |struct CMessage
                            10808 ; 135  |{
                            10809 ; 136  |        unsigned int m_uLength;
                            10810 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10811 ; 138  |};
                            10812 ; 139  |
                            10813 ; 140  |typedef struct {
                            10814 ; 141  |    WORD m_wLength;
                            10815 ; 142  |    WORD m_wMessage;
                            10816 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10817 ; 144  |} Message;
                            10818 ; 145  |
                            10819 ; 146  |struct MessageQueueDescriptor
                            10820 ; 147  |{
                            10821 ; 148  |        int *m_pBase;
                            10822 ; 149  |        int m_iModulo;
                            10823 ; 150  |        int m_iSize;
                            10824 ; 151  |        int *m_pHead;
                            10825 ; 152  |        int *m_pTail;
                            10826 ; 153  |};
                            10827 ; 154  |
                            10828 ; 155  |struct ModuleEntry
                            10829 ; 156  |{
                            10830 ; 157  |    int m_iSignaledEventMask;
                            10831 ; 158  |    int m_iWaitEventMask;
                            10832 ; 159  |    int m_iResourceOfCode;
                            10833 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10834 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10835 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10836 ; 163  |    int m_uTimeOutHigh;
                            10837 ; 164  |    int m_uTimeOutLow;
                            10838 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10839 ; 166  |};
                            10840 ; 167  |
                            10841 ; 168  |union WaitMask{
                            10842 ; 169  |    struct B{
                            10843 ; 170  |        unsigned int m_bNone     :1;
                            10844 ; 171  |        unsigned int m_bMessage  :1;
                            10845 ; 172  |        unsigned int m_bTimer    :1;
                            10846 ; 173  |        unsigned int m_bButton   :1;
                            10847 ; 174  |    } B;
                            10848 ; 175  |    int I;
                            10849 ; 176  |} ;
                            10850 ; 177  |
                            10851 ; 178  |
                            10852 ; 179  |struct Button {
                            10853 ; 180  |        WORD wButtonEvent;
                            10854 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10855 ; 182  |};
                            10856 ; 183  |
                            10857 ; 184  |struct Message {
                            10858 ; 185  |        WORD wMsgLength;
                            10859 ; 186  |        WORD wMsgCommand;
                            10860 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10861 ; 188  |};
                            10862 ; 189  |
                            10863 ; 190  |union EventTypes {
                            10864 ; 191  |        struct CMessage msg;
                            10865 ; 192  |        struct Button Button ;
                            10866 ; 193  |        struct Message Message;
                            10867 ; 194  |};
                            10868 ; 195  |
                            10869 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10870 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10871 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10872 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10873 ; 200  |
                            10874 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10875 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10876 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10877 ; 204  |
                            10878 ; 205  |#if DEBUG
                            10879 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10880 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10881 ; 208  |#else 
                            10882 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            10883 ; 210  |#define DebugBuildAssert(x)    
                            10884 ; 211  |#endif
                            10885 ; 212  |
                            10886 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10887 ; 214  |//  #pragma asm
                            10888 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10889 ; 216  |//  #pragma endasm
                            10890 ; 217  |
                            10891 ; 218  |
                            10892 ; 219  |#ifdef COLOR_262K
                            10893 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            10894 ; 221  |#elif defined(COLOR_65K)
                            10895 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10896 ; 223  |#else
                            10897 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10898 ; 225  |#endif
                            10899 ; 226  |    
                            10900 ; 227  |#endif // #ifndef _TYPES_H
                            10901 
                            10903 
                            10904 ; 31   |
                            10905 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10906 ; 33   |//   USB2.0 STMP Registers 
                            10907 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10908 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            10909 ; 36   |
                            10910 ; 37   |
                            10911 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            10912 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            10913 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            10914 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            10915 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            10916 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            10917 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            10918 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            10919 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            10920 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            10921 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            10922 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            10923 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            10924 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            10925 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            10926 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            10927 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            10928 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            10929 ; 56   |
                            10930 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            10931 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            10932 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            10933 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            10934 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            10935 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            10936 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            10937 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            10938 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            10939 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            10940 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            10941 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            10942 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            10943 ; 70   |
                            10944 ; 71   |
                            10945 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            10946 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            10947 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            10948 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            10949 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            10950 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            10951 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            10952 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            10953 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            10954 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            10955 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            10956 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            10957 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            10958 ; 85   |
                            10959 ; 86   |typedef union               
                            10960 ; 87   |{
                            10961 ; 88   |    struct {
                            10962 ; 89   |        int USBEN          :1;
                            10963 ; 90   |        int WAKEUPIRQ      :1;
                            10964 ; 91   |        int WAKEUPIE       :1;
                            10965 ; 92   |        int VBUSCXIRQ      :1;
                            10966 ; 93   |        int VBUSCXIE       :1;
                            10967 ; 94   |        int VBUSDISCXIRQ   :1;
                            10968 ; 95   |        int VBUSDISCXIE    :1;
                            10969 ; 96   |        int CLKOFF         :1;
                            10970 ; 97   |        int SUSP           :1;
                            10971 ; 98   |        int SUSPF          :1;
                            10972 ; 99   |        int UTMITST        :1;
                            10973 ; 100  |        int ARCCONNECT     :1;
                            10974 ; 101  |        int PLUGGEDIN_EN   :1;
                            10975 ; 102  |        int PLUGGEDIN      :1;
                            10976 ; 103  |        int                :8;
                            10977 ; 104  |        int HOSTDISCONNECT :1;
                            10978 ; 105  |        int VBUSSENSE      :1;
                            10979 ; 106  |    } B;
                            10980 ; 107  |    int I;
                            10981 ; 108  |} usbcsr_type;
                            10982 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control / Status Register */
                            10983 ; 110  |
                            10984 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            10985 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            10986 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            10987 ; 114  |
                            10988 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            10989 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            10990 ; 117  |
                            10991 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            10992 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            10993 ; 120  |
                            10994 ; 121  |typedef union               
                            10995 ; 122  |{
                            10996 ; 123  |    struct {
                            10997 ; 124  |        int ADD            :16;
                            10998 ; 125  |        int MEM            :2;
                            10999 ; 126  |        int                :6;
                            11000 ; 127  |    } B;
                            11001 ; 128  |    int I;
                            11002 ; 129  |} usbdmaoff_type;
                            11003 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            11004 ; 131  |
                            11005 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            11006 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            11007 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            11008 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            11009 ; 136  |
                            11010 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            11011 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            11012 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            11013 ; 140  |
                            11014 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            11015 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            11016 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            11017 ; 144  |
                            11018 ; 145  |typedef union               
                            11019 ; 146  |{
                            11020 ; 147  |    struct {
                            11021 ; 148  |        int ADD            :9;
                            11022 ; 149  |        int                :7;
                            11023 ; 150  |        int RWB            :1;
                            11024 ; 151  |        int                :14;
                            11025 ; 152  |        int KICK           :1;
                            11026 ; 153  |    } B;
                            11027 ; 154  |    int I;
                            11028 ; 155  |} usbarcaccess_type;
                            11029 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            11030 ; 157  |
                            11031 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            11032 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            11033 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            11034 ; 161  |
                            11035 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            11036 ; 163  |
                            11037 ; 164  |typedef union               
                            11038 ; 165  |{
                            11039 ; 166  |    struct {
                            11040 ; 167  |        int DATA           :16;
                            11041 ; 168  |        int                :8;
                            11042 ; 169  |    } B;
                            11043 ; 170  |    int I;
                            11044 ; 171  |} usbarcdatalow_type;
                            11045 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                            11046 ; 173  |
                            11047 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            11048 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            11049 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            11050 ; 177  |
                            11051 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            11052 ; 179  |
                            11053 ; 180  |typedef union               
                            11054 ; 181  |{
                            11055 ; 182  |    struct {
                            11056 ; 183  |        int DATA           :16;
                            11057 ; 184  |        int                :8;
                            11058 ; 185  |    } B;
                            11059 ; 186  |    int I;
                            11060 ; 187  |} usbarcdatahigh_type;
                            11061 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))    
                            11062 ; 189  |
                            11063 ; 190  |
                            11064 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11065 ; 192  |//   USB2.0 ARC Registers 
                            11066 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11067 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            11068 ; 195  |
                            11069 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            11070 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            11071 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            11072 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            11073 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            11074 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            11075 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            11076 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            11077 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            11078 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            11079 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            11080 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            11081 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            11082 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            11083 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            11084 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            11085 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            11086 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            11087 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            11088 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            11089 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            11090 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            11091 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            11092 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            11093 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            11094 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            11095 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            11096 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            11097 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            11098 ; 225  |
                            11099 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            11100 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            11101 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            11102 ; 229  |
                            11103 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            11104 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            11105 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            11106 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            11107 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            11108 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            11109 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            11110 ; 237  |
                            11111 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            11112 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            11113 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            11114 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            11115 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            11116 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            11117 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            11118 ; 245  |
                            11119 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            11120 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            11121 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11122 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            11123 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            11124 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            11125 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            11126 ; 253  |
                            11127 ; 254  |typedef union               
                            11128 ; 255  |{
                            11129 ; 256  |    struct {
                            11130 ; 257  |        int N_PORTS         :4;
                            11131 ; 258  |        int PPC             :1;
                            11132 ; 259  |        int                 :3;
                            11133 ; 260  |        int N_PCC           :4;
                            11134 ; 261  |        int N_CC            :4;
                            11135 ; 262  |        int PI              :1;
                            11136 ; 263  |        int                 :3;
                            11137 ; 264  |        int N_PTT           :4;
                            11138 ; 265  |        int N_TT            :4;
                            11139 ; 266  |        int                 :20;
                            11140 ; 267  |    } B;
                            11141 ; 268  |    DWORD I;
                            11142 ; 269  |} hcsparams_type;
                            11143 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            11144 ; 271  |
                            11145 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            11146 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            11147 ; 274  |
                            11148 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            11149 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            11150 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            11151 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            11152 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            11153 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            11154 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            11155 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            11156 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            11157 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            11158 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            11159 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            11160 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            11161 ; 288  |
                            11162 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            11163 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            11164 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            11165 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            11166 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            11167 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            11168 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            11169 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            11170 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            11171 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            11172 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            11173 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            11174 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            11175 ; 302  |
                            11176 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            11177 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            11178 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            11179 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            11180 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            11181 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            11182 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            11183 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            11184 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            11185 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            11186 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            11187 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            11188 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            11189 ; 316  |
                            11190 ; 317  |typedef union               
                            11191 ; 318  |{
                            11192 ; 319  |    struct {
                            11193 ; 320  |        int RS              :1;
                            11194 ; 321  |        int RST             :1;
                            11195 ; 322  |        int FS0             :1;
                            11196 ; 323  |        int FS1             :1;
                            11197 ; 324  |        int PSE             :1;
                            11198 ; 325  |        int ASE             :1;
                            11199 ; 326  |        int IAA             :1;
                            11200 ; 327  |        int LR              :1;
                            11201 ; 328  |        int ASP0            :1;
                            11202 ; 329  |        int ASP1            :1;
                            11203 ; 330  |        int                 :1;
                            11204 ; 331  |        int ASPE            :1;
                            11205 ; 332  |        int                 :3;
                            11206 ; 333  |        int FS2             :1;
                            11207 ; 334  |        int ITC             :8;
                            11208 ; 335  |        int                 :24;
                            11209 ; 336  |    } B;
                            11210 ; 337  |    DWORD I;
                            11211 ; 338  |} usbcmd_type;
                            11212 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            11213 ; 340  |
                            11214 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            11215 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            11216 ; 343  |
                            11217 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            11218 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            11219 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            11220 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            11221 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            11222 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            11223 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            11224 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            11225 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            11226 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            11227 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            11228 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            11229 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            11230 ; 357  |
                            11231 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            11232 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            11233 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            11234 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            11235 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            11236 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            11237 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            11238 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            11239 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            11240 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            11241 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            11242 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            11243 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            11244 ; 371  |
                            11245 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            11246 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            11247 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            11248 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            11249 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            11250 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            11251 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            11252 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            11253 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            11254 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            11255 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                            11256 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            11257 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            11258 ; 385  |
                            11259 ; 386  |
                            11260 ; 387  |typedef union               
                            11261 ; 388  |{
                            11262 ; 389  |    struct {
                            11263 ; 390  |        int UI              :1;
                            11264 ; 391  |        int UEI             :1;
                            11265 ; 392  |        int PCI             :1;
                            11266 ; 393  |        int FRI             :1;
                            11267 ; 394  |        int SEI             :1;
                            11268 ; 395  |        int AAI             :1;
                            11269 ; 396  |        int URI             :1;
                            11270 ; 397  |        int STI             :1;
                            11271 ; 398  |        int SLI             :1;
                            11272 ; 399  |        int                 :3;
                            11273 ; 400  |        int HCH             :1;
                            11274 ; 401  |        int RCL             :1;
                            11275 ; 402  |        int PS              :1;
                            11276 ; 403  |        int AS              :1;
                            11277 ; 404  |        int                 :24;
                            11278 ; 405  |    } B;
                            11279 ; 406  |    DWORD I;
                            11280 ; 407  |} usbsts_type;
                            11281 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            11282 ; 409  |
                            11283 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            11284 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            11285 ; 412  |
                            11286 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            11287 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            11288 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            11289 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            11290 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            11291 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            11292 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            11293 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            11294 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            11295 ; 422  |
                            11296 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            11297 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            11298 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            11299 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            11300 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            11301 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            11302 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            11303 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            11304 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            11305 ; 432  |
                            11306 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            11307 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            11308 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            11309 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            11310 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            11311 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            11312 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            11313 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            11314 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            11315 ; 442  |
                            11316 ; 443  |
                            11317 ; 444  |typedef union               
                            11318 ; 445  |{
                            11319 ; 446  |    struct {
                            11320 ; 447  |        int UE              :1;
                            11321 ; 448  |        int UEE             :1;
                            11322 ; 449  |        int PCE             :1;
                            11323 ; 450  |        int FRE             :1;
                            11324 ; 451  |        int SEE             :1;
                            11325 ; 452  |        int AAE             :1;
                            11326 ; 453  |        int URE             :1;
                            11327 ; 454  |        int STE             :1;
                            11328 ; 455  |        int SLE             :1;
                            11329 ; 456  |        int                 :39;
                            11330 ; 457  |    } B;
                            11331 ; 458  |    DWORD I;
                            11332 ; 459  |} usbintr_type;
                            11333 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            11334 ; 461  |
                            11335 ; 462  |
                            11336 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            11337 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            11338 ; 465  |
                            11339 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            11340 ; 467  |
                            11341 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            11342 ; 469  |
                            11343 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            11344 ; 471  |
                            11345 ; 472  |typedef union               
                            11346 ; 473  |{
                            11347 ; 474  |    struct {
                            11348 ; 475  |        int                 :25;
                            11349 ; 476  |        int ADD             :7;
                            11350 ; 477  |        int                 :16;
                            11351 ; 478  |    } B;
                            11352 ; 479  |    DWORD I;
                            11353 ; 480  |} devaddr_type;
                            11354 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            11355 ; 482  |
                            11356 ; 483  |
                            11357 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            11358 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            11359 ; 486  |
                            11360 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            11361 ; 488  |
                            11362 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            11363 ; 490  |
                            11364 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            11365 ; 492  |
                            11366 ; 493  |typedef union               
                            11367 ; 494  |{
                            11368 ; 495  |    struct {
                            11369 ; 496  |        int                 :10;
                            11370 ; 497  |        int ADD             :22;
                            11371 ; 498  |        int                 :16;
                            11372 ; 499  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11373 ; 500  |    DWORD I;
                            11374 ; 501  |} endptlistaddr_type;
                            11375 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158))    
                            11376 ; 503  |
                            11377 ; 504  |
                            11378 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            11379 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            11380 ; 507  |
                            11381 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            11382 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            11383 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            11384 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            11385 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            11386 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            11387 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            11388 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            11389 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            11390 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            11391 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            11392 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            11393 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            11394 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            11395 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            11396 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            11397 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            11398 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            11399 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            11400 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            11401 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            11402 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            11403 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            11404 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            11405 ; 532  |
                            11406 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            11407 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            11408 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            11409 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            11410 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            11411 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            11412 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            11413 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            11414 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            11415 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            11416 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            11417 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            11418 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            11419 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            11420 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            11421 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            11422 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            11423 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            11424 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            11425 ; 552  |
                            11426 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            11427 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            11428 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            11429 ; 556  |
                            11430 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            11431 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            11432 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            11433 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            11434 ; 561  |
                            11435 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            11436 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            11437 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            11438 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            11439 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            11440 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            11441 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            11442 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            11443 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            11444 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            11445 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            11446 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            11447 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            11448 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            11449 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            11450 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            11451 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            11452 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            11453 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            11454 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            11455 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            11456 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            11457 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            11458 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            11459 ; 586  |
                            11460 ; 587  |typedef union               
                            11461 ; 588  |{
                            11462 ; 589  |    struct {
                            11463 ; 590  |        int CCS             :1;
                            11464 ; 591  |        int CSC             :1;
                            11465 ; 592  |        int PE              :1;
                            11466 ; 593  |        int PEC             :1;
                            11467 ; 594  |        int OCA             :1;
                            11468 ; 595  |        int OCC             :1;
                            11469 ; 596  |        int FPR             :1;
                            11470 ; 597  |        int SUSP            :1;
                            11471 ; 598  |        int PR              :1;
                            11472 ; 599  |        int HSP             :1;
                            11473 ; 600  |        int LS              :2;
                            11474 ; 601  |        int PP              :1;
                            11475 ; 602  |        int PO              :1;
                            11476 ; 603  |        int PIC             :2;
                            11477 ; 604  |        int PTC             :4;
                            11478 ; 605  |        int WKCN            :1;
                            11479 ; 606  |        int WKDS            :1;
                            11480 ; 607  |        int WKOC            :1;
                            11481 ; 608  |        int PHCD            :1;
                            11482 ; 609  |        int PFSC            :1;
                            11483 ; 610  |        int                 :1;
                            11484 ; 611  |        int PSPD            :2;
                            11485 ; 612  |        int                 :1;
                            11486 ; 613  |        int PTW             :1;
                            11487 ; 614  |        int STS             :1;
                            11488 ; 615  |        int PTS             :1;
                            11489 ; 616  |        int                 :16;
                            11490 ; 617  |    } B;
                            11491 ; 618  |    DWORD I;
                            11492 ; 619  |} portsc1_type;
                            11493 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            11494 ; 621  |
                            11495 ; 622  |
                            11496 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            11497 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            11498 ; 625  |
                            11499 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            11500 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            11501 ; 628  |
                            11502 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            11503 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            11504 ; 631  |
                            11505 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            11506 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                            11507 ; 634  |
                            11508 ; 635  |typedef union               
                            11509 ; 636  |{
                            11510 ; 637  |    struct {
                            11511 ; 638  |        int CM              :2;
                            11512 ; 639  |        int ES              :1;
                            11513 ; 640  |        int                 :46;
                            11514 ; 641  |    } B;
                            11515 ; 642  |    DWORD I;
                            11516 ; 643  |} usbmode_type;
                            11517 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            11518 ; 645  |
                            11519 ; 646  |
                            11520 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            11521 ; 648  |//  The following endpoint equates are common for the following registers
                            11522 ; 649  |
                            11523 ; 650  |#define ENDPOINT0_BITPOS (0)
                            11524 ; 651  |#define ENDPOINT1_BITPOS (1)
                            11525 ; 652  |#define ENDPOINT2_BITPOS (2)
                            11526 ; 653  |#define ENDPOINT3_BITPOS (3)
                            11527 ; 654  |#define ENDPOINT4_BITPOS (4)
                            11528 ; 655  |#define ENDPOINT5_BITPOS (5)
                            11529 ; 656  |#define ENDPOINT6_BITPOS (6)
                            11530 ; 657  |#define ENDPOINT7_BITPOS (7)
                            11531 ; 658  |#define ENDPOINT8_BITPOS (8)
                            11532 ; 659  |#define ENDPOINT9_BITPOS (9)
                            11533 ; 660  |#define ENDPOINT10_BITPOS (10)
                            11534 ; 661  |#define ENDPOINT11_BITPOS (11)
                            11535 ; 662  |#define ENDPOINT12_BITPOS (12)
                            11536 ; 663  |#define ENDPOINT13_BITPOS (13)
                            11537 ; 664  |#define ENDPOINT14_BITPOS (14)
                            11538 ; 665  |#define ENDPOINT15_BITPOS (15)
                            11539 ; 666  |
                            11540 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            11541 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            11542 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            11543 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            11544 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            11545 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            11546 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            11547 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            11548 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            11549 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            11550 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            11551 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            11552 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            11553 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            11554 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            11555 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            11556 ; 683  |
                            11557 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            11558 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            11559 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            11560 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            11561 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            11562 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            11563 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            11564 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            11565 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            11566 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            11567 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            11568 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            11569 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            11570 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            11571 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            11572 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            11573 ; 700  |
                            11574 ; 701  |typedef union               
                            11575 ; 702  |{
                            11576 ; 703  |    struct {
                            11577 ; 704  |        int EP0              :1;
                            11578 ; 705  |        int EP1              :1;
                            11579 ; 706  |        int EP2              :1;
                            11580 ; 707  |        int EP3              :1;
                            11581 ; 708  |        int EP4              :1;
                            11582 ; 709  |        int EP5              :1;
                            11583 ; 710  |        int EP6              :1;
                            11584 ; 711  |        int EP7              :1;
                            11585 ; 712  |        int EP8              :1;
                            11586 ; 713  |        int EP9              :1;
                            11587 ; 714  |        int EP10             :1;
                            11588 ; 715  |        int EP11             :1;
                            11589 ; 716  |        int EP12             :1;
                            11590 ; 717  |        int EP13             :1;
                            11591 ; 718  |        int EP14             :1;
                            11592 ; 719  |        int EP15             :1;
                            11593 ; 720  |        int                  :32;
                            11594 ; 721  |    } B;
                            11595 ; 722  |    DWORD I;
                            11596 ; 723  |} endpsetupstat_type;
                            11597 ; 724  |
                            11598 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac))    
                            11599 ; 726  |
                            11600 ; 727  |typedef union               
                            11601 ; 728  |{
                            11602 ; 729  |    struct {
                            11603 ; 730  |        int EP0              :1;
                            11604 ; 731  |        int EP1              :1;
                            11605 ; 732  |        int EP2              :1;
                            11606 ; 733  |        int EP3              :1;
                            11607 ; 734  |        int EP4              :1;
                            11608 ; 735  |        int EP5              :1;
                            11609 ; 736  |        int EP6              :1;
                            11610 ; 737  |        int EP7              :1;
                            11611 ; 738  |        int EP8              :1;
                            11612 ; 739  |        int EP9              :1;
                            11613 ; 740  |        int EP10             :1;
                            11614 ; 741  |        int EP11             :1;
                            11615 ; 742  |        int EP12             :1;
                            11616 ; 743  |        int EP13             :1;
                            11617 ; 744  |        int EP14             :1;
                            11618 ; 745  |        int EP15             :1;
                            11619 ; 746  |        int                  :8;
                            11620 ; 747  |    } B;
                            11621 ; 748  |    WORD I;
                            11622 ; 749  |} endpt_type;
                            11623 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11661 
                            11662 ; 750  |
                            11663 ; 751  |typedef union
                            11664 ; 752  |{
                            11665 ; 753  |   struct {
                            11666 ; 754  |       endpt_type  RX;
                            11667 ; 755  |       endpt_type  TX;
                            11668 ; 756  |   } W;
                            11669 ; 757  |   DWORD DW;
                            11670 ; 758  |} endptrxtx_type;
                            11671 ; 759  |
                            11672 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))    
                            11673 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))    
                            11674 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))    
                            11675 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))    
                            11676 ; 764  |
                            11677 ; 765  |
                            11678 ; 766  |
                            11679 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            11680 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            11681 ; 769  |
                            11682 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            11683 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            11684 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            11685 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            11686 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            11687 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            11688 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            11689 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            11690 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            11691 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            11692 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            11693 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            11694 ; 782  |
                            11695 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            11696 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            11697 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            11698 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            11699 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            11700 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            11701 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            11702 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            11703 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            11704 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            11705 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            11706 ; 794  |
                            11707 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            11708 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11709 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            11710 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11711 ; 799  |
                            11712 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            11713 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            11714 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            11715 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            11716 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            11717 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            11718 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            11719 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            11720 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            11721 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            11722 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            11723 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            11724 ; 812  |
                            11725 ; 813  |
                            11726 ; 814  |typedef union               
                            11727 ; 815  |{
                            11728 ; 816  |    struct {
                            11729 ; 817  |        int RXS             :1;
                            11730 ; 818  |        int RXD             :1;
                            11731 ; 819  |        int RXT             :2;
                            11732 ; 820  |        int                 :1;
                            11733 ; 821  |        int RXI             :1;
                            11734 ; 822  |        int RXR             :1;
                            11735 ; 823  |        int RXE             :1;
                            11736 ; 824  |        int                 :8;
                            11737 ; 825  |        int TXS             :1;
                            11738 ; 826  |        int TXD             :1;
                            11739 ; 827  |        int TXT             :2;
                            11740 ; 828  |        int                 :1;
                            11741 ; 829  |        int TXI             :1;
                            11742 ; 830  |        int TXR             :1;
                            11743 ; 831  |        int TXE             :1;
                            11744 ; 832  |        int                 :24;
                            11745 ; 833  |    } B;
                            11746 ; 834  |    DWORD I;
                            11747 ; 835  |} endptctrl_type;
                            11748 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)))    
                            11749 ; 837  |
                            11750 ; 838  |#endif
                            11751 ; 839  |
                            11752 ; 840  |
                            11753 
                            11755 
                            11756 ; 37   |#include "regsusb20phy.h"
                            11757 
                            11759 
                            11760 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11761 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            11762 ; 3    |//;  File        : regsusbphy.inc
                            11763 ; 4    |//;  Description : USB20 PHY Register definition
                            11764 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            11765 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11766 ; 7    |
                            11767 ; 8    |// The following naming conventions are followed in this file.
                            11768 ; 9    |// All registers are named using the format...
                            11769 ; 10   |//     HW_<module>_<regname>
                            11770 ; 11   |// where <module> is the module name which can be any of the following...
                            11771 ; 12   |//     USB20
                            11772 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            11773 ; 14   |// module name includes a number starting from 0 for the first instance of
                            11774 ; 15   |// that module)
                            11775 ; 16   |// <regname> is the specific register within that module
                            11776 ; 17   |// We also define the following...
                            11777 ; 18   |//     HW_<module>_<regname>_BITPOS
                            11778 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11779 ; 20   |//     HW_<module>_<regname>_SETMASK
                            11780 ; 21   |// which does something else, and
                            11781 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            11782 ; 23   |// which does something else.
                            11783 ; 24   |// Other rules
                            11784 ; 25   |//     All caps
                            11785 ; 26   |//     Numeric identifiers start at 0
                            11786 ; 27   |
                            11787 ; 28   |#if !(defined(regsusbphyinc))
                            11788 ; 29   |#define regsusbphyinc 1
                            11789 ; 30   |
                            11790 ; 31   |#include "types.h"
                            11791 
                            11793 
                            11794 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11795 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11796 ; 3    |//
                            11797 ; 4    |// Filename: types.h
                            11798 ; 5    |// Description: Standard data types
                            11799 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11800 ; 7    |
                            11801 ; 8    |#ifndef _TYPES_H
                            11802 ; 9    |#define _TYPES_H
                            11803 ; 10   |
                            11804 ; 11   |// TODO:  move this outta here!
                            11805 ; 12   |#if !defined(NOERROR)
                            11806 ; 13   |#define NOERROR 0
                            11807 ; 14   |#define SUCCESS 0
                            11808 ; 15   |#endif 
                            11809 ; 16   |#if !defined(SUCCESS)
                            11810 ; 17   |#define SUCCESS  0
                            11811 ; 18   |#endif
                            11812 ; 19   |#if !defined(ERROR)
                            11813 ; 20   |#define ERROR   -1
                            11814 ; 21   |#endif
                            11815 ; 22   |#if !defined(FALSE)
                            11816 ; 23   |#define FALSE 0
                            11817 ; 24   |#endif
                            11818 ; 25   |#if !defined(TRUE)
                            11819 ; 26   |#define TRUE  1
                            11820 ; 27   |#endif
                            11821 ; 28   |
                            11822 ; 29   |#if !defined(NULL)
                            11823 ; 30   |#define NULL 0
                            11824 ; 31   |#endif
                            11825 ; 32   |
                            11826 ; 33   |#define MAX_INT     0x7FFFFF
                            11827 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11828 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11829 ; 36   |#define MAX_ULONG   (-1) 
                            11830 ; 37   |
                            11831 ; 38   |#define WORD_SIZE   24              // word size in bits
                            11832 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11833 ; 40   |
                            11834 ; 41   |
                            11835 ; 42   |#define BYTE    unsigned char       // btVarName
                            11836 ; 43   |#define CHAR    signed char         // cVarName
                            11837 ; 44   |#define USHORT  unsigned short      // usVarName
                            11838 ; 45   |#define SHORT   unsigned short      // sVarName
                            11839 ; 46   |#define WORD    unsigned int        // wVarName
                            11840 ; 47   |#define INT     signed int          // iVarName
                            11841 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11842 ; 49   |#define LONG    signed long         // lVarName
                            11843 ; 50   |#define BOOL    unsigned int        // bVarName
                            11844 ; 51   |#define FRACT   _fract              // frVarName
                            11845 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11846 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11847 ; 54   |#define FLOAT   float               // fVarName
                            11848 ; 55   |#define DBL     double              // dVarName
                            11849 ; 56   |#define ENUM    enum                // eVarName
                            11850 ; 57   |#define CMX     _complex            // cmxVarName
                            11851 ; 58   |typedef WORD UCS3;                   // 
                            11852 ; 59   |
                            11853 ; 60   |#define UINT16  unsigned short
                            11854 ; 61   |#define UINT8   unsigned char   
                            11855 ; 62   |#define UINT32  unsigned long
                            11856 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            11857 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            11858 ; 65   |#define WCHAR   UINT16
                            11859 ; 66   |
                            11860 ; 67   |//UINT128 is 16 bytes or 6 words
                            11861 ; 68   |typedef struct UINT128_3500 {   
                            11862 ; 69   |    int val[6];     
                            11863 ; 70   |} UINT128_3500;
                            11864 ; 71   |
                            11865 ; 72   |#define UINT128   UINT128_3500
                            11866 ; 73   |
                            11867 ; 74   |// Little endian word packed byte strings:   
                            11868 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11869 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11870 ; 77   |// Little endian word packed byte strings:   
                            11871 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11872 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11873 ; 80   |
                            11874 ; 81   |// Declare Memory Spaces To Use When Coding
                            11875 ; 82   |// A. Sector Buffers
                            11876 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11877 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11878 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11879 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11880 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11881 ; 88   |// B. Media DDI Memory
                            11882 ; 89   |#define MEDIA_DDI_MEM _Y
                            11883 ; 90   |
                            11884 ; 91   |
                            11885 ; 92   |
                            11886 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11887 ; 94   |// Examples of circular pointers:
                            11888 ; 95   |//    INT CIRC cpiVarName
                            11889 ; 96   |//    DWORD CIRC cpdwVarName
                            11890 ; 97   |
                            11891 ; 98   |#define RETCODE INT                 // rcVarName
                            11892 ; 99   |
                            11893 ; 100  |// generic bitfield structure
                            11894 ; 101  |struct Bitfield {
                            11895 ; 102  |    unsigned int B0  :1;
                            11896 ; 103  |    unsigned int B1  :1;
                            11897 ; 104  |    unsigned int B2  :1;
                            11898 ; 105  |    unsigned int B3  :1;
                            11899 ; 106  |    unsigned int B4  :1;
                            11900 ; 107  |    unsigned int B5  :1;
                            11901 ; 108  |    unsigned int B6  :1;
                            11902 ; 109  |    unsigned int B7  :1;
                            11903 ; 110  |    unsigned int B8  :1;
                            11904 ; 111  |    unsigned int B9  :1;
                            11905 ; 112  |    unsigned int B10 :1;
                            11906 ; 113  |    unsigned int B11 :1;
                            11907 ; 114  |    unsigned int B12 :1;
                            11908 ; 115  |    unsigned int B13 :1;
                            11909 ; 116  |    unsigned int B14 :1;
                            11910 ; 117  |    unsigned int B15 :1;
                            11911 ; 118  |    unsigned int B16 :1;
                            11912 ; 119  |    unsigned int B17 :1;
                            11913 ; 120  |    unsigned int B18 :1;
                            11914 ; 121  |    unsigned int B19 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11915 ; 122  |    unsigned int B20 :1;
                            11916 ; 123  |    unsigned int B21 :1;
                            11917 ; 124  |    unsigned int B22 :1;
                            11918 ; 125  |    unsigned int B23 :1;
                            11919 ; 126  |};
                            11920 ; 127  |
                            11921 ; 128  |union BitInt {
                            11922 ; 129  |        struct Bitfield B;
                            11923 ; 130  |        int        I;
                            11924 ; 131  |};
                            11925 ; 132  |
                            11926 ; 133  |#define MAX_MSG_LENGTH 10
                            11927 ; 134  |struct CMessage
                            11928 ; 135  |{
                            11929 ; 136  |        unsigned int m_uLength;
                            11930 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11931 ; 138  |};
                            11932 ; 139  |
                            11933 ; 140  |typedef struct {
                            11934 ; 141  |    WORD m_wLength;
                            11935 ; 142  |    WORD m_wMessage;
                            11936 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11937 ; 144  |} Message;
                            11938 ; 145  |
                            11939 ; 146  |struct MessageQueueDescriptor
                            11940 ; 147  |{
                            11941 ; 148  |        int *m_pBase;
                            11942 ; 149  |        int m_iModulo;
                            11943 ; 150  |        int m_iSize;
                            11944 ; 151  |        int *m_pHead;
                            11945 ; 152  |        int *m_pTail;
                            11946 ; 153  |};
                            11947 ; 154  |
                            11948 ; 155  |struct ModuleEntry
                            11949 ; 156  |{
                            11950 ; 157  |    int m_iSignaledEventMask;
                            11951 ; 158  |    int m_iWaitEventMask;
                            11952 ; 159  |    int m_iResourceOfCode;
                            11953 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11954 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            11955 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11956 ; 163  |    int m_uTimeOutHigh;
                            11957 ; 164  |    int m_uTimeOutLow;
                            11958 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11959 ; 166  |};
                            11960 ; 167  |
                            11961 ; 168  |union WaitMask{
                            11962 ; 169  |    struct B{
                            11963 ; 170  |        unsigned int m_bNone     :1;
                            11964 ; 171  |        unsigned int m_bMessage  :1;
                            11965 ; 172  |        unsigned int m_bTimer    :1;
                            11966 ; 173  |        unsigned int m_bButton   :1;
                            11967 ; 174  |    } B;
                            11968 ; 175  |    int I;
                            11969 ; 176  |} ;
                            11970 ; 177  |
                            11971 ; 178  |
                            11972 ; 179  |struct Button {
                            11973 ; 180  |        WORD wButtonEvent;
                            11974 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11975 ; 182  |};
                            11976 ; 183  |
                            11977 ; 184  |struct Message {
                            11978 ; 185  |        WORD wMsgLength;
                            11979 ; 186  |        WORD wMsgCommand;
                            11980 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11981 ; 188  |};
                            11982 ; 189  |
                            11983 ; 190  |union EventTypes {
                            11984 ; 191  |        struct CMessage msg;
                            11985 ; 192  |        struct Button Button ;
                            11986 ; 193  |        struct Message Message;
                            11987 ; 194  |};
                            11988 ; 195  |
                            11989 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11990 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11991 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11992 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11993 ; 200  |
                            11994 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11995 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11996 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11997 ; 204  |
                            11998 ; 205  |#if DEBUG
                            11999 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12000 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12001 ; 208  |#else 
                            12002 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            12003 ; 210  |#define DebugBuildAssert(x)    
                            12004 ; 211  |#endif
                            12005 ; 212  |
                            12006 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12007 ; 214  |//  #pragma asm
                            12008 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12009 ; 216  |//  #pragma endasm
                            12010 ; 217  |
                            12011 ; 218  |
                            12012 ; 219  |#ifdef COLOR_262K
                            12013 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            12014 ; 221  |#elif defined(COLOR_65K)
                            12015 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            12016 ; 223  |#else
                            12017 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            12018 ; 225  |#endif
                            12019 ; 226  |    
                            12020 ; 227  |#endif // #ifndef _TYPES_H
                            12021 
                            12023 
                            12024 ; 32   |
                            12025 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12026 ; 34   |//   USB2.0 PHY STMP Registers 
                            12027 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12028 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            12029 ; 37   |
                            12030 ; 38   |
                            12031 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            12032 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            12033 ; 41   |
                            12034 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            12035 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            12036 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            12037 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            12038 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            12039 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            12040 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            12041 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            12042 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            12043 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            12044 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            12045 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            12046 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            12047 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            12048 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            12049 ; 57   |
                            12050 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            12051 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            12052 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            12053 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            12054 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            12055 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            12056 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            12057 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            12058 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            12059 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            12060 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            12061 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            12062 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            12063 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            12064 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            12065 ; 73   |
                            12066 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            12067 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            12068 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            12069 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            12070 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            12071 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            12072 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            12073 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            12074 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            12075 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            12076 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            12077 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            12078 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            12079 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            12080 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            12081 ; 89   |
                            12082 ; 90   |typedef union               
                            12083 ; 91   |{
                            12084 ; 92   |    struct {
                            12085 ; 93   |        int RSVD0          :5;
                            12086 ; 94   |        int TXDISCON1500   :1;
                            12087 ; 95   |        int PLLVCOPWD      :1;
                            12088 ; 96   |        int PLLVCPPWD      :1;
                            12089 ; 97   |        int RSVD1          :2;
                            12090 ; 98   |        int TXPWDFS        :1;
                            12091 ; 99   |        int TXPWDIBIAS     :1;
                            12092 ; 100  |        int TXPWDV2I       :1;
                            12093 ; 101  |        int TXPWDVBG       :1;
                            12094 ; 102  |        int TXPWDCOMP      :1;
                            12095 ; 103  |        int RSVD2          :1;
                            12096 ; 104  |        int RXPWDDISCONDET :1;
                            12097 ; 105  |        int RXPWDENV       :1;
                            12098 ; 106  |        int RXPWD1PT1      :1;
                            12099 ; 107  |        int RXPWDDIFF      :1;
                            12100 ; 108  |        int RXPWDRX        :1;
                            12101 ; 109  |        int RSVD3          :1;
                            12102 ; 110  |        int PWDIBIAS       :1;
                            12103 ; 111  |        int REGRESET       :1;
                            12104 ; 112  |    } B;
                            12105 ; 113  |    int I;
                            12106 ; 114  |} usbphypwd_type;
                            12107 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB PHY Powerdown Register */
                            12108 ; 116  |
                            12109 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            12110 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            12111 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            12112 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            12113 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            12114 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            12115 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            12116 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            12117 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            12118 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            12119 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            12120 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            12121 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            12122 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            12123 ; 131  |
                            12124 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            12125 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            12126 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            12127 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            12128 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            12129 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            12130 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            12131 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            12132 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            12133 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            12134 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            12135 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            12136 ; 144  |
                            12137 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXCAL1500_BITPOS)
                            12138 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXENCAL1500_BITPOS)
                            12139 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXHSXCVR_BITPOS)
                            12140 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHYTX_TXCALIBRATE_BITPOS)
                            12141 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DN_BITPOS)
                            12142 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DN_BITPOS)
                            12143 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXHSTERM_BITPOS)
                            12144 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_BITPOS)
                            12145 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DP_BITPOS)
                            12146 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DP_BITPOS)
                            12147 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSHIZ_BITPOS)
                            12148 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_TXCOMPOUT_BITPOS)
                            12149 ; 157  |
                            12150 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            12151 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            12152 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            12153 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            12154 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            12155 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            12156 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            12157 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            12158 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            12159 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            12160 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            12161 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            12162 ; 170  |
                            12163 ; 171  |typedef union               
                            12164 ; 172  |{
                            12165 ; 173  |    struct {
                            12166 ; 174  |        int TXCAL1500          :4;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12167 ; 175  |        int RSVD0              :1;
                            12168 ; 176  |        int TXENCAL1500        :1;
                            12169 ; 177  |        int TXHSXCVR           :1;
                            12170 ; 178  |        int TXCALIBRATE        :1;
                            12171 ; 179  |        int TXCAL45DN          :4;
                            12172 ; 180  |        int RSVD1              :1;
                            12173 ; 181  |        int TXENCAL45DN        :1;
                            12174 ; 182  |        int TXHSTERM           :1;
                            12175 ; 183  |        int TXSKEW             :1;
                            12176 ; 184  |        int TXCAL45DP          :4;
                            12177 ; 185  |        int RSVD2              :1;
                            12178 ; 186  |        int TXENCAL45DP        :1;
                            12179 ; 187  |        int TXFSHIZ            :1;
                            12180 ; 188  |        int TXCOMPOUT          :1;
                            12181 ; 189  |    } B;
                            12182 ; 190  |    int I;
                            12183 ; 191  |} usbphytx_type;
                            12184 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            12185 ; 193  |
                            12186 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            12187 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            12188 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            12189 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            12190 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            12191 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            12192 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            12193 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            12194 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            12195 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            12196 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            12197 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            12198 ; 206  |
                            12199 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            12200 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            12201 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            12202 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                            12203 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            12204 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            12205 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            12206 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            12207 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            12208 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            12209 ; 217  |
                            12210 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPLL_PLLV2ISEL_BITPOS)
                            12211 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHYPLL_PLLCPDBLIP_BITPOS)
                            12212 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK2_BITPOS)
                            12213 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK24_BITPOS)
                            12214 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCPNSEL_BITPOS)
                            12215 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS)
                            12216 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPLL_PLLPFDRST_BITPOS)
                            12217 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            12218 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOKSTART_BITPOS)
                            12219 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            12220 ; 228  |
                            12221 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            12222 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            12223 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            12224 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            12225 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            12226 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            12227 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            12228 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            12229 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            12230 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            12231 ; 239  |
                            12232 ; 240  |typedef union               
                            12233 ; 241  |{
                            12234 ; 242  |    struct {
                            12235 ; 243  |        int PLLV2ISEL        :4;
                            12236 ; 244  |        int RSVD0            :1;
                            12237 ; 245  |        int PLLCPDBLIP       :1;
                            12238 ; 246  |        int PLLVCOCLK2       :1;
                            12239 ; 247  |        int PLLVCOCLK24      :1;
                            12240 ; 248  |        int PLLCPNSEL        :4;
                            12241 ; 249  |        int PLLCLKDIVSEL     :4;
                            12242 ; 250  |        int RSVD1            :4;
                            12243 ; 251  |        int PLLPFDRST        :1;
                            12244 ; 252  |        int PLLCPSHORTLFR    :1;
                            12245 ; 253  |        int PLLVCOKSTART     :1;
                            12246 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            12247 ; 255  |    } B;
                            12248 ; 256  |    int I;
                            12249 ; 257  |} usbphypll_type;
                            12250 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                            12251 ; 259  |
                            12252 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            12253 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            12254 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                            12255 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            12256 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            12257 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            12258 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            12259 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            12260 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            12261 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            12262 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            12263 ; 271  |
                            12264 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            12265 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            12266 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            12267 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            12268 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            12269 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            12270 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            12271 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            12272 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            12273 ; 281  |
                            12274 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            12275 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_BITPOS)
                            12276 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_BITPOS)
                            12277 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLLKTIMECTL_BITPOS)
                            12278 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKDIVCTL_BITPOS)
                            12279 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives actual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            12280 ; 288  |//              480Mhz/7 =68.57Mhz
                            12281 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            12282 ; 290  |
                            12283 ; 291  |//              480Mhz/8 ~60Mhz
                            12284 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            12285 ; 293  |
                            12286 ; 294  |//              480Mhz/9 =53.3Mhz
                            12287 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            12288 ; 296  |
                            12289 ; 297  |//              480Mhz/10 =48Mhz
                            12290 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            12291 ; 299  |
                            12292 ; 300  |
                            12293 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOSTMODETEST_BITPOS)
                            12294 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FSCKSOURCESEL_BITPOS)
                            12295 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGRXDBYPASS_BITPOS)
                            12296 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_BITPOS)
                            12297 ; 305  |
                            12298 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            12299 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            12300 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            12301 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            12302 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            12303 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                            12304 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            12305 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            12306 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            12307 ; 315  |
                            12308 ; 316  |typedef union               
                            12309 ; 317  |{
                            12310 ; 318  |    struct {
                            12311 ; 319  |     int ENVADJ               :4;
                            12312 ; 320  |     int DISCONADJ            :4;
                            12313 ; 321  |     int DEBUGMODE            :4;
                            12314 ; 322  |     int PLLLKTIMECTL         :4;
                            12315 ; 323  |     int PLLCKDIVCTL          :4;
                            12316 ; 324  |     int HOSTMODETEST         :1;
                            12317 ; 325  |     int FSCKSOURCESEL        :1;
                            12318 ; 326  |     int REGRXDBYPASS         :1;
                            12319 ; 327  |     int PLLLOCKED            :1;
                            12320 ; 328  |    } B;
                            12321 ; 329  |    int I;
                            12322 ; 330  |} usbphyrx_type;
                            12323 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            12324 ; 332  |
                            12325 ; 333  |#endif
                            12326 ; 334  |
                            12327 
                            12329 
                            12330 ; 38   |
                            12331 ; 39   |
                            12332 ; 40   |#endif // if (!@def(hwequ))
                            12333 ; 41   |
                            12334 
                            12336 
                            12337 ; 8    |#include "messages.h"
                            12338 
                            12340 
                            12341 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            12342 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                            12343 ; 3    |// Message defs
                            12344 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                            12345 ; 5    |
                            12346 ; 6    |#if (!defined(MSGEQU_INC))
                            12347 ; 7    |#define MSGEQU_INC 1
                            12348 ; 8    |
                            12349 ; 9    |
                            12350 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                            12351 ; 11   |
                            12352 ; 12   |
                            12353 ; 13   |#define MSG_TYPE_DECODER 0x000000
                            12354 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                            12355 ; 15   |#define MSG_TYPE_PARSER 0x020000
                            12356 ; 16   |#define MSG_TYPE_LCD 0x030000
                            12357 ; 17   |#define MSG_TYPE_MIXER 0x040000
                            12358 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                            12359 ; 19   |#define MSG_TYPE_MENU 0x060000
                            12360 ; 20   |#define MSG_TYPE_LED 0x070000
                            12361 ; 21   |#define MSG_TYPE_TUNER 0x080000
                            12362 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                            12363 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                            12364 ; 24   |// Equalizer and other effects
                            12365 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                            12366 ; 26   |#if (defined(USE_PLAYLIST3))
                            12367 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                            12368 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                            12369 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                            12370 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                            12371 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                            12372 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                            12373 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                            12374 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                            12375 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                            12376 ; 36   |#if defined(USE_PLAYLIST5)
                            12377 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                            12378 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                            12379 ; 39   |#endif // if @def('USE_PLAYLIST5')
                            12380 ; 40   |
                            12381 ; 41   |// Message Structure Offsets
                            12382 ; 42   |#define MSG_Length 0
                            12383 ; 43   |#define MSG_ID 1
                            12384 ; 44   |#define MSG_Argument1 2
                            12385 ; 45   |#define MSG_Argument2 3
                            12386 ; 46   |#define MSG_Argument3 4
                            12387 ; 47   |#define MSG_Argument4 5
                            12388 ; 48   |#define MSG_Argument5 6
                            12389 ; 49   |#define MSG_Argument6 7
                            12390 ; 50   |
                            12391 ; 51   |
                            12392 ; 52   |
                            12393 ; 53   |// LCD Message IDs
                            12394 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                            12395 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                            12396 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                            12397 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                            12398 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                            12399 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                            12400 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                            12401 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                            12402 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                            12403 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                            12404 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                            12405 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                            12406 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                            12407 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                            12408 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                            12409 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                            12410 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                            12411 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                            12412 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                            12413 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                            12414 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                            12415 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                            12416 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                            12417 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                            12418 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                            12419 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                            12420 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12421 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                            12422 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                            12423 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                            12424 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                            12425 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                            12426 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                            12427 ; 87   |//send a NULL as Param1 to return to root frame buffer
                            12428 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                            12429 ; 89   |//Param1 = left
                            12430 ; 90   |//Param2 = top
                            12431 ; 91   |//Param3 = right
                            12432 ; 92   |//Param4 = bottom
                            12433 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                            12434 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                            12435 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                            12436 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                            12437 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                            12438 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                            12439 ; 99   |
                            12440 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                            12441 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
                            12442 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                            12443 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                            12444 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                            12445 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                            12446 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                            12447 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                            12448 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                            12449 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                            12450 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                            12451 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                            12452 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                            12453 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                            12454 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                            12455 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                            12456 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                            12457 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                            12458 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                            12459 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                            12460 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                            12461 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                            12462 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                            12463 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                            12464 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                            12465 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                            12466 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                            12467 ; 127  |
                            12468 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                            12469 ; 129  |
                            12470 ; 130  |#if defined(CLCD_16BIT)
                            12471 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                            12472 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                            12473 ; 133  |
                            12474 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                            12475 ; 135  |#else 
                            12476 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                            12477 ; 137  |#endif
                            12478 ; 138  |
                            12479 ; 139  |// If you change the LCD message ID's then you must
                            12480 ; 140  |// also change the jump table in lcdapi.asm
                            12481 ; 141  |
                            12482 ; 142  |// Character LCD Message IDs
                            12483 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                            12484 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                            12485 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                            12486 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                            12487 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                            12488 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                            12489 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                            12490 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                            12491 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                            12492 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                            12493 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                            12494 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                            12495 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                            12496 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                            12497 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                            12498 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                            12499 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                            12500 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                            12501 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                            12502 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                            12503 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                            12504 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                            12505 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                            12506 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                            12507 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                            12508 ; 168  |// also change the jump table in lcdapi.asm
                            12509 ; 169  |
                            12510 ; 170  |// Decoder Message IDs
                            12511 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                            12512 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                            12513 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                            12514 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                            12515 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                            12516 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                            12517 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                            12518 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                            12519 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                            12520 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                            12521 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                            12522 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                            12523 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                            12524 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                            12525 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                            12526 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                            12527 ; 187  |// If you change the Decoder message ID's, then you must
                            12528 ; 188  |// also change the jump table in decoder_overlay.asm
                            12529 ; 189  |// and in dec_adpcm_overlay.asm.
                            12530 ; 190  |
                            12531 ; 191  |// Encoder Message IDs
                            12532 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                            12533 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                            12534 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                            12535 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                            12536 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                            12537 ; 197  |// If you change the Encoder message ID's, then you must
                            12538 ; 198  |// also change the jump table in all encoder overlay modules.
                            12539 ; 199  |
                            12540 ; 200  |// Parser Message IDs
                            12541 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                            12542 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                            12543 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                            12544 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                            12545 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                            12546 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                            12547 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                            12548 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                            12549 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                            12550 ; 210  |// If you change the Parser message ID's, then you must
                            12551 ; 211  |// also change the jump table in parser.asm
                            12552 ; 212  |
                            12553 ; 213  |// Button Message IDs
                            12554 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                            12555 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                            12556 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                            12557 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                            12558 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                            12559 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                            12560 ; 220  |
                            12561 ; 221  |// Mixer Message IDs
                            12562 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                            12563 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                            12564 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                            12565 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                            12566 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                            12567 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                            12568 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                            12569 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                            12570 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                            12571 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                            12572 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                            12573 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                            12574 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                            12575 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                            12576 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                            12577 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                            12578 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                            12579 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                            12580 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                            12581 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                            12582 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                            12583 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                            12584 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                            12585 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                            12586 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                            12587 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                            12588 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                            12589 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                            12590 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                            12591 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                            12592 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                            12593 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                            12594 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                            12595 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                            12596 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                            12597 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                            12598 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                            12599 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                            12600 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                            12601 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                            12602 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                            12603 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                            12604 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                            12605 ; 265  |// If you change the mixer message ID's then you must
                            12606 ; 266  |// also change the jump table in mixer.asm
                            12607 ; 267  |#define MIXER_ON 0
                            12608 ; 268  |#define MIXER_OFF 1
                            12609 ; 269  |
                            12610 ; 270  |
                            12611 ; 271  |// System Message IDs
                            12612 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                            12613 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                            12614 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                            12615 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                            12616 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                            12617 ; 277  |// If you change the system message ID's then you must
                            12618 ; 278  |// also change the jump table in systemapi.asm
                            12619 ; 279  |
                            12620 ; 280  |// Menu IDs
                            12621 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                            12622 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                            12623 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                            12624 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                            12625 ; 285  |//sub parameters for this message:
                            12626 ; 286  |#define RECORDER_START 0
                            12627 ; 287  |#define RECORDER_PAUSE 0x2000
                            12628 ; 288  |#define RECORDER_RESUME 0x4000
                            12629 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                            12630 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                            12631 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                            12632 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                            12633 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                            12634 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                            12635 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                            12636 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                            12637 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                            12638 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                            12639 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                            12640 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                            12641 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                            12642 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                            12643 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                            12644 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                            12645 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                            12646 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                            12647 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                            12648 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                            12649 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                            12650 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                            12651 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                            12652 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                            12653 ; 313  |
                            12654 ; 314  |// Note that other versions of this file have different msg equates.
                            12655 ; 315  |// If you change the system message ID's then you must
                            12656 ; 316  |// also change the jump table in all menu *.asm
                            12657 ; 317  |
                            12658 ; 318  |// LED Message IDs
                            12659 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                            12660 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                            12661 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                            12662 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                            12663 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                            12664 ; 324  |// If you change the LeD message ID's then you must
                            12665 ; 325  |// also change the jump table in ledapi.asm
                            12666 ; 326  |
                            12667 ; 327  |#if (!defined(REMOVE_FM))
                            12668 ; 328  |// FM Tuner Message IDs
                            12669 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                            12670 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                            12671 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12672 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                            12673 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                            12674 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                            12675 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                            12676 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                            12677 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                            12678 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                            12679 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                            12680 ; 340  |//one parameter--the sensitivity in uV
                            12681 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                            12682 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                            12683 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                            12684 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                            12685 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                            12686 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                            12687 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                            12688 ; 348  |#endif
                            12689 ; 349  |
                            12690 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                            12691 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                            12692 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                            12693 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                            12694 ; 354  |
                            12695 ; 355  |
                            12696 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                            12697 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                            12698 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                            12699 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                            12700 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                            12701 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                            12702 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                            12703 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                            12704 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                            12705 ; 365  |
                            12706 ; 366  |#if (defined(USE_PLAYLIST3))
                            12707 ; 367  |// Music Library
                            12708 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                            12709 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                            12710 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                            12711 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                            12712 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                            12713 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                            12714 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                            12715 ; 375  |
                            12716 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                            12717 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                            12718 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                            12719 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                            12720 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                            12721 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                            12722 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                            12723 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                            12724 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                            12725 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                            12726 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                            12727 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                            12728 ; 388  |
                            12729 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                            12730 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                            12731 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                            12732 ; 392  |
                            12733 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                            12734 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                            12735 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                            12736 ; 396  |
                            12737 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                            12738 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                            12739 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                            12740 ; 400  |
                            12741 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                            12742 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                            12743 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                            12744 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
                            12745 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                            12746 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                            12747 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                            12748 ; 408  |
                            12749 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                            12750 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                            12751 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                            12752 ; 412  |
                            12753 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                            12754 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                            12755 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                            12756 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                            12757 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                            12758 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                            12759 ; 419  |
                            12760 ; 420  |#if defined(USE_PLAYLIST5)
                            12761 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                            12762 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                            12763 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                            12764 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                            12765 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                            12766 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                            12767 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                            12768 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                            12769 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                            12770 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                            12771 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                            12772 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                            12773 ; 433  |
                            12774 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                            12775 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                            12776 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                            12777 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                            12778 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                            12779 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                            12780 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                            12781 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                            12782 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                            12783 ; 443  |#endif // if @def('USE_PLAYLIST5')
                            12784 ; 444  |// Events
                            12785 ; 445  |// No event
                            12786 ; 446  |#define EVENT_NONE 0x000001   
                            12787 ; 447  |// A message has been posted
                            12788 ; 448  |#define EVENT_MESSAGE 0x000002   
                            12789 ; 449  |// Run if wait time elapsed
                            12790 ; 450  |#define EVENT_TIMER 0x000004   
                            12791 ; 451  |// Run if a button event occured
                            12792 ; 452  |#define EVENT_BUTTON 0x000008   
                            12793 ; 453  |// Run if a background event occured
                            12794 ; 454  |#define EVENT_BACKGROUND 0x000010   
                            12795 ; 455  |// The executive should immediately repeat this module
                            12796 ; 456  |#define EVENT_REPEAT 0x000020   
                            12797 ; 457  |// Run the module's init routine
                            12798 ; 458  |#define EVENT_INIT 0x800000   
                            12799 ; 459  |
                            12800 ; 460  |#define EVENT_NONE_BITPOS 0
                            12801 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                            12802 ; 462  |#define EVENT_TIMER_BITPOS 2
                            12803 ; 463  |#define EVENT_BUTTON_BITPOS 3
                            12804 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                            12805 ; 465  |#define EVENT_REPEAT_BITPOS 5
                            12806 ; 466  |#define EVENT_INIT_BITPOS 23
                            12807 ; 467  |
                            12808 ; 468  |// Parser Message Buffers
                            12809 ; 469  |#define ParserPlayBit 0
                            12810 ; 470  |#define ButtonPressBit 1
                            12811 ; 471  |#define ParserRwndBit 1
                            12812 ; 472  |#define ParserFfwdBit 2
                            12813 ; 473  |
                            12814 ; 474  |//NextSong Message Parameters
                            12815 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                            12816 ; 476  |#define NEXT_SONG 2             
                            12817 ; 477  |// ButtonPressBit1 cleared
                            12818 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                            12819 ; 479  |// ButtonPressBit1 set
                            12820 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                            12821 ; 481  |// NextSong + Ffwd
                            12822 ; 482  |#define NEXT_SONG_FFWD 4          
                            12823 ; 483  |
                            12824 ; 484  |//PrevSong Message Parameters
                            12825 ; 485  |// PrevSong + Stopped
                            12826 ; 486  |#define PREV_SONG 0          
                            12827 ; 487  |// PrevSong + Play
                            12828 ; 488  |#define PREV_SONG_PLAY 1          
                            12829 ; 489  |// PrevSong + Rwnd
                            12830 ; 490  |#define PREV_SONG_RWND 2          
                            12831 ; 491  |
                            12832 ; 492  |
                            12833 ; 493  |
                            12834 ; 494  |
                            12835 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                            12836 ; 496  |
                            12837 ; 497  |
                            12838 
                            12840 
                            12841 ; 9    |#include "exec.h"
                            12842 
                            12844 
                            12845 ; 1    |#ifndef EXEC_H
                            12846 ; 2    |#define EXEC_H
                            12847 ; 3    |
                            12848 ; 4    |
                            12849 ; 5    |void _reentrant SysPostMessage(int iLength,...);
                            12850 ; 6    |int _asmfunc GetMessage(struct MessageQueueDescriptor*,struct CMessage * );
                            12851 ; 7    |long _asmfunc SysGetCurrentTime(void);
                            12852 ; 8    |
                            12853 ; 9    |
                            12854 ; 10   |#endif
                            12855 
                            12857 
                            12858 ; 10   |#include "resource.h"
                            12859 
                            12861 
                            12862 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                            12863 ; 2    |//  Do not edit it directly.
                            12864 ; 3    |//  Created on Sat Jun 28 16:37:44 2008 using resource.inc as input.
                            12865 ; 4    |
                            12866 ; 5    |
                            12867 ; 6    |
                            12868 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                            12869 ; 8    |//  Do not edit it directly.
                            12870 ; 9    |//  Created on Sat Jun 28 16:13:49 2008 using resource.inc as input.
                            12871 ; 10   |
                            12872 ; 11   |
                            12873 ; 12   |
                            12874 ; 13   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12875 ; 14   |//  Do not edit it directly.
                            12876 ; 15   |//  Created on Sat Jun 28 15:55:53 2008 using resource.inc as input.
                            12877 ; 16   |
                            12878 ; 17   |
                            12879 ; 18   |
                            12880 ; 19   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12881 ; 20   |//  Do not edit it directly.
                            12882 ; 21   |//  Created on Thu Jun 26 08:58:05 2008 using resource.inc as input.
                            12883 ; 22   |
                            12884 ; 23   |
                            12885 ; 24   |
                            12886 ; 25   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12887 ; 26   |//  Do not edit it directly.
                            12888 ; 27   |//  Created on Wed Jun 25 17:00:35 2008 using resource.inc as input.
                            12889 ; 28   |
                            12890 ; 29   |
                            12891 ; 30   |
                            12892 ; 31   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12893 ; 32   |//  Do not edit it directly.
                            12894 ; 33   |//  Created on Wed Jun 25 11:42:38 2008 using resource.inc as input.
                            12895 ; 34   |
                            12896 ; 35   |
                            12897 ; 36   |
                            12898 ; 37   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12899 ; 38   |//  Do not edit it directly.
                            12900 ; 39   |//  Created on Wed Jun 25 11:17:50 2008 using resource.inc as input.
                            12901 ; 40   |
                            12902 ; 41   |
                            12903 ; 42   |
                            12904 ; 43   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12905 ; 44   |//  Do not edit it directly.
                            12906 ; 45   |//  Created on Wed Jun 25 11:17:05 2008 using resource.inc as input.
                            12907 ; 46   |
                            12908 ; 47   |
                            12909 ; 48   |
                            12910 ; 49   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12911 ; 50   |//  Do not edit it directly.
                            12912 ; 51   |//  Created on Tue Jun 24 15:21:11 2008 using resource.inc as input.
                            12913 ; 52   |
                            12914 ; 53   |
                            12915 ; 54   |
                            12916 ; 55   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12917 ; 56   |//  Do not edit it directly.
                            12918 ; 57   |//  Created on Sun Jun 22 02:54:01 2008 using resource.inc as input.
                            12919 ; 58   |
                            12920 ; 59   |
                            12921 ; 60   |
                            12922 ; 61   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12923 ; 62   |//  Do not edit it directly.
                            12924 ; 63   |//  Created on Sun Jun 22 00:47:39 2008 using resource.inc as input.
                            12925 ; 64   |
                            12926 ; 65   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12927 ; 66   |
                            12928 ; 67   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12929 ; 68   |//  Do not edit it directly.
                            12930 ; 69   |//  Created on Fri Jun 20 16:15:57 2008 using resource.inc as input.
                            12931 ; 70   |
                            12932 ; 71   |
                            12933 ; 72   |
                            12934 ; 73   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12935 ; 74   |//  Do not edit it directly.
                            12936 ; 75   |//  Created on Thu Jun 19 09:47:30 2008 using resource.inc as input.
                            12937 ; 76   |
                            12938 ; 77   |
                            12939 ; 78   |
                            12940 ; 79   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12941 ; 80   |//  Do not edit it directly.
                            12942 ; 81   |//  Created on Wed Jun 18 23:11:16 2008 using resource.inc as input.
                            12943 ; 82   |
                            12944 ; 83   |
                            12945 ; 84   |
                            12946 ; 85   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12947 ; 86   |//  Do not edit it directly.
                            12948 ; 87   |//  Created on Wed Jun 18 22:57:19 2008 using resource.inc as input.
                            12949 ; 88   |
                            12950 ; 89   |
                            12951 ; 90   |
                            12952 ; 91   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12953 ; 92   |//  Do not edit it directly.
                            12954 ; 93   |//  Created on Wed Jun 18 22:49:16 2008 using resource.inc as input.
                            12955 ; 94   |
                            12956 ; 95   |
                            12957 ; 96   |
                            12958 ; 97   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12959 ; 98   |//  Do not edit it directly.
                            12960 ; 99   |//  Created on Wed Jun 18 11:53:38 2008 using resource.inc as input.
                            12961 ; 100  |
                            12962 ; 101  |
                            12963 ; 102  |
                            12964 ; 103  |//  NOTE: This file was generated automatically by rscrenum.pl
                            12965 ; 104  |//  Do not edit it directly.
                            12966 ; 105  |//  Created on Wed Jun 18 10:45:13 2008 using resource.inc as input.
                            12967 ; 106  |
                            12968 ; 107  |
                            12969 ; 108  |
                            12970 ; 109  |//  NOTE: This file was generated automatically by rscrenum.pl
                            12971 ; 110  |//  Do not edit it directly.
                            12972 ; 111  |//  Created on Wed Jun 18 09:54:56 2008 using resource.inc as input.
                            12973 ; 112  |
                            12974 ; 113  |
                            12975 ; 114  |
                            12976 ; 115  |//  NOTE: This file was generated automatically by rscrenum.pl
                            12977 ; 116  |//  Do not edit it directly.
                            12978 ; 117  |//  Created on Tue Jun 17 16:47:21 2008 using resource.inc as input.
                            12979 ; 118  |
                            12980 ; 119  |
                            12981 ; 120  |
                            12982 ; 121  |//  NOTE: This file was generated automatically by rscrenum.pl
                            12983 ; 122  |//  Do not edit it directly.
                            12984 ; 123  |//  Created on Tue Jun 17 11:30:49 2008 using resource.inc as input.
                            12985 ; 124  |
                            12986 ; 125  |
                            12987 ; 126  |
                            12988 ; 127  |/////////////////////////////////////////////////////////////////////////////////
                            12989 ; 128  |// Copyright(C) SigmaTel, Inc. 2001-2007
                            12990 ; 129  |// Reviews: DanhNguyen (06-2008) for X8iTF/STFM1000
                            12991 ; 130  |// LCD example resource listing
                            12992 ; 131  |/////////////////////////////////////////////////////////////////////////////////
                            12993 ; 132  |
                            12994 ; 133  |#if (!defined(resources))
                            12995 ; 134  |#define resources 1
                            12996 ; 135  |
                            12997 ; 136  |/////////////////////////////////////////////////////////////////////////////////
                            12998 ; 137  |//  Player version number  no leading zeros in version number!!!!!
                            12999 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                            13000 ; 139  |
                            13001 ; 140  |#define VERSION_MAJOR 3
                            13002 ; 141  |#define VERSION_MIDDLE 200
                            13003 ; 142  |#define VERSION_MINOR 910
                            13004 ; 143  |
                            13005 ; 144  |#define LCD_SEG_OFFSET 0x000000
                            13006 ; 145  |#define NUMBER_OF_PRESETS 10
                            13007 ; 146  |
                            13008 ; 147  |
                            13009 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            13010 ; 149  |//  High usage resource. These have been moved here to take maximum advantage of
                            13011 ; 150  |//  the resource index cache if it was added.
                            13012 ; 151  |//  This block is sorted by frequency of use while loading a new song.
                            13013 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                            13014 ; 153  |
                            13015 ; 154  |//$FILENAME searchdirectory.src
                            13016 ; 155  |#define RSRC_FUNCLET_SEARCHDIRECTORY 1    
                            13017 ; 156  |//$FILENAME shortdirmatch.src
                            13018 ; 157  |#define RSRC_FUNCLET_SHORTDIRMATCH 2    
                            13019 ; 158  |//$FILENAME fopen.src
                            13020 ; 159  |#define RSRC_FUNCLET_FOPEN 3    
                            13021 ; 160  |//$FILENAME musicmenu.src
                            13022 ; 161  |#define RSRC_MUSIC_MENU_CODE_BANK 4    
                            13023 ; 162  |//$FILENAME changepath.src
                            13024 ; 163  |#define RSRC_FUNCLET_CHANGEPATH 5    
                            13025 ; 164  |//$FILENAME _openandverifyslot.src
                            13026 ; 165  |#define RSRC_FUNCLET__OPENANDVERIFYSLOT 6    
                            13027 ; 166  |//$FILENAME _loadslot.src
                            13028 ; 167  |#define RSRC_FUNCLET__LOADSLOT 7    
                            13029 ; 168  |//$FILENAME getname.src
                            13030 ; 169  |#define RSRC_FUNCLET_GETNAME 8    
                            13031 ; 170  |//$FILENAME Funclet_SteppingVoltageSet.src
                            13032 ; 171  |#define RSRC_FUNCLET_STEPPINGVOLTAGESET 9    
                            13033 ; 172  |//$FILENAME sethandleforsearch.src
                            13034 ; 173  |#define RSRC_FUNCLET_SETHANDLEFORSEARCH 10    
                            13035 ; 174  |//$FILENAME wmaWrap.src
                            13036 ; 175  |#define RSRC_WMADEC_CODE 11    
                            13037 ; 176  |//$FILENAME extractfilename.src
                            13038 ; 177  |#define RSRC_FUNCLET_EXTRACTFILENAME 12    
                            13039 ; 178  |//$FILENAME oem_getgroupcertprivatekey.src
                            13040 ; 179  |#define RSRC_FUNCLET_OEM_GETGROUPCERTPRIVATEKEY 13    
                            13041 ; 180  |//$FILENAME SoftTimerMod.src
                            13042 ; 181  |#define RSRC_SOFT_TIMER_MODULE_CODE 14    
                            13043 ; 182  |//$FILENAME GetShortfilename.src
                            13044 ; 183  |#define RSRC_FUNCLET_GETSHORTFILENAME 15    
                            13045 ; 184  |//$FILENAME drm_dcp_loadpropertiescache.src
                            13046 ; 185  |#define RSRC_FUNCLET_DRM_DCP_LOADPROPERTIESCACHE 16    
                            13047 ; 186  |//$FILENAME playerstatemachine.src
                            13048 ; 187  |#define RSRC_PLAY_STATE_MACHINE_CODE_BANK 17    
                            13049 ; 188  |//$FILENAME SysMod.src
                            13050 ; 189  |#define RSRC_SYSMOD_CODE 18    
                            13051 ; 190  |//$FILENAME drm_b64_decodew.src
                            13052 ; 191  |#define RSRC_FUNCLET_DRM_B64_DECODEW 19    
                            13053 ; 192  |//$FILENAME discardtrailigperiods.src
                            13054 ; 193  |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODS 20    
                            13055 ; 194  |//$FILENAME uppercase.src
                            13056 ; 195  |#define RSRC_FUNCLET_UPPERCASE 21    
                            13057 ; 196  |//$FILENAME strlength.src
                            13058 ; 197  |#define RSRC_FUNCLET_STRLENGTH 22    
                            13059 ; 198  |//$FILENAME ConverToShortname.src
                            13060 ; 199  |#define RSRC_FUNCLET_CONVERTOSHORTNAME 23    
                            13061 ; 200  |//$FILENAME drm_bbx_hashvalue.src
                            13062 ; 201  |#define RSRC_FUNCLET_DRM_BBX_HASHVALUE 24    
                            13063 ; 202  |//$FILENAME drm_expr_evaluateexpression.src
                            13064 ; 203  |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION 25    
                            13065 ; 204  |//$FILENAME drm_sst_closekey.src
                            13066 ; 205  |#define RSRC_FUNCLET_DRM_SST_CLOSEKEY 26    
                            13067 ; 206  |//$FILENAME Funclet_SysSetSpeed.src
                            13068 ; 207  |#define RSRC_FUNCLET_SYSSETSPEED 27    
                            13069 ; 208  |//$FILENAME freehandle.src
                            13070 ; 209  |#define RSRC_FUNCLET_FREEHANDLE 28    
                            13071 ; 210  |//$FILENAME searchfreehandleallocate.src
                            13072 ; 211  |#define RSRC_FUNCLET_SEARCHFREEHANDLEALLOCATE 29    
                            13073 ; 212  |//$FILENAME _parselicenseattributes.src
                            13074 ; 213  |#define RSRC_FUNCLET__PARSELICENSEATTRIBUTES 30    
                            13075 ; 214  |//$FILENAME variablesecstategetorset.src
                            13076 ; 215  |#define RSRC_FUNCLET_VARIABLESECSTATEGETORSET 31    
                            13077 ; 216  |//$FILENAME _setuplicevalobjecttoshare.src
                            13078 ; 217  |#define RSRC_FUNCLET__SETUPLICEVALOBJECTTOSHARE 32    
                            13079 ; 218  |//$FILENAME drm_mgr_initialize.src
                            13080 ; 219  |#define RSRC_FUNCLET_DRM_MGR_INITIALIZE 33    
                            13081 ; 220  |//$FILENAME display.src
                            13082 ; 221  |#define RSRC_DISPLAY_CODE_BANK 34    
                            13083 ; 222  |//$FILENAME DisplayModule.src
                            13084 ; 223  |#define RSRC_DISPLAY_MODULE 35    
                            13085 ; 224  |//$FILENAME extractpath.src
                            13086 ; 225  |#define RSRC_FUNCLET_EXTRACTPATH 36    
                            13087 ; 226  |//$FILENAME drm_sst_createglobalstorepassword.src
                            13088 ; 227  |#define RSRC_FUNCLET_DRM_SST_CREATEGLOBALSTOREPASSWORD 37    
                            13089 ; 228  |//$FILENAME _getprivatekey.src
                            13090 ; 229  |#define RSRC_FUNCLET__GETPRIVATEKEY 38    
                            13091 ; 230  |//$FILENAME drm_hds_opennamespace.src
                            13092 ; 231  |#define RSRC_FUNCLET_DRM_HDS_OPENNAMESPACE 39    
                            13093 ; 232  |//$FILENAME drm_hds_openslot.src
                            13094 ; 233  |#define RSRC_FUNCLET_DRM_HDS_OPENSLOT 40    
                            13095 ; 234  |//$FILENAME fclose.src
                            13096 ; 235  |#define RSRC_FUNCLET_FCLOSE 41    
                            13097 ; 236  |//$FILENAME drm_cphr_init.src
                            13098 ; 237  |#define RSRC_FUNCLET_DRM_CPHR_INIT 42    
                            13099 ; 238  |//$FILENAME drm_pk_symmetriccrypt.src
                            13100 ; 239  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICCRYPT 43    
                            13101 ; 240  |//$FILENAME drm_mgr_bind.src
                            13102 ; 241  |#define RSRC_FUNCLET_DRM_MGR_BIND 44    
                            13103 ; 242  |//$FILENAME _decryptcontentkey.src
                            13104 ; 243  |#define RSRC_FUNCLET__DECRYPTCONTENTKEY 45    
                            13105 ; 244  |//$FILENAME drm_mac_inv32.src
                            13106 ; 245  |#define RSRC_FUNCLET_DRM_MAC_INV32 46    
                            13107 ; 246  |//$FILENAME drm_lic_getattribute.src
                            13108 ; 247  |#define RSRC_FUNCLET_DRM_LIC_GETATTRIBUTE 47    
                            13109 ; 248  |//$FILENAME drm_utl_getversionasstring.src
                            13110 ; 249  |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONASSTRING 48    
                            13111 ; 250  |//$FILENAME drm_dcp_getattribute.src
                            13112 ; 251  |#define RSRC_FUNCLET_DRM_DCP_GETATTRIBUTE 49    
                            13113 ; 252  |//$FILENAME effectsmodules.src
                            13114 ; 253  |#define RSRC_EFFECTS_MODULES_P 50    
                            13115 ; 254  |//$FILENAME janusx.src
                            13116 ; 255  |#define RSRC_JANUSX_CODE 51    
                            13117 ; 256  |//$FILENAME drm_sst_openkeytokens.src
                            13118 ; 257  |#define RSRC_FUNCLET_DRM_SST_OPENKEYTOKENS 52    
                            13119 ; 258  |//$FILENAME eval.src
                            13120 ; 259  |#define RSRC_FUNCLET_EVAL 53    
                            13121 ; 260  |//$FILENAME _verifyslothash.src
                            13122 ; 261  |#define RSRC_FUNCLET__VERIFYSLOTHASH 54    
                            13123 ; 262  |//$FILENAME januscommon.src
                            13124 ; 263  |#define RSRC_JANUS_COMMON 55    
                            13125 ; 264  |//$FILENAME changecase.src
                            13126 ; 265  |#define RSRC_FUNCLET_CHANGECASE 56    
                            13127 ; 266  |//$FILENAME drm_bbx_symmetricverify.src
                            13128 ; 267  |#define RSRC_FUNCLET_DRM_BBX_SYMMETRICVERIFY 57    
                            13129 ; 268  |//$FILENAME _loadlicenseattributes.src
                            13130 ; 269  |#define RSRC_FUNCLET__LOADLICENSEATTRIBUTES 58    
                            13131 ; 270  |//$FILENAME drm_hds_slotseek.src
                            13132 ; 271  |#define RSRC_FUNCLET_DRM_HDS_SLOTSEEK 59    
                            13133 ; 272  |//$FILENAME drm_hds_slotwrite.src
                            13134 ; 273  |#define RSRC_FUNCLET_DRM_HDS_SLOTWRITE 60    
                            13135 ; 274  |//$FILENAME drm_levl_performoperations.src
                            13136 ; 275  |#define RSRC_FUNCLET_DRM_LEVL_PERFORMOPERATIONS 61    
                            13137 ; 276  |//$FILENAME drm_lic_verifysignature.src
                            13138 ; 277  |#define RSRC_FUNCLET_DRM_LIC_VERIFYSIGNATURE 62    
                            13139 ; 278  |//$FILENAME drm_lst_getlicense.src
                            13140 ; 279  |#define RSRC_FUNCLET_DRM_LST_GETLICENSE 63    
                            13141 ; 280  |//$FILENAME drm_utl_numbertostring.src
                            13142 ; 281  |#define RSRC_FUNCLET_DRM_UTL_NUMBERTOSTRING 64    
                            13143 ; 282  |//$FILENAME oem_writefile.src
                            13144 ; 283  |#define RSRC_FUNCLET_OEM_WRITEFILE 65    
                            13145 ; 284  |//$FILENAME drm_sst_getdata.src
                            13146 ; 285  |#define RSRC_FUNCLET_DRM_SST_GETDATA 66    
                            13147 ; 286  |//$FILENAME updatehandlemode.src
                            13148 ; 287  |#define RSRC_FUNCLET_UPDATEHANDLEMODE 67    
                            13149 ; 288  |//$FILENAME _getlicenseinfoandsetup.src
                            13150 ; 289  |#define RSRC_FUNCLET__GETLICENSEINFOANDSETUP 68    
                            13151 ; 290  |//$FILENAME drm_lic_completelicensechain.src
                            13152 ; 291  |#define RSRC_FUNCLET_DRM_LIC_COMPLETELICENSECHAIN 69    
                            13153 ; 292  |//$FILENAME doplay_p.src
                            13154 ; 293  |#define RSRC_DOPLAY_P 70    
                            13155 ; 294  |//$FILENAME fatwritep.src
                            13156 ; 295  |#define RSRC_FATWRITE_P_CODE 71    
                            13157 ; 296  |//$FILENAME findfirst.src
                            13158 ; 297  |#define RSRC_FUNCLET_FINDFIRST 72    
                            13159 ; 298  |//$FILENAME Funclet_SysLoadFatWrite.src
                            13160 ; 299  |#define RSRC_FUNCLET_SYSLOADFATWRITE 73    
                            13161 ; 300  |//$FILENAME changetorootdirectory.src
                            13162 ; 301  |#define RSRC_FUNCLET_CHANGETOROOTDIRECTORY 74    
                            13163 ; 302  |//$FILENAME _findkeypair.src
                            13164 ; 303  |#define RSRC_FUNCLET__FINDKEYPAIR 75    
                            13165 ; 304  |//$FILENAME variablemachinegetorset.src
                            13166 ; 305  |#define RSRC_FUNCLET_VARIABLEMACHINEGETORSET 76    
                            13167 ; 306  |//$FILENAME _hdsslotenumnext.src
                            13168 ; 307  |#define RSRC_FUNCLET__HDSSLOTENUMNEXT 77    
                            13169 ; 308  |//$FILENAME getlspubkey.src
                            13170 ; 309  |#define RSRC_FUNCLET_GETLSPUBKEY 78    
                            13171 ; 310  |//$FILENAME drm_sst_gettokenvalue.src
                            13172 ; 311  |#define RSRC_FUNCLET_DRM_SST_GETTOKENVALUE 79    
                            13173 ; 312  |//$FILENAME drm_utl_decodekid.src
                            13174 ; 313  |#define RSRC_FUNCLET_DRM_UTL_DECODEKID 80    
                            13175 ; 314  |//$FILENAME drm_xml_getnodecdata.src
                            13176 ; 315  |#define RSRC_FUNCLET_DRM_XML_GETNODECDATA 81    
                            13177 ; 316  |//$FILENAME _freedrmmanagerinternalcontexts.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13178 ; 317  |#define RSRC_FUNCLET__FREEDRMMANAGERINTERNALCONTEXTS 82    
                            13179 ; 318  |//$FILENAME drm_clk_initchecksecureclock.src
                            13180 ; 319  |#define RSRC_FUNCLET_DRM_CLK_INITCHECKSECURECLOCK 83    
                            13181 ; 320  |//$FILENAME drm_sst_openandlockslot.src
                            13182 ; 321  |#define RSRC_FUNCLET_DRM_SST_OPENANDLOCKSLOT 84    
                            13183 ; 322  |//$FILENAME aes_enc.src
                            13184 ; 323  |#define RSRC_AES_ENC 85    
                            13185 ; 324  |//$FILENAME getprivkey.src
                            13186 ; 325  |#define RSRC_FUNCLET_GETPRIVKEY 86    
                            13187 ; 326  |//$FILENAME Funclet_GetUnicodeCharacterBitmap.src
                            13188 ; 327  |#define RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP 87    
                            13189 ; 328  |//$FILENAME playlist_codebank.src
                            13190 ; 329  |#define RSRC_PLAYLIST_CODEBANK 88    
                            13191 ; 330  |//$FILENAME drm_lic_getenablingbits.src
                            13192 ; 331  |#define RSRC_FUNCLET_DRM_LIC_GETENABLINGBITS 89    
                            13193 ; 332  |//$FILENAME drm_mgr_uninitialize.src
                            13194 ; 333  |#define RSRC_FUNCLET_DRM_MGR_UNINITIALIZE 90    
                            13195 ; 334  |//$FILENAME _getdevicecert.src
                            13196 ; 335  |#define RSRC_FUNCLET__GETDEVICECERT 91    
                            13197 ; 336  |//$FILENAME drm_lic_reportactions.src
                            13198 ; 337  |#define RSRC_FUNCLET_DRM_LIC_REPORTACTIONS 92    
                            13199 ; 338  |//$FILENAME drmcrt_wcsntol.src
                            13200 ; 339  |#define RSRC_FUNCLET_DRMCRT_WCSNTOL 93    
                            13201 ; 340  |//$FILENAME _basicheaderchecks.src
                            13202 ; 341  |#define RSRC_FUNCLET__BASICHEADERCHECKS 94    
                            13203 ; 342  |//$FILENAME drm_hdr_getattribute.src
                            13204 ; 343  |#define RSRC_FUNCLET_DRM_HDR_GETATTRIBUTE 95    
                            13205 ; 344  |//$FILENAME drm_hds_slotenumnext.src
                            13206 ; 345  |#define RSRC_FUNCLET_DRM_HDS_SLOTENUMNEXT 96    
                            13207 ; 346  |//$FILENAME drm_levl_evaluateexpression.src
                            13208 ; 347  |#define RSRC_FUNCLET_DRM_LEVL_EVALUATEEXPRESSION 97    
                            13209 ; 348  |//$FILENAME drm_lst_open.src
                            13210 ; 349  |#define RSRC_FUNCLET_DRM_LST_OPEN 98    
                            13211 ; 350  |//$FILENAME drm_xml_getnodeattribute.src
                            13212 ; 351  |#define RSRC_FUNCLET_DRM_XML_GETNODEATTRIBUTE 99    
                            13213 ; 352  |//$FILENAME _verifysymmerticsignature.src
                            13214 ; 353  |#define RSRC_FUNCLET__VERIFYSYMMERTICSIGNATURE 100    
                            13215 ; 354  |//$FILENAME oem_openfile.src
                            13216 ; 355  |#define RSRC_FUNCLET_OEM_OPENFILE 101    
                            13217 ; 356  |//$FILENAME _getdrmfullpathname.src
                            13218 ; 357  |#define RSRC_FUNCLET__GETDRMFULLPATHNAME 102    
                            13219 ; 358  |//$FILENAME oem_getsecurestoreglobalpasswordseed.src
                            13220 ; 359  |#define RSRC_FUNCLET_OEM_GETSECURESTOREGLOBALPASSWORDSEED 103    
                            13221 ; 360  |//$FILENAME _applydiffstostore.src
                            13222 ; 361  |#define RSRC_FUNCLET__APPLYDIFFSTOSTORE 104    
                            13223 ; 362  |//$FILENAME drm_sst_setdata.src
                            13224 ; 363  |#define RSRC_FUNCLET_DRM_SST_SETDATA 105    
                            13225 ; 364  |//$FILENAME drm_sst_getlockeddata.src
                            13226 ; 365  |#define RSRC_FUNCLET_DRM_SST_GETLOCKEDDATA 106    
                            13227 ; 366  |//$FILENAME drm_sst_setlockeddata.src
                            13228 ; 367  |#define RSRC_FUNCLET_DRM_SST_SETLOCKEDDATA 107    
                            13229 ; 368  |//$FILENAME playerlib_extra.src
                            13230 ; 369  |#define RSRC_PLAYERLIB_EXTRA_CODE_BANK 108    
                            13231 ; 370  |//$FILENAME wmaCommon.src
                            13232 ; 371  |#define RSRC_WMA_COMMON 109    
                            13233 ; 372  |//$FILENAME wmainit.src
                            13234 ; 373  |#define RSRC_WMA_INIT 110    
                            13235 ; 374  |//$FILENAME playlist2traverse_codebank.src
                            13236 ; 375  |#define RSRC_PLAYLIST2TRAVERSE_CODEBANK 111    
                            13237 ; 376  |//$FILENAME drm_bbx_cipherkeysetup.src
                            13238 ; 377  |#define RSRC_FUNCLET_DRM_BBX_CIPHERKEYSETUP 112    
                            13239 ; 378  |//$FILENAME drm_lic_checkclockrollback.src
                            13240 ; 379  |#define RSRC_FUNCLET_DRM_LIC_CHECKCLOCKROLLBACK 113    
                            13241 ; 380  |//$FILENAME drm_hds_closestore.src
                            13242 ; 381  |#define RSRC_FUNCLET_DRM_HDS_CLOSESTORE 114    
                            13243 ; 382  |//$FILENAME _hdsloadsrn.src
                            13244 ; 383  |#define RSRC_FUNCLET__HDSLOADSRN 115    
                            13245 ; 384  |//$FILENAME _loadproritizedlist.src
                            13246 ; 385  |#define RSRC_FUNCLET__LOADPRORITIZEDLIST 116    
                            13247 ; 386  |//$FILENAME drm_lst_initenum.src
                            13248 ; 387  |#define RSRC_FUNCLET_DRM_LST_INITENUM 117    
                            13249 ; 388  |//$FILENAME _loadattributesintocache.src
                            13250 ; 389  |#define RSRC_FUNCLET__LOADATTRIBUTESINTOCACHE 118    
                            13251 ; 390  |//$FILENAME drm_pk_symmetricverify.src
                            13252 ; 391  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICVERIFY 119    
                            13253 ; 392  |
                            13254 ; 393  |/////////////////////////////////////////////////////////////////////////////////
                            13255 ; 394  |//  Menu Modules (codebanks)
                            13256 ; 395  |/////////////////////////////////////////////////////////////////////////////////
                            13257 ; 396  |//$FILENAME mainmenu.src
                            13258 ; 397  |#define RSRC_MAIN_MENU_CODE_BANK 120    
                            13259 ; 398  |//$FILENAME displaylists.src
                            13260 ; 399  |#define RSRC_DISPLAY_LISTS_CODE_BANK 121    
                            13261 ; 400  |
                            13262 ; 401  |//$FILENAME voicemenu.src
                            13263 ; 402  |#define RSRC_VOICE_MENU_CODE_BANK 122    
                            13264 ; 403  |//$FILENAME fmtunermenu.src
                            13265 ; 404  |#define RSRC_FMTUNER_MENU_CODE_BANK 123    
                            13266 ; 405  |//$FILENAME recorderstatemachine.src
                            13267 ; 406  |#define RSRC_RECORDER_STATE_MACHINE_CODE_BANK 124    
                            13268 ; 407  |
                            13269 ; 408  |//$FILENAME eqmenu.src
                            13270 ; 409  |#define RSRC_EQ_MENU_CODE_BANK 125    
                            13271 ; 410  |//$FILENAME playmodemenu.src
                            13272 ; 411  |#define RSRC_PLAYMODE_MENU_CODE_BANK 126    
                            13273 ; 412  |//$FILENAME contrastmenu.src
                            13274 ; 413  |#define RSRC_CONTRAST_MENU_CODE_BANK 127    
                            13275 ; 414  |//$FILENAME pwrsettingsmenu.src
                            13276 ; 415  |#define RSRC_PWRSETTINGS_MENU_CODE_BANK 128    
                            13277 ; 416  |//$FILENAME timedatemenu.src
                            13278 ; 417  |#define RSRC_TIMEDATE_MENU_CODE_BANK 129    
                            13279 ; 418  |//$FILENAME settimemenu.src
                            13280 ; 419  |#define RSRC_SETTIME_MENU_CODE_BANK 130    
                            13281 ; 420  |//$FILENAME setdatemenu.src
                            13282 ; 421  |#define RSRC_SETDATE_MENU_CODE_BANK 131    
                            13283 ; 422  |//$FILENAME settingsmenu.src
                            13284 ; 423  |#define RSRC_SETTINGS_MENU_CODE_BANK 132    
                            13285 ; 424  |//$FILENAME string_system_menu.src
                            13286 ; 425  |#define RSRC_SYSTEM_MENU_CODE_BANK 133    
                            13287 ; 426  |//$FILENAME deletemenu.src
                            13288 ; 427  |#define RSRC_DELETE_MENU_CODE_BANK 134    
                            13289 ; 428  |//$FILENAME aboutmenu.src
                            13290 ; 429  |#define RSRC_ABOUT_MENU_CODE_BANK 135    
                            13291 ; 430  |
                            13292 ; 431  |//$FILENAME spectrogram.src
                            13293 ; 432  |#define RSRC_SPECTROGRAM_MENU_CODE_BANK 136    
                            13294 ; 433  |
                            13295 ; 434  |//$FILENAME motionvideomenu.src
                            13296 ; 435  |#define RSRC_MOTION_VIDEO_MENU_CODE_BANK 137    
                            13297 ; 436  |//$FILENAME motionvideomenuinitstate.src
                            13298 ; 437  |#define RSRC_MOTION_VIDEO_MENU_INITSTATE_CODE_BANK 138    
                            13299 ; 438  |//$FILENAME jpegdisplaymenu.src
                            13300 ; 439  |#define RSRC_JPEG_DISPLAY_MENU_CODE_BANK 139    
                            13301 ; 440  |//$FILENAME jpegmanualmenu.src
                            13302 ; 441  |#define RSRC_JPEG_MANUAL_MENU_CODE_BANK 140    
                            13303 ; 442  |//$FILENAME jpegthumbnailmenu.src
                            13304 ; 443  |#define RSRC_JPEG_THUMBNAIL_MENU_CODE_BANK 141    
                            13305 ; 444  |//$FILENAME jpegslideshowmenu.src
                            13306 ; 445  |#define RSRC_JPEG_SLIDESHOW_MENU_CODE_BANK 142    
                            13307 ; 446  |//$FILENAME albumartmenu.src
                            13308 ; 447  |#define RSRC_ALBUM_ART_MENU_CODE_BANK 143    
                            13309 ; 448  |//$FILENAME jpegfileutilextra.src
                            13310 ; 449  |#define RSRC_JPEG_FILEUTIL_EXTRA_MENU_CODE_BANK 144    
                            13311 ; 450  |
                            13312 ; 451  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13313 ; 452  |// General Modules
                            13314 ; 453  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13315 ; 454  |//$FILENAME MixMod.src
                            13316 ; 455  |#define RSRC_MIXMOD_CODE 145    
                            13317 ; 456  |//$FILENAME TunerModule.src
                            13318 ; 457  |#define RSRC_TUNER_MODULE 146    
                            13319 ; 458  |//$FILENAME geqoverlay.src
                            13320 ; 459  |#define RSRC_GEQOVERLAY_CODE 147    
                            13321 ; 460  |
                            13322 ; 461  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13323 ; 462  |// Decoders/Encoders
                            13324 ; 463  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13325 ; 464  |//$FILENAME DecMod.src
                            13326 ; 465  |#define RSRC_DECMOD_CODE 148    
                            13327 ; 466  |//$FILENAME mp3p.src
                            13328 ; 467  |#define RSRC_MP3P_CODE 149    
                            13329 ; 468  |//$FILENAME mp3x.src
                            13330 ; 469  |#define RSRC_MP3X_CODE 150    
                            13331 ; 470  |//$FILENAME mp3y.src
                            13332 ; 471  |#define RSRC_MP3Y_CODE 151    
                            13333 ; 472  |//$FILENAME janusp.src
                            13334 ; 473  |#define RSRC_JANUSP_CODE 152    
                            13335 ; 474  |//RSRC_JANUSY_CODE        equ       29    ;$FILENAME janusy.src
                            13336 ; 475  |
                            13337 ; 476  |//$FILENAME decadpcmimamod.src
                            13338 ; 477  |#define RSRC_DEC_ADPCM_MOD_CODE 153    
                            13339 ; 478  |//$FILENAME dec_adpcmp.src
                            13340 ; 479  |#define RSRC_DEC_ADPCMP_CODE 154    
                            13341 ; 480  |//$FILENAME dec_adpcmx.src
                            13342 ; 481  |#define RSRC_DEC_ADPCMX_CODE 155    
                            13343 ; 482  |//$FILENAME dec_adpcmy.src
                            13344 ; 483  |#define RSRC_DEC_ADPCMY_CODE 156    
                            13345 ; 484  |
                            13346 ; 485  |//$FILENAME decadpcmsmvmod.src
                            13347 ; 486  |#define RSRC_DEC_SMVADPCM_MOD_CODE 157    
                            13348 ; 487  |//$FILENAME dec_smvadpcmp.src
                            13349 ; 488  |#define RSRC_DEC_SMVADPCMP_CODE 158    
                            13350 ; 489  |//$FILENAME dec_smvadpcmx.src
                            13351 ; 490  |#define RSRC_DEC_SMVADPCMX_CODE 159    
                            13352 ; 491  |//$FILENAME dec_smvadpcmy.src
                            13353 ; 492  |#define RSRC_DEC_SMVADPCMY_CODE 160    
                            13354 ; 493  |
                            13355 ; 494  |//$FILENAME encadpcmimamod.src
                            13356 ; 495  |#define RSRC_ENC_ADPCM_MOD_CODE 161    
                            13357 ; 496  |//$FILENAME enc_adpcmp.src
                            13358 ; 497  |#define RSRC_ENC_ADPCMP_CODE 162    
                            13359 ; 498  |//$FILENAME enc_adpcmx.src
                            13360 ; 499  |#define RSRC_ENC_ADPCMX_CODE 163    
                            13361 ; 500  |//$FILENAME enc_adpcmy.src
                            13362 ; 501  |#define RSRC_ENC_ADPCMY_CODE 164    
                            13363 ; 502  |
                            13364 ; 503  |//$FILENAME jpeg_p.src
                            13365 ; 504  |#define RSRC_JPEG_DECODER_P 165    
                            13366 ; 505  |//$FILENAME jpeg_x.src
                            13367 ; 506  |#define RSRC_JPEG_DECODER_X 166    
                            13368 ; 507  |//$FILENAME jpeg_y.src
                            13369 ; 508  |#define RSRC_JPEG_DECODER_Y 167    
                            13370 ; 509  |//$FILENAME jpeg2_y.src
                            13371 ; 510  |#define RSRC_JPEG_DECODER_Y_2 168    
                            13372 ; 511  |//$FILENAME bmp2_y.src
                            13373 ; 512  |#define RSRC_BMP_DECODER_Y_2 169    
                            13374 ; 513  |//$FILENAME bmp_p.src
                            13375 ; 514  |#define RSRC_BMP_DECODER_P 170    
                            13376 ; 515  |
                            13377 ; 516  |//RSRC_SMVJPEG_DECODER_P    equ       57    ;$FILENAME smvjpeg_p.src
                            13378 ; 517  |//$FILENAME smvjpeg_x.src
                            13379 ; 518  |#define RSRC_SMVJPEG_DECODER_X 171    
                            13380 ; 519  |//$FILENAME smvjpeg_y.src
                            13381 ; 520  |#define RSRC_SMVJPEG_DECODER_Y 172    
                            13382 ; 521  |
                            13383 ; 522  |
                            13384 ; 523  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13385 ; 524  |// System Settings
                            13386 ; 525  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13387 ; 526  |//$FILENAME settings.src
                            13388 ; 527  |#define RSRC_SETTINGS_COMMANDS 173    
                            13389 ; 528  |
                            13390 ; 529  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13391 ; 530  |// Media Device Drivers
                            13392 ; 531  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13393 ; 532  |//This resource is filled with garbage unless it is the MMC build
                            13394 ; 533  |//$FILENAME null.src
                            13395 ; 534  |#define RSRC_MMCDD_CODE 174    
                            13396 ; 535  |//$FILENAME null.src
                            13397 ; 536  |#define RSRC_SMDD_HIGH_CODE 175    
                            13398 ; 537  |
                            13399 ; 538  |/////////////////////////////////////////////////////////////////////////////////
                            13400 ; 539  |//  PlayState resources
                            13401 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                            13402 ; 541  |//$FILENAME play_icon_with_border.src
                            13403 ; 542  |#define RSRC_PLAY_ICON_WITH_BORDER 176    
                            13404 ; 543  |//$FILENAME pause_icon_with_border.src
                            13405 ; 544  |#define RSRC_PAUSE_ICON_WITH_BORDER 177    
                            13406 ; 545  |//$FILENAME stop_icon_with_border.src
                            13407 ; 546  |#define RSRC_STOP_ICON_WITH_BORDER 178    
                            13408 ; 547  |//$FILENAME record_icon_with_border.src
                            13409 ; 548  |#define RSRC_RECORD_ICON_WITH_BORDER 179    
                            13410 ; 549  |//$FILENAME paused_record_icon_with_border.src
                            13411 ; 550  |#define RSRC_PAUSED_RECORD_ICON_BORDER 180    
                            13412 ; 551  |//$FILENAME ffwd_icon_with_border.src
                            13413 ; 552  |#define RSRC_FFWD_ICON_WITH_BORDER 181    
                            13414 ; 553  |//$FILENAME rwnd_icon_with_border.src
                            13415 ; 554  |#define RSRC_RWND_ICON_WITH_BORDER 182    
                            13416 ; 555  |
                            13417 ; 556  |/////////////////////////////////////////////////////////////////////////////////
                            13418 ; 557  |//  PlayMode resources
                            13419 ; 558  |/////////////////////////////////////////////////////////////////////////////////
                            13420 ; 559  |//$FILENAME repeatall_icon.src
                            13421 ; 560  |#define RSRC_REPEAT_ALL_ICON 183    
                            13422 ; 561  |//$FILENAME repeatsong_icon.src
                            13423 ; 562  |#define RSRC_REPEAT_SONG_ICON 184    
                            13424 ; 563  |//$FILENAME shuffle_icon.src
                            13425 ; 564  |#define RSRC_SHUFFLE_ICON 185    
                            13426 ; 565  |//$FILENAME random_icon.src
                            13427 ; 566  |#define RSRC_RANDOM_ICON 186    
                            13428 ; 567  |//$FILENAME repeatallclear_icon.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13429 ; 568  |#define RSRC_REPEAT_ALL_CLEAR_ICON 187    
                            13430 ; 569  |//$FILENAME repeatsongclear_icon.src
                            13431 ; 570  |#define RSRC_REPEAT_SONG_CLEAR_ICON 188    
                            13432 ; 571  |//$FILENAME shuffleclear_icon.src
                            13433 ; 572  |#define RSRC_SHUFFLE_CLEAR_ICON 189    
                            13434 ; 573  |
                            13435 ; 574  |/////////////////////////////////////////////////////////////////////////////////
                            13436 ; 575  |//  Battery Status
                            13437 ; 576  |/////////////////////////////////////////////////////////////////////////////////
                            13438 ; 577  |//$FILENAME battery_00.src
                            13439 ; 578  |#define RSRC_BATTERY_00 190    
                            13440 ; 579  |//$FILENAME battery_01.src
                            13441 ; 580  |#define RSRC_BATTERY_01 191    
                            13442 ; 581  |//$FILENAME battery_02.src
                            13443 ; 582  |#define RSRC_BATTERY_02 192    
                            13444 ; 583  |//$FILENAME battery_03.src
                            13445 ; 584  |#define RSRC_BATTERY_03 193    
                            13446 ; 585  |//$FILENAME battery_04.src
                            13447 ; 586  |#define RSRC_BATTERY_04 194    
                            13448 ; 587  |//$FILENAME battery_05.src
                            13449 ; 588  |#define RSRC_BATTERY_05 195    
                            13450 ; 589  |//$FILENAME battery_06.src
                            13451 ; 590  |#define RSRC_BATTERY_06 196    
                            13452 ; 591  |//$FILENAME battery_07.src
                            13453 ; 592  |#define RSRC_BATTERY_07 197    
                            13454 ; 593  |//$FILENAME battery_08.src
                            13455 ; 594  |#define RSRC_BATTERY_08 198    
                            13456 ; 595  |//$FILENAME battery_09.src
                            13457 ; 596  |#define RSRC_BATTERY_09 199    
                            13458 ; 597  |//$FILENAME battery_10.src
                            13459 ; 598  |#define RSRC_BATTERY_10 200    
                            13460 ; 599  |
                            13461 ; 600  |/////////////////////////////////////////////////////////////////////////////////
                            13462 ; 601  |//  System Icons
                            13463 ; 602  |/////////////////////////////////////////////////////////////////////////////////
                            13464 ; 603  |//$FILENAME disk_small.src
                            13465 ; 604  |#define RSRC_DISK_ICON 201    
                            13466 ; 605  |//$FILENAME lock_small.src
                            13467 ; 606  |#define RSRC_LOCK_ICON 202    
                            13468 ; 607  |//$FILENAME icon_music_mode.src
                            13469 ; 608  |#define RSRC_MUSIC_MODE_ICON 203    
                            13470 ; 609  |//$FILENAME icon_voice_mode.src
                            13471 ; 610  |#define RSRC_VOICE_MODE_ICON 204    
                            13472 ; 611  |
                            13473 ; 612  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13474 ; 613  |// Volume Bitmaps
                            13475 ; 614  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13476 ; 615  |//$FILENAME icon_vol_00.src
                            13477 ; 616  |#define RSRC_ICON_VOL_00 205    
                            13478 ; 617  |//$FILENAME icon_vol_01.src
                            13479 ; 618  |#define RSRC_ICON_VOL_01 206    
                            13480 ; 619  |//$FILENAME icon_vol_02.src
                            13481 ; 620  |#define RSRC_ICON_VOL_02 207    
                            13482 ; 621  |//$FILENAME icon_vol_03.src
                            13483 ; 622  |#define RSRC_ICON_VOL_03 208    
                            13484 ; 623  |//$FILENAME icon_vol_04.src
                            13485 ; 624  |#define RSRC_ICON_VOL_04 209    
                            13486 ; 625  |//$FILENAME icon_vol_05.src
                            13487 ; 626  |#define RSRC_ICON_VOL_05 210    
                            13488 ; 627  |//$FILENAME icon_vol_06.src
                            13489 ; 628  |#define RSRC_ICON_VOL_06 211    
                            13490 ; 629  |//$FILENAME icon_vol_07.src
                            13491 ; 630  |#define RSRC_ICON_VOL_07 212    
                            13492 ; 631  |//$FILENAME icon_vol_08.src
                            13493 ; 632  |#define RSRC_ICON_VOL_08 213    
                            13494 ; 633  |//$FILENAME icon_vol_09.src
                            13495 ; 634  |#define RSRC_ICON_VOL_09 214    
                            13496 ; 635  |//$FILENAME icon_vol_10.src
                            13497 ; 636  |#define RSRC_ICON_VOL_10 215    
                            13498 ; 637  |//$FILENAME icon_vol_11.src
                            13499 ; 638  |#define RSRC_ICON_VOL_11 216    
                            13500 ; 639  |//$FILENAME icon_vol_12.src
                            13501 ; 640  |#define RSRC_ICON_VOL_12 217    
                            13502 ; 641  |//$FILENAME icon_vol_13.src
                            13503 ; 642  |#define RSRC_ICON_VOL_13 218    
                            13504 ; 643  |//$FILENAME icon_vol_14.src
                            13505 ; 644  |#define RSRC_ICON_VOL_14 219    
                            13506 ; 645  |//$FILENAME icon_vol_15.src
                            13507 ; 646  |#define RSRC_ICON_VOL_15 220    
                            13508 ; 647  |//$FILENAME icon_vol_16.src
                            13509 ; 648  |#define RSRC_ICON_VOL_16 221    
                            13510 ; 649  |//$FILENAME icon_vol_17.src
                            13511 ; 650  |#define RSRC_ICON_VOL_17 222    
                            13512 ; 651  |//$FILENAME icon_vol_18.src
                            13513 ; 652  |#define RSRC_ICON_VOL_18 223    
                            13514 ; 653  |//$FILENAME icon_vol_19.src
                            13515 ; 654  |#define RSRC_ICON_VOL_19 224    
                            13516 ; 655  |//$FILENAME icon_vol_20.src
                            13517 ; 656  |#define RSRC_ICON_VOL_20 225    
                            13518 ; 657  |//$FILENAME icon_vol_21.src
                            13519 ; 658  |#define RSRC_ICON_VOL_21 226    
                            13520 ; 659  |//$FILENAME icon_vol_22.src
                            13521 ; 660  |#define RSRC_ICON_VOL_22 227    
                            13522 ; 661  |//$FILENAME icon_vol_23.src
                            13523 ; 662  |#define RSRC_ICON_VOL_23 228    
                            13524 ; 663  |//$FILENAME icon_vol_24.src
                            13525 ; 664  |#define RSRC_ICON_VOL_24 229    
                            13526 ; 665  |//$FILENAME icon_vol_25.src
                            13527 ; 666  |#define RSRC_ICON_VOL_25 230    
                            13528 ; 667  |//$FILENAME icon_vol_26.src
                            13529 ; 668  |#define RSRC_ICON_VOL_26 231    
                            13530 ; 669  |//$FILENAME icon_vol_27.src
                            13531 ; 670  |#define RSRC_ICON_VOL_27 232    
                            13532 ; 671  |//$FILENAME icon_vol_28.src
                            13533 ; 672  |#define RSRC_ICON_VOL_28 233    
                            13534 ; 673  |//$FILENAME icon_vol_29.src
                            13535 ; 674  |#define RSRC_ICON_VOL_29 234    
                            13536 ; 675  |//$FILENAME icon_vol_30.src
                            13537 ; 676  |#define RSRC_ICON_VOL_30 235    
                            13538 ; 677  |//$FILENAME icon_vol_31.src
                            13539 ; 678  |#define RSRC_ICON_VOL_31 236    
                            13540 ; 679  |
                            13541 ; 680  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13542 ; 681  |// Splash Screen Stuff
                            13543 ; 682  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13544 ; 683  |//$FILENAME st_bw1.src
                            13545 ; 684  |#define RSRC_SPLASH_SCREEN 237    
                            13546 ; 685  |//$FILENAME siglogo1.src
                            13547 ; 686  |#define RSRC_SPLASH_SCREEN_1 238    
                            13548 ; 687  |//$FILENAME siglogo2.src
                            13549 ; 688  |#define RSRC_SPLASH_SCREEN_2 239    
                            13550 ; 689  |//$FILENAME siglogo3.src
                            13551 ; 690  |#define RSRC_SPLASH_SCREEN_3 240    
                            13552 ; 691  |//$FILENAME siglogo4.src
                            13553 ; 692  |#define RSRC_SPLASH_SCREEN_4 241    
                            13554 ; 693  |//$FILENAME siglogo5.src
                            13555 ; 694  |#define RSRC_SPLASH_SCREEN_5 242    
                            13556 ; 695  |//$FILENAME siglogo6.src
                            13557 ; 696  |#define RSRC_SPLASH_SCREEN_6 243    
                            13558 ; 697  |//$FILENAME siglogo7.src
                            13559 ; 698  |#define RSRC_SPLASH_SCREEN_7 244    
                            13560 ; 699  |//$FILENAME siglogo8.src
                            13561 ; 700  |#define RSRC_SPLASH_SCREEN_8 245    
                            13562 ; 701  |//$FILENAME siglogo9.src
                            13563 ; 702  |#define RSRC_SPLASH_SCREEN_9 246    
                            13564 ; 703  |//$FILENAME siglogo10.src
                            13565 ; 704  |#define RSRC_SPLASH_SCREEN_10 247    
                            13566 ; 705  |//$FILENAME siglogo11.src
                            13567 ; 706  |#define RSRC_SPLASH_SCREEN_11 248    
                            13568 ; 707  |//$FILENAME siglogo12.src
                            13569 ; 708  |#define RSRC_SPLASH_SCREEN_12 249    
                            13570 ; 709  |//$FILENAME siglogo13.src
                            13571 ; 710  |#define RSRC_SPLASH_SCREEN_13 250    
                            13572 ; 711  |//$FILENAME siglogo.src
                            13573 ; 712  |#define RSRC_SPLASH_SCREEN_ALL 251    
                            13574 ; 713  |
                            13575 ; 714  |//$FILENAME locked.src
                            13576 ; 715  |#define RSRC_LOCKED_SCREEN 252    
                            13577 ; 716  |
                            13578 ; 717  |/////////////////////////////////////////////////////////////////////////////////
                            13579 ; 718  |//  Shutdown
                            13580 ; 719  |/////////////////////////////////////////////////////////////////////////////////
                            13581 ; 720  |//$FILENAME string_arial_8_continue_holding_to_power_off.src
                            13582 ; 721  |#define RSRC_PDOWN_HOLD_STRING 253    
                            13583 ; 722  |//$FILENAME status_16_6_steps_0.src
                            13584 ; 723  |#define RSRC_PDOWN_STATUS_0 254    
                            13585 ; 724  |//$FILENAME status_16_6_steps_1.src
                            13586 ; 725  |#define RSRC_PDOWN_STATUS_1 255    
                            13587 ; 726  |//$FILENAME status_16_6_steps_2.src
                            13588 ; 727  |#define RSRC_PDOWN_STATUS_2 256    
                            13589 ; 728  |//$FILENAME status_16_6_steps_3.src
                            13590 ; 729  |#define RSRC_PDOWN_STATUS_3 257    
                            13591 ; 730  |//$FILENAME status_16_6_steps_4.src
                            13592 ; 731  |#define RSRC_PDOWN_STATUS_4 258    
                            13593 ; 732  |//$FILENAME status_16_6_steps_5.src
                            13594 ; 733  |#define RSRC_PDOWN_STATUS_5 259    
                            13595 ; 734  |//$FILENAME status_16_6_steps_6.src
                            13596 ; 735  |#define RSRC_PDOWN_STATUS_6 260    
                            13597 ; 736  |
                            13598 ; 737  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13599 ; 738  |// EQ
                            13600 ; 739  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13601 ; 740  |//$FILENAME eq_clear_icon.src
                            13602 ; 741  |#define RSRC_EQ_CLEAR_ICON 261    
                            13603 ; 742  |//$FILENAME rock_icon.src
                            13604 ; 743  |#define RSRC_ROCK_ICON 262    
                            13605 ; 744  |//$FILENAME jazz_icon.src
                            13606 ; 745  |#define RSRC_JAZZ_ICON 263    
                            13607 ; 746  |//$FILENAME classic_icon.src
                            13608 ; 747  |#define RSRC_CLASSIC_ICON 264    
                            13609 ; 748  |//$FILENAME pop_icon.src
                            13610 ; 749  |#define RSRC_POP_ICON 265    
                            13611 ; 750  |//$FILENAME custom_icon.src
                            13612 ; 751  |#define RSRC_CUSTOM_ICON 266    
                            13613 ; 752  |
                            13614 ; 753  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13615 ; 754  |// AB
                            13616 ; 755  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13617 ; 756  |//$FILENAME ab_mark_a.src
                            13618 ; 757  |#define RSRC_AB_MARK_A_ICON 267    
                            13619 ; 758  |//$FILENAME ab_mark_b.src
                            13620 ; 759  |#define RSRC_AB_MARK_B_ICON 268    
                            13621 ; 760  |
                            13622 ; 761  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13623 ; 762  |// Menu Display Resources
                            13624 ; 763  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13625 ; 764  |//$FILENAME string_music_menu.src
                            13626 ; 765  |#define RSRC_STRING_MUSIC_MENU 269    
                            13627 ; 766  |//$FILENAME string_mvideo_menu.src
                            13628 ; 767  |#define RSRC_STRING_MVIDEO_MENU 270    
                            13629 ; 768  |//$FILENAME string_jpeg_display_menu.src
                            13630 ; 769  |#define RSRC_STRING_JPEG_DISPLAY_MENU 271    
                            13631 ; 770  |//$FILENAME string_jpeg_manual_menu.src
                            13632 ; 771  |#define RSRC_STRING_JPEG_MANUAL_MENU 272    
                            13633 ; 772  |//$FILENAME string_jpeg_slideshow_menu.src
                            13634 ; 773  |#define RSRC_STRING_JPEG_SLIDESHOW_MENU 273    
                            13635 ; 774  |//$FILENAME string_jpeg_thumbnail_menu.src
                            13636 ; 775  |#define RSRC_STRING_JPEG_THUMBNAIL_MENU 274    
                            13637 ; 776  |//$FILENAME string_voice_menu.src
                            13638 ; 777  |#define RSRC_STRING_VOICE_MENU 275    
                            13639 ; 778  |//$FILENAME string_audible_menu.src
                            13640 ; 779  |#define RSRC_STRING_AUDIBLE_MENU 276    
                            13641 ; 780  |//$FILENAME string_fmtuner_menu.src
                            13642 ; 781  |#define RSRC_STRING_FMTUNER_MENU 277    
                            13643 ; 782  |//$FILENAME string_settings_menu.src
                            13644 ; 783  |#define RSRC_STRING_SETTINGS_MENU 278    
                            13645 ; 784  |//$FILENAME string_eq_menu.src
                            13646 ; 785  |#define RSRC_STRING_EQ_MENU 279    
                            13647 ; 786  |//$FILENAME string_playmode_menu.src
                            13648 ; 787  |#define RSRC_STRING_PLAYMODE_MENU 280    
                            13649 ; 788  |//$FILENAME string_contrast_menu.src
                            13650 ; 789  |#define RSRC_STRING_CONTRAST_MENU 281    
                            13651 ; 790  |//$FILENAME string_pwrsavings_menu.src
                            13652 ; 791  |#define RSRC_STRING_PWRSAVINGS_MENU 282    
                            13653 ; 792  |//$FILENAME string_time_date_menu.src
                            13654 ; 793  |#define RSRC_STRING_TIME_DATE_MENU 283    
                            13655 ; 794  |//$FILENAME string_set_time_menu.src
                            13656 ; 795  |#define RSRC_STRING_SET_TIME_MENU 284    
                            13657 ; 796  |//$FILENAME string_set_date_menu.src
                            13658 ; 797  |#define RSRC_STRING_SET_DATE_MENU 285    
                            13659 ; 798  |//$FILENAME string_exit_menu.src
                            13660 ; 799  |#define RSRC_STRING_EXIT_MENU 286    
                            13661 ; 800  |//$FILENAME string_rock_menu.src
                            13662 ; 801  |#define RSRC_STRING_ROCK_MENU 287    
                            13663 ; 802  |//$FILENAME string_pop_menu.src
                            13664 ; 803  |#define RSRC_STRING_POP_MENU 288    
                            13665 ; 804  |//$FILENAME string_classic_menu.src
                            13666 ; 805  |#define RSRC_STRING_CLASSIC_MENU 289    
                            13667 ; 806  |//$FILENAME string_normal_menu.src
                            13668 ; 807  |#define RSRC_STRING_NORMAL_MENU 290    
                            13669 ; 808  |//$FILENAME string_jazz_menu.src
                            13670 ; 809  |#define RSRC_STRING_JAZZ_MENU 291    
                            13671 ; 810  |//$FILENAME string_repeat1_menu.src
                            13672 ; 811  |#define RSRC_STRING_REPEAT1_MENU 292    
                            13673 ; 812  |//$FILENAME string_repeatall_menu.src
                            13674 ; 813  |#define RSRC_STRING_REPEATALL_MENU 293    
                            13675 ; 814  |//$FILENAME string_shuffle_menu.src
                            13676 ; 815  |#define RSRC_STRING_SHUFFLE_MENU 294    
                            13677 ; 816  |//$FILENAME string_repeatshuffle_menu.src
                            13678 ; 817  |#define RSRC_STRING_SHUFFLEREPEAT_MENU 295    
                            13679 ; 818  |//$FILENAME string_disable_menu.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13680 ; 819  |#define RSRC_STRING_DISABLE_MENU 296    
                            13681 ; 820  |//$FILENAME string_1min_menu.src
                            13682 ; 821  |#define RSRC_STRING_1MIN_MENU 297    
                            13683 ; 822  |//$FILENAME string_2min_menu.src
                            13684 ; 823  |#define RSRC_STRING_2MIN_MENU 298    
                            13685 ; 824  |//$FILENAME string_5min_menu.src
                            13686 ; 825  |#define RSRC_STRING_5MIN_MENU 299    
                            13687 ; 826  |//$FILENAME string_10min_menu.src
                            13688 ; 827  |#define RSRC_STRING_10MIN_MENU 300    
                            13689 ; 828  |//$FILENAME string_system_menu.src
                            13690 ; 829  |#define RSRC_STRING_SYSTEM_MENU 301    
                            13691 ; 830  |//$FILENAME string_about_menu.src
                            13692 ; 831  |#define RSRC_STRING_ABOUT_MENU 302    
                            13693 ; 832  |//$FILENAME string_delete_menu.src
                            13694 ; 833  |#define RSRC_STRING_DELETE_MENU 303    
                            13695 ; 834  |//$FILENAME string_record_menu.src
                            13696 ; 835  |#define RSRC_STRING_RECORD_MENU 304    
                            13697 ; 836  |//$FILENAME string_spectrogram_menu.src
                            13698 ; 837  |#define RSRC_STRING_SPECTROGRAM_MENU 305    
                            13699 ; 838  |
                            13700 ; 839  |//$FILENAME string_end_of_slide_show.src
                            13701 ; 840  |#define RSRC_STRING_END_OF_SLIDE_SHOW 306    
                            13702 ; 841  |
                            13703 ; 842  |//$FILENAME string_mb.src
                            13704 ; 843  |#define RSRC_STRING_MB 307    
                            13705 ; 844  |
                            13706 ; 845  |//$FILENAME internal_media.src
                            13707 ; 846  |#define RSRC_INT_MEDIA 308    
                            13708 ; 847  |//$FILENAME external_media.src
                            13709 ; 848  |#define RSRC_EXT_MEDIA 309    
                            13710 ; 849  |
                            13711 ; 850  |//$FILENAME about_title.src
                            13712 ; 851  |#define RSRC_ABOUT_TITLE 310    
                            13713 ; 852  |//$FILENAME player_name.src
                            13714 ; 853  |#define RSRC_PLAYER_NAME_VER 311    
                            13715 ; 854  |
                            13716 ; 855  |//$FILENAME settings_title.src
                            13717 ; 856  |#define RSRC_SETTINGS_TITLE 312    
                            13718 ; 857  |//$FILENAME jpeg_display_title.src
                            13719 ; 858  |#define RSRC_JPEG_DISPLAY_TITLE 313    
                            13720 ; 859  |//$FILENAME erase_title.src
                            13721 ; 860  |#define RSRC_ERASE_TITLE 314    
                            13722 ; 861  |
                            13723 ; 862  |//$FILENAME del_warning_no.src
                            13724 ; 863  |#define RSRC_DELETE_NO 315    
                            13725 ; 864  |//$FILENAME del_warning_yes.src
                            13726 ; 865  |#define RSRC_DELETE_YES 316    
                            13727 ; 866  |//$FILENAME del_warning_line1.src
                            13728 ; 867  |#define RSRC_WARNING_MSG_LINE1 317    
                            13729 ; 868  |//$FILENAME del_warning_line2.src
                            13730 ; 869  |#define RSRC_WARNING_MSG_LINE2 318    
                            13731 ; 870  |//$FILENAME lowbattery.src
                            13732 ; 871  |#define RSRC_BROWNOUT_BITMAP 319    
                            13733 ; 872  |//$FILENAME vbr.src
                            13734 ; 873  |#define RSRC_VBR_BITMAP 320    
                            13735 ; 874  |
                            13736 ; 875  |//$FILENAME string_song.src
                            13737 ; 876  |#define RSRC_STRING_SONG_COLON 321    
                            13738 ; 877  |//$FILENAME string_voice.src
                            13739 ; 878  |#define RSRC_STRING_VOICE_COLON 322    
                            13740 ; 879  |
                            13741 ; 880  |//$FILENAME time_date_title.src
                            13742 ; 881  |#define RSRC_TIME_DATE_TITLE 323    
                            13743 ; 882  |//$FILENAME set_time_title.src
                            13744 ; 883  |#define RSRC_SET_TIME_TITLE 324    
                            13745 ; 884  |//$FILENAME set_date_title.src
                            13746 ; 885  |#define RSRC_SET_DATE_TITLE 325    
                            13747 ; 886  |//$FILENAME string_searching.src
                            13748 ; 887  |#define RSRC_STRING_SEARCHING 326    
                            13749 ; 888  |/////////////////////////////////////////////////////////////////////////////////
                            13750 ; 889  |//  Save Changes
                            13751 ; 890  |/////////////////////////////////////////////////////////////////////////////////
                            13752 ; 891  |//$FILENAME save_changes_yes.src
                            13753 ; 892  |#define RSRC_SAVE_CHANGES_YES 327    
                            13754 ; 893  |//$FILENAME save_changes_no.src
                            13755 ; 894  |#define RSRC_SAVE_CHANGES_NO 328    
                            13756 ; 895  |//$FILENAME save_changes_cancel.src
                            13757 ; 896  |#define RSRC_SAVE_CHANGES_CANCEL 329    
                            13758 ; 897  |//$FILENAME save_changes_clear.src
                            13759 ; 898  |#define RSRC_SAVE_CHANGES_CLEAR 330    
                            13760 ; 899  |/////////////////////////////////////////////////////////////////////////////////
                            13761 ; 900  |//  Contrast
                            13762 ; 901  |/////////////////////////////////////////////////////////////////////////////////
                            13763 ; 902  |//$FILENAME contrast_title.src
                            13764 ; 903  |#define RSRC_CONTRAST_TITLE 331    
                            13765 ; 904  |//$FILENAME contrast_frame.src
                            13766 ; 905  |#define RSRC_CONTRAST_FRAME 332    
                            13767 ; 906  |//$FILENAME contrast_level0.src
                            13768 ; 907  |#define RSRC_CONTRAST_LEVEL_0 333    
                            13769 ; 908  |//$FILENAME contrast_level1.src
                            13770 ; 909  |#define RSRC_CONTRAST_LEVEL_1 334    
                            13771 ; 910  |//$FILENAME contrast_level2.src
                            13772 ; 911  |#define RSRC_CONTRAST_LEVEL_2 335    
                            13773 ; 912  |//$FILENAME contrast_level3.src
                            13774 ; 913  |#define RSRC_CONTRAST_LEVEL_3 336    
                            13775 ; 914  |//$FILENAME contrast_level4.src
                            13776 ; 915  |#define RSRC_CONTRAST_LEVEL_4 337    
                            13777 ; 916  |//$FILENAME contrast_level5.src
                            13778 ; 917  |#define RSRC_CONTRAST_LEVEL_5 338    
                            13779 ; 918  |//$FILENAME contrast_level6.src
                            13780 ; 919  |#define RSRC_CONTRAST_LEVEL_6 339    
                            13781 ; 920  |//$FILENAME contrast_level7.src
                            13782 ; 921  |#define RSRC_CONTRAST_LEVEL_7 340    
                            13783 ; 922  |//$FILENAME contrast_level8.src
                            13784 ; 923  |#define RSRC_CONTRAST_LEVEL_8 341    
                            13785 ; 924  |//$FILENAME contrast_level9.src
                            13786 ; 925  |#define RSRC_CONTRAST_LEVEL_9 342    
                            13787 ; 926  |//$FILENAME contrast_level10.src
                            13788 ; 927  |#define RSRC_CONTRAST_LEVEL_10 343    
                            13789 ; 928  |
                            13790 ; 929  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13791 ; 930  |// Funclets
                            13792 ; 931  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13793 ; 932  |//$FILENAME Funclet_SetRTC.src
                            13794 ; 933  |#define RSRC_FUNCLET_SET_RTC 344    
                            13795 ; 934  |//$FILENAME Funclet_InitRTC.src
                            13796 ; 935  |#define RSRC_FUNCLET_INIT_RTC 345    
                            13797 ; 936  |//$FILENAME Funclet_ReadRTC.src
                            13798 ; 937  |#define RSRC_FUNCLET_READ_RTC 346    
                            13799 ; 938  |//$FILENAME Funclet_SysResetAllInt.src
                            13800 ; 939  |#define RSRC_FUNCLET_SYSRESETALLINT 347    
                            13801 ; 940  |//$FILENAME Funclet_SysSetupDecVec.src
                            13802 ; 941  |#define RSRC_FUNCLET_SYSSETUPDECVEC 348    
                            13803 ; 942  |//$FILENAME Funclet_SysSetupEncVec.src
                            13804 ; 943  |#define RSRC_FUNCLET_SYSSETUPENCVEC 349    
                            13805 ; 944  |//$FILENAME Funclet_SysTimeInit.src
                            13806 ; 945  |#define RSRC_FUNCLET_SYSTIMEINIT 350    
                            13807 ; 946  |//$FILENAME Funclet_AnalogInit.src
                            13808 ; 947  |#define RSRC_FUNCLET_ANALOGINIT 351    
                            13809 ; 948  |//$FILENAME Funclet_UsbConnected.src
                            13810 ; 949  |#define RSRC_FUNCLET_USBCONNECTED 352    
                            13811 ; 950  |//$FILENAME Funclet_ButtonInit.src
                            13812 ; 951  |#define RSRC_FUNCLET_BUTTONINIT 353    
                            13813 ; 952  |//$FILENAME Funclet_PowerUpHeadPhones.src
                            13814 ; 953  |#define RSRC_FUNCLET_POWERUPHEADPHONES 354    
                            13815 ; 954  |//$FILENAME Funclet_PowerDownHeadPhones.src
                            13816 ; 955  |#define RSRC_FUNCLET_POWERDOWNHEADPHONES 355    
                            13817 ; 956  |//$FILENAME Funclet_StartProject.src
                            13818 ; 957  |#define RSRC_FUNCLET_STARTPROJECT 356    
                            13819 ; 958  |//$FILENAME Funclet_ModuleSetTimer.src
                            13820 ; 959  |#define RSRC_FUNCLET_MODULESETTIMER 357    
                            13821 ; 960  |//$FILENAME null.src
                            13822 ; 961  |#define RSRC_FUNCLET_MEDIADETECTION 358    
                            13823 ; 962  |//$FILENAME Funclet_SysStopDecoder.src
                            13824 ; 963  |#define RSRC_FUNCLET_SYSSTOPDECODER 359    
                            13825 ; 964  |//$FILENAME Funclet_SysStopEncoder.src
                            13826 ; 965  |#define RSRC_FUNCLET_SYSSTOPENCODER 360    
                            13827 ; 966  |//$FILENAME Funclet_SysSetDecoder.src
                            13828 ; 967  |#define RSRC_FUNCLET_SYSSETDECODER 361    
                            13829 ; 968  |//$FILENAME Funclet_SysSetEncoder.src
                            13830 ; 969  |#define RSRC_FUNCLET_SYSSETENCODER 362    
                            13831 ; 970  |//$FILENAME null.src
                            13832 ; 971  |#define RSRC_FUNCLET_PROCESSPT 363    
                            13833 ; 972  |//$FILENAME Funclet_DisplaySplashScreen.src
                            13834 ; 973  |#define RSRC_FUNCLET_DISPLAYSPLASHSCREEN 364    
                            13835 ; 974  |//$FILENAME Funclet_SysGetVolume.src
                            13836 ; 975  |#define RSRC_FUNCLET_SYSGETVOLUME 365    
                            13837 ; 976  |//$FILENAME null.src
                            13838 ; 977  |#define RSRC_FUNCLET_MMCENUMERATEPHYSICALDEVICE 366    
                            13839 ; 978  |//$FILENAME null.src
                            13840 ; 979  |#define RSRC_FUNCLET_RESETDEVICE 367    
                            13841 ; 980  |//$FILENAME null.src
                            13842 ; 981  |#define RSRC_FUNCLET_PROCESSCSD 368    
                            13843 ; 982  |//$FILENAME null.src
                            13844 ; 983  |#define RSRC_FUNCLET_PROCESSPARTITION 369    
                            13845 ; 984  |//$FILENAME null.src
                            13846 ; 985  |#define RSRC_FUNCLET_PARTITIONENTRYCOPY 370    
                            13847 ; 986  |//$FILENAME Funclet_MixerMasterFadeOut.src
                            13848 ; 987  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_OUT 371    
                            13849 ; 988  |//$FILENAME Funclet_MixerMasterFadeIn.src
                            13850 ; 989  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_IN 372    
                            13851 ; 990  |//$FILENAME Funclet_EncSetProperties.src
                            13852 ; 991  |#define RSRC_FUNCLET_ENCSETPROPERTIES 373    
                            13853 ; 992  |//$FILENAME null.src
                            13854 ; 993  |#define RSRC_FUNCLET_DOESMBREXIST 374    
                            13855 ; 994  |//$FILENAME null.src
                            13856 ; 995  |#define RSRC_FUNCLET_EXTRACTPARTITIONPARAMETERS 375    
                            13857 ; 996  |//$FILENAME Funclet_SaveSettings.src
                            13858 ; 997  |#define RSRC_FUNCLET_SYSSAVESETTINGS 376    
                            13859 ; 998  |//$FILENAME Funclet_LoadSettings.src
                            13860 ; 999  |#define RSRC_FUNCLET_SYSLOADSETTINGS 377    
                            13861 ; 1000 |///////////////////////////////////////////////////////////////
                            13862 ; 1001 |// Sanyo FM Tuner Fuclet
                            13863 ; 1002 |///////////////////////////////////////////////////////////////
                            13864 ; 1003 |//RSRC_FUNCLET_TUNER_DRIVER_INIT    equ      334    ;$FILENAME Funclet_TunerDriverInit.src
                            13865 ; 1004 |//RSRC_FUNCLET_TUNER_SCAN_STATIONS    equ      335    ;$FILENAME Funclet_TunerScanStations.src
                            13866 ; 1005 |//RSRC_FUNCLET_TUNER_SET_TO_PRESET    equ      336    ;$FILENAME Funclet_TunerSetToPreset.src
                            13867 ; 1006 |//RSRC_FUNCLET_TUNER_SET_MONO_STEREO    equ      337    ;$FILENAME Funclet_TunerSetMonoStereo.src
                            13868 ; 1007 |//RSRC_FUNCLET_TUNER_SET_STANDBY    equ      338    ;$FILENAME Funclet_TunerSetStandby.src
                            13869 ; 1008 |//RSRC_FUNCLET_TUNER_SET_PRESET    equ      339    ;$FILENAME Funclet_TunerSetPreset.src
                            13870 ; 1009 |//RSRC_FUNCLET_TUNER_ERASE_PRESET    equ      340    ;$FILENAME Funclet_TunerErasePreset.src
                            13871 ; 1010 |//RSRC_FUNCLET_TUNER_SET_IF    equ      341    ;$FILENAME Funclet_TunerSetIf.src
                            13872 ; 1011 |//RSRC_FUNCLET_TUNER_WRITE_IF_OSC    equ      342    ;$FILENAME Funclet_TunerWriteIfOSc.src
                            13873 ; 1012 |//RSRC_FUNCLET_TUNER_GET_FIELD_STRENGTH    equ      343    ;$FILENAME Funclet_TunerGetFieldStrength.src
                            13874 ; 1013 |//RSRC_FUNCLET_TUNER_INIT_RF_CAP_OSC    equ      344    ;$FILENAME Funclet_TunerInitRfCapOsc.src
                            13875 ; 1014 |//RSRC_FUNCLET_TUNER_STORE_FM_STATION    equ      345    ;$FILENAME Funclet_TunerStoreFmStation.src
                            13876 ; 1015 |//RSRC_FUNCLET_TUNER_STORE_FM_PRESET    equ      346    ;$FILENAME Funclet_TunerStoreFmPreset.src
                            13877 ; 1016 |//RSRC_FUNCLET_TUNER_SET_REGION    equ      347    ;$FILENAME Funclet_TunerSetRegion.src
                            13878 ; 1017 |
                            13879 ; 1018 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13880 ; 1019 |// WMA Resources
                            13881 ; 1020 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13882 ; 1021 |//$FILENAME wmaCore.src
                            13883 ; 1022 |#define RSRC_WMA_CORE 378    
                            13884 ; 1023 |//$FILENAME wmaMidLow.src
                            13885 ; 1024 |#define RSRC_WMA_MIDLOW 379    
                            13886 ; 1025 |//$FILENAME wmaHigh.src
                            13887 ; 1026 |#define RSRC_WMA_HIGH 380    
                            13888 ; 1027 |//$FILENAME wmaHighMid.src
                            13889 ; 1028 |#define RSRC_WMA_HIGHMID 381    
                            13890 ; 1029 |//$FILENAME wmaMid.src
                            13891 ; 1030 |#define RSRC_WMA_MID 382    
                            13892 ; 1031 |//$FILENAME wmaLow.src
                            13893 ; 1032 |#define RSRC_WMA_LOW 383    
                            13894 ; 1033 |//$FILENAME wmaX1mem.src
                            13895 ; 1034 |#define RSRC_WMA_DATA_X1 384    
                            13896 ; 1035 |//$FILENAME wmaYmem.src
                            13897 ; 1036 |#define RSRC_WMA_DATA_Y 385    
                            13898 ; 1037 |//$FILENAME wmaLXmem.src
                            13899 ; 1038 |#define RSRC_WMA_DATA_L_X 386    
                            13900 ; 1039 |//$FILENAME wmaLYmem.src
                            13901 ; 1040 |#define RSRC_WMA_DATA_L_Y 387    
                            13902 ; 1041 |//$FILENAME wmaHuff44Qb.src
                            13903 ; 1042 |#define RSRC_WMA_HUFF44QB 388    
                            13904 ; 1043 |//$FILENAME wmaHuff44Ob.src
                            13905 ; 1044 |#define RSRC_WMA_HUFF44OB 389    
                            13906 ; 1045 |//$FILENAME wmaHuff16Ob.src
                            13907 ; 1046 |#define RSRC_WMA_HUFF16OB 390    
                            13908 ; 1047 |//$FILENAME drmpdcommon.src
                            13909 ; 1048 |#define RSRC_DRMPD_COMMON 391    
                            13910 ; 1049 |//$FILENAME januswmasupport.src
                            13911 ; 1050 |#define RSRC_JANUS_WMASUPPORT 392    
                            13912 ; 1051 |//$FILENAME wmalicenseinit.src
                            13913 ; 1052 |#define RSRC_WMA_LICENSEINIT 393    
                            13914 ; 1053 |//$FILENAME wma_tables.src
                            13915 ; 1054 |#define RSRC_WMA_TABLES 394    
                            13916 ; 1055 |//$FILENAME janus_tables.src
                            13917 ; 1056 |#define RSRC_JANUS_TABLES 395    
                            13918 ; 1057 |//$FILENAME wma_constants.src
                            13919 ; 1058 |#define RSRC_WMA_CONSTANTS 396    
                            13920 ; 1059 |//$FILENAME janus_constants.src
                            13921 ; 1060 |#define RSRC_JANUS_CONSTANTS 397    
                            13922 ; 1061 |//$FILENAME janus_xmem.src
                            13923 ; 1062 |#define RSRC_JANUS_X 398    
                            13924 ; 1063 |//$FILENAME janusy_data.src
                            13925 ; 1064 |#define RSRC_JANUSY_DATA 399    
                            13926 ; 1065 |
                            13927 ; 1066 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13928 ; 1067 |// Fonts -- these are last because they are very large
                            13929 ; 1068 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13930 ; 1069 |//$FILENAME font_table.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13931 ; 1070 |#define RSRC_FONT_TABLE 400    
                            13932 ; 1071 |//$FILENAME font_PGM.src
                            13933 ; 1072 |#define RSRC_PGM_8 401    
                            13934 ; 1073 |//$FILENAME font_SGMs.src
                            13935 ; 1074 |#define RSRC_SGMS_8 402    
                            13936 ; 1075 |//$FILENAME font_script_00.src
                            13937 ; 1076 |#define RSRC_SCRIPT_00_8 403    
                            13938 ; 1077 |//$FILENAME font_scripts.src
                            13939 ; 1078 |#define RSRC_SCRIPTS_8 404    
                            13940 ; 1079 |//$FILENAME font_PDM.src
                            13941 ; 1080 |#define RSRC_PDM 405    
                            13942 ; 1081 |//$FILENAME font_SDMs.src
                            13943 ; 1082 |#define RSRC_SDMS 406    
                            13944 ; 1083 |//$FILENAME bitmap_warning.src
                            13945 ; 1084 |#define RSRC_WARNING 407    
                            13946 ; 1085 |//$FILENAME bitmap_device_full.src
                            13947 ; 1086 |#define RSRC_DEVICE_FULL 408    
                            13948 ; 1087 |
                            13949 ; 1088 |
                            13950 ; 1089 |//$FILENAME lcd_controller_init.src
                            13951 ; 1090 |#define RSRC_LCD_INIT_SEQ 409    
                            13952 ; 1091 |
                            13953 ; 1092 |//$FILENAME Funclet_DBCSToUnicode.src
                            13954 ; 1093 |#define RSRC_FUNCLET_DBCS_TO_UNICODE 410    
                            13955 ; 1094 |//$FILENAME Funclet_DBCSToUnicodeDstXSrcY.src
                            13956 ; 1095 |#define RSRC_FUNCLET_DBCS_TO_UNICODE_DSTX_SRCY 411    
                            13957 ; 1096 |//$FILENAME Funclet_LCDSetFont.src
                            13958 ; 1097 |#define RSRC_FUNCLET_SET_FONT 412    
                            13959 ; 1098 |//$FILENAME Funclet_GetTextWidthAddressUnicode.src
                            13960 ; 1099 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE 413    
                            13961 ; 1100 |//$FILENAME Funclet_GetTextWidthResourceUnicode.src
                            13962 ; 1101 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE 414    
                            13963 ; 1102 |//$FILENAME Funclet_GetTextWidthAddressDBCS.src
                            13964 ; 1103 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS 415    
                            13965 ; 1104 |//$FILENAME Funclet_GetTextWidthResourceDBCS.src
                            13966 ; 1105 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS 416    
                            13967 ; 1106 |//$FILENAME Funclet_ChipSerialNumberInit.src
                            13968 ; 1107 |#define RSRC_FUNCLET_CHIPSERIALNUMBERINIT 417    
                            13969 ; 1108 |//$FILENAME Funclet_InternalMediaSerialNumberInit.src
                            13970 ; 1109 |#define RSRC_FUNCLET_INTERNALMEDIASERIALNUMBERINIT 418    
                            13971 ; 1110 |//$FILENAME Funclet_ChipGetSerialNumber.src
                            13972 ; 1111 |#define RSRC_FUNCLET_CHIPGETSERIALNUMBER 419    
                            13973 ; 1112 |//$FILENAME Funclet_CreateNullSerialNumber.src
                            13974 ; 1113 |#define RSRC_FUNCLET_CREATENULLSERIALNUMBER 420    
                            13975 ; 1114 |//$FILENAME Funclet_ConvertHexToASCII.src
                            13976 ; 1115 |#define RSRC_FUNCLET_CONVERTHEXTOASCII 421    
                            13977 ; 1116 |//$FILENAME Funclet_LowResolutionAdcInit.src
                            13978 ; 1117 |#define RSRC_FUNCLET_LOWRESOLUTIONADCINIT 422    
                            13979 ; 1118 |
                            13980 ; 1119 |
                            13981 ; 1120 |//$FILENAME sysrecord.src
                            13982 ; 1121 |#define RSRC_SYSRECORD_CODE 423    
                            13983 ; 1122 |
                            13984 ; 1123 |//$FILENAME string_record_settings.src
                            13985 ; 1124 |#define RSRC_STRING_RECORD_SETTINGS 424    
                            13986 ; 1125 |//$FILENAME string_sample_rate.src
                            13987 ; 1126 |#define RSRC_STRING_SAMPLE_RATE 425    
                            13988 ; 1127 |//$FILENAME string_encoder.src
                            13989 ; 1128 |#define RSRC_STRING_ENCODER 426    
                            13990 ; 1129 |//$FILENAME string_adpcm.src
                            13991 ; 1130 |#define RSRC_STRING_ADPCM 427    
                            13992 ; 1131 |//$FILENAME string_msadpcm.src
                            13993 ; 1132 |#define RSRC_STRING_MSADPCM 428    
                            13994 ; 1133 |//$FILENAME string_imadpcm.src
                            13995 ; 1134 |#define RSRC_STRING_IMADPCM 429    
                            13996 ; 1135 |//$FILENAME string_pcm.src
                            13997 ; 1136 |#define RSRC_STRING_PCM 430    
                            13998 ; 1137 |//$FILENAME string_internal.src
                            13999 ; 1138 |#define RSRC_STRING_INTERNAL 431    
                            14000 ; 1139 |//$FILENAME string_external.src
                            14001 ; 1140 |#define RSRC_STRING_EXTERNAL 432    
                            14002 ; 1141 |//$FILENAME string_device.src
                            14003 ; 1142 |#define RSRC_STRING_DEVICE 433    
                            14004 ; 1143 |//$FILENAME string_source.src
                            14005 ; 1144 |#define RSRC_STRING_SOURCE 434    
                            14006 ; 1145 |//$FILENAME string_microphone.src
                            14007 ; 1146 |#define RSRC_STRING_MICROPHONE 435    
                            14008 ; 1147 |//$FILENAME string_linein.src
                            14009 ; 1148 |#define RSRC_STRING_LINEIN 436    
                            14010 ; 1149 |//$FILENAME string_bits.src
                            14011 ; 1150 |#define RSRC_STRING_BITS 437    
                            14012 ; 1151 |//$FILENAME string_4.src
                            14013 ; 1152 |#define RSRC_STRING_4 438    
                            14014 ; 1153 |//$FILENAME string_8.src
                            14015 ; 1154 |#define RSRC_STRING_8 439    
                            14016 ; 1155 |//$FILENAME string_16.src
                            14017 ; 1156 |#define RSRC_STRING_16 440    
                            14018 ; 1157 |//$FILENAME string_24.src
                            14019 ; 1158 |#define RSRC_STRING_24 441    
                            14020 ; 1159 |//$FILENAME string_fm.src
                            14021 ; 1160 |#define RSRC_STRING_FM 442    
                            14022 ; 1161 |//$FILENAME string_mono.src
                            14023 ; 1162 |#define RSRC_STRING_MONO 443    
                            14024 ; 1163 |//$FILENAME string_stereo.src
                            14025 ; 1164 |#define RSRC_STRING_STEREO 444    
                            14026 ; 1165 |//$FILENAME string_8000hz.src
                            14027 ; 1166 |#define RSRC_STRING_8000HZ 445    
                            14028 ; 1167 |//$FILENAME string_11025hz.src
                            14029 ; 1168 |#define RSRC_STRING_11025HZ 446    
                            14030 ; 1169 |//$FILENAME string_16000hz.src
                            14031 ; 1170 |#define RSRC_STRING_16000HZ 447    
                            14032 ; 1171 |//$FILENAME string_22050hz.src
                            14033 ; 1172 |#define RSRC_STRING_22050HZ 448    
                            14034 ; 1173 |//$FILENAME string_32000hz.src
                            14035 ; 1174 |#define RSRC_STRING_32000HZ 449    
                            14036 ; 1175 |//$FILENAME string_44100hz.src
                            14037 ; 1176 |#define RSRC_STRING_44100HZ 450    
                            14038 ; 1177 |//$FILENAME string_48000hz.src
                            14039 ; 1178 |#define RSRC_STRING_48000HZ 451    
                            14040 ; 1179 |//$FILENAME string_channels.src
                            14041 ; 1180 |#define RSRC_STRING_CHANNELS 452    
                            14042 ; 1181 |//$FILENAME string_spaces.src
                            14043 ; 1182 |#define RSRC_STRING_SPACES 453    
                            14044 ; 1183 |//$FILENAME slider_bar.src
                            14045 ; 1184 |#define RSRC_SLIDER_BAR 454    
                            14046 ; 1185 |//$FILENAME slider_bar_inv.src
                            14047 ; 1186 |#define RSRC_SLIDER_BAR_INV 455    
                            14048 ; 1187 |//$FILENAME slider_track.src
                            14049 ; 1188 |#define RSRC_SLIDER_TRACK 456    
                            14050 ; 1189 |//$FILENAME string_no_files.src
                            14051 ; 1190 |#define RSRC_STRING_NO_FILES 457    
                            14052 ; 1191 |
                            14053 ; 1192 |/////////////////////////////////////////////////////////////////////
                            14054 ; 1193 |//  Time and Date Resource Strings
                            14055 ; 1194 |/////////////////////////////////////////////////////////////////////
                            14056 ; 1195 |//$FILENAME string_sunday.src
                            14057 ; 1196 |#define RSRC_STRING_SUNDAY 458    
                            14058 ; 1197 |//$FILENAME string_monday.src
                            14059 ; 1198 |#define RSRC_STRING_MONDAY 459    
                            14060 ; 1199 |//$FILENAME string_tuesday.src
                            14061 ; 1200 |#define RSRC_STRING_TUESDAY 460    
                            14062 ; 1201 |//$FILENAME string_wednesday.src
                            14063 ; 1202 |#define RSRC_STRING_WEDNESDAY 461    
                            14064 ; 1203 |//$FILENAME string_thursday.src
                            14065 ; 1204 |#define RSRC_STRING_THURSDAY 462    
                            14066 ; 1205 |//$FILENAME string_friday.src
                            14067 ; 1206 |#define RSRC_STRING_FRIDAY 463    
                            14068 ; 1207 |//$FILENAME string_saturday.src
                            14069 ; 1208 |#define RSRC_STRING_SATURDAY 464    
                            14070 ; 1209 |//$FILENAME string_am.src
                            14071 ; 1210 |#define RSRC_STRING_AM 465    
                            14072 ; 1211 |//$FILENAME string_pm.src
                            14073 ; 1212 |#define RSRC_STRING_PM 466    
                            14074 ; 1213 |//$FILENAME string_amclear.src
                            14075 ; 1214 |#define RSRC_STRING_AMCLEAR 467    
                            14076 ; 1215 |//$FILENAME string_slash.src
                            14077 ; 1216 |#define RSRC_STRING_SLASH 468    
                            14078 ; 1217 |//$FILENAME string_colon.src
                            14079 ; 1218 |#define RSRC_STRING_COLON 469    
                            14080 ; 1219 |//$FILENAME string_12hour.src
                            14081 ; 1220 |#define RSRC_STRING_12HOUR 470    
                            14082 ; 1221 |//$FILENAME string_24hour.src
                            14083 ; 1222 |#define RSRC_STRING_24HOUR 471    
                            14084 ; 1223 |//$FILENAME string_format.src
                            14085 ; 1224 |#define RSRC_STRING_FORMAT 472    
                            14086 ; 1225 |//$FILENAME string_mmddyyyy.src
                            14087 ; 1226 |#define RSRC_STRING_MMDDYYYY 473    
                            14088 ; 1227 |//$FILENAME string_ddmmyyyy.src
                            14089 ; 1228 |#define RSRC_STRING_DDMMYYYY 474    
                            14090 ; 1229 |//$FILENAME string_yyyymmdd.src
                            14091 ; 1230 |#define RSRC_STRING_YYYYMMDD 475    
                            14092 ; 1231 |//$FILENAME string_ok.src
                            14093 ; 1232 |#define RSRC_STRING_OK 476    
                            14094 ; 1233 |//$FILENAME string_cancel.src
                            14095 ; 1234 |#define RSRC_STRING_CANCEL 477    
                            14096 ; 1235 |//$FILENAME negative_sign.src
                            14097 ; 1236 |#define RSRC_NEGATIVE_SIGN 478    
                            14098 ; 1237 |//$FILENAME string_dec_pt5.src
                            14099 ; 1238 |#define RSRC_DEC_PT5_STRING 479    
                            14100 ; 1239 |//$FILENAME string_dec_pt0.src
                            14101 ; 1240 |#define RSRC_DEC_PT0_STRING 480    
                            14102 ; 1241 |//$FILENAME string_db.src
                            14103 ; 1242 |#define RSRC_DB_STRING 481    
                            14104 ; 1243 |//$FILENAME string_hz2.src
                            14105 ; 1244 |#define RSRC_HZ2_STRING 482    
                            14106 ; 1245 |
                            14107 ; 1246 |
                            14108 ; 1247 |//$FILENAME record_settings_menu_code_bank.src
                            14109 ; 1248 |#define RSRC_RECORD_SETTINGS_MENU_CODE_BANK 483    
                            14110 ; 1249 |//$FILENAME metadata_codebank.src
                            14111 ; 1250 |#define RSRC_METADATA_CODEBANK 484    
                            14112 ; 1251 |//$FILENAME mp3metadata_codebank.src
                            14113 ; 1252 |#define RSRC_MP3_METADATA_CODEBANK 485    
                            14114 ; 1253 |//$FILENAME wmametadata_codebank.src
                            14115 ; 1254 |#define RSRC_WMA_METADATA_CODEBANK 486    
                            14116 ; 1255 |//$FILENAME wavmetadata_codebank.src
                            14117 ; 1256 |#define RSRC_WAV_METADATA_CODEBANK 487    
                            14118 ; 1257 |//$FILENAME smvmetadata_codebank.src
                            14119 ; 1258 |#define RSRC_SMV_METADATA_CODEBANK 488    
                            14120 ; 1259 |//$FILENAME playlist2init_codebank.src
                            14121 ; 1260 |#define RSRC_PLAYLIST2INIT_CODEBANK 489    
                            14122 ; 1261 |
                            14123 ; 1262 |//$FILENAME delete_successful.src
                            14124 ; 1263 |#define RSRC_DELETE_SUCCESSFUL 490    
                            14125 ; 1264 |//$FILENAME delete_error.src
                            14126 ; 1265 |#define RSRC_DELETE_ERROR 491    
                            14127 ; 1266 |//$FILENAME lic_expired.src
                            14128 ; 1267 |#define RSRC_LIC_EXPIRED 492    
                            14129 ; 1268 |//$FILENAME id3v2_codebank.src
                            14130 ; 1269 |#define RSRC_ID3V2_CODEBANK 493    
                            14131 ; 1270 |//$FILENAME id3v2lyrics_codebank.src
                            14132 ; 1271 |#define RSRC_ID3V2_LYRICS_CODEBANK 494    
                            14133 ; 1272 |//$FILENAME lyrics3_codebank.src
                            14134 ; 1273 |#define RSRC_LYRICS3_CODEBANK 495    
                            14135 ; 1274 |//$FILENAME lrc_codebank.src
                            14136 ; 1275 |#define RSRC_LRC_CODEBANK 496    
                            14137 ; 1276 |//$FILENAME lyrics_api_codebank.src
                            14138 ; 1277 |#define RSRC_LYRICS_API_CODEBANK 497    
                            14139 ; 1278 |//$FILENAME wmalyrics_codebank.src
                            14140 ; 1279 |#define RSRC_WMA_LYRICS_CODEBANK 498    
                            14141 ; 1280 |//$FILENAME apicframe_codebank.src
                            14142 ; 1281 |#define RSRC_APIC_FRAME_CODEBANK 499    
                            14143 ; 1282 |
                            14144 ; 1283 |//$FILENAME exmediaerror1.src
                            14145 ; 1284 |#define RSRC_EXTERNAL_MEDIA_ERROR1 500    
                            14146 ; 1285 |//$FILENAME exmediaerror2.src
                            14147 ; 1286 |#define RSRC_EXTERNAL_MEDIA_ERROR2 501    
                            14148 ; 1287 |//$FILENAME inmediaerror1.src
                            14149 ; 1288 |#define RSRC_INTERNAL_MEDIA_ERROR1 502    
                            14150 ; 1289 |
                            14151 ; 1290 |//$FILENAME backlight_title.src
                            14152 ; 1291 |#define RSRC_BACKLIGHT_TITLE 503    
                            14153 ; 1292 |//$FILENAME backlight_state_on.src
                            14154 ; 1293 |#define RSRC_BACKLIGHT_STATE_ON 504    
                            14155 ; 1294 |//$FILENAME backlight_state_off.src
                            14156 ; 1295 |#define RSRC_BACKLIGHT_STATE_OFF 505    
                            14157 ; 1296 |//$FILENAME backlightmenu.src
                            14158 ; 1297 |#define RSRC_BACKLIGHT_MENU_CODE_BANK 506    
                            14159 ; 1298 |//$FILENAME string_backlight_menu.src
                            14160 ; 1299 |#define RSRC_STRING_BACKLIGHT_MENU 507    
                            14161 ; 1300 |
                            14162 ; 1301 |//$FILENAME enc_mp3mod.src
                            14163 ; 1302 |#define RSRC_ENC_MP3_MOD_CODE 508    
                            14164 ; 1303 |//$FILENAME enc_mp3p.src
                            14165 ; 1304 |#define RSRC_ENC_MP3P_CODE 509    
                            14166 ; 1305 |//$FILENAME enc_mp3x.src
                            14167 ; 1306 |#define RSRC_ENC_MP3X_CODE 510    
                            14168 ; 1307 |//$FILENAME enc_mp3y.src
                            14169 ; 1308 |#define RSRC_ENC_MP3Y_CODE 511    
                            14170 ; 1309 |//$FILENAME mp3_implementation.src
                            14171 ; 1310 |#define RSRC_MP3_IMPLEMENTATION 512    
                            14172 ; 1311 |//$FILENAME string_mp3.src
                            14173 ; 1312 |#define RSRC_STRING_MP3 513    
                            14174 ; 1313 |//$FILENAME string_all.src
                            14175 ; 1314 |#define RSRC_STRING_ALL 514    
                            14176 ; 1315 |
                            14177 ; 1316 |//$FILENAME mediastartup.src
                            14178 ; 1317 |#define RSRC_NANDMEDIAINIT 515    
                            14179 ; 1318 |#define RSRC_NANDMEDIAALLOCATE 0
                            14180 ; 1319 |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                            14181 ; 1320 |#define RSRC_NANDMEDIAGETMEDIATABLE RSRC_NANDMEDIAINIT
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14182 ; 1321 |#define RSRC_NANDMEDIAGETINFO RSRC_NANDMEDIAINIT
                            14183 ; 1322 |#define RSRC_NANDMEDIAERASE 0
                            14184 ; 1323 |
                            14185 ; 1324 |//$FILENAME nanddatadriveinit.src
                            14186 ; 1325 |#define RSRC_NANDDATADRIVEINIT 516    
                            14187 ; 1326 |#define RSRC_NANDDATADRIVEGETINFO RSRC_NANDDATADRIVEREADSECTOR
                            14188 ; 1327 |#define RSRC_NANDDATADRIVESETINFO 0
                            14189 ; 1328 |//$FILENAME nanddatadrivereadsector.src
                            14190 ; 1329 |#define RSRC_NANDDATADRIVEREADSECTOR 517    
                            14191 ; 1330 |#define RSRC_NANDDATADRIVEWRITESECTOR RSRC_NANDDATADRIVEREADSECTOR
                            14192 ; 1331 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0
                            14193 ; 1332 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0
                            14194 ; 1333 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0
                            14195 ; 1334 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0
                            14196 ; 1335 |#define RSRC_NANDDATADRIVEERASE 0
                            14197 ; 1336 |#define RSRC_NANDDATADRIVEFLUSH RSRC_NANDDATADRIVEREADSECTOR
                            14198 ; 1337 |
                            14199 ; 1338 |#define RSRC_NANDSYSTEMDRIVEINIT RSRC_NANDMEDIAINIT
                            14200 ; 1339 |#define RSRC_NANDSYSTEMDRIVEGETINFO RSRC_NANDMEDIAINIT
                            14201 ; 1340 |#define RSRC_NANDSYSTEMDRIVESETINFO 0
                            14202 ; 1341 |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0
                            14203 ; 1342 |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0
                            14204 ; 1343 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0
                            14205 ; 1344 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0
                            14206 ; 1345 |#define RSRC_NANDSYSTEMDRIVEERASE 0
                            14207 ; 1346 |#define RSRC_NANDSYSTEMDRIVEFLUSH 0
                            14208 ; 1347 |
                            14209 ; 1348 |//$FILENAME vbr_codebank.src
                            14210 ; 1349 |#define RSRC_VBR_CODEBANK 518    
                            14211 ; 1350 |
                            14212 ; 1351 |//$FILENAME string_recordtest_menu.src
                            14213 ; 1352 |#define RSRC_STRING_RECORDTEST_MENU 519    
                            14214 ; 1353 |//$FILENAME string_recordtest_duration.src
                            14215 ; 1354 |#define RSRC_STRING_DURATION 520    
                            14216 ; 1355 |//$FILENAME string_recordtest_time5.src
                            14217 ; 1356 |#define RSRC_STRING_TIME5 521    
                            14218 ; 1357 |//$FILENAME string_recordtest_time10.src
                            14219 ; 1358 |#define RSRC_STRING_TIME10 522    
                            14220 ; 1359 |//$FILENAME string_recordtest_time30.src
                            14221 ; 1360 |#define RSRC_STRING_TIME30 523    
                            14222 ; 1361 |//$FILENAME string_recordtest_time60.src
                            14223 ; 1362 |#define RSRC_STRING_TIME60 524    
                            14224 ; 1363 |//$FILENAME string_recordtest_time300.src
                            14225 ; 1364 |#define RSRC_STRING_TIME300 525    
                            14226 ; 1365 |//$FILENAME string_recordtest_time600.src
                            14227 ; 1366 |#define RSRC_STRING_TIME600 526    
                            14228 ; 1367 |
                            14229 ; 1368 |//$FILENAME test_title.src
                            14230 ; 1369 |#define RSRC_TEST_TITLE 527    
                            14231 ; 1370 |//$FILENAME testmenu.src
                            14232 ; 1371 |#define RSRC_TEST_MENU_CODE_BANK 528    
                            14233 ; 1372 |
                            14234 ; 1373 |
                            14235 ; 1374 |//$FILENAME mmcmediastartup.src
                            14236 ; 1375 |#define RSRC_MMCDATADRIVEINIT 529    
                            14237 ; 1376 |#define RSRC_MMCMEDIAALLOCATE RSRC_MMCDATADRIVEINIT
                            14238 ; 1377 |#define RSRC_MMCMEDIADISCOVERALLOCATION RSRC_MMCDATADRIVEINIT
                            14239 ; 1378 |//$FILENAME mmcinfo.src
                            14240 ; 1379 |#define RSRC_MMCMEDIAGETINFO 530    
                            14241 ; 1380 |#define RSRC_MMCMEDIAGETMEDIATABLE RSRC_MMCMEDIAGETINFO
                            14242 ; 1381 |//$FILENAME mmcerase.src
                            14243 ; 1382 |#define RSRC_MMCMEDIAERASE 531    
                            14244 ; 1383 |
                            14245 ; 1384 |
                            14246 ; 1385 |#define RSRC_MMCDATADRIVEFLUSH RSRC_MMCDATADRIVEINIT
                            14247 ; 1386 |
                            14248 ; 1387 |//$FILENAME mmcenumerate.src
                            14249 ; 1388 |#define RSRC_MMCENUMERATE 532    
                            14250 ; 1389 |//$FILENAME mmcresetdevice.src
                            14251 ; 1390 |#define RSRC_MMC_RESETDEVICE 533    
                            14252 ; 1391 |//$FILENAME mmcprocesscsd.src
                            14253 ; 1392 |#define RSRC_MMC_PROCESSCSD 534    
                            14254 ; 1393 |//$FILENAME mmcprocesscid.src
                            14255 ; 1394 |#define RSRC_MMC_PROCESSCID 535    
                            14256 ; 1395 |//$FILENAME mmcprocesscid2.src
                            14257 ; 1396 |#define RSRC_FUNCLET_MMCPROCESSCID2 536    
                            14258 ; 1397 |//$FILENAME mmcdetectpresence.src
                            14259 ; 1398 |#define RSRC_MMC_DETECTPRESENCE 537    
                            14260 ; 1399 |//$FILENAME mmcserialnumberinit.src
                            14261 ; 1400 |#define RSRC_MMCSERIALNUMBERINIT 538    
                            14262 ; 1401 |//$FILENAME mmccheckwriteprotect.src
                            14263 ; 1402 |#define RSRC_MMC_CHECKWRITEPROTECT 539    
                            14264 ; 1403 |
                            14265 ; 1404 |//$FILENAME mmcread.src
                            14266 ; 1405 |#define RSRC_MMCDATADRIVEREADSECTOR 540    
                            14267 ; 1406 |//$FILENAME mmcmediainit.src
                            14268 ; 1407 |#define RSRC_MMCMEDIAINIT 541    
                            14269 ; 1408 |//$FILENAME mmcdatadriveinfo.src
                            14270 ; 1409 |#define RSRC_MMCDATADRIVESETINFO 542    
                            14271 ; 1410 |#define RSRC_MMCDATADRIVEGETINFO RSRC_MMCDATADRIVESETINFO
                            14272 ; 1411 |//$FILENAME mmcdatadriveerase.src
                            14273 ; 1412 |#define RSRC_MMCDATADRIVEERASE 543    
                            14274 ; 1413 |
                            14275 ; 1414 |#define RSRC_MMCDATADRIVEWRITESECTOR RSRC_MMCDATADRIVEREADSECTOR
                            14276 ; 1415 |#define RSRC_MMCDATADRIVEMULTIWRITESETUP RSRC_MMCDATADRIVEWRITESECTOR
                            14277 ; 1416 |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR RSRC_MMCDATADRIVEWRITESECTOR
                            14278 ; 1417 |
                            14279 ; 1418 |
                            14280 ; 1419 |/////////////////////////////////////////////////////////////////////////////////
                            14281 ; 1420 |//  File system
                            14282 ; 1421 |/////////////////////////////////////////////////////////////////////////////////
                            14283 ; 1422 |//$FILENAME arrangefilename.src
                            14284 ; 1423 |#define RSRC_FUNCLET_ARRANGEFILENAME 544    
                            14285 ; 1424 |//$FILENAME clearcluster.src
                            14286 ; 1425 |#define RSRC_FUNCLET_CLEARCLUSTER 545    
                            14287 ; 1426 |//$FILENAME createdirectory.src
                            14288 ; 1427 |#define RSRC_FUNCLET_CREATEDIRECTORY 546    
                            14289 ; 1428 |//$FILENAME deletecontent.src
                            14290 ; 1429 |#define RSRC_FUNCLET_DELETECONTENT 547    
                            14291 ; 1430 |//$FILENAME deleterecord.src
                            14292 ; 1431 |#define RSRC_FUNCLET_DELETERECORD 548    
                            14293 ; 1432 |//$FILENAME fastopen.src
                            14294 ; 1433 |#define RSRC_FUNCLET_FASTOPEN 549    
                            14295 ; 1434 |//$FILENAME fcreate.src
                            14296 ; 1435 |#define RSRC_FUNCLET_FCREATE 550    
                            14297 ; 1436 |//$FILENAME filegetattrib.src
                            14298 ; 1437 |#define RSRC_FUNCLET_FILEGETATTRIB 551    
                            14299 ; 1438 |//$FILENAME filegetdate.src
                            14300 ; 1439 |#define RSRC_FUNCLET_FILEGETDATE 552    
                            14301 ; 1440 |//$FILENAME filesetattrib.src
                            14302 ; 1441 |#define RSRC_FUNCLET_FILESETATTRIB 553    
                            14303 ; 1442 |//$FILENAME filesetdate.src
                            14304 ; 1443 |#define RSRC_FUNCLET_FILESETDATE 554    
                            14305 ; 1444 |//$FILENAME fsinit.src
                            14306 ; 1445 |#define RSRC_FUNCLET_FSINIT 555    
                            14307 ; 1446 |//$FILENAME fsshutdown.src
                            14308 ; 1447 |#define RSRC_FUNCLET_FSSHUTDOWN 556    
                            14309 ; 1448 |//$FILENAME readdevicerecord.src
                            14310 ; 1449 |#define RSRC_FUNCLET_READDEVICERECORD 557    
                            14311 ; 1450 |//$FILENAME checkspaceinrootdir.src
                            14312 ; 1451 |#define RSRC_FUNCLET_CHECKSPACEINROOTDIR 558    
                            14313 ; 1452 |//$FILENAME setcwdhandle.src
                            14314 ; 1453 |#define RSRC_FUNCLET_SETCWDHANDLE 559    
                            14315 ; 1454 |//$FILENAME fsdriveinit.src
                            14316 ; 1455 |#define RSRC_FUNCLET_FSDRIVEINIT 560    
                            14317 ; 1456 |//$FILENAME fsclearBuf.src
                            14318 ; 1457 |#define RSRC_FUNCLET_FSCLEARDRIVEBUF 561    
                            14319 ; 1458 |//RSRC_FUNCLET_TOTALFREECLUSTER    equ      328    ;$FILENAME totalfreecluster.src
                            14320 ; 1459 |//RSRC_FUNCLET_TOTALFREECLUSTERFAT16    equ      328    ;$FILENAME totalfreeclusterfat16.src
                            14321 ; 1460 |//$FILENAME fgetfasthandle.src
                            14322 ; 1461 |#define RSRC_FUNCLET_FGETFASTHANDLE 562    
                            14323 ; 1462 |//$FILENAME ishandlewriteallocated.src
                            14324 ; 1463 |#define RSRC_FUNCLET_ISHANDLEWRITEALLOCATED 563    
                            14325 ; 1464 |//$FILENAME isfileopen.src
                            14326 ; 1465 |#define RSRC_FUNCLET_ISFILEOPEN 564    
                            14327 ; 1466 |//$FILENAME iscurrworkdir.src
                            14328 ; 1467 |#define RSRC_FUNCLET_ISCURRWORKDIR 565    
                            14329 ; 1468 |//$FILENAME chdir.src
                            14330 ; 1469 |#define RSRC_FUNCLET_CHDIR 566    
                            14331 ; 1470 |//$FILENAME chdirFromOffset.src
                            14332 ; 1471 |#define RSRC_FUNCLET_CHDIR_FROM_OFFSET 567    
                            14333 ; 1472 |//$FILENAME deletetree.src
                            14334 ; 1473 |#define RSRC_FUNCLET_DELETETREE 568    
                            14335 ; 1474 |//$FILENAME deleteallrecords.src
                            14336 ; 1475 |#define RSRC_FUNCLET_DELETEALLRECORDS 569    
                            14337 ; 1476 |//$FILENAME cleardata.src
                            14338 ; 1477 |#define RSRC_FUNCLET_CLEARDATA 570    
                            14339 ; 1478 |//$FILENAME changetolowleveldir.src
                            14340 ; 1479 |#define RSRC_FUNCLET_CHANGETOLOWLEVELDIR 571    
                            14341 ; 1480 |//$FILENAME getrecordnumber.src
                            14342 ; 1481 |#define RSRC_FUNCLET_GETRECORDNUMBER 572    
                            14343 ; 1482 |//$FILENAME fileremove.src
                            14344 ; 1483 |#define RSRC_FUNCLET_FILEREMOVE 573    
                            14345 ; 1484 |//$FILENAME charactersearch.src
                            14346 ; 1485 |#define RSRC_FUNCLET_CHARACTERSEARCH 574    
                            14347 ; 1486 |//$FILENAME stringcompare.src
                            14348 ; 1487 |#define RSRC_FUNCLET_STRINGCOMPARE 575    
                            14349 ; 1488 |//$FILENAME fopenw.src
                            14350 ; 1489 |#define RSRC_FUNCLET_FOPENW 576    
                            14351 ; 1490 |//$FILENAME fremove.src
                            14352 ; 1491 |#define RSRC_FUNCLET_FREMOVE 577    
                            14353 ; 1492 |//$FILENAME fremovew.src
                            14354 ; 1493 |#define RSRC_FUNCLET_FREMOVEW 578    
                            14355 ; 1494 |//$FILENAME mkdir.src
                            14356 ; 1495 |#define RSRC_FUNCLET_MKDIR 579    
                            14357 ; 1496 |//$FILENAME mkdirw.src
                            14358 ; 1497 |#define RSRC_FUNCLET_MKDIRW 580    
                            14359 ; 1498 |//$FILENAME rmdir.src
                            14360 ; 1499 |#define RSRC_FUNCLET_RMDIR 581    
                            14361 ; 1500 |//$FILENAME rmdirw.src
                            14362 ; 1501 |#define RSRC_FUNCLET_RMDIRW 582    
                            14363 ; 1502 |//$FILENAME fgetc.src
                            14364 ; 1503 |#define RSRC_FUNCLET_FGETC 583    
                            14365 ; 1504 |//$FILENAME fgets.src
                            14366 ; 1505 |#define RSRC_FUNCLET_FGETS 584    
                            14367 ; 1506 |//$FILENAME fputc.src
                            14368 ; 1507 |#define RSRC_FUNCLET_FPUTC 585    
                            14369 ; 1508 |//$FILENAME fputs.src
                            14370 ; 1509 |#define RSRC_FUNCLET_FPUTS 586    
                            14371 ; 1510 |//$FILENAME arrangelongfilename.src
                            14372 ; 1511 |#define RSRC_FUNCLET_ARRANGELONGFILENAME 587    
                            14373 ; 1512 |//$FILENAME convert_itoa.src
                            14374 ; 1513 |#define RSRC_FUNCLET_CONVERT_ITOA 588    
                            14375 ; 1514 |//$FILENAME createdirrecord.src
                            14376 ; 1515 |#define RSRC_FUNCLET_CREATEDIRRECORD 589    
                            14377 ; 1516 |//$FILENAME chksum.src
                            14378 ; 1517 |#define RSRC_FUNCLET_CHKSUM 590    
                            14379 ; 1518 |//$FILENAME createshortdirrecord.src
                            14380 ; 1519 |#define RSRC_FUNCLET_CREATESHORTDIRRECORD 591    
                            14381 ; 1520 |//$FILENAME discardtrailigperiodsucs3.src
                            14382 ; 1521 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSUCS3 592    
                            14383 ; 1522 |//$FILENAME discardtrailigperiodsw.src
                            14384 ; 1523 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSW 593    
                            14385 ; 1524 |//$FILENAME extractfilenamew.src
                            14386 ; 1525 |#define RSRC_FUNCLET_EXTRACTFILENAMEW 594    
                            14387 ; 1526 |//$FILENAME extractpathw.src
                            14388 ; 1527 |#define RSRC_FUNCLET_EXTRACTPATHW 595    
                            14389 ; 1528 |//$FILENAME findfreerecord.src
                            14390 ; 1529 |#define RSRC_FUNCLET_FINDFREERECORD 596    
                            14391 ; 1530 |//$FILENAME getnamew.src
                            14392 ; 1531 |#define RSRC_FUNCLET_GETNAMEW 597    
                            14393 ; 1532 |//$FILENAME isdirectoryempty.src
                            14394 ; 1533 |#define RSRC_FUNCLET_ISDIRECTORYEMPTY 598    
                            14395 ; 1534 |//$FILENAME isshortnamevalid.src
                            14396 ; 1535 |#define RSRC_FUNCLET_ISSHORTNAMEVALID 599    
                            14397 ; 1536 |//$FILENAME longdirmatch.src
                            14398 ; 1537 |#define RSRC_FUNCLET_LONGDIRMATCH 600    
                            14399 ; 1538 |//$FILENAME unicodetooem.src
                            14400 ; 1539 |#define RSRC_FUNCLET_UNICODETOOEM 601    
                            14401 ; 1540 |//$FILENAME matchdirrecordw.src
                            14402 ; 1541 |#define RSRC_FUNCLET_MATCHDIRRECORDW 602    
                            14403 ; 1542 |//$FILENAME setcwd.src
                            14404 ; 1543 |#define RSRC_FUNCLET_SETCWD 603    
                            14405 ; 1544 |//$FILENAME setshortfilename.src
                            14406 ; 1545 |#define RSRC_FUNCLET_SETSHORTFILENAME 604    
                            14407 ; 1546 |//$FILENAME generatefilenametail.src
                            14408 ; 1547 |#define RSRC_FUNCLET_GENERATEFILENAMETAIL 605    
                            14409 ; 1548 |//$FILENAME dbcstounicode.src
                            14410 ; 1549 |#define RSRC_FUNCLET_DBCSTOUNICODE 606    
                            14411 ; 1550 |//$FILENAME strcpy.src
                            14412 ; 1551 |#define RSRC_FUNCLET_STRCPY 607    
                            14413 ; 1552 |//$FILENAME strcpyw.src
                            14414 ; 1553 |#define RSRC_FUNCLET_STRCPYW 608    
                            14415 ; 1554 |//$FILENAME strlengthw.src
                            14416 ; 1555 |#define RSRC_FUNCLET_STRLENGTHW 609    
                            14417 ; 1556 |//$FILENAME filesystempresent.src
                            14418 ; 1557 |#define RSRC_FUNCLET_FILESYSTEMPRESENT 610    
                            14419 ; 1558 |//$FILENAME DataDriveInit.src
                            14420 ; 1559 |#define RSRC_FUNCLET_DATADRIVEINIT 611    
                            14421 ; 1560 |//$FILENAME FSGetDataDrivePbsLocation.src
                            14422 ; 1561 |#define RSRC_FUNCLET_FSGETDATADRIVEPBSLOCATION 612    
                            14423 ; 1562 |//$FILENAME FSPartitionEntryCopy.src
                            14424 ; 1563 |#define RSRC_FUNCLET_FSPARTITIONENTRYCOPYFSDD 613    
                            14425 ; 1564 |//$FILENAME DataDriveGetSize.src
                            14426 ; 1565 |#define RSRC_FUNCLET_DATADRIVEGETSIZE 614    
                            14427 ; 1566 |//$FILENAME ConstructLongFileName.src
                            14428 ; 1567 |#define RSRC_FUNCLET_CONSTRUCTLONGFILENAME 615    
                            14429 ; 1568 |//$FILENAME strcpyucs3_2.src
                            14430 ; 1569 |#define RSRC_FUNCLET_STRCPYUCS3_2 616    
                            14431 ; 1570 |//$FILENAME getvolumelabel.src
                            14432 ; 1571 |#define RSRC_FUNCLET_GETVOLUMELABEL 617    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14433 ; 1572 |//$FILENAME setvolumelabel.src
                            14434 ; 1573 |#define RSRC_FUNCLET_SETVOLUMELABEL 618    
                            14435 ; 1574 |//$FILENAME disk_full.src
                            14436 ; 1575 |#define RSRC_DISK_FULL 619    
                            14437 ; 1576 |//$FILENAME chkdskstartup.src
                            14438 ; 1577 |#define RSRC_CHECKDISK 620    
                            14439 ; 1578 |//$FILENAME chkdskstartupy.src
                            14440 ; 1579 |#define RSRC_CHKDSK_YMEM 621    
                            14441 ; 1580 |//$FILENAME low_level_pwr_line1.src
                            14442 ; 1581 |#define RSRC_LOW_PWR_EXT_DEV_LINE1 622    
                            14443 ; 1582 |//$FILENAME low_level_pwr_line2.src
                            14444 ; 1583 |#define RSRC_LOW_PWR_EXT_DEV_LINE2 623    
                            14445 ; 1584 |//$FILENAME string_bit_rate.src
                            14446 ; 1585 |#define RSRC_STRING_BIT_RATE 624    
                            14447 ; 1586 |//$FILENAME string_96000hz.src
                            14448 ; 1587 |#define RSRC_STRING_96KBPS 625    
                            14449 ; 1588 |//$FILENAME string_112000hz.src
                            14450 ; 1589 |#define RSRC_STRING_112KBPS 626    
                            14451 ; 1590 |//$FILENAME string_128000hz.src
                            14452 ; 1591 |#define RSRC_STRING_128KBPS 627    
                            14453 ; 1592 |//$FILENAME string_160000hz.src
                            14454 ; 1593 |#define RSRC_STRING_160KBPS 628    
                            14455 ; 1594 |//$FILENAME string_192000hz.src
                            14456 ; 1595 |#define RSRC_STRING_192KBPS 629    
                            14457 ; 1596 |//$FILENAME string_224000hz.src
                            14458 ; 1597 |#define RSRC_STRING_224KBPS 630    
                            14459 ; 1598 |//$FILENAME string_256000hz.src
                            14460 ; 1599 |#define RSRC_STRING_256KBPS 631    
                            14461 ; 1600 |//$FILENAME string_320000hz.src
                            14462 ; 1601 |#define RSRC_STRING_320KBPS 632    
                            14463 ; 1602 |//$FILENAME string_hz.src
                            14464 ; 1603 |#define RSRC_STRING_HZ 633    
                            14465 ; 1604 |//$FILENAME EncCommonp.src
                            14466 ; 1605 |#define RSRC_ENCODERCOMMON_P_CODE 634    
                            14467 ; 1606 |//$FILENAME adc_adcx.src
                            14468 ; 1607 |#define RSRC_ADC_ADCX_CODE 635    
                            14469 ; 1608 |//$FILENAME adc_adcy.src
                            14470 ; 1609 |#define RSRC_ADC_ADCY_CODE 636    
                            14471 ; 1610 |//$FILENAME Funclet_encodercommon.src
                            14472 ; 1611 |#define RSRC_FUNCLET_LOADENCODERCOMMON 637    
                            14473 ; 1612 |//$FILENAME string_album.src
                            14474 ; 1613 |#define RSRC_STRING_ALBUM 638    
                            14475 ; 1614 |//$FILENAME string_encoder_song.src
                            14476 ; 1615 |#define RSRC_STRING_SONG 639    
                            14477 ; 1616 |//$FILENAME string_mode.src
                            14478 ; 1617 |#define RSRC_STRING_MODE 640    
                            14479 ; 1618 |
                            14480 ; 1619 |//////////////////////////////////////////////////////////////////////////////////
                            14481 ; 1620 |// display related
                            14482 ; 1621 |//////////////////////////////////////////////////////////////////////////////////
                            14483 ; 1622 |//$FILENAME Funclet_HalDisplayInit.src
                            14484 ; 1623 |#define RSRC_FUNCLET_HAL_DISPLAY_INIT 641    
                            14485 ; 1624 |//$FILENAME Funclet_SalDisplayInit.src
                            14486 ; 1625 |#define RSRC_FUNCLET_SAL_DISPLAY_INIT 642    
                            14487 ; 1626 |//$FILENAME Funclet_SalHandleMessage.src
                            14488 ; 1627 |#define RSRC_FUNCLET_SAL_HANDLE_MSG 643    
                            14489 ; 1628 |//$FILENAME Funclet_FixBitmapHeader.src
                            14490 ; 1629 |#define RSRC_FUNCLET_FIXBITMAPHEADER 644    
                            14491 ; 1630 |//$FILENAME Funclet_BitmapReadHeader.src
                            14492 ; 1631 |#define RSRC_FUNCLET_BITMAPREADHEADER 645    
                            14493 ; 1632 |//$FILENAME Funclet_BitmapReadPalette.src
                            14494 ; 1633 |#define RSRC_FUNCLET_BITMAPREADPALETTE 646    
                            14495 ; 1634 |//$FILENAME Funclet_BitmapReadBitMask.src
                            14496 ; 1635 |#define RSRC_FUNCLET_BITMAPREADBITMASK 647    
                            14497 ; 1636 |//$FILENAME Funclet_BitmapPrintNonPalette.src
                            14498 ; 1637 |#define RSRC_FUNCLET_BITMAPPRINTNONPALETTE 648    
                            14499 ; 1638 |//$FILENAME Funclet_BitmapPrintPalette.src
                            14500 ; 1639 |#define RSRC_FUNCLET_BITMAPPRINTPALETTE 649    
                            14501 ; 1640 |//$FILENAME Funclet_DisplayPrintBitmapFile.src
                            14502 ; 1641 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPFILE 650    
                            14503 ; 1642 |//$FILENAME Funclet_DisplayPrintBitmapResource.src
                            14504 ; 1643 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPRESOURCE 651    
                            14505 ; 1644 |
                            14506 ; 1645 |//////////////////////////////////////////////////////////////////////////////////
                            14507 ; 1646 |//WMDRM Related
                            14508 ; 1647 |//////////////////////////////////////////////////////////////////////////////////
                            14509 ; 1648 |//$FILENAME legacy_decryptcontentkey.src
                            14510 ; 1649 |#define RSRC_FUNCLET_LEGACY_DECRYPTCONTENTKEY 652    
                            14511 ; 1650 |//$FILENAME drm_bbx_legacycipherkeysetup.src
                            14512 ; 1651 |#define RSRC_FUNCLET_DRM_BBX_LEGACYCIPHERKEYSETUP 653    
                            14513 ; 1652 |//$FILENAME drm_bbx_initialize.src
                            14514 ; 1653 |#define RSRC_FUNCLET_DRM_BBX_INITIALIZE 654    
                            14515 ; 1654 |//$FILENAME drm_bbx_canbind.src
                            14516 ; 1655 |#define RSRC_FUNCLET_DRM_BBX_CANBIND 655    
                            14517 ; 1656 |//$FILENAME verifychecksum.src
                            14518 ; 1657 |#define RSRC_FUNCLET_VERIFYCHECKSUM 656    
                            14519 ; 1658 |//$FILENAME drm_b64_encodew.src
                            14520 ; 1659 |#define RSRC_FUNCLET_DRM_B64_ENCODEW 657    
                            14521 ; 1660 |//$FILENAME _performactions.src
                            14522 ; 1661 |#define RSRC_FUNCLET__PERFORMACTIONS 658    
                            14523 ; 1662 |//$FILENAME _processendofchain.src
                            14524 ; 1663 |#define RSRC_FUNCLET__PROCESSENDOFCHAIN 659    
                            14525 ; 1664 |//$FILENAME drmcrt_iswxdigit.src
                            14526 ; 1665 |#define RSRC_FUNCLET_DRMCRT_ISWXDIGIT 660    
                            14527 ; 1666 |//$FILENAME drmcrt_towlower.src
                            14528 ; 1667 |#define RSRC_FUNCLET_DRMCRT_TOWLOWER 661    
                            14529 ; 1668 |//$FILENAME drmcrt_wcslen.src
                            14530 ; 1669 |#define RSRC_FUNCLET_DRMCRT_WCSLEN 662    
                            14531 ; 1670 |//$FILENAME drmcrt_wcsncpy.src
                            14532 ; 1671 |#define RSRC_FUNCLET_DRMCRT_WCSNCPY 663    
                            14533 ; 1672 |//$FILENAME drmcrt_memmove.src
                            14534 ; 1673 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE 664    
                            14535 ; 1674 |//$FILENAME performoperation_part1.src
                            14536 ; 1675 |#define RSRC_FUNCLET_PERFORMOPERATION_PART1 665    
                            14537 ; 1676 |//$FILENAME performoperation_part2.src
                            14538 ; 1677 |#define RSRC_FUNCLET_PERFORMOPERATION_PART2 666    
                            14539 ; 1678 |//$FILENAME performoperation_part3.src
                            14540 ; 1679 |#define RSRC_FUNCLET_PERFORMOPERATION_PART3 667    
                            14541 ; 1680 |//$FILENAME performoperation_part4.src
                            14542 ; 1681 |#define RSRC_FUNCLET_PERFORMOPERATION_PART4 668    
                            14543 ; 1682 |//$FILENAME performoperation_part5.src
                            14544 ; 1683 |#define RSRC_FUNCLET_PERFORMOPERATION_PART5 669    
                            14545 ; 1684 |//$FILENAME performoperation_part6.src
                            14546 ; 1685 |#define RSRC_FUNCLET_PERFORMOPERATION_PART6 670    
                            14547 ; 1686 |//$FILENAME isvalidfunction.src
                            14548 ; 1687 |#define RSRC_FUNCLET_ISVALIDFUNCTION 671    
                            14549 ; 1688 |//$FILENAME functiongetvalue.src
                            14550 ; 1689 |#define RSRC_FUNCLET_FUNCTIONGETVALUE 672    
                            14551 ; 1690 |//$FILENAME globalsetvariable.src
                            14552 ; 1691 |#define RSRC_FUNCLET_GLOBALSETVARIABLE 673    
                            14553 ; 1692 |//$FILENAME variabledrmkgetorset.src
                            14554 ; 1693 |#define RSRC_FUNCLET_VARIABLEDRMKGETORSET 674    
                            14555 ; 1694 |//$FILENAME variabledrmgetorset.src
                            14556 ; 1695 |#define RSRC_FUNCLET_VARIABLEDRMGETORSET 675    
                            14557 ; 1696 |//$FILENAME variableappgetorset.src
                            14558 ; 1697 |#define RSRC_FUNCLET_VARIABLEAPPGETORSET 676    
                            14559 ; 1698 |//$FILENAME variablelicensegetorset.src
                            14560 ; 1699 |#define RSRC_FUNCLET_VARIABLELICENSEGETORSET 677    
                            14561 ; 1700 |//$FILENAME variablecontentgetorset.src
                            14562 ; 1701 |#define RSRC_FUNCLET_VARIABLECONTENTGETORSET 678    
                            14563 ; 1702 |//$FILENAME variabledevicegetorset.src
                            14564 ; 1703 |#define RSRC_FUNCLET_VARIABLEDEVICEGETORSET 679    
                            14565 ; 1704 |//$FILENAME variablepmlicensegetorset.src
                            14566 ; 1705 |#define RSRC_FUNCLET_VARIABLEPMLICENSEGETORSET 680    
                            14567 ; 1706 |//$FILENAME drm_hds_createstore.src
                            14568 ; 1707 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE 681    
                            14569 ; 1708 |//$FILENAME drm_hds_init.src
                            14570 ; 1709 |#define RSRC_FUNCLET_DRM_HDS_INIT 682    
                            14571 ; 1710 |//$FILENAME drm_hds_uninit.src
                            14572 ; 1711 |#define RSRC_FUNCLET_DRM_HDS_UNINIT 683    
                            14573 ; 1712 |//$FILENAME drm_hds_openstore.src
                            14574 ; 1713 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE 684    
                            14575 ; 1714 |//$FILENAME drm_hds_deleteslot.src
                            14576 ; 1715 |#define RSRC_FUNCLET_DRM_HDS_DELETESLOT 685    
                            14577 ; 1716 |//$FILENAME drm_hds_slotresize.src
                            14578 ; 1717 |#define RSRC_FUNCLET_DRM_HDS_SLOTRESIZE 686    
                            14579 ; 1718 |//$FILENAME drm_hds_initslotenum.src
                            14580 ; 1719 |#define RSRC_FUNCLET_DRM_HDS_INITSLOTENUM 687    
                            14581 ; 1720 |//$FILENAME drm_hds_cleanupstore.src
                            14582 ; 1721 |#define RSRC_FUNCLET_DRM_HDS_CLEANUPSTORE 688    
                            14583 ; 1722 |//$FILENAME _hdscopyslot_child2child.src
                            14584 ; 1723 |#define RSRC_FUNCLET__HDSCOPYSLOT_CHILD2CHILD 689    
                            14585 ; 1724 |//$FILENAME _hdscopychildpayload.src
                            14586 ; 1725 |#define RSRC_FUNCLET__HDSCOPYCHILDPAYLOAD 690    
                            14587 ; 1726 |//$FILENAME _hdsdefragmentfile.src
                            14588 ; 1727 |#define RSRC_FUNCLET__HDSDEFRAGMENTFILE 691    
                            14589 ; 1728 |//$FILENAME _hdscleanupnamespace.src
                            14590 ; 1729 |#define RSRC_FUNCLET__HDSCLEANUPNAMESPACE 692    
                            14591 ; 1730 |//$FILENAME _hdscleanupstore.src
                            14592 ; 1731 |#define RSRC_FUNCLET__HDSCLEANUPSTORE 693    
                            14593 ; 1732 |//$FILENAME drm_lst_clean.src
                            14594 ; 1733 |#define RSRC_FUNCLET_DRM_LST_CLEAN 694    
                            14595 ; 1734 |//$FILENAME _hdslocatefreeblockforslot.src
                            14596 ; 1735 |#define RSRC_FUNCLET__HDSLOCATEFREEBLOCKFORSLOT 695    
                            14597 ; 1736 |//$FILENAME _hdslockblock2deleteslot.src
                            14598 ; 1737 |#define RSRC_FUNCLET__HDSLOCKBLOCK2DELETESLOT 696    
                            14599 ; 1738 |//$FILENAME _hdsunlockblock2deleteslot.src
                            14600 ; 1739 |#define RSRC_FUNCLET__HDSUNLOCKBLOCK2DELETESLOT 697    
                            14601 ; 1740 |//$FILENAME _hdscreatenamespace.src
                            14602 ; 1741 |#define RSRC_FUNCLET__HDSCREATENAMESPACE 698    
                            14603 ; 1742 |//$FILENAME _hdsfilepos2blocknum.src
                            14604 ; 1743 |#define RSRC_FUNCLET__HDSFILEPOS2BLOCKNUM 699    
                            14605 ; 1744 |//$FILENAME _writesrn.src
                            14606 ; 1745 |#define RSRC_FUNCLET__WRITESRN 700    
                            14607 ; 1746 |//$FILENAME _writecommonblockheader.src
                            14608 ; 1747 |#define RSRC_FUNCLET__WRITECOMMONBLOCKHEADER 701    
                            14609 ; 1748 |//$FILENAME _writechildblockheader.src
                            14610 ; 1749 |#define RSRC_FUNCLET__WRITECHILDBLOCKHEADER 702    
                            14611 ; 1750 |//$FILENAME _readdatablockheader.src
                            14612 ; 1751 |#define RSRC_FUNCLET__READDATABLOCKHEADER 703    
                            14613 ; 1752 |//$FILENAME _writedatablockheader.src
                            14614 ; 1753 |#define RSRC_FUNCLET__WRITEDATABLOCKHEADER 704    
                            14615 ; 1754 |//$FILENAME _hdsexpandstore.src
                            14616 ; 1755 |#define RSRC_FUNCLET__HDSEXPANDSTORE 705    
                            14617 ; 1756 |//$FILENAME _hdsallocblock.src
                            14618 ; 1757 |#define RSRC_FUNCLET__HDSALLOCBLOCK 706    
                            14619 ; 1758 |//$FILENAME _hdsfreeblock.src
                            14620 ; 1759 |#define RSRC_FUNCLET__HDSFREEBLOCK 707    
                            14621 ; 1760 |//$FILENAME _hdscreateoversizedslot.src
                            14622 ; 1761 |#define RSRC_FUNCLET__HDSCREATEOVERSIZEDSLOT 708    
                            14623 ; 1762 |//$FILENAME _hdsallocslotinfile.src
                            14624 ; 1763 |#define RSRC_FUNCLET__HDSALLOCSLOTINFILE 709    
                            14625 ; 1764 |//$FILENAME _hdswriteblockhdr.src
                            14626 ; 1765 |#define RSRC_FUNCLET__HDSWRITEBLOCKHDR 710    
                            14627 ; 1766 |//$FILENAME _hdsadjustchildpayload.src
                            14628 ; 1767 |#define RSRC_FUNCLET__HDSADJUSTCHILDPAYLOAD 711    
                            14629 ; 1768 |//$FILENAME _hdsfindleftmostleafblock.src
                            14630 ; 1769 |#define RSRC_FUNCLET__HDSFINDLEFTMOSTLEAFBLOCK 712    
                            14631 ; 1770 |//$FILENAME _hdscreateandopenslot.src
                            14632 ; 1771 |#define RSRC_FUNCLET__HDSCREATEANDOPENSLOT 713    
                            14633 ; 1772 |//$FILENAME _hdsremoveslot.src
                            14634 ; 1773 |#define RSRC_FUNCLET__HDSREMOVESLOT 714    
                            14635 ; 1774 |//$FILENAME _hdscopyandlocknewslot.src
                            14636 ; 1775 |#define RSRC_FUNCLET__HDSCOPYANDLOCKNEWSLOT 715    
                            14637 ; 1776 |//$FILENAME _hdsrelocateslotandkeepcurrlock.src
                            14638 ; 1777 |#define RSRC_FUNCLET__HDSRELOCATESLOTANDKEEPCURRLOCK 716    
                            14639 ; 1778 |//$FILENAME _hdstraversenextrightsiblingblock.src
                            14640 ; 1779 |#define RSRC_FUNCLET__HDSTRAVERSENEXTRIGHTSIBLINGBLOCK 717    
                            14641 ; 1780 |//$FILENAME _hdstraverseblocksinpostorder.src
                            14642 ; 1781 |#define RSRC_FUNCLET__HDSTRAVERSEBLOCKSINPOSTORDER 718    
                            14643 ; 1782 |//$FILENAME _hdsslotresize.src
                            14644 ; 1783 |#define RSRC_FUNCLET__HDSSLOTRESIZE 719    
                            14645 ; 1784 |//$FILENAME _isnull.src
                            14646 ; 1785 |#define RSRC_FUNCLET__ISNULL 720    
                            14647 ; 1786 |//$FILENAME _hdsgensrnhash.src
                            14648 ; 1787 |#define RSRC_FUNCLET__HDSGENSRNHASH 721    
                            14649 ; 1788 |//$FILENAME _hdsallocblockbuffer.src
                            14650 ; 1789 |#define RSRC_FUNCLET__HDSALLOCBLOCKBUFFER 722    
                            14651 ; 1790 |//$FILENAME _readsrn.src
                            14652 ; 1791 |#define RSRC_FUNCLET__READSRN 723    
                            14653 ; 1792 |//$FILENAME _hdsgetputchildblocknum.src
                            14654 ; 1793 |#define RSRC_FUNCLET__HDSGETPUTCHILDBLOCKNUM 724    
                            14655 ; 1794 |//$FILENAME _hdshashkeytoindex.src
                            14656 ; 1795 |#define RSRC_FUNCLET__HDSHASHKEYTOINDEX 725    
                            14657 ; 1796 |//$FILENAME _hdsslotwrite.src
                            14658 ; 1797 |#define RSRC_FUNCLET__HDSSLOTWRITE 726    
                            14659 ; 1798 |//$FILENAME _hdsinitslotenum.src
                            14660 ; 1799 |#define RSRC_FUNCLET__HDSINITSLOTENUM 727    
                            14661 ; 1800 |//$FILENAME drm_lst_close.src
                            14662 ; 1801 |#define RSRC_FUNCLET_DRM_LST_CLOSE 728    
                            14663 ; 1802 |//$FILENAME drm_lst_enumnext.src
                            14664 ; 1803 |#define RSRC_FUNCLET_DRM_LST_ENUMNEXT 729    
                            14665 ; 1804 |//$FILENAME drm_lst_enumdelete.src
                            14666 ; 1805 |#define RSRC_FUNCLET_DRM_LST_ENUMDELETE 730    
                            14667 ; 1806 |//$FILENAME _processextensions.src
                            14668 ; 1807 |#define RSRC_FUNCLET__PROCESSEXTENSIONS 731    
                            14669 ; 1808 |//$FILENAME _processidlist.src
                            14670 ; 1809 |#define RSRC_FUNCLET__PROCESSIDLIST 732    
                            14671 ; 1810 |//$FILENAME _processexclusions.src
                            14672 ; 1811 |#define RSRC_FUNCLET__PROCESSEXCLUSIONS 733    
                            14673 ; 1812 |//$FILENAME _processinclusions.src
                            14674 ; 1813 |#define RSRC_FUNCLET__PROCESSINCLUSIONS 734    
                            14675 ; 1814 |//$FILENAME drm_opl_processcopyoutputleveldata.src
                            14676 ; 1815 |#define RSRC_FUNCLET_DRM_OPL_PROCESSCOPYOUTPUTLEVELDATA 735    
                            14677 ; 1816 |//$FILENAME _getopllevel.src
                            14678 ; 1817 |#define RSRC_FUNCLET__GETOPLLEVEL 736    
                            14679 ; 1818 |//$FILENAME drm_opl_processplayoutputleveldata.src
                            14680 ; 1819 |#define RSRC_FUNCLET_DRM_OPL_PROCESSPLAYOUTPUTLEVELDATA 737    
                            14681 ; 1820 |//$FILENAME _updateattributetokeninslot.src
                            14682 ; 1821 |#define RSRC_FUNCLET__UPDATEATTRIBUTETOKENINSLOT 738    
                            14683 ; 1822 |//$FILENAME drm_sst_settokenvalue.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14684 ; 1823 |#define RSRC_FUNCLET_DRM_SST_SETTOKENVALUE 739    
                            14685 ; 1824 |//$FILENAME drm_sst_createlicensestatepassword.src
                            14686 ; 1825 |#define RSRC_FUNCLET_DRM_SST_CREATELICENSESTATEPASSWORD 740    
                            14687 ; 1826 |//$FILENAME drm_utl_promoteansitounicode.src
                            14688 ; 1827 |#define RSRC_FUNCLET_DRM_UTL_PROMOTEANSITOUNICODE 741    
                            14689 ; 1828 |//$FILENAME drm_pk_symmetricsign.src
                            14690 ; 1829 |#define RSRC_FUNCLET_DRM_PK_SYMMETRICSIGN 742    
                            14691 ; 1830 |//$FILENAME drm_utl_getversionfromstring.src
                            14692 ; 1831 |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONFROMSTRING 743    
                            14693 ; 1832 |//$FILENAME drm_utl_stringinsertblanksubstring.src
                            14694 ; 1833 |#define RSRC_FUNCLET_DRM_UTL_STRINGINSERTBLANKSUBSTRING 744    
                            14695 ; 1834 |//$FILENAME drm_utl_stringremovesubstring.src
                            14696 ; 1835 |#define RSRC_FUNCLET_DRM_UTL_STRINGREMOVESUBSTRING 745    
                            14697 ; 1836 |//$FILENAME drm_utl_dstrsearch.src
                            14698 ; 1837 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCH 746    
                            14699 ; 1838 |//$FILENAME drm_utl_dstrsearchreverse.src
                            14700 ; 1839 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCHREVERSE 747    
                            14701 ; 1840 |//$FILENAME drm_utl_stringtoguid.src
                            14702 ; 1841 |#define RSRC_FUNCLET_DRM_UTL_STRINGTOGUID 748    
                            14703 ; 1842 |//$FILENAME drm_utl_ensuredataalignment.src
                            14704 ; 1843 |#define RSRC_FUNCLET_DRM_UTL_ENSUREDATAALIGNMENT 749    
                            14705 ; 1844 |//$FILENAME overlappingdates.src
                            14706 ; 1845 |#define RSRC_FUNCLET_OVERLAPPINGDATES 750    
                            14707 ; 1846 |//$FILENAME drm_asd_parsev2license.src
                            14708 ; 1847 |#define RSRC_FUNCLET_DRM_ASD_PARSEV2LICENSE 751    
                            14709 ; 1848 |//$FILENAME neginfdate.src
                            14710 ; 1849 |#define RSRC_FUNCLET_NEGINFDATE 752    
                            14711 ; 1850 |//$FILENAME infdate.src
                            14712 ; 1851 |#define RSRC_FUNCLET_INFDATE 753    
                            14713 ; 1852 |//$FILENAME isexpired.src
                            14714 ; 1853 |#define RSRC_FUNCLET_ISEXPIRED 754    
                            14715 ; 1854 |//$FILENAME getsecstateattr.src
                            14716 ; 1855 |#define RSRC_FUNCLET_GETSECSTATEATTR 755    
                            14717 ; 1856 |//$FILENAME setexpirycategory.src
                            14718 ; 1857 |#define RSRC_FUNCLET_SETEXPIRYCATEGORY 756    
                            14719 ; 1858 |//$FILENAME getv2licenseinfo.src
                            14720 ; 1859 |#define RSRC_FUNCLET_GETV2LICENSEINFO 757    
                            14721 ; 1860 |//$FILENAME getnextlicense.src
                            14722 ; 1861 |#define RSRC_FUNCLET_GETNEXTLICENSE 758    
                            14723 ; 1862 |//$FILENAME aggregate.src
                            14724 ; 1863 |#define RSRC_FUNCLET_AGGREGATE 759    
                            14725 ; 1864 |//$FILENAME drm_asd_getlicenseaggregatedata.src
                            14726 ; 1865 |#define RSRC_FUNCLET_DRM_ASD_GETLICENSEAGGREGATEDATA 760    
                            14727 ; 1866 |//$FILENAME _scannodeforattributew.src
                            14728 ; 1867 |#define RSRC_FUNCLET__SCANNODEFORATTRIBUTEW 761    
                            14729 ; 1868 |//$FILENAME _getxmlnodecdataw.src
                            14730 ; 1869 |#define RSRC_FUNCLET__GETXMLNODECDATAW 762    
                            14731 ; 1870 |//$FILENAME drm_ddc_getdevicecertificate.src
                            14732 ; 1871 |#define RSRC_FUNCLET_DRM_DDC_GETDEVICECERTIFICATE 763    
                            14733 ; 1872 |//$FILENAME _createdevicestore.src
                            14734 ; 1873 |#define RSRC_FUNCLET__CREATEDEVICESTORE 764    
                            14735 ; 1874 |//$FILENAME _mapdrmerror.src
                            14736 ; 1875 |#define RSRC_FUNCLET__MAPDRMERROR 765    
                            14737 ; 1876 |//$FILENAME _comparemachineid.src
                            14738 ; 1877 |#define RSRC_FUNCLET__COMPAREMACHINEID 766    
                            14739 ; 1878 |//$FILENAME initmgrcontext.src
                            14740 ; 1879 |#define RSRC_FUNCLET_INITMGRCONTEXT 767    
                            14741 ; 1880 |//$FILENAME drm_mgr_setv2header.src
                            14742 ; 1881 |#define RSRC_FUNCLET_DRM_MGR_SETV2HEADER 768    
                            14743 ; 1882 |//$FILENAME drm_mgr_commit.src
                            14744 ; 1883 |#define RSRC_FUNCLET_DRM_MGR_COMMIT 769    
                            14745 ; 1884 |//$FILENAME drm_mgr_cleanuplicensestore.src
                            14746 ; 1885 |#define RSRC_FUNCLET_DRM_MGR_CLEANUPLICENSESTORE 770    
                            14747 ; 1886 |//$FILENAME januscleandatastore.src
                            14748 ; 1887 |#define RSRC_FUNCLET_JANUSCLEANDATASTORE 771    
                            14749 ; 1888 |//$FILENAME drm_mtr_openid.src
                            14750 ; 1889 |#define RSRC_FUNCLET_DRM_MTR_OPENID 772    
                            14751 ; 1890 |//$FILENAME drm_mtr_incrementcount.src
                            14752 ; 1891 |#define RSRC_FUNCLET_DRM_MTR_INCREMENTCOUNT 773    
                            14753 ; 1892 |//$FILENAME drm_mtr_closecontext.src
                            14754 ; 1893 |#define RSRC_FUNCLET_DRM_MTR_CLOSECONTEXT 774    
                            14755 ; 1894 |//$FILENAME oem_setendoffile.src
                            14756 ; 1895 |#define RSRC_FUNCLET_OEM_SETENDOFFILE 775    
                            14757 ; 1896 |//$FILENAME oem_genrandombytes.src
                            14758 ; 1897 |#define RSRC_FUNCLET_OEM_GENRANDOMBYTES 776    
                            14759 ; 1898 |//$FILENAME oem_getfallbacksigningkey.src
                            14760 ; 1899 |#define RSRC_FUNCLET_OEM_GETFALLBACKSIGNINGKEY 777    
                            14761 ; 1900 |//$FILENAME oem_getdevicecerttemplate.src
                            14762 ; 1901 |#define RSRC_FUNCLET_OEM_GETDEVICECERTTEMPLATE 778    
                            14763 ; 1902 |//$FILENAME oem_setdevicecert.src
                            14764 ; 1903 |#define RSRC_FUNCLET_OEM_SETDEVICECERT 779    
                            14765 ; 1904 |//$FILENAME oem_getclockresetstate.src
                            14766 ; 1905 |#define RSRC_FUNCLET_OEM_GETCLOCKRESETSTATE 780    
                            14767 ; 1906 |//$FILENAME oem_setclockresetstate.src
                            14768 ; 1907 |#define RSRC_FUNCLET_OEM_SETCLOCKRESETSTATE 781    
                            14769 ; 1908 |//$FILENAME oem_getuniqueid.src
                            14770 ; 1909 |#define RSRC_FUNCLET_OEM_GETUNIQUEID 782    
                            14771 ; 1910 |//$FILENAME oem_getdevicecert.src
                            14772 ; 1911 |#define RSRC_FUNCLET_OEM_GETDEVICECERT 783    
                            14773 ; 1912 |//$FILENAME drm_snc_openstore.src
                            14774 ; 1913 |#define RSRC_FUNCLET_DRM_SNC_OPENSTORE 784    
                            14775 ; 1914 |//$FILENAME drm_snc_closestore.src
                            14776 ; 1915 |#define RSRC_FUNCLET_DRM_SNC_CLOSESTORE 785    
                            14777 ; 1916 |//$FILENAME _setkidstoredata.src
                            14778 ; 1917 |#define RSRC_FUNCLET__SETKIDSTOREDATA 786    
                            14779 ; 1918 |//$FILENAME drm_snc_deletekid.src
                            14780 ; 1919 |#define RSRC_FUNCLET_DRM_SNC_DELETEKID 787    
                            14781 ; 1920 |//$FILENAME drm_snc_updatekid.src
                            14782 ; 1921 |#define RSRC_FUNCLET_DRM_SNC_UPDATEKID 788    
                            14783 ; 1922 |//$FILENAME drm_mgr_setv1header.src
                            14784 ; 1923 |#define RSRC_FUNCLET_DRM_MGR_SETV1HEADER 789    
                            14785 ; 1924 |//$FILENAME functiongetvalue_part1.src
                            14786 ; 1925 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_PART1 790    
                            14787 ; 1926 |//$FILENAME functiongetvalue_fn_datediff.src
                            14788 ; 1927 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_FN_DATEDIFF 791    
                            14789 ; 1928 |//$FILENAME _hdscreatenamespacestore.src
                            14790 ; 1929 |#define RSRC_FUNCLET__HDSCREATENAMESPACESTORE 792    
                            14791 ; 1930 |//$FILENAME drm_hds_createstore2.src
                            14792 ; 1931 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE2 793    
                            14793 ; 1932 |//$FILENAME drm_hds_openstore2.src
                            14794 ; 1933 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE2 794    
                            14795 ; 1934 |//$FILENAME _hdsprealloc.src
                            14796 ; 1935 |#define RSRC_FUNCLET__HDSPREALLOC 795    
                            14797 ; 1936 |//$FILENAME oem_systemtimetofiletime.src
                            14798 ; 1937 |#define RSRC_FUNCLET_OEM_SYSTEMTIMETOFILETIME 796    
                            14799 ; 1938 |//$FILENAME oem_filetimetosystemtime.src
                            14800 ; 1939 |#define RSRC_FUNCLET_OEM_FILETIMETOSYSTEMTIME 797    
                            14801 ; 1940 |//$FILENAME gendevicecertificate.src
                            14802 ; 1941 |#define RSRC_FUNCLET_GENDEVICECERTIFICATE 798    
                            14803 ; 1942 |//$FILENAME drmcrt_memmove_mem.src
                            14804 ; 1943 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE_MEM 799    
                            14805 ; 1944 |//$FILENAME copyhdsdtore.src
                            14806 ; 1945 |#define RSRC_FUNCLET_COPYHDSDTORE 800    
                            14807 ; 1946 |//$FILENAME generatedevicecert.src
                            14808 ; 1947 |#define RSRC_FUNCLET_GENERATEDEVICECERT 801    
                            14809 ; 1948 |//$FILENAME oem_getdevicedatetime.src
                            14810 ; 1949 |#define RSRC_FUNCLET_OEM_GETDEVICEDATETIME 802    
                            14811 ; 1950 |//$FILENAME drm_mtr_updatedata.src
                            14812 ; 1951 |#define RSRC_FUNCLET_DRM_MTR_UPDATEDATA 803    
                            14813 ; 1952 |//$FILENAME _hdsupdatesrn.src
                            14814 ; 1953 |#define RSRC_FUNCLET__HDSUPDATESRN 804    
                            14815 ; 1954 |//$FILENAME drm_b64_decodew_inplace.src
                            14816 ; 1955 |#define RSRC_FUNCLET_DRM_B64_DECODEW_INPLACE 805    
                            14817 ; 1956 |//$FILENAME _checksecureclock.src
                            14818 ; 1957 |#define RSRC_FUNCLET__CHECKSECURECLOCK 806    
                            14819 ; 1958 |//$FILENAME _preparesecureclockdataforwriting.src
                            14820 ; 1959 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORWRITING 807    
                            14821 ; 1960 |//$FILENAME _preparesecureclockdataforreading.src
                            14822 ; 1961 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORREADING 808    
                            14823 ; 1962 |//$FILENAME drm_sst_closelockedslot.src
                            14824 ; 1963 |#define RSRC_FUNCLET_DRM_SST_CLOSELOCKEDSLOT 809    
                            14825 ; 1964 |//$FILENAME variablesecuretimegetorset.src
                            14826 ; 1965 |#define RSRC_FUNCLET_VARIABLESECURETIMEGETORSET 810    
                            14827 ; 1966 |//$FILENAME strtol.src
                            14828 ; 1967 |#define RSRC_FUNCLET_STRTOL 811    
                            14829 ; 1968 |//$FILENAME mktime.src
                            14830 ; 1969 |#define RSRC_FUNCLET_MKTIME 812    
                            14831 ; 1970 |//$FILENAME gmtime.src
                            14832 ; 1971 |#define RSRC_FUNCLET_GMTIME 813    
                            14833 ; 1972 |//$FILENAME localtime.src
                            14834 ; 1973 |#define RSRC_FUNCLET_LOCALTIME 814    
                            14835 ; 1974 |//$FILENAME _struct_tm_to_systemtime.src
                            14836 ; 1975 |#define RSRC_FUNCLET__STRUCT_TM_TO_SYSTEMTIME 815    
                            14837 ; 1976 |//$FILENAME _systemtime_to_struct_tm.src
                            14838 ; 1977 |#define RSRC_FUNCLET__SYSTEMTIME_TO_STRUCT_TM 816    
                            14839 ; 1978 |//$FILENAME _systemtimetotime_t.src
                            14840 ; 1979 |#define RSRC_FUNCLET__SYSTEMTIMETOTIME_T 817    
                            14841 ; 1980 |//$FILENAME oem_setsystemtime.src
                            14842 ; 1981 |#define RSRC_FUNCLET_OEM_SETSYSTEMTIME 818    
                            14843 ; 1982 |//$FILENAME const_pkcrypto.src
                            14844 ; 1983 |#define RSRC_CONST_PKCRYPTO 819    
                            14845 ; 1984 |//$FILENAME const_y.src
                            14846 ; 1985 |#define RSRC_CONST_Y 820    
                            14847 ; 1986 |//$FILENAME aes_dec_table.src
                            14848 ; 1987 |#define RSRC_AES_DEC_TABLE 821    
                            14849 ; 1988 |//$FILENAME aes_key_table.src
                            14850 ; 1989 |#define RSRC_AES_KEY_TABLE 822    
                            14851 ; 1990 |//$FILENAME aes_enc_table.src
                            14852 ; 1991 |#define RSRC_AES_ENC_TABLE 823    
                            14853 ; 1992 |//$FILENAME device_cert.src
                            14854 ; 1993 |#define RSRC_DEVCERT 824    
                            14855 ; 1994 |//$FILENAME devcert_template.src
                            14856 ; 1995 |#define RSRC_DEVCERT_TEMPLATE 825    
                            14857 ; 1996 |//$FILENAME getbase64decodedkey.src
                            14858 ; 1997 |#define RSRC_FUNCLET_GETBASE64DECODEDKEY 826    
                            14859 ; 1998 |//$FILENAME _initslot.src
                            14860 ; 1999 |#define RSRC_FUNCLET__INITSLOT 827    
                            14861 ; 2000 |//$FILENAME hdsimplcommon.src
                            14862 ; 2001 |#define RSRC_HDSIMPLCOMMON_P 828    
                            14863 ; 2002 |//$FILENAME hdsimpl_p.src
                            14864 ; 2003 |#define RSRC_HDSIMPL_P 829    
                            14865 ; 2004 |
                            14866 ; 2005 |
                            14867 ; 2006 |//////////////////////////////////////////////////////////////////////////////////
                            14868 ; 2007 |//pkcrypto Related
                            14869 ; 2008 |//////////////////////////////////////////////////////////////////////////////////
                            14870 ; 2009 |//$FILENAME two_adic_inverse.src
                            14871 ; 2010 |#define RSRC_FUNCLET_TWO_ADIC_INVERSE 830    
                            14872 ; 2011 |//$FILENAME mp_shift.src
                            14873 ; 2012 |#define RSRC_FUNCLET_MP_SHIFT 831    
                            14874 ; 2013 |//$FILENAME mp_significant_bit_count.src
                            14875 ; 2014 |#define RSRC_FUNCLET_MP_SIGNIFICANT_BIT_COUNT 832    
                            14876 ; 2015 |//$FILENAME set_immediate.src
                            14877 ; 2016 |#define RSRC_FUNCLET_SET_IMMEDIATE 833    
                            14878 ; 2017 |//$FILENAME multiply_immediate.src
                            14879 ; 2018 |#define RSRC_FUNCLET_MULTIPLY_IMMEDIATE 834    
                            14880 ; 2019 |//$FILENAME multiply.src
                            14881 ; 2020 |#define RSRC_FUNCLET_MULTIPLY 835    
                            14882 ; 2021 |//$FILENAME divide_precondition_1.src
                            14883 ; 2022 |#define RSRC_FUNCLET_DIVIDE_PRECONDITION_1 836    
                            14884 ; 2023 |//$FILENAME divide_immediate.src
                            14885 ; 2024 |#define RSRC_FUNCLET_DIVIDE_IMMEDIATE 837    
                            14886 ; 2025 |//$FILENAME ecaffine_exponentiation_tabular.src
                            14887 ; 2026 |#define RSRC_FUNCLET_ECAFFINE_EXPONENTIATION_TABULAR 838    
                            14888 ; 2027 |//$FILENAME ecaffine_table_construction.src
                            14889 ; 2028 |#define RSRC_FUNCLET_ECAFFINE_TABLE_CONSTRUCTION 839    
                            14890 ; 2029 |//$FILENAME ecproj5_to_ecaffine.src
                            14891 ; 2030 |#define RSRC_FUNCLET_ECPROJ5_TO_ECAFFINE 840    
                            14892 ; 2031 |//$FILENAME ecproj5_set_infinite.src
                            14893 ; 2032 |#define RSRC_FUNCLET_ECPROJ5_SET_INFINITE 841    
                            14894 ; 2033 |//$FILENAME ecaffine_on_curve.src
                            14895 ; 2034 |#define RSRC_FUNCLET_ECAFFINE_ON_CURVE 842    
                            14896 ; 2035 |//$FILENAME ecaffine_addition.src
                            14897 ; 2036 |#define RSRC_FUNCLET_ECAFFINE_ADDITION 843    
                            14898 ; 2037 |//$FILENAME ecaffine_addition_subtraction.src
                            14899 ; 2038 |#define RSRC_FUNCLET_ECAFFINE_ADDITION_SUBTRACTION 844    
                            14900 ; 2039 |//$FILENAME ecaffine_attributes2.src
                            14901 ; 2040 |#define RSRC_FUNCLET_ECAFFINE_ATTRIBUTES2 845    
                            14902 ; 2041 |//$FILENAME kfdesc_initialize.src
                            14903 ; 2042 |#define RSRC_FUNCLET_KFDESC_INITIALIZE 846    
                            14904 ; 2043 |//$FILENAME kimmediate.src
                            14905 ; 2044 |#define RSRC_FUNCLET_KIMMEDIATE 847    
                            14906 ; 2045 |//$FILENAME kprime_immediater.src
                            14907 ; 2046 |#define RSRC_FUNCLET_KPRIME_IMMEDIATER 848    
                            14908 ; 2047 |//$FILENAME kprime_sqrter.src
                            14909 ; 2048 |#define RSRC_FUNCLET_KPRIME_SQRTER 849    
                            14910 ; 2049 |//$FILENAME kinitialize_prime.src
                            14911 ; 2050 |#define RSRC_FUNCLET_KINITIALIZE_PRIME 850    
                            14912 ; 2051 |//$FILENAME mod_lucasuv.src
                            14913 ; 2052 |#define RSRC_FUNCLET_MOD_LUCASUV 851    
                            14914 ; 2053 |//$FILENAME mod_lucas.src
                            14915 ; 2054 |#define RSRC_FUNCLET_MOD_LUCAS 852    
                            14916 ; 2055 |//$FILENAME bucket_multiply.src
                            14917 ; 2056 |#define RSRC_FUNCLET_BUCKET_MULTIPLY 853    
                            14918 ; 2057 |//$FILENAME mod_exp2000.src
                            14919 ; 2058 |#define RSRC_FUNCLET_MOD_EXP2000 854    
                            14920 ; 2059 |//$FILENAME mod_exp.src
                            14921 ; 2060 |#define RSRC_FUNCLET_MOD_EXP 855    
                            14922 ; 2061 |//$FILENAME modmul_choices1.src
                            14923 ; 2062 |#define RSRC_FUNCLET_MODMUL_CHOICES1 856    
                            14924 ; 2063 |//$FILENAME mod_sqrt.src
                            14925 ; 2064 |#define RSRC_FUNCLET_MOD_SQRT 857    
                            14926 ; 2065 |//$FILENAME create_modulus.src
                            14927 ; 2066 |#define RSRC_FUNCLET_CREATE_MODULUS 858    
                            14928 ; 2067 |//$FILENAME from_modular.src
                            14929 ; 2068 |#define RSRC_FUNCLET_FROM_MODULAR 859    
                            14930 ; 2069 |//$FILENAME add_immediate.src
                            14931 ; 2070 |#define RSRC_FUNCLET_ADD_IMMEDIATE 860    
                            14932 ; 2071 |//$FILENAME add_diff.src
                            14933 ; 2072 |#define RSRC_FUNCLET_ADD_DIFF 861    
                            14934 ; 2073 |//$FILENAME add_full.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14935 ; 2074 |#define RSRC_FUNCLET_ADD_FULL 862    
                            14936 ; 2075 |//$FILENAME compare_sum_same.src
                            14937 ; 2076 |#define RSRC_FUNCLET_COMPARE_SUM_SAME 863    
                            14938 ; 2077 |//$FILENAME sub_immediate.src
                            14939 ; 2078 |#define RSRC_FUNCLET_SUB_IMMEDIATE 864    
                            14940 ; 2079 |//$FILENAME mp_initialization.src
                            14941 ; 2080 |#define RSRC_FUNCLET_MP_INITIALIZATION 865    
                            14942 ; 2081 |//$FILENAME new_random_bytes.src
                            14943 ; 2082 |#define RSRC_FUNCLET_NEW_RANDOM_BYTES 866    
                            14944 ; 2083 |//$FILENAME new_random_dword_interval.src
                            14945 ; 2084 |#define RSRC_FUNCLET_NEW_RANDOM_DWORD_INTERVAL 867    
                            14946 ; 2085 |//$FILENAME new_random_digit_interval.src
                            14947 ; 2086 |#define RSRC_FUNCLET_NEW_RANDOM_DIGIT_INTERVAL 868    
                            14948 ; 2087 |//$FILENAME new_random_mod.src
                            14949 ; 2088 |#define RSRC_FUNCLET_NEW_RANDOM_MOD 869    
                            14950 ; 2089 |//$FILENAME new_random_mod_nonzero.src
                            14951 ; 2090 |#define RSRC_FUNCLET_NEW_RANDOM_MOD_NONZERO 870    
                            14952 ; 2091 |//$FILENAME new_random_digits.src
                            14953 ; 2092 |#define RSRC_FUNCLET_NEW_RANDOM_DIGITS 871    
                            14954 ; 2093 |//$FILENAME words_to_ecaffine.src
                            14955 ; 2094 |#define RSRC_FUNCLET_WORDS_TO_ECAFFINE 872    
                            14956 ; 2095 |//$FILENAME ecaffine_to_dwords.src
                            14957 ; 2096 |#define RSRC_FUNCLET_ECAFFINE_TO_DWORDS 873    
                            14958 ; 2097 |//$FILENAME _threadunsafepkinit.src
                            14959 ; 2098 |#define RSRC_FUNCLET__THREADUNSAFEPKINIT 874    
                            14960 ; 2099 |//$FILENAME pkinit.src
                            14961 ; 2100 |#define RSRC_FUNCLET_PKINIT 875    
                            14962 ; 2101 |//$FILENAME drm_pk_genkeypair.src
                            14963 ; 2102 |#define RSRC_FUNCLET_DRM_PK_GENKEYPAIR 876    
                            14964 ; 2103 |//$FILENAME drm_pk_encrypt.src
                            14965 ; 2104 |#define RSRC_FUNCLET_DRM_PK_ENCRYPT 877    
                            14966 ; 2105 |//$FILENAME drm_pk_decrypt.src
                            14967 ; 2106 |#define RSRC_FUNCLET_DRM_PK_DECRYPT 878    
                            14968 ; 2107 |//$FILENAME byte_array_mod_bignum.src
                            14969 ; 2108 |#define RSRC_FUNCLET_BYTE_ARRAY_MOD_BIGNUM 879    
                            14970 ; 2109 |//$FILENAME fe2ipmod.src
                            14971 ; 2110 |#define RSRC_FUNCLET_FE2IPMOD 880    
                            14972 ; 2111 |//$FILENAME drm_pk_sign.src
                            14973 ; 2112 |#define RSRC_FUNCLET_DRM_PK_SIGN 881    
                            14974 ; 2113 |//$FILENAME drm_pk_verify.src
                            14975 ; 2114 |#define RSRC_FUNCLET_DRM_PK_VERIFY 882    
                            14976 ; 2115 |//$FILENAME random_bytes.src
                            14977 ; 2116 |#define RSRC_FUNCLET_RANDOM_BYTES 883    
                            14978 ; 2117 |//$FILENAME mp_gcdex.src
                            14979 ; 2118 |#define RSRC_FUNCLET_MP_GCDEX 884    
                            14980 ; 2119 |//$FILENAME mp_gcdex_split1.src
                            14981 ; 2120 |#define RSRC_FUNCLET_MP_GCDEX_SPLIT1 885    
                            14982 ; 2121 |//$FILENAME pkcrypto_p.src
                            14983 ; 2122 |#define RSRC_PKCRYPTO_P 886    
                            14984 ; 2123 |//$FILENAME pkcrypto_ovl_p.src
                            14985 ; 2124 |#define RSRC_PKCRYPTO_OVL_P 887    
                            14986 ; 2125 |//$FILENAME del_all_warning_line2.src
                            14987 ; 2126 |#define RSRC_WARNING_MSG_ALL_LINE2 888    
                            14988 ; 2127 |//$FILENAME del_all_file_star.src
                            14989 ; 2128 |#define RSRC_FILE_DELETE_STAR 889    
                            14990 ; 2129 |//$FILENAME string_voice_menu_delete_all.src
                            14991 ; 2130 |#define RSRC_STRING_VOICE_MENU_DELETE_ALL 890    
                            14992 ; 2131 |//$FILENAME Funclet_Init5VSense.src
                            14993 ; 2132 |#define RSRC_FUNCLET_INIT5VSENSE 891    
                            14994 ; 2133 |//$FILENAME Funclet_UpdateDCDCDutyCycle.src
                            14995 ; 2134 |#define RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE 892    
                            14996 ; 2135 |//$FILENAME Funclet_changeplayset.src
                            14997 ; 2136 |#define RSRC_FUNCLET_CHANGE_PLAYSET 893    
                            14998 ; 2137 |
                            14999 ; 2138 |//$FILENAME Funclet_mmctesterase.src
                            15000 ; 2139 |#define RSRC_FUNCLET_MMC_TEST_ERASE 894    
                            15001 ; 2140 |//$FILENAME Funclet_mmchalinit.src
                            15002 ; 2141 |#define RSRC_FUNCLET_MMC_HALINIT 895    
                            15003 ; 2142 |
                            15004 ; 2143 |
                            15005 ; 2144 |// Added to allow rechargeable battery configurations to build
                            15006 ; 2145 |//$FILENAME battery_charging.src
                            15007 ; 2146 |#define RSRC_BATTERY_CHARGING 896    
                            15008 ; 2147 |//$FILENAME batterychargecodebank.src
                            15009 ; 2148 |#define RSRC_BATTERY_CHARGE_CODEBANK 897    
                            15010 ; 2149 |//$FILENAME updatevolume.src
                            15011 ; 2150 |#define RSRC_FUNCLET_SYSUPDATEVOLUME 898    
                            15012 ; 2151 |//$FILENAME Funclet_TestSkipCheckDisk.src
                            15013 ; 2152 |#define RSRC_FUNCLET_TESTSKIPCHECKDISK 899    
                            15014 ; 2153 |//$FILENAME Funclet_DisableStmpGeneratedMicBias.src
                            15015 ; 2154 |#define RSRC_FUNCLET_DISABLE_STMP_GENERATED_MICBIAS 900    
                            15016 ; 2155 |//$FILENAME Funclet_EnableStmpGeneratedMicBias.src
                            15017 ; 2156 |#define RSRC_FUNCLET_ENABLE_STMP_GENERATED_MICBIAS 901    
                            15018 ; 2157 |//$FILENAME Funclet_SetSkipCheckDisk.src
                            15019 ; 2158 |#define RSRC_FUNCLET_SETSKIPCHECKDISK 902    
                            15020 ; 2159 |//$FILENAME drm_expr_evaluateexpression_no_more_tokens.src
                            15021 ; 2160 |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION_NO_MORE_TOKENS 903    
                            15022 ; 2161 |//$FILENAME _iscachedevent.src
                            15023 ; 2162 |#define RSRC_FUNCLET__ISCACHEDEVENT 904    
                            15024 ; 2163 |//$FILENAME setcountedexpirycategory.src
                            15025 ; 2164 |#define RSRC_FUNCLET_SETCOUNTEDEXPIRYCATEGORY 905    
                            15026 ; 2165 |//$FILENAME oem_data.src
                            15027 ; 2166 |#define RSRC_OEM_DATA 906    
                            15028 ; 2167 |//$FILENAME gpk_p.src
                            15029 ; 2168 |#define RSRC_GPK_P 907    
                            15030 ; 2169 |//$FILENAME key_data.src
                            15031 ; 2170 |#define RSRC_KEY_DATA 908    
                            15032 ; 2171 |//$FILENAME string_arial_8_defragmenting_store.src
                            15033 ; 2172 |#define RSRC_DEFRAGMENT_STORE_STRING 909    
                            15034 ; 2173 |//$FILENAME string_working.src
                            15035 ; 2174 |#define RSRC_STRING_WORKING 910    
                            15036 ; 2175 |//$FILENAME Funclet_loadusertime.src
                            15037 ; 2176 |#define RSRC_FUNCLET_LOADUSERTIME 911    
                            15038 ; 2177 |//$FILENAME Funclet_saveusertime.src
                            15039 ; 2178 |#define RSRC_FUNCLET_SAVEUSERTIME 912    
                            15040 ; 2179 |
                            15041 ; 2180 |//$FILENAME Funclet_SysLRADCBrownoutInit.src
                            15042 ; 2181 |#define RSRC_FUNCLET_SYSLRADCBROWNOUTINIT 913    
                            15043 ; 2182 |//$FILENAME Funclet_SysBatteryGetLevel.src
                            15044 ; 2183 |#define RSRC_FUNCLET_SYSBATTERYGETLEVEL 914    
                            15045 ; 2184 |
                            15046 ; 2185 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15047 ; 2186 |// Audible ACELP Resources
                            15048 ; 2187 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15049 ; 2188 |//$FILENAME AudibleAcelpDec.src
                            15050 ; 2189 |#define RSRC_AUDIBLE_ACELPDEC_CODE 915    
                            15051 ; 2190 |//$FILENAME AudibleAcelpP.src
                            15052 ; 2191 |#define RSRC_AUDIBLE_ACELP_CODE_P 916    
                            15053 ; 2192 |//$FILENAME AudibleAcelpX.src
                            15054 ; 2193 |#define RSRC_AUDIBLE_ACELP_DATA_X 917    
                            15055 ; 2194 |//$FILENAME AudibleAcelpY.src
                            15056 ; 2195 |#define RSRC_AUDIBLE_ACELP_DATA_Y 918    
                            15057 ; 2196 |
                            15058 ; 2197 |//$FILENAME AudibleDecMod.src
                            15059 ; 2198 |#define RSRC_AUDIBLE_DECMOD_CODE 919    
                            15060 ; 2199 |//$FILENAME audiblemp3p.src
                            15061 ; 2200 |#define RSRC_AUDIBLE_MP3P_CODE 920    
                            15062 ; 2201 |//$FILENAME audiblemp3x.src
                            15063 ; 2202 |#define RSRC_AUDIBLE_MP3X_CODE 921    
                            15064 ; 2203 |//$FILENAME audiblemp3y.src
                            15065 ; 2204 |#define RSRC_AUDIBLE_MP3Y_CODE 922    
                            15066 ; 2205 |
                            15067 ; 2206 |//$FILENAME audiblemetadata_p.src
                            15068 ; 2207 |#define RSRC_AUDIBLE_METADATA_P 923    
                            15069 ; 2208 |//$FILENAME audiblemetadata_y.src
                            15070 ; 2209 |#define RSRC_AUDIBLE_METADATA_Y 924    
                            15071 ; 2210 |//$FILENAME audiblesongposition_p.src
                            15072 ; 2211 |#define RSRC_AUDIBLE_SONG_POSITION_P 925    
                            15073 ; 2212 |//$FILENAME audibletargetcheck_p.src
                            15074 ; 2213 |#define RSRC_AUDIBLE_TARGET_CHECK_P 926    
                            15075 ; 2214 |//$FILENAME audiblefillfileinfo_p.src
                            15076 ; 2215 |#define RSRC_AUDIBLE_FILLFILEINFO_P 927    
                            15077 ; 2216 |//$FILENAME audibledsa_p.src
                            15078 ; 2217 |#define RSRC_AUDIBLE_DSA_P 928    
                            15079 ; 2218 |//$FILENAME audiblefillmetadata_p.src
                            15080 ; 2219 |#define RSRC_AUDIBLE_FILLMETADATA_P 929    
                            15081 ; 2220 |//$FILENAME audiblemetastrings_p.src
                            15082 ; 2221 |#define RSRC_AUDIBLE_METASTRINGS_P 930    
                            15083 ; 2222 |//$FILENAME aaactivationrecords_p.src
                            15084 ; 2223 |#define RSRC_AUDIBLE_ACTIVATION_P 931    
                            15085 ; 2224 |
                            15086 ; 2225 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15087 ; 2226 |// Effects and SRS Resources
                            15088 ; 2227 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15089 ; 2228 |//$FILENAME srs_effectsmodules_p.src
                            15090 ; 2229 |#define RSRC_SRS_EFFECTS_MODULES_P 932    
                            15091 ; 2230 |//$FILENAME srs_effectsmodules_x.src
                            15092 ; 2231 |#define RSRC_SRS_EFFECTS_MODULES_X 933    
                            15093 ; 2232 |//$FILENAME wowctrl.src
                            15094 ; 2233 |#define RSRC_WOW_CTRL 934    
                            15095 ; 2234 |
                            15096 ; 2235 |//$FILENAME wowmenu.src
                            15097 ; 2236 |#define RSRC_WOW_MENU_CODE_BANK 935    
                            15098 ; 2237 |//$FILENAME string_wowbrightness_menu.src
                            15099 ; 2238 |#define RSRC_STRING_WOW_BRIGHTNESS 936    
                            15100 ; 2239 |//$FILENAME string_wow_menu.src
                            15101 ; 2240 |#define RSRC_STRING_WOW_MENU 937    
                            15102 ; 2241 |//$FILENAME string_wowtrubass_menu.src
                            15103 ; 2242 |#define RSRC_STRING_WOW_TRUBASS 938    
                            15104 ; 2243 |//$FILENAME string_wowvolume_menu.src
                            15105 ; 2244 |#define RSRC_STRING_WOW_VOLUME 939    
                            15106 ; 2245 |//$FILENAME string_wowbrightness_low_menu.src
                            15107 ; 2246 |#define RSRC_STRING_WOW_BRIGHT_LOW 940    
                            15108 ; 2247 |//$FILENAME string_wowbrightness_mid_menu.src
                            15109 ; 2248 |#define RSRC_STRING_WOW_BRIGHT_MID 941    
                            15110 ; 2249 |//$FILENAME string_wowbrightness_high_menu.src
                            15111 ; 2250 |#define RSRC_STRING_WOW_BRIGHT_HIGH 942    
                            15112 ; 2251 |//$FILENAME wow_icon.src
                            15113 ; 2252 |#define RSRC_WOW_ICON 943    
                            15114 ; 2253 |
                            15115 ; 2254 |//$FILENAME wow16k.src
                            15116 ; 2255 |#define RSRC_WOW16K 944    
                            15117 ; 2256 |//$FILENAME wow32k.src
                            15118 ; 2257 |#define RSRC_WOW32K 945    
                            15119 ; 2258 |//$FILENAME wow8k.src
                            15120 ; 2259 |#define RSRC_WOW8K 946    
                            15121 ; 2260 |//$FILENAME wow11k.src
                            15122 ; 2261 |#define RSRC_WOW11K 947    
                            15123 ; 2262 |//$FILENAME wow22k.src
                            15124 ; 2263 |#define RSRC_WOW22K 948    
                            15125 ; 2264 |//$FILENAME wow24k.src
                            15126 ; 2265 |#define RSRC_WOW24K 949    
                            15127 ; 2266 |//$FILENAME wow44k.src
                            15128 ; 2267 |#define RSRC_WOW44K 950    
                            15129 ; 2268 |//$FILENAME wow48k.src
                            15130 ; 2269 |#define RSRC_WOW48K 951    
                            15131 ; 2270 |
                            15132 ; 2271 |//$FILENAME wow16k_Y.src
                            15133 ; 2272 |#define RSRC_WOW16K_Y 952    
                            15134 ; 2273 |//$FILENAME wow32k_Y.src
                            15135 ; 2274 |#define RSRC_WOW32K_Y 953    
                            15136 ; 2275 |//$FILENAME wow8k_Y.src
                            15137 ; 2276 |#define RSRC_WOW8K_Y 954    
                            15138 ; 2277 |//$FILENAME wow11k_Y.src
                            15139 ; 2278 |#define RSRC_WOW11K_Y 955    
                            15140 ; 2279 |//$FILENAME wow22k_Y.src
                            15141 ; 2280 |#define RSRC_WOW22K_Y 956    
                            15142 ; 2281 |//$FILENAME wow24k_Y.src
                            15143 ; 2282 |#define RSRC_WOW24K_Y 957    
                            15144 ; 2283 |//$FILENAME wow44k_Y.src
                            15145 ; 2284 |#define RSRC_WOW44K_Y 958    
                            15146 ; 2285 |//$FILENAME wow48k_Y.src
                            15147 ; 2286 |#define RSRC_WOW48K_Y 959    
                            15148 ; 2287 |
                            15149 ; 2288 |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            15150 ; 2289 |// Audible Section Navigation
                            15151 ; 2290 |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            15152 ; 2291 |//$FILENAME audible_secnav.src
                            15153 ; 2292 |#define RSRC_AUDIBLE_SECNAV_ICON 960    
                            15154 ; 2293 |
                            15155 ; 2294 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15156 ; 2295 |// PLAYLIST3 and Music Library
                            15157 ; 2296 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15158 ; 2297 |
                            15159 ; 2298 |//$FILENAME build_ml.src
                            15160 ; 2299 |#define RSRC_BUILD_ML 961    
                            15161 ; 2300 |//$FILENAME build_ml_warning.src
                            15162 ; 2301 |#define RSRC_BUILD_ML_WARNING 962    
                            15163 ; 2302 |//$FILENAME build_ml_warning2.src
                            15164 ; 2303 |#define RSRC_BUILD_ML_WARNING2 963    
                            15165 ; 2304 |//$FILENAME build_flash1.src
                            15166 ; 2305 |#define RSRC_BUILD_FLASH1 964    
                            15167 ; 2306 |//$FILENAME build_flash2.src
                            15168 ; 2307 |#define RSRC_BUILD_FLASH2 965    
                            15169 ; 2308 |//$FILENAME build_flash3.src
                            15170 ; 2309 |#define RSRC_BUILD_FLASH3 966    
                            15171 ; 2310 |//$FILENAME build_sd1.src
                            15172 ; 2311 |#define RSRC_BUILD_SD1 967    
                            15173 ; 2312 |//$FILENAME build_sd2.src
                            15174 ; 2313 |#define RSRC_BUILD_SD2 968    
                            15175 ; 2314 |//$FILENAME build_sd3.src
                            15176 ; 2315 |#define RSRC_BUILD_SD3 969    
                            15177 ; 2316 |//$FILENAME build_newmusic.src
                            15178 ; 2317 |#define RSRC_BUILD_NEWMUSIC 970    
                            15179 ; 2318 |//$FILENAME sdmd.src
                            15180 ; 2319 |#define RSRC_SDMD_MENU_CODE_BANK 971    
                            15181 ; 2320 |//$FILENAME musiclib_build_function_sec.src
                            15182 ; 2321 |#define RSRC_MUSICLIB_BUILD_FUNCTION_SEC 972    
                            15183 ; 2322 |//$FILENAME musiclib_build_function_flush.src
                            15184 ; 2323 |#define RSRC_MUSICLIB_BUILD_FUNCTION_FLUSH 973    
                            15185 ; 2324 |//$FILENAME MusicLibBuildModule.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15186 ; 2325 |#define RSRC_MUSICLIB_BUILD_MODULE 974    
                            15187 ; 2326 |//$FILENAME MusicLibBuildGenreTable.src
                            15188 ; 2327 |#define RSRC_MUSICLIB_BUILD_GENRE_TABLE 975    
                            15189 ; 2328 |//$FILENAME MusicLibBuildFlushMem.src
                            15190 ; 2329 |#define RSRC_MUSICLIB_BUILD_FLUSH_MEM 976    
                            15191 ; 2330 |//$FILENAME MusicLibBrowseModule.src
                            15192 ; 2331 |#define RSRC_MUSICLIB_BROWSE_MODULE 977    
                            15193 ; 2332 |//$FILENAME MusicLibPlayModule.src
                            15194 ; 2333 |#define RSRC_MUSICLIB_PLAY_MODULE 978    
                            15195 ; 2334 |//$FILENAME MusicLibPlayAllNextModule.src
                            15196 ; 2335 |#define RSRC_MUSICLIB_PLAYALLNEXT_MODULE 979    
                            15197 ; 2336 |//$FILENAME MusicLibPlayAllPrevModule.src
                            15198 ; 2337 |#define RSRC_MUSICLIB_PLAYALLPREV_MODULE 980    
                            15199 ; 2338 |//$FILENAME MusicLibShuffleModule.src
                            15200 ; 2339 |#define RSRC_MUSICLIB_SHUFFLE_MODULE 981    
                            15201 ; 2340 |//$FILENAME Funclet_write_detection_access.src
                            15202 ; 2341 |#define RSRC_FUNCLET_WRITE_DETECTION_ACCESS 982    
                            15203 ; 2342 |//$FILENAME Funclet_LOCAL_GetLvlOneItem_info.src
                            15204 ; 2343 |#define RSRC_FUNCLET_LOCAL_GET_LVL_ONE_ITEM_INFO 983    
                            15205 ; 2344 |//$FILENAME Funclet_LOCAL_GetFlashAssociatedList_info.src
                            15206 ; 2345 |#define RSRC_FUNCLET_LOCAL_GET_FLASH_ASSOCIATED_LIST_INFO 984    
                            15207 ; 2346 |//$FILENAME Funclet_ML_ResumePlayState.src
                            15208 ; 2347 |#define RSRC_FUNCLET_ML_RESUMEPLAYSTATE 985    
                            15209 ; 2348 |//$FILENAME Funclet_ML_UpdateOnTheGo.src
                            15210 ; 2349 |#define RSRC_FUNCLET_ML_UPDATE_ON_THE_GO 986    
                            15211 ; 2350 |//$FILENAME Funclet_ML_ChOnTheGo.src
                            15212 ; 2351 |#define RSRC_FUNCLET_ML_CH_ON_THE_GO 987    
                            15213 ; 2352 |//$FILENAME Funclet_ML_LoadOnTheGo.src
                            15214 ; 2353 |#define RSRC_FUNCLET_ML_LOAD_ON_THE_GO 988    
                            15215 ; 2354 |//$FILENAME Funclet_Build_InitandUseCache.src
                            15216 ; 2355 |#define RSRC_FUNCLET_BUILD_INIT_AND_USE_CACHE 989    
                            15217 ; 2356 |//$FILENAME Funclet_Build_FlushAndCloseCache.src
                            15218 ; 2357 |#define RSRC_FUNCLET_BUILD_FLUSH_AND_CLOSE_CACHE 990    
                            15219 ; 2358 |//$FILENAME Funclet_ML_movePointerBackward.src
                            15220 ; 2359 |#define RSRC_FUNCLET_ML_MOVE_POINTER_BACKWARD 991    
                            15221 ; 2360 |//$FILENAME Funclet_ML_findLastItemPointer.src
                            15222 ; 2361 |#define RSRC_FUNCLET_ML_FIND_LAST_ITEM_POINTER 992    
                            15223 ; 2362 |//$FILENAME Funclet_ML_startShuffle.src
                            15224 ; 2363 |#define RSRC_FUNCLET_ML_START_SHUFFLE 993    
                            15225 ; 2364 |//$FILENAME Funclet_ML_GetFlashDirAssocListId.src
                            15226 ; 2365 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ID 994    
                            15227 ; 2366 |//$FILENAME Funclet_ML_GetFlashDirAssocListRootId.src
                            15228 ; 2367 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ROOT_ID 995    
                            15229 ; 2368 |//$FILENAME Funclet_ML_GetFlashDirAssocListSize.src
                            15230 ; 2369 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_SIZE 996    
                            15231 ; 2370 |//$FILENAME Funclet_ML_GetIdByStateAndPosition.src
                            15232 ; 2371 |#define RSRC_FUNCLET_ML_GET_ID_BY_STATE_AND_POSITION 997    
                            15233 ; 2372 |//$FILENAME Funclet_ML_StartPlayDirSongInit.src
                            15234 ; 2373 |#define RSRC_FUNCLET_ML_START_PLAY_DIR_SONG_INIT 998    
                            15235 ; 2374 |//$FILENAME Funclet_ML_ShuffleNextDirSong.src
                            15236 ; 2375 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_DIR_SONG 999    
                            15237 ; 2376 |//$FILENAME Funclet_ML_BrowseMenu.src
                            15238 ; 2377 |#define RSRC_FUNCLET_ML_BROWSE_MENU 1000    
                            15239 ; 2378 |//$FILENAME Funclet_ML_StartPlayAllSong.src
                            15240 ; 2379 |#define RSRC_FUNCLET_ML_START_PLAY_ALL_SONG 1001    
                            15241 ; 2380 |//$FILENAME Funclet_ML_PlayAllNextSong.src
                            15242 ; 2381 |#define RSRC_FUNCLET_ML_PLAY_ALL_NEXT_SONG 1002    
                            15243 ; 2382 |//$FILENAME Funclet_ML_PlayAllPreviousSong.src
                            15244 ; 2383 |#define RSRC_FUNCLET_ML_PLAY_ALL_PREVIOUS_SONG 1003    
                            15245 ; 2384 |//$FILENAME Funclet_ML_PlayPreviousDirSong.src
                            15246 ; 2385 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_DIR_SONG 1004    
                            15247 ; 2386 |//$FILENAME Funclet_ML_ShuffleNextSong.src
                            15248 ; 2387 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_SONG 1005    
                            15249 ; 2388 |//$FILENAME Funclet_ML_PlayNextSong.src
                            15250 ; 2389 |#define RSRC_FUNCLET_ML_PLAY_NEXT_SONG 1006    
                            15251 ; 2390 |//$FILENAME Funclet_ML_PlayPreviousSong.src
                            15252 ; 2391 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_SONG 1007    
                            15253 ; 2392 |//$FILENAME Funclet_BuildVoiceFilePath.src
                            15254 ; 2393 |#define RSRC_FUNCLET_BUILDVOICEFILEPATH 1008    
                            15255 ; 2394 |//$FILENAME Funclet_BuildFMFilePath.src
                            15256 ; 2395 |#define RSRC_FUNCLET_BUILDFMFILEPATH 1009    
                            15257 ; 2396 |//$FILENAME Funclet_BuildLINEINFilePath.src
                            15258 ; 2397 |#define RSRC_FUNCLET_BUILDLINEINFILEPATH 1010    
                            15259 ; 2398 |//$FILENAME Funclet_GetVoiceFastKey.src
                            15260 ; 2399 |#define RSRC_FUNCLET_GETVOICEFASTKEY 1011    
                            15261 ; 2400 |//$FILENAME MusicLibVoiceApp.src
                            15262 ; 2401 |#define RSRC_MUSICLIB_VOICE_APP 1012    
                            15263 ; 2402 |//$FILENAME MusicLibVoiceModule.src
                            15264 ; 2403 |#define RSRC_MUSICLIB_VOICE_MODULE 1013    
                            15265 ; 2404 |//$FILENAME MusicLibVoicePlayModule.src
                            15266 ; 2405 |#define RSRC_MUSICLIB_VOICEPLAY_MODULE 1014    
                            15267 ; 2406 |//$FILENAME MusicLibMergeFunction.src
                            15268 ; 2407 |#define RSRC_MUSICLIB_MERGE_FUNCTION 1015    
                            15269 ; 2408 |//$FILENAME MusicLibMergeModule.src
                            15270 ; 2409 |#define RSRC_MUSICLIB_MERGE_MODULE 1016    
                            15271 ; 2410 |//$FILENAME MusicLibBrowseApp.src
                            15272 ; 2411 |#define RSRC_MUSICLIB_BROWSE_APP 1017    
                            15273 ; 2412 |//$FILENAME playmusicmenu.src
                            15274 ; 2413 |#define RSRC_PLAYMUSIC_MENU_CODE_BANK 1018    
                            15275 ; 2414 |//$FILENAME browsemenu.src
                            15276 ; 2415 |#define RSRC_BROWSE_MENU_CODE_BANK 1019    
                            15277 ; 2416 |//$FILENAME browsemenu_extra.src
                            15278 ; 2417 |#define RSRC_BROWSE_MENU_EXTRA_CODE_BANK 1020    
                            15279 ; 2418 |//$FILENAME string_play_all.src
                            15280 ; 2419 |#define RSRC_STRING_PLAY_ALL 1021    
                            15281 ; 2420 |//$FILENAME string_play.src
                            15282 ; 2421 |#define RSRC_STRING_PLAY 1022    
                            15283 ; 2422 |//$FILENAME string_unknown_year.src
                            15284 ; 2423 |#define RSRC_STRING_UNKNOWN_YEAR 1023    
                            15285 ; 2424 |//$FILENAME string_year_width.src
                            15286 ; 2425 |#define RSRC_STRING_YEAR_WIDTH 1024    
                            15287 ; 2426 |//$FILENAME string_artist.src
                            15288 ; 2427 |#define RSRC_STRING_ARTIST 1025    
                            15289 ; 2428 |//$FILENAME string_songs.src
                            15290 ; 2429 |#define RSRC_STRING_SONGS 1026    
                            15291 ; 2430 |//$FILENAME string_on_the_fly.src
                            15292 ; 2431 |#define RSRC_STRING_ON_THE_FLY 1027    
                            15293 ; 2432 |//$FILENAME string_new_music.src
                            15294 ; 2433 |#define RSRC_STRING_NEW_MUSIC_MENU 1028    
                            15295 ; 2434 |//$FILENAME string_genre.src
                            15296 ; 2435 |#define RSRC_STRING_GENRE 1029    
                            15297 ; 2436 |//$FILENAME string_year.src
                            15298 ; 2437 |#define RSRC_STRING_YEAR 1030    
                            15299 ; 2438 |//$FILENAME string_playlist.src
                            15300 ; 2439 |#define RSRC_STRING_PLAYLIST 1031    
                            15301 ; 2440 |//$FILENAME string_fm_rec.src
                            15302 ; 2441 |#define RSRC_STRING_FM_REC 1032    
                            15303 ; 2442 |//$FILENAME string_linein_rec.src
                            15304 ; 2443 |#define RSRC_STRING_LINEIN_REC 1033    
                            15305 ; 2444 |//$FILENAME string_play_music.src
                            15306 ; 2445 |#define RSRC_STRING_PLAY_MUSIC 1034    
                            15307 ; 2446 |//$FILENAME highlight_back.src
                            15308 ; 2447 |#define RSRC_HIGHLIGHT_BACK 1035    
                            15309 ; 2448 |//$FILENAME newmusicmenu.src
                            15310 ; 2449 |#define RSRC_NEW_MUSIC_MENU_CODE_BANK 1036    
                            15311 ; 2450 |//$FILENAME string_1_day.src
                            15312 ; 2451 |#define RSRC_STRING_1_DAY 1037    
                            15313 ; 2452 |//$FILENAME string_1_week.src
                            15314 ; 2453 |#define RSRC_STRING_1_WEEK 1038    
                            15315 ; 2454 |//$FILENAME string_1_month.src
                            15316 ; 2455 |#define RSRC_STRING_1_MONTH 1039    
                            15317 ; 2456 |//$FILENAME on_the_fly_full.src
                            15318 ; 2457 |#define RSRC_LIST_FULL_MESSAGE 1040    
                            15319 ; 2458 |//$FILENAME on_the_fly_free1.src
                            15320 ; 2459 |#define RSRC_LIST_FREE_MESSAGE 1041    
                            15321 ; 2460 |//$FILENAME on_the_fly_free2.src
                            15322 ; 2461 |#define RSRC_LIST_FREE_MESSAGE2 1042    
                            15323 ; 2462 |//$FILENAME on_the_fly_delete1.src
                            15324 ; 2463 |#define RSRC_LIST_DELETE_MESSAGE 1043    
                            15325 ; 2464 |//$FILENAME on_the_fly_delete2.src
                            15326 ; 2465 |#define RSRC_LIST_DELETE_MESSAGE2 1044    
                            15327 ; 2466 |//$FILENAME empty_favourite.src
                            15328 ; 2467 |#define RSRC_EMPTY_FAVOURITE 1045    
                            15329 ; 2468 |//$FILENAME sd_remove.src
                            15330 ; 2469 |#define RSRC_SD_REMOVE 1046    
                            15331 ; 2470 |//$FILENAME sd_insert.src
                            15332 ; 2471 |#define RSRC_SD_INSERT 1047    
                            15333 ; 2472 |//$FILENAME check_disk_1.src
                            15334 ; 2473 |#define RSRC_CHECK_DISK_1 1048    
                            15335 ; 2474 |//$FILENAME check_disk_2.src
                            15336 ; 2475 |#define RSRC_CHECK_DISK_2 1049    
                            15337 ; 2476 |//$FILENAME check_disk_3.src
                            15338 ; 2477 |#define RSRC_CHECK_DISK_3 1050    
                            15339 ; 2478 |//$FILENAME flash_error.src
                            15340 ; 2479 |#define RSRC_FLASH_ERROR 1051    
                            15341 ; 2480 |
                            15342 ; 2481 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15343 ; 2482 |// STFM1000 Tuner funclet
                            15344 ; 2483 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15345 ; 2484 |//$FILENAME Funclet_TunerDriverInit.src
                            15346 ; 2485 |#define RSRC_FUNCLET_TUNER_DRIVER_INIT 1052    
                            15347 ; 2486 |//$FILENAME Funclet_TunerDriverIncUp.src
                            15348 ; 2487 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_UP 1053    
                            15349 ; 2488 |//$FILENAME Funclet_TunerDriverIncDown.src
                            15350 ; 2489 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN 1054    
                            15351 ; 2490 |//$FILENAME Funclet_TunerDriverStandyby.src
                            15352 ; 2491 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY 1055    
                            15353 ; 2492 |//$FILENAME Funclet_TunerDriverReplacePreset.src
                            15354 ; 2493 |#define RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET 1056    
                            15355 ; 2494 |//$FILENAME Funclet_TunerDriverErasePreset.src
                            15356 ; 2495 |#define RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET 1057    
                            15357 ; 2496 |//$FILENAME Funclet_TunerDriverTuneToPreset.src
                            15358 ; 2497 |#define RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET 1058    
                            15359 ; 2498 |//$FILENAME Funclet_TunerDriverSearchDown.src
                            15360 ; 2499 |#define RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN 1059    
                            15361 ; 2500 |//$FILENAME Funclet_TunerSTFM1000SafePowerDown.src
                            15362 ; 2501 |#define RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN 1060    
                            15363 ; 2502 |//$FILENAME Funclet_TunerSTFM1000OptimizeChannel.src
                            15364 ; 2503 |#define RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL 1061    
                            15365 ; 2504 |//$FILENAME decstfmmod.src
                            15366 ; 2505 |#define RSRC_DEC_STFM_MOD_CODE 1062    
                            15367 ; 2506 |//$FILENAME dec_stfmp.src
                            15368 ; 2507 |#define RSRC_DEC_STFMP_CODE 1063    
                            15369 ; 2508 |//$FILENAME dec_stfmx.src
                            15370 ; 2509 |#define RSRC_DEC_STFMX_CODE 1064    
                            15371 ; 2510 |//$FILENAME dec_stfmy.src
                            15372 ; 2511 |#define RSRC_DEC_STFMY_CODE 1065    
                            15373 ; 2512 |//$FILENAME Funclet_TunerSTFM1000I2CInit.src
                            15374 ; 2513 |#define RSRC_FUNCLET_STFM1000_I2C_INIT 1066    
                            15375 ; 2514 |//$FILENAME Funclet_TunerDriverScanStations.src
                            15376 ; 2515 |#define RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION 1067    
                            15377 ; 2516 |//$FILENAME Funclet_TunerDriverSetMonoStereoMode.src
                            15378 ; 2517 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE 1068    
                            15379 ; 2518 |//$FILENAME Funclet_STFM1000TestPresence.src
                            15380 ; 2519 |#define RSRC_FUNCLET_STFM1000_TEST_PRESENCE 1069    
                            15381 ; 2520 |//$FILENAME Funclet_I2CWriteTunerRegister.src
                            15382 ; 2521 |#define RSRC_FUNCLET_I2C_WRITE_TUNER_REGISTER 1070    
                            15383 ; 2522 |//$FILENAME Funclet_I2CReset.src
                            15384 ; 2523 |#define RSRC_FUNCLET_I2C_RESET 1071    
                            15385 ; 2524 |//$FILENAME fmtunersecondrsrc.src
                            15386 ; 2525 |#define RSRC_FM_TUNER_SECOND_RSRC 1072    
                            15387 ; 2526 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp1.src
                            15388 ; 2527 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP1 1073    
                            15389 ; 2528 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp2.src
                            15390 ; 2529 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP2 1074    
                            15391 ; 2530 |//$FILENAME Funclet_TunerSTFM1000FindRssiThreshold.src
                            15392 ; 2531 |#define RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD 1075    
                            15393 ; 2532 |//$FILENAME Funclet_TunerSTFM1000DataPathOff.src
                            15394 ; 2533 |#define RSRC_FUNCLET_STFM1000_DATA_PATH_OFF 1076    
                            15395 ; 2534 |//$FILENAME Funclet_TunerSTFM1000ContinueSearching.src
                            15396 ; 2535 |#define RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING 1077    
                            15397 ; 2536 |//RSRC_FUNCLET_STFM1000_SET_LNA_BIAS    equ      975    ;$FILENAME Funclet_STFM1000SetLnaBias.src
                            15398 ; 2537 |//RSRC_FUNCLET_STFM1000_LOOK_FOR_PILOT    equ      976    ;$FILENAME Funclet_STFM1000LookForPilot.src
                            15399 ; 2538 |//$FILENAME Funclet_STFM1000TunerSearchEnded.src
                            15400 ; 2539 |#define RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED 1078    
                            15401 ; 2540 |// for RestoreDriveFromBackup
                            15402 ; 2541 |//$FILENAME restoresysdrive.src
                            15403 ; 2542 |#define RSRC_RESTORESYSDRIVE_P_CODE 1079    
                            15404 ; 2543 |
                            15405 ; 2544 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15406 ; 2545 |// Playlist5 sources
                            15407 ; 2546 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15408 ; 2547 |//$FILENAME playlist5_browsemenu.src
                            15409 ; 2548 |#define RSRC_PL5BROWSE_MENU_CODEBANK 1080    
                            15410 ; 2549 |//$FILENAME playlist5_browsemenu_extra.src
                            15411 ; 2550 |#define RSRC_PL5_BROWSEMENU_EXTRA 1081    
                            15412 ; 2551 |//$FILENAME playlist5_browse_submenu.src
                            15413 ; 2552 |#define RSRC_PL5BROWSE_SUBMENU_CODEBANK 1082    
                            15414 ; 2553 |//$FILENAME playlist5_playback_module.src
                            15415 ; 2554 |#define RSRC_PLAYLIST5_PLAYBACK_MODULE 1083    
                            15416 ; 2555 |//$FILENAME playlist5_browse_module.src
                            15417 ; 2556 |#define RSRC_PLAYLIST5_BROWSE_MODULE 1084    
                            15418 ; 2557 |
                            15419 ; 2558 |//$FILENAME Funclet_Get_LRCDirName_PL5.src
                            15420 ; 2559 |#define RSRC_FUNCLET_GET_LRC_DIR_NAME_PL5 1085    
                            15421 ; 2560 |//$FILENAME Funclet_PL5_PL_QueuePushBack.src   
                            15422 ; 2561 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHBACK 1086    
                            15423 ; 2562 |//$FILENAME Funclet_PL5_PL_QueuePushFront.src 
                            15424 ; 2563 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHFRONT 1087    
                            15425 ; 2564 |
                            15426 ; 2565 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15427 ; 2566 |// DanhNguyen added bitmaps
                            15428 ; 2567 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15429 ; 2568 |//$FILENAME icon_folder.src
                            15430 ; 2569 |#define RSRC_ICON_FOLDER 1088    
                            15431 ; 2570 |//$FILENAME icon_song.src
                            15432 ; 2571 |#define RSRC_ICON_SONG 1089    
                            15433 ; 2572 |
                            15434 ; 2573 |//$FILENAME menu_music.src
                            15435 ; 2574 |#define RSRC_MENU_MUSIC 1090    
                            15436 ; 2575 |//$FILENAME vie_menu_music.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15437 ; 2576 |#define RSRC_VIE_MENU_MUSIC 1091    
                            15438 ; 2577 |
                            15439 ; 2578 |//$FILENAME menu_voice.src
                            15440 ; 2579 |#define RSRC_MENU_VOICE 1092    
                            15441 ; 2580 |//$FILENAME vie_menu_voice.src
                            15442 ; 2581 |#define RSRC_VIE_MENU_VOICE 1093    
                            15443 ; 2582 |
                            15444 ; 2583 |//$FILENAME menu_fmtuner.src
                            15445 ; 2584 |#define RSRC_MENU_FMTUNER 1094    
                            15446 ; 2585 |//$FILENAME vie_menu_fmtuner.src
                            15447 ; 2586 |#define RSRC_VIE_MENU_FMTUNER 1095    
                            15448 ; 2587 |
                            15449 ; 2588 |//$FILENAME menu_record.src
                            15450 ; 2589 |#define RSRC_MENU_RECORD 1096    
                            15451 ; 2590 |//$FILENAME vie_menu_record.src
                            15452 ; 2591 |#define RSRC_VIE_MENU_RECORD 1097    
                            15453 ; 2592 |
                            15454 ; 2593 |//$FILENAME menu_settings.src
                            15455 ; 2594 |#define RSRC_MENU_SETTINGS 1098    
                            15456 ; 2595 |//$FILENAME vie_menu_settings.src
                            15457 ; 2596 |#define RSRC_VIE_MENU_SETTINGS 1099    
                            15458 ; 2597 |
                            15459 ; 2598 |//$FILENAME menu_shutdown.src
                            15460 ; 2599 |#define RSRC_MENU_SHUTDOWN 1100    
                            15461 ; 2600 |//$FILENAME vie_menu_shutdown.src
                            15462 ; 2601 |#define RSRC_VIE_MENU_SHUTDOWN 1101    
                            15463 ; 2602 |
                            15464 ; 2603 |//$FILENAME menu_clock.src
                            15465 ; 2604 |#define RSRC_MENU_CLOCK 1102    
                            15466 ; 2605 |//$FILENAME vie_menu_clock.src
                            15467 ; 2606 |#define RSRC_VIE_MENU_CLOCK 1103    
                            15468 ; 2607 |
                            15469 ; 2608 |//$FILENAME menu_ab.src
                            15470 ; 2609 |#define RSRC_MENU_AB 1104    
                            15471 ; 2610 |//$FILENAME vie_menu_ab.src
                            15472 ; 2611 |#define RSRC_VIE_MENU_AB 1105    
                            15473 ; 2612 |
                            15474 ; 2613 |//$FILENAME menu_delete.src
                            15475 ; 2614 |#define RSRC_MENU_DELETE 1106    
                            15476 ; 2615 |//$FILENAME vie_menu_delete.src
                            15477 ; 2616 |#define RSRC_VIE_MENU_DELETE 1107    
                            15478 ; 2617 |
                            15479 ; 2618 |//$FILENAME menu_about.src
                            15480 ; 2619 |#define RSRC_MENU_ABOUT 1108    
                            15481 ; 2620 |//$FILENAME vie_menu_about.src
                            15482 ; 2621 |#define RSRC_VIE_MENU_ABOUT 1109    
                            15483 ; 2622 |
                            15484 ; 2623 |//$FILENAME menu_exit.src
                            15485 ; 2624 |#define RSRC_MENU_EXIT 1110    
                            15486 ; 2625 |//$FILENAME vie_menu_exit.src
                            15487 ; 2626 |#define RSRC_VIE_MENU_EXIT 1111    
                            15488 ; 2627 |
                            15489 ; 2628 |//$FILENAME music_play_all.src
                            15490 ; 2629 |#define RSRC_MUSIC_PLAY_ALL 1112    
                            15491 ; 2630 |//$FILENAME vie_music_play_all.src
                            15492 ; 2631 |#define RSRC_VIE_MUSIC_PLAY_ALL 1113    
                            15493 ; 2632 |
                            15494 ; 2633 |//$FILENAME music_folder_internal.src
                            15495 ; 2634 |#define RSRC_MUSIC_FOLDER_INTERNAL 1114    
                            15496 ; 2635 |//$FILENAME vie_music_folder_internal.src
                            15497 ; 2636 |#define RSRC_VIE_MUSIC_FOLDER_INTERNAL 1115    
                            15498 ; 2637 |
                            15499 ; 2638 |//$FILENAME music_folder_external.src
                            15500 ; 2639 |#define RSRC_MUSIC_FOLDER_EXTERNAL 1116    
                            15501 ; 2640 |//$FILENAME vie_music_folder_external.src
                            15502 ; 2641 |#define RSRC_VIE_MUSIC_FOLDER_EXTERNAL 1117    
                            15503 ; 2642 |
                            15504 ; 2643 |//$FILENAME music_songs.src
                            15505 ; 2644 |#define RSRC_MUSIC_SONGS 1118    
                            15506 ; 2645 |//$FILENAME vie_music_songs.src
                            15507 ; 2646 |#define RSRC_VIE_MUSIC_SONGS 1119    
                            15508 ; 2647 |
                            15509 ; 2648 |//$FILENAME music_favorites.src
                            15510 ; 2649 |#define RSRC_MUSIC_FAVORITES 1120    
                            15511 ; 2650 |//$FILENAME vie_music_favorites.src
                            15512 ; 2651 |#define RSRC_VIE_MUSIC_FAVORITES 1121    
                            15513 ; 2652 |
                            15514 ; 2653 |//$FILENAME music_fm_record.src
                            15515 ; 2654 |#define RSRC_MUSIC_FM_RECORD 1122    
                            15516 ; 2655 |//$FILENAME vie_music_fm_record.src
                            15517 ; 2656 |#define RSRC_VIE_MUSIC_FM_RECORD 1123    
                            15518 ; 2657 |
                            15519 ; 2658 |//$FILENAME music_exit.src
                            15520 ; 2659 |#define RSRC_MUSIC_EXIT 1124    
                            15521 ; 2660 |//$FILENAME vie_music_exit.src
                            15522 ; 2661 |#define RSRC_VIE_MUSIC_EXIT 1125    
                            15523 ; 2662 |
                            15524 ; 2663 |//$FILENAME browse_music_folder_internal.src
                            15525 ; 2664 |#define RSRC_BROWSE_MUSIC_FOLDER_INTERNAL 1126    
                            15526 ; 2665 |//$FILENAME vie_browse_music_folder_internal.src
                            15527 ; 2666 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_INTERNAL 1127    
                            15528 ; 2667 |
                            15529 ; 2668 |//$FILENAME browse_music_folder_external.src
                            15530 ; 2669 |#define RSRC_BROWSE_MUSIC_FOLDER_EXTERNAL 1128    
                            15531 ; 2670 |//$FILENAME vie_browse_music_folder_external.src
                            15532 ; 2671 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_EXTERNAL 1129    
                            15533 ; 2672 |
                            15534 ; 2673 |//$FILENAME browse_music_list_songs.src
                            15535 ; 2674 |#define RSRC_BROWSE_MUSIC_LIST_SONGS 1130    
                            15536 ; 2675 |//$FILENAME vie_browse_music_list_songs.src
                            15537 ; 2676 |#define RSRC_VIE_BROWSE_MUSIC_LIST_SONGS 1131    
                            15538 ; 2677 |
                            15539 ; 2678 |//$FILENAME browse_music_favourites.src
                            15540 ; 2679 |#define RSRC_BROWSE_MUSIC_FAVOURITES 1132    
                            15541 ; 2680 |//$FILENAME vie_browse_music_favourites.src
                            15542 ; 2681 |#define RSRC_VIE_BROWSE_MUSIC_FAVOURITES 1133    
                            15543 ; 2682 |
                            15544 ; 2683 |//$FILENAME browse_music_fm_files.src
                            15545 ; 2684 |#define RSRC_BROWSE_MUSIC_FM_FILES 1134    
                            15546 ; 2685 |//$FILENAME vie_browse_music_fm_files.src
                            15547 ; 2686 |#define RSRC_VIE_BROWSE_MUSIC_FM_FILES 1135    
                            15548 ; 2687 |
                            15549 ; 2688 |//$FILENAME browse_voice.src
                            15550 ; 2689 |#define RSRC_BROWSE_VOICE 1136    
                            15551 ; 2690 |//$FILENAME vie_browse_voice.src
                            15552 ; 2691 |#define RSRC_VIE_BROWSE_VOICE 1137    
                            15553 ; 2692 |
                            15554 ; 2693 |//$FILENAME favourites_list_add.src
                            15555 ; 2694 |#define RSRC_FAVOURITES_LIST_ADD 1138    
                            15556 ; 2695 |//$FILENAME vie_favourites_list_add.src
                            15557 ; 2696 |#define RSRC_VIE_FAVOURITES_LIST_ADD 1139    
                            15558 ; 2697 |
                            15559 ; 2698 |//$FILENAME favourites_list_remove.src
                            15560 ; 2699 |#define RSRC_FAVOURITES_LIST_REMOVE 1140    
                            15561 ; 2700 |//$FILENAME vie_favourites_list_remove.src
                            15562 ; 2701 |#define RSRC_VIE_FAVOURITES_LIST_REMOVE 1141    
                            15563 ; 2702 |
                            15564 ; 2703 |//$FILENAME favourites_list_is_full.src
                            15565 ; 2704 |#define RSRC_FAVOURITES_LIST_IS_FULL 1142    
                            15566 ; 2705 |//$FILENAME vie_favourites_list_is_full.src
                            15567 ; 2706 |#define RSRC_VIE_FAVOURITES_LIST_IS_FULL 1143    
                            15568 ; 2707 |
                            15569 ; 2708 |//$FILENAME about_screen_1.src
                            15570 ; 2709 |#define RSRC_ABOUT_SCREEN_1 1144    
                            15571 ; 2710 |//$FILENAME vie_about_screen_1.src
                            15572 ; 2711 |#define RSRC_VIE_ABOUT_SCREEN_1 1145    
                            15573 ; 2712 |
                            15574 ; 2713 |//$FILENAME about_screen_2.src
                            15575 ; 2714 |#define RSRC_ABOUT_SCREEN_2 1146    
                            15576 ; 2715 |//$FILENAME vie_about_screen_2.src
                            15577 ; 2716 |#define RSRC_VIE_ABOUT_SCREEN_2 1147    
                            15578 ; 2717 |
                            15579 ; 2718 |//$FILENAME about_screen_3.src
                            15580 ; 2719 |#define RSRC_ABOUT_SCREEN_3 1148    
                            15581 ; 2720 |//$FILENAME vie_about_screen_3.src
                            15582 ; 2721 |#define RSRC_VIE_ABOUT_SCREEN_3 1149    
                            15583 ; 2722 |
                            15584 ; 2723 |//$FILENAME about_screen_4.src
                            15585 ; 2724 |#define RSRC_ABOUT_SCREEN_4 1150    
                            15586 ; 2725 |//$FILENAME vie_about_screen_4.src
                            15587 ; 2726 |#define RSRC_VIE_ABOUT_SCREEN_4 1151    
                            15588 ; 2727 |
                            15589 ; 2728 |//$FILENAME time_date_exit_title.src
                            15590 ; 2729 |#define RSRC_TIME_DATE_EXIT_TITLE 1152    
                            15591 ; 2730 |//$FILENAME vie_time_date_exit_title.src
                            15592 ; 2731 |#define RSRC_VIE_TIME_DATE_EXIT_TITLE 1153    
                            15593 ; 2732 |
                            15594 ; 2733 |//$FILENAME time_clean_desktop.src
                            15595 ; 2734 |#define RSRC_TIME_CLEAN_DESKTOP 1154    
                            15596 ; 2735 |//$FILENAME time_dash.src
                            15597 ; 2736 |#define RSRC_TIME_DASH 1155    
                            15598 ; 2737 |
                            15599 ; 2738 |//$FILENAME time_day_7.src
                            15600 ; 2739 |#define RSRC_TIME_DAY_SAT 1156    
                            15601 ; 2740 |//$FILENAME vie_time_day_7.src
                            15602 ; 2741 |#define RSRC_VIE_TIME_DAY_SAT 1157    
                            15603 ; 2742 |//$FILENAME time_day_cn.src
                            15604 ; 2743 |#define RSRC_TIME_DAY_SUN 1158    
                            15605 ; 2744 |//$FILENAME vie_time_day_cn.src
                            15606 ; 2745 |#define RSRC_VIE_TIME_DAY_SUN 1159    
                            15607 ; 2746 |//$FILENAME time_day_2.src
                            15608 ; 2747 |#define RSRC_TIME_DAY_MON 1160    
                            15609 ; 2748 |//$FILENAME vie_time_day_2.src
                            15610 ; 2749 |#define RSRC_VIE_TIME_DAY_MON 1161    
                            15611 ; 2750 |//$FILENAME time_day_3.src
                            15612 ; 2751 |#define RSRC_TIME_DAY_TUE 1162    
                            15613 ; 2752 |//$FILENAME vie_time_day_3.src
                            15614 ; 2753 |#define RSRC_VIE_TIME_DAY_TUE 1163    
                            15615 ; 2754 |//$FILENAME time_day_4.src
                            15616 ; 2755 |#define RSRC_TIME_DAY_WED 1164    
                            15617 ; 2756 |//$FILENAME vie_time_day_4.src
                            15618 ; 2757 |#define RSRC_VIE_TIME_DAY_WED 1165    
                            15619 ; 2758 |//$FILENAME time_day_5.src
                            15620 ; 2759 |#define RSRC_TIME_DAY_THU 1166    
                            15621 ; 2760 |//$FILENAME vie_time_day_5.src
                            15622 ; 2761 |#define RSRC_VIE_TIME_DAY_THU 1167    
                            15623 ; 2762 |//$FILENAME time_day_6.src
                            15624 ; 2763 |#define RSRC_TIME_DAY_FRI 1168    
                            15625 ; 2764 |//$FILENAME vie_time_day_6.src
                            15626 ; 2765 |#define RSRC_VIE_TIME_DAY_FRI 1169    
                            15627 ; 2766 |
                            15628 ; 2767 |//$FILENAME time_month_1.src
                            15629 ; 2768 |#define RSRC_TIME_MONTH_1 1170    
                            15630 ; 2769 |//$FILENAME vie_time_month_1.src
                            15631 ; 2770 |#define RSRC_VIE_TIME_MONTH_1 1171    
                            15632 ; 2771 |//$FILENAME time_month_2.src
                            15633 ; 2772 |#define RSRC_TIME_MONTH_2 1172    
                            15634 ; 2773 |//$FILENAME vie_time_month_2.src
                            15635 ; 2774 |#define RSRC_VIE_TIME_MONTH_2 1173    
                            15636 ; 2775 |//$FILENAME time_month_3.src
                            15637 ; 2776 |#define RSRC_TIME_MONTH_3 1174    
                            15638 ; 2777 |//$FILENAME vie_time_month_3.src
                            15639 ; 2778 |#define RSRC_VIE_TIME_MONTH_3 1175    
                            15640 ; 2779 |//$FILENAME time_month_4.src
                            15641 ; 2780 |#define RSRC_TIME_MONTH_4 1176    
                            15642 ; 2781 |//$FILENAME vie_time_month_4.src
                            15643 ; 2782 |#define RSRC_VIE_TIME_MONTH_4 1177    
                            15644 ; 2783 |//$FILENAME time_month_5.src
                            15645 ; 2784 |#define RSRC_TIME_MONTH_5 1178    
                            15646 ; 2785 |//$FILENAME vie_time_month_5.src
                            15647 ; 2786 |#define RSRC_VIE_TIME_MONTH_5 1179    
                            15648 ; 2787 |//$FILENAME time_month_6.src
                            15649 ; 2788 |#define RSRC_TIME_MONTH_6 1180    
                            15650 ; 2789 |//$FILENAME vie_time_month_6.src
                            15651 ; 2790 |#define RSRC_VIE_TIME_MONTH_6 1181    
                            15652 ; 2791 |//$FILENAME time_month_7.src
                            15653 ; 2792 |#define RSRC_TIME_MONTH_7 1182    
                            15654 ; 2793 |//$FILENAME vie_time_month_7.src
                            15655 ; 2794 |#define RSRC_VIE_TIME_MONTH_7 1183    
                            15656 ; 2795 |//$FILENAME time_month_8.src
                            15657 ; 2796 |#define RSRC_TIME_MONTH_8 1184    
                            15658 ; 2797 |//$FILENAME vie_time_month_8.src
                            15659 ; 2798 |#define RSRC_VIE_TIME_MONTH_8 1185    
                            15660 ; 2799 |//$FILENAME time_month_9.src
                            15661 ; 2800 |#define RSRC_TIME_MONTH_9 1186    
                            15662 ; 2801 |//$FILENAME vie_time_month_9.src
                            15663 ; 2802 |#define RSRC_VIE_TIME_MONTH_9 1187    
                            15664 ; 2803 |//$FILENAME time_month_10.src
                            15665 ; 2804 |#define RSRC_TIME_MONTH_10 1188    
                            15666 ; 2805 |//$FILENAME vie_time_month_10.src
                            15667 ; 2806 |#define RSRC_VIE_TIME_MONTH_10 1189    
                            15668 ; 2807 |//$FILENAME time_month_11.src
                            15669 ; 2808 |#define RSRC_TIME_MONTH_11 1190    
                            15670 ; 2809 |//$FILENAME vie_time_month_11.src
                            15671 ; 2810 |#define RSRC_VIE_TIME_MONTH_11 1191    
                            15672 ; 2811 |//$FILENAME time_month_12.src
                            15673 ; 2812 |#define RSRC_TIME_MONTH_12 1192    
                            15674 ; 2813 |//$FILENAME vie_time_month_12.src
                            15675 ; 2814 |#define RSRC_VIE_TIME_MONTH_12 1193    
                            15676 ; 2815 |
                            15677 ; 2816 |//$FILENAME time_num_am.src
                            15678 ; 2817 |#define RSRC_TIME_NUM_AM 1194    
                            15679 ; 2818 |//$FILENAME time_num_am.src
                            15680 ; 2819 |#define RSRC_TIME_NUM_PM 1195    
                            15681 ; 2820 |//$FILENAME settime_format_12h.src
                            15682 ; 2821 |#define RSRC_SETTIME_FORMAT_12H 1196    
                            15683 ; 2822 |//$FILENAME settime_format_24h.src
                            15684 ; 2823 |#define RSRC_SETTIME_FORMAT_24H 1197    
                            15685 ; 2824 |//$FILENAME setdate_format_dmy.src
                            15686 ; 2825 |#define RSRC_SETDATE_FORMAT_DMY 1198    
                            15687 ; 2826 |//$FILENAME setdate_format_mdy.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15688 ; 2827 |#define RSRC_SETDATE_FORMAT_MDY 1199    
                            15689 ; 2828 |//$FILENAME setdate_format_ymd.src
                            15690 ; 2829 |#define RSRC_SETDATE_FORMAT_YMD 1200    
                            15691 ; 2830 |
                            15692 ; 2831 |//$FILENAME time_num_large_0.src
                            15693 ; 2832 |#define RSRC_TIME_NUM_LARGE_0 1201    
                            15694 ; 2833 |//$FILENAME time_num_large_1.src
                            15695 ; 2834 |#define RSRC_TIME_NUM_LARGE_1 1202    
                            15696 ; 2835 |//$FILENAME time_num_large_2.src
                            15697 ; 2836 |#define RSRC_TIME_NUM_LARGE_2 1203    
                            15698 ; 2837 |//$FILENAME time_num_large_3.src
                            15699 ; 2838 |#define RSRC_TIME_NUM_LARGE_3 1204    
                            15700 ; 2839 |//$FILENAME time_num_large_4.src
                            15701 ; 2840 |#define RSRC_TIME_NUM_LARGE_4 1205    
                            15702 ; 2841 |//$FILENAME time_num_large_5.src
                            15703 ; 2842 |#define RSRC_TIME_NUM_LARGE_5 1206    
                            15704 ; 2843 |//$FILENAME time_num_large_6.src
                            15705 ; 2844 |#define RSRC_TIME_NUM_LARGE_6 1207    
                            15706 ; 2845 |//$FILENAME time_num_large_7.src
                            15707 ; 2846 |#define RSRC_TIME_NUM_LARGE_7 1208    
                            15708 ; 2847 |//$FILENAME time_num_large_8.src
                            15709 ; 2848 |#define RSRC_TIME_NUM_LARGE_8 1209    
                            15710 ; 2849 |//$FILENAME time_num_large_9.src
                            15711 ; 2850 |#define RSRC_TIME_NUM_LARGE_9 1210    
                            15712 ; 2851 |
                            15713 ; 2852 |//$FILENAME time_num_medium_0.src
                            15714 ; 2853 |#define RSRC_TIME_NUM_MEDIUM_0 1211    
                            15715 ; 2854 |//$FILENAME time_num_medium_1.src
                            15716 ; 2855 |#define RSRC_TIME_NUM_MEDIUM_1 1212    
                            15717 ; 2856 |//$FILENAME time_num_medium_2.src
                            15718 ; 2857 |#define RSRC_TIME_NUM_MEDIUM_2 1213    
                            15719 ; 2858 |//$FILENAME time_num_medium_3.src
                            15720 ; 2859 |#define RSRC_TIME_NUM_MEDIUM_3 1214    
                            15721 ; 2860 |//$FILENAME time_num_medium_4.src
                            15722 ; 2861 |#define RSRC_TIME_NUM_MEDIUM_4 1215    
                            15723 ; 2862 |//$FILENAME time_num_medium_5.src
                            15724 ; 2863 |#define RSRC_TIME_NUM_MEDIUM_5 1216    
                            15725 ; 2864 |//$FILENAME time_num_medium_6.src
                            15726 ; 2865 |#define RSRC_TIME_NUM_MEDIUM_6 1217    
                            15727 ; 2866 |//$FILENAME time_num_medium_7.src
                            15728 ; 2867 |#define RSRC_TIME_NUM_MEDIUM_7 1218    
                            15729 ; 2868 |//$FILENAME time_num_medium_8.src
                            15730 ; 2869 |#define RSRC_TIME_NUM_MEDIUM_8 1219    
                            15731 ; 2870 |//$FILENAME time_num_medium_9.src
                            15732 ; 2871 |#define RSRC_TIME_NUM_MEDIUM_9 1220    
                            15733 ; 2872 |
                            15734 ; 2873 |//$FILENAME time_colon.src
                            15735 ; 2874 |#define RSRC_TIME_COLON 1221    
                            15736 ; 2875 |
                            15737 ; 2876 |//$FILENAME settings_backlight_title.src
                            15738 ; 2877 |#define RSRC_SETTINGS_BACKLIGHT_TITLE 1222    
                            15739 ; 2878 |//$FILENAME settings_auto_shutdown_title.src
                            15740 ; 2879 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_TITLE 1223    
                            15741 ; 2880 |//$FILENAME settings_playmode_title.src
                            15742 ; 2881 |#define RSRC_SETTINGS_PLAYMODE_TITLE 1224    
                            15743 ; 2882 |
                            15744 ; 2883 |//$FILENAME settings_contrast_title.src
                            15745 ; 2884 |#define RSRC_SETTINGS_CONTRAST_TITLE 1225    
                            15746 ; 2885 |//$FILENAME vie_settings_contrast_title.src
                            15747 ; 2886 |#define RSRC_VIE_SETTINGS_CONTRAST_TITLE 1226    
                            15748 ; 2887 |
                            15749 ; 2888 |//$FILENAME settings_eq_title.src
                            15750 ; 2889 |#define RSRC_SETTINGS_EQ_TITLE 1227    
                            15751 ; 2890 |//$FILENAME vie_settings_eq_title.src
                            15752 ; 2891 |#define RSRC_VIE_SETTINGS_EQ_TITLE 1228    
                            15753 ; 2892 |
                            15754 ; 2893 |//$FILENAME settings_exit_title.src
                            15755 ; 2894 |#define RSRC_SETTINGS_EXIT_TITLE 1229    
                            15756 ; 2895 |//$FILENAME vie_settings_exit_title.src
                            15757 ; 2896 |#define RSRC_VIE_SETTINGS_EXIT_TITLE 1230    
                            15758 ; 2897 |
                            15759 ; 2898 |//$FILENAME settings_set_date_title.src
                            15760 ; 2899 |#define RSRC_SETTINGS_SET_DATE_TITLE 1231    
                            15761 ; 2900 |//$FILENAME vie_settings_set_date_title.src
                            15762 ; 2901 |#define RSRC_VIE_SETTINGS_SET_DATE_TITLE 1232    
                            15763 ; 2902 |
                            15764 ; 2903 |//$FILENAME settings_set_time_title.src
                            15765 ; 2904 |#define RSRC_SETTINGS_SET_TIME_TITLE 1233    
                            15766 ; 2905 |//$FILENAME vie_settings_set_time_title.src
                            15767 ; 2906 |#define RSRC_VIE_SETTINGS_SET_TIME_TITLE 1234    
                            15768 ; 2907 |
                            15769 ; 2908 |//$FILENAME settings_playmode_normal.src
                            15770 ; 2909 |#define RSRC_SETTINGS_PLAYMODE_NORMAL 1235    
                            15771 ; 2910 |//$FILENAME vie_settings_playmode_normal.src
                            15772 ; 2911 |#define RSRC_VIE_SETTINGS_PLAYMODE_NORMAL 1236    
                            15773 ; 2912 |
                            15774 ; 2913 |//$FILENAME settings_playmode_repeatone.src
                            15775 ; 2914 |#define RSRC_SETTINGS_PLAYMODE_REPEATONE 1237    
                            15776 ; 2915 |//$FILENAME vie_settings_playmode_repeatone.src
                            15777 ; 2916 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATONE 1238    
                            15778 ; 2917 |
                            15779 ; 2918 |//$FILENAME settings_playmode_repeatall.src
                            15780 ; 2919 |#define RSRC_SETTINGS_PLAYMODE_REPEATALL 1239    
                            15781 ; 2920 |//$FILENAME vie_settings_playmode_repeatall.src
                            15782 ; 2921 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATALL 1240    
                            15783 ; 2922 |
                            15784 ; 2923 |//$FILENAME settings_playmode_shuffle.src
                            15785 ; 2924 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE 1241    
                            15786 ; 2925 |//$FILENAME vie_settings_playmode_shuffle.src
                            15787 ; 2926 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE 1242    
                            15788 ; 2927 |
                            15789 ; 2928 |//$FILENAME settings_playmode_shuffle_repeat.src
                            15790 ; 2929 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1243    
                            15791 ; 2930 |//$FILENAME vie_settings_playmode_shuffle_repeat.src
                            15792 ; 2931 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1244    
                            15793 ; 2932 |
                            15794 ; 2933 |//$FILENAME settings_backlight_on.src
                            15795 ; 2934 |#define RSRC_SETTINGS_BACKLIGHT_ON 1245    
                            15796 ; 2935 |//$FILENAME vie_settings_backlight_on.src
                            15797 ; 2936 |#define RSRC_VIE_SETTINGS_BACKLIGHT_ON 1246    
                            15798 ; 2937 |
                            15799 ; 2938 |//$FILENAME settings_backlight_10s.src
                            15800 ; 2939 |#define RSRC_SETTINGS_BACKLIGHT_10S 1247    
                            15801 ; 2940 |//$FILENAME vie_settings_backlight_10s.src
                            15802 ; 2941 |#define RSRC_VIE_SETTINGS_BACKLIGHT_10S 1248    
                            15803 ; 2942 |
                            15804 ; 2943 |//$FILENAME settings_backlight_20s.src
                            15805 ; 2944 |#define RSRC_SETTINGS_BACKLIGHT_20S 1249    
                            15806 ; 2945 |//$FILENAME vie_settings_backlight_20s.src
                            15807 ; 2946 |#define RSRC_VIE_SETTINGS_BACKLIGHT_20s 1250    
                            15808 ; 2947 |
                            15809 ; 2948 |//$FILENAME settings_backlight_30s.src
                            15810 ; 2949 |#define RSRC_SETTINGS_BACKLIGHT_30S 1251    
                            15811 ; 2950 |//$FILENAME vie_settings_backlight_30s.src
                            15812 ; 2951 |#define RSRC_VIE_SETTINGS_BACKLIGHT_30S 1252    
                            15813 ; 2952 |
                            15814 ; 2953 |//$FILENAME settings_auto_shutdown_disable.src
                            15815 ; 2954 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_DISABLE 1253    
                            15816 ; 2955 |//$FILENAME vie_settings_auto_shutdown_disable.src
                            15817 ; 2956 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_DISABLE 1254    
                            15818 ; 2957 |
                            15819 ; 2958 |//$FILENAME settings_auto_shutdown_1minute.src
                            15820 ; 2959 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1255    
                            15821 ; 2960 |//$FILENAME vie_settings_auto_shutdown_1min.src
                            15822 ; 2961 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1256    
                            15823 ; 2962 |
                            15824 ; 2963 |//$FILENAME settings_auto_shutdown_2minutes.src
                            15825 ; 2964 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1257    
                            15826 ; 2965 |//$FILENAME vie_settings_auto_shutdown_2min.src
                            15827 ; 2966 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1258    
                            15828 ; 2967 |
                            15829 ; 2968 |//$FILENAME settings_auto_shutdown_5minutes.src
                            15830 ; 2969 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1259    
                            15831 ; 2970 |//$FILENAME vie_settings_auto_shutdown_5min.src
                            15832 ; 2971 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1260    
                            15833 ; 2972 |
                            15834 ; 2973 |//$FILENAME settings_auto_shutdown_10minutes.src
                            15835 ; 2974 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1261    
                            15836 ; 2975 |//$FILENAME vie_settings_auto_shutdown_10min.src
                            15837 ; 2976 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1262    
                            15838 ; 2977 |
                            15839 ; 2978 |//$FILENAME settings_languages_eng.src
                            15840 ; 2979 |#define RSRC_SETTINGS_LANGUAGES_ENG 1263    
                            15841 ; 2980 |//$FILENAME settings_languages_vie.src
                            15842 ; 2981 |#define RSRC_SETTINGS_LANGUAGES_VIE 1264    
                            15843 ; 2982 |
                            15844 ; 2983 |//$FILENAME fraction_dot.src
                            15845 ; 2984 |#define RSRC_FRACTION_DOT 1265    
                            15846 ; 2985 |
                            15847 ; 2986 |//$FILENAME fm_background.src
                            15848 ; 2987 |#define RSRC_FM_BACKGROUND 1266    
                            15849 ; 2988 |//$FILENAME vie_fm_background.src
                            15850 ; 2989 |#define RSRC_VIE_FM_BACKGROUND 1267    
                            15851 ; 2990 |
                            15852 ; 2991 |//$FILENAME searching_please_wait.src
                            15853 ; 2992 |#define RSRC_SEARCHING_PLEASE_WAIT 1268    
                            15854 ; 2993 |//$FILENAME vie_searching_please_wait.src
                            15855 ; 2994 |#define RSRC_VIE_SEARCHING_PLEASE_WAIT 1269    
                            15856 ; 2995 |
                            15857 ; 2996 |//$FILENAME fm_auto_search.src
                            15858 ; 2997 |#define RSRC_FM_AUTO_SEARCH 1270    
                            15859 ; 2998 |//$FILENAME vie_fm_auto_search.src
                            15860 ; 2999 |#define RSRC_VIE_FM_AUTO_SEARCH 1271    
                            15861 ; 3000 |
                            15862 ; 3001 |//$FILENAME jvj_shutdown_player.src
                            15863 ; 3002 |#define RSRC_JVJ_SHUTDOWN_PLAYER 1272    
                            15864 ; 3003 |//$FILENAME vie_jvj_shutdown_player.src
                            15865 ; 3004 |#define RSRC_VIE_JVJ_SHUTDOWN_PLAYER 1273    
                            15866 ; 3005 |
                            15867 ; 3006 |#endif //IF (!@def(resources))
                            15868 ; 3007 |
                            15869 
                            15871 
                            15872 ; 11   |#include "project.h"
                            15873 
                            15875 
                            15876 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            15877 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                            15878 ; 3    |//  Filename: project.inc
                            15879 ; 4    |//  Description: 
                            15880 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            15881 ; 6    |
                            15882 ; 7    |#if (!defined(_PROJECT_INC))
                            15883 ; 8    |#define _PROJECT_INC 1
                            15884 ; 9    |
                            15885 ; 10   |#if defined(STMP_BUILD_PLAYER)
                            15886 ; 11   |#include "hwequ.h"
                            15887 
                            15889 
                            15890 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            15891 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                            15892 ; 3    |//  File        : hwequ.inc
                            15893 ; 4    |//  Description : STMP Hardware Constants
                            15894 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            15895 ; 6    |
                            15896 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                            15897 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                            15898 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                            15899 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                            15900 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                            15901 ; 12   |
                            15902 ; 13   |#if (!defined(HWEQU_INC))
                            15903 ; 14   |#define HWEQU_INC 1
                            15904 ; 15   |
                            15905 ; 16   |#include "types.h"
                            15906 ; 17   |#include "regsclkctrl.h"
                            15907 ; 18   |#include "regscore.h"
                            15908 ; 19   |#include "regscodec.h"
                            15909 ; 20   |#include "regsdcdc.h"
                            15910 ; 21   |#include "regsemc.h"
                            15911 ; 22   |#include "regsgpio.h"
                            15912 ; 23   |#include "regsi2c.h"
                            15913 ; 24   |#include "regsi2s.h"
                            15914 ; 25   |#include "regsicoll.h"
                            15915 ; 26   |#include "regslradc.h"
                            15916 ; 27   |#include "regspwm.h"
                            15917 ; 28   |#include "regsrevision.h"
                            15918 ; 29   |#include "regsrtc.h"
                            15919 ; 30   |#include "regsspare.h"
                            15920 ; 31   |#include "regsspi.h"
                            15921 ; 32   |#include "regsswizzle.h"
                            15922 ; 33   |#include "regssdram.h"
                            15923 ; 34   |#include "regstb.h"
                            15924 ; 35   |#include "regstimer.h"
                            15925 ; 36   |#include "regsusb20.h"
                            15926 ; 37   |#include "regsusb20phy.h"
                            15927 ; 38   |
                            15928 ; 39   |
                            15929 ; 40   |#endif // if (!@def(hwequ))
                            15930 ; 41   |
                            15931 
                            15933 
                            15934 ; 12   |#else 
                            15935 ; 13   |//include "regscodec.inc"
                            15936 ; 14   |#endif
                            15937 ; 15   |
                            15938 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            15939 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults ON) & 
                            15940 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm. STMP00012148
                            15941 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal). 
                            15942 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's specs can 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15943 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player mode.  
                            15944 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            15945 ; 23   |
                            15946 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            15947 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            15948 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            15949 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define below by defining
                            15950 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            15951 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            15952 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            15953 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot config above- 
                            15954 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down threshholds by maybe 50mV.
                            15955 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed.
                            15956 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            15957 ; 35   |
                            15958 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            15959 ; 37   |// MEDIA DEFINITIONS
                            15960 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            15961 ; 39   |
                            15962 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            15963 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            15964 ; 42   |#if defined(NAND1)
                            15965 ; 43   |#define SM_INTERNAL_CHIPS 1
                            15966 ; 44   |#else 
                            15967 ; 45   |#if defined(NAND2)
                            15968 ; 46   |#define SM_INTERNAL_CHIPS 2
                            15969 ; 47   |#else 
                            15970 ; 48   |#if defined(NAND3)
                            15971 ; 49   |#define SM_INTERNAL_CHIPS 3
                            15972 ; 50   |#else 
                            15973 ; 51   |#if defined(NAND4)
                            15974 ; 52   |#define SM_INTERNAL_CHIPS 4
                            15975 ; 53   |#else 
                            15976 ; 54   |#define SM_INTERNAL_CHIPS 1
                            15977 ; 55   |#endif
                            15978 ; 56   |#endif
                            15979 ; 57   |#endif
                            15980 ; 58   |#endif
                            15981 ; 59   |
                            15982 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            15983 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            15984 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it reads 0.  
                            15985 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            15986 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it reads 1.
                            15987 ; 65   |//*** comment out if active high ****
                            15988 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            15989 ; 67   |
                            15990 ; 68   |#if defined(SMEDIA)
                            15991 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            15992 ; 70   |#define NUM_SM_EXTERNAL 1
                            15993 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            15994 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            15995 ; 73   |#else 
                            15996 ; 74   |#if defined(MMC)
                            15997 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            15998 ; 76   |#define NUM_SM_EXTERNAL 0
                            15999 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            16000 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            16001 ; 79   |#else 
                            16002 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            16003 ; 81   |#define NUM_SM_EXTERNAL 0
                            16004 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            16005 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            16006 ; 84   |#endif
                            16007 ; 85   |#endif
                            16008 ; 86   |
                            16009 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            16010 ; 88   |// Mass Storage Class definitions
                            16011 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            16012 ; 90   |// Set to 0 if Composite Device build is desired.    
                            16013 ; 91   |#define MULTI_LUN_BUILD 1   
                            16014 ; 92   |
                            16015 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            16016 ; 94   |//  SCSI
                            16017 ; 95   |#if (MULTI_LUN_BUILD==0)
                            16018 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            16019 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            16020 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            16021 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            16022 ; 100  |  #else
                            16023 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            16024 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            16025 ; 103  |  #endif
                            16026 ; 104  |#else
                            16027 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            16028 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            16029 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            16030 ; 108  |  #else
                            16031 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            16032 ; 110  |  #endif
                            16033 ; 111  |#endif
                            16034 ; 112  |
                            16035 ; 113  |
                            16036 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            16037 ; 115  |
                            16038 ; 116  |
                            16039 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            16040 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            16041 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            16042 ; 120  |#ifdef MMC
                            16043 ; 121  |#ifdef MTP_BUILD
                            16044 ; 122  |// --------------------
                            16045 ; 123  |// MTP and MMC
                            16046 ; 124  |// --------------------
                            16047 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            16048 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            16049 ; 127  |#else  // ifndef MTP_BUILD
                            16050 ; 128  |#ifdef STMP_BUILD_PLAYER
                            16051 ; 129  |// --------------------
                            16052 ; 130  |// Player and MMC
                            16053 ; 131  |// --------------------
                            16054 ; 132  |#else
                            16055 ; 133  |// --------------------
                            16056 ; 134  |// USBMSC and MMC
                            16057 ; 135  |// --------------------
                            16058 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            16059 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            16060 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            16061 ; 139  |#endif // ifdef MTP_BUILD
                            16062 ; 140  |#else  // ifndef MMC
                            16063 ; 141  |#ifdef MTP_BUILD
                            16064 ; 142  |// --------------------
                            16065 ; 143  |// MTP and NAND only
                            16066 ; 144  |// --------------------
                            16067 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            16068 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            16069 ; 147  |#else  // ifndef MTP_BUILD
                            16070 ; 148  |#ifdef STMP_BUILD_PLAYER
                            16071 ; 149  |// --------------------
                            16072 ; 150  |// Player and NAND only
                            16073 ; 151  |// --------------------
                            16074 ; 152  |#else
                            16075 ; 153  |// --------------------
                            16076 ; 154  |// USBMSC and NAND only
                            16077 ; 155  |// --------------------
                            16078 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            16079 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            16080 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            16081 ; 159  |#endif // ifdef MTP_BUILD
                            16082 ; 160  |#endif // ifdef MMC 
                            16083 ; 161  |
                            16084 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            16085 ; 163  |#if (defined(MTP_BUILD))
                            16086 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            16087 ; 165  |
                            16088 ; 166  |////!
                            16089 ; 167  |////! This varible holds the watchdog count for the store flush.
                            16090 ; 168  |////!
                            16091 ; 169  |///
                            16092 ; 170  |#include <types.h>
                            16093 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            16094 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            16095 ; 173  |#endif
                            16096 ; 174  |
                            16097 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            16098 ; 176  |// These are needed here for Mass Storage Class
                            16099 ; 177  |// Needs to be cleaned up
                            16100 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            16101 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            16102 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            16103 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            16104 ; 182  |
                            16105 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            16106 ; 184  |
                            16107 ; 185  |#endif
                            16108 ; 186  |
                            16109 ; 187  |
                            16110 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            16111 ; 189  |// SmartMedia/NAND defs
                            16112 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            16113 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            16114 ; 192  |
                            16115 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            16116 ; 194  |// Sysloadresources defs
                            16117 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            16118 ; 196  |
                            16119 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            16120 ; 198  |// MMC defs
                            16121 ; 199  |#define MMC_MAX_PARTITIONS 1
                            16122 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            16123 ; 201  |
                            16124 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            16125 ; 203  |// SPI defs
                            16126 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            16127 ; 205  |
                            16128 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            16129 ; 207  |// Global media defs
                            16130 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            16131 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            16132 ; 210  |
                            16133 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            16134 ; 212  |// DO NOT CHANGE THESE!!!
                            16135 ; 213  |#define SM_MAX_PARTITIONS 4
                            16136 ; 214  |#define MAX_HANDLES 2
                            16137 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            16138 ; 216  |
                            16139 ; 217  |
                            16140 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            16141 ; 219  |// Battery LRADC Values 
                            16142 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            16143 ; 221  |// brownout trip point in mV (moved by RS)
                            16144 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            16145 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            16146 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            16147 ; 225  |//     audio recording to media.
                            16148 ; 226  |#define BATT_SAFETY_MARGIN 10
                            16149 ; 227  |
                            16150 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                            16151 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline voltage to do a refresh.
                            16152 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            16153 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            16154 ; 232  |
                            16155 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc presence.
                            16156 ; 234  |
                            16157 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            16158 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat check.
                            16159 ; 237  |#if (!defined(CLCD))
                            16160 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            16161 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            16162 ; 240  |#else 
                            16163 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            16164 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            16165 ; 243  |#endif
                            16166 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            16167 ; 245  |
                            16168 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            16169 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIon.
                            16170 ; 248  |// See mp3 encoder overlay.
                            16171 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            16172 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            16173 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            16174 ; 252  |
                            16175 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            16176 ; 254  |// Voice recording filenames
                            16177 ; 255  |// number of digits in filename Vxxx.wav
                            16178 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            16179 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            16180 ; 258  |
                            16181 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            16182 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            16183 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            16184 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            16185 ; 263  |#if defined(DEVICE_3500)
                            16186 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            16187 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            16188 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            16189 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, & demo player)
                            16190 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            16191 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            16192 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            16193 ; 271  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16194 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn when bias not yet ready.
                            16195 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            16196 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevention if you use rec button from outside voice menu.
                            16197 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latency in the record-from-music-menu use-case.
                            16198 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            16199 ; 277  |
                            16200 ; 278  |#else 
                            16201 ; 279  |// STMP3410
                            16202 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            16203 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            16204 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            16205 ; 283  |#endif
                            16206 ; 284  |
                            16207 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            16208 ; 286  |// Number of available soft timers
                            16209 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            16210 ; 288  |#if defined(SYNC_LYRICS)
                            16211 ; 289  |#define SOFT_TIMERS 10
                            16212 ; 290  |#else 
                            16213 ; 291  |#if defined(JPEG_DECODER)
                            16214 ; 292  |#define SOFT_TIMERS 10
                            16215 ; 293  |#else 
                            16216 ; 294  |#define SOFT_TIMERS 9
                            16217 ; 295  |#endif
                            16218 ; 296  |#endif
                            16219 ; 297  |
                            16220 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            16221 ; 299  |//  sizes
                            16222 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            16223 ; 301  |#if defined(MMC)
                            16224 ; 302  |#if defined(USE_PLAYLIST5)
                            16225 ; 303  |#define MENU_STACK_SIZE 1500
                            16226 ; 304  |#else 
                            16227 ; 305  |#define MENU_STACK_SIZE 1250
                            16228 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            16229 ; 307  |#else 
                            16230 ; 308  |#if defined(USE_PLAYLIST5)
                            16231 ; 309  |#define MENU_STACK_SIZE 1500
                            16232 ; 310  |#else 
                            16233 ; 311  |#define MENU_STACK_SIZE 1250
                            16234 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            16235 ; 313  |#endif //if @def('MMC')
                            16236 ; 314  |
                            16237 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 750 else 550 for other builds? TOVERIFY. MYALLOC
                            16238 ; 316  |// 
                            16239 ; 317  |#define STACK_L1_SIZE 750
                            16240 ; 318  |#define STACK_L2_SIZE 100
                            16241 ; 319  |#define STACK_L3_SIZE 160
                            16242 ; 320  |
                            16243 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            16244 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            16245 ; 323  |// is ok with switching code.
                            16246 ; 324  |#if defined(MTP_BUILD)
                            16247 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            16248 ; 326  |#endif
                            16249 ; 327  |
                            16250 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            16251 ; 329  |// maximum number of nested funclets 
                            16252 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            16253 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            16254 ; 332  |
                            16255 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            16256 ; 334  |//    LCD DEFINITIONS
                            16257 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            16258 ; 336  |
                            16259 ; 337  |#define SPACE_CHAR 0x000020          
                            16260 ; 338  |#define ZERO_CHAR 0x000030
                            16261 ; 339  |#define COLON_CHAR 0x00003A
                            16262 ; 340  |#define PERIOD_CHAR 0x00002E
                            16263 ; 341  |
                            16264 ; 342  |#if (defined(S6B33B0A_LCD))
                            16265 ; 343  |#define LCD_X_SIZE 128
                            16266 ; 344  |#define LCD_Y_SIZE 159
                            16267 ; 345  |#endif
                            16268 ; 346  |
                            16269 ; 347  |#if (defined(SED15XX_LCD))
                            16270 ; 348  |#define LCD_X_SIZE 128
                            16271 ; 349  |#define LCD_Y_SIZE 64
                            16272 ; 350  |#endif
                            16273 ; 351  |
                            16274 ; 352  |
                            16275 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            16276 ; 354  |//   Details on Customizing Contrast
                            16277 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            16278 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            16279 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            16280 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            16281 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            16282 ; 360  |//   unless the ezact sequence is remembered.
                            16283 ; 361  |//   To find out what range your player supports: 
                            16284 ; 362  |//   change these equs to full range or comment out (full range is default)
                            16285 ; 363  |//;;;;;;
                            16286 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            16287 ; 365  |// recommended calibration using player -- uncomment 
                            16288 ; 366  |//;;;;;;
                            16289 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            16290 ; 368  |////////////////////////////
                            16291 ; 369  |#if (defined(DEMO_HW))
                            16292 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi LCD (June6'05)
                            16293 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            16294 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            16295 ; 373  |#else 
                            16296 ; 374  |
                            16297 ; 375  |#if (defined(S6B33B0A_LCD))
                            16298 ; 376  |#define LCD_MAX_CONTRAST 210
                            16299 ; 377  |#define LCD_MIN_CONTRAST 160    
                            16300 ; 378  |#endif
                            16301 ; 379  |
                            16302 ; 380  |#if (defined(SED15XX_LCD))
                            16303 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            16304 ; 382  |// Engineering board regs support range [17-37].
                            16305 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            16306 ; 384  |//   One default contrast range [24-42] works for both.
                            16307 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            16308 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            16309 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            16310 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            16311 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            16312 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            16313 ; 391  |
                            16314 ; 392  |#if (defined(NEWSHINGYIH))
                            16315 ; 393  |#define LCD_MAX_CONTRAST 250
                            16316 ; 394  |#define LCD_MIN_CONTRAST 0
                            16317 ; 395  |#else 
                            16318 ; 396  |//-----
                            16319 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            16320 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for both LCDs.
                            16321 ; 399  |#define LCD_MAX_CONTRAST 250
                            16322 ; 400  |#define LCD_MIN_CONTRAST 0
                            16323 ; 401  |
                            16324 ; 402  |//=====
                            16325 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            16326 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this historic ver.
                            16327 ; 405  |//LCD_MAX_CONTRAST equ 42
                            16328 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            16329 ; 407  |
                            16330 ; 408  |#endif
                            16331 ; 409  |#endif
                            16332 ; 410  |
                            16333 ; 411  |#endif
                            16334 ; 412  |
                            16335 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            16336 ; 414  |// The default value of the lcd contrast in % of range
                            16337 ; 415  |//   the default value is used when no settings.dat is available
                            16338 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            16339 ; 417  |
                            16340 ; 418  |#if (defined(S6B33B0A_LCD))
                            16341 ; 419  |// 60% of range is default value
                            16342 ; 420  |#define DEFAULT_CONTRAST 50 
                            16343 ; 421  |#endif
                            16344 ; 422  |
                            16345 ; 423  |#if (defined(SED15XX_LCD))
                            16346 ; 424  |// % of range is default value (was 60%)
                            16347 ; 425  |#define DEFAULT_CONTRAST 50 
                            16348 ; 426  |#endif
                            16349 ; 427  |
                            16350 ; 428  |
                            16351 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            16352 ; 430  |// make lower when doing calibration
                            16353 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            16354 ; 432  |
                            16355 ; 433  |
                            16356 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            16357 ; 435  |// For FFWD and RWND
                            16358 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            16359 ; 437  |#define SECONDS_TO_SKIP 1
                            16360 ; 438  |#define SECONDS_TO_SKIP1 3
                            16361 ; 439  |#define SECONDS_TO_SKIP2 6
                            16362 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            16363 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            16364 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16365 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            16366 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16367 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            16368 ; 446  |
                            16369 ; 447  |// For audible FFW/RWD
                            16370 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            16371 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            16372 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            16373 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            16374 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16375 ; 453  |#define LEVEL1_BOUNDARY 17 
                            16376 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16377 ; 455  |#define LEVEL2_BOUNDARY 33 
                            16378 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16379 ; 457  |#define LEVEL3_BOUNDARY 50 
                            16380 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            16381 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            16382 ; 460  |// Short Song Time, songs too short to play.
                            16383 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            16384 ; 462  |
                            16385 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            16386 ; 464  |// MP3 Sync Values
                            16387 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            16388 ; 466  |// # bytes to look for sync before marking it bad
                            16389 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            16390 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            16391 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            16392 ; 470  |// once we have sync'd, the isr should be called this frequently
                            16393 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            16394 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            16395 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            16396 ; 474  |
                            16397 ; 475  |
                            16398 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            16399 ; 477  |//// Multi-Stage Volume Control Definitions
                            16400 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            16401 ; 479  |//// Use Multi-Stage Volume
                            16402 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            16403 ; 481  |
                            16404 ; 482  |//// Master Volume definitions
                            16405 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            16406 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            16407 ; 485  |
                            16408 ; 486  |//// DAC-Mode definitions
                            16409 ; 487  |//// Adjusts 0dB point
                            16410 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            16411 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            16412 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines above.
                            16413 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            16414 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provides 1.5 dB gain on Stmp34x0; 
                            16415 ; 493  |//                                               Max gain possible: 8 step diff would provide +12dB gain.   
                            16416 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            16417 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            16418 ; 496  |
                            16419 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            16420 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            16421 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                            16422 ; 500  |
                            16423 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not the default
                            16424 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoint.
                            16425 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            16426 ; 504  |
                            16427 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the default
                            16428 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            16429 ; 507  |
                            16430 ; 508  |
                            16431 ; 509  |//// Line In definitions (used for Line-In 1)
                            16432 ; 510  |//// 0dB point of the Line In
                            16433 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            16434 ; 512  |//// Minimum volume of Line In
                            16435 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            16436 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            16437 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            16438 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            16439 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            16440 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS+1)
                            16441 ; 519  |
                            16442 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            16443 ; 521  |//// 0dB point of the Line In
                            16444 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16445 ; 523  |//// Minimum volume of Line In
                            16446 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            16447 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            16448 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            16449 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            16450 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            16451 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            16452 ; 530  |
                            16453 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            16454 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid deadlock states & recovers. 
                            16455 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            16456 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            16457 ; 535  |
                            16458 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            16459 ; 537  |////
                            16460 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            16461 ; 539  |////
                            16462 ; 540  |///
                            16463 ; 541  |#include <types.h>
                            16464 ; 542  |extern volatile WORD g_wActivityState;
                            16465 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            16466 ; 544  |
                            16467 ; 545  |void _reentrant Init5VSense(void);
                            16468 ; 546  |void _reentrant ServiceDCDC(void);
                            16469 ; 547  |
                            16470 ; 548  |////////////////////////////////////////////////////////////////////////////
                            16471 ; 549  |//// JPEG Thumbnail Mode Setting
                            16472 ; 550  |//// number of column in thumbnail mode
                            16473 ; 551  |#define THUMBNAIL_X 2           
                            16474 ; 552  |//// number of row in  thumbnail mode
                            16475 ; 553  |#define THUMBNAIL_Y 2           
                            16476 ; 554  |//// thumbnail boundary offset x
                            16477 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            16478 ; 556  |//// thumbnail boundary offset y
                            16479 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            16480 ; 558  |
                            16481 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            16482 ; 560  |
                            16483 
                            16485 
                            16486 ; 12   |#include "gettime.h"
                            16487 
                            16489 
                            16490 ; 1    |#ifndef __TIME_H
                            16491 ; 2    |#define __TIME_H
                            16492 ; 3    |
                            16493 ; 4    |_callee_save LONG GetTime(void);
                            16494 ; 5    |
                            16495 ; 6    |#endif
                            16496 
                            16498 
                            16499 ; 13   |#include "types.h"
                            16500 
                            16502 
                            16503 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16504 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16505 ; 3    |//
                            16506 ; 4    |// Filename: types.h
                            16507 ; 5    |// Description: Standard data types
                            16508 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16509 ; 7    |
                            16510 ; 8    |#ifndef _TYPES_H
                            16511 ; 9    |#define _TYPES_H
                            16512 ; 10   |
                            16513 ; 11   |// TODO:  move this outta here!
                            16514 ; 12   |#if !defined(NOERROR)
                            16515 ; 13   |#define NOERROR 0
                            16516 ; 14   |#define SUCCESS 0
                            16517 ; 15   |#endif 
                            16518 ; 16   |#if !defined(SUCCESS)
                            16519 ; 17   |#define SUCCESS  0
                            16520 ; 18   |#endif
                            16521 ; 19   |#if !defined(ERROR)
                            16522 ; 20   |#define ERROR   -1
                            16523 ; 21   |#endif
                            16524 ; 22   |#if !defined(FALSE)
                            16525 ; 23   |#define FALSE 0
                            16526 ; 24   |#endif
                            16527 ; 25   |#if !defined(TRUE)
                            16528 ; 26   |#define TRUE  1
                            16529 ; 27   |#endif
                            16530 ; 28   |
                            16531 ; 29   |#if !defined(NULL)
                            16532 ; 30   |#define NULL 0
                            16533 ; 31   |#endif
                            16534 ; 32   |
                            16535 ; 33   |#define MAX_INT     0x7FFFFF
                            16536 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16537 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16538 ; 36   |#define MAX_ULONG   (-1) 
                            16539 ; 37   |
                            16540 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16541 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16542 ; 40   |
                            16543 ; 41   |
                            16544 ; 42   |#define BYTE    unsigned char       // btVarName
                            16545 ; 43   |#define CHAR    signed char         // cVarName
                            16546 ; 44   |#define USHORT  unsigned short      // usVarName
                            16547 ; 45   |#define SHORT   unsigned short      // sVarName
                            16548 ; 46   |#define WORD    unsigned int        // wVarName
                            16549 ; 47   |#define INT     signed int          // iVarName
                            16550 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16551 ; 49   |#define LONG    signed long         // lVarName
                            16552 ; 50   |#define BOOL    unsigned int        // bVarName
                            16553 ; 51   |#define FRACT   _fract              // frVarName
                            16554 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            16555 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            16556 ; 54   |#define FLOAT   float               // fVarName
                            16557 ; 55   |#define DBL     double              // dVarName
                            16558 ; 56   |#define ENUM    enum                // eVarName
                            16559 ; 57   |#define CMX     _complex            // cmxVarName
                            16560 ; 58   |typedef WORD UCS3;                   // 
                            16561 ; 59   |
                            16562 ; 60   |#define UINT16  unsigned short
                            16563 ; 61   |#define UINT8   unsigned char   
                            16564 ; 62   |#define UINT32  unsigned long
                            16565 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16566 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16567 ; 65   |#define WCHAR   UINT16
                            16568 ; 66   |
                            16569 ; 67   |//UINT128 is 16 bytes or 6 words
                            16570 ; 68   |typedef struct UINT128_3500 {   
                            16571 ; 69   |    int val[6];     
                            16572 ; 70   |} UINT128_3500;
                            16573 ; 71   |
                            16574 ; 72   |#define UINT128   UINT128_3500
                            16575 ; 73   |
                            16576 ; 74   |// Little endian word packed byte strings:   
                            16577 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16578 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16579 ; 77   |// Little endian word packed byte strings:   
                            16580 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16581 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16582 ; 80   |
                            16583 ; 81   |// Declare Memory Spaces To Use When Coding
                            16584 ; 82   |// A. Sector Buffers
                            16585 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            16586 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            16587 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            16588 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            16589 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            16590 ; 88   |// B. Media DDI Memory
                            16591 ; 89   |#define MEDIA_DDI_MEM _Y
                            16592 ; 90   |
                            16593 ; 91   |
                            16594 ; 92   |
                            16595 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            16596 ; 94   |// Examples of circular pointers:
                            16597 ; 95   |//    INT CIRC cpiVarName
                            16598 ; 96   |//    DWORD CIRC cpdwVarName
                            16599 ; 97   |
                            16600 ; 98   |#define RETCODE INT                 // rcVarName
                            16601 ; 99   |
                            16602 ; 100  |// generic bitfield structure
                            16603 ; 101  |struct Bitfield {
                            16604 ; 102  |    unsigned int B0  :1;
                            16605 ; 103  |    unsigned int B1  :1;
                            16606 ; 104  |    unsigned int B2  :1;
                            16607 ; 105  |    unsigned int B3  :1;
                            16608 ; 106  |    unsigned int B4  :1;
                            16609 ; 107  |    unsigned int B5  :1;
                            16610 ; 108  |    unsigned int B6  :1;
                            16611 ; 109  |    unsigned int B7  :1;
                            16612 ; 110  |    unsigned int B8  :1;
                            16613 ; 111  |    unsigned int B9  :1;
                            16614 ; 112  |    unsigned int B10 :1;
                            16615 ; 113  |    unsigned int B11 :1;
                            16616 ; 114  |    unsigned int B12 :1;
                            16617 ; 115  |    unsigned int B13 :1;
                            16618 ; 116  |    unsigned int B14 :1;
                            16619 ; 117  |    unsigned int B15 :1;
                            16620 ; 118  |    unsigned int B16 :1;
                            16621 ; 119  |    unsigned int B17 :1;
                            16622 ; 120  |    unsigned int B18 :1;
                            16623 ; 121  |    unsigned int B19 :1;
                            16624 ; 122  |    unsigned int B20 :1;
                            16625 ; 123  |    unsigned int B21 :1;
                            16626 ; 124  |    unsigned int B22 :1;
                            16627 ; 125  |    unsigned int B23 :1;
                            16628 ; 126  |};
                            16629 ; 127  |
                            16630 ; 128  |union BitInt {
                            16631 ; 129  |        struct Bitfield B;
                            16632 ; 130  |        int        I;
                            16633 ; 131  |};
                            16634 ; 132  |
                            16635 ; 133  |#define MAX_MSG_LENGTH 10
                            16636 ; 134  |struct CMessage
                            16637 ; 135  |{
                            16638 ; 136  |        unsigned int m_uLength;
                            16639 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            16640 ; 138  |};
                            16641 ; 139  |
                            16642 ; 140  |typedef struct {
                            16643 ; 141  |    WORD m_wLength;
                            16644 ; 142  |    WORD m_wMessage;
                            16645 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            16646 ; 144  |} Message;
                            16647 ; 145  |
                            16648 ; 146  |struct MessageQueueDescriptor
                            16649 ; 147  |{
                            16650 ; 148  |        int *m_pBase;
                            16651 ; 149  |        int m_iModulo;
                            16652 ; 150  |        int m_iSize;
                            16653 ; 151  |        int *m_pHead;
                            16654 ; 152  |        int *m_pTail;
                            16655 ; 153  |};
                            16656 ; 154  |
                            16657 ; 155  |struct ModuleEntry
                            16658 ; 156  |{
                            16659 ; 157  |    int m_iSignaledEventMask;
                            16660 ; 158  |    int m_iWaitEventMask;
                            16661 ; 159  |    int m_iResourceOfCode;
                            16662 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            16663 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            16664 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            16665 ; 163  |    int m_uTimeOutHigh;
                            16666 ; 164  |    int m_uTimeOutLow;
                            16667 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            16668 ; 166  |};
                            16669 ; 167  |
                            16670 ; 168  |union WaitMask{
                            16671 ; 169  |    struct B{
                            16672 ; 170  |        unsigned int m_bNone     :1;
                            16673 ; 171  |        unsigned int m_bMessage  :1;
                            16674 ; 172  |        unsigned int m_bTimer    :1;
                            16675 ; 173  |        unsigned int m_bButton   :1;
                            16676 ; 174  |    } B;
                            16677 ; 175  |    int I;
                            16678 ; 176  |} ;
                            16679 ; 177  |
                            16680 ; 178  |
                            16681 ; 179  |struct Button {
                            16682 ; 180  |        WORD wButtonEvent;
                            16683 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            16684 ; 182  |};
                            16685 ; 183  |
                            16686 ; 184  |struct Message {
                            16687 ; 185  |        WORD wMsgLength;
                            16688 ; 186  |        WORD wMsgCommand;
                            16689 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            16690 ; 188  |};
                            16691 ; 189  |
                            16692 ; 190  |union EventTypes {
                            16693 ; 191  |        struct CMessage msg;
                            16694 ; 192  |        struct Button Button ;
                            16695 ; 193  |        struct Message Message;
                            16696 ; 194  |};
                            16697 ; 195  |
                            16698 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            16699 ; 197  |#define BUILD_TYPE_UPDATER  0x100
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16700 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            16701 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            16702 ; 200  |
                            16703 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            16704 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            16705 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            16706 ; 204  |
                            16707 ; 205  |#if DEBUG
                            16708 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            16709 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            16710 ; 208  |#else 
                            16711 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            16712 ; 210  |#define DebugBuildAssert(x)    
                            16713 ; 211  |#endif
                            16714 ; 212  |
                            16715 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            16716 ; 214  |//  #pragma asm
                            16717 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            16718 ; 216  |//  #pragma endasm
                            16719 ; 217  |
                            16720 ; 218  |
                            16721 ; 219  |#ifdef COLOR_262K
                            16722 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            16723 ; 221  |#elif defined(COLOR_65K)
                            16724 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            16725 ; 223  |#else
                            16726 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            16727 ; 225  |#endif
                            16728 ; 226  |    
                            16729 ; 227  |#endif // #ifndef _TYPES_H
                            16730 
                            16732 
                            16733 ; 14   |#include "..\tunerdriver.h"
                            16734 
                            16736 
                            16737 ; 1    |#ifndef __TUNERDRIVER_H
                            16738 ; 2    |#define __TUNERDRIVER_H
                            16739 ; 3    |
                            16740 ; 4    |
                            16741 ; 5    |#include "types.h"
                            16742 
                            16744 
                            16745 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16746 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16747 ; 3    |//
                            16748 ; 4    |// Filename: types.h
                            16749 ; 5    |// Description: Standard data types
                            16750 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16751 ; 7    |
                            16752 ; 8    |#ifndef _TYPES_H
                            16753 ; 9    |#define _TYPES_H
                            16754 ; 10   |
                            16755 ; 11   |// TODO:  move this outta here!
                            16756 ; 12   |#if !defined(NOERROR)
                            16757 ; 13   |#define NOERROR 0
                            16758 ; 14   |#define SUCCESS 0
                            16759 ; 15   |#endif 
                            16760 ; 16   |#if !defined(SUCCESS)
                            16761 ; 17   |#define SUCCESS  0
                            16762 ; 18   |#endif
                            16763 ; 19   |#if !defined(ERROR)
                            16764 ; 20   |#define ERROR   -1
                            16765 ; 21   |#endif
                            16766 ; 22   |#if !defined(FALSE)
                            16767 ; 23   |#define FALSE 0
                            16768 ; 24   |#endif
                            16769 ; 25   |#if !defined(TRUE)
                            16770 ; 26   |#define TRUE  1
                            16771 ; 27   |#endif
                            16772 ; 28   |
                            16773 ; 29   |#if !defined(NULL)
                            16774 ; 30   |#define NULL 0
                            16775 ; 31   |#endif
                            16776 ; 32   |
                            16777 ; 33   |#define MAX_INT     0x7FFFFF
                            16778 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16779 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16780 ; 36   |#define MAX_ULONG   (-1) 
                            16781 ; 37   |
                            16782 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16783 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16784 ; 40   |
                            16785 ; 41   |
                            16786 ; 42   |#define BYTE    unsigned char       // btVarName
                            16787 ; 43   |#define CHAR    signed char         // cVarName
                            16788 ; 44   |#define USHORT  unsigned short      // usVarName
                            16789 ; 45   |#define SHORT   unsigned short      // sVarName
                            16790 ; 46   |#define WORD    unsigned int        // wVarName
                            16791 ; 47   |#define INT     signed int          // iVarName
                            16792 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16793 ; 49   |#define LONG    signed long         // lVarName
                            16794 ; 50   |#define BOOL    unsigned int        // bVarName
                            16795 ; 51   |#define FRACT   _fract              // frVarName
                            16796 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            16797 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            16798 ; 54   |#define FLOAT   float               // fVarName
                            16799 ; 55   |#define DBL     double              // dVarName
                            16800 ; 56   |#define ENUM    enum                // eVarName
                            16801 ; 57   |#define CMX     _complex            // cmxVarName
                            16802 ; 58   |typedef WORD UCS3;                   // 
                            16803 ; 59   |
                            16804 ; 60   |#define UINT16  unsigned short
                            16805 ; 61   |#define UINT8   unsigned char   
                            16806 ; 62   |#define UINT32  unsigned long
                            16807 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16808 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16809 ; 65   |#define WCHAR   UINT16
                            16810 ; 66   |
                            16811 ; 67   |//UINT128 is 16 bytes or 6 words
                            16812 ; 68   |typedef struct UINT128_3500 {   
                            16813 ; 69   |    int val[6];     
                            16814 ; 70   |} UINT128_3500;
                            16815 ; 71   |
                            16816 ; 72   |#define UINT128   UINT128_3500
                            16817 ; 73   |
                            16818 ; 74   |// Little endian word packed byte strings:   
                            16819 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16820 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16821 ; 77   |// Little endian word packed byte strings:   
                            16822 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16823 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16824 ; 80   |
                            16825 ; 81   |// Declare Memory Spaces To Use When Coding
                            16826 ; 82   |// A. Sector Buffers
                            16827 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            16828 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            16829 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            16830 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            16831 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            16832 ; 88   |// B. Media DDI Memory
                            16833 ; 89   |#define MEDIA_DDI_MEM _Y
                            16834 ; 90   |
                            16835 ; 91   |
                            16836 ; 92   |
                            16837 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            16838 ; 94   |// Examples of circular pointers:
                            16839 ; 95   |//    INT CIRC cpiVarName
                            16840 ; 96   |//    DWORD CIRC cpdwVarName
                            16841 ; 97   |
                            16842 ; 98   |#define RETCODE INT                 // rcVarName
                            16843 ; 99   |
                            16844 ; 100  |// generic bitfield structure
                            16845 ; 101  |struct Bitfield {
                            16846 ; 102  |    unsigned int B0  :1;
                            16847 ; 103  |    unsigned int B1  :1;
                            16848 ; 104  |    unsigned int B2  :1;
                            16849 ; 105  |    unsigned int B3  :1;
                            16850 ; 106  |    unsigned int B4  :1;
                            16851 ; 107  |    unsigned int B5  :1;
                            16852 ; 108  |    unsigned int B6  :1;
                            16853 ; 109  |    unsigned int B7  :1;
                            16854 ; 110  |    unsigned int B8  :1;
                            16855 ; 111  |    unsigned int B9  :1;
                            16856 ; 112  |    unsigned int B10 :1;
                            16857 ; 113  |    unsigned int B11 :1;
                            16858 ; 114  |    unsigned int B12 :1;
                            16859 ; 115  |    unsigned int B13 :1;
                            16860 ; 116  |    unsigned int B14 :1;
                            16861 ; 117  |    unsigned int B15 :1;
                            16862 ; 118  |    unsigned int B16 :1;
                            16863 ; 119  |    unsigned int B17 :1;
                            16864 ; 120  |    unsigned int B18 :1;
                            16865 ; 121  |    unsigned int B19 :1;
                            16866 ; 122  |    unsigned int B20 :1;
                            16867 ; 123  |    unsigned int B21 :1;
                            16868 ; 124  |    unsigned int B22 :1;
                            16869 ; 125  |    unsigned int B23 :1;
                            16870 ; 126  |};
                            16871 ; 127  |
                            16872 ; 128  |union BitInt {
                            16873 ; 129  |        struct Bitfield B;
                            16874 ; 130  |        int        I;
                            16875 ; 131  |};
                            16876 ; 132  |
                            16877 ; 133  |#define MAX_MSG_LENGTH 10
                            16878 ; 134  |struct CMessage
                            16879 ; 135  |{
                            16880 ; 136  |        unsigned int m_uLength;
                            16881 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            16882 ; 138  |};
                            16883 ; 139  |
                            16884 ; 140  |typedef struct {
                            16885 ; 141  |    WORD m_wLength;
                            16886 ; 142  |    WORD m_wMessage;
                            16887 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            16888 ; 144  |} Message;
                            16889 ; 145  |
                            16890 ; 146  |struct MessageQueueDescriptor
                            16891 ; 147  |{
                            16892 ; 148  |        int *m_pBase;
                            16893 ; 149  |        int m_iModulo;
                            16894 ; 150  |        int m_iSize;
                            16895 ; 151  |        int *m_pHead;
                            16896 ; 152  |        int *m_pTail;
                            16897 ; 153  |};
                            16898 ; 154  |
                            16899 ; 155  |struct ModuleEntry
                            16900 ; 156  |{
                            16901 ; 157  |    int m_iSignaledEventMask;
                            16902 ; 158  |    int m_iWaitEventMask;
                            16903 ; 159  |    int m_iResourceOfCode;
                            16904 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            16905 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            16906 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            16907 ; 163  |    int m_uTimeOutHigh;
                            16908 ; 164  |    int m_uTimeOutLow;
                            16909 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            16910 ; 166  |};
                            16911 ; 167  |
                            16912 ; 168  |union WaitMask{
                            16913 ; 169  |    struct B{
                            16914 ; 170  |        unsigned int m_bNone     :1;
                            16915 ; 171  |        unsigned int m_bMessage  :1;
                            16916 ; 172  |        unsigned int m_bTimer    :1;
                            16917 ; 173  |        unsigned int m_bButton   :1;
                            16918 ; 174  |    } B;
                            16919 ; 175  |    int I;
                            16920 ; 176  |} ;
                            16921 ; 177  |
                            16922 ; 178  |
                            16923 ; 179  |struct Button {
                            16924 ; 180  |        WORD wButtonEvent;
                            16925 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            16926 ; 182  |};
                            16927 ; 183  |
                            16928 ; 184  |struct Message {
                            16929 ; 185  |        WORD wMsgLength;
                            16930 ; 186  |        WORD wMsgCommand;
                            16931 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            16932 ; 188  |};
                            16933 ; 189  |
                            16934 ; 190  |union EventTypes {
                            16935 ; 191  |        struct CMessage msg;
                            16936 ; 192  |        struct Button Button ;
                            16937 ; 193  |        struct Message Message;
                            16938 ; 194  |};
                            16939 ; 195  |
                            16940 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            16941 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            16942 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            16943 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            16944 ; 200  |
                            16945 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            16946 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            16947 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            16948 ; 204  |
                            16949 ; 205  |#if DEBUG
                            16950 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            16951 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            16952 ; 208  |#else 
                            16953 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16954 ; 210  |#define DebugBuildAssert(x)    
                            16955 ; 211  |#endif
                            16956 ; 212  |
                            16957 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            16958 ; 214  |//  #pragma asm
                            16959 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            16960 ; 216  |//  #pragma endasm
                            16961 ; 217  |
                            16962 ; 218  |
                            16963 ; 219  |#ifdef COLOR_262K
                            16964 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            16965 ; 221  |#elif defined(COLOR_65K)
                            16966 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            16967 ; 223  |#else
                            16968 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            16969 ; 225  |#endif
                            16970 ; 226  |    
                            16971 ; 227  |#endif // #ifndef _TYPES_H
                            16972 
                            16974 
                            16975 ; 6    |
                            16976 ; 7    |#define TUNER_MODE_STEREO   1
                            16977 ; 8    |#define TUNER_MODE_MONO     0
                            16978 ; 9    |
                            16979 ; 10   |#define E_TUNER_FUNCTION_NOT_SUPPORTED  -1
                            16980 ; 11   |#define E_TUNER_PARAMETER_IN_ERROR      -2
                            16981 ; 12   |#define E_TUNER_NO_COMMUNICATION        -3
                            16982 ; 13   |#define E_TUNER_BUSY                    -4
                            16983 ; 14   |#define TUNER_SUCCESS                   0
                            16984 ; 15   |#define E_TUNER_POWERED_DOWN                    -8
                            16985 ; 16   |
                            16986 ; 17   |extern struct ModuleEntry *g_pTunerModuleEntry;
                            16987 ; 18   |
                            16988 ; 19   |_reentrant INT TunerGetStatus(void);
                            16989 ; 20   |_reentrant INT TunerDriverInit(void);
                            16990 ; 21   |_reentrant INT TunerDriverTuneToFrequency(INT);
                            16991 ; 22   |_reentrant INT TunerDriverIncrementUp(void );
                            16992 ; 23   |_reentrant INT TunerDriverIncrementDown(void );
                            16993 ; 24   |_reentrant INT TunerDriverSearchUp(void );
                            16994 ; 25   |_reentrant INT TunerDriverSearchDown(void);
                            16995 ; 26   |_reentrant INT TunerDriverSetMonoStereoMode(INT);
                            16996 ; 27   |_reentrant INT TunerDriverSetSensitivity(INT);
                            16997 ; 28   |_reentrant BOOL bIsTunerModulePowered(void);
                            16998 ; 29   |_reentrant INT TunerDriverSetTunerStandby(BOOL);
                            16999 ; 30   |_reentrant INT TunerDriverGetTunerstate( void );
                            17000 ; 31   |_reentrant INT TunerDriverScanStations( void );
                            17001 ; 32   |_reentrant INT TunerDriverSetToPresetStations( INT );
                            17002 ; 33   |_reentrant INT TunerDriverSetPresetStations( INT );
                            17003 ; 34   |_reentrant INT TunerDriverErasePresetStations( INT );
                            17004 ; 35   |
                            17005 ; 36   |
                            17006 ; 37   |struct ErrorBits {
                            17007 ; 38   |        int     m_bTUNER_BUSY:1;
                            17008 ; 39   |        int     m_bSEARCHING_UP:1;
                            17009 ; 40   |        int     m_bSEARCHING_DOWN:1;
                            17010 ; 41   |        int     :1;
                            17011 ; 42   |        int m_bSCANNING_STATION:1;
                            17012 ; 43   |        int :3;
                            17013 ; 44   |        int     m_bBAND_LIMIT_HIGH_ERROR:1;
                            17014 ; 45   |        int m_bBAND_LIMIT_LOW_ERROR:1;
                            17015 ; 46   |        int m_bUNUSED_PRESET:1;
                            17016 ; 47   |        int m_bPRESET_RANGE_ERROR:1;
                            17017 ; 48   |        int :1;
                            17018 ; 49   |        int m_bTUNER_NOT_FOUND:1;
                            17019 ; 50   |        int m_bPOWERED_OFF:1;
                            17020 ; 51   |        };
                            17021 ; 52   |extern struct ErrorBits g_wFMTunerError;
                            17022 ; 53   |
                            17023 ; 54   |#endif
                            17024 
                            17026 
                            17027 ; 15   |#include "stfm1000.h"
                            17028 
                            17030 
                            17031 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17032 ; 2    |// Copyright(C) SigmaTel, Inc. 2005
                            17033 ; 3    |//
                            17034 ; 4    |// Filename: STFM1000.h
                            17035 ; 5    |// Description: 
                            17036 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17037 ; 7    |
                            17038 ; 8    |#ifndef _STFM_1000_H
                            17039 ; 9    |#define _STFM_1000_H
                            17040 ; 10   |//////////////////////////////////////////////////////////////////////////////
                            17041 ; 11   |//!   Includes
                            17042 ; 12   |//////////////////////////////////////////////////////////////////////////////
                            17043 ; 13   |
                            17044 ; 14   |////////////////////////////////////////////////////////////////////////////////
                            17045 ; 15   |//! Definitions
                            17046 ; 16   |////////////////////////////////////////////////////////////////////////////////
                            17047 ; 17   |
                            17048 ; 18   |/**********************************************************************/
                            17049 ; 19   |
                            17050 ; 20   |//! STFM1000 Register Addresses
                            17051 ; 21   |// as of 2005/07/28
                            17052 ; 22   |#define TUNE1_REG_ADDR                      0x00
                            17053 ; 23   |#define SDNOMINAL_REG_ADDR                  0x04
                            17054 ; 24   |#define PILOTTRACKING_REG_ADDR              0x08
                            17055 ; 25   |#define STFM1000_UNUSED_REG_0C              0x0C
                            17056 ; 26   |#define INITIALIZATION1_REG_ADDR            0x10
                            17057 ; 27   |#define INITIALIZATION2_REG_ADDR            0x14
                            17058 ; 28   |#define INITIALIZATION3_REG_ADDR            0x18
                            17059 ; 29   |#define INITIALIZATION4_REG_ADDR            0x1C
                            17060 ; 30   |#define INITIALIZATION5_REG_ADDR            0x20
                            17061 ; 31   |#define INITIALIZATION6_REG_ADDR            0x24
                            17062 ; 32   |#define REF_REG_ADDR                        0x28
                            17063 ; 33   |#define LNA_REG_ADDR                        0x2C
                            17064 ; 34   |#define MIXFILT_REG_ADDR                    0x30
                            17065 ; 35   |#define CLK1_REG_ADDR                       0x34
                            17066 ; 36   |#define CLK2_REG_ADDR                       0x38
                            17067 ; 37   |#define ADC_REG_ADDR                        0x3C
                            17068 ; 38   |#define STFM1000_UNUSED_REG_40              0x40
                            17069 ; 39   |#define AGC_CONTROL1_REG_ADDR               0x44
                            17070 ; 40   |#define AGC_CONTROL2_REG_ADDR               0x48
                            17071 ; 41   |#define STFM1000_UNUSED_REG_4C              0x4C
                            17072 ; 42   |#define STFM1000_UNUSED_REG_50              0x50
                            17073 ; 43   |#define STFM1000_UNUSED_REG_54              0x54
                            17074 ; 44   |#define STFM1000_UNUSED_REG_58              0x58
                            17075 ; 45   |#define DATAPATH_REG_ADDR                   0x5C
                            17076 ; 46   |#define RMS_REG_ADDR                        0x60
                            17077 ; 47   |#define AGC_STAT_REG_ADDR                   0x64
                            17078 ; 48   |#define SIGNALQUALITY_REG_ADDR              0x68
                            17079 ; 49   |#define DCEST_REG_ADDR                      0x6C
                            17080 ; 50   |#define RSSI_TONE_REG_ADDR                  0x70
                            17081 ; 51   |#define PILOTCORRECTION_REG_ADDR            0x74
                            17082 ; 52   |#define ATTENTION_REG_ADDR                  0x78
                            17083 ; 53   |#define CL3_REG_ADDR                        0x7C
                            17084 ; 54   |#define CHIPID_REG_ADDR                     0x80
                            17085 ; 55   |
                            17086 ; 56   |
                            17087 ; 57   |//! STFM1000 Register Fields
                            17088 ; 58   |// as of 2005/07/28
                            17089 ; 59   |
                            17090 ; 60   |// ******* Generic Definitions ***********************
                            17091 ; 61   |#define REGISTER_BYTES                      4
                            17092 ; 62   |
                            17093 ; 63   |#define WHOLEREG_MASK                       0xFFFFFFFF
                            17094 ; 64   |#define BYTE3_MASK                          0xFF000000
                            17095 ; 65   |#define BYTE2_MASK                          0x00FF0000
                            17096 ; 66   |#define BYTE1_MASK                          0x0000FF00
                            17097 ; 67   |#define BYTE0_MASK                          0x000000FF
                            17098 ; 68   |// ***************************************************
                            17099 ; 69   |
                            17100 ; 70   |
                            17101 ; 71   |// #define TUNE1_REG_ADDR                      0x00
                            17102 ; 72   |// ***************************************************
                            17103 ; 73   |#define TUNE1_B2_MIX_REG_MASK               0x001C0000
                            17104 ; 74   |#define TUNE1_CICOSR_REG_MASK               0x00007E00
                            17105 ; 75   |#define TUNE1_PLL_DIV_REG_MASK              0x000001FF
                            17106 ; 76   |// ***************************************************
                            17107 ; 77   |#define TUNE1_STARTUP_REG              0
                            17108 ; 78   |#define TUNE1_B2_MIX_REG               1             // IF = -100 kHz
                            17109 ; 79   |// b010110100 -- For Ftune=87.5MHz, we want Ffe=875-1, thus Ndiv = 11, Incr = 4
                            17110 ; 80   |#define TUNE1_PLL_DIV_REG              0xB4
                            17111 ; 81   |#define TUNE1_CICOSR_REG               36
                            17112 ; 82   |
                            17113 ; 83   |// #define SDNOMINAL_REG_ADDR                  0x04
                            17114 ; 84   |// ***************************************************
                            17115 ; 85   |#define SDNOMINAL_REG_MASK                  0xFFFFFFFF
                            17116 ; 86   |// ***************************************************
                            17117 ; 87   |// Based on tuning param's above
                            17118 ; 88   |#define SDNOMINAL_REG                  476390083
                            17119 ; 89   |
                            17120 ; 90   |// #define PILOTTRACKING_REG_ADDR              0x08
                            17121 ; 91   |// ***************************************************
                            17122 ; 92   |#define B2_PILOTTRACKING_ENABLE_REG_MASK    0x00008000
                            17123 ; 93   |#define B2_PILOTLPF_TIMECONSTANT_REG_MASK   0x00000F00
                            17124 ; 94   |#define B2_PFDSCALE_REG_MASK                0x000000F0
                            17125 ; 95   |#define B2_PFDFILTER_SPEEDUP_REG_MASK       0x0000000F
                            17126 ; 96   |// ***************************************************
                            17127 ; 97   | // start with pilottracking OFF
                            17128 ; 98   |#define B2_PILOTTRACKING_ENABLE_REG    0
                            17129 ; 99   |#define B2_PILOTLPF_TIMECONSTANT_REG   1
                            17130 ; 100  |#define B2_PFDSCALE_REG                12
                            17131 ; 101  |#define B2_PFDFILTER_SPEEDUP_REG       6
                            17132 ; 102  |
                            17133 ; 103  |
                            17134 ; 104  |// #define STFM1000_UNUSED_REG_0C              0x0C
                            17135 ; 105  |// ***************************************************
                            17136 ; 106  |// ***************************************************
                            17137 ; 107  |
                            17138 ; 108  |// #define INITIALIZATION1_REG_ADDR            0x10
                            17139 ; 109  |// ***************************************************
                            17140 ; 110  |#define SCALE_DEMOD_REG_MASK                0xE0000000
                            17141 ; 111  |#define ATTENTION_DISABLE_REG_MASK          0x1F800000
                            17142 ; 112  |#define BYPASS_DCFILT_REG_MASK              0x00700000
                            17143 ; 113  |#define DCEST_EN_REG_MASK                   0x00080000
                            17144 ; 114  |#define GAIN_MATCH_REG_MASK                 0x0007F000
                            17145 ; 115  |#define IQSWAP_REG_MASK                     0x00000800
                            17146 ; 116  |#define PHASE_MATCH_REG_MASK                0x000007F0
                            17147 ; 117  |#define B2_BYPASS_FILT_REG_MASK             0x0000000C
                            17148 ; 118  |#define DMD_BYPASS_REG_MASK                 0x00000003
                            17149 ; 119  |// ***************************************************
                            17150 ; 120  |#define SCALE_DEMOD_REG                1
                            17151 ; 121  |#define ATTENTION_DISABLE_REG          0
                            17152 ; 122  |#define BYPASS_DCFILT_REG              3
                            17153 ; 123  |#define DCEST_EN_REG                   1
                            17154 ; 124  |#define GAIN_MATCH_REG                 0
                            17155 ; 125  |#define IQSWAP_REG                     0
                            17156 ; 126  |#define PHASE_MATCH_REG                0
                            17157 ; 127  |#define B2_BYPASS_FILT_REG             2
                            17158 ; 128  |#define DMD_BYPASS_REG                 0
                            17159 ; 129  |
                            17160 ; 130  |
                            17161 ; 131  |// #define INITIALIZATION2_REG_ADDR            0x14
                            17162 ; 132  |// ***************************************************
                            17163 ; 133  |#define DRI_CLK_EN_REG_MASK                 0x80000000
                            17164 ; 134  |#define DISBALE_IQMATCH_REG_MASK            0x20000000
                            17165 ; 135  |#define DISABLE_GAINMATCH_REG_MASK          0x10000000
                            17166 ; 136  |#define VIEW_TONEDATA_REG_MASK              0x08000000
                            17167 ; 137  |#define PILOTCORRECTION_SMOOTHING_REG_MASK  0x04000000
                            17168 ; 138  |#define PILOTEST_MIXOFFSET_REG_MASK         0x02000000
                            17169 ; 139  |#define CCT_ENABLE_REG_MASK                 0x01000000
                            17170 ; 140  |#define TIMECONSTANT_REG_MASK               0x000C0000
                            17171 ; 141  |#define RDS_MIXOFFSET_REG_MASK              0x00020000
                            17172 ; 142  |#define PILOTOFFSET_LMR_REG_MASK            0x0001E000
                            17173 ; 143  |#define PILOTPEAKOFFSET_REG_MASK            0x00001E00
                            17174 ; 144  |#define DEEMPH_50_75B_REG_MASK              0x00000100
                            17175 ; 145  |#define K2_REG_MASK                         0x000000F0
                            17176 ; 146  |#define K1_REG_MASK                         0x0000000F
                            17177 ; 147  |// ***************************************************
                            17178 ; 148  |#define DRI_CLK_EN_REG                 1
                            17179 ; 149  |#define DISBALE_IQMATCH_REG            0
                            17180 ; 150  |#define DISABLE_GAINMATCH_REG          0
                            17181 ; 151  |#define VIEW_TONEDATA_REG              0
                            17182 ; 152  |#define PILOTCORRECTION_SMOOTHING_REG  1              // Turn smoothing ON
                            17183 ; 153  |#define PILOTEST_MIXOFFSET_REG         0
                            17184 ; 154  |#define CCT_ENABLE_REG                 1
                            17185 ; 155  |#define TIMECONSTANT_REG               1
                            17186 ; 156  |#define RDS_MIXOFFSET_REG              1
                            17187 ; 157  |#define PILOTOFFSET_LMR_REG            7
                            17188 ; 158  |#define PILOTPEAKOFFSET_REG            2
                            17189 ; 159  |#define DEEMPH_50_75B_REG              0              // 75 us
                            17190 ; 160  |#define K2_REG                         4
                            17191 ; 161  |#define K1_REG                         4
                            17192 ; 162  |
                            17193 ; 163  |// #define INITIALIZATION3_REG_ADDR            0x18
                            17194 ; 164  |// ***************************************************
                            17195 ; 165  |#define DRI_TEST_MODE_REG_MASK              0xE0000000
                            17196 ; 166  |#define B2_NEAR_CHAN_MIX_REG_MASK           0x1C000000
                            17197 ; 167  |#define PILOTCORRECTION_LIMIT_REG_MASK      0x03FC0000
                            17198 ; 168  |#define BYPASS_XTALLOCK_REG_MASK            0x00020000
                            17199 ; 169  |#define SEL_441B_48_REG_MASK                0x00010000
                            17200 ; 170  |#define PFD_DECRATE_REG_MASK                0x0000FFC0
                            17201 ; 171  |#define BYPASS_COMPEN_REG_MASK              0x00000020
                            17202 ; 172  |#define B2_I2PQ2_SCALE_REG_MASK             0x0000001F
                            17203 ; 173  |// ***************************************************
                            17204 ; 174  |#define DRI_TEST_MODE_REG              0              // Normal mode
                            17205 ; 175  |// monitor the strength of the received channel
                            17206 ; 176  |#define B2_NEAR_CHAN_MIX_REG           7
                            17207 ; 177  |#define PILOTCORRECTION_LIMIT_REG      0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17208 ; 178  |// start in pilot-lock mode, then switch later to xtal-lock once Fs is stable
                            17209 ; 179  |#define BYPASS_XTALLOCK_REG            1
                            17210 ; 180  |#define SEL_441B_48_REG                0
                            17211 ; 181  |#define PFD_DECRATE_REG                100
                            17212 ; 182  |#define BYPASS_COMPEN_REG              0
                            17213 ; 183  |#define B2_I2PQ2_SCALE_REG             13
                            17214 ; 184  |
                            17215 ; 185  |// #define INITIALIZATION4_REG_ADDR            0x1C
                            17216 ; 186  |// ***************************************************
                            17217 ; 187  |#define SAMPLE_SKIP_REG_MASK                0x7E000000
                            17218 ; 188  |#define POSITION_0_255_REG_MASK             0x01FFFFFF
                            17219 ; 189  |// ***************************************************
                            17220 ; 190  |#define SAMPLE_SKIP_REG                41             // For 44.1 kHz
                            17221 ; 191  |// For 44.1 kHz, (int)(91.93875*65536)
                            17222 ; 192  |#define POSITION_0_255_REG             6025298
                            17223 ; 193  |
                            17224 ; 194  |// #define INITIALIZATION5_REG_ADDR            0x20
                            17225 ; 195  |// ***************************************************
                            17226 ; 196  |#define FLAG_RDS_REG_MASK                   0xE0000000
                            17227 ; 197  |#define NUM_SLOTS_REG_MASK                  0x1C000000
                            17228 ; 198  |#define RDS_SLOT_POS_REG_MASK               0x0001C000
                            17229 ; 199  |#define RSSI_SLOT_POS_REG_MASK              0x00003800
                            17230 ; 200  |#define LMR_SLOT_POS_REG_MASK               0x00000700
                            17231 ; 201  |#define LPR_SLOT_POS_REG_MASK               0x000000E0
                            17232 ; 202  |#define DRI_QUIET_REG_MASK                  0x0000001F
                            17233 ; 203  |// ***************************************************
                            17234 ; 204  |#define FLAG_RDS_REG                   3
                            17235 ; 205  |#define NUM_SLOTS_REG                  4
                            17236 ; 206  |#define RDS_SLOT_POS_REG               3
                            17237 ; 207  |#define RSSI_SLOT_POS_REG              2
                            17238 ; 208  |#define LMR_SLOT_POS_REG               1
                            17239 ; 209  |#define LPR_SLOT_POS_REG               0
                            17240 ; 210  |#define DRI_QUIET_REG                  6    // Set to minimum acceptable
                            17241 ; 211  |
                            17242 ; 212  |// #define INITIALIZATION6_REG_ADDR            0x24
                            17243 ; 213  |// ***************************************************
                            17244 ; 214  |#define PAD_I2C18_OEB_REG_MASK              0x00060000
                            17245 ; 215  |#define DRI_CLKOUT_SEL_REG_MASK             0x00010000
                            17246 ; 216  |#define PAD_PD10KTST_OEB_REG_MASK           0x0000C000
                            17247 ; 217  |#define PAD_DRI_OEMAXB_REG_MASK             0x00002000
                            17248 ; 218  |#define PAD_DRI_OEB_REG_MASK                0x00001C00
                            17249 ; 219  |#define RXADC_LEVEL_REG_MASK                0x000003FF
                            17250 ; 220  |#define CHIPID_MASK                         0x0000FF00  // Reset values: TA2: 0x0000C000 ; TB2: 0x00007C00
                            17251 ; 221  |// ***************************************************
                            17252 ; 222  |#define PAD_I2C18_OEB_REG              0
                            17253 ; 223  |#define DRI_CLKOUT_SEL_REG             0
                            17254 ; 224  |#define PAD_PD10KTST_OEB_REG           0
                            17255 ; 225  |#define PAD_DRI_OEMAXB_REG             0
                            17256 ; 226  |#define PAD_DRI_OEB_REG                0
                            17257 ; 227  |#define RXADC_LEVEL_REG                581
                            17258 ; 228  |
                            17259 ; 229  |// #define REF_REG_ADDR                        0x28
                            17260 ; 230  |// ***************************************************
                            17261 ; 231  |#define REF_PWRUP_MASK                      0x00200000
                            17262 ; 232  |#define REG2V_PWRUP_MASK                    0x00100000
                            17263 ; 233  |#define SELFBIASOFF_MASK                    0x00040000
                            17264 ; 234  |#define IBIAS_ADJUST_MASK                   0x00030000
                            17265 ; 235  |#define TESTMODE_VBGVAG_MASK                0x00008000
                            17266 ; 236  |#define MIX_VAG_MASK                        0x00007000
                            17267 ; 237  |#define LOWPOWER_MASK                       0x00000800
                            17268 ; 238  |#define ADC_VAG_MASK                        0x00000700
                            17269 ; 239  |#define LNA_VAG_MASK                        0x000000F0
                            17270 ; 240  |#define ADJUST_MASK                         0x0000000F
                            17271 ; 241  |// ***************************************************
                            17272 ; 242  |#define REF_PWRUP                      0
                            17273 ; 243  |#define REG2V_PWRUP                    0
                            17274 ; 244  |#define SELFBIASOFF                    0
                            17275 ; 245  |#define IBIAS_ADJUST                   0
                            17276 ; 246  |#define TESTMODE_VBGVAG                0
                            17277 ; 247  |#define MIX_VAG                        0
                            17278 ; 248  |#define LOWPOWER                       0
                            17279 ; 249  |#define ADC_VAG                        0
                            17280 ; 250  |#define LNA_VAG                        0
                            17281 ; 251  |#define ADJUST                         0
                            17282 ; 252  |
                            17283 ; 253  |// #define LNA_REG_ADDR                        0x2C
                            17284 ; 254  |// ***************************************************
                            17285 ; 255  |#define RMS_SHIFT_RIGHT_MASK                0x08000000
                            17286 ; 256  |#define PWRUP_RMSDETECTOR_MASK              0x04000000
                            17287 ; 257  |#define PWRUP_REG_MASK                      0x02000000
                            17288 ; 258  |#define PWRUP_LNA_MASK                      0x01000000
                            17289 ; 259  |#define SEL_IBIAS_FROM_CLKXTAL_MASK         0x00800000
                            17290 ; 260  |#define USEATTEN_MASK                       0x00600000
                            17291 ; 261  |#define ANTENNA_TUNECAP_REG_MASK            0x001F0000
                            17292 ; 262  |#define USE_TEST_MASK                       0x00008000
                            17293 ; 263  |#define LNA_CURRENT_UP30_MASK               0x00004000
                            17294 ; 264  |#define LNA_CURRENT_DN50_MASK               0x00002000
                            17295 ; 265  |#define USE_LOW_REG_MASK                    0x00000100
                            17296 ; 266  |#define REG_ADJUST_MASK                     0x000000F0
                            17297 ; 267  |#define VCASN2_UP_MASK                      0x00000008
                            17298 ; 268  |#define VCASN2_DN_MASK                      0x00000004
                            17299 ; 269  |#define VCASN1_UP_MASK                      0x00000002
                            17300 ; 270  |#define VCASN1_DN_MASK                      0x00000001
                            17301 ; 271  |#define IBIAS2_UP_MASK                      0x00000008
                            17302 ; 272  |#define IBIAS2_DN_MASK                      0x00000004
                            17303 ; 273  |#define IBIAS1_UP_MASK                      0x00000002
                            17304 ; 274  |#define IBIAS1_DN_MASK                      0x00000001
                            17305 ; 275  |// ***************************************************
                            17306 ; 276  |#define RMS_SHIFT_RIGHT                0
                            17307 ; 277  |#define PWRUP_RMSDETECTOR              0
                            17308 ; 278  |#define PWRUP_REG                      0
                            17309 ; 279  |#define PWRUP_LNA                      0
                            17310 ; 280  |#define SEL_IBIAS_FROM_CLKXTAL         0
                            17311 ; 281  |#define USEATTEN                       0
                            17312 ; 282  |#define ANTENNA_TUNECAP_REG            0
                            17313 ; 283  |#define USE_TEST                       0
                            17314 ; 284  |#define LNA_CURRENT_UP30               0
                            17315 ; 285  |#define LNA_CURRENT_DN50               0
                            17316 ; 286  |#define USE_LOW_REG                    0
                            17317 ; 287  |#define REG_ADJUST                     0
                            17318 ; 288  |#define VCASN2_UP                      0
                            17319 ; 289  |#define VCASN2_DN                      0
                            17320 ; 290  |#define VCASN1_UP                      0
                            17321 ; 291  |#define VCASN1_DN                      0
                            17322 ; 292  |#define IBIAS2_UP                      0
                            17323 ; 293  |#define IBIAS2_DN                      0
                            17324 ; 294  |#define IBIAS1_UP                      0
                            17325 ; 295  |#define IBIAS1_DN                      0
                            17326 ; 296  |
                            17327 ; 297  |
                            17328 ; 298  |// #define MIXFILT_REG_ADDR                    0x30
                            17329 ; 299  |// ***************************************************
                            17330 ; 300  |#define RESET_MIX_MASK                      0x00008000
                            17331 ; 301  |#define PWRUP_DIG_CLK_MASK                  0x00004000
                            17332 ; 302  |#define PWRUP_ADC_CLK_MASK                  0x00002000
                            17333 ; 303  |#define PWRUP_MASK                          0x00001000
                            17334 ; 304  |#define DELAY_DIG_CLK1_MASK                 0x00000800
                            17335 ; 305  |#define DELAY_DIG_CLK0_MASK                 0x00000400
                            17336 ; 306  |#define INVERT_DIG_CLK_MASK                 0x00000200
                            17337 ; 307  |#define MOVE_ADC_SAMPLE_BACK_MASK           0x00000100
                            17338 ; 308  |#define INVERT_PHASE_MASK                   0x00000080
                            17339 ; 309  |#define EXTEND_NOV_MASK                     0x00000040
                            17340 ; 310  |#define DISABLE_INPUT_SWAP_MASK             0x00000020
                            17341 ; 311  |#define DISABLE_GAIN_SWAP_MASK              0x00000010
                            17342 ; 312  |#define CURRENT_UP30_MASK                   0x00000008
                            17343 ; 313  |#define CURRENT_DOWN50_MASK                 0x00000004
                            17344 ; 314  |#define VAG_CURRENT_UP30_MASK               0x00000002
                            17345 ; 315  |#define VAG_CURRENT_DOWN50_MASK             0x00000001
                            17346 ; 316  |// ***************************************************
                            17347 ; 317  |#define RESET_MIX                      0
                            17348 ; 318  |#define PWRUP_DIG_CLK                  0
                            17349 ; 319  |#define PWRUP_ADC_CLK                  0
                            17350 ; 320  |#define PWRUP                          0
                            17351 ; 321  |#define DELAY_DIG_CLK1                 0
                            17352 ; 322  |#define DELAY_DIG_CLK0                 0
                            17353 ; 323  |#define INVERT_DIG_CLK                 0
                            17354 ; 324  |#define MOVE_ADC_SAMPLE_BACK           0
                            17355 ; 325  |#define INVERT_PHASE                   0
                            17356 ; 326  |#define EXTEND_NOV                     0
                            17357 ; 327  |#define DISABLE_INPUT_SWAP             0
                            17358 ; 328  |#define DISABLE_GAIN_SWAP              0
                            17359 ; 329  |#define CURRENT_UP30                   0
                            17360 ; 330  |#define CURRENT_DOWN50                 0
                            17361 ; 331  |#define VAG_CURRENT_UP30               0
                            17362 ; 332  |#define VAG_CURRENT_DOWN50             0
                            17363 ; 333  |
                            17364 ; 334  |// #define CLK1_REG_ADDR                       0x34
                            17365 ; 335  |// ***************************************************
                            17366 ; 336  |#define HWFM_RESET_MASK                     0x20000000
                            17367 ; 337  |#define CLK1_PWRUP_MASK                     0x10000000
                            17368 ; 338  |#define ENABLE_REG_MASK                     0x08000000
                            17369 ; 339  |#define XTALAMP_SAVEPOWER_BIT1_MASK         0x02000000
                            17370 ; 340  |#define XTALAMP_SAVEPOWER_BIT0_MASK         0x01000000
                            17371 ; 341  |#define CLKOUT_SAVEPOWER_BIT1_MASK          0x00800000
                            17372 ; 342  |#define CLKOUT_SAVEPOWER_BIT0_MASK          0x00400000
                            17373 ; 343  |#define ENABLE_TESTVCOVOLTAGE_MASK          0x00200000
                            17374 ; 344  |#define ENABLE_LSBBOOST_MASK                0x00100000
                            17375 ; 345  |#define ENABLE_TESTPTATIDAC_MASK            0x00080000
                            17376 ; 346  |#define ENABLE_TEST_DELAY_DAC_MASK          0x00040000
                            17377 ; 347  |#define SEL_CLK_PTATIDAC_DELAY_MASK         0x00020000
                            17378 ; 348  |#define SEL_CLK_SC_IS_FREF24_MASK           0x00010000
                            17379 ; 349  |#define TESTOUTQ_ISDELAYOUT_PFDB_MASK       0x00008000
                            17380 ; 350  |#define DISABLE_CLKMIXFILT_MASK             0x00004000
                            17381 ; 351  |#define ENABLE_VCO_MASK                     0x00002000
                            17382 ; 352  |#define PTAT_SHORT_RESISTOR_MASK            0x00001000
                            17383 ; 353  |#define PTAT_TEMPCO_DN_MASK                 0x00000800
                            17384 ; 354  |#define PTAT_TEMPCO_UP_MASK                 0x00000400
                            17385 ; 355  |#define PTAT_PCASC_UP_MASK                  0x00000200
                            17386 ; 356  |#define PTAT_PCASC_DN_MASK                  0x00000100
                            17387 ; 357  |#define DELAY_SCALEUP_MASK                  0x00000080
                            17388 ; 358  |#define DELAY_SCALEDN_MASK                  0x00000040
                            17389 ; 359  |#define ENABLE_TAPDELAYFIX_REG_MASK         0x00000020
                            17390 ; 360  |#define ENABLE_DELAYMISMATCH_TAU_REG1_MASK  0x00000010
                            17391 ; 361  |#define XTAL_LOAD_MASK                      0x0000000F
                            17392 ; 362  |// ***************************************************
                            17393 ; 363  |#define HWFM_RESET                     0
                            17394 ; 364  |#define CLK1_PWRUP                     0
                            17395 ; 365  |#define ENABLE_REG                     0
                            17396 ; 366  |#define XTALAMP_SAVEPOWER_BIT1         0
                            17397 ; 367  |#define XTALAMP_SAVEPOWER_BIT0         0
                            17398 ; 368  |#define CLKOUT_SAVEPOWER_BIT1          0
                            17399 ; 369  |#define CLKOUT_SAVEPOWER_BIT0          0
                            17400 ; 370  |#define ENABLE_TESTVCOVOLTAGE          0
                            17401 ; 371  |#define ENABLE_LSBBOOST                0
                            17402 ; 372  |#define ENABLE_TESTPTATIDAC            0
                            17403 ; 373  |#define ENABLE_TEST_DELAY_DAC          0
                            17404 ; 374  |#define SEL_CLK_PTATIDAC_DELAY         0
                            17405 ; 375  |#define SEL_CLK_SC_IS_FREF24           0
                            17406 ; 376  |#define TESTOUTQ_ISDELAYOUT_PFDB       0
                            17407 ; 377  |#define DISABLE_CLKMIXFILT             0
                            17408 ; 378  |#define ENABLE_VCO                     0
                            17409 ; 379  |#define PTAT_SHORT_RESISTOR            0
                            17410 ; 380  |#define PTAT_TEMPCO_DN                 0
                            17411 ; 381  |#define PTAT_TEMPCO_UP                 0
                            17412 ; 382  |#define PTAT_PCASC_UP                  0
                            17413 ; 383  |#define PTAT_PCASC_DN                  0
                            17414 ; 384  |#define DELAY_SCALEUP                  0
                            17415 ; 385  |#define DELAY_SCALEDN                  0
                            17416 ; 386  |#define ENABLE_TAPDELAYFIX_REG         0
                            17417 ; 387  |#define ENABLE_DELAYMISMATCH_TAU_REG1  0
                            17418 ; 388  |#define XTAL_LOAD                      0
                            17419 ; 389  |
                            17420 ; 390  |// #define CLK2_REG_ADDR                       0x38
                            17421 ; 391  |// ***************************************************
                            17422 ; 392  |#define PLL_PHASE_SCALE_MAX_REG3_MASK       0x70000000
                            17423 ; 393  |#define PLL_PHASE_TWEAK_REG2_MASK           0x0C000000
                            17424 ; 394  |#define PLL_FREQ_TWEAK_REG2_MASK            0x03000000
                            17425 ; 395  |#define PLL_LF_OVERRIDE_REG24_MASK          0x00FFFFFF
                            17426 ; 396  |// ***************************************************
                            17427 ; 397  |#define PLL_PHASE_SCALE_MAX_REG3       0
                            17428 ; 398  |#define PLL_PHASE_TWEAK_REG2           0
                            17429 ; 399  |#define PLL_FREQ_TWEAK_REG2            0
                            17430 ; 400  |#define PLL_LF_OVERRIDE_REG24          0
                            17431 ; 401  |
                            17432 ; 402  |// #define ADC_REG_ADDR                        0x3C
                            17433 ; 403  |// ***************************************************
                            17434 ; 404  |#define VREF_TM_MUX_ENABLE_MASK             0x00040000
                            17435 ; 405  |#define PWRUPQ_MASK                         0x00020000
                            17436 ; 406  |#define PWRUPI_MASK                         0x00010000
                            17437 ; 407  |#define TESTMODE_ADCREF_MASK                0x00008000
                            17438 ; 408  |#define ADC_VREF_ADJ_MASK                   0x00007000
                            17439 ; 409  |#define ADC_EXTEND_NOV_MASK                 0x00000800
                            17440 ; 410  |#define EXTEND_DELAY_MASK                   0x00000400
                            17441 ; 411  |#define CURRENT_DOWN50_VREF_MASK            0x00000200
                            17442 ; 412  |#define CURRENT_UP30_VREF_MASK              0x00000100
                            17443 ; 413  |#define CURRENT_DOWN50_VAG_MASK             0x00000080
                            17444 ; 414  |#define CURRENT_UP30_VAG_MASK               0x00000040
                            17445 ; 415  |#define CURRENT_DOWN50_OTA2_MASK            0x00000020
                            17446 ; 416  |#define CURRENT_UP30_OTA2_MASK              0x00000010
                            17447 ; 417  |#define CURRENT_DOWN50_OTA1_MASK            0x00000008
                            17448 ; 418  |#define CURRENT_UP30_OTA1_MASK              0x00000004
                            17449 ; 419  |#define CURRENT_DOWN50_ALL_MASK             0x00000002
                            17450 ; 420  |#define CURRENT_UP30_ALL_MASK               0x00000001
                            17451 ; 421  |// ***************************************************
                            17452 ; 422  |#define VREF_TM_MUX_ENABLE             0
                            17453 ; 423  |#define PWRUPQ                         0
                            17454 ; 424  |#define PWRUPI                         0
                            17455 ; 425  |#define TESTMODE_ADCREF                0
                            17456 ; 426  |#define ADC_VREF_ADJ                   0
                            17457 ; 427  |#define ADC_EXTEND_NOV                 0
                            17458 ; 428  |#define EXTEND_DELAY                   0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17459 ; 429  |#define CURRENT_DOWN50_VREF            0
                            17460 ; 430  |#define CURRENT_UP30_VREF              0
                            17461 ; 431  |#define CURRENT_DOWN50_VAG             0
                            17462 ; 432  |#define CURRENT_UP30_VAG               0
                            17463 ; 433  |#define CURRENT_DOWN50_OTA2            0
                            17464 ; 434  |#define CURRENT_UP30_OTA2              0
                            17465 ; 435  |#define CURRENT_DOWN50_OTA1            0
                            17466 ; 436  |#define CURRENT_UP30_OTA1              0
                            17467 ; 437  |#define CURRENT_DOWN50_ALL             0
                            17468 ; 438  |#define CURRENT_UP30_ALL               0
                            17469 ; 439  |
                            17470 ; 440  |
                            17471 ; 441  |// #define STFM1000_UNUSED_REG_40              0x40
                            17472 ; 442  |// ***************************************************
                            17473 ; 443  |// ***************************************************
                            17474 ; 444  |
                            17475 ; 445  |// #define AGC_CONTROL1_REG_ADDR               0x44
                            17476 ; 446  |// ***************************************************
                            17477 ; 447  |#define B2_SEL_LNA_OR_WB_REG_MASK           0x00200000
                            17478 ; 448  |#define B2_LNATH_REG_MASK                   0x001F0000
                            17479 ; 449  |#define B2_BYPASS_REF_CTL_REG_MASK          0x00008000
                            17480 ; 450  |#define B2_BYPASS_AGC_CTL_REG_MASK          0x00004000
                            17481 ; 451  |#define B2_AGCREF_REG_MASK                  0x00003F00
                            17482 ; 452  |#define B2_LNA_GAIN_REG_MASK                0x000000F8
                            17483 ; 453  |#define B2_AGCGAIN_REG_MASK                 0x00000007
                            17484 ; 454  |// ***************************************************
                            17485 ; 455  |#define B2_SEL_LNA_OR_WB_REG           0
                            17486 ; 456  |#define B2_LNATH_REG                   12
                            17487 ; 457  |#define B2_BYPASS_REF_CTL_REG          0
                            17488 ; 458  |#define B2_BYPASS_AGC_CTL_REG          1    // Start out with AGC bypassed
                            17489 ; 459  |#define B2_AGCREF_REG                  30
                            17490 ; 460  |#define B2_LNA_GAIN_REG                0    // Start with minimum gain
                            17491 ; 461  |#define B2_AGCGAIN_REG                 2
                            17492 ; 462  |
                            17493 ; 463  |
                            17494 ; 464  |//#define AGC_CONTROL2_REG_ADDR               0x48
                            17495 ; 465  |// ***************************************************
                            17496 ; 466  |#define DECREFCTL_REG_MASK                  0x0FFF0000
                            17497 ; 467  |#define B2_DECAGC_REG_MASK                  0x00000FFF
                            17498 ; 468  |// ***************************************************
                            17499 ; 469  |#define DECREFCTL_REG                  20
                            17500 ; 470  |// 80 runs the AGC at 800k/80 = 10kHz
                            17501 ; 471  |#define B2_DECAGC_REG                  80
                            17502 ; 472  |
                            17503 ; 473  |
                            17504 ; 474  |// #define STFM1000_UNUSED_REG_4C              0x4C
                            17505 ; 475  |// ***************************************************
                            17506 ; 476  |// ***************************************************
                            17507 ; 477  |
                            17508 ; 478  |// #define STFM1000_UNUSED_REG_50              0x50
                            17509 ; 479  |// ***************************************************
                            17510 ; 480  |// ***************************************************
                            17511 ; 481  |
                            17512 ; 482  |// #define STFM1000_UNUSED_REG_54              0x54
                            17513 ; 483  |// ***************************************************
                            17514 ; 484  |// ***************************************************
                            17515 ; 485  |
                            17516 ; 486  |// #define STFM1000_UNUSED_REG_58              0x58
                            17517 ; 487  |// ***************************************************
                            17518 ; 488  |// ***************************************************
                            17519 ; 489  |
                            17520 ; 490  |// #define DATAPATH_REG_ADDR                   0x5C
                            17521 ; 491  |// ***************************************************
                            17522 ; 492  |#define DP_EN_REG_MASK                      0x01000000
                            17523 ; 493  |#define DB_ACCEPT_REG_MASK                  0x00010000
                            17524 ; 494  |#define TST_CLK_OUT_REG_MASK                0x00004000
                            17525 ; 495  |#define I2C_CLK_FREQ_REG_MASK               0x00000E00
                            17526 ; 496  |#define DP_CLK_SEL_REG_MASK                 0x00000100
                            17527 ; 497  |#define INTERP_DATAPATH_CLKGATE_REG_MASK    0x00000080
                            17528 ; 498  |#define DRI_CLK_DIV_REG_MASK                0x0000007C
                            17529 ; 499  |#define DRI_CLK_SEL_REG_MASK                0x00000002
                            17530 ; 500  |#define DRI_EN_REG_MASK                     0x00000001
                            17531 ; 501  |// ***************************************************
                            17532 ; 502  |#define DP_EN_REG                      0
                            17533 ; 503  |// Start off accepting all B2_x writes
                            17534 ; 504  |#define DB_ACCEPT_REG                  1
                            17535 ; 505  |#define TST_CLK_OUT_REG                0
                            17536 ; 506  |#define I2C_CLK_FREQ_REG               0
                            17537 ; 507  |#define DP_CLK_SEL_REG                 0
                            17538 ; 508  |#define INTERP_DATAPATH_CLKGATE_REG    0
                            17539 ; 509  |// Want 4 since 24MHz/6MHz = 4
                            17540 ; 510  |#define DRI_CLK_DIV_REG                4
                            17541 ; 511  |#define DRI_CLK_SEL_REG                0
                            17542 ; 512  |#define DRI_EN_REG                     0
                            17543 ; 513  |
                            17544 ; 514  |
                            17545 ; 515  |// #define RMS_REG_ADDR                        0x60
                            17546 ; 516  |// ***************************************************
                            17547 ; 517  |#define RMS_I_REG_MASK                      0x7FFF0000
                            17548 ; 518  |#define RMS_Q_REG_MASK                      0x00007FFF
                            17549 ; 519  |// ***************************************************
                            17550 ; 520  |
                            17551 ; 521  |// #define AGC_STAT_REG_ADDR                   0x64
                            17552 ; 522  |// ***************************************************
                            17553 ; 523  |#define AGCOUT_STAT_REG_MASK                0x1F000000
                            17554 ; 524  |#define AGCREF_STAT_REG_MASK                0x003F0000
                            17555 ; 525  |#define LNA_RMS_REG_MASK                    0x00001F00
                            17556 ; 526  |#define WB_RMS_REG_MASK                     0x000000FF
                            17557 ; 527  |// ***************************************************
                            17558 ; 528  |
                            17559 ; 529  |// #define SIGNALQUALITY_REG_ADDR              0x68
                            17560 ; 530  |// ***************************************************
                            17561 ; 531  |#define SRC_NOMPOS_REG_MASK                 0x0000FF00
                            17562 ; 532  |#define NEAR_CHAN_AMP_READY_REG_MASK        0x00000080
                            17563 ; 533  |#define NEAR_CHAN_AMPLITUDE_REG_MASK        0x0000007F
                            17564 ; 534  |// ***************************************************
                            17565 ; 535  |
                            17566 ; 536  |// #define DCEST_REG_ADDR                      0x6C
                            17567 ; 537  |// ***************************************************
                            17568 ; 538  |#define DCEST_I_REG_MASK                    0x7FFF0000
                            17569 ; 539  |#define DCEST_Q_REG_MASK                    0x00007FFF
                            17570 ; 540  |// ***************************************************
                            17571 ; 541  |
                            17572 ; 542  |// #define RSSI_TONE_REG_ADDR                  0x70
                            17573 ; 543  |// ***************************************************
                            17574 ; 544  |#define TONEDATA_REG_MASK                   0x0FFF0000
                            17575 ; 545  |#define RSSI_DCEST_REG_MASK                 0x0000FFFF
                            17576 ; 546  |// ***************************************************
                            17577 ; 547  |
                            17578 ; 548  |// #define PILOTCORRECTION_REG_ADDR            0x74
                            17579 ; 549  |// ***************************************************
                            17580 ; 550  |#define PILOTEST_REG_MASK                   0xFF000000
                            17581 ; 551  |#define PILOTEST_REG_TA2_MASK               0xFF000000
                            17582 ; 552  |#define PILOTEST_REG_TB2_MASK               0xFE000000
                            17583 ; 553  |#define PILOTCORRECTION_REG_MASK            0x00FFFFFF
                            17584 ; 554  |// ***************************************************
                            17585 ; 555  |
                            17586 ; 556  |// #define ATTENTION_REG_ADDR                  0x78
                            17587 ; 557  |// ***************************************************
                            17588 ; 558  |#define ATTENTION_REG_MASK                  0x0000003F
                            17589 ; 559  |#define MIXFILT_10PERCENT_REG_MASK          0x00000020
                            17590 ; 560  |#define DRI_OVERRUN_REG_MASK                0x00000010
                            17591 ; 561  |#define PILOT_LIMIT_REG_MASK                0x00000008
                            17592 ; 562  |#define ZIF_OUTCLIP_REG_MASK                0x00000004
                            17593 ; 563  |#define WBRMS_CLIP_REG_MASK                 0x00000002
                            17594 ; 564  |#define DEMOD_OUTCLIP_REG_MASK              0x00000001
                            17595 ; 565  |// ***************************************************
                            17596 ; 566  |
                            17597 ; 567  |// #define CL3_REG_ADDR                        0x7C
                            17598 ; 568  |// ***************************************************
                            17599 ; 569  |#define PLL_DAC_OVERFLOW_REG2_MASK          0x06000000
                            17600 ; 570  |#define PLL_MODE_REG2_MASK                  0x01800000
                            17601 ; 571  |#define PLL_SC_FILTEROUT_REG23_MASK         0x007FFFFF
                            17602 ; 572  |// ***************************************************
                            17603 ; 573  |
                            17604 ; 574  |// #define CHIPID_REG_ADDR                     0x80
                            17605 ; 575  |// ***************************************************
                            17606 ; 576  |#define MAJOR_REV_ID_REG_MASK               0x000000F0
                            17607 ; 577  |#define MINOR_REV_ID_REG_MASK               0x0000000F
                            17608 ; 578  |#define VERSION_TA1                         0x00000001
                            17609 ; 579  |#define VERSION_TA2                         0x00000002  
                            17610 ; 580  |#define VERSION_TB1                         0x00000011
                            17611 ; 581  |#define VERSION_TB2                         0x00000012
                            17612 ; 582  |// ***************************************************
                            17613 ; 583  |
                            17614 ; 584  |
                            17615 ; 585  |////////////////////////////////////////////////////////////////////////////////
                            17616 ; 586  |//! GENERIC Interface Section
                            17617 ; 587  |////////////////////////////////////////////////////////////////////////////////
                            17618 ; 588  |
                            17619 ; 589  |
                            17620 ; 590  |
                            17621 ; 591  |//! Generic Definitions
                            17622 ; 592  |
                            17623 ; 593  |//! temp for when settings functions available from generic level
                            17624 ; 594  |#define SETTINGS_IN_TABLE 20
                            17625 ; 595  |
                            17626 ; 596  |#define SettingTableSize (sizeof(ddi_tuner_TunerSettingsTable_t)\ 
                            17627 ; 597  |+(sizeof(ddi_tuner_TunerSettingsEntry_t)*(SETTINGS_IN_TABLE-1)))
                            17628 ; 598  |
                            17629 ; 599  |
                            17630 ; 600  |//!  Mute duration parameter DDI_TUNER_SOUND_ON_USEC
                            17631 ; 601  |#define DDI_TUNER_SOUND_ON_USEC (50 * 1000)
                            17632 ; 602  |
                            17633 ; 603  |//!  Mute duration parameter DDI_TUNER_SOUND_OFF_USEC
                            17634 ; 604  |#define DDI_TUNER_SOUND_OFF_USEC (20 * 1000)
                            17635 ; 605  |
                            17636 ; 606  |
                            17637 ; 607  |
                            17638 ; 608  |
                            17639 ; 609  |////////////////////////////////////////////////////////////////////////////////
                            17640 ; 610  |//! TUNING Interface Section
                            17641 ; 611  |////////////////////////////////////////////////////////////////////////////////
                            17642 ; 612  |
                            17643 ; 613  |
                            17644 ; 614  |
                            17645 ; 615  |//!  Tuning Structure
                            17646 ; 616  |typedef struct _STFM1000Tune_
                            17647 ; 617  |{
                            17648 ; 618  |    //! Initial 18 registers copied from default data structure
                            17649 ; 619  |
                            17650 ; 620  |    // shadow images written to on-chip registers
                            17651 ; 621  |    // Shadow reg for TUNE1_REG
                            17652 ; 622  |    DWORD sd_ctl_ShadowTune1_dw;
                            17653 ; 623  |    // Shadow reg for SDNOMINAL_REG
                            17654 ; 624  |    DWORD sd_ctl_ShadowSdnominal_dw;
                            17655 ; 625  |    // Shadow reg for PILOTTRACKING_REG
                            17656 ; 626  |    DWORD sd_ctl_ShadowPilotTracking_dw;
                            17657 ; 627  |    // Shadow reg for INITIALIZATION1_REG
                            17658 ; 628  |    DWORD sd_ctl_ShadowInitialization1_dw;
                            17659 ; 629  |    // Shadow reg for INITIALIZATION2_REG
                            17660 ; 630  |    DWORD sd_ctl_ShadowInitialization2_dw;
                            17661 ; 631  |    // Shadow reg for INITIALIZATION3_REG
                            17662 ; 632  |    DWORD sd_ctl_ShadowInitialization3_dw;
                            17663 ; 633  |    // Shadow reg for INITIALIZATION4_REG
                            17664 ; 634  |    DWORD sd_ctl_ShadowInitialization4_dw;
                            17665 ; 635  |    // Shadow reg for INITIALIZATION5_REG
                            17666 ; 636  |    DWORD sd_ctl_ShadowInitialization5_dw;
                            17667 ; 637  |    // Shadow reg for INITIALIZATION6_REG
                            17668 ; 638  |    DWORD sd_ctl_ShadowInitialization6_dw;
                            17669 ; 639  |    // Shadow reg for ANALOG1_REG
                            17670 ; 640  |    DWORD sd_ctl_ShadowRef_dw;
                            17671 ; 641  |    // Shadow reg for ANALOG2_REG
                            17672 ; 642  |    DWORD sd_ctl_ShadowLna_dw;
                            17673 ; 643  |    // Shadow reg for ANALOG3_REG
                            17674 ; 644  |    DWORD sd_ctl_ShadowMixFilt_dw;
                            17675 ; 645  |    // Shadow reg for ANALOG4_REG
                            17676 ; 646  |    DWORD sd_ctl_ShadowClk1_dw;
                            17677 ; 647  |    // Shadow reg for ANALOG4_REG
                            17678 ; 648  |    DWORD sd_ctl_ShadowClk2_dw;
                            17679 ; 649  |    // Shadow reg for ANALOG5_REG
                            17680 ; 650  |    DWORD sd_ctl_ShadowAdc_dw;
                            17681 ; 651  |    // Shadow reg for AGC_CONTROL1_REG
                            17682 ; 652  |    DWORD sd_ctl_ShadowAgcControl1_dw;
                            17683 ; 653  |    // Shadow reg for AGC_CONTROL2_REG
                            17684 ; 654  |    DWORD sd_ctl_ShadowAgcControl2_dw;
                            17685 ; 655  |    // Shadow reg for DATAPATH_REG
                            17686 ; 656  |    DWORD sd_ctl_ShadowDataPath_dw;
                            17687 ; 657  |
                            17688 ; 658  |    // tuning parameters
                            17689 ; 659  |    // user-set RSSI threshold for good station (SETID_SEARCH_RSSI_THRESH)
                            17690 ; 660  |    WORD sd_ctl_TuneRssiTh_w;
                            17691 ; 661  |    // driver-set Multiplex threshold for good station
                            17692 ; 662  |    WORD sd_ctl_TuneMpxDcTh_w;
                            17693 ; 663  |    // driver-set Adjacent-channel interference threshold for Bypass Filter
                            17694 ; 664  |    // -setting
                            17695 ; 665  |    WORD sd_ctl_AdjChanTh_w;
                            17696 ; 666  |    // driver-set Pilot Level threshold to allow stereo decoding (else force
                            17697 ; 667  |    // -mono)
                            17698 ; 668  |    WORD sd_ctl_PilotEstTh_w;
                            17699 ; 669  |
                            17700 ; 670  |    // parameters for monitoring AGC
                            17701 ; 671  |    // driver-set switch to prevent AGC loop from running while DRI active
                            17702 ; 672  |    WORD sd_ctl_AgcMonitorDisabled;
                            17703 ; 673  |    // Approximate number of milliseconds between AGC monitor cycles
                            17704 ; 674  |    WORD sd_ctl_agc_msec_per_cycle;
                            17705 ; 675  |    // Current state of AGC on chip set by monitor routine
                            17706 ; 676  |    BOOL sd_ctl_LnaDriving_u1;
                            17707 ; 677  |    // driver-set AGC monitor threshold of LNA RMS-output to turn off LNA
                            17708 ; 678  |    WORD sd_ctl_pCoefLnaTurnOffTh_w;
                            17709 ; 679  |    // driver-set AGC monitor threshold of LNA RMS-output to turn on LNA
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17710 ; 680  |    WORD sd_ctl_pCoefLnaTurnOnTh_w;
                            17711 ; 681  |    // Put this in AGC_CONTROL1_REG_ADDR:B2_AGCREF_REG_MASK when turn off LNA
                            17712 ; 682  |    WORD sd_ctl_pRegAgcRefLnaOff_w;
                            17713 ; 683  |    // Put this in AGC_CONTROL1_REG_ADDR:B2_AGCREF_REG_MASK when turn on LNA
                            17714 ; 684  |    WORD sd_ctl_pRegAgcRefLnaOn_w;
                            17715 ; 685  |
                            17716 ; 686  |    // tuning data being maintained
                            17717 ; 687  |    // IF offset to tuning table (in 100 kHz units)
                            17718 ; 688  |    INT  sd_ctl_IfFreq_i;
                            17719 ; 689  |    // Freq which Analog Front End should be tuned to
                            17720 ; 690  |    WORD sd_ctl_FeFreq_w;
                            17721 ; 691  |    // calculated tuning data to be sent to SD
                            17722 ; 692  |    DWORD sd_ctl_Tune1Data_dw;
                            17723 ; 693  |    // sdnominal data to be sent to SD
                            17724 ; 694  |    DWORD sd_ctl_SdnominalData_dw;
                            17725 ; 695  |
                            17726 ; 696  |    // data read from on-chip registers
                            17727 ; 697  |    WORD sd_ctl_ShadowRssiDcEst_w; // current RSSI reading
                            17728 ; 698  |    WORD sd_ctl_ShadowRssiDcEstLog_w; // above value converted to log 
                            17729 ; 699  |    WORD sd_ctl_ShadowToneData_w;  // current Multiplex reading
                            17730 ; 700  |    // Added - francis: To accomodate SD_SetChannelFilter sequence
                            17731 ; 701  |    WORD sd_ctl_ShadowSignalQuality_w; // cur Signal Quality reg reading
                            17732 ; 702  |    // Pilot Present flag
                            17733 ; 703  |    BOOL sd_ctl_PilotPresent_b;
                            17734 ; 704  |    BOOL bPrevPilotPresent;
                            17735 ; 705  |    DWORD STFM1000_Version;
                            17736 ; 706  | 
                            17737 ; 707  |}STFM1000Tune_t;
                            17738 ; 708  |
                            17739 ; 709  |/* Check if build environment already defined following */
                            17740 ; 710  |#ifndef TUNE_RSSI_THRESH
                            17741 ; 711  |#define TUNE_RSSI_THRESH        (20)    // First Guess from Hardware Team
                            17742 ; 712  |#endif
                            17743 ; 713  |
                            17744 ; 714  |#ifndef TUNE_MPX_DC_THRESH
                            17745 ; 715  |#define TUNE_MPX_DC_THRESH      (300)   // First Guess from Hardware Team
                            17746 ; 716  |#endif
                            17747 ; 717  |
                            17748 ; 718  |#ifndef ADJACENT_CHAN_THRESH
                            17749 ; 719  |#define ADJACENT_CHAN_THRESH    (100)   // First Guess from Hardware Team
                            17750 ; 720  |#endif
                            17751 ; 721  |
                            17752 ; 722  |#ifndef PILOT_EST_THRESH
                            17753 ; 723  |#define PILOT_EST_THRESH        (17)    // TBD from SD hardware folks
                            17754 ; 724  |#endif
                            17755 ; 725  |
                            17756 ; 726  |// AGC control initial values
                            17757 ; 727  |
                            17758 ; 728  |#ifndef AGC_MSEC_PER_CYCLE
                            17759 ; 729  |#define AGC_MSEC_PER_CYCLE 20
                            17760 ; 730  |#endif
                            17761 ; 731  |
                            17762 ; 732  |#ifndef LNA_TURN_OFF_THRESH
                            17763 ; 733  |#define LNA_TURN_OFF_THRESH 8
                            17764 ; 734  |#endif
                            17765 ; 735  |
                            17766 ; 736  |#ifndef LNA_TURN_ON_THRESH
                            17767 ; 737  |#define LNA_TURN_ON_THRESH 15
                            17768 ; 738  |#endif
                            17769 ; 739  |
                            17770 ; 740  |#ifndef LNA_TURN_OFF_REG_REF
                            17771 ; 741  |#define LNA_TURN_OFF_REG_REF 27
                            17772 ; 742  |#endif
                            17773 ; 743  |
                            17774 ; 744  |#ifndef LNA_TURN_ON_REG_REF
                            17775 ; 745  |#define LNA_TURN_ON_REG_REF 8
                            17776 ; 746  |#endif
                            17777 ; 747  |
                            17778 ; 748  |#ifndef LNA_AMP1_IMPROVE_DISTORTION
                            17779 ; 749  |#define LNA_AMP1_IMPROVE_DISTORTION         0x00800000
                            17780 ; 750  |#endif 
                            17781 ; 751  |
                            17782 ; 752  |// convert between display values and register values
                            17783 ; 753  |
                            17784 ; 754  |#define RSSI_DISPLAY_TO_REG(displayval) ((60*displayval)/100)
                            17785 ; 755  |#define RSSI_REG_TO_DISPLAY(regval) ((100*regval)/60)
                            17786 ; 756  |
                            17787 ; 757  |
                            17788 ; 758  |#define FREQUENCY_100KHZ_MIN   758
                            17789 ; 759  |#define FREQUENCY_100KHZ_RANGE 325
                            17790 ; 760  |
                            17791 ; 761  |
                            17792 ; 762  |
                            17793 ; 763  |
                            17794 ; 764  |////////////////////////////////////////////////////////////////////////////////
                            17795 ; 765  |//! I2C Interface Section
                            17796 ; 766  |////////////////////////////////////////////////////////////////////////////////
                            17797 ; 767  |
                            17798 ; 768  |//! I2C Interface buffer
                            17799 ; 769  |
                            17800 ; 770  |#define STFM1000_I2C_ADDR 0xC0
                            17801 ; 771  |
                            17802 ; 772  |#define MAX_REGISTERS_I2C 1
                            17803 ; 773  |#define MAX_I2C_WRITE_TRIES 6
                            17804 ; 774  |#define MAX_I2C_READ_TRIES  6
                            17805 ; 775  |
                            17806 ; 776  |/**************************************************** 
                            17807 ; 777  | * I2C data and clock pin
                            17808 ; 778  | * GPIO-16: I2C_SCL
                            17809 ; 779  | * GPIO-17: I2C_SDA
                            17810 ; 780  | ****************************************************/
                            17811 ; 781  |#define HW_I2C_CLOCK_ENR    HW_GP0ENR.B.B16    //  0 - Assigned function, 1 - GPIO pin
                            17812 ; 782  |#define HW_I2C_CLOCK_PWR    HW_GP0PWR.B.B16    //  0 - Power down,        1 - Power on
                            17813 ; 783  |#define HW_I2C_CLOCK_DOER   HW_GP0DOER.B.B16   //  0 - Input,             1 - Output
                            17814 ; 784  |#define HW_I2C_CLOCK_DIR    HW_GP0DIR.B.B16    //  Input data pin if configured as input
                            17815 ; 785  |#define HW_I2C_CLOCK_DOR    HW_GP0DOR.B.B16    //  Output dtat pint if configured as output
                            17816 ; 786  |#define HW_I2C_DATA_ENR     HW_GP0ENR.B.B17
                            17817 ; 787  |#define HW_I2C_DATA_PWR     HW_GP0PWR.B.B17
                            17818 ; 788  |#define HW_I2C_DATA_DOER    HW_GP0DOER.B.B17
                            17819 ; 789  |#define HW_I2C_DATA_DIR     HW_GP0DIR.B.B17
                            17820 ; 790  |#define HW_I2C_DATA_DOR     HW_GP0DOR.B.B17
                            17821 ; 791  |
                            17822 ; 792  |#if 0
                            17823 ; 793  |// speed in MHz * 10 /4 - 3 for 50Khz I2C clock
                            17824 ; 794  |#define I2C_IDLE_SPEED      102/4 -3 
                            17825 ; 795  |#define I2C_FM_SPEED        240/4 -3 
                            17826 ; 796  |#define I2C_FM_EQ_SPEED     300/4 -3 
                            17827 ; 797  |#define I2C_MP3_SPEED       360/4 -3 
                            17828 ; 798  |#define I2C_ADPCM_SPEED     360/4 -3
                            17829 ; 799  |#define I2C_MIXER_SPEED IDLE_SPEED  
                            17830 ; 800  |#define I2C_ADCBASE_SPEED   360/4 -3 
                            17831 ; 801  |#define I2C_MAX_SPEED       480/4 -3 
                            17832 ; 802  |#define I2C_WMA_SPEED       600/4 -3  
                            17833 ; 803  |#define I2C_MP3ENCODE_SPEED 636/4 -3  
                            17834 ; 804  |#define I2C_PEAK_SPEED      756/4 -3 
                            17835 ; 805  |#endif
                            17836 ; 806  |
                            17837 ; 807  |// compute FACT = ((DCLK/I2CCLOCK) - 22)/8 for 20Khz I2C clock
                            17838 ; 808  |#define I2C_IDLE_SPEED      (INT)((102*5 -22)/8) 
                            17839 ; 809  |//#define I2C_FM_SPEED        (INT)((180*5 -22)/8) 
                            17840 ; 810  |#define I2C_FM_SPEED        (INT)((240*5 -22)/8)    // stmp10415
                            17841 ; 811  |#define I2C_FM_EQ_SPEED        (INT)((300*5 -22)/8)   
                            17842 ; 812  |#define I2C_MP3_SPEED       (INT)((360*5 -22)/8) 
                            17843 ; 813  |#define I2C_ADPCM_SPEED     (INT)((360*5 -22)/8)
                            17844 ; 814  |#define I2C_MIXER_SPEED     IDLE_SPEED  
                            17845 ; 815  |#define I2C_ADCBASE_SPEED   (INT)((360*5 -22)/8) 
                            17846 ; 816  |#define I2C_MAX_SPEED       (INT)((480*5 -22)/8) 
                            17847 ; 817  |#define I2C_WMA_SPEED       (INT)((600*5 -22)/8)  
                            17848 ; 818  |#define I2C_MP3ENCODE_SPEED (INT)((636*5 -22)/8)  
                            17849 ; 819  |#define I2C_PEAK_SPEED      (INT)((756*5 -22)/8)  
                            17850 ; 820  |
                            17851 ; 821  | 
                            17852 ; 822  |#define I2C_USBMSC_SPEED    686/4 - 3           // For USBMSC: fDCLK is fixed at 68.57 Mhz
                            17853 ; 823  |
                            17854 ; 824  |
                            17855 ; 825  |
                            17856 ; 826  |#define PWR_ON_HW_I2CCSR_STATE 0x200000
                            17857 ; 827  |#define RESET_HW_I2CCSR_STATE  0x010000 //0x008000 @ power on, or 0x010000 otherwise
                            17858 ; 828  |#define RESET_HW_I2CCSR_MASK   0xFE7FFF
                            17859 ; 829  |
                            17860 ; 830  |
                            17861 ; 831  |/****************************************************
                            17862 ; 832  | * I2C
                            17863 ; 833  | ****************************************************/
                            17864 ; 834  |////////////////////////////////////////////////////////////////////////////////
                            17865 ; 835  |//  Macros
                            17866 ; 836  |////////////////////////////////////////////////////////////////////////////////
                            17867 ; 837  |#define TIMEOUT_COUNT  8192
                            17868 ; 838  |#define TIMEOUT_ERROR  -1
                            17869 ; 839  |#define ACKF_ERROR     -2 
                            17870 ; 840  |#define READMODE        1    
                            17871 ; 841  |#define WRITEMODE       0 
                            17872 ; 842  |#define ONE_BYTE        0   // WL values 8 bit
                            17873 ; 843  |#define TWO_BYTES       2   // WL values 16 bit
                            17874 ; 844  |#define THREE_BYTES     1   // WL values 24 bit
                            17875 ; 845  |////////////////////////////////////////////////////////////////////////////////
                            17876 ; 846  |//  Data type Definitions
                            17877 ; 847  |////////////////////////////////////////////////////////////////////////////////
                            17878 ; 848  |typedef union               /* I2C Data Register */
                            17879 ; 849  |{
                            17880 ; 850  |    struct {
                            17881 ; 851  |        unsigned int BYTE2 :8;  // LSB
                            17882 ; 852  |        unsigned int BYTE1 :8;
                            17883 ; 853  |        unsigned int BYTE0 :8;  // MSB 
                            17884 ; 854  |    } B;
                            17885 ; 855  |     
                            17886 ; 856  |    int I;
                            17887 ; 857  |    unsigned U;
                            17888 ; 858  |} i2cdata_type;
                            17889 ; 859  |
                            17890 ; 860  |typedef union                
                            17891 ; 861  |{
                            17892 ; 862  |    DWORD D;
                            17893 ; 863  |    struct {
                            17894 ; 864  |        unsigned int W1;    // LSB
                            17895 ; 865  |        unsigned int W0;    // MSB 
                            17896 ; 866  |    } U;
                            17897 ; 867  | } DWORD_type;
                            17898 ; 868  | 
                            17899 ; 869  |////////////////////////////////////////////////////////////////////////////////
                            17900 ; 870  |//  Prototypes
                            17901 ; 871  |////////////////////////////////////////////////////////////////////////////////
                            17902 ; 872  |_reentrant INT STFM1000I2CInit(WORD mode, WORD ClockDiv);
                            17903 ; 873  |_reentrant INT STFM1000I2CWriteRegister(WORD I2C_Sub_Addr, DWORD DataOut);
                            17904 ; 874  |_reentrant INT STFM1000I2CReadRegister(WORD I2C_Sub_Addr, DWORD DataOut,DWORD * DataIn);
                            17905 ; 875  |_reentrant void STFM1000I2CClose(void);
                            17906 ; 876  |_reentrant INT  STFM1000SetLnaBias(INT iRssiLog);
                            17907 ; 877  |
                            17908 ; 878  |//! Tuning Function Prototypes
                            17909 ; 879  |//!
                            17910 ; 880  |
                            17911 ; 881  |_reentrant void STFM1000Reset(void);
                            17912 ; 882  |
                            17913 ; 883  |_reentrant void STFM1000RegValsReset(void);
                            17914 ; 884  |
                            17915 ; 885  |_reentrant INT STFM1000RegsPowerUp1(void);
                            17916 ; 886  |_reentrant INT STFM1000RegsPowerUp2(void);
                            17917 ; 887  |
                            17918 ; 888  |_reentrant INT STFM1000RegsPowerDown(void);
                            17919 ; 889  |
                            17920 ; 890  |///////////////////////////////////////////////////////////////////////////////
                            17921 ; 891  |// Prototypes
                            17922 ; 892  |////////////////////////////////////////////////////////////////////////////////
                            17923 ; 893  |_reentrant INT STFM1000QuickTune(WORD wTuneFreqIn);
                            17924 ; 894  |
                            17925 ; 895  |
                            17926 ; 896  |// * Optimize Channel on chip  (tspec_v09x.pdf::SD_Optimize_Channel)
                            17927 ; 897  |_reentrant INT STFM1000OptimizeChannel(void);
                            17928 ; 898  |
                            17929 ; 899  |// OptmizeChannel() calls the following 3 procedures:
                            17930 ; 900  |
                            17931 ; 901  |// * Set Channel Filter on chip  (tspec_v09x.pdf::SD_SetChannelFilter)
                            17932 ; 902  |_reentrant INT STFM1000SetChannelFilter(void);
                            17933 ; 903  |
                            17934 ; 904  |_reentrant INT STFM1000TunerMonitorQuality(void);
                            17935 ; 905  |
                            17936 ; 906  |// * Look for Pilot Tone on chip  (tspec_v09x.pdf::SD_LookForPilot)
                            17937 ; 907  |_reentrant INT STFM1000LookForPilot(BOOL * bPilotPresent);
                            17938 ; 908  |
                            17939 ; 909  |// * OPptimizeChannel on chip  (tspec_v09x.pdf::SD_GearShiftPilotTracking)
                            17940 ; 910  |_reentrant INT STFM1000GearShiftPilotTracking(void);
                            17941 ; 911  |
                            17942 ; 912  |_reentrant INT STFM1000TunerSafeStandbyMode(void);
                            17943 ; 913  |
                            17944 ; 914  |_reentrant void TunerTuningInit(void);
                            17945 ; 915  |
                            17946 ; 916  |//! Tuner Specific Function Prototypes
                            17947 ; 917  |//
                            17948 ; 918  |// Note:  Any of these primitives can block for a significant period of time.
                            17949 ; 919  |// In that case, the primitive must spend its sleeping time waiting on the
                            17950 ; 920  |// main message queue for an Abort message, which will cause it immediately
                            17951 ; 921  |// to return a status of ERROR_DDI_TUNER_UNBLOCKED_BY_ABORT
                            17952 ; 922  |
                            17953 ; 923  |_inline    INT STFM1000TunerInit(void); //_inline
                            17954 ; 924  |
                            17955 ; 925  |_reentrant INT STFM1000TunerUninit(void);
                            17956 ; 926  |
                            17957 ; 927  |_reentrant INT STFM1000TunerPowerUp(void);
                            17958 ; 928  |
                            17959 ; 929  |_reentrant INT STFM1000TunerPowerDown(void);
                            17960 ; 930  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17961 ; 931  |_reentrant INT STFM1000TunerUnlockStation(void);
                            17962 ; 932  |
                            17963 ; 933  |_reentrant INT STFM1000TunerQuicksetStation(WORD wNewFrequency);
                            17964 ; 934  |
                            17965 ; 935  |_reentrant INT STFM1000TunerLockStation(void);
                            17966 ; 936  |
                            17967 ; 937  |_reentrant INT STFM1000TunerQueryIsStation(BOOL * pIsStation);
                            17968 ; 938  |_reentrant INT STFM1000TunerMonitorQualityStateStart(void);
                            17969 ; 939  |_reentrant INT STFM1000TunerMonitorQualityStateFinal(void);
                            17970 ; 940  |_reentrant INT STFM1000OptimizeChannelStart(void);
                            17971 ; 941  |_reentrant INT STFM1000OptimizeChannelEnd(void);
                            17972 ; 942  |_inline    INT STFM1000SetNearChannelOffset(WORD wOffsetCode);      //_inline
                            17973 ; 943  |_inline    INT STFM1000GetNearChannelOffset(void);                  //_inline
                            17974 ; 944  |_inline    INT STFM1000SetNearChannelFilter(WORD wBypassSetting);   //_inline
                            17975 ; 945  |_inline    INT STFM1000GearShiftPtGear(DWORD dwBits);               //_inline
                            17976 ; 946  |
                            17977 ; 947  |/* Private functions */
                            17978 ; 948  |
                            17979 ; 949  |_inline    INT STFM1000DriOff(void);
                            17980 ; 950  |_inline    INT STFM1000DriOn(void);                                 //_inline
                            17981 ; 951  |_reentrant INT STFM1000DataPathOff(void);
                            17982 ; 952  |_reentrant INT STFM1000DataPathOn(void);
                            17983 ; 953  |_reentrant INT STFM1000TakeDown(void);
                            17984 ; 954  |_reentrant INT STFM1000BringUp(void);
                            17985 ; 955  |_reentrant INT STFM1000TunerLowPowerMode(void);
                            17986 ; 956  |   
                            17987 ; 957  |//! I2C Interface Function Prototypes
                            17988 ; 958  |
                            17989 ; 959  |_reentrant INT STFM1000WriteRegister(WORD wAddr, DWORD dwMask,
                            17990 ; 960  |    DWORD *pShadow, DWORD dwData);
                            17991 ; 961  |
                            17992 ; 962  |_reentrant INT STFM1000ReadRegisterToShadow(WORD wAddr, DWORD *pShadow);
                            17993 ; 963  |
                            17994 ; 964  |_reentrant void STFM1000ReadShadowRegister(DWORD dwMask, DWORD *pShadow,
                            17995 ; 965  |    DWORD *pData);
                            17996 ; 966  |
                            17997 ; 967  |_reentrant INT STFM1000ReadSubRegister(WORD wAddr, DWORD dwMask,
                            17998 ; 968  |    DWORD *pData);
                            17999 ; 969  |
                            18000 ; 970  |_reentrant void STFM1000delay_ms(WORD wDelay);            
                            18001 ; 971  |
                            18002 ; 972  |_reentrant INT STFM1000ContinueScanning( void );
                            18003 ; 973  |_reentrant INT STFM1000ContinueSearching( void );
                            18004 ; 974  |_reentrant INT STFM1000TunerSearchEnded( WORD wSearchFrequency );
                            18005 ; 975  |_reentrant INT STFM1000NextSearchFrequency( void );
                            18006 ; 976  |_reentrant INT STFM1000EndAutoScanning( void );
                            18007 ; 977  |_reentrant void STFM1000WriteDataReAlignment(DWORD* pdwNewData);
                            18008 ; 978  |_reentrant void STFM1000ReadDataReAlignment(DWORD* pdwNewData);
                            18009 ; 979  |_reentrant INT STFM1000TuningSearchingScanning(void);
                            18010 ; 980  |_reentrant INT STFM1000FindRSSIThresHold(void);
                            18011 ; 981  |_reentrant int STFM1000TestPresence(void); // i2c write error detects non presense of stfm1000
                            18012 ; 982  |_reentrant INT I2CWriteTunerRegister(WORD I2C_Sub_Addr, DWORD DataOut);
                            18013 ; 983  |_reentrant I2CReset(WORD mode, WORD ClockDiv);
                            18014 ; 984  |
                            18015 ; 985  |
                            18016 ; 986  |#define UCHAR unsigned char
                            18017 ; 987  |typedef union                // Required since casting between int and _fract does not work as expected
                            18018 ; 988  |{
                            18019 ; 989  |    long _fract FF;
                            18020 ; 990  |    DWORD D;
                            18021 ; 991  |    _fract F;
                            18022 ; 992  |    unsigned int I;
                            18023 ; 993  |}Fract_type;
                            18024 ; 994  |
                            18025 ; 995  |#define NOT_SEARCHING       0
                            18026 ; 996  |#define SEARCHING_UP        1
                            18027 ; 997  |#define SEARCHING_DOWN     -1
                            18028 ; 998  |
                            18029 ; 999  |#ifdef SD_USE_200KHZ_TUNING_GRID
                            18030 ; 1000 |#define FM_FREQ_STEP    200
                            18031 ; 1001 |#else
                            18032 ; 1002 |#define FM_FREQ_STEP    100
                            18033 ; 1003 |#endif
                            18034 ; 1004 |
                            18035 ; 1005 |#define RSSI_THRESHOLD_OFFSET   7
                            18036 ; 1006 |/* FM TUNER Constants that can be overruled by project.inc */
                            18037 ; 1007 |
                            18038 ; 1008 |
                            18039 ; 1009 |#if !defined(NUMBER_OF_PRESETS)
                            18040 ; 1010 |#define NUMBER_OF_PRESETS       10
                            18041 ; 1011 |#endif
                            18042 ; 1012 |
                            18043 ; 1013 |#if 0
                            18044 ; 1014 |#if !defined(FM_BAND_LIMIT_HIGH_FREQ)
                            18045 ; 1015 | #ifdef FM_JAPAN_REGION
                            18046 ; 1016 |  #ifdef SD_USE_200KHZ_TUNING_GRID 
                            18047 ; 1017 |  // stmp10809 solved by changing this from 89000 to 89900 (correct japan high freq limit)
                            18048 ; 1018 |  #define       FM_BAND_LIMIT_HIGH_FREQ 89900
                            18049 ; 1019 |  #else
                            18050 ; 1020 |  #define       FM_BAND_LIMIT_HIGH_FREQ 90000 
                            18051 ; 1021 |  #endif
                            18052 ; 1022 | #else // non japan fm band
                            18053 ; 1023 |  #ifdef SD_USE_200KHZ_TUNING_GRID 
                            18054 ; 1024 |  #define       FM_BAND_LIMIT_HIGH_FREQ 107900
                            18055 ; 1025 |  #else
                            18056 ; 1026 |  #define       FM_BAND_LIMIT_HIGH_FREQ 108000 
                            18057 ; 1027 |  #endif
                            18058 ; 1028 | #endif // non japan fm band 
                            18059 ; 1029 |#endif // FM band limit high freq
                            18060 ; 1030 |
                            18061 ; 1031 |#if !defined(FM_BAND_LIMIT_LOW_FREQ)
                            18062 ; 1032 |#ifdef FM_JAPAN_REGION
                            18063 ; 1033 |#define FM_BAND_LIMIT_LOW_FREQ  76000
                            18064 ; 1034 |#else
                            18065 ; 1035 |#define FM_BAND_LIMIT_LOW_FREQ  87500
                            18066 ; 1036 |#endif
                            18067 ; 1037 |#endif
                            18068 ; 1038 |#endif
                            18069 ; 1039 |
                            18070 ; 1040 |#if !defined(FM_BAND_LIMIT_HIGH_FREQ)
                            18071 ; 1041 |    #ifdef  FM_USA_REGION               //USA
                            18072 ; 1042 |                #define FM_BAND_LIMIT_HIGH_FREQ    107900 
                            18073 ; 1043 |                #define FM_BAND_LIMIT_LOW_FREQ     87500
                            18074 ; 1044 |    #else             //  !(USA)
                            18075 ; 1045 |        #ifdef  FM_EUROPE_REGION      //Europe and China
                            18076 ; 1046 |                #define FM_BAND_LIMIT_HIGH_FREQ    108000 
                            18077 ; 1047 |                #define FM_BAND_LIMIT_LOW_FREQ      87500
                            18078 ; 1048 |        #else         //  !(EUROPE)
                            18079 ; 1049 |            #ifdef FM_JAPAN_REGION    //Japan
                            18080 ; 1050 |                #define FM_BAND_LIMIT_HIGH_FREQ     90000
                            18081 ; 1051 |                #define FM_BAND_LIMIT_LOW_FREQ      76000
                            18082 ; 1052 |            #endif   // end (JAPAN)
                            18083 ; 1053 |        #endif      // end (EUROPE)
                            18084 ; 1054 |    #endif          // end (USA)
                            18085 ; 1055 |#endif
                            18086 ; 1056 |
                            18087 ; 1057 |#if !defined(FM_TUNER_GRID)
                            18088 ; 1058 |#ifdef SD_USE_200KHZ_TUNING_GRID
                            18089 ; 1059 |#define FM_TUNER_GRID   200
                            18090 ; 1060 |#else
                            18091 ; 1061 |#define FM_TUNER_GRID   100
                            18092 ; 1062 |#endif
                            18093 ; 1063 |#endif
                            18094 ; 1064 |
                            18095 ; 1065 |#define FM_SEARCH_HIGH_LIMIT (FM_BAND_LIMIT_HIGH_FREQ+FM_FREQ_STEP)
                            18096 ; 1066 |#define FM_SEARCH_LOW_LIMIT (FM_BAND_LIMIT_LOW_FREQ-FM_FREQ_STEP)
                            18097 ; 1067 |#define STFM1000_TA2A_CHIP
                            18098 ; 1068 |#define STFM1000_POWER_REDUCTION_VERSION
                            18099 ; 1069 |
                            18100 ; 1070 |/* Set up the preset stations */  
                            18101 ; 1071 |typedef struct PresetStation
                            18102 ; 1072 |{
                            18103 ; 1073 |        WORD Frequency;
                            18104 ; 1074 |        INT      Level;
                            18105 ; 1075 |} FMTunerPreset;
                            18106 ; 1076 |
                            18107 ; 1077 |typedef struct TunerSearchStatus
                            18108 ; 1078 |{
                            18109 ; 1079 |        WORD Frequency;
                            18110 ; 1080 |        INT      Level;
                            18111 ; 1081 |    INT  MpxAdc;
                            18112 ; 1082 |} FMTunerSearchStatus;
                            18113 ; 1083 |
                            18114 ; 1084 |typedef enum
                            18115 ; 1085 |{
                            18116 ; 1086 |    MONITOR_SIGNAL_QUALITY_STATE_START = 0,
                            18117 ; 1087 |    MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_1, 
                            18118 ; 1088 |    MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_2, 
                            18119 ; 1089 |    MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_3,    
                            18120 ; 1090 |    MONITOR_SIGNAL_QUALITY_STATE_COMPLETE
                            18121 ; 1091 |}eMonitorSignalQualityState;
                            18122 ; 1092 |
                            18123 ; 1093 |typedef enum
                            18124 ; 1094 |{
                            18125 ; 1095 |    OPTIMIZE_CHANNEL_STATE_START = 0,
                            18126 ; 1096 |    OPTIMIZE_CHANNEL_STATE_PROCESSING_1, 
                            18127 ; 1097 |    OPTIMIZE_CHANNEL_STATE_PROCESSING_2, 
                            18128 ; 1098 |    OPTIMIZE_CHANNEL_STATE_PROCESSING_3,
                            18129 ; 1099 |    OPTIMIZE_CHANNEL_STATE_COMPLETE      
                            18130 ; 1100 |}eOptimizeChannelState;
                            18131 ; 1101 |
                            18132 ; 1102 |typedef struct _STFM1000GearShiftPilotTrackingTable
                            18133 ; 1103 |{
                            18134 ; 1104 |    DWORD dw_msec_delay;
                            18135 ; 1105 |    DWORD dw_bits;
                            18136 ; 1106 |} STFM1000GearShiftPilotTrackingTable_t;
                            18137 ; 1107 |
                            18138 ; 1108 |#endif //_STFM_1000_H
                            18139 
                            18141 
                            18142 ; 16   |#include "hwequ.h"
                            18143 
                            18145 
                            18146 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            18147 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                            18148 ; 3    |//  File        : hwequ.inc
                            18149 ; 4    |//  Description : STMP Hardware Constants
                            18150 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            18151 ; 6    |
                            18152 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                            18153 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                            18154 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                            18155 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                            18156 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                            18157 ; 12   |
                            18158 ; 13   |#if (!defined(HWEQU_INC))
                            18159 ; 14   |#define HWEQU_INC 1
                            18160 ; 15   |
                            18161 ; 16   |#include "types.h"
                            18162 ; 17   |#include "regsclkctrl.h"
                            18163 ; 18   |#include "regscore.h"
                            18164 ; 19   |#include "regscodec.h"
                            18165 ; 20   |#include "regsdcdc.h"
                            18166 ; 21   |#include "regsemc.h"
                            18167 ; 22   |#include "regsgpio.h"
                            18168 ; 23   |#include "regsi2c.h"
                            18169 ; 24   |#include "regsi2s.h"
                            18170 ; 25   |#include "regsicoll.h"
                            18171 ; 26   |#include "regslradc.h"
                            18172 ; 27   |#include "regspwm.h"
                            18173 ; 28   |#include "regsrevision.h"
                            18174 ; 29   |#include "regsrtc.h"
                            18175 ; 30   |#include "regsspare.h"
                            18176 ; 31   |#include "regsspi.h"
                            18177 ; 32   |#include "regsswizzle.h"
                            18178 ; 33   |#include "regssdram.h"
                            18179 ; 34   |#include "regstb.h"
                            18180 ; 35   |#include "regstimer.h"
                            18181 ; 36   |#include "regsusb20.h"
                            18182 ; 37   |#include "regsusb20phy.h"
                            18183 ; 38   |
                            18184 ; 39   |
                            18185 ; 40   |#endif // if (!@def(hwequ))
                            18186 ; 41   |
                            18187 
                            18189 
                            18190 ; 17   |
                            18191 ; 18   |#ifdef PLAYER
                            18192 ; 19   |#include "sysspeed.h"
                            18193 
                            18195 
                            18196 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            18197 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            18198 ; 3    |// Speed defs
                            18199 ; 4    |// NOTE: sysspeed.H is generated from sysspeed.INC. Only modify inc version.
                            18200 ; 5    |// Speed clients: See SPEED_CLIENT_ defines and non 3400 Speed Indeces
                            18201 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                            18202 ; 7    |
                            18203 ; 8    |#if (!defined(SYSSPEED_INC))
                            18204 ; 9    |#define SYSSPEED_INC 1
                            18205 ; 10   |
                            18206 ; 11   |// PLL Frequency Divider (Assume DDIV=0)
                            18207 ; 12   |// PLL Output Frequency = (33+PDIV)*(XTAL/20)   XTAL=24 MHz
                            18208 ; 13   |// PDIV = (Speed * 20 / 24) - 33  (if DDIV=0)
                            18209 ; 14   |// Digital Clock Post Divider 
                            18210 ; 15   |// Digital Clock = PLL Output Fequency / 2^DDIV   (Speed is in MHz)
                            18211 ; 16   |// GP Flash Timing Registers
                            18212 ; 17   |// x:HW_GPFLASH_TIMING1R
                            18213 ; 18   |//      TSU = 0ns 
                            18214 ; 19   |//      TH = 10ns Min
                            18215 ; 20   |// Use Default Settings since max speed is 75.6 MHz or 13.2275 ns
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18216 ; 21   |// Add Register if needed
                            18217 ; 22   |// x:HW_GPFLASH_TIMING2R 
                            18218 ; 23   |//      TDS = 25ns Min  data setup time
                            18219 ; 24   |//      TDH = 15ns Min  data hold  time
                            18220 ; 25   |//      TDS + TDH must be > 50 nS
                            18221 ; 26   |// Speed Indexes (into the speed table)
                            18222 ; 27   |//!!!!! ** MUST BE ORDERED FROM LOWEST TO HIGHEST FREQ ** !!!!!
                            18223 ; 28   |// NOTE: Executive speed client must only use speed index 1 or 0 (IDLE).
                            18224 ; 29   |#define SPEED_IDLE 0 
                            18225 ; 30   |#define SPEED_AUDIBLE_MP3 1
                            18226 ; 31   |#define SPEED_AUDIBLE_ACELP_SR8KHz 2
                            18227 ; 32   |#define SPEED_FM 3
                            18228 ; 33   |#define SPEED_FM_EQ 4
                            18229 ; 34   |#define SPEED_AUDIBLE_ACELP_SR16KHz 5
                            18230 ; 35   |#define SPEED_MP3 6
                            18231 ; 36   |#define SPEED_ADPCM 7
                            18232 ; 37   |#define SPEED_MIXER 8
                            18233 ; 38   |#define SPEED_ADCBASE 9
                            18234 ; 39   |#define SPEED_MAX 10
                            18235 ; 40   |#define SPEED_WMA 11
                            18236 ; 41   |#define SPEED_MP3ENCODE 12
                            18237 ; 42   |#define SPEED_PEAK 13
                            18238 ; 43   |#define SPEED_LAST SPEED_PEAK
                            18239 ; 44   |#define SPEED_UNINITIALIZED SPEED_LAST+1
                            18240 ; 45   |// SPEED_UNINITIALIZED must be the highest index value
                            18241 ; 46   |
                            18242 ; 47   |// Idle speed is 10 MHz  (98.04nS)
                            18243 ; 48   |#define IDLE_SPEED 10              
                            18244 ; 49   |// (1+33)*(24/20) = 40.8
                            18245 ; 50   |#define IDLE_PDIV 1               
                            18246 ; 51   |// 40.5504 / (2^2) = 10.2 MHz
                            18247 ; 52   |#define IDLE_DDIV 2               
                            18248 ; 53   |// 1.37v
                            18249 ; 54   |#define IDLE_VOLTAGE 0x00000B         
                            18250 ; 55   |// 1.28v 
                            18251 ; 56   |#define IDLE_BOVOLTAGE 0x000800         
                            18252 ; 57   |
                            18253 ; 58   |
                            18254 ; 59   |// tdh and tds: hold and setup times in n dclks are 6-bit fields that are right justified byte aligned
                            18255 ; 60   |// 60MHz MSC uses the following clock setup: 
                            18256 ; 61   |// NAND1     $000203 -> (2+3)/60MHz =  83.3ns   2 dclk hold and 3 dclk setup
                            18257 ; 62   |// NAND2     $000304 -> (3+4)/60MHz = 116.7ns
                            18258 ; 63   |// NAND3     $000305 -> (3+5)/60MHz = 133.3ns
                            18259 ; 64   |// NAND4     $000305 -> (3+5)/60MHz = 133.3ns
                            18260 ; 65   |// So, for 10MHz idle speed:
                            18261 ; 66   |// NAND1,2,4 may use $000101 
                            18262 ; 67   |#if (defined(DEBUG))
                            18263 ; 68   |#if (defined(NAND1))
                            18264 ; 69   |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18265 ; 70   |#define IDLE_GPSPEED 0x000101         
                            18266 ; 71   |#else 
                            18267 ; 72   |#if (defined(NAND2))
                            18268 ; 73   |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18269 ; 74   |#define IDLE_GPSPEED 0x000101         
                            18270 ; 75   |#else 
                            18271 ; 76   |#if (defined(NAND3))
                            18272 ; 77   |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18273 ; 78   |#define IDLE_GPSPEED 0x000101         
                            18274 ; 79   |#else 
                            18275 ; 80   |#if (defined(NAND4))
                            18276 ; 81   |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18277 ; 82   |#define IDLE_GPSPEED 0x000101         
                            18278 ; 83   |#else 
                            18279 ; 84   |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18280 ; 85   |#define IDLE_GPSPEED 0x000101         
                            18281 ; 86   |#endif
                            18282 ; 87   |#endif
                            18283 ; 88   |#endif
                            18284 ; 89   |#endif
                            18285 ; 90   |#else 
                            18286 ; 91   |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18287 ; 92   |#define IDLE_GPSPEED 0x000101         
                            18288 ; 93   |#endif
                            18289 ; 94   |//---------    
                            18290 ; 95   |
                            18291 ; 96   |// speed is 15 MHz(66.6nS)
                            18292 ; 97   |#define AUDIBLE_MP3_SPEED 15              
                            18293 ; 98   |// PLL O/P freq = (33 + PDIV)*(24/20) = (33 + 17)*(24/20) = 60MHz
                            18294 ; 99   |#define AUDIBLE_MP3_PDIV 17              
                            18295 ; 100  |// DCLK = 40.8MHz/(2^DDIV) = 15MHz
                            18296 ; 101  |#define AUDIBLE_MP3_DDIV 2               
                            18297 ; 102  |// 1.37V
                            18298 ; 103  |#define AUDIBLE_MP3_VOLTAGE 0x00000B         
                            18299 ; 104  |// 1.28V 
                            18300 ; 105  |#define AUDIBLE_MP3_BOVOLTAGE 0x000800         
                            18301 ; 106  |
                            18302 ; 107  |// NAND1     15MHz *  83.3ns = 1.249 -> $000101
                            18303 ; 108  |// NAND2     15MHz * 116.7ns = 1.750 -> $000101
                            18304 ; 109  |// NAND3|4   15MHz * 133.3ns = 1.999 -> $000101
                            18305 ; 110  |
                            18306 ; 111  |#if (defined(DEBUG))
                            18307 ; 112  |#if (defined(NAND1))
                            18308 ; 113  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18309 ; 114  |#define AUDIBLE_MP3_GPSPEED 0x000101         
                            18310 ; 115  |#else 
                            18311 ; 116  |#if (defined(NAND2))
                            18312 ; 117  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18313 ; 118  |#define AUDIBLE_MP3_GPSPEED 0x000101         
                            18314 ; 119  |#else 
                            18315 ; 120  |#if (defined(NAND3))
                            18316 ; 121  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18317 ; 122  |#define AUDIBLE_MP3_GPSPEED 0x000101         
                            18318 ; 123  |#else 
                            18319 ; 124  |#if (defined(NAND4))
                            18320 ; 125  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18321 ; 126  |#define AUDIBLE_MP3_GPSPEED 0x000101         
                            18322 ; 127  |#else 
                            18323 ; 128  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18324 ; 129  |#define AUDIBLE_MP3_GPSPEED 0x000101         
                            18325 ; 130  |#endif
                            18326 ; 131  |#endif
                            18327 ; 132  |#endif
                            18328 ; 133  |#endif
                            18329 ; 134  |#else 
                            18330 ; 135  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18331 ; 136  |#define AUDIBLE_MP3_GPSPEED 0x000101         
                            18332 ; 137  |#endif
                            18333 ; 138  |//---------   
                            18334 ; 139  |
                            18335 ; 140  |// speed is 15 MHz(66.6nS)
                            18336 ; 141  |#define AUDIBLE_ACELP_SR8KHz_SPEED 15              
                            18337 ; 142  |// PLL O/P freq = (33 + PDIV)*(24/20) = (33 + 17)*(24/20) = 60MHz
                            18338 ; 143  |#define AUDIBLE_ACELP_SR8KHz_PDIV 17              
                            18339 ; 144  |// DCLK = 40.8MHz/(2^DDIV) = 15MHz
                            18340 ; 145  |#define AUDIBLE_ACELP_SR8KHz_DDIV 2               
                            18341 ; 146  |// 1.37V
                            18342 ; 147  |#define AUDIBLE_ACELP_SR8KHz_VOLTAGE 0x00000B         
                            18343 ; 148  |// 1.28V 
                            18344 ; 149  |#define AUDIBLE_ACELP_SR8KHz_BOVOLTAGE 0x000800         
                            18345 ; 150  |
                            18346 ; 151  |// NAND1     15MHz *  83.3ns = 1.249 -> $000101
                            18347 ; 152  |// NAND2     15MHz * 116.7ns = 1.750 -> $000101
                            18348 ; 153  |// NAND3|4   15MHz * 133.3ns = 1.999 -> $000101
                            18349 ; 154  |
                            18350 ; 155  |#if (defined(DEBUG))
                            18351 ; 156  |#if (defined(NAND1))
                            18352 ; 157  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18353 ; 158  |#define AUDIBLE_ACELP_SR8KHz_GPSPEED 0x000101         
                            18354 ; 159  |#else 
                            18355 ; 160  |#if (defined(NAND2))
                            18356 ; 161  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18357 ; 162  |#define AUDIBLE_ACELP_SR8KHz_GPSPEED 0x000101         
                            18358 ; 163  |#else 
                            18359 ; 164  |#if (defined(NAND3))
                            18360 ; 165  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18361 ; 166  |#define AUDIBLE_ACELP_SR8KHz_GPSPEED 0x000101         
                            18362 ; 167  |#else 
                            18363 ; 168  |#if (defined(NAND4))
                            18364 ; 169  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18365 ; 170  |#define AUDIBLE_ACELP_SR8KHz_GPSPEED 0x000101         
                            18366 ; 171  |#else 
                            18367 ; 172  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18368 ; 173  |#define AUDIBLE_ACELP_SR8KHz_GPSPEED 0x000101         
                            18369 ; 174  |#endif
                            18370 ; 175  |#endif
                            18371 ; 176  |#endif
                            18372 ; 177  |#endif
                            18373 ; 178  |#else 
                            18374 ; 179  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18375 ; 180  |#define AUDIBLE_ACELP_SR8KHz_GPSPEED 0x000101         
                            18376 ; 181  |#endif
                            18377 ; 182  |//--------- 
                            18378 ; 183  |// Changed speed from 18Mhz to 24Mhz stmp10415
                            18379 ; 184  |// stmp10415   was 18              ; FM speed is 18 MHz, which is as low as possible for Steely Dan Tuner in sdk 2.610. In 3.110 we need >22Mhz so we use 24Mhz. 
                            18380 ; 185  |#define FM_SPEED 24 
                            18381 ; 186  |// stmp10415   was 27              ; (27+33)*(24/20) = 72 in sdk2.610.  In sdk 3.110 we use (7+33)*(24/20) = 48.
                            18382 ; 187  |#define FM_PDIV 7  
                            18383 ; 188  |// stmp10415   was  2              ; 72 / (2^2) = 18 MHz in sdk 2.610.    In 3.110 we use 48/2^1 = 24Mhz. 
                            18384 ; 189  |#define FM_DDIV 1  
                            18385 ; 190  |
                            18386 ; 191  |// 1.44V        - Steely Dan spec at 1.35V
                            18387 ; 192  |#define FM_VOLTAGE 0x00000d         
                            18388 ; 193  |// 1.28v
                            18389 ; 194  |#define FM_BOVOLTAGE 0x000800         
                            18390 ; 195  |#if (defined(DEBUG))
                            18391 ; 196  |#if (defined(NAND1))
                            18392 ; 197  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            18393 ; 198  |#define FM_GPSPEED 0x000102         
                            18394 ; 199  |#else 
                            18395 ; 200  |#if (defined(NAND2))
                            18396 ; 201  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            18397 ; 202  |#define FM_GPSPEED 0x000203         
                            18398 ; 203  |#else 
                            18399 ; 204  |#if (defined(NAND3))
                            18400 ; 205  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            18401 ; 206  |#define FM_GPSPEED 0x000203         
                            18402 ; 207  |#else 
                            18403 ; 208  |#if (defined(NAND4))
                            18404 ; 209  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            18405 ; 210  |#define FM_GPSPEED 0x000203         
                            18406 ; 211  |#else 
                            18407 ; 212  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            18408 ; 213  |#define FM_GPSPEED 0x000102         
                            18409 ; 214  |#endif
                            18410 ; 215  |#endif
                            18411 ; 216  |#endif
                            18412 ; 217  |#endif
                            18413 ; 218  |#else 
                            18414 ; 219  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            18415 ; 220  |#define FM_GPSPEED 0x000203         
                            18416 ; 221  |#endif
                            18417 ; 222  |//---------
                            18418 ; 223  |// Increase to 30 MHz to support equalizer
                            18419 ; 224  |#define FM_EQ_SPEED 30  
                            18420 ; 225  |// (17+33)*(24/20) = 60
                            18421 ; 226  |#define FM_EQ_PDIV 17  
                            18422 ; 227  |//  60 / (2^1) = 30 MHz  
                            18423 ; 228  |#define FM_EQ_DDIV 1   
                            18424 ; 229  |
                            18425 ; 230  |// Higher voltages when using equalizer and TA2 STFM1000 to prevent lockup when changing EQ settings rapidly
                            18426 ; 231  |//1.44v  - Steely Dan spec at 1.35V
                            18427 ; 232  |#define FM_EQ_VOLTAGE 0x00000D   
                            18428 ; 233  |//1.31v     
                            18429 ; 234  |#define FM_EQ_BOVOLTAGE 0x000900   
                            18430 ; 235  |
                            18431 ; 236  |#if (defined(DEBUG))
                            18432 ; 237  |#if (defined(NAND1))
                            18433 ; 238  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            18434 ; 239  |#define FM_EQ_GPSPEED 0x000102         
                            18435 ; 240  |#else 
                            18436 ; 241  |#if (defined(NAND2))
                            18437 ; 242  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            18438 ; 243  |#define FM_EQ_GPSPEED 0x000203         
                            18439 ; 244  |#else 
                            18440 ; 245  |#if (defined(NAND3))
                            18441 ; 246  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            18442 ; 247  |#define FM_EQ_GPSPEED 0x000203         
                            18443 ; 248  |#else 
                            18444 ; 249  |#if (defined(NAND4))
                            18445 ; 250  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            18446 ; 251  |#define FM_EQ_GPSPEED 0x000203         
                            18447 ; 252  |#else 
                            18448 ; 253  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            18449 ; 254  |#define FM_EQ_GPSPEED 0x000102         
                            18450 ; 255  |#endif
                            18451 ; 256  |#endif
                            18452 ; 257  |#endif
                            18453 ; 258  |#endif
                            18454 ; 259  |#else 
                            18455 ; 260  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            18456 ; 261  |#define FM_EQ_GPSPEED 0x000203         
                            18457 ; 262  |#endif
                            18458 ; 263  |//---------
                            18459 ; 264  |
                            18460 ; 265  |
                            18461 ; 266  |// Audible Acelp speed is 36 MHz(27.78nS)
                            18462 ; 267  |#define AUDIBLE_ACELP_SR16KHz_SPEED 36            
                            18463 ; 268  |// PLL O/P freq = (33 + PDIV)*(24/20)   = (33+27)*(24/20) = 72MHz
                            18464 ; 269  |#define AUDIBLE_ACELP_SR16KHz_PDIV 27              
                            18465 ; 270  |// DCLK = 60MHz/(2^DDIV) = 36MHz
                            18466 ; 271  |#define AUDIBLE_ACELP_SR16KHz_DDIV 1             
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18467 ; 272  |// 1.37V
                            18468 ; 273  |#define AUDIBLE_ACELP_SR16KHz_VOLTAGE 0x00000B       
                            18469 ; 274  |// 1.28V 
                            18470 ; 275  |#define AUDIBLE_ACELP_SR16KHz_BOVOLTAGE 0x000800       
                            18471 ; 276  |
                            18472 ; 277  |// NAND1     36MHz *  83.3ns = 2.999 -> $000102
                            18473 ; 278  |// NAND2     36MHz * 116.7ns = 4.201 -> $000203
                            18474 ; 279  |// NAND4     36MHz * 133.3ns = 4.788 -> $000203
                            18475 ; 280  |#if (defined(DEBUG))
                            18476 ; 281  |#if (defined(NAND1))
                            18477 ; 282  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18478 ; 283  |#define AUDIBLE_ACELP_SR16KHz_GPSPEED 0x000102         
                            18479 ; 284  |#else 
                            18480 ; 285  |#if (defined(NAND2))
                            18481 ; 286  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18482 ; 287  |#define AUDIBLE_ACELP_SR16KHz_GPSPEED 0x000203         
                            18483 ; 288  |#else 
                            18484 ; 289  |#if (defined(NAND3))
                            18485 ; 290  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18486 ; 291  |#define AUDIBLE_ACELP_SR16KHz_GPSPEED 0x000203         
                            18487 ; 292  |#else 
                            18488 ; 293  |#if (defined(NAND4))
                            18489 ; 294  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18490 ; 295  |#define AUDIBLE_ACELP_SR16KHz_GPSPEED 0x000203         
                            18491 ; 296  |#else 
                            18492 ; 297  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18493 ; 298  |#define AUDIBLE_ACELP_SR16KHz_GPSPEED 0x000102         
                            18494 ; 299  |#endif
                            18495 ; 300  |#endif
                            18496 ; 301  |#endif
                            18497 ; 302  |#endif
                            18498 ; 303  |#else 
                            18499 ; 304  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18500 ; 305  |#define AUDIBLE_ACELP_SR16KHz_GPSPEED 0x000102         
                            18501 ; 306  |#endif
                            18502 ; 307  |//---------   
                            18503 ; 308  |
                            18504 ; 309  |
                            18505 ; 310  |
                            18506 ; 311  |
                            18507 ; 312  |// MP3 speed is 36 MHz  (27.78nS)
                            18508 ; 313  |#define MP3_SPEED 36              
                            18509 ; 314  |// (27+33)*(24/20) = 72
                            18510 ; 315  |#define MP3_PDIV 27              
                            18511 ; 316  |// 72 / (2^1) = 36 MHz
                            18512 ; 317  |#define MP3_DDIV 1               
                            18513 ; 318  |// 1.37v
                            18514 ; 319  |#define MP3_VOLTAGE 0x00000B         
                            18515 ; 320  |// 1.28v
                            18516 ; 321  |#define MP3_BOVOLTAGE 0x000800         
                            18517 ; 322  |
                            18518 ; 323  |// NAND1     36MHz *  83.3ns = 2.999 -> $000102
                            18519 ; 324  |// NAND2     36MHz * 116.7ns = 4.201 -> $000203
                            18520 ; 325  |// NAND4     36MHz * 133.3ns = 4.788 -> $000203
                            18521 ; 326  |#if (defined(DEBUG))
                            18522 ; 327  |#if (defined(NAND1))
                            18523 ; 328  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18524 ; 329  |#define MP3_GPSPEED 0x000102         
                            18525 ; 330  |#else 
                            18526 ; 331  |#if (defined(NAND2))
                            18527 ; 332  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18528 ; 333  |#define MP3_GPSPEED 0x000203         
                            18529 ; 334  |#else 
                            18530 ; 335  |#if (defined(NAND3))
                            18531 ; 336  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18532 ; 337  |#define MP3_GPSPEED 0x000203         
                            18533 ; 338  |#else 
                            18534 ; 339  |#if (defined(NAND4))
                            18535 ; 340  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18536 ; 341  |#define MP3_GPSPEED 0x000203         
                            18537 ; 342  |#else 
                            18538 ; 343  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18539 ; 344  |#define MP3_GPSPEED 0x000102         
                            18540 ; 345  |#endif
                            18541 ; 346  |#endif
                            18542 ; 347  |#endif
                            18543 ; 348  |#endif
                            18544 ; 349  |#else 
                            18545 ; 350  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18546 ; 351  |#define MP3_GPSPEED 0x000102         
                            18547 ; 352  |#endif
                            18548 ; 353  |//---------
                            18549 ; 354  |// ADPCM speed is 36 MHz  (27.78nS)
                            18550 ; 355  |#define ADPCM_SPEED 36              
                            18551 ; 356  |// (27+33)*(24/20) = 72
                            18552 ; 357  |#define ADPCM_PDIV 27              
                            18553 ; 358  |// 72 / (2^1) = 36 MHz
                            18554 ; 359  |#define ADPCM_DDIV 1               
                            18555 ; 360  |// 1.37v
                            18556 ; 361  |#define ADPCM_VOLTAGE 0x00000B         
                            18557 ; 362  |// 1.28v
                            18558 ; 363  |#define ADPCM_BOVOLTAGE 0x000800         
                            18559 ; 364  |
                            18560 ; 365  |// NAND1     36MHz *  83.3ns = 2.999 -> $000102
                            18561 ; 366  |// NAND2     36MHz * 116.7ns = 4.201 -> $000203
                            18562 ; 367  |// NAND3|4   36MHz * 133.3ns = 4.788 -> $000203
                            18563 ; 368  |#if (defined(DEBUG))
                            18564 ; 369  |#if (defined(NAND1))
                            18565 ; 370  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18566 ; 371  |#define ADPCM_GPSPEED 0x000102         
                            18567 ; 372  |#else 
                            18568 ; 373  |#if (defined(NAND2))
                            18569 ; 374  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18570 ; 375  |#define ADPCM_GPSPEED 0x000203         
                            18571 ; 376  |#else 
                            18572 ; 377  |#if (defined(NAND3))
                            18573 ; 378  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18574 ; 379  |#define ADPCM_GPSPEED 0x000203         
                            18575 ; 380  |#else 
                            18576 ; 381  |#if (defined(NAND4))
                            18577 ; 382  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18578 ; 383  |#define ADPCM_GPSPEED 0x000203         
                            18579 ; 384  |#else 
                            18580 ; 385  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18581 ; 386  |#define ADPCM_GPSPEED 0x000102         
                            18582 ; 387  |#endif
                            18583 ; 388  |#endif
                            18584 ; 389  |#endif
                            18585 ; 390  |#endif
                            18586 ; 391  |#else 
                            18587 ; 392  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18588 ; 393  |#define ADPCM_GPSPEED 0x000102         
                            18589 ; 394  |#endif
                            18590 ; 395  |//---------
                            18591 ; 396  |// Mixer use requires a min vddd. Reason for this: 
                            18592 ; 397  |// ************
                            18593 ; 398  |// Stmp00004930: Field failure: Distortion from the mixer. Very worst case 
                            18594 ; 399  |//           conditions (at cold) will cause the ADC to not provide any samples.
                            18595 ; 400  |//           All mixer/adc functions must run VDDD>=1.43V. This includes encoding
                            18596 ; 401  |//           and Fmtuner  operation (uses line-in via mixer) in the SDK. 
                            18597 ; 402  |// ************
                            18598 ; 403  |// same as Idle speed defined above
                            18599 ; 404  |#define MIXER_SPEED IDLE_SPEED      
                            18600 ; 405  |// same as idle case defined above
                            18601 ; 406  |#define MIXER_PDIV IDLE_PDIV       
                            18602 ; 407  |// same as idle case defined above
                            18603 ; 408  |#define MIXER_DDIV IDLE_DDIV       
                            18604 ; 409  |// 1.44v
                            18605 ; 410  |#define MIXER_VOLTAGE 0x00000D         
                            18606 ; 411  |// 1.34v as in the MAX_BOVOLTAGE case below which has same Vddd.
                            18607 ; 412  |#define MIXER_BOVOLTAGE 0x000A00         
                            18608 ; 413  |
                            18609 ; 414  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            18610 ; 415  |#define MIXER_GPSPEED IDLE_GPSPEED    
                            18611 ; 416  |//---------
                            18612 ; 417  |// ADCBASE speed is 36 MHz  (27.78nS)
                            18613 ; 418  |#define ADCBASE_SPEED 36              
                            18614 ; 419  |// (27+33)*(24/20) = 72
                            18615 ; 420  |#define ADCBASE_PDIV 27              
                            18616 ; 421  |// 72 / (2^1) = 36 MHz
                            18617 ; 422  |#define ADCBASE_DDIV 1               
                            18618 ; 423  |// 1.44v Min vddd voltage to operate high res ADC @ low temp.
                            18619 ; 424  |#define ADCBASE_VOLTAGE 0x00000D         
                            18620 ; 425  |// 1.34v Voltages same as max case. Rest matches ADPCM case.
                            18621 ; 426  |#define ADCBASE_BOVOLTAGE 0x000A00         
                            18622 ; 427  |
                            18623 ; 428  |// NAND1     36MHz *  83.3ns = 2.999 -> $000102
                            18624 ; 429  |// NAND2     36MHz * 116.7ns = 4.201 -> $000203
                            18625 ; 430  |// NAND4     36MHz * 133.3ns = 4.788 -> $000203
                            18626 ; 431  |#if (defined(DEBUG))
                            18627 ; 432  |#if (defined(NAND1))
                            18628 ; 433  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18629 ; 434  |#define ADCBASE_GPSPEED 0x000102         
                            18630 ; 435  |#else 
                            18631 ; 436  |#if (defined(NAND2))
                            18632 ; 437  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18633 ; 438  |#define ADCBASE_GPSPEED 0x000203         
                            18634 ; 439  |#else 
                            18635 ; 440  |#if (defined(NAND3))
                            18636 ; 441  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18637 ; 442  |#define ADCBASE_GPSPEED 0x000203         
                            18638 ; 443  |#else 
                            18639 ; 444  |#if (defined(NAND4))
                            18640 ; 445  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18641 ; 446  |#define ADCBASE_GPSPEED 0x000203         
                            18642 ; 447  |#else 
                            18643 ; 448  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18644 ; 449  |#define ADCBASE_GPSPEED 0x000102         
                            18645 ; 450  |#endif
                            18646 ; 451  |#endif
                            18647 ; 452  |#endif
                            18648 ; 453  |#endif
                            18649 ; 454  |#else 
                            18650 ; 455  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            18651 ; 456  |#define ADCBASE_GPSPEED 0x000102         
                            18652 ; 457  |#endif
                            18653 ; 458  |//---------
                            18654 ; 459  |// MAX speed is 48 MHz (20.83ns)
                            18655 ; 460  |#define MAX_SPEED 48              
                            18656 ; 461  |// (7+33)*(24/20) = 48
                            18657 ; 462  |#define MAX_PDIV 7               
                            18658 ; 463  |// 47.9232 / (2^0) = 48 MHz
                            18659 ; 464  |#define MAX_DDIV 0               
                            18660 ; 465  |// 1.44v
                            18661 ; 466  |#define MAX_VOLTAGE 0x00000D         
                            18662 ; 467  |// 1.34v
                            18663 ; 468  |#define MAX_BOVOLTAGE 0x000A00         
                            18664 ; 469  |
                            18665 ; 470  |// NAND1     48MHz *  83.3ns = 3.998 -> $000202 -> $000203 required (setup needs 3dclk)
                            18666 ; 471  |// NAND2     48MHz * 116.7ns = 5.602 -> $000303
                            18667 ; 472  |// NAND3|4   48MHz * 133.3ns = 6.398 -> $000304
                            18668 ; 473  |#if (defined(DEBUG))
                            18669 ; 474  |#if (defined(NAND1))
                            18670 ; 475  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18671 ; 476  |#define MAX_GPSPEED 0x000203         
                            18672 ; 477  |#else 
                            18673 ; 478  |#if (defined(NAND2))
                            18674 ; 479  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 3 for TDS
                            18675 ; 480  |#define MAX_GPSPEED 0x000303         
                            18676 ; 481  |#else 
                            18677 ; 482  |#if (defined(NAND3))
                            18678 ; 483  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 4 for TDS
                            18679 ; 484  |#define MAX_GPSPEED 0x000304         
                            18680 ; 485  |#else 
                            18681 ; 486  |#if (defined(NAND4))
                            18682 ; 487  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 4 for TDS
                            18683 ; 488  |#define MAX_GPSPEED 0x000304         
                            18684 ; 489  |#else 
                            18685 ; 490  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18686 ; 491  |#define MAX_GPSPEED 0x000203         
                            18687 ; 492  |#endif
                            18688 ; 493  |#endif
                            18689 ; 494  |#endif
                            18690 ; 495  |#endif
                            18691 ; 496  |#else 
                            18692 ; 497  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18693 ; 498  |#define MAX_GPSPEED 0x000203         
                            18694 ; 499  |#endif
                            18695 ; 500  |//---------
                            18696 ; 501  |// WMA speed is 60MHz   (16.67nS)
                            18697 ; 502  |#define WMA_SPEED 60              
                            18698 ; 503  |// (17+33)*(24/20) = 60
                            18699 ; 504  |#define WMA_PDIV 17              
                            18700 ; 505  |// 60 / (2^0) = 60 MHz
                            18701 ; 506  |#define WMA_DDIV 0               
                            18702 ; 507  |// 1.63V
                            18703 ; 508  |#define WMA_VOLTAGE 0x000013         
                            18704 ; 509  |// 1.54V
                            18705 ; 510  |#define WMA_BOVOLTAGE 0x001000         
                            18706 ; 511  |
                            18707 ; 512  |// Matching values for MSC (see note above for IDLE_GPSPEED)
                            18708 ; 513  |#if (defined(DEBUG))
                            18709 ; 514  |#if (defined(NAND1))
                            18710 ; 515  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18711 ; 516  |#define WMA_GPSPEED 0x000203         
                            18712 ; 517  |#else 
                            18713 ; 518  |#if (defined(NAND2))
                            18714 ; 519  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 4 for TDS
                            18715 ; 520  |#define WMA_GPSPEED 0x000304         
                            18716 ; 521  |#else 
                            18717 ; 522  |#if (defined(NAND3))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18718 ; 523  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 5 for TDS
                            18719 ; 524  |#define WMA_GPSPEED 0x000305         
                            18720 ; 525  |#else 
                            18721 ; 526  |#if (defined(NAND4))
                            18722 ; 527  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 5 for TDS
                            18723 ; 528  |#define WMA_GPSPEED 0x000305         
                            18724 ; 529  |#else 
                            18725 ; 530  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18726 ; 531  |#define WMA_GPSPEED 0x000203         
                            18727 ; 532  |#endif
                            18728 ; 533  |#endif
                            18729 ; 534  |#endif
                            18730 ; 535  |#endif
                            18731 ; 536  |#else 
                            18732 ; 537  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            18733 ; 538  |#define WMA_GPSPEED 0x000203         
                            18734 ; 539  |#endif
                            18735 ; 540  |//---------
                            18736 ; 541  |// MP3ENCODE speed is 65MHz   (15.35nS) but see next line
                            18737 ; 542  |#define MP3ENCODE_SPEED 65              
                            18738 ; 543  |// (22+33)*(24/20) = 65; but   (20+33)*(24/20)=63.6 (T=15.723 ns)
                            18739 ; 544  |#define MP3ENCODE_PDIV 20              
                            18740 ; 545  |// 65.1264 / (2^0) = 65 MHz;   63.6 / 2^0 = 63.6 MHz
                            18741 ; 546  |#define MP3ENCODE_DDIV 0               
                            18742 ; 547  |// 1.82V
                            18743 ; 548  |#define MP3ENCODE_VOLTAGE 0x000019         
                            18744 ; 549  |// 1.76 v 
                            18745 ; 550  |#define MP3ENCODE_BOVOLTAGE 0x001700         
                            18746 ; 551  |
                            18747 ; 552  |// NAND1     65MHz *  83.3ns = 5.415 -> $000303
                            18748 ; 553  |// NAND2     65MHz * 116.7ns = 7.586 -> $000404
                            18749 ; 554  |// NAND3|4   65MHz * 133.3ns = 8.665 -> $000405
                            18750 ; 555  |#if (defined(DEBUG))
                            18751 ; 556  |#if (defined(NAND1))
                            18752 ; 557  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 3 for TDS
                            18753 ; 558  |#define MP3ENCODE_GPSPEED 0x000303         
                            18754 ; 559  |#else 
                            18755 ; 560  |#if (defined(NAND2))
                            18756 ; 561  |// HW_GPFLASH_TIMING2R - 4dclk/access time for TDH and 4 for TDS
                            18757 ; 562  |#define MP3ENCODE_GPSPEED 0x000404         
                            18758 ; 563  |#else 
                            18759 ; 564  |#if (defined(NAND3))
                            18760 ; 565  |// HW_GPFLASH_TIMING2R - 4dclk/access time for TDH and 5 for TDS
                            18761 ; 566  |#define MP3ENCODE_GPSPEED 0x000405         
                            18762 ; 567  |#else 
                            18763 ; 568  |#if (defined(NAND4))
                            18764 ; 569  |// HW_GPFLASH_TIMING2R - 4dclk/access time for TDH and 5 for TDS
                            18765 ; 570  |#define MP3ENCODE_GPSPEED 0x000405         
                            18766 ; 571  |#else 
                            18767 ; 572  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 3 for TDS
                            18768 ; 573  |#define MP3ENCODE_GPSPEED 0x000303         
                            18769 ; 574  |#endif
                            18770 ; 575  |#endif
                            18771 ; 576  |#endif
                            18772 ; 577  |#endif
                            18773 ; 578  |#else 
                            18774 ; 579  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 3 for TDS
                            18775 ; 580  |#define MP3ENCODE_GPSPEED 0x000303         
                            18776 ; 581  |#endif
                            18777 ; 582  |//---------
                            18778 ; 583  |// x:HW_GPFLASH_TIMING2R 
                            18779 ; 584  |//      TDS = 25ns Min data setup time. Note usbmsc says 45 for min. 20ns is a typical nand flash.
                            18780 ; 585  |//      TDH = 15ns Min data hold  time. Note usbmsc says 30 for min. But has min (tds+tdh)>50ns.
                            18781 ; 586  |//      TDS + TDH must be > 50 nS
                            18782 ; 587  |// PEAK speed is 75.6MHz T=13.2275 ns  
                            18783 ; 588  |#define PEAK_SPEED 75              
                            18784 ; 589  |// (29+33)*(24/20) = 75.6          
                            18785 ; 590  |#define PEAK_PDIV 30              
                            18786 ; 591  |// 75.6 / (2^0) = 75.6 MHz     
                            18787 ; 592  |#define PEAK_DDIV 0               
                            18788 ; 593  |// 1.92V 
                            18789 ; 594  |#define PEAK_VOLTAGE 0x00001c         
                            18790 ; 595  |// 1.82V                        
                            18791 ; 596  |#define PEAK_BOVOLTAGE 0x001900         
                            18792 ; 597  |
                            18793 ; 598  |// DEBUG builds have different setup&hold due to engineering board's capacitance. RETAIL BUILDS USE ONE VALUE. 
                            18794 ; 599  |// ns times below are from usbmsc's total (tds + tdh) = setup+hold. USBMSC runs at 60 MHz.
                            18795 ; 600  |// NAND1     75.6 MHz *  83.3ns = 6.247 DCLKs so 7 -> $000304      
                            18796 ; 601  |// NAND2     75.6 MHz * 116.7ns = 8.823 DCLKs so 9 -> $000405      
                            18797 ; 602  |// NAND3|4   75.6 MHz * 133.3ns = 10.078 DCLKs     -> $000505 If issues try 000506 here (TDS=6).     
                            18798 ; 603  |#if (defined(DEBUG))
                            18799 ; 604  |#if (defined(NAND1))
                            18800 ; 605  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 4 for TDS
                            18801 ; 606  |#define PEAK_GPSPEED 0x000304         
                            18802 ; 607  |#else 
                            18803 ; 608  |#if (defined(NAND2))
                            18804 ; 609  |// HW_GPFLASH_TIMING2R - 4dclk/access time for TDH and 5 for TDS; nand1 settings work on multinand if good layout.
                            18805 ; 610  |#define PEAK_GPSPEED 0x000405         
                            18806 ; 611  |#else 
                            18807 ; 612  |#if (defined(NAND3))
                            18808 ; 613  |// HW_GPFLASH_TIMING2R - 5dclk/access time for TDH and 5 for TDS
                            18809 ; 614  |#define PEAK_GPSPEED 0x000505         
                            18810 ; 615  |#else 
                            18811 ; 616  |#if (defined(NAND4))
                            18812 ; 617  |// HW_GPFLASH_TIMING2R - 5dclk/access time for TDH and 5 for TDS
                            18813 ; 618  |#define PEAK_GPSPEED 0x000505         
                            18814 ; 619  |#else 
                            18815 ; 620  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 4 for TDS
                            18816 ; 621  |#define PEAK_GPSPEED 0x000304         
                            18817 ; 622  |#endif
                            18818 ; 623  |#endif
                            18819 ; 624  |#endif
                            18820 ; 625  |#endif
                            18821 ; 626  |#else 
                            18822 ; 627  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 4 for TDS
                            18823 ; 628  |#define PEAK_GPSPEED 0x000304         
                            18824 ; 629  |#endif
                            18825 ; 630  |
                            18826 ; 631  |//------------------------------------------
                            18827 ; 632  |//> 
                            18828 ; 633  |// Multi-Client Clock Speed Adjustment API:  
                            18829 ; 634  |// Prototypes here are exported from sysspeed.inc to sysspeed.h by incToC util
                            18830 ; 635  |_reentrant INT SysGetSpeed(void);
                            18831 ; 636  |//             or asm input params: none
                            18832 ; 637  |//             Returns the CurrentSpeedIndex
                            18833 ; 638  |_reentrant INT SysSpeedIncrease(int SpeedIndex, int clockUserId); 
                            18834 ; 639  |//             or asm input parms:            x1,              y0
                            18835 ; 640  |//       Returns resulting SpeedIndex from SysGetSpeed
                            18836 ; 641  |_reentrant INT SysSpeedClockFree(int clockUserId);  
                            18837 ; 642  |//                   or asm input:              y0
                            18838 ; 643  |//       Returns resulting SpeedIndex from SysGetSpeed
                            18839 ; 644  |// Generally, new clock adjusting modules must insert a bit equate below 
                            18840 ; 645  |// (speed ordered) and use the API calls:
                            18841 ; 646  |// SysSpeedIncrease(SpeedIndex, MY_BIT) and SysSpeedClockFree(MY_BIT) 
                            18842 ; 647  |// passing in the client's clockUserId below for these calls
                            18843 ; 648  |// which manipulate a corresponding speed client bit in clockUserFlag.
                            18844 ; 649  |// SysSpeedClockFree(MY_BIT) reduces clock speed to that of highest active client
                            18845 ; 650  |// or IDLE. Each bit here is a client active indicator managed via this speed API.
                            18846 ; 651  |// clockUserFlag  dc      0      ; Module private var defined in sysspeed.asm
                            18847 ; 652  |// ORDER MUST BE LOWEST TO HIGHEST FREQ so insert your new speed client ID and renumber.
                            18848 ; 653  |// Exec turns up the clock on button events. 
                            18849 ; 654  |#define SPEED_CLIENT_EXECUTIVE 0 
                            18850 ; 655  |#define SPEED_CLIENT_AUDIBLE_MP3 1
                            18851 ; 656  |#define SPEED_CLIENT_STFM_DEC 2
                            18852 ; 657  |#define SPEED_CLIENT_AUDIBLE_ACELP 3
                            18853 ; 658  |#define SPEED_CLIENT_STFM_EQ 4
                            18854 ; 659  |#define SPEED_CLIENT_MP3_DEC 5
                            18855 ; 660  |#define SPEED_CLIENT_ADPCM_DEC 6
                            18856 ; 661  |#define SPEED_CLIENT_ADPCM_ENC 7
                            18857 ; 662  |#define SPEED_CLIENT_MIXER 8
                            18858 ; 663  |#define SPEED_CLIENT_MP3_DEC_SYNC 9
                            18859 ; 664  |// Music and voice parser share this client
                            18860 ; 665  |#define SPEED_CLIENT_PARSER 10 
                            18861 ; 666  |// Same speed as parser.asm or higher. C client. Rename if using.
                            18862 ; 667  |#define SPEED_CLIENT_MENU_WOW 11 
                            18863 ; 668  |#define SPEED_CLIENT_MVIDEO 12
                            18864 ; 669  |#define SPEED_CLIENT_METADATA 13
                            18865 ; 670  |#define SPEED_CLIENT_PLAYERLIB 14
                            18866 ; 671  |#define SPEED_CLIENT_PLAYLIST1 15 
                            18867 ; 672  |#define SPEED_CLIENT_WMA_DEC 16
                            18868 ; 673  |// Move line when used to maintain speed order
                            18869 ; 674  |#define SPEED_CLIENT_MP3_ENC 17 
                            18870 ; 675  |#define SPEED_CLIENT_JPEG_DEC 18 
                            18871 ; 676  |// change value to match high bit pos above
                            18872 ; 677  |#define SPEED_CLIENT_HIGHEST_USER 18 
                            18873 ; 678  |
                            18874 ; 679  |// Above equates are exported to incToC utility generated sysspeed.h file.
                            18875 ; 680  |// <
                            18876 ; 681  |//-----------------------------------------
                            18877 ; 682  |
                            18878 ; 683  |
                            18879 ; 684  |#endif // IF (!@def(SYSSPEED_INC))
                            18880 ; 685  |
                            18881 ; 686  |
                            18882 ; 687  |
                            18883 
                            18885 
                            18886 ; 20   |#endif
                            18887 ; 21   |
                            18888 ; 22   |#ifdef FUNCLET
                            18889 ; 23   | #pragma asm
                            18890     extern SysCallFunclet
                            18891 ; 25   | #pragma endasm
                            18892 ; 26   |#endif
                            18893 ; 27   |
                            18894 ; 28   |_reentrant void STFM1000I2CConfigureRegister(WORD I2C_Sub_Addr, DWORD DataOut);
                            18895 ; 29   |_reentrant INT STFM1000I2CReset(WORD mode, WORD ClockDiv);
                            18896 ; 30   |_reentrant INT STFM1000I2CWriteTunerRegister(WORD I2C_Sub_Addr, DWORD DataOut);
                            18897 ; 31   |extern _reentrant INT SysGetSpeed(void);
                            18898 ; 32   |
                            18899 ; 33   |static void do_nothing(void) {      // This function is here to make the dang FUNCLET, below, work right.
                            18900 
P:0000                      18901         org     p,".ptextstfm1000powerdown":
                            18905 Fdo_nothing:
                            18906 
                            18907 ; 34   |                                    // Without this here, the compiler switches back to ".ptext..." as soon
                            18908 ; 35   |                                    // as it hits some code.  With this here, the "org p,"SYSFUNCLET_..._P"
                            18909 ; 36   |                                    // stays in effect.
                            18910 ; 37   |                                    // The function is declared "static" so that it's invisible outside this file.
                            18911 ; 38   |  return;
                            18912 ; 39   |}
                            18913 
P:0000 00000C         4    418915         rts
                            18917 
                            18918 ; 40   |
                            18919 ; 41   |
                            18920 ; 42   |#ifdef FUNCLET
                            18921 ; 43   |    #pragma asm
P:0000                      18922         org p,".stfm1000_SYS":
                            18923         global FSTFM1000TunerSafePowerDown        
                            18924         FSTFM1000TunerSafePowerDown:
                            18925 
                            18930 
                            18931         ;If using funclet, function will be executed via funclet kernel
                            18932         CallFunclet2 RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN
P:0000 0D0082         4    418932     jsr       $82
P:0001 000424               18932     DC       RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN  ; 1 word
                            18933 
P:0000                      18934         org p,"SYSFUNCLET_TUNER_SAFE_POWER_DOWN_P":
P:0000 000424               18935         dc      RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN
                            18936 ; 58   |    #pragma endasm
                            18937 ; 59   |_reentrant INT STFM1000TunerSafePowerDown_Funclet(void)
                            18938 ; 60   |#else
                            18939 ; 61   |_reentrant INT STFM1000TunerSafePowerDown(void)
                            18940 ; 62   |#endif
                            18941 ; 63   |{
                            18942 
                            18947 FSTFM1000TunerSafePowerDown_Funclet:
P:0001 055F7C         2    218948         movec   ssh,y:(r7)+
                            18951 
                            18952 ; 64   |    /***************************************************************************************************
                            18953 ; 65   |     *  We have to disable the Steely Dan to pull down the I2S pins in order to reboot the system
                            18954 ; 66   |     *  when detected the USB connected. (The defect stmp9124)
                            18955 ; 67   |     *  The following should be the values of registers which should ensure that the I2S pads are in hi-z.
                            18956 ; 68   |     *  pad_pd10ktst_oeb[0] = 1 (in initialization6 reg)
                            18957 ; 69   |     *  pad_pd10ktst_oeb[1] = 1(in initialization6 reg)
                            18958 ; 70   |     *  tst_clk_out = 0(in FM datapath reg)
                            18959 ; 71   |     *  clk1_reg[15] = 0(in clk1 reg)
                            18960 ; 72   |     *  clk1_reg[19] = 0(in clk1 reg)
                            18961 ; 73   |     *  Then we set Steely Dan as low power mode 
                            18962 ; 74   |     ***************************************************************************************************/
                            18963 ; 75   |
                            18964 ; 76   |    STFM1000I2CConfigureRegister(INITIALIZATION6_REG_ADDR,  //0x24,          // Init6,
                            18965 ; 77   |                                 0xcbfe0000);   // 0x0000fecb);
                            18966 
P:0002 57F400 000024  3    518968         move    #>36,b
P:0004 56F400 0000CB  3    818969         move    #>$CB,a
P:0006 50F400 FE0000  3   1118970         move    #$FE0000,a0
P:0008 0BF080 rrrrrr  6   1718971         jsr     FSTFM1000I2CConfigureRegister
                            18972 
                            18973 ; 78   |    
                            18974 ; 79   |    STFM1000I2CConfigureRegister(DATAPATH_REG_ADDR, //0x5c,          // datapath,
                            18975 ; 80   |                                 0x10020100);   // 0x00010210
                            18976 
P:000A 57F400 00005C  3   2018978         move    #>92,b
P:000C 56F400 000010  3   2318979         move    #>$10,a
P:000E 50F400 020100  3   2618980         move    #$20100,a0
P:0010 0BF080 rrrrrr  6   3218981         jsr     FSTFM1000I2CConfigureRegister
                            18982 
                            18983 ; 81   |    
                            18984 ; 82   |    STFM1000I2CConfigureRegister(REF_REG_ADDR,  //0x28,          // REF_REG_ADDR,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18985 ; 83   |                                 0x00000000);          
                            18986 
P:0012 200013         2   3418988         clr     a   
P:0013 57F400 000028  3   3718989         move    #>40,b
P:0015 0BF080 rrrrrr  6   4318990         jsr     FSTFM1000I2CConfigureRegister
                            18991 
                            18992 ; 84   |    
                            18993 ; 85   |    STFM1000I2CConfigureRegister(LNA_REG_ADDR,  //0x2C,          // LNA_REG_ADDR,
                            18994 ; 86   |                                 0x00000000);   
                            18995 
P:0017 200013         2   4518997         clr     a   
P:0018 57F400 00002C  3   4818998         move    #>44,b
P:001A 0BF080 rrrrrr  6   5418999         jsr     FSTFM1000I2CConfigureRegister
                            19000 
                            19001 ; 87   |        
                            19002 ; 88   |    STFM1000I2CConfigureRegister(MIXFILT_REG_ADDR,  //0x30,          // MIXFILT_REG_ADDR,
                            19003 ; 89   |                                 0x00000000); 
                            19004 
P:001C 200013         2   5619006         clr     a   
P:001D 57F400 000030  3   5919007         move    #>$30,b
P:001F 0BF080 rrrrrr  6   6519008         jsr     FSTFM1000I2CConfigureRegister
                            19009 
                            19010 ; 90   |  
                            19011 ; 91   |    STFM1000I2CConfigureRegister(CLK1_REG_ADDR, //0x34,          // CLK1_REG_ADDR,
                            19012 ; 92   |                                 0x00000003); //0x00004003);   // Set bit 22, 24,25 to reduce off state current by 200uA. sdk 2.610 release val was 0x0 but this is enhanced.
                            19013 
P:0021 200013         2   6719015         clr     a   
P:0022 280300         2   6919016         move    #3,a0
P:0023 57F400 000034  3   7219017         move    #>52,b
P:0025 0BF080 rrrrrr  6   7819018         jsr     FSTFM1000I2CConfigureRegister
                            19019 
                            19020 ; 93   |  
                            19021 ; 94   |    STFM1000I2CConfigureRegister(CLK2_REG_ADDR, //0x38,          // CLK2_REG_ADDR,
                            19022 ; 95   |                                 0x00000000);   
                            19023 
P:0027 200013         2   8019025         clr     a   
P:0028 57F400 000038  3   8319026         move    #>$38,b
P:002A 0BF080 rrrrrr  6   8919027         jsr     FSTFM1000I2CConfigureRegister
                            19028 
                            19029 ; 96   |        
                            19030 ; 97   |    STFM1000I2CConfigureRegister(ADC_REG_ADDR,  //0x3C,          // ADC_REG_ADDR,
                            19031 ; 98   |                                 0x00000000);   
                            19032 
P:002C 57F400 00003C  3   9219034         move    #>$3C,b
P:002E 200013         2   9419035         clr     a   
P:002F 0BF080 rrrrrr  6  10019036         jsr     FSTFM1000I2CConfigureRegister
                            19037 
                            19038 ; 99   |    return (0);                                           
                            19039 
P:0031 200013         2  10219041         clr     a   
                            19042 
                            19043 ; 100  |}
                            19044 
P:0032 05FF7C         4  10619046         movec   y:-(r7),ssh
P:0033 000000         2  10819049         nop
P:0034 00000C         4  11219050         rts
                            19052 
                            19053 ; 101  |
                            19054 ; 102  |_reentrant void STFM1000I2CConfigureRegister(WORD I2C_Sub_Addr, DWORD DataOut)
                            19055 ; 103  |{
                            19056 
                            19061 FSTFM1000I2CConfigureRegister:
P:0035 055F7C         2  11419062         movec   ssh,y:(r7)+
P:0036 3F0400         2  11619065         move    #4,n7
P:0037 000000         2  11819066         nop
P:0038 204F00         2  12019067         move    (r7)+n7
                            19077 
                            19078 ; 104  |    INT RetCode; 
                            19079 ; 105  |    INT wTriesCount = 0;
                            19080 
P:0039 77F400 FFFFFD  3  12319082         move    #-3,n7
P:003B 205F00         2  12519083         move    (r7)+
P:003C 5C6F00         4  12919085         move    a1,y:(r7+n7)
P:003D 205700         2  13119086         move    (r7)-
P:003E 586F00         4  13519088         move    a0,y:(r7+n7)
P:003F 77F400 FFFFFC  3  13819091         move    #-4,n7
P:0041 000000         2  14019092         nop
P:0042 5D6F00         4  14419093         move    b1,y:(r7+n7)
P:0043 200013         2  14619096         clr     a   
                            19098 
                            19099 ; 106  |    do{
                            19100 
P:0044 045FA0         2  14819102 L3:     movec   m0,n7
P:0045 000000         2  15019103         nop
P:0046 5C6F00         4  15419104         move    a1,y:(r7+n7)
P:0047 77F400 FFFFFC  3  15719107         move    #-4,n7
P:0049 000000         2  15919108         nop
P:004A 5FEF00         4  16319109         move    y:(r7+n7),b
P:004B 77F400 FFFFFD  3  16619112         move    #-3,n7
P:004D 205F00         2  16819113         move    (r7)+
P:004E 5EEF00         4  17219115         move    y:(r7+n7),a
P:004F 205700         2  17419116         move    (r7)-
P:0050 58EF00         4  17819118         move    y:(r7+n7),a0
                            19121 
                            19122 ; 107  |     
                            19123 ; 108  |        RetCode = STFM1000I2CWriteTunerRegister(I2C_Sub_Addr,// Register addr
                            19124 ; 109  |                                                DataOut      // Data to set the register
                            19125 ; 110  |                                                );
                            19126 
P:0051 0BF080 rrrrrr  6  18419128         jsr     FSTFM1000I2CWriteTunerRegister
P:0053 200009         2  18619133         tfr     a,b
                            19135 
                            19136 ; 111  |       if(0 != RetCode)
                            19137 
P:0054 200003         2  18819139         tst     a
P:0055 0AF0AA rrrrrr  6  19419140         jeq     L4
                            19141 
                            19142 ; 112  |       {
                            19143 ; 113  |           RetCode = STFM1000I2CReset(0,0);
                            19144 
P:0057 200013         2  19619146         clr     a   
P:0058 20001B         2  19819147         clr     b   
P:0059 0BF080 rrrrrr  6  20419149         jsr     FSTFM1000I2CReset
P:005B 200009         2  20619150         tfr     a,b
                            19152 
                            19153 ; 114  |       }
                            19154 ; 115  |       else
                            19155 ; 116  |       { 
                            19156 ; 117  |            break;
                            19157 ; 118  |       }
                            19158 ; 119  |    }while(++wTriesCount < MAX_I2C_WRITE_TRIES);
                            19159 
P:005C 045FA0         2  20819161         movec   m0,n7
P:005D 000000         2  21019162         nop
P:005E 5EEF00         4  21419163         move    y:(r7+n7),a
P:005F 47F400 000001  3  21719164         move    #>1,y1
P:0061 200070         2  21919165         add     y1,a
P:0062 45F400 000006  3  22219168         move    #>6,x1
P:0064 200065         2  22419169         cmp     x1,a
P:0065 0AF0A9 rrrrrr  6  23019170         jlt     L3
                            19171 
                            19172 ; 120  |    if(RetCode != 0)
                            19173 
P:0067 20000B         2  23219175 L4:     tst     b
P:0068 0AF0AA rrrrrr  6  23819176         jeq     L5
                            19177 
                            19178 ; 121  |    {
                            19179 ; 122  |       SystemHalt();
                            19180 
                            19182 
                            19183 ; Start __asm() call number 1
                            19185  error
P:006A 000200         4  24219185     debug
                            19186 ; End   __asm() call number 1
                            19187 
                            19188 ; 123  |    }
                            19189 
                            19191 L5:
                            19192 
                            19193 ; 124  |    
                            19194 ; 125  |}    
                            19195 
P:006B 77F400 FFFFFB  3  24519197         move    #-5,n7
P:006D 000000         2  24719198         nop
P:006E 05EF7C         4  25119199         movec   y:(r7+n7),ssh
P:006F 204F00         2  25319201         move    (r7)+n7
P:0070 00000C         4  25719203         rts
                            19209 
                            19210 ; 126  |
                            19211 ; 127  |_reentrant INT STFM1000I2CWriteTunerRegister(WORD I2C_Sub_Addr, DWORD DataOut)
                            19212 ; 128  |{        
                            19213 
                            19291 FSTFM1000I2CWriteTunerRegister:
P:0071 3F0300         2  25919292         move    #3,n7
P:0072 000000         2  26119293         nop
P:0073 204F00         2  26319294         move    (r7)+n7
                            19304 
                            19305 ; 129  |    DWORD_type MyData;
                            19306 ; 130  |    i2cdata_type i2cdata;       
                            19307 ; 131  |    INT cnt;
                            19308 
P:0074 21A700         2  26519310         move    b1,y1
                            19313 
                            19314 ; 132  |    MyData.D = DataOut;
                            19315 
P:0075 77F400 FFFFFE  3  26819317         move    #-2,n7
P:0077 205F00         2  27019318         move    (r7)+
P:0078 5C6F00         4  27419320         move    a1,y:(r7+n7)
P:0079 205700         2  27619321         move    (r7)-
P:007A 586F00         4  28019323         move    a0,y:(r7+n7)
                            19324 
                            19325 ; 133  |    for(cnt = 0; (0 != HW_I2CCSR.B.BUSY); cnt++) 
                            19326 
P:007B 200013         2  28219328         clr     a   
P:007C 57F400 002000  3  28519331         move    #$2000,b
P:007E 46F400 000001  3  28819332         move    #>1,y0
P:0080 0AF080 rrrrrr  6  29419333         jmp     L19
                            19334 
                            19335 ; 134  |    {    
                            19336 ; 135  |        //SysWaitOnEvent(0,0,0);       // let kernel spin once
                            19337 ; 136  |        if (TIMEOUT_COUNT <= cnt) return(-1);
                            19338 
P:0082 20000D         2  29619340 L18:    cmp     a,b
P:0083 0AF0AF rrrrrr  6  30219341         jle     L21
P:0085 200050         2  30419343         add     y0,a
P:0086 0AA7A2 rrrrrr  6  31019344 L19:    jset    #2,x:<<$FFE7,L18
                            19345 
                            19346 ; 137  |    } 
                            19347 ; 138  |
                            19348 ; 139  |    i2cdata.B.BYTE0 = 0xC0;     
                            19349 
P:0088 77F400 FFFFFD  3  31319351         move    #-3,n7
P:008A 000000         2  31519352         nop
P:008B 5FEF00         4  31919353         move    y:(r7+n7),b
P:008C 46F400 00FFFF  3  32219354         move    #$FFFF,y0
P:008E 20005E         2  32419355         and     y0,b
P:008F 26C000         2  32619356         move    #<$C0,y0
P:0090 20005A         2  32819357         or      y0,b
P:0091 5D6F00         4  33219358         move    b1,y:(r7+n7)
                            19359 
                            19360 ; 140  |    i2cdata.B.BYTE1 = I2C_Sub_Addr;  
                            19361 
P:0092 200079         2  33419363         tfr     y1,b
P:0093 5EEF00         4  33819364         move    y:(r7+n7),a
P:0094 44F400 FF00FF  3  34119365         move    #$FF00FF,x0
P:0096 200046         2  34319366         and     x0,a
P:0097 44F400 0000FF  3  34619367         move    #>$FF,x0
P:0099 20004E         2  34819368         and     x0,b
P:009A 21A400         2  35019369         move    b1,x0
P:009B 0110D8         2  35219370         mpy     x0,#16,b
P:009C 212400         2  35419371         move    b0,x0
P:009D 200042         2  35619372         or      x0,a
P:009E 5C6F00         4  36019373         move    a1,y:(r7+n7)
                            19376 
                            19377 ; 141  |    i2cdata.B.BYTE2 = MyData.U.W0;  // First byte to write (in LSB of word) 
                            19378 
P:009F 045FA0         2  36219380         movec   m0,n7
P:00A0 000000         2  36419381         nop
P:00A1 5EEF00         4  36819382         move    y:(r7+n7),a
P:00A2 77F400 FFFFFD  3  37119383         move    #-3,n7
P:00A4 000000         2  37319384         nop
P:00A5 5FEF00         4  37719385         move    y:(r7+n7),b
P:00A6 46F400 FFFF00  3  38019386         move    #$FFFF00,y0
P:00A8 20005E         2  38219387         and     y0,b
P:00A9 46F400 0000FF  3  38519388         move    #>$FF,y0
P:00AB 200056         2  38719389         and     y0,a
P:00AC 218600         2  38919390         move    a1,y0
P:00AD 20005A         2  39119391         or      y0,b
P:00AE 5D6F00         4  39519392         move    b1,y:(r7+n7)
                            19393 
                            19394 ; 142  |    HW_I2CDAT.U = i2cdata.U; 
                            19395 
P:00AF 08EFE6         6  40119397         movep   y:(r7+n7),x:<<$FFE6
                            19398 
                            19399 ; 143  |       
                            19400 ; 144  |    HW_I2CCSR.B.TREQ = 1;       // Master transaction request - generate start condition    
                            19401 
P:00B0 0AA72B         4  40519403         bset    #11,x:<<$FFE7
                            19404 
                            19405 ; 145  |    HW_I2CCSR.B.TREQ = 0;       // and transmit Slave Device Write addres
                            19406 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00B1 0AA70B         4  40919408         bclr    #11,x:<<$FFE7
                            19409 
                            19410 ; 146  |    
                            19411 ; 147  |    for(cnt = 0; (1 != HW_I2CCSR.B.TUFL); cnt++)                                  
                            19412 
P:00B2 20001B         2  41119414         clr     b   
P:00B3 0AF080 rrrrrr  6  41719418         jmp     L23
                            19419 
                            19420 ; 148  |    {    
                            19421 ; 149  |        //SysWaitOnEvent(0,0,0);       // let kernel spin once
                            19422 ; 150  |        if (TIMEOUT_COUNT <= cnt) return(-1);
                            19423 
P:00B5 56F400 002000  3  42019425 L20:    move    #$2000,a
P:00B7 200005         2  42219426         cmp     b,a
P:00B8 0AF0A7 rrrrrr  6  42819427         jgt     L22
P:00BA 56F400 FFFFFF  3  43119428 L21:    move    #>-1,a
P:00BC 0AF080 rrrrrr  6  43719429         jmp     L27
                            19430 L22:
P:00BE 47F400 000001  3  44019432         move    #>1,y1
P:00C0 200078         2  44219433         add     y1,b
P:00C1 0BA72D         4  44619434 L23:    btst    #13,x:<<$FFE7
P:00C2 200013         2  44819435         clr     a   
P:00C3 200037         2  45019436         rol     a
P:00C4 46F400 000001  3  45319437         move    #>1,y0
P:00C6 200055         2  45519438         cmp     y0,a
P:00C7 0AF0A2 rrrrrr  6  46119439         jne     L20
                            19440 
                            19441 ; 151  |    }
                            19442 ; 152  |    
                            19443 ; 153  |    if(HW_I2CCSR.B.ACKF) return(-2); 
                            19444 
P:00C9 0AA7AE rrrrrr  6  46719446         jset    #14,x:<<$FFE7,L24
                            19447 
                            19448 ; 154  |    
                            19449 ; 155  |    HW_I2CCSR.B.WL = 1;   // Word Length 1, 2, or 3 bytes
                            19450 
P:00CB 084F27         2  46919452         movep   x:<<$FFE7,b
P:00CC 45F400 FFF9FF  3  47219453         move    #$FFF9FF,x1
P:00CE 20006E         2  47419454         and     x1,b
P:00CF 45F400 000200  3  47719455         move    #$200,x1
P:00D1 20006A         2  47919456         or      x1,b
P:00D2 08CD27         4  48319457         movep   b1,x:<<$FFE7
                            19458 
                            19459 ; 156  |    HW_I2CCSR.B.LWORD = 1;          // Send the stop command 
                            19460 
P:00D3 0AA731         4  48719462         bset    #17,x:<<$FFE7
                            19463 
                            19464 ; 157  |
                            19465 ; 158  |    HW_I2CDAT.U = MyData.U.W1;         // Send last 3 bytes
                            19466 
P:00D4 77F400 FFFFFE  3  49019468         move    #-2,n7
P:00D6 000000         2  49219469         nop
P:00D7 08EFE6         6  49819470         movep   y:(r7+n7),x:<<$FFE6
                            19471 
                            19472 ; 159  |      
                            19473 ; 160  |    HW_I2CCSR.B.TUFLCL = 1;         // Clear the Receiver Overflow bit   
                            19474 
P:00D8 0AA734         4  50219476         bset    #20,x:<<$FFE7
                            19477 
                            19478 ; 161  |    HW_I2CCSR.B.TUFLCL = 0;      
                            19479 
P:00D9 0AA714         4  50619481         bclr    #20,x:<<$FFE7
                            19482 
                            19483 ; 162  |     
                            19484 ; 163  |    if(HW_I2CCSR.B.ACKF)  return(-2); 
                            19485 
P:00DA 0AA78E rrrrrr  6  51219487         jclr    #14,x:<<$FFE7,L25
P:00DC 56F400 FFFFFE  3  51519488 L24:    move    #>-2,a
P:00DE 0AF080 rrrrrr  6  52119489         jmp     L27
                            19490 
                            19491 ; 164  | 
                            19492 ; 165  |    return(0);
                            19493 
P:00E0 200013         2  52319495 L25:    clr     a   
                            19496 
                            19497 ; 166  |}
                            19498 
P:00E1 3F0300         2  52519500 L27:    move    #3,n7
P:00E2 000000         2  52719501         nop
P:00E3 204700         2  52919502         move    (r7)-n7
P:00E4 00000C         4  53319504         rts
                            19507 
                            19508 ; 167  |
                            19509 ; 168  |_reentrant INT STFM1000I2CReset(WORD mode, WORD ClockDiv)
                            19510 ; 169  |{
                            19511 
                            19578 FSTFM1000I2CReset:
P:00E5 055F7C         2  53519579         movec   ssh,y:(r7)+
P:00E6 205F00         2  53719582         move    (r7)+
P:00E7 205F00         2  53919583         move    (r7)+
                            19597 
                            19598 ; 170  |    int Speed;
                            19599 ; 171  |    int cnt;
                            19600 ; 172  |    int iI2CWord3;
                            19601 ; 173  |    int RtnCode = 0;
                            19602 
P:00E8 77F400 FFFFFE  3  54219604         move    #-2,n7
P:00EA 000000         2  54419605         nop
P:00EB 5C6F00         4  54819606         move    a1,y:(r7+n7)
P:00EC 240000         2  55019609         move    #0,x0
                            19611 
                            19612 ; 174  |    
                            19613 ; 175  |    HW_GP0ENR.B.B16 = 0;        // enable output
                            19614 
P:00ED 0A7010 00F400  6  55619616         bclr    #16,x:$F400
                            19617 
                            19618 ; 176  |    HW_GP0ENR.B.B17 = 0;        // enable output
                            19619 
P:00EF 0A7011 00F400  6  56219621         bclr    #17,x:$F400
                            19622 
                            19623 ; 177  |
                            19624 ; 178  |    HW_GP0PWR.B.B16 = 1;        // power on
                            19625 
P:00F1 0A7030 00F409  6  56819627         bset    #16,x:$F409
                            19628 
                            19629 ; 179  |    HW_GP0PWR.B.B17 = 1;        // power on
                            19630 
P:00F3 0A7031 00F409  6  57419632         bset    #17,x:$F409
                            19633 
                            19634 ; 180  |     
                            19635 ; 181  |#if 1
                            19636 ; 182  |    for(cnt = 0; (0 != HW_I2CCSR.B.BUSY); cnt++)    // Delay time 1 cnt
                            19637 
P:00F5 270000         2  57619639         move    #0,y1
P:00F6 45F400 002000  3  57919641         move    #$2000,x1
P:00F8 46F400 000001  3  58219642         move    #>1,y0
P:00FA 0AF080 rrrrrr  6  58819643         jmp     L60
                            19644 
                            19645 ; 183  |    {    
                            19646 ; 184  |        if (TIMEOUT_COUNT <= cnt)
                            19647 
P:00FC 200061         2  59019649 L58:    tfr     x1,a
P:00FD 200075         2  59219650         cmp     y1,a
P:00FE 0AF0A7 rrrrrr  6  59819651         jgt     L59
                            19652 
                            19653 ; 185  |        {
                            19654 ; 186  |            HW_I2CCSR.I = 0;    // Reset I2C device
                            19655 
P:0100 08F4A7 000000  4  60219657         movep   #0,x:<<$FFE7
                            19658 
                            19659 ; 187  |            HW_I2CCSR.B.TREQ = 1;
                            19660 
P:0102 0AA72B         4  60619662         bset    #11,x:<<$FFE7
                            19663 
                            19664 ; 188  |            HW_I2CCSR.B.TREQ = 0;
                            19665 
P:0103 0AA70B         4  61019667         bclr    #11,x:<<$FFE7
                            19668 
                            19669 ; 189  |            HW_I2CCSR.B.I2C_EN = 1;
                            19670 
P:0104 0AA720         4  61419672         bset    #0,x:<<$FFE7
                            19673 
                            19674 ; 190  |            HW_I2CCSR.B.ACKF = 0;         
                            19675 
P:0105 0AA70E         4  61819677         bclr    #14,x:<<$FFE7
                            19678 
                            19679 ; 191  |            break;
                            19680 
P:0106 0AF080 rrrrrr  6  62419682         jmp     L61
                            19683 
                            19684 ; 192  |        }
                            19685 
                            19687 L59:
P:0108 200071         2  62619689         tfr     y1,a
P:0109 200050         2  62819690         add     y0,a
P:010A 218700         2  63019693         move    a1,y1
P:010B 0AA7A2 rrrrrr  6  63619696 L60:    jset    #2,x:<<$FFE7,L58
                            19697 
                            19698 ; 193  |    } 
                            19699 ; 194  |#else
                            19700 ; 195  |    for(cnt = 0; (0 != HW_I2CCSR.B.BUSY); cnt++)    // Delay time 1 cnt
                            19701 ; 196  |    {    
                            19702 ; 197  |        if (TIMEOUT_COUNT <= cnt) RtnCode = -3; //return(TIMEOUT_ERROR);
                            19703 ; 198  |    } 
                            19704 ; 199  |#endif
                            19705 ; 200  |    
                            19706 ; 201  |    for(cnt = 0; cnt < 100; cnt++) { _nop(); }  // Short delay  
                            19707 
P:010D 066480 rrrrrr  6  64219709 L61:    do      #100,L86
P:010F 000000         2  64419711         nop
P:0110 000000         2  64619712         nop
                         (4)19713 L86:
                            19715 
                            19716 ; 202  | 
                            19717 ; 203  |    HW_I2CCSR.I = 0;    // Reset I2C device
                            19718 
P:0111 08F4A7 000000  4  65019720         movep   #0,x:<<$FFE7
                            19721 
                            19722 ; 204  |        
                            19723 ; 205  |    iI2CWord3 = HW_I2CCSR.I;    // verify that reset worked
                            19724 
P:0113 084E27         2  65219726         movep   x:<<$FFE7,a
                            19728 
                            19729 ; 206  |    
                            19730 ; 207  |    if ( 0 != (RESET_HW_I2CCSR_MASK & iI2CWord3) )
                            19731 
P:0114 0ACC4F         4  65619733         bclr    #15,a1
P:0115 0ACC50         4  66019734         bclr    #16,a1
P:0116 2A0000         2  66219736         move    #0,a2
P:0117 200003         2  66419737         tst     a
P:0118 0AF0AA rrrrrr  6  67019738         jeq     L63
                            19739 
                            19740 ; 208  |    {
                            19741 ; 209  |         RtnCode = -1;
                            19742 
P:011A 44F400 FFFFFF  3  67319744         move    #>-1,x0
                            19745 
                            19746 ; 210  |    }       
                            19747 
P:011C 045FA0         2  67519749 L63:    movec   m0,n7
P:011D 000000         2  67719750         nop
P:011E 4C6F00         4  68119751         move    x0,y:(r7+n7)
                            19754 
                            19755 ; 211  | 
                            19756 ; 212  |    HW_I2CCSR.B.I2C_EN = 1;             // Enable I2C device
                            19757 
P:011F 0AA720         4  68519759         bset    #0,x:<<$FFE7
                            19760 
                            19761 ; 213  |    
                            19762 ; 214  |    if (0 == ClockDiv)         // lookup Clock Div based on System Clock Speed
                            19763 
P:0120 2B0000         2  68719765         move    #0,b2
P:0121 20000B         2  68919766         tst     b
P:0122 0AF0A2 rrrrrr  6  69519767         jne     L83
                            19768 
                            19769 ; 215  |    {
                            19770 ; 216  |        Speed = SysGetSpeed();
                            19771 
P:0124 0BF080 rrrrrr  6  70119773         jsr     FSysGetSpeed
                            19777 
                            19778 ; 217  |        switch(Speed)
                            19779 
P:0126 65F403 rrrrrr  3  70419781         tst     a       #L87,r5
P:0128 0AF0AB rrrrrr  6  71019782         jmi     L74
P:012A 46F400 00000C  3  71319783         move    #>12,y0
P:012C 21DD55         2  71519784         cmp     y0,a    a,n5
P:012D 0AF0A7 rrrrrr  6  72119785         jgt     L74
P:012F 07ED95         8  72919786         movem   p:(r5+n5),r5
P:0130 000000         2  73119787         nop
P:0131 0AE580         4  73519788         jmp     (r5)
                            19789 
P:0132 rrrrrr               19790 L87:    dc      L64     ; case 0:
P:0133 rrrrrr               19791         dc      L74     ; default:
P:0134 rrrrrr               19792         dc      L74     ; default:
P:0135 rrrrrr               19793         dc      L65     ; case 3:
P:0136 rrrrrr               19794         dc      L66     ; case 4:
P:0137 rrrrrr               19795         dc      L74     ; default:
P:0138 rrrrrr               19796         dc      L70     ; case 6:
P:0139 rrrrrr               19797         dc      L70     ; case 7:
P:013A rrrrrr               19798         dc      L67     ; case 8:
P:013B rrrrrr               19799         dc      L70     ; case 9:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
P:013C rrrrrr               19800         dc      L71     ; case 10:
P:013D rrrrrr               19801         dc      L72     ; case 11:
P:013E rrrrrr               19802         dc      L73     ; case 12:
                            19803 
                            19804 
                            19805 ; 218  |        {
                            19806 ; 219  |            case SPEED_IDLE: ClockDiv = I2C_IDLE_SPEED;                 break;  
                            19807 
P:013F 57F400 00003D  3  73819809 L64:    move    #>$3D,b
P:0141 0AF080 rrrrrr  6  74419811         jmp     L83
                            19812 
                            19813 ; 220  |            case SPEED_FM:   ClockDiv = I2C_FM_SPEED;               break; 
                            19814 
P:0143 57F400 000093  3  74719816 L65:    move    #>147,b
P:0145 0AF080 rrrrrr  6  75319817         jmp     L83
                            19818 
                            19819 ; 221  |            case SPEED_FM_EQ:   ClockDiv = I2C_FM_EQ_SPEED;         break;         
                            19820 
P:0147 57F400 0000B8  3  75619822 L66:    move    #>184,b
P:0149 0AF080 rrrrrr  6  76219823         jmp     L83
                            19824 
                            19825 ; 222  |            case SPEED_MP3: ClockDiv = I2C_MP3_SPEED;                   break;
                            19826 ; 223  |            case SPEED_ADPCM: ClockDiv = I2C_ADPCM_SPEED;               break;
                            19827 ; 224  |            case SPEED_MIXER: ClockDiv = I2C_MIXER_SPEED;               break;
                            19828 
P:014B 57F400 00000A  3  76519830 L67:    move    #>10,b
P:014D 0AF080 rrrrrr  6  77119831         jmp     L83
                            19832 
                            19833 ; 225  |            case SPEED_ADCBASE: ClockDiv = I2C_ADCBASE_SPEED;       break;
                            19834 
P:014F 57F400 0000DE  3  77419836 L70:    move    #>222,b
P:0151 0AF080 rrrrrr  6  78019837         jmp     L83
                            19838 
                            19839 ; 226  |            case SPEED_MAX: ClockDiv = I2C_MAX_SPEED;                   break;
                            19840 
P:0153 57F400 000129  3  78319842 L71:    move    #297,b
P:0155 0AF080 rrrrrr  6  78919843         jmp     L83
                            19844 
                            19845 ; 227  |            case SPEED_WMA: ClockDiv = I2C_WMA_SPEED;                   break;
                            19846 
P:0157 57F400 000174  3  79219848 L72:    move    #372,b
P:0159 0AF080 rrrrrr  6  79819849         jmp     L83
                            19850 
                            19851 ; 228  |            case SPEED_MP3ENCODE: ClockDiv = I2C_MP3ENCODE_SPEED;   break;
                            19852 
P:015B 57F400 00018A  3  80119854 L73:    move    #394,b
P:015D 0AF080 rrrrrr  6  80719855         jmp     L83
                            19856 
                            19857 ; 229  |            case SPEED_PEAK: 
                            19858 ; 230  |            default: ClockDiv = I2C_PEAK_SPEED;                                 break;  
                            19859 
P:015F 57F400 0001D5  3  81019861 L74:    move    #469,b
                            19862 
                            19863 ; 231  |         } 
                            19864 ; 232  |    }  
                            19865 ; 233  |           
                            19866 ; 234  |    //HW_I2CDIV.I = (ClockDiv<<1) & 0x0001FE;   // Clock Divider Register (e.g. 0x78) Write Only 
                            19867 ; 235  |    HW_I2CDIV.B.FACT = ClockDiv;                // Cannot be read, we need to set bit[8:1]
                            19868 
P:0161 084E25         2  81219870 L83:    movep   x:<<$FFE5,a
P:0162 47F400 FFFE01  3  81519871         move    #$FFFE01,y1
P:0164 200076         2  81719872         and     y1,a
P:0165 47F400 0000FF  3  82019873         move    #>$FF,y1
P:0167 20007E         2  82219874         and     y1,b
P:0168 21A700         2  82419875         move    b1,y1
P:0169 0117C8         2  82619876         mpy     y1,#23,b
P:016A 212700         2  82819877         move    b0,y1
P:016B 200072         2  83019878         or      y1,a
P:016C 08CC25         4  83419879         movep   a1,x:<<$FFE5
                            19880 
                            19881 ; 236  |                                                
                            19882 ; 237  |    HW_I2CCSR.B.MODE = mode;    // Operating Mode Bit  1=Fast
                            19883 
P:016D 77F400 FFFFFE  3  83719885         move    #-2,n7
P:016F 000000         2  83919886         nop
P:0170 4FEF00         4  84319887         move    y:(r7+n7),y1
P:0171 0AC700 rrrrrr  6  84919888         jclr    #0,y1,L89
P:0173 0AA725         4  85319889         bset    #5,x:<<$FFE7
P:0174 0AF080 rrrrrr  6  85919890         jmp     L88
P:0176 0AA705         4  86319891 L89:    bclr    #5,x:<<$FFE7
                            19892 
                            19893 ; 238  |
                            19894 ; 239  |    if (1 == HW_I2CCSR.B.ROFL)  // Clear Receiver Overflow
                            19895 
                            19897 L88:
P:0177 0BA72C         4  86719900         btst    #12,x:<<$FFE7
P:0178 20001B         2  86919901         clr     b   
P:0179 20003F         2  87119902         rol     b
P:017A 46F400 000001  3  87419904         move    #>1,y0
P:017C 20005D         2  87619905         cmp     y0,b
P:017D 0AF0A2 rrrrrr  6  88219906         jne     L84
                            19907 
                            19908 ; 240  |    {
                            19909 ; 241  |        cnt = HW_I2CDAT.U;
                            19910 
P:017F 084526         2  88419912         movep   x:<<$FFE6,x1
                            19913 
                            19914 ; 242  |        HW_I2CCSR.B.ROFLCL = 1;
                            19915 
P:0180 0AA733         4  88819917         bset    #19,x:<<$FFE7
                            19918 
                            19919 ; 243  |        HW_I2CCSR.B.ROFLCL = 0;
                            19920 
P:0181 0AA713         4  89219922         bclr    #19,x:<<$FFE7
                            19923 
                            19924 ; 244  |    }
                            19925 ; 245  |    
                            19926 ; 246  |    if (1 == HW_I2CCSR.B.TUFL)  // Clear Transmitter Undererflow
                            19927 
P:0182 0BA72D         4  89619929 L84:    btst    #13,x:<<$FFE7
P:0183 200013         2  89819930         clr     a   
P:0184 200037         2  90019931         rol     a
P:0185 200055         2  90219933         cmp     y0,a
P:0186 0AF0A2 rrrrrr  6  90819934         jne     L85
                            19935 
                            19936 ; 247  |    {
                            19937 ; 248  |        HW_I2CDAT.U = 0;
                            19938 
P:0188 08F4A6 000000  4  91219940         movep   #0,x:<<$FFE6
                            19941 
                            19942 ; 249  |        HW_I2CCSR.B.TUFLCL = 1;
                            19943 
P:018A 0AA734         4  91619945         bset    #20,x:<<$FFE7
                            19946 
                            19947 ; 250  |        HW_I2CCSR.B.TUFLCL = 0;
                            19948 
P:018B 0AA714         4  92019950         bclr    #20,x:<<$FFE7
                            19951 
                            19952 ; 251  |    }
                            19953 ; 252  |  
                            19954 ; 253  |    return(RtnCode);
                            19955 
P:018C 045FA0         2  92219957 L85:    movec   m0,n7
P:018D 000000         2  92419958         nop
P:018E 5EEF00         4  92819959         move    y:(r7+n7),a
                            19962 
                            19963 ; 254  |}
                            19964 
P:018F 205700         2  93019966         move    (r7)-
P:0190 205700         2  93219967         move    (r7)-
P:0191 05FF7C         4  93619969         movec   y:-(r7),ssh
P:0192 000000         2  93819972         nop
P:0193 00000C         4  94219973         rts
                            19977 
                            19978 ; 255  |
                            19979 ; 256  |#ifdef FUNCLET
                            19980 ; 257  |    #pragma asm
P:0001                      19981         org p,".ptextstfm1000powerdown":
                            19982 ; 259  |    #pragma endasm
                            19983 ; 260  |#endif
                            19984 ; 261  |
                            19985 ; 262  |
                            19986 
                            19990 
                            19991         extern  FSysGetSpeed
                            19992 
                            19993         global  FSTFM1000I2CConfigureRegister, FSTFM1000I2CReset
                            19994         global  FSTFM1000I2CWriteTunerRegister
                            19995         global  FSTFM1000TunerSafePowerDown_Funclet
                            19996 
                            19997         local   Fdo_nothing, L3, L4, L5, L18, L19, L20, L21, L22, L23, L24
                            19998         local   L25, L27, L58, L59, L60, L61, L63, L64, L65, L66, L67, L70
                            19999         local   L71, L72, L73, L74, L83, L84, L85, L86, L87, L88, L89
                            20000 
                            20001         calls   "STFM1000I2CConfigureRegister", "STFM1000I2CReset"
                            20002         calls   "STFM1000I2CConfigureRegister", "STFM1000I2CWriteTunerRegister"
                            20003         calls   "STFM1000I2CReset", "SysGetSpeed"
                            20004         calls   "STFM1000TunerSafePowerDown_Funclet", "STFM1000I2CConfigureRegister"
                            20005 
