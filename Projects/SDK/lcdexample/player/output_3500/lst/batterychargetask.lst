TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfd256b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;batterychargeta:
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                               98 ; 3    |//
                               99 ; 4    |// Filename: batterycharge.c
                              100 ; 5    |// Description: Contains the core 
                              101 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |
                              103 ; 8    |////////////////////////////////////////////////////////////////////////////////
                              104 ; 9    |//   Includes and external references
                              105 ; 10   |////////////////////////////////////////////////////////////////////////////////
                              106 ; 11   |#include "types.h"
                              107 
                              109 
                              110 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              111 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              112 ; 3    |//
                              113 ; 4    |// Filename: types.h
                              114 ; 5    |// Description: Standard data types
                              115 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              116 ; 7    |
                              117 ; 8    |#ifndef _TYPES_H
                              118 ; 9    |#define _TYPES_H
                              119 ; 10   |
                              120 ; 11   |// TODO:  move this outta here!
                              121 ; 12   |#if !defined(NOERROR)
                              122 ; 13   |#define NOERROR 0
                              123 ; 14   |#define SUCCESS 0
                              124 ; 15   |#endif 
                              125 ; 16   |#if !defined(SUCCESS)
                              126 ; 17   |#define SUCCESS  0
                              127 ; 18   |#endif
                              128 ; 19   |#if !defined(ERROR)
                              129 ; 20   |#define ERROR   -1
                              130 ; 21   |#endif
                              131 ; 22   |#if !defined(FALSE)
                              132 ; 23   |#define FALSE 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 24   |#endif
                              134 ; 25   |#if !defined(TRUE)
                              135 ; 26   |#define TRUE  1
                              136 ; 27   |#endif
                              137 ; 28   |
                              138 ; 29   |#if !defined(NULL)
                              139 ; 30   |#define NULL 0
                              140 ; 31   |#endif
                              141 ; 32   |
                              142 ; 33   |#define MAX_INT     0x7FFFFF
                              143 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              144 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              145 ; 36   |#define MAX_ULONG   (-1) 
                              146 ; 37   |
                              147 ; 38   |#define WORD_SIZE   24              // word size in bits
                              148 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              149 ; 40   |
                              150 ; 41   |
                              151 ; 42   |#define BYTE    unsigned char       // btVarName
                              152 ; 43   |#define CHAR    signed char         // cVarName
                              153 ; 44   |#define USHORT  unsigned short      // usVarName
                              154 ; 45   |#define SHORT   unsigned short      // sVarName
                              155 ; 46   |#define WORD    unsigned int        // wVarName
                              156 ; 47   |#define INT     signed int          // iVarName
                              157 ; 48   |#define DWORD   unsigned long       // dwVarName
                              158 ; 49   |#define LONG    signed long         // lVarName
                              159 ; 50   |#define BOOL    unsigned int        // bVarName
                              160 ; 51   |#define FRACT   _fract              // frVarName
                              161 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              162 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              163 ; 54   |#define FLOAT   float               // fVarName
                              164 ; 55   |#define DBL     double              // dVarName
                              165 ; 56   |#define ENUM    enum                // eVarName
                              166 ; 57   |#define CMX     _complex            // cmxVarName
                              167 ; 58   |typedef WORD UCS3;                   // 
                              168 ; 59   |
                              169 ; 60   |#define UINT16  unsigned short
                              170 ; 61   |#define UINT8   unsigned char   
                              171 ; 62   |#define UINT32  unsigned long
                              172 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              173 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              174 ; 65   |#define WCHAR   UINT16
                              175 ; 66   |
                              176 ; 67   |//UINT128 is 16 bytes or 6 words
                              177 ; 68   |typedef struct UINT128_3500 {   
                              178 ; 69   |    int val[6];     
                              179 ; 70   |} UINT128_3500;
                              180 ; 71   |
                              181 ; 72   |#define UINT128   UINT128_3500
                              182 ; 73   |
                              183 ; 74   |// Little endian word packed byte strings:   
                              184 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              185 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              186 ; 77   |// Little endian word packed byte strings:   
                              187 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              188 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              189 ; 80   |
                              190 ; 81   |// Declare Memory Spaces To Use When Coding
                              191 ; 82   |// A. Sector Buffers
                              192 ; 83   |#define SECTOR_BUFFER_MEM_X _X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              193 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              194 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              195 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              196 
                              198 
                              199 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              200 ; 88   |// B. Media DDI Memory
                              201 ; 89   |#define MEDIA_DDI_MEM _Y
                              202 ; 90   |
                              203 ; 91   |
                              204 ; 92   |
                              205 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              206 ; 94   |// Examples of circular pointers:
                              207 ; 95   |//    INT CIRC cpiVarName
                              208 ; 96   |//    DWORD CIRC cpdwVarName
                              209 ; 97   |
                              210 ; 98   |#define RETCODE INT                 // rcVarName
                              211 ; 99   |
                              212 ; 100  |// generic bitfield structure
                              213 ; 101  |struct Bitfield {
                              214 ; 102  |    unsigned int B0  :1;
                              215 ; 103  |    unsigned int B1  :1;
                              216 ; 104  |    unsigned int B2  :1;
                              217 ; 105  |    unsigned int B3  :1;
                              218 ; 106  |    unsigned int B4  :1;
                              219 ; 107  |    unsigned int B5  :1;
                              220 ; 108  |    unsigned int B6  :1;
                              221 ; 109  |    unsigned int B7  :1;
                              222 ; 110  |    unsigned int B8  :1;
                              223 ; 111  |    unsigned int B9  :1;
                              224 ; 112  |    unsigned int B10 :1;
                              225 ; 113  |    unsigned int B11 :1;
                              226 ; 114  |    unsigned int B12 :1;
                              227 ; 115  |    unsigned int B13 :1;
                              228 ; 116  |    unsigned int B14 :1;
                              229 ; 117  |    unsigned int B15 :1;
                              230 ; 118  |    unsigned int B16 :1;
                              231 ; 119  |    unsigned int B17 :1;
                              232 ; 120  |    unsigned int B18 :1;
                              233 ; 121  |    unsigned int B19 :1;
                              234 ; 122  |    unsigned int B20 :1;
                              235 ; 123  |    unsigned int B21 :1;
                              236 ; 124  |    unsigned int B22 :1;
                              237 ; 125  |    unsigned int B23 :1;
                              238 ; 126  |};
                              239 ; 127  |
                              240 ; 128  |union BitInt {
                              241 ; 129  |        struct Bitfield B;
                              242 ; 130  |        int        I;
                              243 ; 131  |};
                              244 ; 132  |
                              245 ; 133  |#define MAX_MSG_LENGTH 10
                              246 ; 134  |struct CMessage
                              247 ; 135  |{
                              248 ; 136  |        unsigned int m_uLength;
                              249 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              250 ; 138  |};
                              251 ; 139  |
                              252 ; 140  |typedef struct {
                              253 ; 141  |    WORD m_wLength;
                              254 ; 142  |    WORD m_wMessage;
                              255 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 144  |} Message;
                              257 ; 145  |
                              258 ; 146  |struct MessageQueueDescriptor
                              259 ; 147  |{
                              260 ; 148  |        int *m_pBase;
                              261 ; 149  |        int m_iModulo;
                              262 ; 150  |        int m_iSize;
                              263 ; 151  |        int *m_pHead;
                              264 ; 152  |        int *m_pTail;
                              265 ; 153  |};
                              266 ; 154  |
                              267 ; 155  |struct ModuleEntry
                              268 ; 156  |{
                              269 ; 157  |    int m_iSignaledEventMask;
                              270 ; 158  |    int m_iWaitEventMask;
                              271 ; 159  |    int m_iResourceOfCode;
                              272 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              273 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              274 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              275 ; 163  |    int m_uTimeOutHigh;
                              276 ; 164  |    int m_uTimeOutLow;
                              277 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              278 ; 166  |};
                              279 ; 167  |
                              280 ; 168  |union WaitMask{
                              281 ; 169  |    struct B{
                              282 ; 170  |        unsigned int m_bNone     :1;
                              283 ; 171  |        unsigned int m_bMessage  :1;
                              284 ; 172  |        unsigned int m_bTimer    :1;
                              285 ; 173  |        unsigned int m_bButton   :1;
                              286 ; 174  |    } B;
                              287 ; 175  |    int I;
                              288 ; 176  |} ;
                              289 ; 177  |
                              290 ; 178  |
                              291 ; 179  |struct Button {
                              292 ; 180  |        WORD wButtonEvent;
                              293 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              294 ; 182  |};
                              295 ; 183  |
                              296 ; 184  |struct Message {
                              297 ; 185  |        WORD wMsgLength;
                              298 ; 186  |        WORD wMsgCommand;
                              299 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              300 ; 188  |};
                              301 ; 189  |
                              302 ; 190  |union EventTypes {
                              303 ; 191  |        struct CMessage msg;
                              304 ; 192  |        struct Button Button ;
                              305 ; 193  |        struct Message Message;
                              306 ; 194  |};
                              307 ; 195  |
                              308 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              309 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              310 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              311 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              312 ; 200  |
                              313 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              314 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              315 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              316 ; 204  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              317 ; 205  |#if DEBUG
                              318 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              319 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              320 ; 208  |#else 
                              321 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              322 ; 210  |#define DebugBuildAssert(x)    
                              323 ; 211  |#endif
                              324 ; 212  |
                              325 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              326 ; 214  |//  #pragma asm
                              327 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              328 ; 216  |//  #pragma endasm
                              329 ; 217  |
                              330 ; 218  |
                              331 ; 219  |#ifdef COLOR_262K
                              332 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              333 ; 221  |#elif defined(COLOR_65K)
                              334 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              335 ; 223  |#else
                              336 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              337 ; 225  |#endif
                              338 ; 226  |    
                              339 ; 227  |#endif // #ifndef _TYPES_H
                              340 
                              342 
                              343 ; 12   |#include "batterycharge.h"
                              344 
                              346 
                              347 ; 1    |#ifndef __BATTERYCHARGE_H
                              348 ; 2    |#define __BATTERYCHARGE_H
                              349 ; 3    |
                              350 ; 4    |//entry point for menus. function called via SysCallFunction()
                              351 ; 5    |#ifdef STMP_BUILD_PLAYER
                              352 ; 6    |_reentrant int BatteryChargeStateMachine(int a, int b, int *c);
                              353 ; 7    |#else
                              354 ; 8    |_reentrant void BatteryChargeStateMachine(void);
                              355 ; 9    |#endif
                              356 ; 10   |
                              357 ; 11   |_reentrant WORD BatteryChargeInitialize(void);
                              358 ; 12   |_reentrant void BatteryChargeDisableCharging(BOOL);
                              359 ; 13   |_reentrant void BatteryChargeEnableCharging(void);
                              360 ; 14   |_reentrant BOOL BatteryChargeIsCharging(void);
                              361 ; 15   |_reentrant BOOL BatteryChargeIsTrickleCharging(void);
                              362 ; 16   |
                              363 ; 17   |_reentrant WORD BatteryChargeImplementationInitialize(void);
                              364 ; 18   |_reentrant void BatteryChargeImplementationSample(BOOL);
                              365 ; 19   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void);
                              366 ; 20   |
                              367 ; 21   |
                              368 ; 22   |#endif 
                              369 
                              371 
                              372 ; 13   |#include "regsdcdc.h"
                              373 
                              375 
                              376 ; 1    |#if !(defined(regsdcdcinc))
                              377 ; 2    |
                              378 ; 3    |#define regssysteminc 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              379 ; 4    |
                              380 ; 5    |
                              381 ; 6    |
                              382 ; 7    |#include "types.h"
                              383 
                              385 
                              386 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              387 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              388 ; 3    |//
                              389 ; 4    |// Filename: types.h
                              390 ; 5    |// Description: Standard data types
                              391 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              392 ; 7    |
                              393 ; 8    |#ifndef _TYPES_H
                              394 ; 9    |#define _TYPES_H
                              395 ; 10   |
                              396 ; 11   |// TODO:  move this outta here!
                              397 ; 12   |#if !defined(NOERROR)
                              398 ; 13   |#define NOERROR 0
                              399 ; 14   |#define SUCCESS 0
                              400 ; 15   |#endif 
                              401 ; 16   |#if !defined(SUCCESS)
                              402 ; 17   |#define SUCCESS  0
                              403 ; 18   |#endif
                              404 ; 19   |#if !defined(ERROR)
                              405 ; 20   |#define ERROR   -1
                              406 ; 21   |#endif
                              407 ; 22   |#if !defined(FALSE)
                              408 ; 23   |#define FALSE 0
                              409 ; 24   |#endif
                              410 ; 25   |#if !defined(TRUE)
                              411 ; 26   |#define TRUE  1
                              412 ; 27   |#endif
                              413 ; 28   |
                              414 ; 29   |#if !defined(NULL)
                              415 ; 30   |#define NULL 0
                              416 ; 31   |#endif
                              417 ; 32   |
                              418 ; 33   |#define MAX_INT     0x7FFFFF
                              419 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              420 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              421 ; 36   |#define MAX_ULONG   (-1) 
                              422 ; 37   |
                              423 ; 38   |#define WORD_SIZE   24              // word size in bits
                              424 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              425 ; 40   |
                              426 ; 41   |
                              427 ; 42   |#define BYTE    unsigned char       // btVarName
                              428 ; 43   |#define CHAR    signed char         // cVarName
                              429 ; 44   |#define USHORT  unsigned short      // usVarName
                              430 ; 45   |#define SHORT   unsigned short      // sVarName
                              431 ; 46   |#define WORD    unsigned int        // wVarName
                              432 ; 47   |#define INT     signed int          // iVarName
                              433 ; 48   |#define DWORD   unsigned long       // dwVarName
                              434 ; 49   |#define LONG    signed long         // lVarName
                              435 ; 50   |#define BOOL    unsigned int        // bVarName
                              436 ; 51   |#define FRACT   _fract              // frVarName
                              437 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              438 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              439 ; 54   |#define FLOAT   float               // fVarName
                              440 ; 55   |#define DBL     double              // dVarName
                              441 ; 56   |#define ENUM    enum                // eVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              442 ; 57   |#define CMX     _complex            // cmxVarName
                              443 ; 58   |typedef WORD UCS3;                   // 
                              444 ; 59   |
                              445 ; 60   |#define UINT16  unsigned short
                              446 ; 61   |#define UINT8   unsigned char   
                              447 ; 62   |#define UINT32  unsigned long
                              448 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              449 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              450 ; 65   |#define WCHAR   UINT16
                              451 ; 66   |
                              452 ; 67   |//UINT128 is 16 bytes or 6 words
                              453 ; 68   |typedef struct UINT128_3500 {   
                              454 ; 69   |    int val[6];     
                              455 ; 70   |} UINT128_3500;
                              456 ; 71   |
                              457 ; 72   |#define UINT128   UINT128_3500
                              458 ; 73   |
                              459 ; 74   |// Little endian word packed byte strings:   
                              460 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              461 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              462 ; 77   |// Little endian word packed byte strings:   
                              463 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              464 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              465 ; 80   |
                              466 ; 81   |// Declare Memory Spaces To Use When Coding
                              467 ; 82   |// A. Sector Buffers
                              468 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              469 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              470 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              471 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              472 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              473 ; 88   |// B. Media DDI Memory
                              474 ; 89   |#define MEDIA_DDI_MEM _Y
                              475 ; 90   |
                              476 ; 91   |
                              477 ; 92   |
                              478 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              479 ; 94   |// Examples of circular pointers:
                              480 ; 95   |//    INT CIRC cpiVarName
                              481 ; 96   |//    DWORD CIRC cpdwVarName
                              482 ; 97   |
                              483 ; 98   |#define RETCODE INT                 // rcVarName
                              484 ; 99   |
                              485 ; 100  |// generic bitfield structure
                              486 ; 101  |struct Bitfield {
                              487 ; 102  |    unsigned int B0  :1;
                              488 ; 103  |    unsigned int B1  :1;
                              489 ; 104  |    unsigned int B2  :1;
                              490 ; 105  |    unsigned int B3  :1;
                              491 ; 106  |    unsigned int B4  :1;
                              492 ; 107  |    unsigned int B5  :1;
                              493 ; 108  |    unsigned int B6  :1;
                              494 ; 109  |    unsigned int B7  :1;
                              495 ; 110  |    unsigned int B8  :1;
                              496 ; 111  |    unsigned int B9  :1;
                              497 ; 112  |    unsigned int B10 :1;
                              498 ; 113  |    unsigned int B11 :1;
                              499 ; 114  |    unsigned int B12 :1;
                              500 ; 115  |    unsigned int B13 :1;
                              501 ; 116  |    unsigned int B14 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              502 ; 117  |    unsigned int B15 :1;
                              503 ; 118  |    unsigned int B16 :1;
                              504 ; 119  |    unsigned int B17 :1;
                              505 ; 120  |    unsigned int B18 :1;
                              506 ; 121  |    unsigned int B19 :1;
                              507 ; 122  |    unsigned int B20 :1;
                              508 ; 123  |    unsigned int B21 :1;
                              509 ; 124  |    unsigned int B22 :1;
                              510 ; 125  |    unsigned int B23 :1;
                              511 ; 126  |};
                              512 ; 127  |
                              513 ; 128  |union BitInt {
                              514 ; 129  |        struct Bitfield B;
                              515 ; 130  |        int        I;
                              516 ; 131  |};
                              517 ; 132  |
                              518 ; 133  |#define MAX_MSG_LENGTH 10
                              519 ; 134  |struct CMessage
                              520 ; 135  |{
                              521 ; 136  |        unsigned int m_uLength;
                              522 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              523 ; 138  |};
                              524 ; 139  |
                              525 ; 140  |typedef struct {
                              526 ; 141  |    WORD m_wLength;
                              527 ; 142  |    WORD m_wMessage;
                              528 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              529 ; 144  |} Message;
                              530 ; 145  |
                              531 ; 146  |struct MessageQueueDescriptor
                              532 ; 147  |{
                              533 ; 148  |        int *m_pBase;
                              534 ; 149  |        int m_iModulo;
                              535 ; 150  |        int m_iSize;
                              536 ; 151  |        int *m_pHead;
                              537 ; 152  |        int *m_pTail;
                              538 ; 153  |};
                              539 ; 154  |
                              540 ; 155  |struct ModuleEntry
                              541 ; 156  |{
                              542 ; 157  |    int m_iSignaledEventMask;
                              543 ; 158  |    int m_iWaitEventMask;
                              544 ; 159  |    int m_iResourceOfCode;
                              545 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              546 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              547 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              548 ; 163  |    int m_uTimeOutHigh;
                              549 ; 164  |    int m_uTimeOutLow;
                              550 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              551 ; 166  |};
                              552 ; 167  |
                              553 ; 168  |union WaitMask{
                              554 ; 169  |    struct B{
                              555 ; 170  |        unsigned int m_bNone     :1;
                              556 ; 171  |        unsigned int m_bMessage  :1;
                              557 ; 172  |        unsigned int m_bTimer    :1;
                              558 ; 173  |        unsigned int m_bButton   :1;
                              559 ; 174  |    } B;
                              560 ; 175  |    int I;
                              561 ; 176  |} ;
                              562 ; 177  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              563 ; 178  |
                              564 ; 179  |struct Button {
                              565 ; 180  |        WORD wButtonEvent;
                              566 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              567 ; 182  |};
                              568 ; 183  |
                              569 ; 184  |struct Message {
                              570 ; 185  |        WORD wMsgLength;
                              571 ; 186  |        WORD wMsgCommand;
                              572 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              573 ; 188  |};
                              574 ; 189  |
                              575 ; 190  |union EventTypes {
                              576 ; 191  |        struct CMessage msg;
                              577 ; 192  |        struct Button Button ;
                              578 ; 193  |        struct Message Message;
                              579 ; 194  |};
                              580 ; 195  |
                              581 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              582 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              583 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              584 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              585 ; 200  |
                              586 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              587 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              588 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              589 ; 204  |
                              590 ; 205  |#if DEBUG
                              591 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              592 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              593 ; 208  |#else 
                              594 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              595 ; 210  |#define DebugBuildAssert(x)    
                              596 ; 211  |#endif
                              597 ; 212  |
                              598 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              599 ; 214  |//  #pragma asm
                              600 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              601 ; 216  |//  #pragma endasm
                              602 ; 217  |
                              603 ; 218  |
                              604 ; 219  |#ifdef COLOR_262K
                              605 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              606 ; 221  |#elif defined(COLOR_65K)
                              607 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              608 ; 223  |#else
                              609 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              610 ; 225  |#endif
                              611 ; 226  |    
                              612 ; 227  |#endif // #ifndef _TYPES_H
                              613 
                              615 
                              616 ; 8    |
                              617 ; 9    |
                              618 ; 10   |
                              619 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              620 ; 12   |
                              621 ; 13   |//   SYSTEM STMP Registers 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              622 ; 14   |//      Last Edited 2.19.2003 M. May
                              623 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              624 ; 16   |
                              625 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                              626 ; 18   |
                              627 ; 19   |
                              628 ; 20   |
                              629 ; 21   |
                              630 ; 22   |
                              631 ; 23   |
                              632 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              633 ; 25   |
                              634 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                              635 ; 27   |
                              636 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                              637 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                              638 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                              639 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                              640 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                              641 ; 33   |
                              642 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                              643 ; 35   |
                              644 ; 36   |
                              645 ; 37   |
                              646 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                              647 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                              648 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                              649 ; 41   |
                              650 ; 42   |
                              651 ; 43   |
                              652 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                              653 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                              654 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
                              655 ; 47   |
                              656 ; 48   |
                              657 ; 49   |
                              658 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                              659 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                              660 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                              661 ; 53   |
                              662 ; 54   |
                              663 ; 55   |
                              664 ; 56   |
                              665 ; 57   |
                              666 ; 58   |typedef union               
                              667 ; 59   |{
                              668 ; 60   |    struct {
                              669 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                              670 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                              671 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                              672 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                              673 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                              674 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                              675 ; 67   |    } B;
                              676 ; 68   |    unsigned int I;
                              677 ; 69   |} dcdc1_ctrl0_type;
                              678 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                              679 ; 71   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              680 ; 72   |
                              681 ; 73   |
                              682 ; 74   |
                              683 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                              684 ; 76   |
                              685 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                              686 ; 78   |
                              687 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                              688 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                              689 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                              690 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                              691 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                              692 ; 84   |
                              693 ; 85   |
                              694 ; 86   |
                              695 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                              696 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                              697 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                              698 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                              699 ; 91   |
                              700 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                              701 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                              702 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                              703 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                              704 ; 96   |
                              705 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                              706 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                              707 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                              708 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                              709 ; 101  |
                              710 ; 102  |
                              711 ; 103  |typedef union               
                              712 ; 104  |{
                              713 ; 105  |    struct {
                              714 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                              715 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                              716 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                              717 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                              718 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                              719 ; 111  |    } B;
                              720 ; 112  |    unsigned int I;
                              721 ; 113  |} dcdc1_ctrl1_type;
                              722 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                              723 ; 115  |
                              724 ; 116  |
                              725 ; 117  |
                              726 ; 118  |
                              727 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                              728 ; 120  |
                              729 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                              730 ; 122  |
                              731 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                              732 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                              733 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                              734 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                              735 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                              736 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              737 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                              738 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                              739 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                              740 ; 132  |
                              741 ; 133  |
                              742 ; 134  |
                              743 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                              744 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                              745 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                              746 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                              747 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                              748 ; 140  |
                              749 ; 141  |
                              750 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                              751 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                              752 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                              753 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                              754 ; 146  |
                              755 ; 147  |
                              756 ; 148  |
                              757 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                              758 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                              759 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
                              760 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                              761 ; 153  |
                              762 ; 154  |
                              763 ; 155  |typedef union               
                              764 ; 156  |{
                              765 ; 157  |    struct {
                              766 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                              767 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                              768 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                              769 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                              770 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                              771 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                              772 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                              773 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                              774 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                              775 ; 167  |    } B;
                              776 ; 168  |    unsigned int I;
                              777 ; 169  |} dcdc_vddio_type;
                              778 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                              779 ; 171  |
                              780 ; 172  |
                              781 ; 173  |
                              782 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                              783 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                              784 ; 176  |
                              785 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                              786 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                              787 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                              788 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                              789 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              790 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                              791 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                              792 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                              793 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                              794 ; 186  |
                              795 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                              796 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                              797 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                              798 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                              799 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                              800 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                              801 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                              802 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                              803 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                              804 ; 196  |
                              805 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                              806 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                              807 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                              808 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                              809 ; 201  |
                              810 ; 202  |typedef union               
                              811 ; 203  |{
                              812 ; 204  |    struct {
                              813 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                              814 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                              815 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                              816 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                              817 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                              818 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                              819 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                              820 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                              821 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                              822 ; 214  |    } B;
                              823 ; 215  |   unsigned int I;
                              824 ; 216  |        unsigned U;
                              825 ; 217  |} dcdc_vddd_type;
                              826 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                              827 ; 219  |
                              828 ; 220  |
                              829 ; 221  |
                              830 ; 222  |
                              831 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                              832 ; 224  |
                              833 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                              834 ; 226  |
                              835 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                              836 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                              837 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                              838 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                              839 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                              840 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                              841 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                              842 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                              843 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              844 ; 236  |
                              845 ; 237  |
                              846 ; 238  |
                              847 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                              848 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                              849 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                              850 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                              851 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                              852 ; 244  |
                              853 ; 245  |
                              854 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                              855 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                              856 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                              857 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                              858 ; 250  |
                              859 ; 251  |
                              860 ; 252  |
                              861 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                              862 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                              863 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                              864 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                              865 ; 257  |
                              866 ; 258  |
                              867 ; 259  |typedef union               
                              868 ; 260  |{
                              869 ; 261  |    struct {
                              870 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                              871 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                              872 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                              873 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                              874 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                              875 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                              876 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                              877 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                              878 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                              879 ; 271  |    } B;
                              880 ; 272  |    unsigned int I;
                              881 ; 273  |} dcdc_vdda_type;
                              882 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                              883 ; 275  |
                              884 ; 276  |
                              885 ; 277  |
                              886 ; 278  |
                              887 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                              888 ; 280  |
                              889 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                              890 ; 282  |
                              891 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                              892 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                              893 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                              894 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                              895 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                              896 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                              897 ; 289  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              898 ; 290  |
                              899 ; 291  |
                              900 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                              901 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                              902 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                              903 ; 295  |
                              904 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                              905 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
                              906 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
                              907 ; 299  |
                              908 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                              909 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                              910 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                              911 ; 303  |
                              912 ; 304  |
                              913 ; 305  |typedef union               
                              914 ; 306  |{
                              915 ; 307  |    struct {
                              916 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                              917 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                              918 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                              919 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                              920 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                              921 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                              922 ; 314  |    } B;
                              923 ; 315  |    unsigned int I;
                              924 ; 316  |} dcdc2_ctrl0_type; 
                              925 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                              926 ; 318  |
                              927 ; 319  |
                              928 ; 320  |
                              929 ; 321  |
                              930 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                              931 ; 323  |
                              932 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                              933 ; 325  |
                              934 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                              935 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                              936 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                              937 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                              938 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                              939 ; 331  |
                              940 ; 332  |
                              941 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                              942 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                              943 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                              944 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                              945 ; 337  |
                              946 ; 338  |
                              947 ; 339  |
                              948 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                              949 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
                              950 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                              951 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              952 ; 344  |
                              953 ; 345  |
                              954 ; 346  |
                              955 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                              956 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                              957 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                              958 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                              959 ; 351  |
                              960 ; 352  |
                              961 ; 353  |typedef union               
                              962 ; 354  |{
                              963 ; 355  |    struct {
                              964 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                              965 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                              966 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                              967 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                              968 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                              969 ; 361  |    } B;
                              970 ; 362  |    unsigned int I;
                              971 ; 363  |} dcdc2_ctrl1_type;
                              972 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                              973 ; 365  |
                              974 ; 366  |
                              975 ; 367  |
                              976 ; 368  |
                              977 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                              978 ; 370  |
                              979 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                              980 ; 372  |
                              981 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                              982 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                              983 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                              984 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                              985 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                              986 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                              987 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                              988 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                              989 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                              990 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                              991 ; 383  |
                              992 ; 384  |
                              993 ; 385  |
                              994 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                              995 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                              996 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                              997 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                              998 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                              999 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             1000 ; 392  |
                             1001 ; 393  |
                             1002 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
                             1003 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                             1004 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
                             1005 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                             1006 ; 398  |
                             1007 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1008 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                             1009 ; 401  |
                             1010 ; 402  |
                             1011 ; 403  |
                             1012 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             1013 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             1014 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             1015 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             1016 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             1017 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             1018 ; 410  |
                             1019 ; 411  |
                             1020 ; 412  |typedef union               
                             1021 ; 413  |{
                             1022 ; 414  |    struct {
                             1023 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             1024 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             1025 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             1026 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             1027 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             1028 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             1029 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             1030 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             1031 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             1032 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             1033 ; 425  |    } B;
                             1034 ; 426  |    unsigned int I;
                             1035 ; 427  |} speed_type;
                             1036 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                             1037 ; 429  |
                             1038 ; 430  |
                             1039 ; 431  |
                             1040 ; 432  |
                             1041 ; 433  |
                             1042 ; 434  |
                             1043 ; 435  |
                             1044 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             1045 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             1046 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             1047 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             1048 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             1049 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             1050 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             1051 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             1052 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             1053 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             1054 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             1055 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             1056 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             1057 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             1058 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             1059 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             1060 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             1061 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             1062 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             1063 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             1064 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             1065 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             1066 ; 458  |
                             1067 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1068 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             1069 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             1070 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             1071 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             1072 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             1073 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             1074 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             1075 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             1076 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             1077 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             1078 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             1079 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             1080 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             1081 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             1082 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             1083 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             1084 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             1085 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             1086 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             1087 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             1088 ; 480  |
                             1089 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                             1090 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             1091 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             1092 ; 484  |
                             1093 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             1094 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             1095 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                             1096 ; 488  |
                             1097 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
                             1098 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             1099 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             1100 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             1101 ; 493  |
                             1102 ; 494  |typedef union               
                             1103 ; 495  |{
                             1104 ; 496  |    struct {
                             1105 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             1106 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             1107 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             1108 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             1109 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             1110 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             1111 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             1112 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             1113 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             1114 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             1115 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             1116 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             1117 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             1118 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             1119 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             1120 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1121 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             1122 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             1123 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             1124 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             1125 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             1126 ; 518  |    } B;
                             1127 ; 519  |    unsigned int I;
                             1128 ; 520  |} usb_dcdctbr_type;
                             1129 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
                             1130 ; 522  |
                             1131 ; 523  |
                             1132 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             1133 ; 525  |
                             1134 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             1135 ; 527  |
                             1136 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             1137 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             1138 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             1139 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             1140 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             1141 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             1142 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             1143 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             1144 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             1145 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             1146 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             1147 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             1148 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             1149 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             1150 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             1151 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             1152 ; 544  |
                             1153 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             1154 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             1155 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             1156 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             1157 ; 549  |
                             1158 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             1159 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             1160 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             1161 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             1162 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             1163 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             1164 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             1165 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             1166 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             1167 ; 559  |
                             1168 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             1169 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
                             1170 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                             1171 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
                             1172 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             1173 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             1174 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1175 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             1176 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             1177 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             1178 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             1179 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             1180 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             1181 ; 573  |
                             1182 ; 574  |
                             1183 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                             1184 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             1185 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             1186 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             1187 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             1188 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                             1189 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                             1190 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                             1191 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
                             1192 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                             1193 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                             1194 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
                             1195 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                             1196 ; 588  |
                             1197 ; 589  |typedef union               
                             1198 ; 590  |{
                             1199 ; 591  |    struct {
                             1200 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             1201 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             1202 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             1203 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             1204 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             1205 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             1206 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                             1207 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                             1208 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             1209 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             1210 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             1211 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             1212 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             1213 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                             1214 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             1215 ; 607  |    } B;
                             1216 ; 608  |    unsigned int I;
                             1217 ; 609  |} usb_pwr_charge_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1218 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                             1219 ; 611  |
                             1220 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             1221 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             1222 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             1223 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             1224 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             1225 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             1226 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             1227 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             1228 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             1229 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             1230 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             1231 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             1232 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             1233 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             1234 ; 626  |
                             1235 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             1236 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             1237 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             1238 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             1239 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             1240 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             1241 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             1242 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             1243 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             1244 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             1245 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             1246 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             1247 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             1248 ; 640  |
                             1249 ; 641  |typedef union               
                             1250 ; 642  |{
                             1251 ; 643  |    struct {       
                             1252 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             1253 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             1254 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             1255 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             1256 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             1257 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             1258 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             1259 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             1260 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             1261 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             1262 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             1263 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                             1264 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             1265 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             1266 ; 658  |    } B;
                             1267 ; 659  |    int I;
                             1268 ; 660  |} usb_dcdcpersist_type;
                             1269 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                             1270 ; 662  |
                             1271 ; 663  |
                             1272 ; 664  |
                             1273 ; 665  |#endif
                             1274 ; 666  |
                             1275 ; 667  |
                             1276 ; 668  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1277 
                             1279 
                             1280 ; 14   |#include "battery.h"
                             1281 
                             1283 
                             1284 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             1285 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2004
                             1286 ; 3    |//;
                             1287 ; 4    |//; Filename: battery.h
                             1288 ; 5    |//; Description: 
                             1289 ; 6    |//;///////////////////////////////////////////////////////////////////////////////
                             1290 ; 7    |
                             1291 ; 8    |#ifndef _BATTERY_H
                             1292 ; 9    |#define _BATTERY_H
                             1293 ; 10   |
                             1294 ; 11   |
                             1295 ; 12   |// Functions  
                             1296 ; 13   |extern _reentrant void SysLRADCBrownoutInit(WORD wLowResADCBrownoutLevel);
                             1297 ; 14   |extern _reentrant WORD SysBatteryGetLevel(void);
                             1298 ; 15   |extern _reentrant WORD MvToLradcResult(WORD mVolts);
                             1299 ; 16   |extern _reentrant void SysBatteryLRADCInit(void);
                             1300 ; 17   |extern _reentrant void SysLRADCBrownoutIsrInit(void);
                             1301 ; 18   |
                             1302 ; 19   |// player resource drive refresh allowed only when battery usable % is above this value. 
                             1303 ; 20   |// 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline volt
                                  age to do a refresh.
                             1304 ; 21   |// LIION will also require 50% which will work but that could be changed in the future. 
                             1305 ; 22   |#define RESOURCE_REFRESH_MIN_BATT_PCT 50
                             1306 ; 23   |
                             1307 ; 24   |
                             1308 ; 25   |#endif // _BATTERY_H
                             1309 ; 26   |
                             1310 ; 27   |
                             1311 ; 28   |
                             1312 ; 29   |
                             1313 
                             1315 
                             1316 ; 15   |#include "lowresolutionadc.h"
                             1317 
                             1319 
                             1320 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             1321 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                             1322 ; 3    |//;
                             1323 ; 4    |//; Filename:    lowresolutionadc.h
                             1324 ; 5    |//; Description: General purpose interface to LRADCs
                             1325 ; 6    |//;              Generic symbols are mapped to more specific symbols in inc\34xx\regslradc
                                  .inc files
                             1326 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                             1327 ; 8    |
                             1328 ; 9    |#ifndef _LOWRESOLUTIONADC_H
                             1329 ; 10   |#define _LOWRESOLUTIONADC_H
                             1330 ; 11   |
                             1331 ; 12   |#include "regslradc.h"
                             1332 
                             1334 
                             1335 ; 1    |#if !(defined(regslradcinc))
                             1336 ; 2    |
                             1337 ; 3    |#define regslradcinc 1
                             1338 ; 4    |
                             1339 ; 5    |#include "types.h"
                             1340 
                             1342 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1343 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1344 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1345 ; 3    |//
                             1346 ; 4    |// Filename: types.h
                             1347 ; 5    |// Description: Standard data types
                             1348 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1349 ; 7    |
                             1350 ; 8    |#ifndef _TYPES_H
                             1351 ; 9    |#define _TYPES_H
                             1352 ; 10   |
                             1353 ; 11   |// TODO:  move this outta here!
                             1354 ; 12   |#if !defined(NOERROR)
                             1355 ; 13   |#define NOERROR 0
                             1356 ; 14   |#define SUCCESS 0
                             1357 ; 15   |#endif 
                             1358 ; 16   |#if !defined(SUCCESS)
                             1359 ; 17   |#define SUCCESS  0
                             1360 ; 18   |#endif
                             1361 ; 19   |#if !defined(ERROR)
                             1362 ; 20   |#define ERROR   -1
                             1363 ; 21   |#endif
                             1364 ; 22   |#if !defined(FALSE)
                             1365 ; 23   |#define FALSE 0
                             1366 ; 24   |#endif
                             1367 ; 25   |#if !defined(TRUE)
                             1368 ; 26   |#define TRUE  1
                             1369 ; 27   |#endif
                             1370 ; 28   |
                             1371 ; 29   |#if !defined(NULL)
                             1372 ; 30   |#define NULL 0
                             1373 ; 31   |#endif
                             1374 ; 32   |
                             1375 ; 33   |#define MAX_INT     0x7FFFFF
                             1376 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1377 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1378 ; 36   |#define MAX_ULONG   (-1) 
                             1379 ; 37   |
                             1380 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1381 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1382 ; 40   |
                             1383 ; 41   |
                             1384 ; 42   |#define BYTE    unsigned char       // btVarName
                             1385 ; 43   |#define CHAR    signed char         // cVarName
                             1386 ; 44   |#define USHORT  unsigned short      // usVarName
                             1387 ; 45   |#define SHORT   unsigned short      // sVarName
                             1388 ; 46   |#define WORD    unsigned int        // wVarName
                             1389 ; 47   |#define INT     signed int          // iVarName
                             1390 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1391 ; 49   |#define LONG    signed long         // lVarName
                             1392 ; 50   |#define BOOL    unsigned int        // bVarName
                             1393 ; 51   |#define FRACT   _fract              // frVarName
                             1394 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1395 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1396 ; 54   |#define FLOAT   float               // fVarName
                             1397 ; 55   |#define DBL     double              // dVarName
                             1398 ; 56   |#define ENUM    enum                // eVarName
                             1399 ; 57   |#define CMX     _complex            // cmxVarName
                             1400 ; 58   |typedef WORD UCS3;                   // 
                             1401 ; 59   |
                             1402 ; 60   |#define UINT16  unsigned short
                             1403 ; 61   |#define UINT8   unsigned char   
                             1404 ; 62   |#define UINT32  unsigned long
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1405 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1406 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1407 ; 65   |#define WCHAR   UINT16
                             1408 ; 66   |
                             1409 ; 67   |//UINT128 is 16 bytes or 6 words
                             1410 ; 68   |typedef struct UINT128_3500 {   
                             1411 ; 69   |    int val[6];     
                             1412 ; 70   |} UINT128_3500;
                             1413 ; 71   |
                             1414 ; 72   |#define UINT128   UINT128_3500
                             1415 ; 73   |
                             1416 ; 74   |// Little endian word packed byte strings:   
                             1417 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1418 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1419 ; 77   |// Little endian word packed byte strings:   
                             1420 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1421 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1422 ; 80   |
                             1423 ; 81   |// Declare Memory Spaces To Use When Coding
                             1424 ; 82   |// A. Sector Buffers
                             1425 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1426 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1427 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1428 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1429 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1430 ; 88   |// B. Media DDI Memory
                             1431 ; 89   |#define MEDIA_DDI_MEM _Y
                             1432 ; 90   |
                             1433 ; 91   |
                             1434 ; 92   |
                             1435 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1436 ; 94   |// Examples of circular pointers:
                             1437 ; 95   |//    INT CIRC cpiVarName
                             1438 ; 96   |//    DWORD CIRC cpdwVarName
                             1439 ; 97   |
                             1440 ; 98   |#define RETCODE INT                 // rcVarName
                             1441 ; 99   |
                             1442 ; 100  |// generic bitfield structure
                             1443 ; 101  |struct Bitfield {
                             1444 ; 102  |    unsigned int B0  :1;
                             1445 ; 103  |    unsigned int B1  :1;
                             1446 ; 104  |    unsigned int B2  :1;
                             1447 ; 105  |    unsigned int B3  :1;
                             1448 ; 106  |    unsigned int B4  :1;
                             1449 ; 107  |    unsigned int B5  :1;
                             1450 ; 108  |    unsigned int B6  :1;
                             1451 ; 109  |    unsigned int B7  :1;
                             1452 ; 110  |    unsigned int B8  :1;
                             1453 ; 111  |    unsigned int B9  :1;
                             1454 ; 112  |    unsigned int B10 :1;
                             1455 ; 113  |    unsigned int B11 :1;
                             1456 ; 114  |    unsigned int B12 :1;
                             1457 ; 115  |    unsigned int B13 :1;
                             1458 ; 116  |    unsigned int B14 :1;
                             1459 ; 117  |    unsigned int B15 :1;
                             1460 ; 118  |    unsigned int B16 :1;
                             1461 ; 119  |    unsigned int B17 :1;
                             1462 ; 120  |    unsigned int B18 :1;
                             1463 ; 121  |    unsigned int B19 :1;
                             1464 ; 122  |    unsigned int B20 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1465 ; 123  |    unsigned int B21 :1;
                             1466 ; 124  |    unsigned int B22 :1;
                             1467 ; 125  |    unsigned int B23 :1;
                             1468 ; 126  |};
                             1469 ; 127  |
                             1470 ; 128  |union BitInt {
                             1471 ; 129  |        struct Bitfield B;
                             1472 ; 130  |        int        I;
                             1473 ; 131  |};
                             1474 ; 132  |
                             1475 ; 133  |#define MAX_MSG_LENGTH 10
                             1476 ; 134  |struct CMessage
                             1477 ; 135  |{
                             1478 ; 136  |        unsigned int m_uLength;
                             1479 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1480 ; 138  |};
                             1481 ; 139  |
                             1482 ; 140  |typedef struct {
                             1483 ; 141  |    WORD m_wLength;
                             1484 ; 142  |    WORD m_wMessage;
                             1485 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1486 ; 144  |} Message;
                             1487 ; 145  |
                             1488 ; 146  |struct MessageQueueDescriptor
                             1489 ; 147  |{
                             1490 ; 148  |        int *m_pBase;
                             1491 ; 149  |        int m_iModulo;
                             1492 ; 150  |        int m_iSize;
                             1493 ; 151  |        int *m_pHead;
                             1494 ; 152  |        int *m_pTail;
                             1495 ; 153  |};
                             1496 ; 154  |
                             1497 ; 155  |struct ModuleEntry
                             1498 ; 156  |{
                             1499 ; 157  |    int m_iSignaledEventMask;
                             1500 ; 158  |    int m_iWaitEventMask;
                             1501 ; 159  |    int m_iResourceOfCode;
                             1502 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1503 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1504 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1505 ; 163  |    int m_uTimeOutHigh;
                             1506 ; 164  |    int m_uTimeOutLow;
                             1507 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1508 ; 166  |};
                             1509 ; 167  |
                             1510 ; 168  |union WaitMask{
                             1511 ; 169  |    struct B{
                             1512 ; 170  |        unsigned int m_bNone     :1;
                             1513 ; 171  |        unsigned int m_bMessage  :1;
                             1514 ; 172  |        unsigned int m_bTimer    :1;
                             1515 ; 173  |        unsigned int m_bButton   :1;
                             1516 ; 174  |    } B;
                             1517 ; 175  |    int I;
                             1518 ; 176  |} ;
                             1519 ; 177  |
                             1520 ; 178  |
                             1521 ; 179  |struct Button {
                             1522 ; 180  |        WORD wButtonEvent;
                             1523 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1524 ; 182  |};
                             1525 ; 183  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1526 ; 184  |struct Message {
                             1527 ; 185  |        WORD wMsgLength;
                             1528 ; 186  |        WORD wMsgCommand;
                             1529 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1530 ; 188  |};
                             1531 ; 189  |
                             1532 ; 190  |union EventTypes {
                             1533 ; 191  |        struct CMessage msg;
                             1534 ; 192  |        struct Button Button ;
                             1535 ; 193  |        struct Message Message;
                             1536 ; 194  |};
                             1537 ; 195  |
                             1538 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1539 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1540 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1541 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1542 ; 200  |
                             1543 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1544 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1545 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1546 ; 204  |
                             1547 ; 205  |#if DEBUG
                             1548 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1549 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1550 ; 208  |#else 
                             1551 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1552 ; 210  |#define DebugBuildAssert(x)    
                             1553 ; 211  |#endif
                             1554 ; 212  |
                             1555 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1556 ; 214  |//  #pragma asm
                             1557 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1558 ; 216  |//  #pragma endasm
                             1559 ; 217  |
                             1560 ; 218  |
                             1561 ; 219  |#ifdef COLOR_262K
                             1562 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1563 ; 221  |#elif defined(COLOR_65K)
                             1564 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1565 ; 223  |#else
                             1566 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1567 ; 225  |#endif
                             1568 ; 226  |    
                             1569 ; 227  |#endif // #ifndef _TYPES_H
                             1570 
                             1572 
                             1573 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1574 ; 7    |
                             1575 ; 8    |//   SYSTEM STMP Registers 
                             1576 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             1577 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1578 ; 11   |
                             1579 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             1580 ; 13   |
                             1581 ; 14   |
                             1582 ; 15   |
                             1583 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             1584 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1585 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             1586 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             1587 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             1588 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             1589 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             1590 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             1591 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             1592 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             1593 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             1594 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             1595 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             1596 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             1597 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             1598 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             1599 ; 32   |
                             1600 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             1601 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             1602 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             1603 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             1604 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             1605 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             1606 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             1607 ; 40   |
                             1608 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             1609 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             1610 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             1611 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             1612 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             1613 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             1614 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             1615 ; 48   |
                             1616 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             1617 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             1618 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             1619 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             1620 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             1621 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             1622 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             1623 ; 56   |
                             1624 ; 57   |typedef union               
                             1625 ; 58   |{
                             1626 ; 59   |    struct {
                             1627 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             1628 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             1629 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             1630 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             1631 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             1632 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             1633 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             1634 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             1635 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             1636 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             1637 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1638 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             1639 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             1640 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             1641 ; 74   |    } B;
                             1642 ; 75   |   unsigned int I;
                             1643 ; 76   |        unsigned int U;
                             1644 ; 77   |} lradc_ctrl_type;
                             1645 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             1646 ; 79   |
                             1647 ; 80   |
                             1648 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1649 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             1650 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             1651 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             1652 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             1653 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             1654 ; 87   |
                             1655 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             1656 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             1657 ; 90   |
                             1658 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             1659 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             1660 ; 93   |
                             1661 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             1662 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             1663 ; 96   |
                             1664 ; 97   |
                             1665 ; 98   |typedef union               
                             1666 ; 99   |{
                             1667 ; 100  |    struct {
                             1668 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             1669 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             1670 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             1671 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             1672 ; 105  |    } B;
                             1673 ; 106  |    unsigned int I;
                             1674 ; 107  |} lradc_thrsh_type;
                             1675 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             1676 ; 109  |
                             1677 ; 110  |
                             1678 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             1679 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             1680 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             1681 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             1682 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             1683 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             1684 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             1685 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             1686 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             1687 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             1688 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             1689 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             1690 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1691 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             1692 ; 125  |
                             1693 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             1694 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             1695 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             1696 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             1697 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             1698 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             1699 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             1700 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             1701 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             1702 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             1703 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             1704 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             1705 ; 138  |
                             1706 ; 139  |
                             1707 ; 140  |
                             1708 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             1709 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             1710 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             1711 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             1712 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             1713 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             1714 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             1715 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             1716 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             1717 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             1718 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             1719 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             1720 ; 153  |
                             1721 ; 154  |
                             1722 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             1723 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             1724 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             1725 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             1726 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             1727 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             1728 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             1729 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             1730 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             1731 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             1732 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             1733 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             1734 ; 167  |
                             1735 ; 168  |typedef union               
                             1736 ; 169  |{
                             1737 ; 170  |    struct {
                             1738 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             1739 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             1740 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1741 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             1742 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             1743 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             1744 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             1745 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             1746 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             1747 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             1748 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             1749 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             1750 ; 183  |    } B;
                             1751 ; 184  |    unsigned int I;
                             1752 ; 185  |} lradc_result_type;
                             1753 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             1754 ; 187  |
                             1755 ; 188  |
                             1756 ; 189  |
                             1757 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             1758 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             1759 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             1760 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             1761 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             1762 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             1763 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             1764 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             1765 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             1766 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             1767 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             1768 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             1769 ; 202  |
                             1770 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             1771 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             1772 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             1773 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             1774 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             1775 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             1776 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             1777 ; 210  |
                             1778 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             1779 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             1780 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             1781 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                             1782 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             1783 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             1784 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             1785 ; 218  |
                             1786 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             1787 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             1788 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             1789 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1790 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             1791 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             1792 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             1793 ; 226  |
                             1794 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             1795 ; 228  |
                             1796 ; 229  |
                             1797 ; 230  |
                             1798 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             1799 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             1800 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             1801 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             1802 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             1803 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             1804 ; 237  |
                             1805 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             1806 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             1807 ; 240  |
                             1808 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             1809 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             1810 ; 243  |
                             1811 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             1812 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             1813 ; 246  |
                             1814 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             1815 ; 248  |
                             1816 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             1817 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             1818 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             1819 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             1820 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             1821 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             1822 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             1823 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             1824 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             1825 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             1826 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             1827 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             1828 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             1829 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             1830 ; 263  |
                             1831 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             1832 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             1833 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             1834 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             1835 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             1836 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             1837 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             1838 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             1839 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             1840 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             1841 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             1842 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             1843 ; 276  |
                             1844 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1845 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             1846 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             1847 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             1848 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             1849 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             1850 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             1851 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             1852 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             1853 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             1854 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             1855 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             1856 ; 289  |
                             1857 ; 290  |
                             1858 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             1859 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             1860 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             1861 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             1862 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             1863 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             1864 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             1865 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             1866 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             1867 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             1868 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             1869 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             1870 ; 303  |
                             1871 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             1872 ; 305  |
                             1873 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             1874 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             1875 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             1876 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             1877 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             1878 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             1879 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             1880 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             1881 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             1882 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             1883 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             1884 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             1885 ; 318  |
                             1886 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             1887 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             1888 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             1889 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             1890 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             1891 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             1892 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             1893 ; 326  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1894 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             1895 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             1896 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             1897 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             1898 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             1899 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             1900 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             1901 ; 334  |
                             1902 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             1903 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             1904 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             1905 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             1906 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             1907 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             1908 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             1909 ; 342  |
                             1910 ; 343  |
                             1911 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             1912 ; 345  |
                             1913 ; 346  |
                             1914 ; 347  |
                             1915 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             1916 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             1917 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             1918 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             1919 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             1920 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             1921 ; 354  |
                             1922 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             1923 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             1924 ; 357  |
                             1925 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             1926 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             1927 ; 360  |
                             1928 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             1929 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             1930 ; 363  |
                             1931 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             1932 ; 365  |
                             1933 ; 366  |
                             1934 ; 367  |
                             1935 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             1936 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             1937 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1938 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             1939 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             1940 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             1941 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             1942 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             1943 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             1944 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             1945 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             1946 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             1947 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             1948 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             1949 ; 382  |
                             1950 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             1951 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             1952 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             1953 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             1954 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             1955 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             1956 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             1957 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             1958 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             1959 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             1960 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             1961 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             1962 ; 395  |
                             1963 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             1964 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             1965 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             1966 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             1967 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             1968 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             1969 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             1970 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             1971 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             1972 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             1973 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             1974 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                             1975 ; 408  |
                             1976 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             1977 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             1978 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             1979 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             1980 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             1981 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             1982 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             1983 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             1984 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             1985 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             1986 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             1987 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1988 ; 421  |
                             1989 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             1990 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             1991 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             1992 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             1993 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             1994 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             1995 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             1996 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             1997 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             1998 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             1999 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             2000 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             2001 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             2002 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             2003 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             2004 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             2005 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             2006 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             2007 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             2008 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             2009 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             2010 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             2011 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             2012 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             2013 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             2014 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             2015 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             2016 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             2017 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             2018 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             2019 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             2020 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             2021 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             2022 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             2023 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             2024 ; 457  |
                             2025 ; 458  |//Needed by button.asm
                             2026 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             2027 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             2028 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             2029 ; 462  |
                             2030 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             2031 ; 464  |
                             2032 ; 465  |#endif
                             2033 ; 466  |
                             2034 ; 467  |
                             2035 
                             2037 
                             2038 ; 13   |
                             2039 ; 14   |// Variables
                             2040 ; 15   |extern WORD LowResAdcStatus;
                             2041 ; 16   |extern WORD LowResAdcBattResult, LowResAdcBattAvg;                                      //
                                   Results and Averages come from buttons.asm
                             2042 ; 17   |extern WORD LowResAdcAuxResult,  LowResAdcAuxAvg;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2043 ; 18   |extern WORD LowResAdcAux2Result, LowResAdcAux2Avg;                                      //
                                   Aux2 result and average valid for 3500
                             2044 ; 19   |
                             2045 ; 20   |
                             2046 ; 21   |// Types
                             2047 ; 22   |enum LowResADCChannel {BATT, AUX, AUX2};                                                  
                                    // AUX2 valid for 3500
                             2048 ; 23   |enum LowResADCHalfPwr {OFF = 0, ON = LRADC_HALF_POWER_SETMASK};
                             2049 ; 24   |enum LowResADCRef     {REF_0 = HW_LRADC_REF_0_SETMASK,
                             2050 ; 25   |                       REF_1 = HW_LRADC_REF_1_SETMASK,
                             2051 ; 26   |                                           REF_2 = HW_LRADC_REF_2_SETMASK,
                             2052 ; 27   |                                           REF_3 = HW_LRADC_REF_3_SETMASK,
                             2053 ; 28   |                                           REF_4 = HW_LRADC_REF_4_SETMASK,
                             2054 ; 29   |                                           REF_5 = HW_LRADC_REF_5_SETMASK,
                             2055 ; 30   |                                           REF_6 = HW_LRADC_REF_6_SETMASK,
                             2056 ; 31   |                                           REF_7 = HW_LRADC_REF_7_SETMASK
                             2057 ; 32   |                      };
                             2058 ; 33   |
                             2059 ; 34   |
                             2060 ; 35   |// ADC Reference resolutions in mV*10
                             2061 ; 36   |// 1 ADC count = Vref(mV)/([2^N] - 1) where N = # bits in result, and Vref based on select
                                  ed LRADC reference.
                             2062 ; 37   |#define RES_REF_0      HW_LRADC_RES_REF_0
                             2063 ; 38   |#define RES_REF_1      HW_LRADC_RES_REF_1
                             2064 ; 39   |#define RES_REF_2      HW_LRADC_RES_REF_2
                             2065 ; 40   |#define RES_REF_3      HW_LRADC_RES_REF_3
                             2066 ; 41   |#define RES_REF_4      HW_LRADC_RES_REF_4
                             2067 ; 42   |#define RES_REF_5      HW_LRADC_RES_REF_5
                             2068 ; 43   |#define RES_REF_6      HW_LRADC_RES_REF_6
                             2069 ; 44   |#define RES_REF_7      HW_LRADC_RES_REF_7
                             2070 ; 45   |
                             2071 ; 46   |
                             2072 ; 47   |// These bits are used against LowResAdcStatus, to signal which channels to read in button
                                  s routine
                             2073 ; 48   |#define LOW_RES_ADC_BATT_EN_MASK    1 
                             2074 ; 49   |#define LOW_RES_ADC_AUX_EN_MASK         2 
                             2075 ; 50   |#define LOW_RES_ADC_AUX2_EN_MASK        4
                             2076 ; 51   |
                             2077 ; 52   |/////////////////////////////////////////////////////////////////////////////////////////
                             2078 ; 53   |//
                             2079 ; 54   |//>  Name:          SysLowResolutionAdcReadBin
                             2080 ; 55   |//
                             2081 ; 56   |//   Type:          Function 
                             2082 ; 57   |//
                             2083 ; 58   |//   Description:   Returns the instantaneous Result of the Low Resolution ADC Channel spe
                                  cified
                             2084 ; 59   |//
                             2085 ; 60   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                             2086 ; 61   |//                  BATT for Battery channel
                             2087 ; 62   |//                  AUX for Auxiliary channel 1
                             2088 ; 63   |//                  AUX2 for Auxiliary channel 2
                             2089 ; 64   |//
                             2090 ; 65   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                             2091 ; 66   |//
                             2092 ; 67   |//   Notes:         none
                             2093 ; 68   |//<
                             2094 ; 69   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             2095 ; 70   |#ifdef DEVICE_3500
                             2096 ; 71   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_BATT_RESULT.B.DATA_OUT : (n == AUX 
                                  ? HW_LRADC1_RESULT.B.DATA_OUT: HW_LRADC2_RESULT.B.DATA_OUT))
                             2097 ; 72   |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2098 ; 73   |//3410 does not support AUX2
                             2099 ; 74   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_LRADC_RES.B.BATLRR : (n == AUX ? HW
                                  _LRADC_RES.B.AUXLRR: 0))
                             2100 ; 75   |#endif
                             2101 ; 76   |
                             2102 ; 77   |/////////////////////////////////////////////////////////////////////////////////////////
                             2103 ; 78   |//
                             2104 ; 79   |//>  Name:          SysLowResolutionAdcReadAvg
                             2105 ; 80   |//
                             2106 ; 81   |//   Type:          Function 
                             2107 ; 82   |//
                             2108 ; 83   |//   Description:   Reads the Averaged Result of the Low Resolution ADC Channel specified
                             2109 ; 84   |//
                             2110 ; 85   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                             2111 ; 86   |//                  BATT for Battery channel
                             2112 ; 87   |//                  AUX for Auxiliary channel 1
                             2113 ; 88   |//                  AUX2 for Auxiliary channel 2
                             2114 ; 89   |//
                             2115 ; 90   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                             2116 ; 91   |//
                             2117 ; 92   |//   Notes:         The average is done using 256 samples
                             2118 ; 93   |//<
                             2119 ; 94   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             2120 ; 95   |#define SysLowResolutionAdcReadAvg(n)    (n==BATT ? LowResAdcBattAvg : (n == AUX ? LowResA
                                  dcAuxAvg : LowResAdcAux2Avg))
                             2121 ; 96   |
                             2122 ; 97   |// Functions  
                             2123 ; 98   |void _reentrant SysLowResolutionADCInit(enum LowResADCChannel Adc, enum LowResADCHalfPwr P
                                  ower, enum LowResADCRef Ref);
                             2124 ; 99   |INT SysLowResolutionAdcReadVolt(BYTE bAdcChannel,BOOL bAverage);
                             2125 ; 100  |
                             2126 ; 101  |// Equates
                             2127 ; 102  |#define AVERAGE_RESULT  TRUE
                             2128 ; 103  |#define INSTANT_RESULT  FALSE
                             2129 ; 104  |
                             2130 ; 105  |#endif // _LOWRESOLUTIONADC_H
                             2131 
                             2133 
                             2134 ; 16   |#include "battery_config.h"
                             2135 
                             2137 
                             2138 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             2139 ; 2    |// Sigmatel, Inc  copyright (C) 2003-2004
                             2140 ; 3    |// Filename: battery_config.h
                             2141 ; 4    |// Battery Low Resolution ADC values & recharge values 
                             2142 ; 5    |///////////////////////////////////////////////////////////////////////////////
                             2143 ; 6    |
                             2144 ; 7    |#ifdef BATTERY_TYPE_LI_ION
                             2145 ; 8    |    //these are 3500 only
                             2146 ; 9    |    #define VBATT_REF           REF_5120MV
                             2147 ; 10   |    #define VBATT_MIN_MV        3000
                             2148 ; 11   |    #define VBATT_MAX_MV        4200
                             2149 ; 12   |
                             2150 ; 13   |    #define VBATT_BO_MV         3000
                             2151 ; 14   |
                             2152 ; 15   |    #define BATT_BROWNOUT       VBATT_BO_MV
                             2153 ; 16   |
                             2154 ; 17   |    #ifndef LIION_BATTERY_VOLTAGE
                             2155 ; 18   |    //this is in mV
                             2156 ; 19   |    //The reference design uses a 4.2V LiIon battery
                             2157 ; 20   |    #define LIION_BATTERY_VOLTAGE LIION_BATTERY_VOLTAGE_4_2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2158 ; 21   |    #endif 
                             2159 ; 22   |
                             2160 ; 23   |    #ifndef LIION_CONDITIONING_VOLTAGE_THRESHHOLD
                             2161 ; 24   |    //This is in millivolts
                             2162 ; 25   |    #define LIION_CONDITIONING_VOLTAGE_THRESHHOLD 3000
                             2163 ; 26   |    #endif
                             2164 ; 27   |
                             2165 ; 28   |    #ifndef LIION_CONDITIONING_CURRENT_LIMIT
                             2166 ; 29   |    //This is in mA.   
                             2167 ; 30   |    //Refer to the battery data sheet for the proper value
                             2168 ; 31   |    //the reference design uses a 400mAh battery that suggests 40mA is a good conditioning
                                   current
                             2169 ; 32   |    #define LIION_CONDITIONING_CURRENT_LIMIT 40
                             2170 ; 33   |    #endif 
                             2171 ; 34   |
                             2172 ; 35   |    #ifndef LIION_CHARGING_TIMEOUT
                             2173 ; 36   |    //the default is 4 hours
                             2174 ; 37   |    #define LIION_CHARGING_TIMEOUT  ((DWORD)(DWORD)4*(DWORD)60*(DWORD)60*(DWORD)1000)
                             2175 ; 38   |    #endif 
                             2176 ; 39   |
                             2177 ; 40   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD
                             2178 ; 41   |    //We want to enter the 'top-off' mode when the voltage differential between
                             2179 ; 42   |    //charging on and off is 20 mV
                             2180 ; 43   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD  20
                             2181 ; 44   |    #endif 
                             2182 ; 45   |
                             2183 ; 46   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT
                             2184 ; 47   |    //we want 10 samples of the non-charging current to be within the 
                             2185 ; 48   |    //differential threshhold.  
                             2186 ; 49   |
                             2187 ; 50   |#ifdef STMP_BUILD_PLAYER
                             2188 ; 51   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 5
                             2189 ; 52   |#else
                             2190 ; 53   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 10
                             2191 ; 54   |#endif
                             2192 ; 55   |    #endif 
                             2193 ; 56   |
                             2194 ; 57   |    #ifndef LIION_CHARGING_CURRENT_LIMIT
                             2195 ; 58   |    //This is in mA.   
                             2196 ; 59   |    //Refer to the battery data sheet for the proper value
                             2197 ; 60   |    //the reference design uses a 400mAh battery that suggests 400mA is a good charging cu
                                  rrent
                             2198 ; 61   |    #define LIION_CHARGING_CURRENT_LIMIT 400
                             2199 ; 62   |    #endif 
                             2200 ; 63   |
                             2201 ; 64   |    #ifndef LIION_TOPOFF_TIMEOUT
                             2202 ; 65   |    //After we reach that limit, we want to run for a set amount of time to 'top off' the 
                                  charging
                             2203 ; 66   |    //in this case, 2 minutes (was 30)
                             2204 ; 67   |#ifdef STMP_BUILD_PLAYER
                             2205 ; 68   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)15*(DWORD)60*(DWORD)1000)
                             2206 ; 69   |#else
                             2207 ; 70   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)2*(DWORD)60*(DWORD)1000)
                             2208 ; 71   |#endif
                             2209 ; 72   |    #endif
                             2210 ; 73   |
                             2211 ; 74   |        #ifndef POWER_OFF_FREQUENCY
                             2212 ; 75   |        //Set the Power Off Frequency.  Determines how frequently charging is turned-off. 
                                   
                             2213 ; 76   |#ifdef STMP_BUILD_PLAYER
                             2214 ; 77   |        #define POWER_OFF_FREQUENCY 40
                             2215 ; 78   |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2216 ; 79   |        #define POWER_OFF_FREQUENCY 500
                             2217 ; 80   |#endif
                             2218 ; 81   |        #endif
                             2219 ; 82   |#endif
                             2220 ; 83   |
                             2221 ; 84   |////////////////////////////////////////////////////////////////////////////////
                             2222 ; 85   |#ifdef BATTERY_TYPE_NIMH
                             2223 ; 86   |    #define ONE  1
                             2224 ; 87   |    #define ZERO 0
                             2225 ; 88   |
                             2226 ; 89   |    //NOTE:  Battery is currently Hardcoded to REF_5120MV in USBMSC
                             2227 ; 90   |#ifdef STMP_BUILD_PLAYER
                             2228 ; 91   |    #define VBATT_REF          REF_2700MV
                             2229 ; 92   |    #define VBATT_MIN_MV       900
                             2230 ; 93   |    #define VBATT_MAX_MV       1500
                             2231 ; 94   |    #define VBATT_BO_MV        840
                             2232 ; 95   |#else
                             2233 ; 96   |    #define VBATT_REF          REF_5120MV
                             2234 ; 97   |    #define VBATT_MIN_MV       900
                             2235 ; 98   |    #define VBATT_MAX_MV       1200
                             2236 ; 99   |    #define VBATT_BO_MV        850
                             2237 ; 100  |#endif
                             2238 ; 101  |
                             2239 ; 102  |    #ifdef DEVICE_3500
                             2240 ; 103  |        #define BATT_BROWNOUT                           VBATT_BO_MV
                             2241 ; 104  |    #else
                             2242 ; 105  |        #define BATT_BROWNOUT               HW_LRADC_BO_TRIP_830MV_SETMASK
                             2243 ; 106  |    #endif
                             2244 ; 107  |    // nimh settings above this line are similar to alkaline values below except v max.
                             2245 ; 108  |    
                             2246 ; 109  |    #ifndef NIMH_BATTERY_VOLTAGE
                             2247 ; 110  |    //Units: mV. This is the rated battery voltage.
                             2248 ; 111  |    //The reference design uses a 1.5V NIMH battery
                             2249 ; 112  |    #define NIMH_BATTERY_VOLTAGE NIMH_BATTERY_VOLTAGE_1_2
                             2250 ; 113  |    #endif 
                             2251 ; 114  |
                             2252 ; 115  |    #ifndef NIMH_VOLTAGE_THRESHHOLD_MV
                             2253 ; 116  |    //Units: mV      Stop charging if this ADC battery voltage is measured. This can occur
                                   if an alkaline is inserted.
                             2254 ; 117  |    #define NIMH_VOLTAGE_THRESHHOLD_MV 1800
                             2255 ; 118  |    #endif
                             2256 ; 119  |    // 1 enables alkaline detection via brief charge current & voltage threshold check.
                             2257 ; 120  |    #define ALKALINE_DETECTION_IMPULSE_CHARGE_ENABLE 0 /* LEAVE DISABLED. Unimplemented. *
                                  /
                             2258 ; 121  |
                             2259 ; 122  |    //------- NIMH Detection via exposed batt case check w/ gpio. You must configure a gpi
                                  o reg & pin num also below.
                             2260 ; 123  |    #define BATTERY_CASE_POLARITY_DETECT_ENABLE 0 // Verified. GPIO pin setup in nimh.c in
                                  it, External pullup R (47kOhm)
                             2261 ; 124  |    // Explanation: General Purpose Input pin can connect to cylindrical batt end corner. 
                                  
                             2262 ; 125  |    // NiMH AAA batteries have ground case exposed at corner, else casing insulation 
                             2263 ; 126  |    //   causes signal to float & external pullup R gives a logic 1 indicating non-nimh. 
                             2264 ; 127  |    // NiMH AA  batteries instead have additional positive terminal exposure (opposite pol
                                  arity). 
                             2265 ; 128  |    //   Ext transistor can Vlevel shift for gpio logic-1 voltage. 
                             2266 ; 129  |    //   non-NIMH casing will allow gpio pin to stay grounded & gives logic 0.
                             2267 ; 130  |
                             2268 ; 131  |    // SET this to ZERO if your NiMH is AAA or has ground case contact (detects NiMH via c
                                  ase (-) contact)
                             2269 ; 132  |    // SET this to ONE if your NiMH battery is AA (detects NiMH via (+) terminal contact).
                                   Requires ext transistor V level shift.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2270 ; 133  |    #define NIMH_BATTERY_CASE_LOGIC_LEVEL ZERO
                             2271 ; 134  |    // *** IF YOU HAVE ENABLED, battery case polarity detection (used with nimh), 
                             2272 ; 135  |    //  NOTE: The GP number and bit number in the four macros below must be set to match y
                                  our input PIN number. 
                             2273 ; 136  |    //    LAYOUT SPECIFIC, but all 3550/3560 qfp and bga can use a single GPIO register & 
                                  bit num as below. 
                             2274 ; 137  |    //    SigmaTel HW apps recommends pin GP37= pin 17 (100qfp)= pin j7 (bga)= cpu card pi
                                  n24= GP1 Bit13 per 35xx datasheet.
                             2275 ; 138  |    #define CONFIGURED_GPIO_INPUT_BIT_FOR_BATTERY_CASE_POLARITY ( HW_GP1DIR.B.B13 )
                             2276 ; 139  |    // GPIO Enable register number as GPIO function.
                             2277 ; 140  |    #define CONFIGURED_BATT_CASE_GP_NUM_ENR (HW_GP1ENR)
                             2278 ; 141  |    // Data output enable reg num to use (will be set as input pin in this case)
                             2279 ; 142  |    #define CONFIGURED_BATT_CASE_GP_NUM_DOER  (HW_GP1DOER)
                             2280 ; 143  |    // bit num to use with desired input pin above
                             2281 ; 144  |    #define CONFIGURED_BATT_CASE_GP_BIT  (HW_GP_B13_SETMASK)
                             2282 ; 145  |    
                             2283 ; 146  |    // Error code returned during charging init when case detect feature enabled but cell 
                                  case not detected.
                             2284 ; 147  |    #define NIMH_POLARITY_NOT_DETECTED (-2)
                             2285 ; 148  |    //------- end batt case polarity detection
                             2286 ; 149  |
                             2287 ; 150  |    //------------------------------------
                             2288 ; 151  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS
                             2289 ; 152  |    // 0.1C = 10 hr charge, but use 12 hours to more fully charge larger cells. (units: ms
                                  ec)
                             2290 ; 153  |    #define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)12*(DWORD)60*(DWORD)60*(D
                                  WORD)1000))
                             2291 ; 154  |    //#define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)10*(DWORD)1000)) //10 s
                                  ec test mode to easily observe transition
                             2292 ; 155  |    #endif 
                             2293 ; 156  |    
                             2294 ; 157  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT
                             2295 ; 158  |    // Units: mA. Refer to the battery data sheet for the proper value. 
                             2296 ; 159  |    // Usually 1 C AAA means a charge of 700 mAh, 750 mAh for a few AAA cells (energizer).
                                  
                             2297 ; 160  |    // Assume 700mAh battery so EQUILIBRIUM charge at 0.1C rate (1/10th charge/hr) = 70mA.
                                   
                             2298 ; 161  |    // Register options are 60 or 75mA. Suggest 75mA for AAA. AA's have wide mAh range. Us
                                  e 1/10th of mAh here:
                             2299 ; 162  |    #define NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT 75
                             2300 ; 163  |    #endif   
                             2301 ; 164  |    #ifndef
                             2302 ; 165  |    #define NIMH_TRICKLE_CHARGE_ENABLE 1
                             2303 ; 166  |    #endif
                             2304 ; 167  |    #ifndef NIMH_TRICKLE_CHARGE_CURRENT
                             2305 ; 168  |    #define NIMH_TRICKLE_CHARGE_CURRENT 10  
                             2306 ; 169  |    #endif //25mA is 0.035C rate for a 700mAh cell. 10mA recommended by 35xx charger desig
                                  ner.
                             2307 ; 170  |    //-------------------------------------
                             2308 ; 171  |    #ifndef NIMH_QUICK_CHARGING_TIMEOUT_MS   // NOTE: C/3 quick charging (3.6hrs) is not i
                                  mplemented.
                             2309 ; 172  |    // ~4 hr charge rate of C/3 terminated by one of 3 events: (per Duracell whitepaper) 
                             2310 ; 173  |    //   -dV/minute of 10mV, or 3.6hr timeout (216 minutes), or real temperature>=(60celci
                                  us|140F).
                             2311 ; 174  |    // Thermal warning: at this C/3 charge rate, all 3 of the above termination events mus
                                  t be checked.
                             2312 ; 175  |    #define NIMH_QUICK_CHARGING_TIMEOUT_MS ((DWORD)(DWORD)216*(DWORD)60*(DWORD)1000) 
                             2313 ; 176  |    #endif
                             2314 ; 177  |    #ifndef NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD
                             2315 ; 178  |    #define NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD 10
                             2316 ; 179  |    #endif
                             2317 ; 180  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2318 ; 181  |    // For temp check to function:    10celcius|50F < Ambient Temperature < 45celcius|113F
                                  
                             2319 ; 182  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C 60
                             2320 ; 183  |    #endif
                             2321 ; 184  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F
                             2322 ; 185  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F 140
                             2323 ; 186  |    #endif
                             2324 ; 187  |    // C/3 = 700mA/3 = 233 mA, HW supports 235mA. For C=750mAh: 750mA/3= 250mA. 
                             2325 ; 188  |    #ifndef NIMH_QUICK_CHARGING_CURRENT_LIMIT
                             2326 ; 189  |    #define NIMH_QUICK_CHARGING_CURRENT_LIMIT 235        
                             2327 ; 190  |    #endif    
                             2328 ; 191  |    //-------------------------------------
                             2329 ; 192  |    #ifndef NIMH_FAST_CHARGING_CURRENT_LIMIT  // NOTE: C/2 Fast charging (2hrs) is not imp
                                  lemented. 
                             2330 ; 193  |    // in units of mA.   Temperature measurement required with this mode. 
                             2331 ; 194  |    #define NIMH_FAST_CHARGING_CURRENT_LIMIT 400
                             2332 ; 195  |    #endif      
                             2333 ; 196  |    #ifndef NIMH_FAST_CHARGING_TOPOFF_TIMEOUT
                             2334 ; 197  |    //After we reach that limit, we may want to run for a set amount of time to 'top off'
                             2335 ; 198  |    //the charging in this case,                       n minutes
                             2336 ; 199  |    #define NIMH_FAST_CHARGING_TOPOFF_TIMEOUT ((DWORD)(DWORD)30*(DWORD)60*(DWORD)1000)
                             2337 ; 200  |    #endif
                             2338 ; 201  |
                             2339 ; 202  |        #ifndef POWER_OFF_FREQUENCY
                             2340 ; 203  |        //Set the Power Off Frequency Count.  Determines how frequently charging is turned
                                  -off. 
                             2341 ; 204  |#ifdef STMP_BUILD_PLAYER
                             2342 ; 205  |        #define POWER_OFF_FREQUENCY 40
                             2343 ; 206  |#else
                             2344 ; 207  |        #define POWER_OFF_FREQUENCY 500
                             2345 ; 208  |#endif
                             2346 ; 209  |        #endif
                             2347 ; 210  |    
                             2348 ; 211  |#endif // BATTERY_TYPE_NIMH
                             2349 ; 212  |////////////////////////////////////////////////////////////////////////////////
                             2350 ; 213  |
                             2351 ; 214  |#ifdef BATTERY_TYPE_ALKALINE
                             2352 ; 215  |#ifdef STMP_BUILD_PLAYER
                             2353 ; 216  |    #define VBATT_REF          REF_2700MV
                             2354 ; 217  |    #define VBATT_MIN_MV       900
                             2355 ; 218  |    #define VBATT_MAX_MV       1500
                             2356 ; 219  |    #define VBATT_BO_MV        840
                             2357 ; 220  |#else
                             2358 ; 221  |    #define VBATT_REF          REF_5120MV
                             2359 ; 222  |    #define VBATT_MIN_MV       900
                             2360 ; 223  |    #define VBATT_MAX_MV       1500
                             2361 ; 224  |    #define VBATT_BO_MV        850
                             2362 ; 225  |#endif
                             2363 ; 226  |
                             2364 ; 227  |    #define BATT_BROWNOUT                               VBATT_BO_MV
                             2365 ; 228  |    
                             2366 ; 229  |    #define OXYRIDE_THRESHOLD_MV  1550     // Battery considered Oxyride if avg voltage ex
                                  ceeds 1.55v
                             2367 ; 230  |    #define OXYRIDE_SETBACK_MV     200     // Battery Voltage - VDDD < 200mv for VDDIO sta
                                  bility
                             2368 ; 231  |#endif 
                             2369 
                             2371 
                             2372 ; 17   |
                             2373 ; 18   |#ifdef STMP_BUILD_PLAYER
                             2374 ; 19   |#include "regsusb20phy.h"
                             2375 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2377 
                             2378 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2379 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                             2380 ; 3    |//;  File        : regsusbphy.inc
                             2381 ; 4    |//;  Description : USB20 PHY Register definition
                             2382 ; 5    |//;  Updated 2.23.2003 By M. Henson
                             2383 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2384 ; 7    |
                             2385 ; 8    |// The following naming conventions are followed in this file.
                             2386 ; 9    |// All registers are named using the format...
                             2387 ; 10   |//     HW_<module>_<regname>
                             2388 ; 11   |// where <module> is the module name which can be any of the following...
                             2389 ; 12   |//     USB20
                             2390 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             2391 ; 14   |// module name includes a number starting from 0 for the first instance of
                             2392 ; 15   |// that module)
                             2393 ; 16   |// <regname> is the specific register within that module
                             2394 ; 17   |// We also define the following...
                             2395 ; 18   |//     HW_<module>_<regname>_BITPOS
                             2396 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             2397 ; 20   |//     HW_<module>_<regname>_SETMASK
                             2398 ; 21   |// which does something else, and
                             2399 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             2400 ; 23   |// which does something else.
                             2401 ; 24   |// Other rules
                             2402 ; 25   |//     All caps
                             2403 ; 26   |//     Numeric identifiers start at 0
                             2404 ; 27   |
                             2405 ; 28   |#if !(defined(regsusbphyinc))
                             2406 ; 29   |#define regsusbphyinc 1
                             2407 ; 30   |
                             2408 ; 31   |#include "types.h"
                             2409 
                             2411 
                             2412 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2413 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2414 ; 3    |//
                             2415 ; 4    |// Filename: types.h
                             2416 ; 5    |// Description: Standard data types
                             2417 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2418 ; 7    |
                             2419 ; 8    |#ifndef _TYPES_H
                             2420 ; 9    |#define _TYPES_H
                             2421 ; 10   |
                             2422 ; 11   |// TODO:  move this outta here!
                             2423 ; 12   |#if !defined(NOERROR)
                             2424 ; 13   |#define NOERROR 0
                             2425 ; 14   |#define SUCCESS 0
                             2426 ; 15   |#endif 
                             2427 ; 16   |#if !defined(SUCCESS)
                             2428 ; 17   |#define SUCCESS  0
                             2429 ; 18   |#endif
                             2430 ; 19   |#if !defined(ERROR)
                             2431 ; 20   |#define ERROR   -1
                             2432 ; 21   |#endif
                             2433 ; 22   |#if !defined(FALSE)
                             2434 ; 23   |#define FALSE 0
                             2435 ; 24   |#endif
                             2436 ; 25   |#if !defined(TRUE)
                             2437 ; 26   |#define TRUE  1
                             2438 ; 27   |#endif
                             2439 ; 28   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2440 ; 29   |#if !defined(NULL)
                             2441 ; 30   |#define NULL 0
                             2442 ; 31   |#endif
                             2443 ; 32   |
                             2444 ; 33   |#define MAX_INT     0x7FFFFF
                             2445 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2446 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2447 ; 36   |#define MAX_ULONG   (-1) 
                             2448 ; 37   |
                             2449 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2450 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2451 ; 40   |
                             2452 ; 41   |
                             2453 ; 42   |#define BYTE    unsigned char       // btVarName
                             2454 ; 43   |#define CHAR    signed char         // cVarName
                             2455 ; 44   |#define USHORT  unsigned short      // usVarName
                             2456 ; 45   |#define SHORT   unsigned short      // sVarName
                             2457 ; 46   |#define WORD    unsigned int        // wVarName
                             2458 ; 47   |#define INT     signed int          // iVarName
                             2459 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2460 ; 49   |#define LONG    signed long         // lVarName
                             2461 ; 50   |#define BOOL    unsigned int        // bVarName
                             2462 ; 51   |#define FRACT   _fract              // frVarName
                             2463 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2464 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2465 ; 54   |#define FLOAT   float               // fVarName
                             2466 ; 55   |#define DBL     double              // dVarName
                             2467 ; 56   |#define ENUM    enum                // eVarName
                             2468 ; 57   |#define CMX     _complex            // cmxVarName
                             2469 ; 58   |typedef WORD UCS3;                   // 
                             2470 ; 59   |
                             2471 ; 60   |#define UINT16  unsigned short
                             2472 ; 61   |#define UINT8   unsigned char   
                             2473 ; 62   |#define UINT32  unsigned long
                             2474 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2475 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2476 ; 65   |#define WCHAR   UINT16
                             2477 ; 66   |
                             2478 ; 67   |//UINT128 is 16 bytes or 6 words
                             2479 ; 68   |typedef struct UINT128_3500 {   
                             2480 ; 69   |    int val[6];     
                             2481 ; 70   |} UINT128_3500;
                             2482 ; 71   |
                             2483 ; 72   |#define UINT128   UINT128_3500
                             2484 ; 73   |
                             2485 ; 74   |// Little endian word packed byte strings:   
                             2486 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2487 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2488 ; 77   |// Little endian word packed byte strings:   
                             2489 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2490 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2491 ; 80   |
                             2492 ; 81   |// Declare Memory Spaces To Use When Coding
                             2493 ; 82   |// A. Sector Buffers
                             2494 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2495 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2496 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2497 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2498 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2499 ; 88   |// B. Media DDI Memory
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2500 ; 89   |#define MEDIA_DDI_MEM _Y
                             2501 ; 90   |
                             2502 ; 91   |
                             2503 ; 92   |
                             2504 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2505 ; 94   |// Examples of circular pointers:
                             2506 ; 95   |//    INT CIRC cpiVarName
                             2507 ; 96   |//    DWORD CIRC cpdwVarName
                             2508 ; 97   |
                             2509 ; 98   |#define RETCODE INT                 // rcVarName
                             2510 ; 99   |
                             2511 ; 100  |// generic bitfield structure
                             2512 ; 101  |struct Bitfield {
                             2513 ; 102  |    unsigned int B0  :1;
                             2514 ; 103  |    unsigned int B1  :1;
                             2515 ; 104  |    unsigned int B2  :1;
                             2516 ; 105  |    unsigned int B3  :1;
                             2517 ; 106  |    unsigned int B4  :1;
                             2518 ; 107  |    unsigned int B5  :1;
                             2519 ; 108  |    unsigned int B6  :1;
                             2520 ; 109  |    unsigned int B7  :1;
                             2521 ; 110  |    unsigned int B8  :1;
                             2522 ; 111  |    unsigned int B9  :1;
                             2523 ; 112  |    unsigned int B10 :1;
                             2524 ; 113  |    unsigned int B11 :1;
                             2525 ; 114  |    unsigned int B12 :1;
                             2526 ; 115  |    unsigned int B13 :1;
                             2527 ; 116  |    unsigned int B14 :1;
                             2528 ; 117  |    unsigned int B15 :1;
                             2529 ; 118  |    unsigned int B16 :1;
                             2530 ; 119  |    unsigned int B17 :1;
                             2531 ; 120  |    unsigned int B18 :1;
                             2532 ; 121  |    unsigned int B19 :1;
                             2533 ; 122  |    unsigned int B20 :1;
                             2534 ; 123  |    unsigned int B21 :1;
                             2535 ; 124  |    unsigned int B22 :1;
                             2536 ; 125  |    unsigned int B23 :1;
                             2537 ; 126  |};
                             2538 ; 127  |
                             2539 ; 128  |union BitInt {
                             2540 ; 129  |        struct Bitfield B;
                             2541 ; 130  |        int        I;
                             2542 ; 131  |};
                             2543 ; 132  |
                             2544 ; 133  |#define MAX_MSG_LENGTH 10
                             2545 ; 134  |struct CMessage
                             2546 ; 135  |{
                             2547 ; 136  |        unsigned int m_uLength;
                             2548 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2549 ; 138  |};
                             2550 ; 139  |
                             2551 ; 140  |typedef struct {
                             2552 ; 141  |    WORD m_wLength;
                             2553 ; 142  |    WORD m_wMessage;
                             2554 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2555 ; 144  |} Message;
                             2556 ; 145  |
                             2557 ; 146  |struct MessageQueueDescriptor
                             2558 ; 147  |{
                             2559 ; 148  |        int *m_pBase;
                             2560 ; 149  |        int m_iModulo;
                             2561 ; 150  |        int m_iSize;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2562 ; 151  |        int *m_pHead;
                             2563 ; 152  |        int *m_pTail;
                             2564 ; 153  |};
                             2565 ; 154  |
                             2566 ; 155  |struct ModuleEntry
                             2567 ; 156  |{
                             2568 ; 157  |    int m_iSignaledEventMask;
                             2569 ; 158  |    int m_iWaitEventMask;
                             2570 ; 159  |    int m_iResourceOfCode;
                             2571 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2572 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2573 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2574 ; 163  |    int m_uTimeOutHigh;
                             2575 ; 164  |    int m_uTimeOutLow;
                             2576 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2577 ; 166  |};
                             2578 ; 167  |
                             2579 ; 168  |union WaitMask{
                             2580 ; 169  |    struct B{
                             2581 ; 170  |        unsigned int m_bNone     :1;
                             2582 ; 171  |        unsigned int m_bMessage  :1;
                             2583 ; 172  |        unsigned int m_bTimer    :1;
                             2584 ; 173  |        unsigned int m_bButton   :1;
                             2585 ; 174  |    } B;
                             2586 ; 175  |    int I;
                             2587 ; 176  |} ;
                             2588 ; 177  |
                             2589 ; 178  |
                             2590 ; 179  |struct Button {
                             2591 ; 180  |        WORD wButtonEvent;
                             2592 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2593 ; 182  |};
                             2594 ; 183  |
                             2595 ; 184  |struct Message {
                             2596 ; 185  |        WORD wMsgLength;
                             2597 ; 186  |        WORD wMsgCommand;
                             2598 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2599 ; 188  |};
                             2600 ; 189  |
                             2601 ; 190  |union EventTypes {
                             2602 ; 191  |        struct CMessage msg;
                             2603 ; 192  |        struct Button Button ;
                             2604 ; 193  |        struct Message Message;
                             2605 ; 194  |};
                             2606 ; 195  |
                             2607 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2608 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2609 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2610 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2611 ; 200  |
                             2612 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2613 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2614 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2615 ; 204  |
                             2616 ; 205  |#if DEBUG
                             2617 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2618 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2619 ; 208  |#else 
                             2620 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2621 ; 210  |#define DebugBuildAssert(x)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2622 ; 211  |#endif
                             2623 ; 212  |
                             2624 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2625 ; 214  |//  #pragma asm
                             2626 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2627 ; 216  |//  #pragma endasm
                             2628 ; 217  |
                             2629 ; 218  |
                             2630 ; 219  |#ifdef COLOR_262K
                             2631 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2632 ; 221  |#elif defined(COLOR_65K)
                             2633 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2634 ; 223  |#else
                             2635 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2636 ; 225  |#endif
                             2637 ; 226  |    
                             2638 ; 227  |#endif // #ifndef _TYPES_H
                             2639 
                             2641 
                             2642 ; 32   |
                             2643 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2644 ; 34   |//   USB2.0 PHY STMP Registers 
                             2645 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2646 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                             2647 ; 37   |
                             2648 ; 38   |
                             2649 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                             2650 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                             2651 ; 41   |
                             2652 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                             2653 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                             2654 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                             2655 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                             2656 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                             2657 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                             2658 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                             2659 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                             2660 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                             2661 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                             2662 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                             2663 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                             2664 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                             2665 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                             2666 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                             2667 ; 57   |
                             2668 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                             2669 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                             2670 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                             2671 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                             2672 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                             2673 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                             2674 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                             2675 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                             2676 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                             2677 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                             2678 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                             2679 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                             2680 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                             2681 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2682 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                             2683 ; 73   |
                             2684 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                             2685 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                             2686 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                             2687 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                             2688 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                             2689 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                             2690 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                             2691 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                             2692 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                             2693 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                             2694 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                             2695 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                             2696 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                             2697 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                             2698 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                             2699 ; 89   |
                             2700 ; 90   |typedef union               
                             2701 ; 91   |{
                             2702 ; 92   |    struct {
                             2703 ; 93   |        int RSVD0          :5;
                             2704 ; 94   |        int TXDISCON1500   :1;
                             2705 ; 95   |        int PLLVCOPWD      :1;
                             2706 ; 96   |        int PLLVCPPWD      :1;
                             2707 ; 97   |        int RSVD1          :2;
                             2708 ; 98   |        int TXPWDFS        :1;
                             2709 ; 99   |        int TXPWDIBIAS     :1;
                             2710 ; 100  |        int TXPWDV2I       :1;
                             2711 ; 101  |        int TXPWDVBG       :1;
                             2712 ; 102  |        int TXPWDCOMP      :1;
                             2713 ; 103  |        int RSVD2          :1;
                             2714 ; 104  |        int RXPWDDISCONDET :1;
                             2715 ; 105  |        int RXPWDENV       :1;
                             2716 ; 106  |        int RXPWD1PT1      :1;
                             2717 ; 107  |        int RXPWDDIFF      :1;
                             2718 ; 108  |        int RXPWDRX        :1;
                             2719 ; 109  |        int RSVD3          :1;
                             2720 ; 110  |        int PWDIBIAS       :1;
                             2721 ; 111  |        int REGRESET       :1;
                             2722 ; 112  |    } B;
                             2723 ; 113  |    int I;
                             2724 ; 114  |} usbphypwd_type;
                             2725 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB 
                                  PHY Powerdown Register */
                             2726 ; 116  |
                             2727 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             2728 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                             2729 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                             2730 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                             2731 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                             2732 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                             2733 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                             2734 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                             2735 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                             2736 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                             2737 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                             2738 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                             2739 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                             2740 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                             2741 ; 131  |
                             2742 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2743 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                             2744 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                             2745 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                             2746 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                             2747 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                             2748 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                             2749 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                             2750 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                             2751 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                             2752 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                             2753 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                             2754 ; 144  |
                             2755 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL1500_BITPOS)
                             2756 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL1500_BITPOS)
                             2757 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  SXCVR_BITPOS)
                             2758 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHY
                                  TX_TXCALIBRATE_BITPOS)
                             2759 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DN_BITPOS)
                             2760 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DN_BITPOS)
                             2761 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  STERM_BITPOS)
                             2762 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_
                                  BITPOS)
                             2763 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DP_BITPOS)
                             2764 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DP_BITPOS)
                             2765 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSH
                                  IZ_BITPOS)
                             2766 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCOMPOUT_BITPOS)
                             2767 ; 157  |
                             2768 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                             2769 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                             2770 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                             2771 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                             2772 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                             2773 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                             2774 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                             2775 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                             2776 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                             2777 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                             2778 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                             2779 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                             2780 ; 170  |
                             2781 ; 171  |typedef union               
                             2782 ; 172  |{
                             2783 ; 173  |    struct {
                             2784 ; 174  |        int TXCAL1500          :4;
                             2785 ; 175  |        int RSVD0              :1;
                             2786 ; 176  |        int TXENCAL1500        :1;
                             2787 ; 177  |        int TXHSXCVR           :1;
                             2788 ; 178  |        int TXCALIBRATE        :1;
                             2789 ; 179  |        int TXCAL45DN          :4;
                             2790 ; 180  |        int RSVD1              :1;
                             2791 ; 181  |        int TXENCAL45DN        :1;
                             2792 ; 182  |        int TXHSTERM           :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2793 ; 183  |        int TXSKEW             :1;
                             2794 ; 184  |        int TXCAL45DP          :4;
                             2795 ; 185  |        int RSVD2              :1;
                             2796 ; 186  |        int TXENCAL45DP        :1;
                             2797 ; 187  |        int TXFSHIZ            :1;
                             2798 ; 188  |        int TXCOMPOUT          :1;
                             2799 ; 189  |    } B;
                             2800 ; 190  |    int I;
                             2801 ; 191  |} usbphytx_type;
                             2802 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                             2803 ; 193  |
                             2804 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                             2805 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                             2806 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                             2807 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                             2808 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                             2809 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                             2810 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                             2811 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                             2812 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                             2813 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                             2814 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                             2815 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                             2816 ; 206  |
                             2817 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                             2818 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                             2819 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                             2820 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                             2821 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                             2822 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                             2823 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                             2824 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                             2825 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                             2826 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                             2827 ; 217  |
                             2828 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLV2ISEL_BITPOS)
                             2829 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLCPDBLIP_BITPOS)
                             2830 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLVCOCLK2_BITPOS)
                             2831 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLVCOCLK24_BITPOS)
                             2832 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLCPNSEL_BITPOS)
                             2833 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLCLKDIVSEL_BITPOS)
                             2834 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLPFDRST_BITPOS)
                             2835 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                             2836 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLVCOKSTART_BITPOS)
                             2837 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                             2838 ; 228  |
                             2839 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                             2840 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                             2841 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                             2842 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                             2843 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                             2844 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2845 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                             2846 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                             2847 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                             2848 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                             2849 ; 239  |
                             2850 ; 240  |typedef union               
                             2851 ; 241  |{
                             2852 ; 242  |    struct {
                             2853 ; 243  |        int PLLV2ISEL        :4;
                             2854 ; 244  |        int RSVD0            :1;
                             2855 ; 245  |        int PLLCPDBLIP       :1;
                             2856 ; 246  |        int PLLVCOCLK2       :1;
                             2857 ; 247  |        int PLLVCOCLK24      :1;
                             2858 ; 248  |        int PLLCPNSEL        :4;
                             2859 ; 249  |        int PLLCLKDIVSEL     :4;
                             2860 ; 250  |        int RSVD1            :4;
                             2861 ; 251  |        int PLLPFDRST        :1;
                             2862 ; 252  |        int PLLCPSHORTLFR    :1;
                             2863 ; 253  |        int PLLVCOKSTART     :1;
                             2864 ; 254  |        int PLLCLKDIVRSTZ    :1;
                             2865 ; 255  |    } B;
                             2866 ; 256  |    int I;
                             2867 ; 257  |} usbphypll_type;
                             2868 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                             2869 ; 259  |
                             2870 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                             2871 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                             2872 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                             2873 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                             2874 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                             2875 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                             2876 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                             2877 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                             2878 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                             2879 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                             2880 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                             2881 ; 271  |
                             2882 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                             2883 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                             2884 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                             2885 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                             2886 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                             2887 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                             2888 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                             2889 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                             2890 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                             2891 ; 281  |
                             2892 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                             2893 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_
                                  BITPOS)
                             2894 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_
                                  BITPOS)
                             2895 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLL
                                  KTIMECTL_BITPOS)
                             2896 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKD
                                  IVCTL_BITPOS)
                             2897 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives ac
                                  tual divider of 8 and so on. (8 gives 9, 9 gives 10)
                             2898 ; 288  |//              480Mhz/7 =68.57Mhz
                             2899 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                             2900 ; 290  |
                             2901 ; 291  |//              480Mhz/8 ~60Mhz
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2902 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                             2903 ; 293  |
                             2904 ; 294  |//              480Mhz/9 =53.3Mhz
                             2905 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                             2906 ; 296  |
                             2907 ; 297  |//              480Mhz/10 =48Mhz
                             2908 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                             2909 ; 299  |
                             2910 ; 300  |
                             2911 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOST
                                  MODETEST_BITPOS)
                             2912 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FS
                                  CKSOURCESEL_BITPOS)
                             2913 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGR
                                  XDBYPASS_BITPOS)
                             2914 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_
                                  BITPOS)
                             2915 ; 305  |
                             2916 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                             2917 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                             2918 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                             2919 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                             2920 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                             2921 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                             2922 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                             2923 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                             2924 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                             2925 ; 315  |
                             2926 ; 316  |typedef union               
                             2927 ; 317  |{
                             2928 ; 318  |    struct {
                             2929 ; 319  |     int ENVADJ               :4;
                             2930 ; 320  |     int DISCONADJ            :4;
                             2931 ; 321  |     int DEBUGMODE            :4;
                             2932 ; 322  |     int PLLLKTIMECTL         :4;
                             2933 ; 323  |     int PLLCKDIVCTL          :4;
                             2934 ; 324  |     int HOSTMODETEST         :1;
                             2935 ; 325  |     int FSCKSOURCESEL        :1;
                             2936 ; 326  |     int REGRXDBYPASS         :1;
                             2937 ; 327  |     int PLLLOCKED            :1;
                             2938 ; 328  |    } B;
                             2939 ; 329  |    int I;
                             2940 ; 330  |} usbphyrx_type;
                             2941 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                             2942 ; 332  |
                             2943 ; 333  |#endif
                             2944 ; 334  |
                             2945 
                             2947 
                             2948 ; 20   |#include "menumanager.h"
                             2949 
                             2951 
                             2952 ; 1    |#ifndef _EXEC_H
                             2953 ; 2    |#define _EXEC_H
                             2954 ; 3    |
                             2955 ; 4    |#include "types.h"
                             2956 
                             2958 
                             2959 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2960 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2961 ; 3    |//
                             2962 ; 4    |// Filename: types.h
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2963 ; 5    |// Description: Standard data types
                             2964 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2965 ; 7    |
                             2966 ; 8    |#ifndef _TYPES_H
                             2967 ; 9    |#define _TYPES_H
                             2968 ; 10   |
                             2969 ; 11   |// TODO:  move this outta here!
                             2970 ; 12   |#if !defined(NOERROR)
                             2971 ; 13   |#define NOERROR 0
                             2972 ; 14   |#define SUCCESS 0
                             2973 ; 15   |#endif 
                             2974 ; 16   |#if !defined(SUCCESS)
                             2975 ; 17   |#define SUCCESS  0
                             2976 ; 18   |#endif
                             2977 ; 19   |#if !defined(ERROR)
                             2978 ; 20   |#define ERROR   -1
                             2979 ; 21   |#endif
                             2980 ; 22   |#if !defined(FALSE)
                             2981 ; 23   |#define FALSE 0
                             2982 ; 24   |#endif
                             2983 ; 25   |#if !defined(TRUE)
                             2984 ; 26   |#define TRUE  1
                             2985 ; 27   |#endif
                             2986 ; 28   |
                             2987 ; 29   |#if !defined(NULL)
                             2988 ; 30   |#define NULL 0
                             2989 ; 31   |#endif
                             2990 ; 32   |
                             2991 ; 33   |#define MAX_INT     0x7FFFFF
                             2992 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2993 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2994 ; 36   |#define MAX_ULONG   (-1) 
                             2995 ; 37   |
                             2996 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2997 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2998 ; 40   |
                             2999 ; 41   |
                             3000 ; 42   |#define BYTE    unsigned char       // btVarName
                             3001 ; 43   |#define CHAR    signed char         // cVarName
                             3002 ; 44   |#define USHORT  unsigned short      // usVarName
                             3003 ; 45   |#define SHORT   unsigned short      // sVarName
                             3004 ; 46   |#define WORD    unsigned int        // wVarName
                             3005 ; 47   |#define INT     signed int          // iVarName
                             3006 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3007 ; 49   |#define LONG    signed long         // lVarName
                             3008 ; 50   |#define BOOL    unsigned int        // bVarName
                             3009 ; 51   |#define FRACT   _fract              // frVarName
                             3010 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3011 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3012 ; 54   |#define FLOAT   float               // fVarName
                             3013 ; 55   |#define DBL     double              // dVarName
                             3014 ; 56   |#define ENUM    enum                // eVarName
                             3015 ; 57   |#define CMX     _complex            // cmxVarName
                             3016 ; 58   |typedef WORD UCS3;                   // 
                             3017 ; 59   |
                             3018 ; 60   |#define UINT16  unsigned short
                             3019 ; 61   |#define UINT8   unsigned char   
                             3020 ; 62   |#define UINT32  unsigned long
                             3021 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3022 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3023 ; 65   |#define WCHAR   UINT16
                             3024 ; 66   |
                             3025 ; 67   |//UINT128 is 16 bytes or 6 words
                             3026 ; 68   |typedef struct UINT128_3500 {   
                             3027 ; 69   |    int val[6];     
                             3028 ; 70   |} UINT128_3500;
                             3029 ; 71   |
                             3030 ; 72   |#define UINT128   UINT128_3500
                             3031 ; 73   |
                             3032 ; 74   |// Little endian word packed byte strings:   
                             3033 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3034 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3035 ; 77   |// Little endian word packed byte strings:   
                             3036 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3037 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3038 ; 80   |
                             3039 ; 81   |// Declare Memory Spaces To Use When Coding
                             3040 ; 82   |// A. Sector Buffers
                             3041 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3042 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3043 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3044 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3045 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3046 ; 88   |// B. Media DDI Memory
                             3047 ; 89   |#define MEDIA_DDI_MEM _Y
                             3048 ; 90   |
                             3049 ; 91   |
                             3050 ; 92   |
                             3051 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3052 ; 94   |// Examples of circular pointers:
                             3053 ; 95   |//    INT CIRC cpiVarName
                             3054 ; 96   |//    DWORD CIRC cpdwVarName
                             3055 ; 97   |
                             3056 ; 98   |#define RETCODE INT                 // rcVarName
                             3057 ; 99   |
                             3058 ; 100  |// generic bitfield structure
                             3059 ; 101  |struct Bitfield {
                             3060 ; 102  |    unsigned int B0  :1;
                             3061 ; 103  |    unsigned int B1  :1;
                             3062 ; 104  |    unsigned int B2  :1;
                             3063 ; 105  |    unsigned int B3  :1;
                             3064 ; 106  |    unsigned int B4  :1;
                             3065 ; 107  |    unsigned int B5  :1;
                             3066 ; 108  |    unsigned int B6  :1;
                             3067 ; 109  |    unsigned int B7  :1;
                             3068 ; 110  |    unsigned int B8  :1;
                             3069 ; 111  |    unsigned int B9  :1;
                             3070 ; 112  |    unsigned int B10 :1;
                             3071 ; 113  |    unsigned int B11 :1;
                             3072 ; 114  |    unsigned int B12 :1;
                             3073 ; 115  |    unsigned int B13 :1;
                             3074 ; 116  |    unsigned int B14 :1;
                             3075 ; 117  |    unsigned int B15 :1;
                             3076 ; 118  |    unsigned int B16 :1;
                             3077 ; 119  |    unsigned int B17 :1;
                             3078 ; 120  |    unsigned int B18 :1;
                             3079 ; 121  |    unsigned int B19 :1;
                             3080 ; 122  |    unsigned int B20 :1;
                             3081 ; 123  |    unsigned int B21 :1;
                             3082 ; 124  |    unsigned int B22 :1;
                             3083 ; 125  |    unsigned int B23 :1;
                             3084 ; 126  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3085 ; 127  |
                             3086 ; 128  |union BitInt {
                             3087 ; 129  |        struct Bitfield B;
                             3088 ; 130  |        int        I;
                             3089 ; 131  |};
                             3090 ; 132  |
                             3091 ; 133  |#define MAX_MSG_LENGTH 10
                             3092 ; 134  |struct CMessage
                             3093 ; 135  |{
                             3094 ; 136  |        unsigned int m_uLength;
                             3095 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3096 ; 138  |};
                             3097 ; 139  |
                             3098 ; 140  |typedef struct {
                             3099 ; 141  |    WORD m_wLength;
                             3100 ; 142  |    WORD m_wMessage;
                             3101 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3102 ; 144  |} Message;
                             3103 ; 145  |
                             3104 ; 146  |struct MessageQueueDescriptor
                             3105 ; 147  |{
                             3106 ; 148  |        int *m_pBase;
                             3107 ; 149  |        int m_iModulo;
                             3108 ; 150  |        int m_iSize;
                             3109 ; 151  |        int *m_pHead;
                             3110 ; 152  |        int *m_pTail;
                             3111 ; 153  |};
                             3112 ; 154  |
                             3113 ; 155  |struct ModuleEntry
                             3114 ; 156  |{
                             3115 ; 157  |    int m_iSignaledEventMask;
                             3116 ; 158  |    int m_iWaitEventMask;
                             3117 ; 159  |    int m_iResourceOfCode;
                             3118 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3119 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3120 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3121 ; 163  |    int m_uTimeOutHigh;
                             3122 ; 164  |    int m_uTimeOutLow;
                             3123 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3124 ; 166  |};
                             3125 ; 167  |
                             3126 ; 168  |union WaitMask{
                             3127 ; 169  |    struct B{
                             3128 ; 170  |        unsigned int m_bNone     :1;
                             3129 ; 171  |        unsigned int m_bMessage  :1;
                             3130 ; 172  |        unsigned int m_bTimer    :1;
                             3131 ; 173  |        unsigned int m_bButton   :1;
                             3132 ; 174  |    } B;
                             3133 ; 175  |    int I;
                             3134 ; 176  |} ;
                             3135 ; 177  |
                             3136 ; 178  |
                             3137 ; 179  |struct Button {
                             3138 ; 180  |        WORD wButtonEvent;
                             3139 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3140 ; 182  |};
                             3141 ; 183  |
                             3142 ; 184  |struct Message {
                             3143 ; 185  |        WORD wMsgLength;
                             3144 ; 186  |        WORD wMsgCommand;
                             3145 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3146 ; 188  |};
                             3147 ; 189  |
                             3148 ; 190  |union EventTypes {
                             3149 ; 191  |        struct CMessage msg;
                             3150 ; 192  |        struct Button Button ;
                             3151 ; 193  |        struct Message Message;
                             3152 ; 194  |};
                             3153 ; 195  |
                             3154 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3155 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3156 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3157 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3158 ; 200  |
                             3159 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3160 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3161 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3162 ; 204  |
                             3163 ; 205  |#if DEBUG
                             3164 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3165 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3166 ; 208  |#else 
                             3167 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3168 ; 210  |#define DebugBuildAssert(x)    
                             3169 ; 211  |#endif
                             3170 ; 212  |
                             3171 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3172 ; 214  |//  #pragma asm
                             3173 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3174 ; 216  |//  #pragma endasm
                             3175 ; 217  |
                             3176 ; 218  |
                             3177 ; 219  |#ifdef COLOR_262K
                             3178 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3179 ; 221  |#elif defined(COLOR_65K)
                             3180 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3181 ; 223  |#else
                             3182 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3183 ; 225  |#endif
                             3184 ; 226  |    
                             3185 ; 227  |#endif // #ifndef _TYPES_H
                             3186 
                             3188 
                             3189 ; 5    |
                             3190 ; 6    |int _asmfunc SysWaitOnEvent(unsigned int uEvent,struct CMessage *,int uLength);
                             3191 ; 7    |int _asmfunc SysCallFunction(unsigned int RESOURCE,int _reentrant (int,int,int*),  int, in
                                  t, int *);
                             3192 ; 8    |
                             3193 ; 9    |#if !defined(NULL)
                             3194 ; 10   |#define NULL 0
                             3195 ; 11   |#endif 
                             3196 ; 12   |
                             3197 ; 13   |#if !defined(FALSE)
                             3198 ; 14   |#define FALSE 0
                             3199 ; 15   |#endif
                             3200 ; 16   |#if !defined(TRUE)
                             3201 ; 17   |#define TRUE  !FALSE
                             3202 ; 18   |#endif
                             3203 ; 19   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3204 ; 20   |// The same memory location contains either a menu message or button event. 
                             3205 ; 21   |// The button info is stored in the first word or the entire message is stored.
                             3206 ; 22   |
                             3207 ; 23   |// CMessage is kept for backards compatibility.
                             3208 ; 24   |// The union and 2 new structures are added to aid in readability.
                             3209 ; 25   |
                             3210 ; 26   |
                             3211 ; 27   |#include "messages.h"
                             3212 
                             3214 
                             3215 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             3216 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                             3217 ; 3    |// Message defs
                             3218 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             3219 ; 5    |
                             3220 ; 6    |#if (!defined(MSGEQU_INC))
                             3221 ; 7    |#define MSGEQU_INC 1
                             3222 ; 8    |
                             3223 ; 9    |
                             3224 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                             3225 ; 11   |
                             3226 ; 12   |
                             3227 ; 13   |#define MSG_TYPE_DECODER 0x000000
                             3228 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                             3229 ; 15   |#define MSG_TYPE_PARSER 0x020000
                             3230 ; 16   |#define MSG_TYPE_LCD 0x030000
                             3231 ; 17   |#define MSG_TYPE_MIXER 0x040000
                             3232 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                             3233 ; 19   |#define MSG_TYPE_MENU 0x060000
                             3234 ; 20   |#define MSG_TYPE_LED 0x070000
                             3235 ; 21   |#define MSG_TYPE_TUNER 0x080000
                             3236 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                             3237 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                             3238 ; 24   |// Equalizer and other effects
                             3239 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                             3240 ; 26   |#if (defined(USE_PLAYLIST3))
                             3241 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                             3242 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                             3243 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                             3244 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                             3245 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                             3246 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                             3247 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                             3248 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                             3249 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                             3250 ; 36   |#if defined(USE_PLAYLIST5)
                             3251 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                             3252 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                             3253 ; 39   |#endif // if @def('USE_PLAYLIST5')
                             3254 ; 40   |
                             3255 ; 41   |// Message Structure Offsets
                             3256 ; 42   |#define MSG_Length 0
                             3257 ; 43   |#define MSG_ID 1
                             3258 ; 44   |#define MSG_Argument1 2
                             3259 ; 45   |#define MSG_Argument2 3
                             3260 ; 46   |#define MSG_Argument3 4
                             3261 ; 47   |#define MSG_Argument4 5
                             3262 ; 48   |#define MSG_Argument5 6
                             3263 ; 49   |#define MSG_Argument6 7
                             3264 ; 50   |
                             3265 ; 51   |
                             3266 ; 52   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3267 ; 53   |// LCD Message IDs
                             3268 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                             3269 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                             3270 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                             3271 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                             3272 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                             3273 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                             3274 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                             3275 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                             3276 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                             3277 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                             3278 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                             3279 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                             3280 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                             3281 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                             3282 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                             3283 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                             3284 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                             3285 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                             3286 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                             3287 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                             3288 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                             3289 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                             3290 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                             3291 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                             3292 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                             3293 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                             3294 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                             3295 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                             3296 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                             3297 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                             3298 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                             3299 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                             3300 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                             3301 ; 87   |//send a NULL as Param1 to return to root frame buffer
                             3302 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                             3303 ; 89   |//Param1 = left
                             3304 ; 90   |//Param2 = top
                             3305 ; 91   |//Param3 = right
                             3306 ; 92   |//Param4 = bottom
                             3307 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                             3308 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                             3309 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                             3310 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                             3311 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                             3312 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                             3313 ; 99   |
                             3314 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                             3315 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
                             3316 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                             3317 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                             3318 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                             3319 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                             3320 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                             3321 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                             3322 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                             3323 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                             3324 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                             3325 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                             3326 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                             3327 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                             3328 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3329 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                             3330 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                             3331 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                             3332 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                             3333 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                             3334 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                             3335 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                             3336 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                             3337 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                             3338 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                             3339 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                             3340 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                             3341 ; 127  |
                             3342 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                             3343 ; 129  |
                             3344 ; 130  |#if defined(CLCD_16BIT)
                             3345 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                             3346 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                             3347 ; 133  |
                             3348 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                             3349 ; 135  |#else 
                             3350 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                             3351 ; 137  |#endif
                             3352 ; 138  |
                             3353 ; 139  |// If you change the LCD message ID's then you must
                             3354 ; 140  |// also change the jump table in lcdapi.asm
                             3355 ; 141  |
                             3356 ; 142  |// Character LCD Message IDs
                             3357 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                             3358 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                             3359 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                             3360 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                             3361 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                             3362 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                             3363 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                             3364 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                             3365 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                             3366 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                             3367 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                             3368 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                             3369 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                             3370 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                             3371 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                             3372 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                             3373 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                             3374 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                             3375 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                             3376 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                             3377 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                             3378 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                             3379 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                             3380 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                             3381 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                             3382 ; 168  |// also change the jump table in lcdapi.asm
                             3383 ; 169  |
                             3384 ; 170  |// Decoder Message IDs
                             3385 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                             3386 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                             3387 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                             3388 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                             3389 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                             3390 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3391 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                             3392 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                             3393 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                             3394 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                             3395 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                             3396 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                             3397 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                             3398 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                             3399 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                             3400 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                             3401 ; 187  |// If you change the Decoder message ID's, then you must
                             3402 ; 188  |// also change the jump table in decoder_overlay.asm
                             3403 ; 189  |// and in dec_adpcm_overlay.asm.
                             3404 ; 190  |
                             3405 ; 191  |// Encoder Message IDs
                             3406 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                             3407 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                             3408 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                             3409 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                             3410 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                             3411 ; 197  |// If you change the Encoder message ID's, then you must
                             3412 ; 198  |// also change the jump table in all encoder overlay modules.
                             3413 ; 199  |
                             3414 ; 200  |// Parser Message IDs
                             3415 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                             3416 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                             3417 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                             3418 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                             3419 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                             3420 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                             3421 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                             3422 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                             3423 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                             3424 ; 210  |// If you change the Parser message ID's, then you must
                             3425 ; 211  |// also change the jump table in parser.asm
                             3426 ; 212  |
                             3427 ; 213  |// Button Message IDs
                             3428 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                             3429 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                             3430 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                             3431 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                             3432 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                             3433 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                             3434 ; 220  |
                             3435 ; 221  |// Mixer Message IDs
                             3436 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                             3437 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                             3438 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                             3439 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                             3440 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                             3441 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                             3442 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                             3443 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                             3444 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                             3445 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                             3446 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                             3447 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                             3448 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                             3449 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                             3450 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                             3451 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                             3452 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3453 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                             3454 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                             3455 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                             3456 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                             3457 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                             3458 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                             3459 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                             3460 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                             3461 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                             3462 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                             3463 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                             3464 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                             3465 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                             3466 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                             3467 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                             3468 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                             3469 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                             3470 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                             3471 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                             3472 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                             3473 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                             3474 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                             3475 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                             3476 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                             3477 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                             3478 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                             3479 ; 265  |// If you change the mixer message ID's then you must
                             3480 ; 266  |// also change the jump table in mixer.asm
                             3481 ; 267  |#define MIXER_ON 0
                             3482 ; 268  |#define MIXER_OFF 1
                             3483 ; 269  |
                             3484 ; 270  |
                             3485 ; 271  |// System Message IDs
                             3486 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                             3487 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                             3488 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                             3489 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                             3490 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                             3491 ; 277  |// If you change the system message ID's then you must
                             3492 ; 278  |// also change the jump table in systemapi.asm
                             3493 ; 279  |
                             3494 ; 280  |// Menu IDs
                             3495 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                             3496 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                             3497 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                             3498 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                             3499 ; 285  |//sub parameters for this message:
                             3500 ; 286  |#define RECORDER_START 0
                             3501 ; 287  |#define RECORDER_PAUSE 0x2000
                             3502 ; 288  |#define RECORDER_RESUME 0x4000
                             3503 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                             3504 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                             3505 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                             3506 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                             3507 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                             3508 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                             3509 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                             3510 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                             3511 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                             3512 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                             3513 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                             3514 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3515 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                             3516 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                             3517 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                             3518 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                             3519 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                             3520 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                             3521 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                             3522 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                             3523 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                             3524 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                             3525 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                             3526 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                             3527 ; 313  |
                             3528 ; 314  |// Note that other versions of this file have different msg equates.
                             3529 ; 315  |// If you change the system message ID's then you must
                             3530 ; 316  |// also change the jump table in all menu *.asm
                             3531 ; 317  |
                             3532 ; 318  |// LED Message IDs
                             3533 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                             3534 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                             3535 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                             3536 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                             3537 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                             3538 ; 324  |// If you change the LeD message ID's then you must
                             3539 ; 325  |// also change the jump table in ledapi.asm
                             3540 ; 326  |
                             3541 ; 327  |#if (!defined(REMOVE_FM))
                             3542 ; 328  |// FM Tuner Message IDs
                             3543 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                             3544 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                             3545 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                             3546 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                             3547 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                             3548 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                             3549 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                             3550 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                             3551 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                             3552 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                             3553 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                             3554 ; 340  |//one parameter--the sensitivity in uV
                             3555 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                             3556 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                             3557 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                             3558 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                             3559 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                             3560 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                             3561 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                             3562 ; 348  |#endif
                             3563 ; 349  |
                             3564 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                             3565 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                             3566 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                             3567 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                             3568 ; 354  |
                             3569 ; 355  |
                             3570 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                             3571 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                             3572 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                             3573 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                             3574 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                             3575 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                             3576 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3577 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                             3578 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                             3579 ; 365  |
                             3580 ; 366  |#if (defined(USE_PLAYLIST3))
                             3581 ; 367  |// Music Library
                             3582 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                             3583 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                             3584 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                             3585 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                             3586 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                             3587 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                             3588 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                             3589 ; 375  |
                             3590 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                             3591 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                             3592 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                             3593 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                             3594 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                             3595 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                             3596 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                             3597 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                             3598 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                             3599 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                             3600 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                             3601 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                             3602 ; 388  |
                             3603 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             3604 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             3605 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             3606 ; 392  |
                             3607 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             3608 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             3609 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             3610 ; 396  |
                             3611 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             3612 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                             3613 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             3614 ; 400  |
                             3615 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                             3616 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                             3617 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                             3618 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
                             3619 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                             3620 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                             3621 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                             3622 ; 408  |
                             3623 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             3624 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             3625 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             3626 ; 412  |
                             3627 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                             3628 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                             3629 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                             3630 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                             3631 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                             3632 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                             3633 ; 419  |
                             3634 ; 420  |#if defined(USE_PLAYLIST5)
                             3635 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                             3636 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                             3637 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                             3638 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3639 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                             3640 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                             3641 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                             3642 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                             3643 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                             3644 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                             3645 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                             3646 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                             3647 ; 433  |
                             3648 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                             3649 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                             3650 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                             3651 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                             3652 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                             3653 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                             3654 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                             3655 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                             3656 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                             3657 ; 443  |#endif // if @def('USE_PLAYLIST5')
                             3658 ; 444  |// Events
                             3659 ; 445  |// No event
                             3660 ; 446  |#define EVENT_NONE 0x000001   
                             3661 ; 447  |// A message has been posted
                             3662 ; 448  |#define EVENT_MESSAGE 0x000002   
                             3663 ; 449  |// Run if wait time elapsed
                             3664 ; 450  |#define EVENT_TIMER 0x000004   
                             3665 ; 451  |// Run if a button event occured
                             3666 ; 452  |#define EVENT_BUTTON 0x000008   
                             3667 ; 453  |// Run if a background event occured
                             3668 ; 454  |#define EVENT_BACKGROUND 0x000010   
                             3669 ; 455  |// The executive should immediately repeat this module
                             3670 ; 456  |#define EVENT_REPEAT 0x000020   
                             3671 ; 457  |// Run the module's init routine
                             3672 ; 458  |#define EVENT_INIT 0x800000   
                             3673 ; 459  |
                             3674 ; 460  |#define EVENT_NONE_BITPOS 0
                             3675 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                             3676 ; 462  |#define EVENT_TIMER_BITPOS 2
                             3677 ; 463  |#define EVENT_BUTTON_BITPOS 3
                             3678 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                             3679 ; 465  |#define EVENT_REPEAT_BITPOS 5
                             3680 ; 466  |#define EVENT_INIT_BITPOS 23
                             3681 ; 467  |
                             3682 ; 468  |// Parser Message Buffers
                             3683 ; 469  |#define ParserPlayBit 0
                             3684 ; 470  |#define ButtonPressBit 1
                             3685 ; 471  |#define ParserRwndBit 1
                             3686 ; 472  |#define ParserFfwdBit 2
                             3687 ; 473  |
                             3688 ; 474  |//NextSong Message Parameters
                             3689 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                             3690 ; 476  |#define NEXT_SONG 2             
                             3691 ; 477  |// ButtonPressBit1 cleared
                             3692 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                             3693 ; 479  |// ButtonPressBit1 set
                             3694 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                             3695 ; 481  |// NextSong + Ffwd
                             3696 ; 482  |#define NEXT_SONG_FFWD 4          
                             3697 ; 483  |
                             3698 ; 484  |//PrevSong Message Parameters
                             3699 ; 485  |// PrevSong + Stopped
                             3700 ; 486  |#define PREV_SONG 0          
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3701 ; 487  |// PrevSong + Play
                             3702 ; 488  |#define PREV_SONG_PLAY 1          
                             3703 ; 489  |// PrevSong + Rwnd
                             3704 ; 490  |#define PREV_SONG_RWND 2          
                             3705 ; 491  |
                             3706 ; 492  |
                             3707 ; 493  |
                             3708 ; 494  |
                             3709 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                             3710 ; 496  |
                             3711 ; 497  |
                             3712 
                             3714 
                             3715 ; 28   |
                             3716 ; 29   |#endif 
                             3717 
                             3719 
                             3720 ; 21   |#else
                             3721 ; 22   |#include "kernel.h"
                             3722 ; 23   |#include "misc.h"
                             3723 ; 24   |#endif
                             3724 ; 25   |
                             3725 ; 26   |#pragma optimize 1
                             3727 ; 27   |////////////////////////////////////////////////////////////////////////////////
                             3728 ; 28   |//   Things to parameterize
                             3729 ; 29   |////////////////////////////////////////////////////////////////////////////////
                             3730 ; 30   |
                             3731 ; 31   |////////////////////////////////////////////////////////////////////////////////
                             3732 ; 32   |//   Function prototypes
                             3733 ; 33   |////////////////////////////////////////////////////////////////////////////////
                             3734 ; 34   |
                             3735 ; 35   |_reentrant WORD BatteryChargeStateMachineInitialize(WORD wCounter);
                             3736 ; 36   |_reentrant WORD BatteryChargeStateMachineWaitFor5V(WORD wCounter);
                             3737 ; 37   |_reentrant WORD BatteryChargeStateMachineNormal(WORD wCounter);
                             3738 ; 38   |_reentrant WORD BatteryChargeStateMachineBroken(WORD wCounter);
                             3739 ; 39   |
                             3740 ; 40   |////////////////////////////////////////////////////////////////////////////////
                             3741 ; 41   |//   External variables
                             3742 ; 42   |////////////////////////////////////////////////////////////////////////////////
                             3743 ; 43   |extern BOOL g_bBatteryChargeEnabled;
                             3744 ; 44   |extern BOOL g_bBatteryChargePermanentlyDisabled;
                             3745 ; 45   |
                             3746 ; 46   |#ifndef STMP_BUILD_PLAYER
                             3747 ; 47   |extern BOOL g_bChargerLinearEnabled;
                             3748 ; 48   |#endif
                             3749 ; 49   |
                             3750 ; 50   |INT g_iBatteryChargeCounter=0;
                             3751 
                             3752 
Y:0000                       3753         org     y,".ydatabatterychargetask",init:
                             3754 Fg_iBatteryChargeCounter:
Y:0000 000000                3755         dc      $000000
                             3758 
                             3759 ; 51   |
                             3760 ; 52   |////////////////////////////////////////////////////////////////////////////////
                             3761 ; 53   |//   Local variables and data types 
                             3762 ; 54   |////////////////////////////////////////////////////////////////////////////////
                             3763 ; 55   |//used to calculate the current limit bitfield
                             3764 ; 56   |// First element is mA charger current for this control bit, 
                             3765 ; 57   |// Second element is bit set mask for this current control current bit.
                             3766 ; 58   |_P BATT_CURRENT_BITS[5][2]= {
                             3767 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3768 
P:0000                       3769         org     p,".pdatabatterychargetask",init:
                             3770 FBATT_CURRENT_BITS:
P:0000 0000C8 000010         3771         dc      $0000c8,$000010,$000064,$000008,$000032,$000004,$000019,$000002
       000064 000008              
       000032 000004              
       000019 000002              
P:0008 00000A 000001         3772         dc      $00000a,$000001
                             3777 
                             3778 ; 59   |    {200,0x10},
                             3779 ; 60   |    {100,0x08},
                             3780 ; 61   |    { 50,0x04},
                             3781 ; 62   |    { 25,0x02},
                             3782 ; 63   |    { 10,0x01}
                             3783 ; 64   |};
                             3784 ; 65   |
                             3785 ; 66   |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_100MA  0x08
                             3786 ; 67   |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_200MA  0x10
                             3787 ; 68   |
                             3788 ; 69   |struct FunctionPointerStruct
                             3789 ; 70   |{
                             3790 ; 71   |    _reentrant WORD (*pFunction)(WORD);
                             3791 ; 72   |};
                             3792 ; 73   |
                             3793 ; 74   |#define BATTERY_CHARGE_UNINITIALIZED    0
                             3794 ; 75   |#define BATTERY_CHARGE_WAIT_FOR_5V      1
                             3795 ; 76   |#define BATTERY_CHARGE_NORMAL           2
                             3796 ; 77   |#define BATTERY_CHARGE_BROKEN_BATTERY   3
                             3797 ; 78   |
                             3798 ; 79   |
                             3799 ; 80   |_P struct FunctionPointerStruct g_BatteryChargeStateMachine[]=
                             3800 
                             3801 Fg_BatteryChargeStateMachine:
P:000A rrrrrr rrrrrr         3802         dc      FBatteryChargeStateMachineInitialize,FBatteryChargeStateMachineWaitFor5V
P:000C rrrrrr rrrrrr         3803         dc      FBatteryChargeStateMachineNormal,FBatteryChargeStateMachineBroken
                             3812 
                             3813 ; 81   |    {
                             3814 ; 82   |        {BatteryChargeStateMachineInitialize},
                             3815 ; 83   |        {BatteryChargeStateMachineWaitFor5V},
                             3816 ; 84   |        {BatteryChargeStateMachineNormal},
                             3817 ; 85   |        {BatteryChargeStateMachineBroken},
                             3818 ; 86   |    };
                             3819 ; 87   |
                             3820 ; 88   |
                             3821 ; 89   |WORD g_wBatteryChargeState = BATTERY_CHARGE_UNINITIALIZED;
                             3822 
                             3823 
Y:0001                       3824         org     y,".ydatabatterychargetask",init:
                             3825 Fg_wBatteryChargeState:
Y:0001 000000                3826         dc      $000000
                             3829 
                             3830 ; 90   |WORD g_wBatteryChargeCounter = 0;
                             3831 
                             3832 Fg_wBatteryChargeCounter:
Y:0002 000000                3833         dc      $000000
                             3836 
                             3837 ; 91   |
                             3838 ; 92   |/////////////////////////////////////////////////////////////////////////////////////////
                             3839 ; 93   |//
                             3840 ; 94   |//>  Name:          BatteryChargeInitialize
                             3841 ; 95   |//
                             3842 ; 96   |//   Type:          Function 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3843 ; 97   |//
                             3844 ; 98   |//   Description:   Initialize the battery charge component.
                             3845 ; 99   |//
                             3846 ; 100  |//   Inputs:        none
                             3847 ; 101  |//
                             3848 ; 102  |//   Outputs:       none 
                             3849 ; 103  |//
                             3850 ; 104  |//   Notes:         Current does nothing as the state variables are initialized by the 
                             3851 ; 105  |//                  compiler without needing code.
                             3852 ; 106  |//<
                             3853 ; 107  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             3854 ; 108  |_reentrant WORD BatteryChargeStateMachineBroken(WORD wCounter)
                             3855 ; 109  |{
                             3856 
P:0000                       3857         org     p,".ptextbatterychargetask":
                             3862 FBatteryChargeStateMachineBroken:
                             3865 
                             3866 ; 110  |    return BATTERY_CHARGE_BROKEN_BATTERY;
                             3867 
                             3871 
                             3872 ; 111  |}
                             3873 
P:0000 56F400 000003  3    3 3869         move    #>3,a
P:0002 00000C         4    7 3875         rts
                             3877 
                             3878 ; 112  |
                             3879 ; 113  |
                             3880 ; 114  |/////////////////////////////////////////////////////////////////////////////////////////
                             3881 ; 115  |//
                             3882 ; 116  |//>  Name:          BatteryChargeStateMachineInitialize
                             3883 ; 117  |//
                             3884 ; 118  |//   Type:          State Function 
                             3885 ; 119  |//
                             3886 ; 120  |//   Description:   Initialize the battery charge state machine and components.
                             3887 ; 121  |//
                             3888 ; 122  |//   Inputs:        wCounter--ignored
                             3889 ; 123  |//
                             3890 ; 124  |//   Outputs:       next state in the state machine:  BATTERY_CHARGE_WAIT_FOR_5V
                             3891 ; 125  |//
                             3892 ; 126  |//   Notes:         
                             3893 ; 127  |//<
                             3894 ; 128  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             3895 ; 129  |_reentrant WORD BatteryChargeStateMachineInitialize(WORD wCounter)
                             3896 ; 130  |{
                             3897 
                             3945 FBatteryChargeStateMachineInitialize:
                             3951 
                             3952 ; 131  |
                             3953 ; 132  |#ifdef STMP_BUILD_PLAYER
                             3954 ; 133  |    HW_USBPHYPWD.B.PWDIBIAS = FALSE;//required to get it to operate
                             3955 
                             3958 
                             3959 ; 134  |    BatteryChargeImplementationInitialize();
                             3960 
P:0003 055F7C         2    9 3946         movec   ssh,y:(r7)+
P:0004 0A7016 00F210  6   15 3957         bclr    #22,x:$F210
P:0006 0BF080 rrrrrr  6   21 3962         jsr     FBatteryChargeImplementationInitialize
                             3964 
                             3965 ; 135  |#else
                             3966 ; 136  |    if( g_bChargerLinearEnabled == FALSE )
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3967 ; 137  |        return BATTERY_CHARGE_BROKEN_BATTERY; // prevents charging attempt & LCD charging 
                                  indicator.
                             3968 ; 138  |    if( BatteryChargeInitialize() != SUCCESS )
                             3969 ; 139  |        return BATTERY_CHARGE_BROKEN_BATTERY; // Next state allows no charging attempts un
                                  til reboot.
                             3970 ; 140  |#endif
                             3971 ; 141  |
                             3972 ; 142  |    BatteryChargeEnableCharging();
                             3973 
P:0008 0BF080 rrrrrr  6   27 3975         jsr     FBatteryChargeEnableCharging
                             3976 
                             3977 ; 143  |    return BATTERY_CHARGE_WAIT_FOR_5V;
                             3978 
                             3981 
                             3982 ; 144  |}
                             3983 
P:000A 05FF7C         4   31 3985         movec   y:-(r7),ssh
P:000B 56F400 000001  3   34 3980         move    #>1,a
P:000D 00000C         4   38 3989         rts
                             3991 
                             3992 ; 145  |
                             3993 ; 146  |/////////////////////////////////////////////////////////////////////////////////////////
                             3994 ; 147  |//
                             3995 ; 148  |//>  Name:          BatteryChargeStateMachineWaitFor5V
                             3996 ; 149  |//
                             3997 ; 150  |//   Type:          State Function 
                             3998 ; 151  |//
                             3999 ; 152  |//   Description:   Stays in this state until 5v is applied, or the 'permanently disabled'
                                   bit is 
                             4000 ; 153  |//                  set
                             4001 ; 154  |//
                             4002 ; 155  |//   Inputs:        wCounter--ignored
                             4003 ; 156  |//
                             4004 ; 157  |//   Outputs:       next state in the state machine:  
                             4005 ; 158  |//                      BATTERY_CHARGE_WAIT_FOR_5V
                             4006 ; 159  |//                      BATTERY_CHARGE_NORMAL
                             4007 ; 160  |//                      BATTERY_CHARGE_BROKEN_BATTERY
                             4008 ; 161  |//
                             4009 ; 162  |//   Notes:         
                             4010 ; 163  |//<
                             4011 ; 164  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             4012 ; 165  |_reentrant WORD BatteryChargeStateMachineWaitFor5V(WORD wCounter)
                             4013 ; 166  |{
                             4014 
                             4054 FBatteryChargeStateMachineWaitFor5V:
                             4057 
                             4058 ; 167  |    //Set the current to zero so that we can accurately measure the voltage
                             4059 ; 168  |    HW_VDD5V_PWR_CHARGE.B.BATT_CURRENT = 0;
                             4060 
                             4066 
                             4067 ; 169  |    if(g_bBatteryChargePermanentlyDisabled)
                             4068 
P:000E 57F000 00FA1D  3   41 4062         move    x:$FA1D,b
P:0010 44F400 FFFFC0  3   44 4063         move    #$FFFFC0,x0
P:0012 20004E         2   46 4064         and     x0,b
P:0013 557000 00FA1D  3   49 4065         move    b1,x:$FA1D
P:0015 5FF000 rrrrrr  3   52 4070         move    y:Fg_bBatteryChargePermanentlyDisabled,b
P:0017 2B0000         2   54 4071         move    #0,b2
P:0018 20000B         2   56 4072         tst     b
P:0019 0AF0AA rrrrrr  6   62 4073         jeq     L3
                             4074 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4075 ; 170  |    {
                             4076 ; 171  |        return BATTERY_CHARGE_BROKEN_BATTERY;
                             4077 
P:001B 56F400 000003  3   65 4079         move    #>3,a
P:001D 00000C         4   69 4081         rts
                             4082 
                             4083 ; 172  |    } 
                             4084 ; 173  |    else if(HW_VDD5V_PWR_CHARGE.B.VDD5V_PRESENT)
                             4085 
                             4087 L3:
                             4088 
                             4089 ; 174  |        return BATTERY_CHARGE_NORMAL;
                             4090 
P:001E 51F000 00FA1D  3   72 4087         move    x:$FA1D,b0
P:0020 56F400 000002  3   75 4092         move    #>2,a
P:0022 0AC934 rrrrrr  6   81 4094         jset    #20,b0,L4
                             4095 
                             4096 ; 175  |    //else
                             4097 ; 176  |    return BATTERY_CHARGE_WAIT_FOR_5V;
                             4098 
                             4101 
                             4102 ; 177  |}
                             4103 
P:0024 56F400 000001  3   84 4100         move    #>1,a
P:0026 00000C         4   88 4105 L4:     rts
                             4107 
                             4108 ; 178  |
                             4109 ; 179  |/////////////////////////////////////////////////////////////////////////////////////////
                             4110 ; 180  |//
                             4111 ; 181  |//>  Name:          BatteryChargeStateMachineNormal
                             4112 ; 182  |//
                             4113 ; 183  |//   Type:          State Function 
                             4114 ; 184  |//
                             4115 ; 185  |//   Description:   Call the appropriate functions (BatteryChargeImplementationSample and 
                                  
                             4116 ; 186  |//                  BatteryChargeImplementationGetCurrentLimit) 
                             4117 ; 187  |//
                             4118 ; 188  |//   Inputs:        wCounter--ignored
                             4119 ; 189  |//
                             4120 ; 190  |//   Outputs:       next state in the state machine:  
                             4121 ; 191  |//                      BATTERY_CHARGE_WAIT_FOR_5V
                             4122 ; 192  |//                      BATTERY_CHARGE_NORMAL
                             4123 ; 193  |//
                             4124 ; 194  |//   Notes:         
                             4125 ; 195  |//<
                             4126 ; 196  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             4127 ; 197  |_reentrant WORD BatteryChargeStateMachineNormal(WORD wCounter)
                             4128 ; 198  |{
                             4129 
                             4134 FBatteryChargeStateMachineNormal:
                             4152 
                             4153 ; 199  |    WORD wCurrentLimit;
                             4154 ; 200  |    WORD wBitfield;
                             4155 ; 201  |    WORD wBatteryCurrentReading;
                             4156 ; 202  |    int i;
                             4157 ; 203  |    WORD wReturn;
                             4158 ; 204  |
                             4159 ; 205  |    if(wCounter>POWER_OFF_FREQUENCY)
                             4160 
P:0027 055F7C         2   90 4135         movec   ssh,y:(r7)+
P:0028 2A0000         2   92 4163         move    #0,a2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0029 46F400 000028  3   95 4162         move    #>40,y0
P:002B 205F55         2   97 4164         cmp     y0,a	                (r7)+
P:002C 0AF0AF rrrrrr  6  103 4165         jle     L7
                             4166 
                             4167 ; 206  |    {
                             4168 ; 207  |        //this will go to the state that will turn off the charging until
                             4169 ; 208  |        //5v is inserted.
                             4170 ; 209  |        wReturn = BATTERY_CHARGE_WAIT_FOR_5V;
                             4171 
                             4176 
                             4177 ; 210  |    }
                             4178 
P:002E 56F400 000001  3  106 4173         move    #>1,a
P:0030 0AF080 rrrrrr  6  112 4180         jmp     L15
                             4181 
                             4182 ; 211  |    else 
                             4183 ; 212  |    {
                             4184 ; 213  |
                             4185 ; 214  |        BatteryChargeImplementationSample(wCounter);//wCounter will be zero (false) for th
                                  e first time
                             4186 
                             4188 L7:
P:0032 0BF080 rrrrrr  6  118 4191         jsr     FBatteryChargeImplementationSample
                             4193 
                             4194 ; 215  |                                                     //this will let us sample once when t
                                  he charging is off
                             4195 ; 216  |        wCurrentLimit = BatteryChargeImplementatonGetCurrentLimit();    
                             4196 
P:0034 0BF080 rrrrrr  6  124 4198         jsr     FBatteryChargeImplementatonGetCurrentLimit
                             4201 
                             4202 ; 217  |        wBitfield = 0;
                             4203 
                             4207 
                             4208 ; 218  |        if(wCurrentLimit && g_bBatteryChargeEnabled)
                             4209 
P:0036 2A0000         2  126 4211         move    #0,a2
P:0037 218F00         2  128 4199         move    a1,b
P:0038 250003         2  130 4212         tst     a	                #0,x1
P:0039 0AF0AA rrrrrr  6  136 4213         jeq     L14
P:003B 5EF000 rrrrrr  3  139 4214         move    y:Fg_bBatteryChargeEnabled,a
P:003D 2A0000         2  141 4215         move    #0,a2
P:003E 200003         2  143 4216         tst     a
P:003F 0AF0AA rrrrrr  6  149 4217         jeq     L14
                             4218 
                             4219 ; 219  |        {
                             4220 ; 220  |
                             4221 ; 221  |                //Grab the actual current setting.
                             4222 ; 222  |                        wBatteryCurrentReading = HW_VDD5V_PWR_CHARGE.B.BATT_CURRENT;
                             4223 
                             4232 
                             4233 ; 223  |
                             4234 ; 224  |                //Determine which bits to set to reach desired battery charge current.    
                                       
                             4235 ; 225  |            for(i=0;i<5;i++)
                             4236 
P:0041 47F000 00FA1D  3  152 4225         move    x:$FA1D,y1
P:0043 66F471 rrrrrr  3  155 4226         tfr     y1,a	                #FBATT_CURRENT_BITS,r6
P:0045 47F400 00003F  3  158 4227         move    #>$3F,y1
P:0047 200076         2  160 4228         and     y1,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0048 218600         2  162 4229         move    a1,y0
P:0049 060580 rrrrrr  6  168 4240         do      #5,L16
                             4242 
                             4243 ; 226  |            {
                             4244 ; 227  |                if (wCurrentLimit >= BATT_CURRENT_BITS[i][0])
                             4245 
P:004B 07E687         6  174 4247         movem   p:(r6),y1
P:004C 2B0071         2  176 4248         tfr     y1,a	                #0,b2
P:004D 2A0000         2  178 4249         move    #0,a2
P:004E 20000D         2  180 4251         cmp     a,b
P:004F 0AF0A9 rrrrrr  6  186 4252         jlt     L9
                             4253 
                             4254 ; 228  |                {
                             4255 ; 229  |                    wCurrentLimit -= BATT_CURRENT_BITS[i][0];
                             4256 
                             4259 
                             4260 ; 230  |                    wBitfield |= BATT_CURRENT_BITS[i][1];
                             4261 
                             4272 
                             4273 ; 231  |                }
                             4274 
P:0051 20AC00         2  188 4265         move    x1,a1
P:0052 205E7C         2  190 4258         sub     y1,b	                (r6)+
P:0053 07D684         6  196 4264         movem   p:(r6)-,x0
P:0054 200042         2  198 4266         or      x0,a
P:0055 218500         2  200 4269         move    a1,x1
                             4276 L9:
P:0056 3E0200         2  202 4278         move    #2,n6
P:0057 000000         2  204 4278         nop             ; (inserted)
P:0058 204E00         2  206 4280         move    (r6)+n6
                        (38) 4281 L16:
                             4283 
                             4284 ; 232  |            }
                             4285 ; 233  |
                             4286 ; 234  |                        //Update current bitfield if required.
                             4287 ; 235  |                        if(wBatteryCurrentReading != wBitfield)
                             4288 
P:0059 20AE00         2  208 4290         move    x1,a
P:005A 2A0059         2  210 4291         tfr     y0,b	                #0,a2
P:005B 2B0000         2  212 4293         move    #0,b2
P:005C 20000D         2  214 4294         cmp     a,b
P:005D 0AF0AA rrrrrr  6  220 4298         jeq     L14
                             4299 
                             4300 ; 236  |                        {
                             4301 ; 237  |                                //step up the charging to prevent large current spikes on 
                                  USB.
                             4302 ; 238  |                                //step to 100mA, 200mA, and then step to final current set
                                  ting.
                             4303 ; 239  |                                if(wBitfield > HW_VDD5V_PWR_CHARGE_BATT_CURRENT_100MA)
                             4304 
P:005F 045FA0         2  222 4306         movec   m0,n7
P:0060 47F400 000008  3  225 4309         move    #>8,y1
P:0062 5C6F75         4  229 4310         cmp     y1,a	                a1,y:(r7+n7)
P:0063 0AF0AF rrrrrr  6  235 4313         jle     L10
                             4314 
                             4315 ; 240  |                                {
                             4316 ; 241  |                                        HW_VDD5V_PWR_CHARGE.B.BATT_CURRENT=HW_VDD5V_PWR_CH
                                  ARGE_BATT_CURRENT_100MA;  //set to 100mA
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4317 
                             4325 
                             4326 ; 242  |                                        HW_VDD5V_PWR_CHARGE.B.PWD = FALSE;
                             4327 
                             4330 
                             4331 ; 243  |#ifdef STMP_BUILD_PLAYER
                             4332 ; 244  |                                        SysWaitOnEvent(0,0,1);   //wait to settle       
                             4333 
P:0065 57F000 00FA1D  3  238 4319         move    x:$FA1D,b
P:0067 46F400 FFFFC0  3  241 4320         move    #$FFFFC0,y0
P:0069 30005E         2  243 4321         and     y0,b	                #0,r0
P:006A 20E600         2  245 4322         move    y1,y0
P:006B 20005A         2  247 4323         or      y0,b
P:006C 557000 00FA1D  3  250 4324         move    b1,x:$FA1D
P:006E 0A7008 00FA1D  6  256 4329         bclr    #8,x:$FA1D
P:0070 57F413 000001  3  259 4336         clr     a	                #>1,b
P:0072 0BF080 rrrrrr  6  265 4339         jsr     SysWaitOnEvent
                             4340 
                             4341 ; 245  |#else
                             4342 ; 246  |                                        SysWait(1);
                             4343 ; 247  |#endif
                             4344 ; 248  |                        }
                             4345 ; 249  |
                             4346 ; 250  |                                //step to 200mA
                             4347 ; 251  |                                if(wBitfield > HW_VDD5V_PWR_CHARGE_BATT_CURRENT_200MA)
                             4348 
P:0074 045FA0         2  267 4350 L10:    movec   m0,n7
P:0075 45F400 000010  3  270 4353         move    #>16,x1
P:0077 5EEF00         4  274 4352         move    y:(r7+n7),a
P:0078 2A0000         2  276 4354         move    #0,a2
P:0079 200065         2  278 4355         cmp     x1,a
P:007A 0AF0AF rrrrrr  6  284 4356         jle     L11
                             4357 
                             4358 ; 252  |                                {
                             4359 ; 253  |                                        HW_VDD5V_PWR_CHARGE.B.BATT_CURRENT=HW_VDD5V_PWR_CH
                                  ARGE_BATT_CURRENT_200MA;  //set to 200mA
                             4360 
                             4368 
                             4369 ; 254  |                                        HW_VDD5V_PWR_CHARGE.B.PWD = FALSE;
                             4370 
                             4373 
                             4374 ; 255  |#ifdef STMP_BUILD_PLAYER
                             4375 ; 256  |                                        SysWaitOnEvent(0,0,1);   //wait to settle       
                             4376 
P:007C 56F000 00FA1D  3  287 4362         move    x:$FA1D,a
P:007E 46F400 FFFFC0  3  290 4363         move    #$FFFFC0,y0
P:0080 300056         2  292 4364         and     y0,a	                #0,r0
P:0081 20A600         2  294 4365         move    x1,y0
P:0082 57F452 000001  3  297 4366         or      y0,a	                #>1,b
P:0084 547000 00FA1D  3  300 4367         move    a1,x:$FA1D
P:0086 0A7008 00FA1D  6  306 4372         bclr    #8,x:$FA1D
P:0088 2E0000         2  308 4379         move    #0,a
P:0089 0BF080 rrrrrr  6  314 4381         jsr     SysWaitOnEvent
                             4382 
                             4383 ; 257  |#else
                             4384 ; 258  |                                        SysWait(1);
                             4385 ; 259  |#endif
                             4386 ; 260  |                        }
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4387 ; 261  |         
                             4388 ; 262  |                HW_VDD5V_PWR_CHARGE.B.PWD = FALSE;
                             4389 
                             4391 L11:
                             4392 
                             4393 ; 263  |                HW_VDD5V_PWR_CHARGE.B.BATT_CURRENT=wBitfield;
                             4394 
                             4409 
                             4410 ; 264  |                        }
                             4411 ; 265  |        }
                             4412 ; 266  |        wReturn = BATTERY_CHARGE_NORMAL;
                             4413 
P:008B 045FA0         2  316 4396         movec   m0,n7
P:008C 0A7008 00FA1D  6  322 4391         bclr    #8,x:$FA1D
P:008E 46F400 FFFFC0  3  325 4400         move    #$FFFFC0,y0
P:0090 56F000 00FA1D  3  328 4399         move    x:$FA1D,a
P:0092 5FEF56         4  332 4401         and     y0,a	                y:(r7+n7),b
P:0093 46F400 00003F  3  335 4402         move    #>$3F,y0
P:0095 20005E         2  337 4403         and     y0,b
P:0096 21A600         2  339 4404         move    b1,y0
P:0097 200052         2  341 4405         or      y0,a
P:0098 547000 00FA1D  3  344 4406         move    a1,x:$FA1D
                             4415 L14:
                             4417 
                             4418 ; 267  |    }
                             4419 
P:009A 56F400 000002  3  347 4415         move    #>2,a
                             4421 L15:
                             4422 
                             4423 ; 268  |
                             4424 ; 269  |    return wReturn;
                             4425 ; 270  |}
                             4426 
P:009C 205700         2  349 4428         move    (r7)-
P:009D 05FF7C         4  353 4430         movec   y:-(r7),ssh
P:009E 000000         2  355 4430         nop             ; (inserted)
P:009F 00000C         4  359 4434         rts
                             4438 
                             4439 ; 271  |
                             4440 ; 272  |
                             4441 ; 273  |/////////////////////////////////////////////////////////////////////////////////////////
                             4442 ; 274  |//
                             4443 ; 275  |//>  Name:          BatteryChargeStateMachine
                             4444 ; 276  |//
                             4445 ; 277  |//   Type:          State Function 
                             4446 ; 278  |//
                             4447 ; 279  |//   Description:   Entry Point for menus.  Callable by SysCallFunction(). Responsible for
                                  
                             4448 ; 280  |//                                      ensuring proper battery charging functions are cal
                                  led.
                             4449 ; 281  |//
                             4450 ; 282  |//                                      Call the appropriate functions (BatteryChargeImple
                                  mentationSample and 
                             4451 ; 283  |//                  BatteryChargeImplementationGetCurrentLimit) 
                             4452 ; 284  |//
                             4453 ; 285  |//   Inputs:        wCounter--ignored
                             4454 ; 286  |//
                             4455 ; 287  |//   Outputs:       next state in the state machine:  
                             4456 ; 288  |//                      BATTERY_CHARGE_WAIT_FOR_5V
                             4457 ; 289  |//                      BATTERY_CHARGE_NORMAL
                             4458 ; 290  |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4459 ; 291  |//   Notes:         
                             4460 ; 292  |//<
                             4461 ; 293  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             4462 ; 294  |#ifdef STMP_BUILD_PLAYER
                             4463 ; 295  |_reentrant int BatteryChargeStateMachine(int a, int b, int *c)
                             4464 ; 296  |#else
                             4465 ; 297  |extern DWORD g_ChargeTimes;
                             4466 ; 298  |_reentrant void BatteryChargeStateMachine(void)
                             4467 ; 299  |#endif
                             4468 ; 300  |{
                             4469 
                             4476 FBatteryChargeStateMachine:
                             4488 
                             4489 ; 301  |    WORD wNewState;
                             4490 ; 302  | 
                             4491 ; 303  |    wNewState = g_BatteryChargeStateMachine[g_wBatteryChargeState].pFunction(g_wBatteryCha
                                  rgeCounter);
                             4492 
P:00A0 055F7C         2  361 4477         movec   ssh,y:(r7)+
P:00A1 66F400 rrrrrr  3  364 4496         move    #Fg_BatteryChargeStateMachine,r6
P:00A3 5EF000 rrrrrr  3  367 4499         move    y:Fg_wBatteryChargeCounter,a
P:00A5 4EF000 rrrrrr  3  370 4494         move    y:Fg_wBatteryChargeState,y0
P:00A7 20DE00         2  372 4495         move    y0,n6
P:00A8 000000         2  374 4495         nop             ; (inserted)
P:00A9 07EE96         8  382 4498         movem   p:(r6+n6),r6
P:00AA 000000         2  384 4498         nop             ; (inserted)
P:00AB 0BE680         4  388 4501         jsr     (r6)
                             4505 
                             4506 ; 304  |
                             4507 ; 305  |    if(wNewState == g_wBatteryChargeState)
                             4508 
P:00AC 2A0000         2  390 4512         move    #0,a2
P:00AD 5FF000 rrrrrr  3  393 4510         move    y:Fg_wBatteryChargeState,b
P:00AF 2B0000         2  395 4511         move    #0,b2
P:00B0 200005         2  397 4513         cmp     b,a
P:00B1 0AF0A2 rrrrrr  6  403 4514         jne     L17
                             4515 
                             4516 ; 306  |        g_wBatteryChargeCounter++;
                             4517 
P:00B3 5FF000 rrrrrr  3  406 4519         move    y:Fg_wBatteryChargeCounter,b
P:00B5 45F400 000001  3  409 4520         move    #>1,x1
P:00B7 200068         2  411 4521         add     x1,b
P:00B8 0AF080 rrrrrr  6  417 4522         jmp     L18
                             4523 
                             4524 ; 307  |    else
                             4525 ; 308  |        g_wBatteryChargeCounter=0;
                             4526 
P:00BA 20001B         2  419 4528 L17:    clr     b   
                             4529 L18:
                             4530 
                             4531 ; 309  |
                             4532 ; 310  |    g_wBatteryChargeState = wNewState;
                             4533 
                             4536 
                             4537 ; 311  |
                             4538 ; 312  |#ifdef STMP_BUILD_PLAYER
                             4539 ; 313  |        return wNewState;
                             4540 
                             4543 
                             4544 ; 314  |#else
                             4545 ; 315  |    g_ChargeTimes++;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4546 ; 316  |#endif
                             4547 ; 317  |
                             4548 ; 318  |}
                             4549 
P:00BB 5D7000 rrrrrr  3  422 4529         move    b1,y:Fg_wBatteryChargeCounter
P:00BD 5C7000 rrrrrr  3  425 4535         move    a1,y:Fg_wBatteryChargeState
P:00BF 05FF7C         4  429 4551         movec   y:-(r7),ssh
P:00C0 218E00         2  431 4542         move    a1,a
P:00C1 00000C         4  435 4555         rts
                             4569 
                             4570         extern  SysWaitOnEvent, FBatteryChargeEnableCharging
                             4571         extern  FBatteryChargeImplementationInitialize
                             4572         extern  FBatteryChargeImplementationSample
                             4573         extern  FBatteryChargeImplementatonGetCurrentLimit
                             4574         extern  y:Fg_bBatteryChargeEnabled
                             4575         extern  y:Fg_bBatteryChargePermanentlyDisabled
                             4576 
                             4577         global  FBATT_CURRENT_BITS, FBatteryChargeStateMachine
                             4578         global  FBatteryChargeStateMachineBroken
                             4579         global  FBatteryChargeStateMachineInitialize
                             4580         global  FBatteryChargeStateMachineNormal
                             4581         global  FBatteryChargeStateMachineWaitFor5V
                             4582         global  Fg_BatteryChargeStateMachine, Fg_iBatteryChargeCounter
                             4583         global  Fg_wBatteryChargeCounter, Fg_wBatteryChargeState
                             4584 
                             4585         local   L3, L4, L7, L9, L10, L11, L14, L15, L16, L17, L18
                             4586 
                             4587         calls   "BatteryChargeStateMachineInitialize", "BatteryChargeEnableCharging"
                             4588         calls   "BatteryChargeStateMachineInitialize", "BatteryChargeImplementationInitialize"
                             4589         calls   "BatteryChargeStateMachineNormal", "BatteryChargeImplementationSample"
                             4590         calls   "BatteryChargeStateMachineNormal", "BatteryChargeImplementatonGetCurrentLimit"
                             4591         calls   "BatteryChargeStateMachineNormal", "SysWaitOnEvent"
                             4592 
