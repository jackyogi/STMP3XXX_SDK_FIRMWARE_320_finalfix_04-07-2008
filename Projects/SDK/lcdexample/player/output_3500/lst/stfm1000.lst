TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfcdefb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;     stfm1000.c:
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2005
                               98 ; 3    |//
                               99 ; 4    |// Filename: STFM1000.c
                              100 ; 5    |// Description:
                              101 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |
                              103 ; 8    |#include "hwequ.h"
                              104 
                              106 
                              107 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              108 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                              109 ; 3    |//  File        : hwequ.inc
                              110 ; 4    |//  Description : STMP Hardware Constants
                              111 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              112 ; 6    |
                              113 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                              114 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                              115 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                              116 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                              117 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                              118 ; 12   |
                              119 ; 13   |#if (!defined(HWEQU_INC))
                              120 ; 14   |#define HWEQU_INC 1
                              121 ; 15   |
                              122 ; 16   |#include "types.h"
                              123 
                              125 
                              126 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              127 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              128 ; 3    |//
                              129 ; 4    |// Filename: types.h
                              130 ; 5    |// Description: Standard data types
                              131 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              132 ; 7    |
                              133 ; 8    |#ifndef _TYPES_H
                              134 ; 9    |#define _TYPES_H
                              135 ; 10   |
                              136 ; 11   |// TODO:  move this outta here!
                              137 ; 12   |#if !defined(NOERROR)
                              138 ; 13   |#define NOERROR 0
                              139 ; 14   |#define SUCCESS 0
                              140 ; 15   |#endif 
                              141 ; 16   |#if !defined(SUCCESS)
                              142 ; 17   |#define SUCCESS  0
                              143 ; 18   |#endif
                              144 ; 19   |#if !defined(ERROR)
                              145 ; 20   |#define ERROR   -1
                              146 ; 21   |#endif
                              147 ; 22   |#if !defined(FALSE)
                              148 ; 23   |#define FALSE 0
                              149 ; 24   |#endif
                              150 ; 25   |#if !defined(TRUE)
                              151 ; 26   |#define TRUE  1
                              152 ; 27   |#endif
                              153 ; 28   |
                              154 ; 29   |#if !defined(NULL)
                              155 ; 30   |#define NULL 0
                              156 ; 31   |#endif
                              157 ; 32   |
                              158 ; 33   |#define MAX_INT     0x7FFFFF
                              159 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              160 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              161 ; 36   |#define MAX_ULONG   (-1) 
                              162 ; 37   |
                              163 ; 38   |#define WORD_SIZE   24              // word size in bits
                              164 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              165 ; 40   |
                              166 ; 41   |
                              167 ; 42   |#define BYTE    unsigned char       // btVarName
                              168 ; 43   |#define CHAR    signed char         // cVarName
                              169 ; 44   |#define USHORT  unsigned short      // usVarName
                              170 ; 45   |#define SHORT   unsigned short      // sVarName
                              171 ; 46   |#define WORD    unsigned int        // wVarName
                              172 ; 47   |#define INT     signed int          // iVarName
                              173 ; 48   |#define DWORD   unsigned long       // dwVarName
                              174 ; 49   |#define LONG    signed long         // lVarName
                              175 ; 50   |#define BOOL    unsigned int        // bVarName
                              176 ; 51   |#define FRACT   _fract              // frVarName
                              177 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              178 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              179 ; 54   |#define FLOAT   float               // fVarName
                              180 ; 55   |#define DBL     double              // dVarName
                              181 ; 56   |#define ENUM    enum                // eVarName
                              182 ; 57   |#define CMX     _complex            // cmxVarName
                              183 ; 58   |typedef WORD UCS3;                   // 
                              184 ; 59   |
                              185 ; 60   |#define UINT16  unsigned short
                              186 ; 61   |#define UINT8   unsigned char   
                              187 ; 62   |#define UINT32  unsigned long
                              188 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              189 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              190 ; 65   |#define WCHAR   UINT16
                              191 ; 66   |
                              192 ; 67   |//UINT128 is 16 bytes or 6 words
                              193 ; 68   |typedef struct UINT128_3500 {   
                              194 ; 69   |    int val[6];     
                              195 ; 70   |} UINT128_3500;
                              196 ; 71   |
                              197 ; 72   |#define UINT128   UINT128_3500
                              198 ; 73   |
                              199 ; 74   |// Little endian word packed byte strings:   
                              200 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              201 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              202 ; 77   |// Little endian word packed byte strings:   
                              203 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              204 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              205 ; 80   |
                              206 ; 81   |// Declare Memory Spaces To Use When Coding
                              207 ; 82   |// A. Sector Buffers
                              208 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              209 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              210 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              211 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              212 
                              214 
                              215 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              216 ; 88   |// B. Media DDI Memory
                              217 ; 89   |#define MEDIA_DDI_MEM _Y
                              218 ; 90   |
                              219 ; 91   |
                              220 ; 92   |
                              221 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              222 ; 94   |// Examples of circular pointers:
                              223 ; 95   |//    INT CIRC cpiVarName
                              224 ; 96   |//    DWORD CIRC cpdwVarName
                              225 ; 97   |
                              226 ; 98   |#define RETCODE INT                 // rcVarName
                              227 ; 99   |
                              228 ; 100  |// generic bitfield structure
                              229 ; 101  |struct Bitfield {
                              230 ; 102  |    unsigned int B0  :1;
                              231 ; 103  |    unsigned int B1  :1;
                              232 ; 104  |    unsigned int B2  :1;
                              233 ; 105  |    unsigned int B3  :1;
                              234 ; 106  |    unsigned int B4  :1;
                              235 ; 107  |    unsigned int B5  :1;
                              236 ; 108  |    unsigned int B6  :1;
                              237 ; 109  |    unsigned int B7  :1;
                              238 ; 110  |    unsigned int B8  :1;
                              239 ; 111  |    unsigned int B9  :1;
                              240 ; 112  |    unsigned int B10 :1;
                              241 ; 113  |    unsigned int B11 :1;
                              242 ; 114  |    unsigned int B12 :1;
                              243 ; 115  |    unsigned int B13 :1;
                              244 ; 116  |    unsigned int B14 :1;
                              245 ; 117  |    unsigned int B15 :1;
                              246 ; 118  |    unsigned int B16 :1;
                              247 ; 119  |    unsigned int B17 :1;
                              248 ; 120  |    unsigned int B18 :1;
                              249 ; 121  |    unsigned int B19 :1;
                              250 ; 122  |    unsigned int B20 :1;
                              251 ; 123  |    unsigned int B21 :1;
                              252 ; 124  |    unsigned int B22 :1;
                              253 ; 125  |    unsigned int B23 :1;
                              254 ; 126  |};
                              255 ; 127  |
                              256 ; 128  |union BitInt {
                              257 ; 129  |        struct Bitfield B;
                              258 ; 130  |        int        I;
                              259 ; 131  |};
                              260 ; 132  |
                              261 ; 133  |#define MAX_MSG_LENGTH 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                              262 ; 134  |struct CMessage
                              263 ; 135  |{
                              264 ; 136  |        unsigned int m_uLength;
                              265 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              266 ; 138  |};
                              267 ; 139  |
                              268 ; 140  |typedef struct {
                              269 ; 141  |    WORD m_wLength;
                              270 ; 142  |    WORD m_wMessage;
                              271 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              272 ; 144  |} Message;
                              273 ; 145  |
                              274 ; 146  |struct MessageQueueDescriptor
                              275 ; 147  |{
                              276 ; 148  |        int *m_pBase;
                              277 ; 149  |        int m_iModulo;
                              278 ; 150  |        int m_iSize;
                              279 ; 151  |        int *m_pHead;
                              280 ; 152  |        int *m_pTail;
                              281 ; 153  |};
                              282 ; 154  |
                              283 ; 155  |struct ModuleEntry
                              284 ; 156  |{
                              285 ; 157  |    int m_iSignaledEventMask;
                              286 ; 158  |    int m_iWaitEventMask;
                              287 ; 159  |    int m_iResourceOfCode;
                              288 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              289 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              290 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              291 ; 163  |    int m_uTimeOutHigh;
                              292 ; 164  |    int m_uTimeOutLow;
                              293 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              294 ; 166  |};
                              295 ; 167  |
                              296 ; 168  |union WaitMask{
                              297 ; 169  |    struct B{
                              298 ; 170  |        unsigned int m_bNone     :1;
                              299 ; 171  |        unsigned int m_bMessage  :1;
                              300 ; 172  |        unsigned int m_bTimer    :1;
                              301 ; 173  |        unsigned int m_bButton   :1;
                              302 ; 174  |    } B;
                              303 ; 175  |    int I;
                              304 ; 176  |} ;
                              305 ; 177  |
                              306 ; 178  |
                              307 ; 179  |struct Button {
                              308 ; 180  |        WORD wButtonEvent;
                              309 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              310 ; 182  |};
                              311 ; 183  |
                              312 ; 184  |struct Message {
                              313 ; 185  |        WORD wMsgLength;
                              314 ; 186  |        WORD wMsgCommand;
                              315 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              316 ; 188  |};
                              317 ; 189  |
                              318 ; 190  |union EventTypes {
                              319 ; 191  |        struct CMessage msg;
                              320 ; 192  |        struct Button Button ;
                              321 ; 193  |        struct Message Message;
                              322 ; 194  |};
                              323 ; 195  |
                              324 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              325 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              326 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              327 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              328 ; 200  |
                              329 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              330 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              331 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              332 ; 204  |
                              333 ; 205  |#if DEBUG
                              334 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              335 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              336 ; 208  |#else 
                              337 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              338 ; 210  |#define DebugBuildAssert(x)    
                              339 ; 211  |#endif
                              340 ; 212  |
                              341 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              342 ; 214  |//  #pragma asm
                              343 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              344 ; 216  |//  #pragma endasm
                              345 ; 217  |
                              346 ; 218  |
                              347 ; 219  |#ifdef COLOR_262K
                              348 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              349 ; 221  |#elif defined(COLOR_65K)
                              350 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              351 ; 223  |#else
                              352 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              353 ; 225  |#endif
                              354 ; 226  |    
                              355 ; 227  |#endif // #ifndef _TYPES_H
                              356 
                              358 
                              359 ; 17   |#include "regsclkctrl.h"
                              360 
                              362 
                              363 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                              364 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                              365 ; 3    |
                              366 ; 4    |
                              367 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              368 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                              369 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                              370 ; 8    |#define HW_CCR_LTC_BITPOS 1
                              371 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                              372 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                              373 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                              374 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                              375 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                              376 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                              377 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                              378 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                              379 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                              380 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                              381 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                              382 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                              383 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                              384 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                              385 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                              386 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                              387 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                              388 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                              389 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                              390 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                              391 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                              392 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                              393 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                              394 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                              395 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                              396 ; 34   |
                              397 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                              398 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                              399 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                              400 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                              401 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                              402 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                              403 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                              404 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                              405 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                              406 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                              407 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                              408 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                              409 ; 47   |
                              410 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                              411 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                              412 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                              413 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                              414 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                              415 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                              416 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                              417 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                              418 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                              419 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                              420 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                              421 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                              422 ; 60   |
                              423 ; 61   |typedef union               
                              424 ; 62   |{
                              425 ; 63   |    struct
                              426 ; 64   |    {
                              427 ; 65   |        int CKRST       :1; // Clock Reset
                              428 ; 66   |        int LTC         :1;
                              429 ; 67   |        int PLLEN       :1;
                              430 ; 68   |        int XTLEN       :1;
                              431 ; 69   |        int FLB         :1;
                              432 ; 70   |        unsigned ADIV   :3;
                              433 ; 71   |        int CKSRC       :1;
                              434 ; 72   |        unsigned DDIV   :3;
                              435 ; 73   |        unsigned PDIV   :5;
                              436 ; 74   |        int PWDN        :1;
                              437 ; 75   |        int ACKEN       :1;
                              438 ; 76   |        int LOCK        :1;
                              439 ; 77   |        unsigned ADIV1  :3;
                              440 ; 78   |        unsigned DDIV_MSB:1;
                              441 ; 79   |    } B;
                              442 ; 80   |
                              443 ; 81   |    int I;
                              444 ; 82   |    unsigned int U;
                              445 ; 83   |
                              446 ; 84   |} ccr_type;
                              447 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                              448 ; 86   |
                              449 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              450 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                              451 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                              452 ; 90   |#define HW_RCR_SRST_BITPOS 4
                              453 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                              454 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                              455 ; 93   |#define HW_RCR_NMI_BITPOS 10
                              456 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                              457 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                              458 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                              459 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                              460 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                              461 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                              462 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                              463 ; 101  |
                              464 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                              465 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                              466 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                              467 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                              468 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                              469 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                              470 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                              471 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                              472 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                              473 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                              474 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                              475 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                              476 ; 114  |
                              477 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                              478 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                              479 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                              480 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                              481 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                              482 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                              483 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                              484 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                              485 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                              486 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                              487 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                              488 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                              489 ; 127  |
                              490 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                              491 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                              492 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                              493 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                              494 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                              495 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                              496 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                              497 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                              498 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                              499 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                              500 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                              501 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                              502 ; 140  |
                              503 ; 141  |typedef union               
                              504 ; 142  |{
                              505 ; 143  |    struct
                              506 ; 144  |   {
                              507 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                              508 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                              509 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                              510 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                              511 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                              512 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                              513 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                              514 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              515 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                              516 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                              517 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                              518 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                              519 ; 157  |    } B;
                              520 ; 158  |
                              521 ; 159  |    int I;
                              522 ; 160  |    unsigned int U;
                              523 ; 161  |
                              524 ; 162  |} rcr_type;
                              525 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                              526 ; 164  |
                              527 ; 165  |
                              528 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                              529 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                              530 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                              531 ; 169  |
                              532 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                              533 ; 171  |
                              534 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                              535 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                              536 ; 174  |typedef union               
                              537 ; 175  |{
                              538 ; 176  |    struct
                              539 ; 177  |   {
                              540 ; 178  |        int LOW;
                              541 ; 179  |    } B;
                              542 ; 180  |
                              543 ; 181  |    int I;
                              544 ; 182  |    unsigned int U;
                              545 ; 183  |
                              546 ; 184  |} dclkcntl_type;
                              547 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                              548 ; 186  |
                              549 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                              550 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                              551 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                              552 ; 190  |
                              553 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                              554 ; 192  |
                              555 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS) 
                              556 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                              557 ; 195  |typedef union               
                              558 ; 196  |{
                              559 ; 197  |    struct
                              560 ; 198  |   {
                              561 ; 199  |        int HIGH;
                              562 ; 200  |    } B;
                              563 ; 201  |
                              564 ; 202  |    int I;
                              565 ; 203  |    unsigned int U;
                              566 ; 204  |
                              567 ; 205  |} dclkcntu_type;
                              568 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                              569 ; 207  |
                              570 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                              571 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                              572 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                              573 ; 211  |
                              574 ; 212  |// Clock count register (lower)
                              575 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                              576 ; 214  |// Clock count register (upper)
                              577 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                              578 ; 216  |// Cycle steal count register
                              579 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                              580 ; 218  |
                              581 ; 219  |#endif
                              582 ; 220  |
                              583 ; 221  |
                              584 
                              586 
                              587 ; 18   |#include "regscore.h"
                              588 
                              590 
                              591 ; 1    |#if !(defined(__REGS_STATUS_INC))
                              592 ; 2    |#define __REGS_STATUS_INC 1
                              593 ; 3    |
                              594 ; 4    |
                              595 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              596 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                              597 ; 7    |#define HW_OMR_MA_BITPOS 0
                              598 ; 8    |#define HW_OMR_MB_BITPOS 1
                              599 ; 9    |#define HW_OMR_DE_BITPOS 2
                              600 ; 10   |#define HW_OMR_YE_BITPOS 3
                              601 ; 11   |#define HW_OMR_MC_BITPOS 4
                              602 ; 12   |#define HW_OMR_SD_BITPOS 6
                              603 ; 13   |
                              604 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                              605 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                              606 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                              607 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                              608 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                              609 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                              610 ; 20   |
                              611 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                              612 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                              613 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                              614 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                              615 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                              616 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                              617 ; 27   |
                              618 ; 28   |
                              619 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                              620 ; 30   |//  Status Register (HW_SR) Bit Positions
                              621 ; 31   |#define HW_SR_C_BITPOS 0
                              622 ; 32   |#define HW_SR_O_BITPOS 1
                              623 ; 33   |#define HW_SR_Z_BITPOS 2
                              624 ; 34   |#define HW_SR_N_BITPOS 3
                              625 ; 35   |#define HW_SR_U_BITPOS 4
                              626 ; 36   |#define HW_SR_E_BITPOS 5
                              627 ; 37   |#define HW_SR_L_BITPOS 6
                              628 ; 38   |#define HW_SR_IM_BITPOS 8
                              629 ; 39   |#define HW_SR_IM0_BITPOS 8
                              630 ; 40   |#define HW_SR_IM1_BITPOS 9
                              631 ; 41   |#define HW_SR_SM_BITPOS 10
                              632 ; 42   |#define HW_SR_SM0_BITPOS 10
                              633 ; 43   |#define HW_SR_SM1_BITPOS 11
                              634 ; 44   |#define HW_SR_TM_BITPOS 13
                              635 ; 45   |#define HW_SR_DP_BITPOS 14
                              636 ; 46   |#define HW_SR_LOOP_BITPOS 15
                              637 ; 47   |
                              638 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                              639 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                              640 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                              641 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                              642 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                              643 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                              644 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                              645 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                              646 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                              647 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                              648 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                              649 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                              650 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                              651 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                              652 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                              653 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                              654 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                              655 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                              656 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                              657 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                              658 ; 68   |
                              659 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                              660 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                              661 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                              662 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                              663 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                              664 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                              665 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                              666 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                              667 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                              668 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                              669 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                              670 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                              671 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                              672 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                              673 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                              674 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                              675 ; 85   |
                              676 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                              677 ; 87   |//  RAM/ROM Config Register Bit Positions
                              678 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                              679 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                              680 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                              681 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                              682 ; 92   |#endif
                              683 ; 93   |
                              684 ; 94   |
                              685 
                              687 
                              688 ; 19   |#include "regscodec.h"
                              689 
                              691 
                              692 ; 1    |#if !(defined(regscodecinc))
                              693 ; 2    |#define regscodecinc 1
                              694 ; 3    |
                              695 ; 4    |
                              696 ; 5    |
                              697 ; 6    |#include "types.h"
                              698 
                              700 
                              701 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              702 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              703 ; 3    |//
                              704 ; 4    |// Filename: types.h
                              705 ; 5    |// Description: Standard data types
                              706 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              707 ; 7    |
                              708 ; 8    |#ifndef _TYPES_H
                              709 ; 9    |#define _TYPES_H
                              710 ; 10   |
                              711 ; 11   |// TODO:  move this outta here!
                              712 ; 12   |#if !defined(NOERROR)
                              713 ; 13   |#define NOERROR 0
                              714 ; 14   |#define SUCCESS 0
                              715 ; 15   |#endif 
                              716 ; 16   |#if !defined(SUCCESS)
                              717 ; 17   |#define SUCCESS  0
                              718 ; 18   |#endif
                              719 ; 19   |#if !defined(ERROR)
                              720 ; 20   |#define ERROR   -1
                              721 ; 21   |#endif
                              722 ; 22   |#if !defined(FALSE)
                              723 ; 23   |#define FALSE 0
                              724 ; 24   |#endif
                              725 ; 25   |#if !defined(TRUE)
                              726 ; 26   |#define TRUE  1
                              727 ; 27   |#endif
                              728 ; 28   |
                              729 ; 29   |#if !defined(NULL)
                              730 ; 30   |#define NULL 0
                              731 ; 31   |#endif
                              732 ; 32   |
                              733 ; 33   |#define MAX_INT     0x7FFFFF
                              734 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              735 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              736 ; 36   |#define MAX_ULONG   (-1) 
                              737 ; 37   |
                              738 ; 38   |#define WORD_SIZE   24              // word size in bits
                              739 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              740 ; 40   |
                              741 ; 41   |
                              742 ; 42   |#define BYTE    unsigned char       // btVarName
                              743 ; 43   |#define CHAR    signed char         // cVarName
                              744 ; 44   |#define USHORT  unsigned short      // usVarName
                              745 ; 45   |#define SHORT   unsigned short      // sVarName
                              746 ; 46   |#define WORD    unsigned int        // wVarName
                              747 ; 47   |#define INT     signed int          // iVarName
                              748 ; 48   |#define DWORD   unsigned long       // dwVarName
                              749 ; 49   |#define LONG    signed long         // lVarName
                              750 ; 50   |#define BOOL    unsigned int        // bVarName
                              751 ; 51   |#define FRACT   _fract              // frVarName
                              752 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              753 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              754 ; 54   |#define FLOAT   float               // fVarName
                              755 ; 55   |#define DBL     double              // dVarName
                              756 ; 56   |#define ENUM    enum                // eVarName
                              757 ; 57   |#define CMX     _complex            // cmxVarName
                              758 ; 58   |typedef WORD UCS3;                   // 
                              759 ; 59   |
                              760 ; 60   |#define UINT16  unsigned short
                              761 ; 61   |#define UINT8   unsigned char   
                              762 ; 62   |#define UINT32  unsigned long
                              763 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              764 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              765 ; 65   |#define WCHAR   UINT16
                              766 ; 66   |
                              767 ; 67   |//UINT128 is 16 bytes or 6 words
                              768 ; 68   |typedef struct UINT128_3500 {   
                              769 ; 69   |    int val[6];     
                              770 ; 70   |} UINT128_3500;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              771 ; 71   |
                              772 ; 72   |#define UINT128   UINT128_3500
                              773 ; 73   |
                              774 ; 74   |// Little endian word packed byte strings:   
                              775 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              776 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              777 ; 77   |// Little endian word packed byte strings:   
                              778 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              779 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              780 ; 80   |
                              781 ; 81   |// Declare Memory Spaces To Use When Coding
                              782 ; 82   |// A. Sector Buffers
                              783 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              784 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              785 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              786 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              787 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              788 ; 88   |// B. Media DDI Memory
                              789 ; 89   |#define MEDIA_DDI_MEM _Y
                              790 ; 90   |
                              791 ; 91   |
                              792 ; 92   |
                              793 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              794 ; 94   |// Examples of circular pointers:
                              795 ; 95   |//    INT CIRC cpiVarName
                              796 ; 96   |//    DWORD CIRC cpdwVarName
                              797 ; 97   |
                              798 ; 98   |#define RETCODE INT                 // rcVarName
                              799 ; 99   |
                              800 ; 100  |// generic bitfield structure
                              801 ; 101  |struct Bitfield {
                              802 ; 102  |    unsigned int B0  :1;
                              803 ; 103  |    unsigned int B1  :1;
                              804 ; 104  |    unsigned int B2  :1;
                              805 ; 105  |    unsigned int B3  :1;
                              806 ; 106  |    unsigned int B4  :1;
                              807 ; 107  |    unsigned int B5  :1;
                              808 ; 108  |    unsigned int B6  :1;
                              809 ; 109  |    unsigned int B7  :1;
                              810 ; 110  |    unsigned int B8  :1;
                              811 ; 111  |    unsigned int B9  :1;
                              812 ; 112  |    unsigned int B10 :1;
                              813 ; 113  |    unsigned int B11 :1;
                              814 ; 114  |    unsigned int B12 :1;
                              815 ; 115  |    unsigned int B13 :1;
                              816 ; 116  |    unsigned int B14 :1;
                              817 ; 117  |    unsigned int B15 :1;
                              818 ; 118  |    unsigned int B16 :1;
                              819 ; 119  |    unsigned int B17 :1;
                              820 ; 120  |    unsigned int B18 :1;
                              821 ; 121  |    unsigned int B19 :1;
                              822 ; 122  |    unsigned int B20 :1;
                              823 ; 123  |    unsigned int B21 :1;
                              824 ; 124  |    unsigned int B22 :1;
                              825 ; 125  |    unsigned int B23 :1;
                              826 ; 126  |};
                              827 ; 127  |
                              828 ; 128  |union BitInt {
                              829 ; 129  |        struct Bitfield B;
                              830 ; 130  |        int        I;
                              831 ; 131  |};
                              832 ; 132  |
                              833 ; 133  |#define MAX_MSG_LENGTH 10
                              834 ; 134  |struct CMessage
                              835 ; 135  |{
                              836 ; 136  |        unsigned int m_uLength;
                              837 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              838 ; 138  |};
                              839 ; 139  |
                              840 ; 140  |typedef struct {
                              841 ; 141  |    WORD m_wLength;
                              842 ; 142  |    WORD m_wMessage;
                              843 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              844 ; 144  |} Message;
                              845 ; 145  |
                              846 ; 146  |struct MessageQueueDescriptor
                              847 ; 147  |{
                              848 ; 148  |        int *m_pBase;
                              849 ; 149  |        int m_iModulo;
                              850 ; 150  |        int m_iSize;
                              851 ; 151  |        int *m_pHead;
                              852 ; 152  |        int *m_pTail;
                              853 ; 153  |};
                              854 ; 154  |
                              855 ; 155  |struct ModuleEntry
                              856 ; 156  |{
                              857 ; 157  |    int m_iSignaledEventMask;
                              858 ; 158  |    int m_iWaitEventMask;
                              859 ; 159  |    int m_iResourceOfCode;
                              860 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              861 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              862 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              863 ; 163  |    int m_uTimeOutHigh;
                              864 ; 164  |    int m_uTimeOutLow;
                              865 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              866 ; 166  |};
                              867 ; 167  |
                              868 ; 168  |union WaitMask{
                              869 ; 169  |    struct B{
                              870 ; 170  |        unsigned int m_bNone     :1;
                              871 ; 171  |        unsigned int m_bMessage  :1;
                              872 ; 172  |        unsigned int m_bTimer    :1;
                              873 ; 173  |        unsigned int m_bButton   :1;
                              874 ; 174  |    } B;
                              875 ; 175  |    int I;
                              876 ; 176  |} ;
                              877 ; 177  |
                              878 ; 178  |
                              879 ; 179  |struct Button {
                              880 ; 180  |        WORD wButtonEvent;
                              881 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              882 ; 182  |};
                              883 ; 183  |
                              884 ; 184  |struct Message {
                              885 ; 185  |        WORD wMsgLength;
                              886 ; 186  |        WORD wMsgCommand;
                              887 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              888 ; 188  |};
                              889 ; 189  |
                              890 ; 190  |union EventTypes {
                              891 ; 191  |        struct CMessage msg;
                              892 ; 192  |        struct Button Button ;
                              893 ; 193  |        struct Message Message;
                              894 ; 194  |};
                              895 ; 195  |
                              896 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              897 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              898 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              899 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              900 ; 200  |
                              901 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              902 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              903 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              904 ; 204  |
                              905 ; 205  |#if DEBUG
                              906 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              907 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              908 ; 208  |#else 
                              909 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              910 ; 210  |#define DebugBuildAssert(x)    
                              911 ; 211  |#endif
                              912 ; 212  |
                              913 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              914 ; 214  |//  #pragma asm
                              915 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              916 ; 216  |//  #pragma endasm
                              917 ; 217  |
                              918 ; 218  |
                              919 ; 219  |#ifdef COLOR_262K
                              920 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              921 ; 221  |#elif defined(COLOR_65K)
                              922 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              923 ; 223  |#else
                              924 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              925 ; 225  |#endif
                              926 ; 226  |    
                              927 ; 227  |#endif // #ifndef _TYPES_H
                              928 
                              930 
                              931 ; 7    |
                              932 ; 8    |
                              933 ; 9    |
                              934 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              935 ; 11   |
                              936 ; 12   |//   SYSTEM STMP Registers 
                              937 ; 13   |//      Last Edited 7.17.2003 M. Henson
                              938 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              939 ; 15   |
                              940 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                              941 ; 17   |
                              942 ; 18   |
                              943 ; 19   |
                              944 ; 20   |
                              945 ; 21   |
                              946 ; 22   |
                              947 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                              948 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                              949 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                              950 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                              951 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                              952 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                              953 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                              954 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                              955 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                              956 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                              957 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                              958 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                              959 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                              960 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                              961 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                              962 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                              963 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                              964 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                              965 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                              966 ; 42   |
                              967 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                              968 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                              969 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                              970 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                              971 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                              972 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                              973 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                              974 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                              975 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                              976 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                              977 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                              978 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                              979 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                              980 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                              981 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                              982 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                              983 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                              984 ; 60   |
                              985 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                              986 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                              987 ; 63   |
                              988 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              989 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              990 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              991 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              992 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              993 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              994 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              995 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                              996 ; 72   |
                              997 ; 73   |#if defined(CAPLESS_HP)
                              998 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                              999 ; 75   |#else 
                             1000 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             1001 ; 77   |#endif
                             1002 ; 78   |
                             1003 ; 79   |// Headphone control register
                             1004 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             1005 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1006 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             1007 ; 83   |typedef union               
                             1008 ; 84   |{
                             1009 ; 85   |    struct {
                             1010 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             1011 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             1012 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             1013 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             1014 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             1015 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             1016 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             1017 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             1018 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             1019 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             1020 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             1021 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             1022 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1023 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             1024 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             1025 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             1026 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             1027 ; 103  |    } B;
                             1028 ; 104  |    int I;
                             1029 ; 105  |    unsigned int U;
                             1030 ; 106  |} hpctrl_type;
                             1031 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             1032 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             1033 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             1034 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             1035 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             1036 ; 112  |
                             1037 ; 113  |
                             1038 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             1039 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             1040 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             1041 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             1042 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             1043 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             1044 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             1045 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             1046 ; 122  |
                             1047 ; 123  |
                             1048 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             1049 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             1050 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             1051 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             1052 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             1053 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             1054 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             1055 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             1056 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             1057 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             1058 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             1059 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             1060 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             1061 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             1062 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             1063 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             1064 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             1065 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             1066 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             1067 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             1068 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             1069 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             1070 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             1071 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             1072 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             1073 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             1074 ; 150  |
                             1075 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             1076 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             1077 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             1078 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             1079 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             1080 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             1081 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             1082 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             1083 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             1084 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             1085 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             1086 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             1087 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             1088 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             1089 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             1090 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             1091 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             1092 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             1093 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             1094 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             1095 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             1096 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             1097 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             1098 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             1099 ; 175  |
                             1100 ; 176  |
                             1101 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             1102 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             1103 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             1104 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             1105 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             1106 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             1107 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             1108 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             1109 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             1110 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             1111 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             1112 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             1113 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             1114 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             1115 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             1116 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             1117 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             1118 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             1119 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             1120 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             1121 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             1122 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             1123 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             1124 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             1125 ; 201  |
                             1126 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             1127 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             1128 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             1129 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             1130 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             1131 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             1132 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             1133 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             1134 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             1135 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             1136 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             1137 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             1138 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             1139 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             1140 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             1141 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             1142 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             1143 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             1144 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             1145 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             1146 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             1147 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             1148 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             1149 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             1150 ; 226  |
                             1151 ; 227  |typedef union               
                             1152 ; 228  |{
                             1153 ; 229  |    struct {
                             1154 ; 230  |        int INV_USB_CLK            : 1;
                             1155 ; 231  |        int USB_DFF_BYPASS         : 1;
                             1156 ; 232  |        int HOLD_GND               : 1;
                             1157 ; 233  |        int ACKI                   : 1;
                             1158 ; 234  |        int ASD2X                  : 1;
                             1159 ; 235  |        int PCPCU                  : 1;
                             1160 ; 236  |        int PCPCD                  : 1;
                             1161 ; 237  |        int DCKI                   : 1;
                             1162 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             1163 ; 239  |        int PSRN                   : 1;
                             1164 ; 240  |        int FX2                    : 1;
                             1165 ; 241  |        int VCOS                   : 1;
                             1166 ; 242  |        int XBCO                   : 1;
                             1167 ; 243  |        int XBGC                   : 1;
                             1168 ; 244  |        int ADTHD                  : 1;
                             1169 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             1170 ; 246  |        int PWDADC                 : 1;
                             1171 ; 247  |        int MICBIAS1               : 1;
                             1172 ; 248  |        int EZD                    : 1;
                             1173 ; 249  |        int DZCDA                  : 1;
                             1174 ; 250  |        int DZCFM                  : 1;
                             1175 ; 251  |        int DZCLI                  : 1;
                             1176 ; 252  |        int DZCMI                  : 1;
                             1177 ; 253  |        int DZCMA                  : 1;
                             1178 ; 254  |    } B;
                             1179 ; 255  |    int I;
                             1180 ; 256  |    unsigned int U;
                             1181 ; 257  |} mix_tbr_type;
                             1182 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             1183 ; 259  |
                             1184 ; 260  |
                             1185 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             1186 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1187 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             1188 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             1189 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             1190 ; 266  |
                             1191 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             1192 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             1193 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             1194 ; 270  |
                             1195 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             1196 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             1197 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             1198 ; 274  |
                             1199 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             1200 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             1201 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             1202 ; 278  |
                             1203 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             1204 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             1205 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             1206 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             1207 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             1208 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             1209 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             1210 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             1211 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             1212 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             1213 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             1214 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             1215 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             1216 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             1217 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             1218 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             1219 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             1220 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             1221 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             1222 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             1223 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             1224 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             1225 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             1226 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             1227 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             1228 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             1229 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             1230 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             1231 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             1232 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             1233 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             1234 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             1235 ; 311  |
                             1236 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             1237 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             1238 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             1239 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             1240 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             1241 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             1242 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             1243 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             1244 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             1245 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             1246 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             1247 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             1248 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             1249 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             1250 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             1251 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             1252 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             1253 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             1254 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             1255 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             1256 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             1257 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             1258 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             1259 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             1260 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             1261 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             1262 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             1263 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             1264 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             1265 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             1266 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             1267 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             1268 ; 344  |
                             1269 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             1270 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1271 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             1272 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             1273 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1274 ; 350  |
                             1275 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             1276 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             1277 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             1278 ; 354  |
                             1279 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             1280 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             1281 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             1282 ; 358  |
                             1283 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             1284 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             1285 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             1286 ; 362  |
                             1287 ; 363  |
                             1288 ; 364  |typedef union               
                             1289 ; 365  |{
                             1290 ; 366  |    struct
                             1291 ; 367  |    {
                             1292 ; 368  |        unsigned MR :5;
                             1293 ; 369  |        int         :3;
                             1294 ; 370  |        unsigned ML :5;
                             1295 ; 371  |        int         :2;
                             1296 ; 372  |        int MUTE    :1;
                             1297 ; 373  |    } B;
                             1298 ; 374  |    int I;
                             1299 ; 375  |    unsigned int U;
                             1300 ; 376  |} mix_mastervr_type;
                             1301 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             1302 ; 378  |
                             1303 ; 379  |
                             1304 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             1305 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             1306 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             1307 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             1308 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             1309 ; 385  |
                             1310 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             1311 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             1312 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             1313 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             1314 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             1315 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             1316 ; 392  |
                             1317 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             1318 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             1319 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             1320 ; 396  |
                             1321 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             1322 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             1323 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             1324 ; 400  |
                             1325 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             1326 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             1327 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             1328 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             1329 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             1330 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             1331 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             1332 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             1333 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             1334 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             1335 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             1336 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             1337 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             1338 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             1339 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             1340 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             1341 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             1342 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             1343 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             1344 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             1345 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             1346 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             1347 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             1348 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             1349 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             1350 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             1351 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             1352 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             1353 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             1354 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             1355 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             1356 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             1357 ; 433  |
                             1358 ; 434  |typedef union               
                             1359 ; 435  |{
                             1360 ; 436  |    struct {
                             1361 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             1362 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             1363 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             1364 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             1365 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             1366 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             1367 ; 443  |    } B;
                             1368 ; 444  |    int I;
                             1369 ; 445  |    unsigned int U;
                             1370 ; 446  |} mix_micinvr_type;
                             1371 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             1372 ; 448  |
                             1373 ; 449  |
                             1374 ; 450  |
                             1375 ; 451  |
                             1376 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             1377 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             1378 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             1379 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             1380 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             1381 ; 457  |
                             1382 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             1383 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             1384 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             1385 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             1386 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             1387 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             1388 ; 464  |
                             1389 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             1390 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             1391 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             1392 ; 468  |
                             1393 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             1394 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             1395 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             1396 ; 472  |
                             1397 ; 473  |typedef union               
                             1398 ; 474  |{
                             1399 ; 475  |    struct {
                             1400 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             1401 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             1402 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             1403 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             1404 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             1405 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             1406 ; 482  |    } B;
                             1407 ; 483  |    int I;
                             1408 ; 484  |    unsigned int U;
                             1409 ; 485  |} mix_line1invr_type;
                             1410 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             1411 ; 487  |
                             1412 ; 488  |
                             1413 ; 489  |
                             1414 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             1415 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             1416 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             1417 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             1418 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             1419 ; 495  |
                             1420 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             1421 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             1422 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             1423 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             1424 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             1425 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             1426 ; 502  |
                             1427 ; 503  |
                             1428 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             1429 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             1430 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             1431 ; 507  |
                             1432 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             1433 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             1434 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             1435 ; 511  |
                             1436 ; 512  |typedef union               
                             1437 ; 513  |{
                             1438 ; 514  |    struct {
                             1439 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             1440 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             1441 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             1442 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             1443 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             1444 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             1445 ; 521  |    } B;
                             1446 ; 522  |    int I;
                             1447 ; 523  |    unsigned int U;
                             1448 ; 524  |} mix_line2invr_type;
                             1449 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             1450 ; 526  |
                             1451 ; 527  |
                             1452 ; 528  |
                             1453 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             1454 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             1455 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             1456 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             1457 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             1458 ; 534  |
                             1459 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             1460 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             1461 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             1462 ; 538  |
                             1463 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             1464 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             1465 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             1466 ; 542  |
                             1467 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             1468 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             1469 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             1470 ; 546  |
                             1471 ; 547  |typedef union               
                             1472 ; 548  |{
                             1473 ; 549  |    struct {
                             1474 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             1475 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             1476 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             1477 ; 553  |    } B;
                             1478 ; 554  |    int I;
                             1479 ; 555  |    unsigned int U;
                             1480 ; 556  |} mix_dacinvr_type;
                             1481 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             1482 ; 558  |
                             1483 ; 559  |
                             1484 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             1485 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             1486 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             1487 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             1488 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             1489 ; 565  |
                             1490 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             1491 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             1492 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             1493 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             1494 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             1495 ; 571  |
                             1496 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             1497 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             1498 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             1499 ; 575  |
                             1500 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             1501 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             1502 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             1503 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             1504 ; 580  |
                             1505 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             1506 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             1507 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             1508 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             1509 ; 585  |
                             1510 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             1511 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             1512 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETMASK)
                             1513 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             1514 ; 590  |
                             1515 ; 591  |typedef union               
                             1516 ; 592  |{
                             1517 ; 593  |    struct {
                             1518 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             1519 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             1520 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             1521 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             1522 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             1523 ; 599  |    } B;
                             1524 ; 600  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1525 ; 601  |    unsigned int U;
                             1526 ; 602  |} mix_recselr_type;
                             1527 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             1528 ; 604  |
                             1529 ; 605  |
                             1530 ; 606  |
                             1531 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             1532 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             1533 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             1534 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             1535 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             1536 ; 612  |
                             1537 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             1538 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             1539 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             1540 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             1541 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             1542 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             1543 ; 619  |
                             1544 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             1545 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             1546 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             1547 ; 623  |
                             1548 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             1549 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             1550 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             1551 ; 627  |
                             1552 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             1553 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             1554 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             1555 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             1556 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             1557 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             1558 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             1559 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             1560 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             1561 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             1562 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             1563 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             1564 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             1565 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             1566 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             1567 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             1568 ; 644  |
                             1569 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             1570 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             1571 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             1572 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             1573 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             1574 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             1575 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             1576 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             1577 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             1578 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             1579 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             1580 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             1581 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             1582 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             1583 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             1584 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             1585 ; 661  |
                             1586 ; 662  |typedef union               
                             1587 ; 663  |{
                             1588 ; 664  |    struct {
                             1589 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             1590 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             1591 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             1592 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             1593 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             1594 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             1595 ; 671  |    } B;
                             1596 ; 672  |    int I;
                             1597 ; 673  |    unsigned int U;
                             1598 ; 674  |} mix_adcgainr_type;
                             1599 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             1600 ; 676  |
                             1601 ; 677  |
                             1602 ; 678  |
                             1603 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             1604 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             1605 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             1606 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             1607 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             1608 ; 684  |
                             1609 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             1610 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             1611 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             1612 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             1613 ; 689  |
                             1614 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             1615 ; 691  |
                             1616 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             1617 ; 693  |
                             1618 ; 694  |typedef union               
                             1619 ; 695  |{
                             1620 ; 696  |    struct {
                             1621 ; 697  |                int                     : 9;
                             1622 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             1623 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             1624 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             1625 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             1626 ; 702  |    } B;
                             1627 ; 703  |    int I;
                             1628 ; 704  |    unsigned int U;
                             1629 ; 705  |} mix_pwrdnr_type;
                             1630 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             1631 ; 707  |
                             1632 ; 708  |
                             1633 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             1634 ; 710  |
                             1635 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             1636 ; 712  |
                             1637 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             1638 ; 714  |
                             1639 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             1640 ; 716  |
                             1641 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             1642 ; 718  |
                             1643 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             1644 ; 720  |
                             1645 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             1646 ; 722  |
                             1647 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             1648 ; 724  |
                             1649 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             1650 ; 726  |
                             1651 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             1652 ; 728  |
                             1653 ; 729  |
                             1654 ; 730  |
                             1655 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             1656 ; 732  |
                             1657 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             1658 ; 734  |
                             1659 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             1660 ; 736  |
                             1661 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             1662 ; 738  |
                             1663 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             1664 ; 740  |
                             1665 ; 741  |
                             1666 ; 742  |
                             1667 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_TEST_DAC_CHOP_CLK_BITPOS)        
                             1668 ; 744  |
                             1669 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             1670 ; 746  |
                             1671 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             1672 ; 748  |
                             1673 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_CFG_BITPOS) 
                             1674 ; 750  |
                             1675 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_BITPOS) 
                             1676 ; 752  |
                             1677 ; 753  |
                             1678 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             1679 ; 755  |
                             1680 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)     
                             1681 ; 757  |
                             1682 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             1683 ; 759  |
                             1684 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             1685 ; 761  |
                             1686 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             1687 ; 763  |
                             1688 ; 764  |
                             1689 ; 765  |typedef union               
                             1690 ; 766  |{
                             1691 ; 767  |    struct {
                             1692 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             1693 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             1694 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             1695 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             1696 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             1697 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             1698 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             1699 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             1700 ; 776  |    } B;
                             1701 ; 777  |    int I;
                             1702 ; 778  |    unsigned int U;
                             1703 ; 779  |} mix_test_type;
                             1704 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Analog Persistent Config Register */
                             1705 ; 781  |
                             1706 ; 782  |
                             1707 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             1708 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             1709 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             1710 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             1711 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             1712 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             1713 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             1714 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             1715 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             1716 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             1717 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             1718 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             1719 ; 795  |
                             1720 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             1721 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             1722 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             1723 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             1724 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             1725 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             1726 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             1727 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             1728 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             1729 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             1730 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             1731 ; 807  |
                             1732 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_DACVBGVAL_BITPOS)
                             1733 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_BITPOS)
                             1734 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_BITPOS)
                             1735 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS)
                             1736 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCREFV_BITPOS)
                             1737 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_BITPOS)
                             1738 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDWNS_BITPOS)
                             1739 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BITPOS)
                             1740 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BITPOS)
                             1741 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_PWR_BITPOS)
                             1742 ; 818  |
                             1743 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             1744 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             1745 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             1746 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             1747 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             1748 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             1749 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             1750 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             1751 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             1752 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             1753 ; 829  |
                             1754 ; 830  |typedef union               
                             1755 ; 831  |{
                             1756 ; 832  |    struct {
                             1757 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             1758 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             1759 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             1760 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             1761 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             1762 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             1763 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             1764 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             1765 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             1766 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             1767 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             1768 ; 844  |    } B;
                             1769 ; 845  |    int I;
                             1770 ; 846  |    unsigned int U;
                             1771 ; 847  |} ref_ctrl_type;
                             1772 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             1773 ; 849  |
                             1774 ; 850  |
                             1775 ; 851  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1776 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             1777 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             1778 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             1779 ; 855  |//////  DAC Registers
                             1780 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             1781 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             1782 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             1783 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             1784 ; 860  |
                             1785 ; 861  |
                             1786 ; 862  |
                             1787 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             1788 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             1789 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             1790 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             1791 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             1792 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             1793 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             1794 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             1795 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             1796 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             1797 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             1798 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             1799 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             1800 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             1801 ; 877  |
                             1802 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             1803 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             1804 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             1805 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             1806 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             1807 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             1808 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             1809 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             1810 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             1811 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             1812 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             1813 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             1814 ; 890  |
                             1815 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             1816 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             1817 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             1818 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             1819 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             1820 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             1821 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             1822 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             1823 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             1824 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             1825 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             1826 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             1827 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             1828 ; 904  |
                             1829 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             1830 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             1831 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             1832 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             1833 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             1834 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             1835 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             1836 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             1837 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             1838 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             1839 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             1840 ; 916  |
                             1841 ; 917  |
                             1842 ; 918  |typedef union               
                             1843 ; 919  |{
                             1844 ; 920  |    struct {
                             1845 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             1846 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             1847 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             1848 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             1849 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             1850 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             1851 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             1852 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             1853 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             1854 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             1855 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             1856 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             1857 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             1858 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             1859 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             1860 ; 936  |    } B;
                             1861 ; 937  |    int I;
                             1862 ; 938  |    unsigned int U;
                             1863 ; 939  |} dac_csr_type;
                             1864 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             1865 ; 941  |
                             1866 ; 942  |
                             1867 ; 943  |
                             1868 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             1869 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             1870 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             1871 ; 947  |
                             1872 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             1873 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             1874 ; 950  |
                             1875 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             1876 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             1877 ; 953  |
                             1878 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             1879 ; 955  |
                             1880 ; 956  |typedef union               
                             1881 ; 957  |{
                             1882 ; 958  |    struct {
                             1883 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             1884 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             1885 ; 961  |    } B;
                             1886 ; 962  |    int I;
                             1887 ; 963  |    unsigned int U;
                             1888 ; 964  |} dac_srr_type;
                             1889 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             1890 ; 966  |
                             1891 ; 967  |
                             1892 ; 968  |
                             1893 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             1894 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             1895 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             1896 ; 972  |
                             1897 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             1898 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             1899 ; 975  |
                             1900 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             1901 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                             1902 ; 978  |
                             1903 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             1904 ; 980  |
                             1905 ; 981  |typedef union               
                             1906 ; 982  |{
                             1907 ; 983  |    struct {
                             1908 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             1909 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             1910 ; 986  |    } B;
                             1911 ; 987  |    int I;
                             1912 ; 988  |    unsigned int U;
                             1913 ; 989  |} dac_wcr_type;
                             1914 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             1915 ; 991  |
                             1916 ; 992  |
                             1917 ; 993  |
                             1918 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             1919 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             1920 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             1921 ; 997  |
                             1922 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             1923 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             1924 ; 1000 |
                             1925 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             1926 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                             1927 ; 1003 |
                             1928 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             1929 ; 1005 |
                             1930 ; 1006 |typedef union               
                             1931 ; 1007 |{
                             1932 ; 1008 |    struct {
                             1933 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             1934 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             1935 ; 1011 |    } B;
                             1936 ; 1012 |    int I;
                             1937 ; 1013 |    unsigned int U;
                             1938 ; 1014 |} dac_cpr_type;
                             1939 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             1940 ; 1016 |
                             1941 ; 1017 |
                             1942 ; 1018 |
                             1943 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             1944 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             1945 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             1946 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             1947 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             1948 ; 1024 |
                             1949 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             1950 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             1951 ; 1027 |
                             1952 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             1953 ; 1029 |
                             1954 ; 1030 |typedef union               
                             1955 ; 1031 |{
                             1956 ; 1032 |    struct {
                             1957 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             1958 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             1959 ; 1035 |    } B;
                             1960 ; 1036 |    int I;
                             1961 ; 1037 |    unsigned int U;
                             1962 ; 1038 |} dac_mr_type;
                             1963 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             1964 ; 1040 |
                             1965 ; 1041 |
                             1966 ; 1042 |
                             1967 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             1968 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             1969 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             1970 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             1971 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             1972 ; 1048 |
                             1973 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             1974 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                             1975 ; 1051 |
                             1976 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             1977 ; 1053 |
                             1978 ; 1054 |typedef union               
                             1979 ; 1055 |{
                             1980 ; 1056 |    struct {
                             1981 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             1982 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             1983 ; 1059 |    } B;
                             1984 ; 1060 |    int I;
                             1985 ; 1061 |    unsigned int U;
                             1986 ; 1062 |} dac_bar_type;
                             1987 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             1988 ; 1064 |
                             1989 ; 1065 |
                             1990 ; 1066 |
                             1991 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             1992 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             1993 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             1994 ; 1070 |
                             1995 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             1996 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             1997 ; 1073 |
                             1998 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                             1999 ; 1075 |
                             2000 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             2001 ; 1077 |
                             2002 ; 1078 |typedef union               
                             2003 ; 1079 |{
                             2004 ; 1080 |    struct {
                             2005 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             2006 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             2007 ; 1083 |    } B;
                             2008 ; 1084 |    int I;
                             2009 ; 1085 |    unsigned int U;
                             2010 ; 1086 |} dac_icr_type;
                             2011 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             2012 ; 1088 |
                             2013 ; 1089 |
                             2014 ; 1090 |
                             2015 ; 1091 |
                             2016 ; 1092 |
                             2017 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             2018 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             2019 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             2020 ; 1096 |//////  ADC Registers
                             2021 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             2022 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             2023 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             2024 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             2025 ; 1101 |
                             2026 ; 1102 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2027 ; 1103 |
                             2028 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             2029 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             2030 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             2031 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             2032 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             2033 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             2034 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             2035 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             2036 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             2037 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             2038 ; 1114 |
                             2039 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             2040 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             2041 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             2042 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             2043 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             2044 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             2045 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             2046 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             2047 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             2048 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             2049 ; 1125 |
                             2050 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             2051 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             2052 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             2053 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             2054 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             2055 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS)        
                             2056 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BITPOS)        
                             2057 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             2058 ; 1134 |
                             2059 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             2060 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             2061 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             2062 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             2063 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             2064 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             2065 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             2066 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             2067 ; 1143 |
                             2068 ; 1144 |typedef union               
                             2069 ; 1145 |{
                             2070 ; 1146 |    struct {
                             2071 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             2072 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             2073 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             2074 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             2075 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             2076 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             2077 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             2078 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             2079 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             2080 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             2081 ; 1157 |    } B;
                             2082 ; 1158 |    int I;
                             2083 ; 1159 |    unsigned int U;
                             2084 ; 1160 |} adc_csr_type;
                             2085 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             2086 ; 1162 |
                             2087 ; 1163 |
                             2088 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             2089 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             2090 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             2091 ; 1167 |
                             2092 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             2093 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             2094 ; 1170 |
                             2095 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                             2096 ; 1172 |
                             2097 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             2098 ; 1174 |
                             2099 ; 1175 |typedef union               
                             2100 ; 1176 |{
                             2101 ; 1177 |    struct {
                             2102 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             2103 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             2104 ; 1180 |    } B;
                             2105 ; 1181 |    int I;
                             2106 ; 1182 |    unsigned int U;
                             2107 ; 1183 |} adc_wcr_type;
                             2108 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             2109 ; 1185 |
                             2110 ; 1186 |
                             2111 ; 1187 |
                             2112 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             2113 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             2114 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             2115 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             2116 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             2117 ; 1193 |
                             2118 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             2119 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                             2120 ; 1196 |
                             2121 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             2122 ; 1198 |
                             2123 ; 1199 |typedef union               
                             2124 ; 1200 |{
                             2125 ; 1201 |    struct {
                             2126 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             2127 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             2128 ; 1204 |    } B;
                             2129 ; 1205 |    int I;
                             2130 ; 1206 |    unsigned int U;
                             2131 ; 1207 |} adc_bar_type;
                             2132 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             2133 ; 1209 |
                             2134 ; 1210 |
                             2135 ; 1211 |
                             2136 ; 1212 |
                             2137 ; 1213 |
                             2138 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             2139 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             2140 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             2141 ; 1217 |
                             2142 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             2143 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             2144 ; 1220 |
                             2145 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                             2146 ; 1222 |
                             2147 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             2148 ; 1224 |
                             2149 ; 1225 |typedef union               
                             2150 ; 1226 |{
                             2151 ; 1227 |    struct {
                             2152 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             2153 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             2154 ; 1230 |    } B;
                             2155 ; 1231 |    int I;
                             2156 ; 1232 |    unsigned int U;
                             2157 ; 1233 |} adc_cpr_type;
                             2158 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             2159 ; 1235 |
                             2160 ; 1236 |
                             2161 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             2162 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             2163 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             2164 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             2165 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             2166 ; 1242 |
                             2167 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             2168 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             2169 ; 1245 |
                             2170 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             2171 ; 1247 |
                             2172 ; 1248 |typedef union               
                             2173 ; 1249 |{
                             2174 ; 1250 |    struct {
                             2175 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             2176 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             2177 ; 1253 |    } B;
                             2178 ; 1254 |    int I;
                             2179 ; 1255 |    unsigned int U;
                             2180 ; 1256 |} adc_mr_type;
                             2181 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             2182 ; 1258 |
                             2183 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             2184 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             2185 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             2186 ; 1262 |
                             2187 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             2188 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             2189 ; 1265 |
                             2190 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             2191 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             2192 ; 1268 |
                             2193 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             2194 ; 1270 |
                             2195 ; 1271 |typedef union               
                             2196 ; 1272 |{
                             2197 ; 1273 |    struct {
                             2198 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             2199 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             2200 ; 1276 |    } B;
                             2201 ; 1277 |    int I;
                             2202 ; 1278 |    unsigned int U;
                             2203 ; 1279 |} adc_srr_type;
                             2204 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             2205 ; 1281 |
                             2206 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             2207 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             2208 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             2209 ; 1285 |
                             2210 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             2211 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             2212 ; 1288 |
                             2213 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                             2214 ; 1290 |
                             2215 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             2216 ; 1292 |
                             2217 ; 1293 |typedef union               
                             2218 ; 1294 |{
                             2219 ; 1295 |    struct {
                             2220 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             2221 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             2222 ; 1298 |    } B;
                             2223 ; 1299 |    int I;
                             2224 ; 1300 |    unsigned int U;
                             2225 ; 1301 |} adc_icr_type;
                             2226 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             2227 ; 1303 |
                             2228 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             2229 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             2230 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             2231 ; 1307 |
                             2232 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             2233 ; 1309 |
                             2234 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             2235 ; 1311 |
                             2236 ; 1312 |#endif
                             2237 ; 1313 |
                             2238 
                             2240 
                             2241 ; 20   |#include "regsdcdc.h"
                             2242 
                             2244 
                             2245 ; 1    |#if !(defined(regsdcdcinc))
                             2246 ; 2    |
                             2247 ; 3    |#define regssysteminc 1
                             2248 ; 4    |
                             2249 ; 5    |
                             2250 ; 6    |
                             2251 ; 7    |#include "types.h"
                             2252 
                             2254 
                             2255 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2256 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2257 ; 3    |//
                             2258 ; 4    |// Filename: types.h
                             2259 ; 5    |// Description: Standard data types
                             2260 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2261 ; 7    |
                             2262 ; 8    |#ifndef _TYPES_H
                             2263 ; 9    |#define _TYPES_H
                             2264 ; 10   |
                             2265 ; 11   |// TODO:  move this outta here!
                             2266 ; 12   |#if !defined(NOERROR)
                             2267 ; 13   |#define NOERROR 0
                             2268 ; 14   |#define SUCCESS 0
                             2269 ; 15   |#endif 
                             2270 ; 16   |#if !defined(SUCCESS)
                             2271 ; 17   |#define SUCCESS  0
                             2272 ; 18   |#endif
                             2273 ; 19   |#if !defined(ERROR)
                             2274 ; 20   |#define ERROR   -1
                             2275 ; 21   |#endif
                             2276 ; 22   |#if !defined(FALSE)
                             2277 ; 23   |#define FALSE 0
                             2278 ; 24   |#endif
                             2279 ; 25   |#if !defined(TRUE)
                             2280 ; 26   |#define TRUE  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2281 ; 27   |#endif
                             2282 ; 28   |
                             2283 ; 29   |#if !defined(NULL)
                             2284 ; 30   |#define NULL 0
                             2285 ; 31   |#endif
                             2286 ; 32   |
                             2287 ; 33   |#define MAX_INT     0x7FFFFF
                             2288 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2289 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2290 ; 36   |#define MAX_ULONG   (-1) 
                             2291 ; 37   |
                             2292 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2293 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2294 ; 40   |
                             2295 ; 41   |
                             2296 ; 42   |#define BYTE    unsigned char       // btVarName
                             2297 ; 43   |#define CHAR    signed char         // cVarName
                             2298 ; 44   |#define USHORT  unsigned short      // usVarName
                             2299 ; 45   |#define SHORT   unsigned short      // sVarName
                             2300 ; 46   |#define WORD    unsigned int        // wVarName
                             2301 ; 47   |#define INT     signed int          // iVarName
                             2302 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2303 ; 49   |#define LONG    signed long         // lVarName
                             2304 ; 50   |#define BOOL    unsigned int        // bVarName
                             2305 ; 51   |#define FRACT   _fract              // frVarName
                             2306 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2307 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2308 ; 54   |#define FLOAT   float               // fVarName
                             2309 ; 55   |#define DBL     double              // dVarName
                             2310 ; 56   |#define ENUM    enum                // eVarName
                             2311 ; 57   |#define CMX     _complex            // cmxVarName
                             2312 ; 58   |typedef WORD UCS3;                   // 
                             2313 ; 59   |
                             2314 ; 60   |#define UINT16  unsigned short
                             2315 ; 61   |#define UINT8   unsigned char   
                             2316 ; 62   |#define UINT32  unsigned long
                             2317 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2318 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2319 ; 65   |#define WCHAR   UINT16
                             2320 ; 66   |
                             2321 ; 67   |//UINT128 is 16 bytes or 6 words
                             2322 ; 68   |typedef struct UINT128_3500 {   
                             2323 ; 69   |    int val[6];     
                             2324 ; 70   |} UINT128_3500;
                             2325 ; 71   |
                             2326 ; 72   |#define UINT128   UINT128_3500
                             2327 ; 73   |
                             2328 ; 74   |// Little endian word packed byte strings:   
                             2329 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2330 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2331 ; 77   |// Little endian word packed byte strings:   
                             2332 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2333 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2334 ; 80   |
                             2335 ; 81   |// Declare Memory Spaces To Use When Coding
                             2336 ; 82   |// A. Sector Buffers
                             2337 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2338 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2339 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2340 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2341 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2342 ; 88   |// B. Media DDI Memory
                             2343 ; 89   |#define MEDIA_DDI_MEM _Y
                             2344 ; 90   |
                             2345 ; 91   |
                             2346 ; 92   |
                             2347 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2348 ; 94   |// Examples of circular pointers:
                             2349 ; 95   |//    INT CIRC cpiVarName
                             2350 ; 96   |//    DWORD CIRC cpdwVarName
                             2351 ; 97   |
                             2352 ; 98   |#define RETCODE INT                 // rcVarName
                             2353 ; 99   |
                             2354 ; 100  |// generic bitfield structure
                             2355 ; 101  |struct Bitfield {
                             2356 ; 102  |    unsigned int B0  :1;
                             2357 ; 103  |    unsigned int B1  :1;
                             2358 ; 104  |    unsigned int B2  :1;
                             2359 ; 105  |    unsigned int B3  :1;
                             2360 ; 106  |    unsigned int B4  :1;
                             2361 ; 107  |    unsigned int B5  :1;
                             2362 ; 108  |    unsigned int B6  :1;
                             2363 ; 109  |    unsigned int B7  :1;
                             2364 ; 110  |    unsigned int B8  :1;
                             2365 ; 111  |    unsigned int B9  :1;
                             2366 ; 112  |    unsigned int B10 :1;
                             2367 ; 113  |    unsigned int B11 :1;
                             2368 ; 114  |    unsigned int B12 :1;
                             2369 ; 115  |    unsigned int B13 :1;
                             2370 ; 116  |    unsigned int B14 :1;
                             2371 ; 117  |    unsigned int B15 :1;
                             2372 ; 118  |    unsigned int B16 :1;
                             2373 ; 119  |    unsigned int B17 :1;
                             2374 ; 120  |    unsigned int B18 :1;
                             2375 ; 121  |    unsigned int B19 :1;
                             2376 ; 122  |    unsigned int B20 :1;
                             2377 ; 123  |    unsigned int B21 :1;
                             2378 ; 124  |    unsigned int B22 :1;
                             2379 ; 125  |    unsigned int B23 :1;
                             2380 ; 126  |};
                             2381 ; 127  |
                             2382 ; 128  |union BitInt {
                             2383 ; 129  |        struct Bitfield B;
                             2384 ; 130  |        int        I;
                             2385 ; 131  |};
                             2386 ; 132  |
                             2387 ; 133  |#define MAX_MSG_LENGTH 10
                             2388 ; 134  |struct CMessage
                             2389 ; 135  |{
                             2390 ; 136  |        unsigned int m_uLength;
                             2391 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2392 ; 138  |};
                             2393 ; 139  |
                             2394 ; 140  |typedef struct {
                             2395 ; 141  |    WORD m_wLength;
                             2396 ; 142  |    WORD m_wMessage;
                             2397 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2398 ; 144  |} Message;
                             2399 ; 145  |
                             2400 ; 146  |struct MessageQueueDescriptor
                             2401 ; 147  |{
                             2402 ; 148  |        int *m_pBase;
                             2403 ; 149  |        int m_iModulo;
                             2404 ; 150  |        int m_iSize;
                             2405 ; 151  |        int *m_pHead;
                             2406 ; 152  |        int *m_pTail;
                             2407 ; 153  |};
                             2408 ; 154  |
                             2409 ; 155  |struct ModuleEntry
                             2410 ; 156  |{
                             2411 ; 157  |    int m_iSignaledEventMask;
                             2412 ; 158  |    int m_iWaitEventMask;
                             2413 ; 159  |    int m_iResourceOfCode;
                             2414 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2415 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             2416 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2417 ; 163  |    int m_uTimeOutHigh;
                             2418 ; 164  |    int m_uTimeOutLow;
                             2419 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2420 ; 166  |};
                             2421 ; 167  |
                             2422 ; 168  |union WaitMask{
                             2423 ; 169  |    struct B{
                             2424 ; 170  |        unsigned int m_bNone     :1;
                             2425 ; 171  |        unsigned int m_bMessage  :1;
                             2426 ; 172  |        unsigned int m_bTimer    :1;
                             2427 ; 173  |        unsigned int m_bButton   :1;
                             2428 ; 174  |    } B;
                             2429 ; 175  |    int I;
                             2430 ; 176  |} ;
                             2431 ; 177  |
                             2432 ; 178  |
                             2433 ; 179  |struct Button {
                             2434 ; 180  |        WORD wButtonEvent;
                             2435 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2436 ; 182  |};
                             2437 ; 183  |
                             2438 ; 184  |struct Message {
                             2439 ; 185  |        WORD wMsgLength;
                             2440 ; 186  |        WORD wMsgCommand;
                             2441 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2442 ; 188  |};
                             2443 ; 189  |
                             2444 ; 190  |union EventTypes {
                             2445 ; 191  |        struct CMessage msg;
                             2446 ; 192  |        struct Button Button ;
                             2447 ; 193  |        struct Message Message;
                             2448 ; 194  |};
                             2449 ; 195  |
                             2450 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2451 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2452 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2453 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2454 ; 200  |
                             2455 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2456 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2457 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2458 ; 204  |
                             2459 ; 205  |#if DEBUG
                             2460 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2461 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2462 ; 208  |#else 
                             2463 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             2464 ; 210  |#define DebugBuildAssert(x)    
                             2465 ; 211  |#endif
                             2466 ; 212  |
                             2467 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2468 ; 214  |//  #pragma asm
                             2469 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2470 ; 216  |//  #pragma endasm
                             2471 ; 217  |
                             2472 ; 218  |
                             2473 ; 219  |#ifdef COLOR_262K
                             2474 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             2475 ; 221  |#elif defined(COLOR_65K)
                             2476 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             2477 ; 223  |#else
                             2478 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             2479 ; 225  |#endif
                             2480 ; 226  |    
                             2481 ; 227  |#endif // #ifndef _TYPES_H
                             2482 
                             2484 
                             2485 ; 8    |
                             2486 ; 9    |
                             2487 ; 10   |
                             2488 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2489 ; 12   |
                             2490 ; 13   |//   SYSTEM STMP Registers 
                             2491 ; 14   |//      Last Edited 2.19.2003 M. May
                             2492 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2493 ; 16   |
                             2494 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             2495 ; 18   |
                             2496 ; 19   |
                             2497 ; 20   |
                             2498 ; 21   |
                             2499 ; 22   |
                             2500 ; 23   |
                             2501 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             2502 ; 25   |
                             2503 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             2504 ; 27   |
                             2505 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             2506 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             2507 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             2508 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             2509 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             2510 ; 33   |
                             2511 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             2512 ; 35   |
                             2513 ; 36   |
                             2514 ; 37   |
                             2515 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             2516 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             2517 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             2518 ; 41   |
                             2519 ; 42   |
                             2520 ; 43   |
                             2521 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBU_BITPOS)        
                             2522 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBO_BITPOS) 
                             2523 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NLEV_BITPOS)  
                             2524 ; 47   |
                             2525 ; 48   |
                             2526 ; 49   |
                             2527 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             2528 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             2529 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             2530 ; 53   |
                             2531 ; 54   |
                             2532 ; 55   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2533 ; 56   |
                             2534 ; 57   |
                             2535 ; 58   |typedef union               
                             2536 ; 59   |{
                             2537 ; 60   |    struct {
                             2538 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             2539 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             2540 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             2541 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             2542 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             2543 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             2544 ; 67   |    } B;
                             2545 ; 68   |    unsigned int I;
                             2546 ; 69   |} dcdc1_ctrl0_type;
                             2547 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* DcDc#1 Limit Level Register */
                             2548 ; 71   |
                             2549 ; 72   |
                             2550 ; 73   |
                             2551 ; 74   |
                             2552 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             2553 ; 76   |
                             2554 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             2555 ; 78   |
                             2556 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             2557 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             2558 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             2559 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             2560 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             2561 ; 84   |
                             2562 ; 85   |
                             2563 ; 86   |
                             2564 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             2565 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             2566 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             2567 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             2568 ; 91   |
                             2569 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS)        
                             2570 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS) 
                             2571 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FFOR_BITPOS)  
                             2572 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CTRL1_PFMCTRL_BITPOS)   
                             2573 ; 96   |
                             2574 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             2575 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             2576 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             2577 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             2578 ; 101  |
                             2579 ; 102  |
                             2580 ; 103  |typedef union               
                             2581 ; 104  |{
                             2582 ; 105  |    struct {
                             2583 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             2584 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             2585 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2586 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             2587 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2588 ; 111  |    } B;
                             2589 ; 112  |    unsigned int I;
                             2590 ; 113  |} dcdc1_ctrl1_type;
                             2591 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* DcDc#1 Ctrl #1 Register */
                             2592 ; 115  |
                             2593 ; 116  |
                             2594 ; 117  |
                             2595 ; 118  |
                             2596 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             2597 ; 120  |
                             2598 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             2599 ; 122  |
                             2600 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             2601 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             2602 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             2603 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             2604 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             2605 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             2606 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             2607 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             2608 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             2609 ; 132  |
                             2610 ; 133  |
                             2611 ; 134  |
                             2612 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             2613 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             2614 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             2615 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             2616 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             2617 ; 140  |
                             2618 ; 141  |
                             2619 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             2620 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             2621 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             2622 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             2623 ; 146  |
                             2624 ; 147  |
                             2625 ; 148  |
                             2626 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)     
                             2627 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK) 
                             2628 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK)  
                             2629 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK)  
                             2630 ; 153  |
                             2631 ; 154  |
                             2632 ; 155  |typedef union               
                             2633 ; 156  |{
                             2634 ; 157  |    struct {
                             2635 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             2636 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             2637 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             2638 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             2639 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             2640 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             2641 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             2642 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             2643 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             2644 ; 167  |    } B;
                             2645 ; 168  |    unsigned int I;
                             2646 ; 169  |} dcdc_vddio_type;
                             2647 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* DcDc VDDIO Register */
                             2648 ; 171  |
                             2649 ; 172  |
                             2650 ; 173  |
                             2651 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             2652 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             2653 ; 176  |
                             2654 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             2655 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             2656 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             2657 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             2658 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             2659 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             2660 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             2661 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             2662 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             2663 ; 186  |
                             2664 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             2665 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             2666 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             2667 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             2668 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             2669 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             2670 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             2671 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             2672 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             2673 ; 196  |
                             2674 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)     
                             2675 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             2676 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)  
                             2677 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)  
                             2678 ; 201  |
                             2679 ; 202  |typedef union               
                             2680 ; 203  |{
                             2681 ; 204  |    struct {
                             2682 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             2683 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             2684 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             2685 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             2686 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             2687 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             2688 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             2689 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             2690 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             2691 ; 214  |    } B;
                             2692 ; 215  |   unsigned int I;
                             2693 ; 216  |        unsigned U;
                             2694 ; 217  |} dcdc_vddd_type;
                             2695 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc VDDD Register */
                             2696 ; 219  |
                             2697 ; 220  |
                             2698 ; 221  |
                             2699 ; 222  |
                             2700 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             2701 ; 224  |
                             2702 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             2703 ; 226  |
                             2704 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             2705 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             2706 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             2707 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             2708 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             2709 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             2710 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             2711 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             2712 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             2713 ; 236  |
                             2714 ; 237  |
                             2715 ; 238  |
                             2716 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             2717 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             2718 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             2719 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             2720 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             2721 ; 244  |
                             2722 ; 245  |
                             2723 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             2724 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             2725 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             2726 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             2727 ; 250  |
                             2728 ; 251  |
                             2729 ; 252  |
                             2730 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)     
                             2731 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             2732 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)  
                             2733 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)  
                             2734 ; 257  |
                             2735 ; 258  |
                             2736 ; 259  |typedef union               
                             2737 ; 260  |{
                             2738 ; 261  |    struct {
                             2739 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             2740 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             2741 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             2742 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             2743 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             2744 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             2745 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             2746 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             2747 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             2748 ; 271  |    } B;
                             2749 ; 272  |    unsigned int I;
                             2750 ; 273  |} dcdc_vdda_type;
                             2751 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc VDDA Register */
                             2752 ; 275  |
                             2753 ; 276  |
                             2754 ; 277  |
                             2755 ; 278  |
                             2756 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             2757 ; 280  |
                             2758 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             2759 ; 282  |
                             2760 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             2761 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             2762 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             2763 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             2764 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             2765 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             2766 ; 289  |
                             2767 ; 290  |
                             2768 ; 291  |
                             2769 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             2770 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             2771 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             2772 ; 295  |
                             2773 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBU_BITPOS)        
                             2774 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBO_BITPOS) 
                             2775 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NLEV_BITPOS)  
                             2776 ; 299  |
                             2777 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             2778 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             2779 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             2780 ; 303  |
                             2781 ; 304  |
                             2782 ; 305  |typedef union               
                             2783 ; 306  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2784 ; 307  |    struct {
                             2785 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             2786 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             2787 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             2788 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             2789 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             2790 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             2791 ; 314  |    } B;
                             2792 ; 315  |    unsigned int I;
                             2793 ; 316  |} dcdc2_ctrl0_type; 
                             2794 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* DcDc#2 Limit Level Register */
                             2795 ; 318  |
                             2796 ; 319  |
                             2797 ; 320  |
                             2798 ; 321  |
                             2799 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             2800 ; 323  |
                             2801 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             2802 ; 325  |
                             2803 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             2804 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             2805 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             2806 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             2807 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             2808 ; 331  |
                             2809 ; 332  |
                             2810 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             2811 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             2812 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             2813 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             2814 ; 337  |
                             2815 ; 338  |
                             2816 ; 339  |
                             2817 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS)        
                             2818 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS) 
                             2819 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FFOR_BITPOS)  
                             2820 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CTRL1_PFMCTRL_BITPOS)  
                             2821 ; 344  |
                             2822 ; 345  |
                             2823 ; 346  |
                             2824 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             2825 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             2826 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             2827 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             2828 ; 351  |
                             2829 ; 352  |
                             2830 ; 353  |typedef union               
                             2831 ; 354  |{
                             2832 ; 355  |    struct {
                             2833 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             2834 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                             2835 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             2836 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             2837 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             2838 ; 361  |    } B;
                             2839 ; 362  |    unsigned int I;
                             2840 ; 363  |} dcdc2_ctrl1_type;
                             2841 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* DcDc#2 Ctrl Register #1 */
                             2842 ; 365  |
                             2843 ; 366  |
                             2844 ; 367  |
                             2845 ; 368  |
                             2846 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             2847 ; 370  |
                             2848 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             2849 ; 372  |
                             2850 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             2851 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             2852 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             2853 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             2854 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             2855 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             2856 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             2857 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             2858 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             2859 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             2860 ; 383  |
                             2861 ; 384  |
                             2862 ; 385  |
                             2863 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             2864 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             2865 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             2866 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             2867 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             2868 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             2869 ; 392  |
                             2870 ; 393  |
                             2871 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWRUP_BITPOS)        
                             2872 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC1_START_COUNT_BITPOS)        
                             2873 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BITPOS) 
                             2874 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWRUP_BITPOS)        
                             2875 ; 398  |
                             2876 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC2_START_COUNT_BITPOS)        
                             2877 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BITPOS) 
                             2878 ; 401  |
                             2879 ; 402  |
                             2880 ; 403  |
                             2881 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             2882 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             2883 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             2884 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             2885 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             2886 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             2887 ; 410  |
                             2888 ; 411  |
                             2889 ; 412  |typedef union               
                             2890 ; 413  |{
                             2891 ; 414  |    struct {
                             2892 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             2893 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             2894 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             2895 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             2896 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             2897 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             2898 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             2899 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             2900 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             2901 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             2902 ; 425  |    } B;
                             2903 ; 426  |    unsigned int I;
                             2904 ; 427  |} speed_type;
                             2905 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measurement Register */
                             2906 ; 429  |
                             2907 ; 430  |
                             2908 ; 431  |
                             2909 ; 432  |
                             2910 ; 433  |
                             2911 ; 434  |
                             2912 ; 435  |
                             2913 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             2914 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             2915 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             2916 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             2917 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             2918 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             2919 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             2920 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             2921 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             2922 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             2923 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             2924 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             2925 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             2926 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             2927 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             2928 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             2929 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             2930 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             2931 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             2932 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             2933 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             2934 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             2935 ; 458  |
                             2936 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             2937 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             2938 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             2939 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             2940 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             2941 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             2942 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             2943 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             2944 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             2945 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             2946 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             2947 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             2948 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             2949 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             2950 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             2951 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             2952 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             2953 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             2954 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             2955 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             2956 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             2957 ; 480  |
                             2958 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)
                             2959 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             2960 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1)<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             2961 ; 484  |
                             2962 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             2963 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             2964 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             2965 ; 488  |
                             2966 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the change should happen
                             2967 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             2968 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             2969 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)+((1<<HW_DCDC_TBR_DC
                                  DC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             2970 ; 493  |
                             2971 ; 494  |typedef union               
                             2972 ; 495  |{
                             2973 ; 496  |    struct {
                             2974 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             2975 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             2976 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             2977 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             2978 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             2979 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             2980 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             2981 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             2982 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             2983 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             2984 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             2985 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             2986 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             2987 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             2988 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             2989 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             2990 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             2991 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             2992 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             2993 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             2994 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             2995 ; 518  |    } B;
                             2996 ; 519  |    unsigned int I;
                             2997 ; 520  |} usb_dcdctbr_type;
                             2998 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADDR+8))    /* Analog test bit register*/
                             2999 ; 522  |
                             3000 ; 523  |
                             3001 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             3002 ; 525  |
                             3003 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             3004 ; 527  |
                             3005 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             3006 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             3007 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             3008 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             3009 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             3010 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             3011 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             3012 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             3013 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             3014 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             3015 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             3016 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             3017 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             3018 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             3019 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             3020 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             3021 ; 544  |
                             3022 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             3023 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             3024 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             3025 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             3026 ; 549  |
                             3027 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             3028 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             3029 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             3030 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             3031 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             3032 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             3033 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3034 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             3035 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             3036 ; 559  |
                             3037 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             3038 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWD_BITPOS)        
                             3039 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_RES_BITPOS) 
                             3040 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_NIMH_BITPOS) 
                             3041 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             3042 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             3043 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             3044 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             3045 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             3046 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             3047 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             3048 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             3049 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             3050 ; 573  |
                             3051 ; 574  |
                             3052 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK)     
                             3053 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             3054 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             3055 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             3056 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             3057 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK)     
                             3058 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK)     
                             3059 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK) 
                             3060 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK) 
                             3061 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK) 
                             3062 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK) 
                             3063 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK) 
                             3064 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK) 
                             3065 ; 588  |
                             3066 ; 589  |typedef union               
                             3067 ; 590  |{
                             3068 ; 591  |    struct {
                             3069 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             3070 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             3071 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             3072 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             3073 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             3074 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             3075 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH;
                             3076 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH;
                             3077 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             3078 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             3079 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             3080 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             3081 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             3082 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                             3083 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             3084 ; 607  |    } B;
                             3085 ; 608  |    unsigned int I;
                             3086 ; 609  |} usb_pwr_charge_type;
                             3087 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17))    /* Analog Persistent Config Register */
                             3088 ; 611  |
                             3089 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             3090 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             3091 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             3092 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             3093 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             3094 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             3095 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             3096 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             3097 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             3098 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             3099 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             3100 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             3101 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             3102 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             3103 ; 626  |
                             3104 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             3105 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             3106 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             3107 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             3108 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             3109 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             3110 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             3111 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             3112 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             3113 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             3114 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             3115 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             3116 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             3117 ; 640  |
                             3118 ; 641  |typedef union               
                             3119 ; 642  |{
                             3120 ; 643  |    struct {       
                             3121 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             3122 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             3123 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             3124 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             3125 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             3126 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             3127 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             3128 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             3129 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             3130 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             3131 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             3132 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                             3133 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             3134 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             3135 ; 658  |    } B;
                             3136 ; 659  |    int I;
                             3137 ; 660  |} usb_dcdcpersist_type;
                             3138 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASEADDR+15))    /* Analog test bit register*/
                             3139 ; 662  |
                             3140 ; 663  |
                             3141 ; 664  |
                             3142 ; 665  |#endif
                             3143 ; 666  |
                             3144 ; 667  |
                             3145 ; 668  |
                             3146 
                             3148 
                             3149 ; 21   |#include "regsemc.h"
                             3150 
                             3152 
                             3153 ; 1    |#if !(defined(__REGS_EMC_INC))
                             3154 ; 2    |#define __REGS_EMC_INC 1
                             3155 ; 3    |
                             3156 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             3157 ; 5    |//   Module base addresses
                             3158 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             3159 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             3160 ; 8    |
                             3161 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             3162 ; 10   |//  EMC Registers
                             3163 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             3164 ; 12   |
                             3165 ; 13   |
                             3166 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             3167 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             3168 ; 16   |
                             3169 ; 17   |typedef union               /*Flash Control Register*/
                             3170 ; 18   |{
                             3171 ; 19   |    struct
                             3172 ; 20   |    {
                             3173 ; 21   |    int KICK        :1;
                             3174 ; 22   |    int RW          :1;
                             3175 ; 23   |    int TCIE        :1;
                             3176 ; 24   |    int IRQP        :1;
                             3177 ; 25   |    unsigned MMD    :2;
                             3178 ; 26   |    unsigned NB     :11;
                             3179 ; 27   |    unsigned RSVD   :4;
                             3180 ; 28   |    int SRST        :1;
                             3181 ; 29   |    } B;
                             3182 ; 30   |    int I;
                             3183 ; 31   |} flcr_type;
                             3184 ; 32   |
                             3185 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             3186 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             3187 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             3188 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             3189 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             3190 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             3191 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             3192 ; 40   |
                             3193 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             3194 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             3195 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             3196 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             3197 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             3198 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             3199 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             3200 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             3201 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             3202 ; 50   |
                             3203 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             3204 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             3205 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             3206 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             3207 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             3208 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             3209 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             3210 ; 58   |
                             3211 ; 59   |
                             3212 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             3213 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             3214 ; 62   |
                             3215 ; 63   |typedef union           /* Flash Start Address Low*/
                             3216 ; 64   |{
                             3217 ; 65   |    struct
                             3218 ; 66   |    {
                             3219 ; 67   |    unsigned XA     : 24;
                             3220 ; 68   |    } B;
                             3221 ; 69   |    int I;
                             3222 ; 70   |} flsalr_type;
                             3223 ; 71   |
                             3224 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                             3225 ; 73   |
                             3226 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             3227 ; 75   |
                             3228 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             3229 ; 77   |
                             3230 ; 78   |
                             3231 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             3232 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             3233 ; 81   |
                             3234 ; 82   |typedef union           /* Flash Start Address High*/
                             3235 ; 83   |{
                             3236 ; 84   |    struct
                             3237 ; 85   |    {
                             3238 ; 86   |    unsigned XA     :8;
                             3239 ; 87   |    unsigned DA     :16;
                             3240 ; 88   |    } B;
                             3241 ; 89   |    int I;
                             3242 ; 90   |} flsahr_type;
                             3243 ; 91   |
                             3244 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             3245 ; 93   |
                             3246 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             3247 ; 95   |
                             3248 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             3249 ; 97   |
                             3250 ; 98   |
                             3251 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             3252 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             3253 ; 101  |
                             3254 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             3255 ; 103  |{
                             3256 ; 104  |    struct
                             3257 ; 105  |    {
                             3258 ; 106  |        int WP          :1;
                             3259 ; 107  |        int CDP         :1;
                             3260 ; 108  |        unsigned SM     :2;
                             3261 ; 109  |        int XATTR       :1;
                             3262 ; 110  |        int CRST        :1;
                             3263 ; 111  |        int XWT         :1;
                             3264 ; 112  |        int RI          :1;
                             3265 ; 113  |        int IFCE        :1;
                             3266 ; 114  |        int ISCE        :1;
                             3267 ; 115  |        int INCE        :1;
                             3268 ; 116  |        int IFCS        :1;
                             3269 ; 117  |        int ISCS        :1;
                             3270 ; 118  |        int INCS        :1;
                             3271 ; 119  |        unsigned CFAI   :2;
                             3272 ; 120  |        int XDDI        :1;
                             3273 ; 121  |        unsigned CS     :2;
                             3274 ; 122  |        int CRE         :1;
                             3275 ; 123  |        unsigned VS     :2;
                             3276 ; 124  |        int DASP        :1;
                             3277 ; 125  |        int MODE16      :1; 
                             3278 ; 126  |    } B;
                             3279 ; 127  |    int I;
                             3280 ; 128  |} flcfcr_type;
                             3281 ; 129  |
                             3282 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             3283 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             3284 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             3285 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             3286 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3287 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             3288 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             3289 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             3290 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             3291 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             3292 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             3293 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             3294 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             3295 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             3296 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             3297 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             3298 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             3299 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             3300 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             3301 ; 149  |
                             3302 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             3303 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             3304 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             3305 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             3306 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             3307 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             3308 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             3309 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             3310 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             3311 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             3312 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             3313 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             3314 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             3315 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             3316 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             3317 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             3318 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             3319 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             3320 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             3321 ; 169  |
                             3322 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             3323 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             3324 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             3325 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             3326 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             3327 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             3328 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             3329 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             3330 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             3331 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             3332 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             3333 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             3334 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             3335 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             3336 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             3337 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             3338 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             3339 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             3340 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             3341 ; 189  |
                             3342 ; 190  |
                             3343 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             3344 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             3345 ; 193  |
                             3346 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             3347 ; 195  |{
                             3348 ; 196  |    struct
                             3349 ; 197  |    {
                             3350 ; 198  |        unsigned TRWSU  :5;
                             3351 ; 199  |        unsigned TRPW   :7;
                             3352 ; 200  |        unsigned TWPW   :7;
                             3353 ; 201  |        unsigned TRWH   :5;
                             3354 ; 202  |    } B;
                             3355 ; 203  |    int I;
                             3356 ; 204  |} flcftmr1r_type;
                             3357 ; 205  |
                             3358 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             3359 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             3360 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             3361 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             3362 ; 210  |
                             3363 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             3364 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             3365 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             3366 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             3367 ; 215  |
                             3368 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             3369 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             3370 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             3371 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             3372 ; 220  |
                             3373 ; 221  |
                             3374 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             3375 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             3376 ; 224  |
                             3377 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             3378 ; 226  |{
                             3379 ; 227  |    struct
                             3380 ; 228  |    {
                             3381 ; 229  |        unsigned TWW    :4;
                             3382 ; 230  |        unsigned TWTO   :10;
                             3383 ; 231  |        unsigned THW    :5; 
                             3384 ; 232  |        unsigned TRAQ   :5;
                             3385 ; 233  |    } B;
                             3386 ; 234  |    int I;
                             3387 ; 235  |} flcftmr2r_type;
                             3388 ; 236  |
                             3389 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             3390 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             3391 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             3392 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             3393 ; 241  |
                             3394 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             3395 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             3396 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             3397 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             3398 ; 246  |
                             3399 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             3400 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             3401 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             3402 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             3403 ; 251  |
                             3404 ; 252  |
                             3405 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             3406 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             3407 ; 255  |
                             3408 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             3409 ; 257  |{
                             3410 ; 258  |    struct
                             3411 ; 259  |    {
                             3412 ; 260  |        unsigned CS     :2;
                             3413 ; 261  |        int SE          :1;
                             3414 ; 262  |        int WP          :1;
                             3415 ; 263  |        int SIZE        :1;
                             3416 ; 264  |        int ICMD        :8;
                             3417 ; 265  |        int TOIE        :1;
                             3418 ; 266  |        int BPIE        :1;
                             3419 ; 267  |        int TOIRQ       :1;
                             3420 ; 268  |        int BPIRQ       :1;
                             3421 ; 269  |    } B;
                             3422 ; 270  |    int I;
                             3423 ; 271  |} flsmcr_type;
                             3424 ; 272  |
                             3425 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             3426 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             3427 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             3428 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             3429 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             3430 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             3431 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             3432 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             3433 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             3434 ; 282  |
                             3435 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             3436 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             3437 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             3438 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             3439 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             3440 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             3441 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             3442 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             3443 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             3444 ; 292  |
                             3445 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             3446 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             3447 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             3448 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             3449 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             3450 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             3451 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             3452 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             3453 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             3454 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             3455 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             3456 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             3457 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             3458 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             3459 ; 307  |
                             3460 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             3461 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             3462 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             3463 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             3464 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             3465 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             3466 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             3467 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             3468 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             3469 ; 317  |
                             3470 ; 318  |
                             3471 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             3472 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                             3473 ; 321  |
                             3474 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             3475 ; 323  |{
                             3476 ; 324  |    struct
                             3477 ; 325  |    {
                             3478 ; 326  |        unsigned TRWSU  :5;
                             3479 ; 327  |        unsigned TRPW   :6;
                             3480 ; 328  |        unsigned TWPW   :6;
                             3481 ; 329  |        unsigned TRWH   :5;
                             3482 ; 330  |    } B;
                             3483 ; 331  |    int I;
                             3484 ; 332  |} flsmtmr1r_type;
                             3485 ; 333  |
                             3486 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             3487 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             3488 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             3489 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             3490 ; 338  |
                             3491 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             3492 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             3493 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             3494 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             3495 ; 343  |
                             3496 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             3497 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             3498 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             3499 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             3500 ; 348  |
                             3501 ; 349  |
                             3502 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             3503 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             3504 ; 352  |
                             3505 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             3506 ; 354  |{
                             3507 ; 355  |    struct
                             3508 ; 356  |    {
                             3509 ; 357  |        unsigned TWT    :6;
                             3510 ; 358  |        unsigned TWTO   :18;
                             3511 ; 359  |    } B;
                             3512 ; 360  |    int I;
                             3513 ; 361  |} flsmtmr2r_type;
                             3514 ; 362  |
                             3515 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             3516 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             3517 ; 365  |
                             3518 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             3519 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             3520 ; 368  |
                             3521 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             3522 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             3523 ; 371  |
                             3524 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             3525 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             3526 ; 374  |typedef union 
                             3527 ; 375  |{
                             3528 ; 376  |  struct
                             3529 ; 377  |  {
                             3530 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             3531 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers */
                             3532 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers */
                             3533 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             3534 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             3535 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             3536 ; 384  |    int PAD0          :17;    
                             3537 ; 385  |  } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3538 ; 386  |  int I;
                             3539 ; 387  |} flcr2_type;
                             3540 ; 388  |
                             3541 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             3542 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             3543 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             3544 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             3545 ; 393  |
                             3546 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Control Register */
                             3547 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash Start Address Low Register */
                             3548 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash Start Address High Register */
                             3549 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             3550 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Control Register2 */
                             3551 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash CompactFlash Control Register*/
                             3552 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Compact Flash Timer1 Register*/
                             3553 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Compact Flash Timer2 Register*/
                             3554 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash SmartMedia Control Register*/
                             3555 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash SmartMedia Timer1 Register*/
                             3556 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash SmartMedia Timer2 Register*/
                             3557 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             3558 ; 406  |
                             3559 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             3560 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             3561 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             3562 ; 410  |
                             3563 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             3564 ; 412  |
                             3565 ; 413  |#endif
                             3566 ; 414  |
                             3567 
                             3569 
                             3570 ; 22   |#include "regsgpio.h"
                             3571 
                             3573 
                             3574 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             3575 ; 2    |#define __REGS_GPIO_INC 1
                             3576 ; 3    |
                             3577 ; 4    |#include "types.h"
                             3578 
                             3580 
                             3581 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3582 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3583 ; 3    |//
                             3584 ; 4    |// Filename: types.h
                             3585 ; 5    |// Description: Standard data types
                             3586 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3587 ; 7    |
                             3588 ; 8    |#ifndef _TYPES_H
                             3589 ; 9    |#define _TYPES_H
                             3590 ; 10   |
                             3591 ; 11   |// TODO:  move this outta here!
                             3592 ; 12   |#if !defined(NOERROR)
                             3593 ; 13   |#define NOERROR 0
                             3594 ; 14   |#define SUCCESS 0
                             3595 ; 15   |#endif 
                             3596 ; 16   |#if !defined(SUCCESS)
                             3597 ; 17   |#define SUCCESS  0
                             3598 ; 18   |#endif
                             3599 ; 19   |#if !defined(ERROR)
                             3600 ; 20   |#define ERROR   -1
                             3601 ; 21   |#endif
                             3602 ; 22   |#if !defined(FALSE)
                             3603 ; 23   |#define FALSE 0
                             3604 ; 24   |#endif
                             3605 ; 25   |#if !defined(TRUE)
                             3606 ; 26   |#define TRUE  1
                             3607 ; 27   |#endif
                             3608 ; 28   |
                             3609 ; 29   |#if !defined(NULL)
                             3610 ; 30   |#define NULL 0
                             3611 ; 31   |#endif
                             3612 ; 32   |
                             3613 ; 33   |#define MAX_INT     0x7FFFFF
                             3614 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3615 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3616 ; 36   |#define MAX_ULONG   (-1) 
                             3617 ; 37   |
                             3618 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3619 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3620 ; 40   |
                             3621 ; 41   |
                             3622 ; 42   |#define BYTE    unsigned char       // btVarName
                             3623 ; 43   |#define CHAR    signed char         // cVarName
                             3624 ; 44   |#define USHORT  unsigned short      // usVarName
                             3625 ; 45   |#define SHORT   unsigned short      // sVarName
                             3626 ; 46   |#define WORD    unsigned int        // wVarName
                             3627 ; 47   |#define INT     signed int          // iVarName
                             3628 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3629 ; 49   |#define LONG    signed long         // lVarName
                             3630 ; 50   |#define BOOL    unsigned int        // bVarName
                             3631 ; 51   |#define FRACT   _fract              // frVarName
                             3632 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3633 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3634 ; 54   |#define FLOAT   float               // fVarName
                             3635 ; 55   |#define DBL     double              // dVarName
                             3636 ; 56   |#define ENUM    enum                // eVarName
                             3637 ; 57   |#define CMX     _complex            // cmxVarName
                             3638 ; 58   |typedef WORD UCS3;                   // 
                             3639 ; 59   |
                             3640 ; 60   |#define UINT16  unsigned short
                             3641 ; 61   |#define UINT8   unsigned char   
                             3642 ; 62   |#define UINT32  unsigned long
                             3643 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3644 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3645 ; 65   |#define WCHAR   UINT16
                             3646 ; 66   |
                             3647 ; 67   |//UINT128 is 16 bytes or 6 words
                             3648 ; 68   |typedef struct UINT128_3500 {   
                             3649 ; 69   |    int val[6];     
                             3650 ; 70   |} UINT128_3500;
                             3651 ; 71   |
                             3652 ; 72   |#define UINT128   UINT128_3500
                             3653 ; 73   |
                             3654 ; 74   |// Little endian word packed byte strings:   
                             3655 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3656 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3657 ; 77   |// Little endian word packed byte strings:   
                             3658 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3659 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3660 ; 80   |
                             3661 ; 81   |// Declare Memory Spaces To Use When Coding
                             3662 ; 82   |// A. Sector Buffers
                             3663 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3664 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3665 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3666 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3667 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3668 ; 88   |// B. Media DDI Memory
                             3669 ; 89   |#define MEDIA_DDI_MEM _Y
                             3670 ; 90   |
                             3671 ; 91   |
                             3672 ; 92   |
                             3673 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3674 ; 94   |// Examples of circular pointers:
                             3675 ; 95   |//    INT CIRC cpiVarName
                             3676 ; 96   |//    DWORD CIRC cpdwVarName
                             3677 ; 97   |
                             3678 ; 98   |#define RETCODE INT                 // rcVarName
                             3679 ; 99   |
                             3680 ; 100  |// generic bitfield structure
                             3681 ; 101  |struct Bitfield {
                             3682 ; 102  |    unsigned int B0  :1;
                             3683 ; 103  |    unsigned int B1  :1;
                             3684 ; 104  |    unsigned int B2  :1;
                             3685 ; 105  |    unsigned int B3  :1;
                             3686 ; 106  |    unsigned int B4  :1;
                             3687 ; 107  |    unsigned int B5  :1;
                             3688 ; 108  |    unsigned int B6  :1;
                             3689 ; 109  |    unsigned int B7  :1;
                             3690 ; 110  |    unsigned int B8  :1;
                             3691 ; 111  |    unsigned int B9  :1;
                             3692 ; 112  |    unsigned int B10 :1;
                             3693 ; 113  |    unsigned int B11 :1;
                             3694 ; 114  |    unsigned int B12 :1;
                             3695 ; 115  |    unsigned int B13 :1;
                             3696 ; 116  |    unsigned int B14 :1;
                             3697 ; 117  |    unsigned int B15 :1;
                             3698 ; 118  |    unsigned int B16 :1;
                             3699 ; 119  |    unsigned int B17 :1;
                             3700 ; 120  |    unsigned int B18 :1;
                             3701 ; 121  |    unsigned int B19 :1;
                             3702 ; 122  |    unsigned int B20 :1;
                             3703 ; 123  |    unsigned int B21 :1;
                             3704 ; 124  |    unsigned int B22 :1;
                             3705 ; 125  |    unsigned int B23 :1;
                             3706 ; 126  |};
                             3707 ; 127  |
                             3708 ; 128  |union BitInt {
                             3709 ; 129  |        struct Bitfield B;
                             3710 ; 130  |        int        I;
                             3711 ; 131  |};
                             3712 ; 132  |
                             3713 ; 133  |#define MAX_MSG_LENGTH 10
                             3714 ; 134  |struct CMessage
                             3715 ; 135  |{
                             3716 ; 136  |        unsigned int m_uLength;
                             3717 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3718 ; 138  |};
                             3719 ; 139  |
                             3720 ; 140  |typedef struct {
                             3721 ; 141  |    WORD m_wLength;
                             3722 ; 142  |    WORD m_wMessage;
                             3723 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3724 ; 144  |} Message;
                             3725 ; 145  |
                             3726 ; 146  |struct MessageQueueDescriptor
                             3727 ; 147  |{
                             3728 ; 148  |        int *m_pBase;
                             3729 ; 149  |        int m_iModulo;
                             3730 ; 150  |        int m_iSize;
                             3731 ; 151  |        int *m_pHead;
                             3732 ; 152  |        int *m_pTail;
                             3733 ; 153  |};
                             3734 ; 154  |
                             3735 ; 155  |struct ModuleEntry
                             3736 ; 156  |{
                             3737 ; 157  |    int m_iSignaledEventMask;
                             3738 ; 158  |    int m_iWaitEventMask;
                             3739 ; 159  |    int m_iResourceOfCode;
                             3740 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3741 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             3742 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3743 ; 163  |    int m_uTimeOutHigh;
                             3744 ; 164  |    int m_uTimeOutLow;
                             3745 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3746 ; 166  |};
                             3747 ; 167  |
                             3748 ; 168  |union WaitMask{
                             3749 ; 169  |    struct B{
                             3750 ; 170  |        unsigned int m_bNone     :1;
                             3751 ; 171  |        unsigned int m_bMessage  :1;
                             3752 ; 172  |        unsigned int m_bTimer    :1;
                             3753 ; 173  |        unsigned int m_bButton   :1;
                             3754 ; 174  |    } B;
                             3755 ; 175  |    int I;
                             3756 ; 176  |} ;
                             3757 ; 177  |
                             3758 ; 178  |
                             3759 ; 179  |struct Button {
                             3760 ; 180  |        WORD wButtonEvent;
                             3761 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3762 ; 182  |};
                             3763 ; 183  |
                             3764 ; 184  |struct Message {
                             3765 ; 185  |        WORD wMsgLength;
                             3766 ; 186  |        WORD wMsgCommand;
                             3767 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3768 ; 188  |};
                             3769 ; 189  |
                             3770 ; 190  |union EventTypes {
                             3771 ; 191  |        struct CMessage msg;
                             3772 ; 192  |        struct Button Button ;
                             3773 ; 193  |        struct Message Message;
                             3774 ; 194  |};
                             3775 ; 195  |
                             3776 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3777 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3778 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3779 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3780 ; 200  |
                             3781 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3782 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3783 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3784 ; 204  |
                             3785 ; 205  |#if DEBUG
                             3786 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3787 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3788 ; 208  |#else 
                             3789 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             3790 ; 210  |#define DebugBuildAssert(x)    
                             3791 ; 211  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3792 ; 212  |
                             3793 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3794 ; 214  |//  #pragma asm
                             3795 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3796 ; 216  |//  #pragma endasm
                             3797 ; 217  |
                             3798 ; 218  |
                             3799 ; 219  |#ifdef COLOR_262K
                             3800 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             3801 ; 221  |#elif defined(COLOR_65K)
                             3802 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             3803 ; 223  |#else
                             3804 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             3805 ; 225  |#endif
                             3806 ; 226  |    
                             3807 ; 227  |#endif // #ifndef _TYPES_H
                             3808 
                             3810 
                             3811 ; 5    |
                             3812 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             3813 ; 7    |//  Interrupt Collector Registers
                             3814 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             3815 ; 9    |
                             3816 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             3817 ; 11   |
                             3818 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             3819 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             3820 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             3821 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             3822 ; 16   |
                             3823 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             3824 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             3825 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             3826 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             3827 ; 21   |
                             3828 ; 22   |#define HW_GPB_GPENR 0
                             3829 ; 23   |#define HW_GPB_GPDOR 1
                             3830 ; 24   |#define HW_GPB_GPDIR 2
                             3831 ; 25   |#define HW_GPB_GPDOER 3
                             3832 ; 26   |#define HW_GPB_GPIPENR 4
                             3833 ; 27   |#define HW_GPB_GPIENR 5
                             3834 ; 28   |#define HW_GPB_GPILVLR 6
                             3835 ; 29   |#define HW_GPB_GPIPOLR 7
                             3836 ; 30   |#define HW_GPB_GPISTATR 8
                             3837 ; 31   |#define HW_GPB_GPPWR 9
                             3838 ; 32   |#define HW_GPB_GP8MA 10
                             3839 ; 33   |
                             3840 ; 34   |
                             3841 ; 35   |
                             3842 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             3843 ; 37   |//  GPIO Register Bit Positions
                             3844 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             3845 ; 39   |{
                             3846 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             3847 ; 41   |    unsigned int I;
                             3848 ; 42   |    unsigned int U;
                             3849 ; 43   |} gpr_type;
                             3850 ; 44   |
                             3851 ; 45   |#define HW_GP_B0_BITPOS 0
                             3852 ; 46   |#define HW_GP_B1_BITPOS 1
                             3853 ; 47   |#define HW_GP_B2_BITPOS 2
                             3854 ; 48   |#define HW_GP_B3_BITPOS 3
                             3855 ; 49   |#define HW_GP_B4_BITPOS 4
                             3856 ; 50   |#define HW_GP_B5_BITPOS 5
                             3857 ; 51   |#define HW_GP_B6_BITPOS 6
                             3858 ; 52   |#define HW_GP_B7_BITPOS 7
                             3859 ; 53   |#define HW_GP_B8_BITPOS 8
                             3860 ; 54   |#define HW_GP_B9_BITPOS 9
                             3861 ; 55   |#define HW_GP_B10_BITPOS 10
                             3862 ; 56   |#define HW_GP_B11_BITPOS 11
                             3863 ; 57   |#define HW_GP_B12_BITPOS 12
                             3864 ; 58   |#define HW_GP_B13_BITPOS 13
                             3865 ; 59   |#define HW_GP_B14_BITPOS 14
                             3866 ; 60   |#define HW_GP_B15_BITPOS 15
                             3867 ; 61   |#define HW_GP_B16_BITPOS 16
                             3868 ; 62   |#define HW_GP_B17_BITPOS 17
                             3869 ; 63   |#define HW_GP_B18_BITPOS 18
                             3870 ; 64   |#define HW_GP_B19_BITPOS 19
                             3871 ; 65   |#define HW_GP_B20_BITPOS 20
                             3872 ; 66   |#define HW_GP_B21_BITPOS 21
                             3873 ; 67   |#define HW_GP_B22_BITPOS 22
                             3874 ; 68   |#define HW_GP_B23_BITPOS 23
                             3875 ; 69   |
                             3876 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             3877 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             3878 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             3879 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             3880 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             3881 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             3882 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             3883 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             3884 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             3885 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             3886 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             3887 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             3888 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             3889 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             3890 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             3891 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             3892 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             3893 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             3894 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             3895 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             3896 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             3897 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             3898 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             3899 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             3900 ; 94   |
                             3901 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             3902 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             3903 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             3904 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             3905 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             3906 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             3907 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             3908 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             3909 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             3910 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             3911 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             3912 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             3913 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             3914 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             3915 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             3916 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             3917 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             3918 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             3919 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             3920 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             3921 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             3922 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             3923 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             3924 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             3925 ; 119  |
                             3926 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             3927 ; 121  |//  GPIO 8mA Register Bit Positions
                             3928 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             3929 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             3930 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             3931 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             3932 ; 126  |
                             3933 ; 127  |
                             3934 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             3935 ; 129  |//  Logical GPIO numbers
                             3936 ; 130  |#define HW_GPIO_000 0
                             3937 ; 131  |#define HW_GPIO_001 1
                             3938 ; 132  |#define HW_GPIO_002 2
                             3939 ; 133  |#define HW_GPIO_003 3
                             3940 ; 134  |#define HW_GPIO_004 4
                             3941 ; 135  |#define HW_GPIO_005 5
                             3942 ; 136  |#define HW_GPIO_006 6
                             3943 ; 137  |#define HW_GPIO_007 7
                             3944 ; 138  |#define HW_GPIO_008 8
                             3945 ; 139  |#define HW_GPIO_009 9
                             3946 ; 140  |#define HW_GPIO_010 10
                             3947 ; 141  |#define HW_GPIO_011 11
                             3948 ; 142  |#define HW_GPIO_012 12
                             3949 ; 143  |#define HW_GPIO_013 13
                             3950 ; 144  |#define HW_GPIO_014 14
                             3951 ; 145  |#define HW_GPIO_015 15
                             3952 ; 146  |#define HW_GPIO_016 16
                             3953 ; 147  |#define HW_GPIO_017 17
                             3954 ; 148  |#define HW_GPIO_018 18
                             3955 ; 149  |#define HW_GPIO_019 19
                             3956 ; 150  |#define HW_GPIO_020 20
                             3957 ; 151  |#define HW_GPIO_021 21
                             3958 ; 152  |#define HW_GPIO_022 22
                             3959 ; 153  |#define HW_GPIO_023 23
                             3960 ; 154  |#define HW_GPIO_024 24
                             3961 ; 155  |#define HW_GPIO_025 25
                             3962 ; 156  |#define HW_GPIO_026 26
                             3963 ; 157  |#define HW_GPIO_027 27
                             3964 ; 158  |#define HW_GPIO_028 28
                             3965 ; 159  |#define HW_GPIO_029 29
                             3966 ; 160  |#define HW_GPIO_030 30
                             3967 ; 161  |#define HW_GPIO_031 31
                             3968 ; 162  |#define HW_GPIO_032 32
                             3969 ; 163  |#define HW_GPIO_033 33
                             3970 ; 164  |#define HW_GPIO_034 34
                             3971 ; 165  |#define HW_GPIO_035 35
                             3972 ; 166  |#define HW_GPIO_036 36
                             3973 ; 167  |#define HW_GPIO_037 37
                             3974 ; 168  |#define HW_GPIO_038 38
                             3975 ; 169  |#define HW_GPIO_039 39
                             3976 ; 170  |#define HW_GPIO_040 40
                             3977 ; 171  |#define HW_GPIO_041 41
                             3978 ; 172  |#define HW_GPIO_042 42
                             3979 ; 173  |#define HW_GPIO_043 43
                             3980 ; 174  |#define HW_GPIO_044 44
                             3981 ; 175  |#define HW_GPIO_045 45
                             3982 ; 176  |#define HW_GPIO_046 46
                             3983 ; 177  |#define HW_GPIO_047 47
                             3984 ; 178  |#define HW_GPIO_048 48
                             3985 ; 179  |#define HW_GPIO_049 49
                             3986 ; 180  |#define HW_GPIO_050 50
                             3987 ; 181  |#define HW_GPIO_051 51
                             3988 ; 182  |#define HW_GPIO_052 52
                             3989 ; 183  |#define HW_GPIO_053 53
                             3990 ; 184  |#define HW_GPIO_054 54
                             3991 ; 185  |#define HW_GPIO_055 55
                             3992 ; 186  |#define HW_GPIO_056 56
                             3993 ; 187  |#define HW_GPIO_057 57
                             3994 ; 188  |#define HW_GPIO_058 58
                             3995 ; 189  |#define HW_GPIO_059 59
                             3996 ; 190  |#define HW_GPIO_060 60
                             3997 ; 191  |#define HW_GPIO_061 61
                             3998 ; 192  |#define HW_GPIO_062 62
                             3999 ; 193  |#define HW_GPIO_063 63
                             4000 ; 194  |#define HW_GPIO_064 64
                             4001 ; 195  |#define HW_GPIO_065 65
                             4002 ; 196  |#define HW_GPIO_066 66
                             4003 ; 197  |#define HW_GPIO_067 67
                             4004 ; 198  |#define HW_GPIO_068 68
                             4005 ; 199  |#define HW_GPIO_069 69
                             4006 ; 200  |#define HW_GPIO_070 70
                             4007 ; 201  |#define HW_GPIO_071 71
                             4008 ; 202  |#define HW_GPIO_072 72
                             4009 ; 203  |#define HW_GPIO_073 73
                             4010 ; 204  |#define HW_GPIO_074 74
                             4011 ; 205  |#define HW_GPIO_075 75
                             4012 ; 206  |#define HW_GPIO_076 76
                             4013 ; 207  |#define HW_GPIO_077 77
                             4014 ; 208  |#define HW_GPIO_078 78
                             4015 ; 209  |#define HW_GPIO_079 79
                             4016 ; 210  |#define HW_GPIO_080 80
                             4017 ; 211  |#define HW_GPIO_081 81
                             4018 ; 212  |#define HW_GPIO_082 82
                             4019 ; 213  |#define HW_GPIO_083 83
                             4020 ; 214  |#define HW_GPIO_084 84
                             4021 ; 215  |#define HW_GPIO_085 85
                             4022 ; 216  |#define HW_GPIO_086 86
                             4023 ; 217  |#define HW_GPIO_087 87
                             4024 ; 218  |#define HW_GPIO_088 88
                             4025 ; 219  |#define HW_GPIO_089 89
                             4026 ; 220  |#define HW_GPIO_090 90
                             4027 ; 221  |#define HW_GPIO_091 91
                             4028 ; 222  |#define HW_GPIO_092 92
                             4029 ; 223  |#define HW_GPIO_093 93
                             4030 ; 224  |#define HW_GPIO_094 94
                             4031 ; 225  |#define HW_GPIO_095 95
                             4032 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             4033 ; 227  |
                             4034 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO 0 Enable Register   */
                             4035 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 0 Data Out Register */
                             4036 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 0 Dait In Register  */
                             4037 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO 0 Dait Out Enable Register  */
                             4038 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 0 Interrupt Pin Enable Register */
                             4039 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO 0 Interrupt Enable Register */
                             4040 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 0 Interrupt Level Register  */
                             4041 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 0 Interrupt Polarity Register   */
                             4042 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 0 Interrupt Status Register */
                             4043 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4044 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             4045 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* GPIO 1 Enable Register   */
                             4046 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 1 Data Out Register */
                             4047 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 1 Dait In Register  */
                             4048 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO 1 Dait Out Enable Register  */
                             4049 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 1 Interrupt Pin Enable Register */
                             4050 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO 1 Interrupt Enable Register */
                             4051 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 1 Interrupt Level Register  */
                             4052 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 1 Interrupt Polarity Register   */
                             4053 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 1 Interrupt Status Register */
                             4054 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4055 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             4056 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                             4057 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                             4058 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                             4059 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                             4060 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                             4061 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                             4062 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                             4063 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                             4064 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                             4065 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4066 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             4067 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                             4068 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                             4069 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                             4070 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                             4071 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                             4072 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                             4073 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                             4074 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                             4075 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                             4076 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4077 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             4078 ; 272  |
                             4079 ; 273  |#endif
                             4080 ; 274  |
                             4081 
                             4083 
                             4084 ; 23   |#include "regsi2c.h"
                             4085 
                             4087 
                             4088 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4089 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4090 ; 3    |// Filename: regsI2C.inc
                             4091 ; 4    |// Description: Register definitions for GPFLASH interface
                             4092 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4093 ; 6    |// The following naming conventions are followed in this file.
                             4094 ; 7    |// All registers are named using the format...
                             4095 ; 8    |//     HW_<module>_<regname>
                             4096 ; 9    |// where <module> is the module name which can be any of the following...
                             4097 ; 10   |//     USB20
                             4098 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4099 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4100 ; 13   |// that module)
                             4101 ; 14   |// <regname> is the specific register within that module
                             4102 ; 15   |// We also define the following...
                             4103 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4104 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4105 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4106 ; 19   |// which does something else, and
                             4107 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4108 ; 21   |// which does something else.
                             4109 ; 22   |// Other rules
                             4110 ; 23   |//     All caps
                             4111 ; 24   |//     Numeric identifiers start at 0
                             4112 ; 25   |#if !(defined(regsi2cinc))
                             4113 ; 26   |#define regsi2cinc 1
                             4114 ; 27   |
                             4115 ; 28   |#include "types.h"
                             4116 
                             4118 
                             4119 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4120 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4121 ; 3    |//
                             4122 ; 4    |// Filename: types.h
                             4123 ; 5    |// Description: Standard data types
                             4124 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4125 ; 7    |
                             4126 ; 8    |#ifndef _TYPES_H
                             4127 ; 9    |#define _TYPES_H
                             4128 ; 10   |
                             4129 ; 11   |// TODO:  move this outta here!
                             4130 ; 12   |#if !defined(NOERROR)
                             4131 ; 13   |#define NOERROR 0
                             4132 ; 14   |#define SUCCESS 0
                             4133 ; 15   |#endif 
                             4134 ; 16   |#if !defined(SUCCESS)
                             4135 ; 17   |#define SUCCESS  0
                             4136 ; 18   |#endif
                             4137 ; 19   |#if !defined(ERROR)
                             4138 ; 20   |#define ERROR   -1
                             4139 ; 21   |#endif
                             4140 ; 22   |#if !defined(FALSE)
                             4141 ; 23   |#define FALSE 0
                             4142 ; 24   |#endif
                             4143 ; 25   |#if !defined(TRUE)
                             4144 ; 26   |#define TRUE  1
                             4145 ; 27   |#endif
                             4146 ; 28   |
                             4147 ; 29   |#if !defined(NULL)
                             4148 ; 30   |#define NULL 0
                             4149 ; 31   |#endif
                             4150 ; 32   |
                             4151 ; 33   |#define MAX_INT     0x7FFFFF
                             4152 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4153 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4154 ; 36   |#define MAX_ULONG   (-1) 
                             4155 ; 37   |
                             4156 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4157 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4158 ; 40   |
                             4159 ; 41   |
                             4160 ; 42   |#define BYTE    unsigned char       // btVarName
                             4161 ; 43   |#define CHAR    signed char         // cVarName
                             4162 ; 44   |#define USHORT  unsigned short      // usVarName
                             4163 ; 45   |#define SHORT   unsigned short      // sVarName
                             4164 ; 46   |#define WORD    unsigned int        // wVarName
                             4165 ; 47   |#define INT     signed int          // iVarName
                             4166 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4167 ; 49   |#define LONG    signed long         // lVarName
                             4168 ; 50   |#define BOOL    unsigned int        // bVarName
                             4169 ; 51   |#define FRACT   _fract              // frVarName
                             4170 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4171 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4172 ; 54   |#define FLOAT   float               // fVarName
                             4173 ; 55   |#define DBL     double              // dVarName
                             4174 ; 56   |#define ENUM    enum                // eVarName
                             4175 ; 57   |#define CMX     _complex            // cmxVarName
                             4176 ; 58   |typedef WORD UCS3;                   // 
                             4177 ; 59   |
                             4178 ; 60   |#define UINT16  unsigned short
                             4179 ; 61   |#define UINT8   unsigned char   
                             4180 ; 62   |#define UINT32  unsigned long
                             4181 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4182 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4183 ; 65   |#define WCHAR   UINT16
                             4184 ; 66   |
                             4185 ; 67   |//UINT128 is 16 bytes or 6 words
                             4186 ; 68   |typedef struct UINT128_3500 {   
                             4187 ; 69   |    int val[6];     
                             4188 ; 70   |} UINT128_3500;
                             4189 ; 71   |
                             4190 ; 72   |#define UINT128   UINT128_3500
                             4191 ; 73   |
                             4192 ; 74   |// Little endian word packed byte strings:   
                             4193 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4194 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4195 ; 77   |// Little endian word packed byte strings:   
                             4196 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4197 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4198 ; 80   |
                             4199 ; 81   |// Declare Memory Spaces To Use When Coding
                             4200 ; 82   |// A. Sector Buffers
                             4201 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4202 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4203 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4204 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4205 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4206 ; 88   |// B. Media DDI Memory
                             4207 ; 89   |#define MEDIA_DDI_MEM _Y
                             4208 ; 90   |
                             4209 ; 91   |
                             4210 ; 92   |
                             4211 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4212 ; 94   |// Examples of circular pointers:
                             4213 ; 95   |//    INT CIRC cpiVarName
                             4214 ; 96   |//    DWORD CIRC cpdwVarName
                             4215 ; 97   |
                             4216 ; 98   |#define RETCODE INT                 // rcVarName
                             4217 ; 99   |
                             4218 ; 100  |// generic bitfield structure
                             4219 ; 101  |struct Bitfield {
                             4220 ; 102  |    unsigned int B0  :1;
                             4221 ; 103  |    unsigned int B1  :1;
                             4222 ; 104  |    unsigned int B2  :1;
                             4223 ; 105  |    unsigned int B3  :1;
                             4224 ; 106  |    unsigned int B4  :1;
                             4225 ; 107  |    unsigned int B5  :1;
                             4226 ; 108  |    unsigned int B6  :1;
                             4227 ; 109  |    unsigned int B7  :1;
                             4228 ; 110  |    unsigned int B8  :1;
                             4229 ; 111  |    unsigned int B9  :1;
                             4230 ; 112  |    unsigned int B10 :1;
                             4231 ; 113  |    unsigned int B11 :1;
                             4232 ; 114  |    unsigned int B12 :1;
                             4233 ; 115  |    unsigned int B13 :1;
                             4234 ; 116  |    unsigned int B14 :1;
                             4235 ; 117  |    unsigned int B15 :1;
                             4236 ; 118  |    unsigned int B16 :1;
                             4237 ; 119  |    unsigned int B17 :1;
                             4238 ; 120  |    unsigned int B18 :1;
                             4239 ; 121  |    unsigned int B19 :1;
                             4240 ; 122  |    unsigned int B20 :1;
                             4241 ; 123  |    unsigned int B21 :1;
                             4242 ; 124  |    unsigned int B22 :1;
                             4243 ; 125  |    unsigned int B23 :1;
                             4244 ; 126  |};
                             4245 ; 127  |
                             4246 ; 128  |union BitInt {
                             4247 ; 129  |        struct Bitfield B;
                             4248 ; 130  |        int        I;
                             4249 ; 131  |};
                             4250 ; 132  |
                             4251 ; 133  |#define MAX_MSG_LENGTH 10
                             4252 ; 134  |struct CMessage
                             4253 ; 135  |{
                             4254 ; 136  |        unsigned int m_uLength;
                             4255 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4256 ; 138  |};
                             4257 ; 139  |
                             4258 ; 140  |typedef struct {
                             4259 ; 141  |    WORD m_wLength;
                             4260 ; 142  |    WORD m_wMessage;
                             4261 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4262 ; 144  |} Message;
                             4263 ; 145  |
                             4264 ; 146  |struct MessageQueueDescriptor
                             4265 ; 147  |{
                             4266 ; 148  |        int *m_pBase;
                             4267 ; 149  |        int m_iModulo;
                             4268 ; 150  |        int m_iSize;
                             4269 ; 151  |        int *m_pHead;
                             4270 ; 152  |        int *m_pTail;
                             4271 ; 153  |};
                             4272 ; 154  |
                             4273 ; 155  |struct ModuleEntry
                             4274 ; 156  |{
                             4275 ; 157  |    int m_iSignaledEventMask;
                             4276 ; 158  |    int m_iWaitEventMask;
                             4277 ; 159  |    int m_iResourceOfCode;
                             4278 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4279 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             4280 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4281 ; 163  |    int m_uTimeOutHigh;
                             4282 ; 164  |    int m_uTimeOutLow;
                             4283 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4284 ; 166  |};
                             4285 ; 167  |
                             4286 ; 168  |union WaitMask{
                             4287 ; 169  |    struct B{
                             4288 ; 170  |        unsigned int m_bNone     :1;
                             4289 ; 171  |        unsigned int m_bMessage  :1;
                             4290 ; 172  |        unsigned int m_bTimer    :1;
                             4291 ; 173  |        unsigned int m_bButton   :1;
                             4292 ; 174  |    } B;
                             4293 ; 175  |    int I;
                             4294 ; 176  |} ;
                             4295 ; 177  |
                             4296 ; 178  |
                             4297 ; 179  |struct Button {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4298 ; 180  |        WORD wButtonEvent;
                             4299 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4300 ; 182  |};
                             4301 ; 183  |
                             4302 ; 184  |struct Message {
                             4303 ; 185  |        WORD wMsgLength;
                             4304 ; 186  |        WORD wMsgCommand;
                             4305 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4306 ; 188  |};
                             4307 ; 189  |
                             4308 ; 190  |union EventTypes {
                             4309 ; 191  |        struct CMessage msg;
                             4310 ; 192  |        struct Button Button ;
                             4311 ; 193  |        struct Message Message;
                             4312 ; 194  |};
                             4313 ; 195  |
                             4314 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4315 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4316 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4317 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4318 ; 200  |
                             4319 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4320 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4321 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4322 ; 204  |
                             4323 ; 205  |#if DEBUG
                             4324 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4325 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4326 ; 208  |#else 
                             4327 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             4328 ; 210  |#define DebugBuildAssert(x)    
                             4329 ; 211  |#endif
                             4330 ; 212  |
                             4331 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4332 ; 214  |//  #pragma asm
                             4333 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4334 ; 216  |//  #pragma endasm
                             4335 ; 217  |
                             4336 ; 218  |
                             4337 ; 219  |#ifdef COLOR_262K
                             4338 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             4339 ; 221  |#elif defined(COLOR_65K)
                             4340 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             4341 ; 223  |#else
                             4342 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             4343 ; 225  |#endif
                             4344 ; 226  |    
                             4345 ; 227  |#endif // #ifndef _TYPES_H
                             4346 
                             4348 
                             4349 ; 29   |
                             4350 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             4351 ; 31   |////   I2C STMP Registers
                             4352 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             4353 ; 33   |
                             4354 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                             4355 ; 35   |
                             4356 ; 36   |
                             4357 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                             4358 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                             4359 ; 39   |
                             4360 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                             4361 ; 41   |
                             4362 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                             4363 ; 43   |
                             4364 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                             4365 ; 45   |
                             4366 ; 46   |typedef union               /* I2C Clock Divider Register */
                             4367 ; 47   |{
                             4368 ; 48   |    struct {
                             4369 ; 49   |        int                :1; 
                             4370 ; 50   |        unsigned FACT      :8;
                             4371 ; 51   |    } B;
                             4372 ; 52   |    int I;
                             4373 ; 53   |    unsigned U;
                             4374 ; 54   |} i2cdivr_type;
                             4375 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Registers        */
                             4376 ; 56   |
                             4377 ; 57   |
                             4378 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                             4379 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                             4380 ; 60   |
                             4381 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                             4382 ; 62   |
                             4383 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                             4384 ; 64   |
                             4385 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                             4386 ; 66   |
                             4387 ; 67   |typedef union               /* I2C Data Register */
                             4388 ; 68   |{
                             4389 ; 69   |    struct {
                             4390 ; 70   |         unsigned DATA :24; 
                             4391 ; 71   |    } B;
                             4392 ; 72   |    int I;
                             4393 ; 73   |    unsigned U;
                             4394 ; 74   |} i2cdatr_type;
                             4395 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers (I2CDAT)      */
                             4396 ; 76   |
                             4397 ; 77   |
                             4398 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                             4399 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                             4400 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                             4401 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
                             4402 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                             4403 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                             4404 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                             4405 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                             4406 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                             4407 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                             4408 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                             4409 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                             4410 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                             4411 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                             4412 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                             4413 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                             4414 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                             4415 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                             4416 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                             4417 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                             4418 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                             4419 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                             4420 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                             4421 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                             4422 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                             4423 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                             4424 ; 104  |
                             4425 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                             4426 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                             4427 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                             4428 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                             4429 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                             4430 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                             4431 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                             4432 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                             4433 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                             4434 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                             4435 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                             4436 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                             4437 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                             4438 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                             4439 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                             4440 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                             4441 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                             4442 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                             4443 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                             4444 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                             4445 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                             4446 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                             4447 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                             4448 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                             4449 ; 129  |
                             4450 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                             4451 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                             4452 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                             4453 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                             4454 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                             4455 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                             4456 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                             4457 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                             4458 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                             4459 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                             4460 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                             4461 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                             4462 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                             4463 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
                             4464 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                             4465 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                             4466 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                             4467 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                             4468 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                             4469 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                             4470 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                             4471 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                             4472 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                             4473 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                             4474 ; 154  |
                             4475 ; 155  |typedef union               /* I2C Control Register         */
                             4476 ; 156  |{
                             4477 ; 157  |    struct {
                             4478 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                             4479 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                             4480 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                             4481 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                             4482 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                             4483 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                             4484 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                             4485 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                             4486 ; 166  |       int RWN         :1; /* Read/Not Write           */
                             4487 ; 167  |       unsigned WL     :2; /* Word Length              */
                             4488 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                             4489 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                             4490 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                             4491 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                             4492 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                             4493 ; 173  |        int LWORD       :1; /* Last Word                */
                             4494 ; 174  |        int SUBA        :1; /* Sub Address              */
                             4495 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                             4496 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                             4497 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                             4498 ; 178  |    } B;
                             4499 ; 179  |    int I;
                             4500 ; 180  |    unsigned U;
                             4501 ; 181  |} i2ccsr_type;
                             4502 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status Register (I2CCSR) */
                             4503 ; 183  |
                             4504 ; 184  |#endif
                             4505 
                             4507 
                             4508 ; 24   |#include "regsi2s.h"
                             4509 
                             4511 
                             4512 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4513 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4514 ; 3    |// Filename: regsi2s.inc
                             4515 ; 4    |// Description: Register definitions for I2S interface
                             4516 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4517 ; 6    |// The following naming conventions are followed in this file.
                             4518 ; 7    |// All registers are named using the format...
                             4519 ; 8    |//     HW_<module>_<regname>
                             4520 ; 9    |// where <module> is the module name which can be any of the following...
                             4521 ; 10   |//     USB20
                             4522 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4523 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4524 ; 13   |// that module)
                             4525 ; 14   |// <regname> is the specific register within that module
                             4526 ; 15   |// We also define the following...
                             4527 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4528 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4529 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4530 ; 19   |// which does something else, and
                             4531 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4532 ; 21   |// which does something else.
                             4533 ; 22   |// Other rules
                             4534 ; 23   |//     All caps
                             4535 ; 24   |//     Numeric identifiers start at 0
                             4536 ; 25   |#if !(defined(regsi2sinc))
                             4537 ; 26   |#define regsi2sinc 1
                             4538 ; 27   |
                             4539 ; 28   |#include "types.h"
                             4540 
                             4542 
                             4543 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4544 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4545 ; 3    |//
                             4546 ; 4    |// Filename: types.h
                             4547 ; 5    |// Description: Standard data types
                             4548 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4549 ; 7    |
                             4550 ; 8    |#ifndef _TYPES_H
                             4551 ; 9    |#define _TYPES_H
                             4552 ; 10   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4553 ; 11   |// TODO:  move this outta here!
                             4554 ; 12   |#if !defined(NOERROR)
                             4555 ; 13   |#define NOERROR 0
                             4556 ; 14   |#define SUCCESS 0
                             4557 ; 15   |#endif 
                             4558 ; 16   |#if !defined(SUCCESS)
                             4559 ; 17   |#define SUCCESS  0
                             4560 ; 18   |#endif
                             4561 ; 19   |#if !defined(ERROR)
                             4562 ; 20   |#define ERROR   -1
                             4563 ; 21   |#endif
                             4564 ; 22   |#if !defined(FALSE)
                             4565 ; 23   |#define FALSE 0
                             4566 ; 24   |#endif
                             4567 ; 25   |#if !defined(TRUE)
                             4568 ; 26   |#define TRUE  1
                             4569 ; 27   |#endif
                             4570 ; 28   |
                             4571 ; 29   |#if !defined(NULL)
                             4572 ; 30   |#define NULL 0
                             4573 ; 31   |#endif
                             4574 ; 32   |
                             4575 ; 33   |#define MAX_INT     0x7FFFFF
                             4576 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4577 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4578 ; 36   |#define MAX_ULONG   (-1) 
                             4579 ; 37   |
                             4580 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4581 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4582 ; 40   |
                             4583 ; 41   |
                             4584 ; 42   |#define BYTE    unsigned char       // btVarName
                             4585 ; 43   |#define CHAR    signed char         // cVarName
                             4586 ; 44   |#define USHORT  unsigned short      // usVarName
                             4587 ; 45   |#define SHORT   unsigned short      // sVarName
                             4588 ; 46   |#define WORD    unsigned int        // wVarName
                             4589 ; 47   |#define INT     signed int          // iVarName
                             4590 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4591 ; 49   |#define LONG    signed long         // lVarName
                             4592 ; 50   |#define BOOL    unsigned int        // bVarName
                             4593 ; 51   |#define FRACT   _fract              // frVarName
                             4594 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4595 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4596 ; 54   |#define FLOAT   float               // fVarName
                             4597 ; 55   |#define DBL     double              // dVarName
                             4598 ; 56   |#define ENUM    enum                // eVarName
                             4599 ; 57   |#define CMX     _complex            // cmxVarName
                             4600 ; 58   |typedef WORD UCS3;                   // 
                             4601 ; 59   |
                             4602 ; 60   |#define UINT16  unsigned short
                             4603 ; 61   |#define UINT8   unsigned char   
                             4604 ; 62   |#define UINT32  unsigned long
                             4605 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4606 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4607 ; 65   |#define WCHAR   UINT16
                             4608 ; 66   |
                             4609 ; 67   |//UINT128 is 16 bytes or 6 words
                             4610 ; 68   |typedef struct UINT128_3500 {   
                             4611 ; 69   |    int val[6];     
                             4612 ; 70   |} UINT128_3500;
                             4613 ; 71   |
                             4614 ; 72   |#define UINT128   UINT128_3500
                             4615 ; 73   |
                             4616 ; 74   |// Little endian word packed byte strings:   
                             4617 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4618 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4619 ; 77   |// Little endian word packed byte strings:   
                             4620 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4621 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4622 ; 80   |
                             4623 ; 81   |// Declare Memory Spaces To Use When Coding
                             4624 ; 82   |// A. Sector Buffers
                             4625 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4626 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4627 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4628 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4629 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4630 ; 88   |// B. Media DDI Memory
                             4631 ; 89   |#define MEDIA_DDI_MEM _Y
                             4632 ; 90   |
                             4633 ; 91   |
                             4634 ; 92   |
                             4635 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4636 ; 94   |// Examples of circular pointers:
                             4637 ; 95   |//    INT CIRC cpiVarName
                             4638 ; 96   |//    DWORD CIRC cpdwVarName
                             4639 ; 97   |
                             4640 ; 98   |#define RETCODE INT                 // rcVarName
                             4641 ; 99   |
                             4642 ; 100  |// generic bitfield structure
                             4643 ; 101  |struct Bitfield {
                             4644 ; 102  |    unsigned int B0  :1;
                             4645 ; 103  |    unsigned int B1  :1;
                             4646 ; 104  |    unsigned int B2  :1;
                             4647 ; 105  |    unsigned int B3  :1;
                             4648 ; 106  |    unsigned int B4  :1;
                             4649 ; 107  |    unsigned int B5  :1;
                             4650 ; 108  |    unsigned int B6  :1;
                             4651 ; 109  |    unsigned int B7  :1;
                             4652 ; 110  |    unsigned int B8  :1;
                             4653 ; 111  |    unsigned int B9  :1;
                             4654 ; 112  |    unsigned int B10 :1;
                             4655 ; 113  |    unsigned int B11 :1;
                             4656 ; 114  |    unsigned int B12 :1;
                             4657 ; 115  |    unsigned int B13 :1;
                             4658 ; 116  |    unsigned int B14 :1;
                             4659 ; 117  |    unsigned int B15 :1;
                             4660 ; 118  |    unsigned int B16 :1;
                             4661 ; 119  |    unsigned int B17 :1;
                             4662 ; 120  |    unsigned int B18 :1;
                             4663 ; 121  |    unsigned int B19 :1;
                             4664 ; 122  |    unsigned int B20 :1;
                             4665 ; 123  |    unsigned int B21 :1;
                             4666 ; 124  |    unsigned int B22 :1;
                             4667 ; 125  |    unsigned int B23 :1;
                             4668 ; 126  |};
                             4669 ; 127  |
                             4670 ; 128  |union BitInt {
                             4671 ; 129  |        struct Bitfield B;
                             4672 ; 130  |        int        I;
                             4673 ; 131  |};
                             4674 ; 132  |
                             4675 ; 133  |#define MAX_MSG_LENGTH 10
                             4676 ; 134  |struct CMessage
                             4677 ; 135  |{
                             4678 ; 136  |        unsigned int m_uLength;
                             4679 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4680 ; 138  |};
                             4681 ; 139  |
                             4682 ; 140  |typedef struct {
                             4683 ; 141  |    WORD m_wLength;
                             4684 ; 142  |    WORD m_wMessage;
                             4685 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4686 ; 144  |} Message;
                             4687 ; 145  |
                             4688 ; 146  |struct MessageQueueDescriptor
                             4689 ; 147  |{
                             4690 ; 148  |        int *m_pBase;
                             4691 ; 149  |        int m_iModulo;
                             4692 ; 150  |        int m_iSize;
                             4693 ; 151  |        int *m_pHead;
                             4694 ; 152  |        int *m_pTail;
                             4695 ; 153  |};
                             4696 ; 154  |
                             4697 ; 155  |struct ModuleEntry
                             4698 ; 156  |{
                             4699 ; 157  |    int m_iSignaledEventMask;
                             4700 ; 158  |    int m_iWaitEventMask;
                             4701 ; 159  |    int m_iResourceOfCode;
                             4702 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4703 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             4704 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4705 ; 163  |    int m_uTimeOutHigh;
                             4706 ; 164  |    int m_uTimeOutLow;
                             4707 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4708 ; 166  |};
                             4709 ; 167  |
                             4710 ; 168  |union WaitMask{
                             4711 ; 169  |    struct B{
                             4712 ; 170  |        unsigned int m_bNone     :1;
                             4713 ; 171  |        unsigned int m_bMessage  :1;
                             4714 ; 172  |        unsigned int m_bTimer    :1;
                             4715 ; 173  |        unsigned int m_bButton   :1;
                             4716 ; 174  |    } B;
                             4717 ; 175  |    int I;
                             4718 ; 176  |} ;
                             4719 ; 177  |
                             4720 ; 178  |
                             4721 ; 179  |struct Button {
                             4722 ; 180  |        WORD wButtonEvent;
                             4723 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4724 ; 182  |};
                             4725 ; 183  |
                             4726 ; 184  |struct Message {
                             4727 ; 185  |        WORD wMsgLength;
                             4728 ; 186  |        WORD wMsgCommand;
                             4729 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4730 ; 188  |};
                             4731 ; 189  |
                             4732 ; 190  |union EventTypes {
                             4733 ; 191  |        struct CMessage msg;
                             4734 ; 192  |        struct Button Button ;
                             4735 ; 193  |        struct Message Message;
                             4736 ; 194  |};
                             4737 ; 195  |
                             4738 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4739 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4740 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4741 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4742 ; 200  |
                             4743 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4744 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4745 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4746 ; 204  |
                             4747 ; 205  |#if DEBUG
                             4748 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4749 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4750 ; 208  |#else 
                             4751 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             4752 ; 210  |#define DebugBuildAssert(x)    
                             4753 ; 211  |#endif
                             4754 ; 212  |
                             4755 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4756 ; 214  |//  #pragma asm
                             4757 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4758 ; 216  |//  #pragma endasm
                             4759 ; 217  |
                             4760 ; 218  |
                             4761 ; 219  |#ifdef COLOR_262K
                             4762 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             4763 ; 221  |#elif defined(COLOR_65K)
                             4764 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             4765 ; 223  |#else
                             4766 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             4767 ; 225  |#endif
                             4768 ; 226  |    
                             4769 ; 227  |#endif // #ifndef _TYPES_H
                             4770 
                             4772 
                             4773 ; 29   |
                             4774 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                             4775 ; 31   |////  I2S Registers (SAI)
                             4776 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                             4777 ; 33   |
                             4778 ; 34   |
                             4779 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                             4780 ; 36   |
                             4781 ; 37   |
                             4782 ; 38   |
                             4783 ; 39   |
                             4784 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                             4785 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                             4786 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                             4787 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                             4788 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                             4789 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                             4790 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                             4791 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                             4792 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                             4793 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                             4794 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                             4795 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                             4796 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                             4797 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                             4798 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                             4799 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                             4800 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                             4801 ; 57   |
                             4802 ; 58   |
                             4803 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                             4804 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4805 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                             4806 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                             4807 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                             4808 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                             4809 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                             4810 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                             4811 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                             4812 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                             4813 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                             4814 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                             4815 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                             4816 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                             4817 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                             4818 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                             4819 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                             4820 ; 76   |
                             4821 ; 77   |
                             4822 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                             4823 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                             4824 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                             4825 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                             4826 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                             4827 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                             4828 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                             4829 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                             4830 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                             4831 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                             4832 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                             4833 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                             4834 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                             4835 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                             4836 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                             4837 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                             4838 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                             4839 ; 95   |
                             4840 ; 96   |
                             4841 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                             4842 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                             4843 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                             4844 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                             4845 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                             4846 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                             4847 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                             4848 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                             4849 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                             4850 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                             4851 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                             4852 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                             4853 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                             4854 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                             4855 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                             4856 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                             4857 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                             4858 ; 114  |
                             4859 ; 115  |typedef union
                             4860 ; 116  |{
                             4861 ; 117  |    struct {
                             4862 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                             4863 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                             4864 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                             4865 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                             4866 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                             4867 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                             4868 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                             4869 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                             4870 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                             4871 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                             4872 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                             4873 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                             4874 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                             4875 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                             4876 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                             4877 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                             4878 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                             4879 ; 135  |    } B;
                             4880 ; 136  |    int I;
                             4881 ; 137  |    unsigned U;
                             4882 ; 138  |} saircsr_type;
                             4883 ; 139  |
                             4884 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive CSR         */
                             4885 ; 141  |
                             4886 ; 142  |typedef union
                             4887 ; 143  |{
                             4888 ; 144  |    struct {
                             4889 ; 145  |        unsigned SAI :24;
                             4890 ; 146  |    } B;
                             4891 ; 147  |    int I;
                             4892 ; 148  |    unsigned U;
                             4893 ; 149  |} saixr_type;
                             4894 ; 150  |
                             4895 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received data reg 0 */
                             4896 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received data reg 1 */
                             4897 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received data reg 2 */
                             4898 ; 154  |
                             4899 ; 155  |
                             4900 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                             4901 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                             4902 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                             4903 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                             4904 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                             4905 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                             4906 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                             4907 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                             4908 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                             4909 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                             4910 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                             4911 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                             4912 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                             4913 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                             4914 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                             4915 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                             4916 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                             4917 ; 173  |
                             4918 ; 174  |
                             4919 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                             4920 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                             4921 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                             4922 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                             4923 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                             4924 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                             4925 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                             4926 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                             4927 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                             4928 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                             4929 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                             4930 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                             4931 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                             4932 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                             4933 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                             4934 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                             4935 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                             4936 ; 192  |
                             4937 ; 193  |
                             4938 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                             4939 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                             4940 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                             4941 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                             4942 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                             4943 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                             4944 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                             4945 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                             4946 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                             4947 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                             4948 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                             4949 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                             4950 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                             4951 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                             4952 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                             4953 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                             4954 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                             4955 ; 211  |
                             4956 ; 212  |
                             4957 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                             4958 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                             4959 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                             4960 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                             4961 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                             4962 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                             4963 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                             4964 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                             4965 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                             4966 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                             4967 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                             4968 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                             4969 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                             4970 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                             4971 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                             4972 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                             4973 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                             4974 ; 230  |
                             4975 ; 231  |
                             4976 ; 232  |typedef union
                             4977 ; 233  |{
                             4978 ; 234  |    struct {
                             4979 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                             4980 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                             4981 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                             4982 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                             4983 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                             4984 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                             4985 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction 
                             4986 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                             4987 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                             4988 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                             4989 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justification
                             4990 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                             4991 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                             4992 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                             4993 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                             4994 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                             4995 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                             4996 ; 252  |    } B;
                             4997 ; 253  |    int I;
                             4998 ; 254  |    unsigned U;
                             4999 ; 255  |} saitcsr_type;
                             5000 ; 256  |
                             5001 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR      */
                             5002 ; 258  |
                             5003 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit data reg 0 */
                             5004 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit data reg 1 */
                             5005 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit data reg 2 */
                             5006 ; 262  |
                             5007 ; 263  |#endif
                             5008 
                             5010 
                             5011 ; 25   |#include "regsicoll.h"
                             5012 
                             5014 
                             5015 ; 1    |#if !defined(__REGS_ICOLL_INC)
                             5016 ; 2    |#define __REGS_ICOLL_INC 1
                             5017 ; 3    |
                             5018 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             5019 ; 5    |//  Interrupt Collector Registers
                             5020 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             5021 ; 7    |
                             5022 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                             5023 ; 9    |
                             5024 ; 10   |
                             5025 ; 11   |
                             5026 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                             5027 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                             5028 ; 14   |
                             5029 ; 15   |typedef union
                             5030 ; 16   |{
                             5031 ; 17   |    struct {
                             5032 ; 18   |        int SEN0        :1;
                             5033 ; 19   |        int SEN1        :1;
                             5034 ; 20   |        int SEN2        :1;
                             5035 ; 21   |        int SEN3        :1;
                             5036 ; 22   |        int SEN4        :1;
                             5037 ; 23   |        int SEN5        :1;
                             5038 ; 24   |        int SEN6        :1;
                             5039 ; 25   |        int SEN7        :1;
                             5040 ; 26   |        int SEN8        :1;
                             5041 ; 27   |        int SEN9        :1;
                             5042 ; 28   |        int SEN10       :1;
                             5043 ; 29   |        int SEN11       :1;
                             5044 ; 30   |        int SEN12       :1;
                             5045 ; 31   |        int SEN13       :1;
                             5046 ; 32   |        int SEN14       :1;
                             5047 ; 33   |        int SEN15       :1;
                             5048 ; 34   |        int SEN16       :1;
                             5049 ; 35   |        int SEN17       :1;
                             5050 ; 36   |        int SEN18       :1;
                             5051 ; 37   |        int SEN19       :1;
                             5052 ; 38   |        int SEN20       :1;
                             5053 ; 39   |        int SEN21       :1;
                             5054 ; 40   |        int SEN22       :1;
                             5055 ; 41   |        int SEN23       :1;
                             5056 ; 42   |    } B;
                             5057 ; 43   |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5058 ; 44   |} iclenable0_type;
                             5059 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt Priority Register Core   */
                             5060 ; 46   |
                             5061 ; 47   |
                             5062 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                             5063 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                             5064 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                             5065 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                             5066 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                             5067 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                             5068 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                             5069 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                             5070 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                             5071 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                             5072 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                             5073 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                             5074 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                             5075 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                             5076 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                             5077 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                             5078 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                             5079 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                             5080 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                             5081 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                             5082 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                             5083 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                             5084 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                             5085 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                             5086 ; 72   |
                             5087 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                             5088 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                             5089 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                             5090 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                             5091 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                             5092 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                             5093 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                             5094 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                             5095 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                             5096 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                             5097 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                             5098 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                             5099 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                             5100 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                             5101 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                             5102 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                             5103 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                             5104 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                             5105 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                             5106 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                             5107 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                             5108 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                             5109 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                             5110 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                             5111 ; 97   |
                             5112 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                             5113 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                             5114 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                             5115 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                             5116 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                             5117 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                             5118 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                             5119 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                             5120 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                             5121 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                             5122 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                             5123 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                             5124 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                             5125 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                             5126 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                             5127 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                             5128 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                             5129 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                             5130 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                             5131 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                             5132 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                             5133 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                             5134 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                             5135 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                             5136 ; 122  |
                             5137 ; 123  |
                             5138 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             5139 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                             5140 ; 126  |typedef union
                             5141 ; 127  |{
                             5142 ; 128  |    struct {
                             5143 ; 129  |        
                             5144 ; 130  |        int SEN24       :1;
                             5145 ; 131  |        int SEN25       :1;
                             5146 ; 132  |        int SEN26       :1;
                             5147 ; 133  |        int SEN27       :1;
                             5148 ; 134  |        int SEN28       :1;
                             5149 ; 135  |        int SEN29       :1;
                             5150 ; 136  |        int SEN30       :1;
                             5151 ; 137  |        int SEN31       :1;
                             5152 ; 138  |        int SEN32       :1;
                             5153 ; 139  |        int SEN33       :1;
                             5154 ; 140  |    } B;
                             5155 ; 141  |    int I;
                             5156 ; 142  |} iclenable1_type;
                             5157 ; 143  |
                             5158 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interrupt Priority Register Core    */
                             5159 ; 145  |
                             5160 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                             5161 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                             5162 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                             5163 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                             5164 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                             5165 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                             5166 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                             5167 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                             5168 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                             5169 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                             5170 ; 156  |
                             5171 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                             5172 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                             5173 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                             5174 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                             5175 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                             5176 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                             5177 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                             5178 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                             5179 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                             5180 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                             5181 ; 167  |
                             5182 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                             5183 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                             5184 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                             5185 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                             5186 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                             5187 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                             5188 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                             5189 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                             5190 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                             5191 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                             5192 ; 178  |
                             5193 ; 179  |
                             5194 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             5195 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                             5196 ; 182  |typedef union
                             5197 ; 183  |{
                             5198 ; 184  |    struct {
                             5199 ; 185  |        int SST0        :1;
                             5200 ; 186  |        int SST1        :1;
                             5201 ; 187  |        int SST2        :1;
                             5202 ; 188  |        int SST3        :1;
                             5203 ; 189  |        int SST4        :1;
                             5204 ; 190  |        int SST5        :1;
                             5205 ; 191  |        int SST6        :1;
                             5206 ; 192  |        int SST7        :1;
                             5207 ; 193  |        int SST8        :1;
                             5208 ; 194  |        int SST9        :1;
                             5209 ; 195  |        int SST10       :1;
                             5210 ; 196  |        int SST11       :1;
                             5211 ; 197  |        int SST12       :1;
                             5212 ; 198  |        int SST13       :1;
                             5213 ; 199  |        int SST14       :1;
                             5214 ; 200  |        int SST15       :1;
                             5215 ; 201  |        int SST16       :1;
                             5216 ; 202  |        int SST17       :1;
                             5217 ; 203  |        int SST18       :1;
                             5218 ; 204  |        int SST19       :1;
                             5219 ; 205  |        int SST20       :1;
                             5220 ; 206  |        int SST21       :1;
                             5221 ; 207  |        int SST22       :1;
                             5222 ; 208  |        int SST23       :1;
                             5223 ; 209  |    } B;
                             5224 ; 210  |    int I;
                             5225 ; 211  |} iclstatus0_type;
                             5226 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interrupt Priority Register Core */
                             5227 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                             5228 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                             5229 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                             5230 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                             5231 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                             5232 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                             5233 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                             5234 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                             5235 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                             5236 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                             5237 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                             5238 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                             5239 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                             5240 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                             5241 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                             5242 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                             5243 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                             5244 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                             5245 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                             5246 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                             5247 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                             5248 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                             5249 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                             5250 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                             5251 ; 237  |
                             5252 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                             5253 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                             5254 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                             5255 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                             5256 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                             5257 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                             5258 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                             5259 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                             5260 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                             5261 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                             5262 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                             5263 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                             5264 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                             5265 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                             5266 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                             5267 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                             5268 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                             5269 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                             5270 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                             5271 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                             5272 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                             5273 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                             5274 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                             5275 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                             5276 ; 262  |
                             5277 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                             5278 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                             5279 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                             5280 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                             5281 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                             5282 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                             5283 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                             5284 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                             5285 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                             5286 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                             5287 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                             5288 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                             5289 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                             5290 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                             5291 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                             5292 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                             5293 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                             5294 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                             5295 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                             5296 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                             5297 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                             5298 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                             5299 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                             5300 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                             5301 ; 287  |
                             5302 ; 288  |
                             5303 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                             5304 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                             5305 ; 291  |typedef union
                             5306 ; 292  |{
                             5307 ; 293  |    struct {
                             5308 ; 294  |        int SST24       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5309 ; 295  |        int SST25       :1;
                             5310 ; 296  |        int SST26       :1;
                             5311 ; 297  |        int SST27       :1;
                             5312 ; 298  |        int SST28       :1;
                             5313 ; 299  |        int SST29       :1;
                             5314 ; 300  |        int SST30       :1;
                             5315 ; 301  |        int SST31       :1;
                             5316 ; 302  |        int SST32       :1;
                             5317 ; 303  |        int SST33       :1;
                             5318 ; 304  |    } B;
                             5319 ; 305  |    int I;
                             5320 ; 306  |} iclstatus1_type;
                             5321 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interrupt Priority Register Core */
                             5322 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                             5323 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                             5324 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                             5325 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                             5326 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                             5327 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                             5328 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                             5329 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                             5330 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                             5331 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                             5332 ; 318  |
                             5333 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                             5334 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                             5335 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                             5336 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                             5337 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                             5338 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                             5339 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                             5340 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                             5341 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                             5342 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                             5343 ; 329  |
                             5344 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                             5345 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                             5346 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                             5347 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                             5348 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                             5349 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                             5350 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                             5351 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                             5352 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                             5353 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                             5354 ; 340  |
                             5355 ; 341  |
                             5356 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                             5357 ; 343  |//  Interrupt Collector Priority Defs
                             5358 ; 344  |typedef union
                             5359 ; 345  |{
                             5360 ; 346  |    struct {
                             5361 ; 347  |        unsigned S0P    :3;
                             5362 ; 348  |        unsigned S1P    :3;
                             5363 ; 349  |        unsigned S2P    :3;
                             5364 ; 350  |        unsigned S3P    :3;
                             5365 ; 351  |        unsigned S4P    :3;
                             5366 ; 352  |        unsigned S5P    :3;
                             5367 ; 353  |        unsigned S6P    :3;
                             5368 ; 354  |        unsigned S7P    :3;
                             5369 ; 355  |    } B;
                             5370 ; 356  |    int I;
                             5371 ; 357  |
                             5372 ; 358  |} iclprior0_type;
                             5373 ; 359  |
                             5374 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrupt Collector Register 0 Priority   */
                             5375 ; 361  |
                             5376 ; 362  |#define HW_ICLPRIORR_SP_0 0
                             5377 ; 363  |#define HW_ICLPRIORR_SP_1 1
                             5378 ; 364  |#define HW_ICLPRIORR_SP_2 2
                             5379 ; 365  |#define HW_ICLPRIORR_SP_3 3
                             5380 ; 366  |#define HW_ICLPRIORR_SP_4 4
                             5381 ; 367  |#define HW_ICLPRIORR_SP_5 5
                             5382 ; 368  |#define HW_ICLPRIORR_SP_6 6
                             5383 ; 369  |#define HW_ICLPRIORR_SP_7 7
                             5384 ; 370  |
                             5385 ; 371  |
                             5386 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                             5387 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                             5388 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                             5389 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                             5390 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                             5391 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                             5392 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                             5393 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                             5394 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                             5395 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                             5396 ; 382  |
                             5397 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                             5398 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                             5399 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                             5400 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                             5401 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                             5402 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                             5403 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                             5404 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                             5405 ; 391  |
                             5406 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                             5407 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                             5408 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                             5409 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                             5410 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                             5411 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                             5412 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                             5413 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                             5414 ; 400  |
                             5415 ; 401  |
                             5416 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                             5417 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                             5418 ; 404  |typedef union
                             5419 ; 405  |{
                             5420 ; 406  |    struct {
                             5421 ; 407  |        unsigned S8P    :3;
                             5422 ; 408  |        unsigned S9P    :3;
                             5423 ; 409  |        unsigned S10P   :3;
                             5424 ; 410  |        unsigned S11P   :3;
                             5425 ; 411  |        unsigned S12P   :3;
                             5426 ; 412  |        unsigned S13P   :3;
                             5427 ; 413  |        unsigned S14P   :3;
                             5428 ; 414  |        unsigned S15P   :3;
                             5429 ; 415  |    } B;
                             5430 ; 416  |    int I;
                             5431 ; 417  |} iclprior1_type;
                             5432 ; 418  |
                             5433 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrupt Collector Register 1 Priority   */
                             5434 ; 420  |
                             5435 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                             5436 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                             5437 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                             5438 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                             5439 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                             5440 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                             5441 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                             5442 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                             5443 ; 429  |
                             5444 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                             5445 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                             5446 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                             5447 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                             5448 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                             5449 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                             5450 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                             5451 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                             5452 ; 438  |
                             5453 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                             5454 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                             5455 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                             5456 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                             5457 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                             5458 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                             5459 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                             5460 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                             5461 ; 447  |
                             5462 ; 448  |
                             5463 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                             5464 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                             5465 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                             5466 ; 452  |{
                             5467 ; 453  |    struct {
                             5468 ; 454  |        unsigned S16P   :3;
                             5469 ; 455  |        unsigned S17P   :3;
                             5470 ; 456  |        unsigned S18P   :3;
                             5471 ; 457  |        unsigned S19P   :3;
                             5472 ; 458  |        unsigned S20P   :3;
                             5473 ; 459  |        unsigned S21P   :3;
                             5474 ; 460  |        unsigned S22P   :3;
                             5475 ; 461  |        unsigned S23P   :3;
                             5476 ; 462  |    } B;
                             5477 ; 463  |    int I;
                             5478 ; 464  |} iclprior2_type;
                             5479 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrupt Collector Register 2 Priority   */
                             5480 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                             5481 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                             5482 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                             5483 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                             5484 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                             5485 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                             5486 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                             5487 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                             5488 ; 474  |
                             5489 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                             5490 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                             5491 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                             5492 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                             5493 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                             5494 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                             5495 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                             5496 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                             5497 ; 483  |
                             5498 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                             5499 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                             5500 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                             5501 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                             5502 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                             5503 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                             5504 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                             5505 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                             5506 ; 492  |
                             5507 ; 493  |
                             5508 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                             5509 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                             5510 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5511 ; 497  |{
                             5512 ; 498  |    struct {
                             5513 ; 499  |        unsigned S24P   :3;
                             5514 ; 500  |        unsigned S25P   :3;
                             5515 ; 501  |        unsigned S26P   :3;
                             5516 ; 502  |        unsigned S27P   :3;
                             5517 ; 503  |        unsigned S28P   :3;
                             5518 ; 504  |        unsigned S29P   :3;
                             5519 ; 505  |        unsigned S30P   :3;
                             5520 ; 506  |        unsigned S31P   :3;
                             5521 ; 507  |    } B;
                             5522 ; 508  |    int I;
                             5523 ; 509  |} iclprior3_type;
                             5524 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrupt Collector Register 3 Priority   */
                             5525 ; 511  |
                             5526 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                             5527 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             5528 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             5529 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             5530 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             5531 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             5532 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             5533 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             5534 ; 520  |
                             5535 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             5536 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                             5537 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             5538 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             5539 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             5540 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                             5541 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             5542 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             5543 ; 529  |
                             5544 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             5545 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             5546 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             5547 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             5548 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             5549 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             5550 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                             5551 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             5552 ; 538  |
                             5553 ; 539  |
                             5554 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             5555 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             5556 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5557 ; 543  |{
                             5558 ; 544  |    struct {
                             5559 ; 545  |        unsigned S32P   :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5560 ; 546  |        unsigned S33P   :3;
                             5561 ; 547  |    } B;
                             5562 ; 548  |    int I;
                             5563 ; 549  |} iclprior4_type;
                             5564 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt Collector Register 4 Priority   */
                             5565 ; 551  |
                             5566 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             5567 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             5568 ; 554  |
                             5569 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             5570 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                             5571 ; 557  |
                             5572 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             5573 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             5574 ; 560  |
                             5575 ; 561  |
                             5576 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             5577 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             5578 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             5579 ; 565  |{
                             5580 ; 566  |    struct {
                             5581 ; 567  |        unsigned S0S    :2;
                             5582 ; 568  |        unsigned S1S    :2;
                             5583 ; 569  |        unsigned S2S    :2;
                             5584 ; 570  |        unsigned S3S    :2;
                             5585 ; 571  |        unsigned S4S    :2;
                             5586 ; 572  |        unsigned S5S    :2;
                             5587 ; 573  |        unsigned S6S    :2;
                             5588 ; 574  |        unsigned S7S    :2;
                             5589 ; 575  |        unsigned S8S    :2;
                             5590 ; 576  |        unsigned S9S    :2;
                             5591 ; 577  |        unsigned S10S   :2;
                             5592 ; 578  |        unsigned S11S   :2;
                             5593 ; 579  |    } B;
                             5594 ; 580  |    int I;
                             5595 ; 581  |} iclsteer0_type;
                             5596 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrupt Collector Steering Register 0   */
                             5597 ; 583  |
                             5598 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             5599 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             5600 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                             5601 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             5602 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             5603 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                             5604 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             5605 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             5606 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             5607 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             5608 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             5609 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             5610 ; 596  |
                             5611 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             5612 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             5613 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                             5614 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             5615 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             5616 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             5617 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             5618 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             5619 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             5620 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             5621 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             5622 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             5623 ; 609  |
                             5624 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             5625 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             5626 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             5627 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             5628 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             5629 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             5630 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             5631 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                             5632 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             5633 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             5634 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             5635 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             5636 ; 622  |
                             5637 ; 623  |
                             5638 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             5639 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             5640 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             5641 ; 627  |{
                             5642 ; 628  |    struct {
                             5643 ; 629  |        unsigned S12S   :2;
                             5644 ; 630  |        unsigned S13S   :2;
                             5645 ; 631  |        unsigned S14S   :2;
                             5646 ; 632  |        unsigned S15S   :2;
                             5647 ; 633  |        unsigned S16S   :2;
                             5648 ; 634  |        unsigned S17S   :2;
                             5649 ; 635  |        unsigned S18S   :2;
                             5650 ; 636  |        unsigned S19S   :2;
                             5651 ; 637  |        unsigned S20S   :2;
                             5652 ; 638  |        unsigned S21S   :2;
                             5653 ; 639  |        unsigned S22S   :2;
                             5654 ; 640  |        unsigned S23S   :2;
                             5655 ; 641  |    } B;
                             5656 ; 642  |    int I;
                             5657 ; 643  |} iclsteer1_type;
                             5658 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrupt Collector Steering Register 1   */
                             5659 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             5660 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             5661 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                             5662 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             5663 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             5664 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                             5665 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             5666 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             5667 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             5668 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             5669 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             5670 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             5671 ; 657  |
                             5672 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             5673 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             5674 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             5675 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             5676 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             5677 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             5678 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             5679 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             5680 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             5681 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             5682 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             5683 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             5684 ; 670  |
                             5685 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             5686 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             5687 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             5688 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             5689 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             5690 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             5691 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             5692 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             5693 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             5694 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             5695 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             5696 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             5697 ; 683  |
                             5698 ; 684  |
                             5699 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             5700 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             5701 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             5702 ; 688  |{
                             5703 ; 689  |    struct {
                             5704 ; 690  |        unsigned S24S   :2;
                             5705 ; 691  |        unsigned S25S   :2;
                             5706 ; 692  |        unsigned S26S   :2;
                             5707 ; 693  |        unsigned S27S   :2;
                             5708 ; 694  |        unsigned S28S   :2;
                             5709 ; 695  |        unsigned S29S   :2;
                             5710 ; 696  |        unsigned S30S   :2;
                             5711 ; 697  |        unsigned S31S   :2;
                             5712 ; 698  |        unsigned S32S   :2;
                             5713 ; 699  |        unsigned S33S   :2;
                             5714 ; 700  |    } B;
                             5715 ; 701  |    int I;
                             5716 ; 702  |} iclsteer2_type;
                             5717 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interrupt Collector Steering Register 2  */
                             5718 ; 704  |
                             5719 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             5720 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             5721 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             5722 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             5723 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             5724 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             5725 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             5726 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             5727 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             5728 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             5729 ; 715  |
                             5730 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             5731 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             5732 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                             5733 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             5734 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             5735 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             5736 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             5737 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             5738 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             5739 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             5740 ; 726  |
                             5741 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             5742 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             5743 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             5744 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             5745 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             5746 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             5747 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             5748 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             5749 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             5750 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             5751 ; 737  |
                             5752 ; 738  |
                             5753 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             5754 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             5755 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             5756 ; 742  |{
                             5757 ; 743  |    struct {
                             5758 ; 744  |        int S0FV        :1;
                             5759 ; 745  |        int S1FV        :1;
                             5760 ; 746  |        int S2FV        :1;
                             5761 ; 747  |        int S3FV        :1;
                             5762 ; 748  |        int S4FV        :1;
                             5763 ; 749  |        int S5FV        :1;
                             5764 ; 750  |        int S6FV        :1;
                             5765 ; 751  |        int S7FV        :1;
                             5766 ; 752  |        int S8FV        :1;
                             5767 ; 753  |        int S9FV        :1;
                             5768 ; 754  |        int S10FV       :1;
                             5769 ; 755  |        int S11FV       :1;
                             5770 ; 756  |        int S12FV       :1;
                             5771 ; 757  |        int S13FV       :1;
                             5772 ; 758  |        int S14FV       :1;
                             5773 ; 759  |        int S15FV       :1;
                             5774 ; 760  |        int S16FV       :1;
                             5775 ; 761  |        int S17FV       :1;
                             5776 ; 762  |        int S18FV       :1;
                             5777 ; 763  |        int S19FV       :1;
                             5778 ; 764  |        int S20FV       :1;
                             5779 ; 765  |        int S21FV       :1;
                             5780 ; 766  |        int S22FV       :1;
                             5781 ; 767  |        int S23FV       :1;
                             5782 ; 768  |    } B;
                             5783 ; 769  |    int I;
                             5784 ; 770  |} iclforce0_type;
                             5785 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interrupt Collector Debug Force Register 0   */
                             5786 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             5787 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             5788 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             5789 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             5790 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             5791 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             5792 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             5793 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                             5794 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             5795 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             5796 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             5797 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             5798 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             5799 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             5800 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             5801 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             5802 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             5803 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             5804 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             5805 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             5806 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             5807 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             5808 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             5809 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             5810 ; 796  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5811 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             5812 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             5813 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             5814 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             5815 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             5816 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             5817 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             5818 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             5819 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             5820 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             5821 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             5822 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             5823 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             5824 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             5825 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             5826 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             5827 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             5828 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             5829 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             5830 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             5831 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             5832 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             5833 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             5834 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             5835 ; 821  |
                             5836 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             5837 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             5838 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             5839 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             5840 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             5841 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             5842 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             5843 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             5844 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             5845 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             5846 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             5847 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             5848 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             5849 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             5850 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             5851 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             5852 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             5853 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             5854 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             5855 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                             5856 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             5857 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             5858 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             5859 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             5860 ; 846  |
                             5861 ; 847  |
                             5862 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             5863 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             5864 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             5865 ; 851  |{
                             5866 ; 852  |    struct {
                             5867 ; 853  |        int S24FV       :1;
                             5868 ; 854  |        int S25FV       :1;
                             5869 ; 855  |        int S26FV       :1;
                             5870 ; 856  |        int S27FV       :1;
                             5871 ; 857  |        int S28FV       :1;
                             5872 ; 858  |        int S29FV       :1;
                             5873 ; 859  |        int S30FV       :1;
                             5874 ; 860  |        int S31FV       :1;
                             5875 ; 861  |        int S32FV       :1;
                             5876 ; 862  |        int S33FV       :1;
                             5877 ; 863  |    } B;
                             5878 ; 864  |    int I;
                             5879 ; 865  |} iclforce1_type;
                             5880 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interrupt Collector Debug Force Register 1   */
                             5881 ; 867  |
                             5882 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             5883 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             5884 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             5885 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             5886 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             5887 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             5888 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             5889 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             5890 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             5891 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             5892 ; 878  |
                             5893 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             5894 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             5895 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             5896 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             5897 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             5898 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             5899 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             5900 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             5901 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             5902 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             5903 ; 889  |
                             5904 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             5905 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             5906 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             5907 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             5908 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             5909 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             5910 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             5911 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             5912 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             5913 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             5914 ; 900  |
                             5915 ; 901  |
                             5916 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                             5917 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             5918 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             5919 ; 905  |{
                             5920 ; 906  |    struct {
                             5921 ; 907  |        int S0FE        :1;
                             5922 ; 908  |        int S1FE        :1;
                             5923 ; 909  |        int S2FE        :1;
                             5924 ; 910  |        int S3FE        :1;
                             5925 ; 911  |        int S4FE        :1;
                             5926 ; 912  |        int S5FE        :1;
                             5927 ; 913  |        int S6FE        :1;
                             5928 ; 914  |        int S7FE        :1;
                             5929 ; 915  |        int S8FE        :1;
                             5930 ; 916  |        int S9FE        :1;
                             5931 ; 917  |        int S10FE       :1;
                             5932 ; 918  |        int S11FE       :1;
                             5933 ; 919  |        int S12FE       :1;
                             5934 ; 920  |        int S13FE       :1;
                             5935 ; 921  |        int S14FE       :1;
                             5936 ; 922  |        int S15FE       :1;
                             5937 ; 923  |        int S16FE       :1;
                             5938 ; 924  |        int S17FE       :1;
                             5939 ; 925  |        int S18FE       :1;
                             5940 ; 926  |        int S19FE       :1;
                             5941 ; 927  |        int S20FE       :1;
                             5942 ; 928  |        int S21FE       :1;
                             5943 ; 929  |        int S22FE       :1;
                             5944 ; 930  |        int S23FE       :1;
                             5945 ; 931  |    } B;
                             5946 ; 932  |    int I;
                             5947 ; 933  |} iclfenable0_type;
                             5948 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Interrupt Collector Force Enable Register 0    */
                             5949 ; 935  |
                             5950 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             5951 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             5952 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             5953 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             5954 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             5955 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             5956 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             5957 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             5958 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             5959 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             5960 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             5961 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             5962 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             5963 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             5964 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             5965 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             5966 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             5967 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             5968 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             5969 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             5970 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             5971 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             5972 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             5973 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             5974 ; 960  |
                             5975 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             5976 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             5977 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             5978 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             5979 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             5980 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             5981 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             5982 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             5983 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             5984 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             5985 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             5986 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             5987 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             5988 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             5989 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             5990 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             5991 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             5992 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             5993 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             5994 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             5995 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             5996 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             5997 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             5998 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             5999 ; 985  |
                             6000 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             6001 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             6002 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             6003 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             6004 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             6005 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             6006 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             6007 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             6008 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             6009 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             6010 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             6011 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             6012 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             6013 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             6014 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             6015 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             6016 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             6017 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             6018 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             6019 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             6020 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             6021 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             6022 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             6023 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             6024 ; 1010 |
                             6025 ; 1011 |
                             6026 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             6027 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             6028 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             6029 ; 1015 |{
                             6030 ; 1016 |    struct {
                             6031 ; 1017 |        int S24FE       :1;
                             6032 ; 1018 |        int S25FE       :1;
                             6033 ; 1019 |        int S26FE       :1;
                             6034 ; 1020 |        int S27FE       :1;
                             6035 ; 1021 |        int S28FE       :1;
                             6036 ; 1022 |        int S29FE       :1;
                             6037 ; 1023 |        int S30FE       :1;
                             6038 ; 1024 |        int S31FE       :1;
                             6039 ; 1025 |        int S32FE       :1;
                             6040 ; 1026 |        int S33FE       :1;
                             6041 ; 1027 |    } B;
                             6042 ; 1028 |    int I;
                             6043 ; 1029 |} iclfenable1_type;
                             6044 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Interrupt Collector Force Enable Register 1    */
                             6045 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             6046 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             6047 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             6048 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             6049 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             6050 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             6051 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             6052 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             6053 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             6054 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             6055 ; 1041 |
                             6056 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             6057 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             6058 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             6059 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             6060 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             6061 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6062 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             6063 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             6064 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             6065 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             6066 ; 1052 |
                             6067 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             6068 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             6069 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             6070 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             6071 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             6072 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             6073 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             6074 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             6075 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             6076 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                             6077 ; 1063 |
                             6078 ; 1064 |
                             6079 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             6080 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             6081 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             6082 ; 1068 |{
                             6083 ; 1069 |    struct {
                             6084 ; 1070 |        unsigned RQ     :7;
                             6085 ; 1071 |        unsigned IVA    :7;
                             6086 ; 1072 |        unsigned IVB    :7;
                             6087 ; 1073 |    } B;
                             6088 ; 1074 |    int I;
                             6089 ; 1075 |} iclobsvz0_type;
                             6090 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interrupt Collector Observation Register 0   */
                             6091 ; 1077 |
                             6092 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             6093 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             6094 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             6095 ; 1081 |
                             6096 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             6097 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             6098 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             6099 ; 1085 |
                             6100 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             6101 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             6102 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             6103 ; 1089 |
                             6104 ; 1090 |
                             6105 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             6106 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             6107 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             6108 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             6109 ; 1095 |
                             6110 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             6111 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             6112 ; 1098 |
                             6113 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             6114 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             6115 ; 1101 |
                             6116 ; 1102 |
                             6117 ; 1103 |
                             6118 ; 1104 |
                             6119 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             6120 ; 1106 |//  Interrupt Vectors
                             6121 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             6122 ; 1108 |// Reset Vector
                             6123 ; 1109 |#define HW_IVECRESET 0x0000           
                             6124 ; 1110 |// Stack Error
                             6125 ; 1111 |#define HW_IVECSTERR 0x0002           
                             6126 ; 1112 |// Trace
                             6127 ; 1113 |#define HW_IVECTRAC 0x0004           
                             6128 ; 1114 |// SWI
                             6129 ; 1115 |#define HW_IVECSWI 0x0006           
                             6130 ; 1116 |// ~IRQA
                             6131 ; 1117 |#define HW_IVECIRQA 0x0008           
                             6132 ; 1118 |// ~IRQB - BROWNOUT
                             6133 ; 1119 |#define HW_IVECIRQB 0x000A           
                             6134 ; 1120 |// Fatal Error
                             6135 ; 1121 |#define HW_IVECERROR 0x000C           
                             6136 ; 1122 |// SPI
                             6137 ; 1123 |#define HW_IVECSPI 0x000E           
                             6138 ; 1124 |// I2S TX Data Empty
                             6139 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             6140 ; 1126 |// I2S TX Underflow
                             6141 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             6142 ; 1128 |// I2S RX Data Full
                             6143 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             6144 ; 1130 |// I2S RX Overflow
                             6145 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             6146 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors here
                             6147 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors here
                             6148 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors here
                             6149 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             6150 ; 1136 |// GPIO1
                             6151 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             6152 ; 1138 |// GPIO2
                             6153 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             6154 ; 1140 |// GPIO0
                             6155 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             6156 ; 1142 |// TIMER0
                             6157 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             6158 ; 1144 |// TIMER1
                             6159 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             6160 ; 1146 |// TIMER2
                             6161 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             6162 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors here
                             6163 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors here
                             6164 ; 1150 |// I2C RX Data Ready
                             6165 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             6166 ; 1152 |// I2C RX Overflow
                             6167 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             6168 ; 1154 |// I2C TX Data Empty
                             6169 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             6170 ; 1156 |// I2C TX Underflow
                             6171 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             6172 ; 1158 |// Illegal Instruction
                             6173 ; 1159 |#define HW_IVECILI 0x0038           
                             6174 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors here
                             6175 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             6176 ; 1162 |#define HW_IVECDACE 0x003C           
                             6177 ; 1163 |// DAC Underflow ISR
                             6178 ; 1164 |#define HW_IVECDACUF 0x003E           
                             6179 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors here
                             6180 ; 1166 |// ADC Full ISR
                             6181 ; 1167 |#define HW_IVECADCF 0x0042           
                             6182 ; 1168 |// ADC Overflow ISR
                             6183 ; 1169 |#define HW_IVECADCOF 0x0044           
                             6184 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors here
                             6185 ; 1171 |// TIMER3
                             6186 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             6187 ; 1173 |// GPIO3
                             6188 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             6189 ; 1175 |// SDRAM
                             6190 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             6191 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors here
                             6192 ; 1178 |// 5 volt power connected
                             6193 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             6194 ; 1180 |// USB Controller
                             6195 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             6196 ; 1182 |// USB Wakeup 
                             6197 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             6198 ; 1184 |// 5 volt power disconnected
                             6199 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             6200 ; 1186 |// enhanced SPI
                             6201 ; 1187 |#define HW_IVECESPI 0x0058           
                             6202 ; 1188 |// filter coprocessor
                             6203 ; 1189 |#define HW_IVECFILCO 0x005A           
                             6204 ; 1190 |// low res ADC #1
                             6205 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             6206 ; 1192 |// real time clock alarm
                             6207 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             6208 ; 1194 |// low res ADC #2
                             6209 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             6210 ; 1196 |// flash hardware ECC
                             6211 ; 1197 |#define HW_IVECHWECC 0x0062           
                             6212 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors here
                             6213 ; 1199 |// CDSYNC Interrupt
                             6214 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             6215 ; 1201 |// CDSYNC Exception
                             6216 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             6217 ; 1203 |// RS
                             6218 ; 1204 |#define HW_IVECRS 0x006A           
                             6219 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors here
                             6220 ; 1206 |// Flash Done ISR
                             6221 ; 1207 |#define HW_IVECFD 0x006E           
                             6222 ; 1208 |// CompactFlash ISR
                             6223 ; 1209 |#define HW_IVECCF 0x0070           
                             6224 ; 1210 |// SmartMedia Timeout ISR
                             6225 ; 1211 |#define HW_IVECSMTO 0x0072           
                             6226 ; 1212 |// SmartMedia Invalid Programming
                             6227 ; 1213 |#define HW_IVECSMIP 0x0074           
                             6228 ; 1214 |// CompactFlash No Card ISR
                             6229 ; 1215 |#define HW_IVECCFNC 0x0076           
                             6230 ; 1216 |// CompactFlash Status Change ISR
                             6231 ; 1217 |#define HW_IVECCFSC 0x0078           
                             6232 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors here
                             6233 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors here
                             6234 ; 1220 |// CDI
                             6235 ; 1221 |#define HW_IVECCDI 0x007E           
                             6236 ; 1222 |
                             6237 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             6238 ; 1224 |//  Interrupt Vectors
                             6239 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             6240 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             6241 ; 1227 |#define VECTOR(address,isr) \ 
                             6242 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             6243 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             6244 ; 1230 |
                             6245 ; 1231 |
                             6246 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             6247 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             6248 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             6249 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             6250 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             6251 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             6252 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             6253 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             6254 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             6255 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             6256 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             6257 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             6258 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             6259 ; 1245 |
                             6260 ; 1246 |// Interrupt Disabled
                             6261 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             6262 ; 1248 |// Interrupt Priority Level 0
                             6263 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             6264 ; 1250 |// Interrupt Priority Level 1
                             6265 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             6266 ; 1252 |// Interrupt Priority Level 2
                             6267 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             6268 ; 1254 |
                             6269 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             6270 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             6271 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             6272 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                             6273 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             6274 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             6275 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             6276 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             6277 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             6278 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             6279 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             6280 ; 1266 |
                             6281 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             6282 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             6283 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             6284 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             6285 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             6286 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             6287 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             6288 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             6289 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             6290 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             6291 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             6292 ; 1278 |
                             6293 ; 1279 |// Interrupt Priority register
                             6294 ; 1280 |typedef union               
                             6295 ; 1281 |{
                             6296 ; 1282 |    struct {
                             6297 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             6298 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             6299 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             6300 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             6301 ; 1287 |        int                 :4; /* Reserved */
                             6302 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             6303 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             6304 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             6305 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             6306 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             6307 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             6308 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             6309 ; 1295 |    } B;
                             6310 ; 1296 |
                             6311 ; 1297 |    int I;
                             6312 ; 1298 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6313 ; 1299 |} ipr_type;
                             6314 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             6315 ; 1301 |
                             6316 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             6317 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             6318 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             6319 ; 1305 |
                             6320 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             6321 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             6322 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             6323 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             6324 ; 1310 |
                             6325 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             6326 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             6327 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             6328 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             6329 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             6330 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             6331 ; 1317 |
                             6332 ; 1318 |#endif
                             6333 ; 1319 |
                             6334 
                             6336 
                             6337 ; 26   |#include "regslradc.h"
                             6338 
                             6340 
                             6341 ; 1    |#if !(defined(regslradcinc))
                             6342 ; 2    |
                             6343 ; 3    |#define regslradcinc 1
                             6344 ; 4    |
                             6345 ; 5    |#include "types.h"
                             6346 
                             6348 
                             6349 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6350 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6351 ; 3    |//
                             6352 ; 4    |// Filename: types.h
                             6353 ; 5    |// Description: Standard data types
                             6354 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6355 ; 7    |
                             6356 ; 8    |#ifndef _TYPES_H
                             6357 ; 9    |#define _TYPES_H
                             6358 ; 10   |
                             6359 ; 11   |// TODO:  move this outta here!
                             6360 ; 12   |#if !defined(NOERROR)
                             6361 ; 13   |#define NOERROR 0
                             6362 ; 14   |#define SUCCESS 0
                             6363 ; 15   |#endif 
                             6364 ; 16   |#if !defined(SUCCESS)
                             6365 ; 17   |#define SUCCESS  0
                             6366 ; 18   |#endif
                             6367 ; 19   |#if !defined(ERROR)
                             6368 ; 20   |#define ERROR   -1
                             6369 ; 21   |#endif
                             6370 ; 22   |#if !defined(FALSE)
                             6371 ; 23   |#define FALSE 0
                             6372 ; 24   |#endif
                             6373 ; 25   |#if !defined(TRUE)
                             6374 ; 26   |#define TRUE  1
                             6375 ; 27   |#endif
                             6376 ; 28   |
                             6377 ; 29   |#if !defined(NULL)
                             6378 ; 30   |#define NULL 0
                             6379 ; 31   |#endif
                             6380 ; 32   |
                             6381 ; 33   |#define MAX_INT     0x7FFFFF
                             6382 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6383 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6384 ; 36   |#define MAX_ULONG   (-1) 
                             6385 ; 37   |
                             6386 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6387 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6388 ; 40   |
                             6389 ; 41   |
                             6390 ; 42   |#define BYTE    unsigned char       // btVarName
                             6391 ; 43   |#define CHAR    signed char         // cVarName
                             6392 ; 44   |#define USHORT  unsigned short      // usVarName
                             6393 ; 45   |#define SHORT   unsigned short      // sVarName
                             6394 ; 46   |#define WORD    unsigned int        // wVarName
                             6395 ; 47   |#define INT     signed int          // iVarName
                             6396 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6397 ; 49   |#define LONG    signed long         // lVarName
                             6398 ; 50   |#define BOOL    unsigned int        // bVarName
                             6399 ; 51   |#define FRACT   _fract              // frVarName
                             6400 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6401 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6402 ; 54   |#define FLOAT   float               // fVarName
                             6403 ; 55   |#define DBL     double              // dVarName
                             6404 ; 56   |#define ENUM    enum                // eVarName
                             6405 ; 57   |#define CMX     _complex            // cmxVarName
                             6406 ; 58   |typedef WORD UCS3;                   // 
                             6407 ; 59   |
                             6408 ; 60   |#define UINT16  unsigned short
                             6409 ; 61   |#define UINT8   unsigned char   
                             6410 ; 62   |#define UINT32  unsigned long
                             6411 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6412 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6413 ; 65   |#define WCHAR   UINT16
                             6414 ; 66   |
                             6415 ; 67   |//UINT128 is 16 bytes or 6 words
                             6416 ; 68   |typedef struct UINT128_3500 {   
                             6417 ; 69   |    int val[6];     
                             6418 ; 70   |} UINT128_3500;
                             6419 ; 71   |
                             6420 ; 72   |#define UINT128   UINT128_3500
                             6421 ; 73   |
                             6422 ; 74   |// Little endian word packed byte strings:   
                             6423 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6424 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6425 ; 77   |// Little endian word packed byte strings:   
                             6426 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6427 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6428 ; 80   |
                             6429 ; 81   |// Declare Memory Spaces To Use When Coding
                             6430 ; 82   |// A. Sector Buffers
                             6431 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6432 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6433 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6434 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6435 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6436 ; 88   |// B. Media DDI Memory
                             6437 ; 89   |#define MEDIA_DDI_MEM _Y
                             6438 ; 90   |
                             6439 ; 91   |
                             6440 ; 92   |
                             6441 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6442 ; 94   |// Examples of circular pointers:
                             6443 ; 95   |//    INT CIRC cpiVarName
                             6444 ; 96   |//    DWORD CIRC cpdwVarName
                             6445 ; 97   |
                             6446 ; 98   |#define RETCODE INT                 // rcVarName
                             6447 ; 99   |
                             6448 ; 100  |// generic bitfield structure
                             6449 ; 101  |struct Bitfield {
                             6450 ; 102  |    unsigned int B0  :1;
                             6451 ; 103  |    unsigned int B1  :1;
                             6452 ; 104  |    unsigned int B2  :1;
                             6453 ; 105  |    unsigned int B3  :1;
                             6454 ; 106  |    unsigned int B4  :1;
                             6455 ; 107  |    unsigned int B5  :1;
                             6456 ; 108  |    unsigned int B6  :1;
                             6457 ; 109  |    unsigned int B7  :1;
                             6458 ; 110  |    unsigned int B8  :1;
                             6459 ; 111  |    unsigned int B9  :1;
                             6460 ; 112  |    unsigned int B10 :1;
                             6461 ; 113  |    unsigned int B11 :1;
                             6462 ; 114  |    unsigned int B12 :1;
                             6463 ; 115  |    unsigned int B13 :1;
                             6464 ; 116  |    unsigned int B14 :1;
                             6465 ; 117  |    unsigned int B15 :1;
                             6466 ; 118  |    unsigned int B16 :1;
                             6467 ; 119  |    unsigned int B17 :1;
                             6468 ; 120  |    unsigned int B18 :1;
                             6469 ; 121  |    unsigned int B19 :1;
                             6470 ; 122  |    unsigned int B20 :1;
                             6471 ; 123  |    unsigned int B21 :1;
                             6472 ; 124  |    unsigned int B22 :1;
                             6473 ; 125  |    unsigned int B23 :1;
                             6474 ; 126  |};
                             6475 ; 127  |
                             6476 ; 128  |union BitInt {
                             6477 ; 129  |        struct Bitfield B;
                             6478 ; 130  |        int        I;
                             6479 ; 131  |};
                             6480 ; 132  |
                             6481 ; 133  |#define MAX_MSG_LENGTH 10
                             6482 ; 134  |struct CMessage
                             6483 ; 135  |{
                             6484 ; 136  |        unsigned int m_uLength;
                             6485 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6486 ; 138  |};
                             6487 ; 139  |
                             6488 ; 140  |typedef struct {
                             6489 ; 141  |    WORD m_wLength;
                             6490 ; 142  |    WORD m_wMessage;
                             6491 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6492 ; 144  |} Message;
                             6493 ; 145  |
                             6494 ; 146  |struct MessageQueueDescriptor
                             6495 ; 147  |{
                             6496 ; 148  |        int *m_pBase;
                             6497 ; 149  |        int m_iModulo;
                             6498 ; 150  |        int m_iSize;
                             6499 ; 151  |        int *m_pHead;
                             6500 ; 152  |        int *m_pTail;
                             6501 ; 153  |};
                             6502 ; 154  |
                             6503 ; 155  |struct ModuleEntry
                             6504 ; 156  |{
                             6505 ; 157  |    int m_iSignaledEventMask;
                             6506 ; 158  |    int m_iWaitEventMask;
                             6507 ; 159  |    int m_iResourceOfCode;
                             6508 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6509 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             6510 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6511 ; 163  |    int m_uTimeOutHigh;
                             6512 ; 164  |    int m_uTimeOutLow;
                             6513 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6514 ; 166  |};
                             6515 ; 167  |
                             6516 ; 168  |union WaitMask{
                             6517 ; 169  |    struct B{
                             6518 ; 170  |        unsigned int m_bNone     :1;
                             6519 ; 171  |        unsigned int m_bMessage  :1;
                             6520 ; 172  |        unsigned int m_bTimer    :1;
                             6521 ; 173  |        unsigned int m_bButton   :1;
                             6522 ; 174  |    } B;
                             6523 ; 175  |    int I;
                             6524 ; 176  |} ;
                             6525 ; 177  |
                             6526 ; 178  |
                             6527 ; 179  |struct Button {
                             6528 ; 180  |        WORD wButtonEvent;
                             6529 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6530 ; 182  |};
                             6531 ; 183  |
                             6532 ; 184  |struct Message {
                             6533 ; 185  |        WORD wMsgLength;
                             6534 ; 186  |        WORD wMsgCommand;
                             6535 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6536 ; 188  |};
                             6537 ; 189  |
                             6538 ; 190  |union EventTypes {
                             6539 ; 191  |        struct CMessage msg;
                             6540 ; 192  |        struct Button Button ;
                             6541 ; 193  |        struct Message Message;
                             6542 ; 194  |};
                             6543 ; 195  |
                             6544 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6545 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6546 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6547 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6548 ; 200  |
                             6549 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6550 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6551 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6552 ; 204  |
                             6553 ; 205  |#if DEBUG
                             6554 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6555 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             6556 ; 208  |#else 
                             6557 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             6558 ; 210  |#define DebugBuildAssert(x)    
                             6559 ; 211  |#endif
                             6560 ; 212  |
                             6561 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6562 ; 214  |//  #pragma asm
                             6563 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6564 ; 216  |//  #pragma endasm
                             6565 ; 217  |
                             6566 ; 218  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6567 ; 219  |#ifdef COLOR_262K
                             6568 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             6569 ; 221  |#elif defined(COLOR_65K)
                             6570 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             6571 ; 223  |#else
                             6572 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             6573 ; 225  |#endif
                             6574 ; 226  |    
                             6575 ; 227  |#endif // #ifndef _TYPES_H
                             6576 
                             6578 
                             6579 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6580 ; 7    |
                             6581 ; 8    |//   SYSTEM STMP Registers 
                             6582 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             6583 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6584 ; 11   |
                             6585 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             6586 ; 13   |
                             6587 ; 14   |
                             6588 ; 15   |
                             6589 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             6590 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             6591 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             6592 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             6593 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6594 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             6595 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             6596 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             6597 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             6598 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             6599 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             6600 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             6601 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             6602 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             6603 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             6604 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             6605 ; 32   |
                             6606 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             6607 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6608 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             6609 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             6610 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             6611 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             6612 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             6613 ; 40   |
                             6614 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BATT_CTRL_INPUT_OFFSET_BITPOS)        
                             6615 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BATT_CTRL_HALF_CMP_PWR_BITPOS)        
                             6616 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_CTRL_INPUT_DIV2_BITPOS) 
                             6617 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_BITPOS) 
                             6618 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS) 
                             6619 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CLK_DIV_BITPOS)        
                             6620 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_REF_VAL_BITPOS)        
                             6621 ; 48   |
                             6622 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             6623 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             6624 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             6625 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             6626 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             6627 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             6628 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             6629 ; 56   |
                             6630 ; 57   |typedef union               
                             6631 ; 58   |{
                             6632 ; 59   |    struct {
                             6633 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             6634 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             6635 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             6636 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             6637 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             6638 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             6639 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             6640 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             6641 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             6642 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             6643 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH;
                             6644 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH;
                             6645 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDTH;
                             6646 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_WIDTH;
                             6647 ; 74   |    } B;
                             6648 ; 75   |   unsigned int I;
                             6649 ; 76   |        unsigned int U;
                             6650 ; 77   |} lradc_ctrl_type;
                             6651 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Battery LRADC Control Register */
                             6652 ; 79   |
                             6653 ; 80   |
                             6654 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             6655 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             6656 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             6657 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             6658 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             6659 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             6660 ; 87   |
                             6661 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             6662 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             6663 ; 90   |
                             6664 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             6665 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             6666 ; 93   |
                             6667 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK)     
                             6668 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK)     
                             6669 ; 96   |
                             6670 ; 97   |
                             6671 ; 98   |typedef union               
                             6672 ; 99   |{
                             6673 ; 100  |    struct {
                             6674 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             6675 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             6676 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             6677 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             6678 ; 105  |    } B;
                             6679 ; 106  |    unsigned int I;
                             6680 ; 107  |} lradc_thrsh_type;
                             6681 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* Battery LRADC Threshold Register */
                             6682 ; 109  |
                             6683 ; 110  |
                             6684 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             6685 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             6686 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             6687 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             6688 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             6689 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             6690 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             6691 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             6692 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             6693 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             6694 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             6695 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             6696 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             6697 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             6698 ; 125  |
                             6699 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             6700 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             6701 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             6702 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             6703 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             6704 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             6705 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             6706 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             6707 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             6708 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             6709 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             6710 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             6711 ; 138  |
                             6712 ; 139  |
                             6713 ; 140  |
                             6714 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT1_BITPOS)
                             6715 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT0_BITPOS)
                             6716 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT1_BITPOS)
                             6717 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT0_BITPOS)
                             6718 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT1_BITPOS)
                             6719 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT0_BITPOS)
                             6720 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_RSVD0_BITPOS)
                             6721 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_RESULT_DATA_OUT_BITPOS)
                             6722 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_RSVD1_BITPOS)
                             6723 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT0_BITPOS)
                             6724 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT1_BITPOS)
                             6725 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_RSVD2_BITPOS)
                             6726 ; 153  |
                             6727 ; 154  |
                             6728 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             6729 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             6730 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             6731 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             6732 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             6733 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             6734 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             6735 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             6736 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             6737 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             6738 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             6739 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             6740 ; 167  |
                             6741 ; 168  |typedef union               
                             6742 ; 169  |{
                             6743 ; 170  |    struct {
                             6744 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             6745 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             6746 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             6747 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             6748 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             6749 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             6750 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             6751 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             6752 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             6753 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_IRQ_EVENT0_WIDTH;
                             6754 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_IRQ_EVENT1_WIDTH;                      
                             6755 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESULT_RSVD2_WIDTH;
                             6756 ; 183  |    } B;
                             6757 ; 184  |    unsigned int I;
                             6758 ; 185  |} lradc_result_type;
                             6759 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /* Battery LRADC Result Register */
                             6760 ; 187  |
                             6761 ; 188  |
                             6762 ; 189  |
                             6763 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             6764 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             6765 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             6766 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             6767 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6768 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             6769 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             6770 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             6771 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             6772 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             6773 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             6774 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             6775 ; 202  |
                             6776 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             6777 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6778 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             6779 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             6780 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             6781 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             6782 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             6783 ; 210  |
                             6784 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             6785 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             6786 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_DIV2_BITPOS) 
                             6787 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_CLEAR_BITPOS) 
                             6788 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_BITPOS) 
                             6789 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_CTRL_CLK_DIV_BITPOS)        
                             6790 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_CTRL_REF_VAL_BITPOS)        
                             6791 ; 218  |
                             6792 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)     
                             6793 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)     
                             6794 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             6795 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             6796 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             6797 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             6798 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             6799 ; 226  |
                             6800 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* LRADC1 Control Register */
                             6801 ; 228  |
                             6802 ; 229  |
                             6803 ; 230  |
                             6804 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             6805 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             6806 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             6807 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             6808 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             6809 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             6810 ; 237  |
                             6811 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             6812 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             6813 ; 240  |
                             6814 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             6815 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             6816 ; 243  |
                             6817 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK)     
                             6818 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK)     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6819 ; 246  |
                             6820 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /* LRADC1 Threshold Register */
                             6821 ; 248  |
                             6822 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             6823 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             6824 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             6825 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             6826 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             6827 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             6828 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             6829 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             6830 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             6831 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             6832 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             6833 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             6834 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             6835 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             6836 ; 263  |
                             6837 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             6838 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             6839 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             6840 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             6841 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             6842 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             6843 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             6844 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             6845 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             6846 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             6847 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             6848 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             6849 ; 276  |
                             6850 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             6851 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             6852 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT1_BITPOS)
                             6853 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT0_BITPOS)
                             6854 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT1_BITPOS)
                             6855 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT0_BITPOS)
                             6856 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD0_BITPOS)
                             6857 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC1_RESULT_DATA_OUT_BITPOS)
                             6858 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD1_BITPOS)
                             6859 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             6860 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             6861 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD2_BITPOS)
                             6862 ; 289  |
                             6863 ; 290  |
                             6864 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             6865 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             6866 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             6867 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             6868 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             6869 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             6870 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             6871 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             6872 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             6873 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             6874 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             6875 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             6876 ; 303  |
                             6877 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))    /* LRADC1 Result Register */
                             6878 ; 305  |
                             6879 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             6880 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             6881 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             6882 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             6883 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6884 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             6885 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             6886 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             6887 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             6888 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             6889 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             6890 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             6891 ; 318  |
                             6892 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             6893 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6894 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             6895 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             6896 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             6897 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             6898 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             6899 ; 326  |
                             6900 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             6901 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             6902 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             6903 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             6904 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_PWD_BITPOS) 
                             6905 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             6906 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             6907 ; 334  |
                             6908 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK)     
                             6909 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK)     
                             6910 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK) 
                             6911 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             6912 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             6913 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)     
                             6914 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)     
                             6915 ; 342  |
                             6916 ; 343  |
                             6917 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* LRADC2_CTRL Control Register */
                             6918 ; 345  |
                             6919 ; 346  |
                             6920 ; 347  |
                             6921 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             6922 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             6923 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             6924 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             6925 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             6926 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             6927 ; 354  |
                             6928 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             6929 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             6930 ; 357  |
                             6931 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             6932 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             6933 ; 360  |
                             6934 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK)     
                             6935 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK)     
                             6936 ; 363  |
                             6937 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /* LRADC2 Threshold Register */
                             6938 ; 365  |
                             6939 ; 366  |
                             6940 ; 367  |
                             6941 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             6942 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             6943 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             6944 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             6945 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             6946 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             6947 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             6948 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             6949 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             6950 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             6951 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             6952 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             6953 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             6954 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             6955 ; 382  |
                             6956 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             6957 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             6958 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             6959 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             6960 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             6961 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             6962 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             6963 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             6964 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             6965 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             6966 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             6967 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             6968 ; 395  |
                             6969 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             6970 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             6971 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT1_BITPOS)
                             6972 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT0_BITPOS)
                             6973 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT1_BITPOS)
                             6974 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT0_BITPOS)
                             6975 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD0_BITPOS)
                             6976 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC2_RESULT_DATA_OUT_BITPOS)
                             6977 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD1_BITPOS)
                             6978 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             6979 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             6980 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD2_BITPOS)
                             6981 ; 408  |
                             6982 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             6983 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             6984 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             6985 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             6986 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             6987 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             6988 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             6989 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             6990 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             6991 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             6992 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             6993 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             6994 ; 421  |
                             6995 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))    /* LRADC2 Result Register */
                             6996 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             6997 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             6998 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             6999 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7000 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7001 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7002 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7003 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7004 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             7005 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             7006 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             7007 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             7008 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             7009 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             7010 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             7011 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             7012 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK          
                             7013 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementation
                             7014 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             7015 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             7016 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             7017 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             7018 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             7019 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             7020 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             7021 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             7022 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             7023 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             7024 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             7025 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             7026 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             7027 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             7028 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             7029 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             7030 ; 457  |
                             7031 ; 458  |//Needed by button.asm
                             7032 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             7033 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             7034 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             7035 ; 462  |
                             7036 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7037 ; 464  |
                             7038 ; 465  |#endif
                             7039 ; 466  |
                             7040 ; 467  |
                             7041 
                             7043 
                             7044 ; 27   |#include "regspwm.h"
                             7045 
                             7047 
                             7048 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7049 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             7050 ; 3    |// Filename: regspwm.inc
                             7051 ; 4    |// Description: Register definitions for PWM interface
                             7052 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7053 ; 6    |// The following naming conventions are followed in this file.
                             7054 ; 7    |// All registers are named using the format...
                             7055 ; 8    |//     HW_<module>_<regname>
                             7056 ; 9    |// where <module> is the module name which can be any of the following...
                             7057 ; 10   |//     USB20
                             7058 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7059 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7060 ; 13   |// that module)
                             7061 ; 14   |// <regname> is the specific register within that module
                             7062 ; 15   |// We also define the following...
                             7063 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7064 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7065 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7066 ; 19   |// which does something else, and
                             7067 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7068 ; 21   |// which does something else.
                             7069 ; 22   |// Other rules
                             7070 ; 23   |//     All caps
                             7071 ; 24   |//     Numeric identifiers start at 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7072 ; 25   |#if !(defined(regspwminc))
                             7073 ; 26   |#define regspwminc 1
                             7074 ; 27   |
                             7075 ; 28   |#include "types.h"
                             7076 
                             7078 
                             7079 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7080 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7081 ; 3    |//
                             7082 ; 4    |// Filename: types.h
                             7083 ; 5    |// Description: Standard data types
                             7084 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7085 ; 7    |
                             7086 ; 8    |#ifndef _TYPES_H
                             7087 ; 9    |#define _TYPES_H
                             7088 ; 10   |
                             7089 ; 11   |// TODO:  move this outta here!
                             7090 ; 12   |#if !defined(NOERROR)
                             7091 ; 13   |#define NOERROR 0
                             7092 ; 14   |#define SUCCESS 0
                             7093 ; 15   |#endif 
                             7094 ; 16   |#if !defined(SUCCESS)
                             7095 ; 17   |#define SUCCESS  0
                             7096 ; 18   |#endif
                             7097 ; 19   |#if !defined(ERROR)
                             7098 ; 20   |#define ERROR   -1
                             7099 ; 21   |#endif
                             7100 ; 22   |#if !defined(FALSE)
                             7101 ; 23   |#define FALSE 0
                             7102 ; 24   |#endif
                             7103 ; 25   |#if !defined(TRUE)
                             7104 ; 26   |#define TRUE  1
                             7105 ; 27   |#endif
                             7106 ; 28   |
                             7107 ; 29   |#if !defined(NULL)
                             7108 ; 30   |#define NULL 0
                             7109 ; 31   |#endif
                             7110 ; 32   |
                             7111 ; 33   |#define MAX_INT     0x7FFFFF
                             7112 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7113 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7114 ; 36   |#define MAX_ULONG   (-1) 
                             7115 ; 37   |
                             7116 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7117 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7118 ; 40   |
                             7119 ; 41   |
                             7120 ; 42   |#define BYTE    unsigned char       // btVarName
                             7121 ; 43   |#define CHAR    signed char         // cVarName
                             7122 ; 44   |#define USHORT  unsigned short      // usVarName
                             7123 ; 45   |#define SHORT   unsigned short      // sVarName
                             7124 ; 46   |#define WORD    unsigned int        // wVarName
                             7125 ; 47   |#define INT     signed int          // iVarName
                             7126 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7127 ; 49   |#define LONG    signed long         // lVarName
                             7128 ; 50   |#define BOOL    unsigned int        // bVarName
                             7129 ; 51   |#define FRACT   _fract              // frVarName
                             7130 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7131 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7132 ; 54   |#define FLOAT   float               // fVarName
                             7133 ; 55   |#define DBL     double              // dVarName
                             7134 ; 56   |#define ENUM    enum                // eVarName
                             7135 ; 57   |#define CMX     _complex            // cmxVarName
                             7136 ; 58   |typedef WORD UCS3;                   // 
                             7137 ; 59   |
                             7138 ; 60   |#define UINT16  unsigned short
                             7139 ; 61   |#define UINT8   unsigned char   
                             7140 ; 62   |#define UINT32  unsigned long
                             7141 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7142 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7143 ; 65   |#define WCHAR   UINT16
                             7144 ; 66   |
                             7145 ; 67   |//UINT128 is 16 bytes or 6 words
                             7146 ; 68   |typedef struct UINT128_3500 {   
                             7147 ; 69   |    int val[6];     
                             7148 ; 70   |} UINT128_3500;
                             7149 ; 71   |
                             7150 ; 72   |#define UINT128   UINT128_3500
                             7151 ; 73   |
                             7152 ; 74   |// Little endian word packed byte strings:   
                             7153 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7154 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7155 ; 77   |// Little endian word packed byte strings:   
                             7156 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7157 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7158 ; 80   |
                             7159 ; 81   |// Declare Memory Spaces To Use When Coding
                             7160 ; 82   |// A. Sector Buffers
                             7161 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7162 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7163 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7164 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7165 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7166 ; 88   |// B. Media DDI Memory
                             7167 ; 89   |#define MEDIA_DDI_MEM _Y
                             7168 ; 90   |
                             7169 ; 91   |
                             7170 ; 92   |
                             7171 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7172 ; 94   |// Examples of circular pointers:
                             7173 ; 95   |//    INT CIRC cpiVarName
                             7174 ; 96   |//    DWORD CIRC cpdwVarName
                             7175 ; 97   |
                             7176 ; 98   |#define RETCODE INT                 // rcVarName
                             7177 ; 99   |
                             7178 ; 100  |// generic bitfield structure
                             7179 ; 101  |struct Bitfield {
                             7180 ; 102  |    unsigned int B0  :1;
                             7181 ; 103  |    unsigned int B1  :1;
                             7182 ; 104  |    unsigned int B2  :1;
                             7183 ; 105  |    unsigned int B3  :1;
                             7184 ; 106  |    unsigned int B4  :1;
                             7185 ; 107  |    unsigned int B5  :1;
                             7186 ; 108  |    unsigned int B6  :1;
                             7187 ; 109  |    unsigned int B7  :1;
                             7188 ; 110  |    unsigned int B8  :1;
                             7189 ; 111  |    unsigned int B9  :1;
                             7190 ; 112  |    unsigned int B10 :1;
                             7191 ; 113  |    unsigned int B11 :1;
                             7192 ; 114  |    unsigned int B12 :1;
                             7193 ; 115  |    unsigned int B13 :1;
                             7194 ; 116  |    unsigned int B14 :1;
                             7195 ; 117  |    unsigned int B15 :1;
                             7196 ; 118  |    unsigned int B16 :1;
                             7197 ; 119  |    unsigned int B17 :1;
                             7198 ; 120  |    unsigned int B18 :1;
                             7199 ; 121  |    unsigned int B19 :1;
                             7200 ; 122  |    unsigned int B20 :1;
                             7201 ; 123  |    unsigned int B21 :1;
                             7202 ; 124  |    unsigned int B22 :1;
                             7203 ; 125  |    unsigned int B23 :1;
                             7204 ; 126  |};
                             7205 ; 127  |
                             7206 ; 128  |union BitInt {
                             7207 ; 129  |        struct Bitfield B;
                             7208 ; 130  |        int        I;
                             7209 ; 131  |};
                             7210 ; 132  |
                             7211 ; 133  |#define MAX_MSG_LENGTH 10
                             7212 ; 134  |struct CMessage
                             7213 ; 135  |{
                             7214 ; 136  |        unsigned int m_uLength;
                             7215 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7216 ; 138  |};
                             7217 ; 139  |
                             7218 ; 140  |typedef struct {
                             7219 ; 141  |    WORD m_wLength;
                             7220 ; 142  |    WORD m_wMessage;
                             7221 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7222 ; 144  |} Message;
                             7223 ; 145  |
                             7224 ; 146  |struct MessageQueueDescriptor
                             7225 ; 147  |{
                             7226 ; 148  |        int *m_pBase;
                             7227 ; 149  |        int m_iModulo;
                             7228 ; 150  |        int m_iSize;
                             7229 ; 151  |        int *m_pHead;
                             7230 ; 152  |        int *m_pTail;
                             7231 ; 153  |};
                             7232 ; 154  |
                             7233 ; 155  |struct ModuleEntry
                             7234 ; 156  |{
                             7235 ; 157  |    int m_iSignaledEventMask;
                             7236 ; 158  |    int m_iWaitEventMask;
                             7237 ; 159  |    int m_iResourceOfCode;
                             7238 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7239 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             7240 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7241 ; 163  |    int m_uTimeOutHigh;
                             7242 ; 164  |    int m_uTimeOutLow;
                             7243 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7244 ; 166  |};
                             7245 ; 167  |
                             7246 ; 168  |union WaitMask{
                             7247 ; 169  |    struct B{
                             7248 ; 170  |        unsigned int m_bNone     :1;
                             7249 ; 171  |        unsigned int m_bMessage  :1;
                             7250 ; 172  |        unsigned int m_bTimer    :1;
                             7251 ; 173  |        unsigned int m_bButton   :1;
                             7252 ; 174  |    } B;
                             7253 ; 175  |    int I;
                             7254 ; 176  |} ;
                             7255 ; 177  |
                             7256 ; 178  |
                             7257 ; 179  |struct Button {
                             7258 ; 180  |        WORD wButtonEvent;
                             7259 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7260 ; 182  |};
                             7261 ; 183  |
                             7262 ; 184  |struct Message {
                             7263 ; 185  |        WORD wMsgLength;
                             7264 ; 186  |        WORD wMsgCommand;
                             7265 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7266 ; 188  |};
                             7267 ; 189  |
                             7268 ; 190  |union EventTypes {
                             7269 ; 191  |        struct CMessage msg;
                             7270 ; 192  |        struct Button Button ;
                             7271 ; 193  |        struct Message Message;
                             7272 ; 194  |};
                             7273 ; 195  |
                             7274 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7275 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7276 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7277 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7278 ; 200  |
                             7279 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7280 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7281 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7282 ; 204  |
                             7283 ; 205  |#if DEBUG
                             7284 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7285 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7286 ; 208  |#else 
                             7287 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             7288 ; 210  |#define DebugBuildAssert(x)    
                             7289 ; 211  |#endif
                             7290 ; 212  |
                             7291 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7292 ; 214  |//  #pragma asm
                             7293 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7294 ; 216  |//  #pragma endasm
                             7295 ; 217  |
                             7296 ; 218  |
                             7297 ; 219  |#ifdef COLOR_262K
                             7298 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             7299 ; 221  |#elif defined(COLOR_65K)
                             7300 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             7301 ; 223  |#else
                             7302 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             7303 ; 225  |#endif
                             7304 ; 226  |    
                             7305 ; 227  |#endif // #ifndef _TYPES_H
                             7306 
                             7308 
                             7309 ; 29   |
                             7310 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7311 ; 31   |//   Pulse Width Modulator STMP Registers 
                             7312 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7313 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                             7314 ; 34   |
                             7315 ; 35   |
                             7316 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             7317 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                             7318 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                             7319 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                             7320 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                             7321 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                             7322 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                             7323 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                             7324 ; 44   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7325 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                             7326 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                             7327 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                             7328 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                             7329 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                             7330 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
                             7331 ; 51   |
                             7332 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_BITPOS)
                             7333 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_BITPOS)
                             7334 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_BITPOS)
                             7335 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_BITPOS)
                             7336 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                             7337 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_BITPOS)
                             7338 ; 58   |
                             7339 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                             7340 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                             7341 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                             7342 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                             7343 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                             7344 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                             7345 ; 65   |
                             7346 ; 66   |typedef union               
                             7347 ; 67   |{
                             7348 ; 68   |    struct {
                             7349 ; 69   |        int PWM0_EN                    :1;
                             7350 ; 70   |        int PWM1_EN                    :1;
                             7351 ; 71   |        int PWM2_EN                    :1;
                             7352 ; 72   |        int PWM3_EN                    :1;
                             7353 ; 73   |        int RSVD0                      :4;
                             7354 ; 74   |        int CDIV                       :2;
                             7355 ; 75   |        int RSVD1                      :13;
                             7356 ; 76   |        int MSTR_EN                    :1;
                             7357 ; 77   |    } B;
                             7358 ; 78   |    int I;
                             7359 ; 79   |} pwmcsr_type;
                             7360 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control Status Register */
                             7361 ; 81   |
                             7362 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                             7363 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                             7364 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                             7365 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                             7366 ; 86   |
                             7367 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                             7368 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                             7369 ; 89   |
                             7370 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTIVE_BITPOS)
                             7371 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_INACTIVE_BITPOS)
                             7372 ; 92   |
                             7373 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                             7374 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                             7375 ; 95   |
                             7376 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                             7377 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                             7378 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                             7379 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                             7380 ; 100  |
                             7381 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                             7382 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                             7383 ; 103  |
                             7384 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTIVE_BITPOS)
                             7385 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_INACTIVE_BITPOS)
                             7386 ; 106  |
                             7387 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
                             7388 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                             7389 ; 109  |
                             7390 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                             7391 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                             7392 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                             7393 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                             7394 ; 114  |
                             7395 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                             7396 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                             7397 ; 117  |
                             7398 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTIVE_BITPOS)
                             7399 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_INACTIVE_BITPOS)
                             7400 ; 120  |
                             7401 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                             7402 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                             7403 ; 123  |
                             7404 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             7405 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                             7406 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                             7407 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                             7408 ; 128  |
                             7409 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                             7410 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                             7411 ; 131  |
                             7412 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTIVE_BITPOS)
                             7413 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_INACTIVE_BITPOS)
                             7414 ; 134  |
                             7415 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                             7416 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                             7417 ; 137  |
                             7418 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             7419 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                             7420 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                             7421 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                             7422 ; 142  |
                             7423 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                             7424 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                             7425 ; 145  |
                             7426 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTIVE_BITPOS)
                             7427 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_INACTIVE_BITPOS)
                             7428 ; 148  |
                             7429 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                             7430 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                             7431 ; 151  |
                             7432 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             7433 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                             7434 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                             7435 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                             7436 ; 156  |
                             7437 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                             7438 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                             7439 ; 159  |
                             7440 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTIVE_BITPOS)
                             7441 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_INACTIVE_BITPOS)
                             7442 ; 162  |
                             7443 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                             7444 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                             7445 ; 165  |
                             7446 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             7447 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                             7448 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
                             7449 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                             7450 ; 170  |
                             7451 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                             7452 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                             7453 ; 173  |
                             7454 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTIVE_BITPOS)
                             7455 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_INACTIVE_BITPOS)
                             7456 ; 176  |
                             7457 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                             7458 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                             7459 ; 179  |
                             7460 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             7461 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                             7462 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                             7463 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                             7464 ; 184  |
                             7465 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                             7466 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                             7467 ; 187  |
                             7468 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTIVE_BITPOS)
                             7469 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_INACTIVE_BITPOS)
                             7470 ; 190  |
                             7471 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                             7472 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                             7473 ; 193  |
                             7474 ; 194  |typedef union               
                             7475 ; 195  |{
                             7476 ; 196  |    struct {
                             7477 ; 197  |       int ACTIVE                    :12;
                             7478 ; 198  |       int INACTIVE                  :12;
                             7479 ; 199  |    } B;
                             7480 ; 200  |    int I;
                             7481 ; 201  |} pwmchan_type;
                             7482 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Channel 0 A Register */
                             7483 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Channel 0 B Register */
                             7484 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Channel 1 A Register */
                             7485 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Channel 1 B Register */
                             7486 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Channel 2 A Register */
                             7487 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Channel 2 B Register */
                             7488 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Channel 3 A Register */
                             7489 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Channel 3 B Register */
                             7490 ; 210  |
                             7491 ; 211  |#endif
                             7492 ; 212  |
                             7493 ; 213  |
                             7494 ; 214  |
                             7495 ; 215  |
                             7496 
                             7498 
                             7499 ; 28   |#include "regsrevision.h"
                             7500 
                             7502 
                             7503 ; 1    |#if !(defined(__HW_REVR))
                             7504 ; 2    |#define __HW_REVR 1
                             7505 ; 3    |
                             7506 ; 4    |
                             7507 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             7508 ; 6    |
                             7509 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             7510 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             7511 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             7512 ; 10   |
                             7513 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                             7514 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             7515 ; 13   |
                             7516 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS)
                             7517 ; 15   |
                             7518 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                             7519 ; 17   |
                             7520 ; 18   |
                             7521 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             7522 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             7523 ; 21   |//  June15 2004: C struct updated to be correct: 
                             7524 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits.
                             7525 ; 23   |typedef union               
                             7526 ; 24   |{
                             7527 ; 25   |    struct {
                             7528 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             7529 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapping
                             7530 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             7531 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             7532 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                             7533 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             7534 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                             7535 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             7536 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                             7537 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                             7538 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                             7539 ; 37   |        unsigned RMJ    :16;    //Major Revision
                             7540 ; 38   |    } B;
                             7541 ; 39   |
                             7542 ; 40   |    int I;
                             7543 ; 41   |
                             7544 ; 42   |} revr_type;
                             7545 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                             7546 ; 44   |
                             7547 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                             7548 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                             7549 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                             7550 ; 48   |
                             7551 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                             7552 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE_B0_BITPOS)
                             7553 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                             7554 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                             7555 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                             7556 ; 54   |
                             7557 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                             7558 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                             7559 ; 57   |
                             7560 ; 58   |#endif //!@def(__HW_REVR)
                             7561 ; 59   |
                             7562 
                             7564 
                             7565 ; 29   |#include "regsrtc.h"
                             7566 
                             7568 
                             7569 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7570 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7571 ; 3    |// Filename: regsrtc.inc
                             7572 ; 4    |// Description: Register definitions for RTC interface
                             7573 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7574 ; 6    |// The following naming conventions are followed in this file.
                             7575 ; 7    |// All registers are named using the format...
                             7576 ; 8    |//     HW_<module>_<regname>
                             7577 ; 9    |// where <module> is the module name which can be any of the following...
                             7578 ; 10   |//     USB20
                             7579 ; 11   |// (Note that when there is more than one copy of a particular module, the
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7580 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7581 ; 13   |// that module)
                             7582 ; 14   |// <regname> is the specific register within that module
                             7583 ; 15   |// We also define the following...
                             7584 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7585 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7586 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7587 ; 19   |// which does something else, and
                             7588 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7589 ; 21   |// which does something else.
                             7590 ; 22   |// Other rules
                             7591 ; 23   |//     All caps
                             7592 ; 24   |//     Numeric identifiers start at 0
                             7593 ; 25   |#if !(defined(regsrtcinc))
                             7594 ; 26   |#define regsrtcinc 1
                             7595 ; 27   |
                             7596 ; 28   |#include "types.h"
                             7597 
                             7599 
                             7600 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7601 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7602 ; 3    |//
                             7603 ; 4    |// Filename: types.h
                             7604 ; 5    |// Description: Standard data types
                             7605 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7606 ; 7    |
                             7607 ; 8    |#ifndef _TYPES_H
                             7608 ; 9    |#define _TYPES_H
                             7609 ; 10   |
                             7610 ; 11   |// TODO:  move this outta here!
                             7611 ; 12   |#if !defined(NOERROR)
                             7612 ; 13   |#define NOERROR 0
                             7613 ; 14   |#define SUCCESS 0
                             7614 ; 15   |#endif 
                             7615 ; 16   |#if !defined(SUCCESS)
                             7616 ; 17   |#define SUCCESS  0
                             7617 ; 18   |#endif
                             7618 ; 19   |#if !defined(ERROR)
                             7619 ; 20   |#define ERROR   -1
                             7620 ; 21   |#endif
                             7621 ; 22   |#if !defined(FALSE)
                             7622 ; 23   |#define FALSE 0
                             7623 ; 24   |#endif
                             7624 ; 25   |#if !defined(TRUE)
                             7625 ; 26   |#define TRUE  1
                             7626 ; 27   |#endif
                             7627 ; 28   |
                             7628 ; 29   |#if !defined(NULL)
                             7629 ; 30   |#define NULL 0
                             7630 ; 31   |#endif
                             7631 ; 32   |
                             7632 ; 33   |#define MAX_INT     0x7FFFFF
                             7633 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7634 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7635 ; 36   |#define MAX_ULONG   (-1) 
                             7636 ; 37   |
                             7637 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7638 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7639 ; 40   |
                             7640 ; 41   |
                             7641 ; 42   |#define BYTE    unsigned char       // btVarName
                             7642 ; 43   |#define CHAR    signed char         // cVarName
                             7643 ; 44   |#define USHORT  unsigned short      // usVarName
                             7644 ; 45   |#define SHORT   unsigned short      // sVarName
                             7645 ; 46   |#define WORD    unsigned int        // wVarName
                             7646 ; 47   |#define INT     signed int          // iVarName
                             7647 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7648 ; 49   |#define LONG    signed long         // lVarName
                             7649 ; 50   |#define BOOL    unsigned int        // bVarName
                             7650 ; 51   |#define FRACT   _fract              // frVarName
                             7651 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7652 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7653 ; 54   |#define FLOAT   float               // fVarName
                             7654 ; 55   |#define DBL     double              // dVarName
                             7655 ; 56   |#define ENUM    enum                // eVarName
                             7656 ; 57   |#define CMX     _complex            // cmxVarName
                             7657 ; 58   |typedef WORD UCS3;                   // 
                             7658 ; 59   |
                             7659 ; 60   |#define UINT16  unsigned short
                             7660 ; 61   |#define UINT8   unsigned char   
                             7661 ; 62   |#define UINT32  unsigned long
                             7662 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7663 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7664 ; 65   |#define WCHAR   UINT16
                             7665 ; 66   |
                             7666 ; 67   |//UINT128 is 16 bytes or 6 words
                             7667 ; 68   |typedef struct UINT128_3500 {   
                             7668 ; 69   |    int val[6];     
                             7669 ; 70   |} UINT128_3500;
                             7670 ; 71   |
                             7671 ; 72   |#define UINT128   UINT128_3500
                             7672 ; 73   |
                             7673 ; 74   |// Little endian word packed byte strings:   
                             7674 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7675 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7676 ; 77   |// Little endian word packed byte strings:   
                             7677 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7678 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7679 ; 80   |
                             7680 ; 81   |// Declare Memory Spaces To Use When Coding
                             7681 ; 82   |// A. Sector Buffers
                             7682 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7683 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7684 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7685 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7686 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7687 ; 88   |// B. Media DDI Memory
                             7688 ; 89   |#define MEDIA_DDI_MEM _Y
                             7689 ; 90   |
                             7690 ; 91   |
                             7691 ; 92   |
                             7692 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7693 ; 94   |// Examples of circular pointers:
                             7694 ; 95   |//    INT CIRC cpiVarName
                             7695 ; 96   |//    DWORD CIRC cpdwVarName
                             7696 ; 97   |
                             7697 ; 98   |#define RETCODE INT                 // rcVarName
                             7698 ; 99   |
                             7699 ; 100  |// generic bitfield structure
                             7700 ; 101  |struct Bitfield {
                             7701 ; 102  |    unsigned int B0  :1;
                             7702 ; 103  |    unsigned int B1  :1;
                             7703 ; 104  |    unsigned int B2  :1;
                             7704 ; 105  |    unsigned int B3  :1;
                             7705 ; 106  |    unsigned int B4  :1;
                             7706 ; 107  |    unsigned int B5  :1;
                             7707 ; 108  |    unsigned int B6  :1;
                             7708 ; 109  |    unsigned int B7  :1;
                             7709 ; 110  |    unsigned int B8  :1;
                             7710 ; 111  |    unsigned int B9  :1;
                             7711 ; 112  |    unsigned int B10 :1;
                             7712 ; 113  |    unsigned int B11 :1;
                             7713 ; 114  |    unsigned int B12 :1;
                             7714 ; 115  |    unsigned int B13 :1;
                             7715 ; 116  |    unsigned int B14 :1;
                             7716 ; 117  |    unsigned int B15 :1;
                             7717 ; 118  |    unsigned int B16 :1;
                             7718 ; 119  |    unsigned int B17 :1;
                             7719 ; 120  |    unsigned int B18 :1;
                             7720 ; 121  |    unsigned int B19 :1;
                             7721 ; 122  |    unsigned int B20 :1;
                             7722 ; 123  |    unsigned int B21 :1;
                             7723 ; 124  |    unsigned int B22 :1;
                             7724 ; 125  |    unsigned int B23 :1;
                             7725 ; 126  |};
                             7726 ; 127  |
                             7727 ; 128  |union BitInt {
                             7728 ; 129  |        struct Bitfield B;
                             7729 ; 130  |        int        I;
                             7730 ; 131  |};
                             7731 ; 132  |
                             7732 ; 133  |#define MAX_MSG_LENGTH 10
                             7733 ; 134  |struct CMessage
                             7734 ; 135  |{
                             7735 ; 136  |        unsigned int m_uLength;
                             7736 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7737 ; 138  |};
                             7738 ; 139  |
                             7739 ; 140  |typedef struct {
                             7740 ; 141  |    WORD m_wLength;
                             7741 ; 142  |    WORD m_wMessage;
                             7742 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7743 ; 144  |} Message;
                             7744 ; 145  |
                             7745 ; 146  |struct MessageQueueDescriptor
                             7746 ; 147  |{
                             7747 ; 148  |        int *m_pBase;
                             7748 ; 149  |        int m_iModulo;
                             7749 ; 150  |        int m_iSize;
                             7750 ; 151  |        int *m_pHead;
                             7751 ; 152  |        int *m_pTail;
                             7752 ; 153  |};
                             7753 ; 154  |
                             7754 ; 155  |struct ModuleEntry
                             7755 ; 156  |{
                             7756 ; 157  |    int m_iSignaledEventMask;
                             7757 ; 158  |    int m_iWaitEventMask;
                             7758 ; 159  |    int m_iResourceOfCode;
                             7759 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7760 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             7761 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7762 ; 163  |    int m_uTimeOutHigh;
                             7763 ; 164  |    int m_uTimeOutLow;
                             7764 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7765 ; 166  |};
                             7766 ; 167  |
                             7767 ; 168  |union WaitMask{
                             7768 ; 169  |    struct B{
                             7769 ; 170  |        unsigned int m_bNone     :1;
                             7770 ; 171  |        unsigned int m_bMessage  :1;
                             7771 ; 172  |        unsigned int m_bTimer    :1;
                             7772 ; 173  |        unsigned int m_bButton   :1;
                             7773 ; 174  |    } B;
                             7774 ; 175  |    int I;
                             7775 ; 176  |} ;
                             7776 ; 177  |
                             7777 ; 178  |
                             7778 ; 179  |struct Button {
                             7779 ; 180  |        WORD wButtonEvent;
                             7780 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7781 ; 182  |};
                             7782 ; 183  |
                             7783 ; 184  |struct Message {
                             7784 ; 185  |        WORD wMsgLength;
                             7785 ; 186  |        WORD wMsgCommand;
                             7786 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7787 ; 188  |};
                             7788 ; 189  |
                             7789 ; 190  |union EventTypes {
                             7790 ; 191  |        struct CMessage msg;
                             7791 ; 192  |        struct Button Button ;
                             7792 ; 193  |        struct Message Message;
                             7793 ; 194  |};
                             7794 ; 195  |
                             7795 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7796 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7797 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7798 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7799 ; 200  |
                             7800 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7801 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7802 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7803 ; 204  |
                             7804 ; 205  |#if DEBUG
                             7805 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7806 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7807 ; 208  |#else 
                             7808 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             7809 ; 210  |#define DebugBuildAssert(x)    
                             7810 ; 211  |#endif
                             7811 ; 212  |
                             7812 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7813 ; 214  |//  #pragma asm
                             7814 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7815 ; 216  |//  #pragma endasm
                             7816 ; 217  |
                             7817 ; 218  |
                             7818 ; 219  |#ifdef COLOR_262K
                             7819 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             7820 ; 221  |#elif defined(COLOR_65K)
                             7821 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             7822 ; 223  |#else
                             7823 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             7824 ; 225  |#endif
                             7825 ; 226  |    
                             7826 ; 227  |#endif // #ifndef _TYPES_H
                             7827 
                             7829 
                             7830 ; 29   |
                             7831 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7832 ; 31   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7833 ; 32   |//   RTC STMP Registers 
                             7834 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             7835 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7836 ; 35   |
                             7837 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             7838 ; 37   |
                             7839 ; 38   |
                             7840 ; 39   |
                             7841 ; 40   |
                             7842 ; 41   |
                             7843 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             7844 ; 43   |
                             7845 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             7846 ; 45   |
                             7847 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             7848 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             7849 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             7850 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             7851 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             7852 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             7853 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             7854 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             7855 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             7856 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             7857 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             7858 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             7859 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             7860 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             7861 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             7862 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                                           
                             7863 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             7864 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             7865 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             7866 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             7867 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             7868 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             7869 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             7870 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             7871 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             7872 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             7873 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             7874 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             7875 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             7876 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             7877 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             7878 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             7879 ; 78   |
                             7880 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMINT_BITPOS) 
                             7881 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_ALARMINTEN_BITPOS) 
                             7882 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WATCHDOGEN_BITPOS) 
                             7883 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS) 
                             7884 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STALEREGS_BITPOS) 
                             7885 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS) 
                             7886 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_BITPOS) 
                             7887 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             7888 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             7889 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             7890 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             7891 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             7892 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS) 
                             7893 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS) 
                             7894 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS) 
                             7895 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BITPOS) 
                             7896 ; 95   |
                             7897 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             7898 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             7899 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             7900 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             7901 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             7902 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             7903 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             7904 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             7905 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             7906 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                             7907 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             7908 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             7909 ; 108  |
                             7910 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             7911 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             7912 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             7913 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             7914 ; 113  |
                             7915 ; 114  |
                             7916 ; 115  |typedef union               
                             7917 ; 116  |{
                             7918 ; 117  |    struct {
                             7919 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             7920 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             7921 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             7922 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             7923 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             7924 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             7925 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             7926 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             7927 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             7928 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             7929 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             7930 ; 129  |    } B;
                             7931 ; 130  |    int I;
                             7932 ; 131  |    unsigned int U;
                             7933 ; 132  |} rtc_csr_type;
                             7934 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Control / Status Register */
                             7935 ; 134  |
                             7936 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             7937 ; 136  |
                             7938 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             7939 ; 138  |
                             7940 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             7941 ; 140  |
                             7942 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             7943 ; 142  |
                             7944 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<<HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             7945 ; 144  |
                             7946 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                             7947 ; 146  |
                             7948 ; 147  |typedef union               
                             7949 ; 148  |{
                             7950 ; 149  |    struct {
                             7951 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             7952 ; 151  |    } B;
                             7953 ; 152  |    int I;
                             7954 ; 153  |    unsigned int U;
                             7955 ; 154  |} rtc_mseconds0_type;
                             7956 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    /* RTC MSECONDS Lower Word Register */
                             7957 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             7958 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             7959 ; 158  |
                             7960 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             7961 ; 160  |
                             7962 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             7963 ; 162  |
                             7964 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             7965 ; 164  |
                             7966 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1)<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             7967 ; 166  |
                             7968 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK)
                             7969 ; 168  |
                             7970 ; 169  |typedef union               
                             7971 ; 170  |{
                             7972 ; 171  |    struct {
                             7973 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             7974 ; 173  |    } B;
                             7975 ; 174  |    int I;
                             7976 ; 175  |    unsigned int U;
                             7977 ; 176  |} rtc_mseconds1_type;
                             7978 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    /* RTC MSECONDS Upper Word Register */
                             7979 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             7980 ; 179  |
                             7981 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             7982 ; 181  |#define HW_RTC_UP_OFFSET 2
                             7983 ; 182  |
                             7984 ; 183  |
                             7985 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             7986 ; 185  |
                             7987 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             7988 ; 187  |
                             7989 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             7990 ; 189  |
                             7991 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             7992 ; 191  |
                             7993 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             7994 ; 193  |
                             7995 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             7996 ; 195  |
                             7997 ; 196  |typedef union               
                             7998 ; 197  |{
                             7999 ; 198  |    struct {
                             8000 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             8001 ; 200  |    } B;
                             8002 ; 201  |    int I;
                             8003 ; 202  |    unsigned int U;
                             8004 ; 203  |} rtc_watchdog_type;
                             8005 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* RTC Watchdog Timeout Register */
                             8006 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             8007 ; 206  |
                             8008 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             8009 ; 208  |
                             8010 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             8011 ; 210  |
                             8012 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             8013 ; 212  |
                             8014 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALARM0_ALARMLOW_BITPOS) 
                             8015 ; 214  |
                             8016 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             8017 ; 216  |
                             8018 ; 217  |typedef union               
                             8019 ; 218  |{
                             8020 ; 219  |    struct {
                             8021 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             8022 ; 221  |    } B;
                             8023 ; 222  |    int I;
                             8024 ; 223  |    unsigned int U;
                             8025 ; 224  |} rtc_alarm0_type;
                             8026 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC ALARM Lower Word Register */
                             8027 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             8028 ; 227  |
                             8029 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             8030 ; 229  |
                             8031 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             8032 ; 231  |
                             8033 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             8034 ; 233  |
                             8035 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_ALARM1_ALARMHIGH_BITPOS) 
                             8036 ; 235  |
                             8037 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             8038 ; 237  |
                             8039 ; 238  |typedef union               
                             8040 ; 239  |{
                             8041 ; 240  |    struct {
                             8042 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             8043 ; 242  |    } B;
                             8044 ; 243  |    int I;
                             8045 ; 244  |    unsigned int U;
                             8046 ; 245  |} rtc_alarm1_type;
                             8047 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC ALARM Upper Word Register */
                             8048 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             8049 ; 248  |
                             8050 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             8051 ; 250  |
                             8052 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             8053 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             8054 ; 253  |
                             8055 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             8056 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             8057 ; 256  |
                             8058 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             8059 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS) 
                             8060 ; 259  |
                             8061 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             8062 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             8063 ; 262  |
                             8064 ; 263  |typedef union               
                             8065 ; 264  |{
                             8066 ; 265  |    struct {
                             8067 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             8068 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             8069 ; 268  |    } B;
                             8070 ; 269  |    int I;
                             8071 ; 270  |    unsigned int U;
                             8072 ; 271  |} rtc_xtaldivide_type;
                             8073 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* RTC Xtal-clock Pre-Divider Word Register */
                             8074 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             8075 ; 274  |
                             8076 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             8077 ; 276  |
                             8078 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             8079 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             8080 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             8081 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             8082 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             8083 ; 282  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8084 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             8085 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             8086 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             8087 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             8088 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             8089 ; 288  |
                             8090 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             8091 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             8092 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             8093 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<<HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             8094 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT0_RSVD0_BITPOS) 
                             8095 ; 294  |
                             8096 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             8097 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK)
                             8098 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                             8099 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                             8100 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             8101 ; 300  |
                             8102 ; 301  |typedef union               
                             8103 ; 302  |{
                             8104 ; 303  |   struct {
                             8105 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             8106 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             8107 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             8108 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             8109 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             8110 ; 309  |   } B;
                             8111 ; 310  |    int I;
                             8112 ; 311  |    unsigned int U;
                             8113 ; 312  |} rtc_PERSISTENT0_type;
                             8114 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /* RTC PERSISTENT Register0 */
                             8115 ; 314  |
                             8116 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             8117 ; 316  |
                             8118 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             8119 ; 318  |
                             8120 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             8121 ; 320  |
                             8122 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             8123 ; 322  |
                             8124 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT1_RSVD0_BITPOS) 
                             8125 ; 324  |
                             8126 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             8127 ; 326  |
                             8128 ; 327  |
                             8129 ; 328  |typedef union               
                             8130 ; 329  |{
                             8131 ; 330  |    struct {
                             8132 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             8133 ; 332  |    } B;
                             8134 ; 333  |    int I;
                             8135 ; 334  |    unsigned int U;
                             8136 ; 335  |} rtc_PERSISTENT1_type;
                             8137 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /* RTC PERSISTENT Register1 */
                             8138 ; 337  |
                             8139 ; 338  |
                             8140 ; 339  |#endif
                             8141 ; 340  |
                             8142 ; 341  |
                             8143 ; 342  |
                             8144 ; 343  |
                             8145 ; 344  |
                             8146 ; 345  |
                             8147 ; 346  |
                             8148 ; 347  |
                             8149 ; 348  |
                             8150 ; 349  |
                             8151 ; 350  |
                             8152 ; 351  |
                             8153 ; 352  |
                             8154 ; 353  |
                             8155 
                             8157 
                             8158 ; 30   |#include "regsspare.h"
                             8159 
                             8161 
                             8162 ; 1    |#if !(defined(RESGSSPARE_INC))
                             8163 ; 2    |#define RESGSSPARE_INC 1
                             8164 ; 3    |
                             8165 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                             8166 ; 5    |
                             8167 ; 6    |
                             8168 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                             8169 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                             8170 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                             8171 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                             8172 ; 11   |
                             8173 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                             8174 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                             8175 ; 14   |
                             8176 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                             8177 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                             8178 ; 17   |
                             8179 ; 18   |
                             8180 ; 19   |
                             8181 ; 20   |typedef union               
                             8182 ; 21   |{
                             8183 ; 22   |    struct {
                             8184 ; 23   |        int      I2SS       :1;     
                             8185 ; 24   |        int      USBSELECT  :1;     
                             8186 ; 25   |        unsigned            :6;
                             8187 ; 26   |        int      USBPLUGIN  :1;     
                             8188 ; 27   |        int      PSWITCH    :1;     
                             8189 ; 28   |    } B;
                             8190 ; 29   |
                             8191 ; 30   |    int I;
                             8192 ; 31   |
                             8193 ; 32   |} spare_type;
                             8194 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                             8195 ; 34   |
                             8196 ; 35   |
                             8197 ; 36   |
                             8198 ; 37   |#endif
                             8199 
                             8201 
                             8202 ; 31   |#include "regsspi.h"
                             8203 
                             8205 
                             8206 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8207 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8208 ; 3    |//;; Filename    : regsspi.inc
                             8209 ; 4    |//;; Description : Register definitions for SPI interface
                             8210 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8211 ; 6    |
                             8212 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8213 ; 8    |// The following naming conventions are followed in this file.
                             8214 ; 9    |// All registers are named using the format...
                             8215 ; 10   |//     HW_<module>_<regname>
                             8216 ; 11   |// where <module> is the module name which can be any of the following...
                             8217 ; 12   |//     USB20
                             8218 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8219 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8220 ; 15   |// that module)
                             8221 ; 16   |// <regname> is the specific register within that module
                             8222 ; 17   |// We also define the following...
                             8223 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8224 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8225 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8226 ; 21   |// which does something else, and
                             8227 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8228 ; 23   |// which does something else.
                             8229 ; 24   |// Other rules
                             8230 ; 25   |//     All caps
                             8231 ; 26   |//     Numeric identifiers start at 0
                             8232 ; 27   |#if !(defined(regsspiinc))
                             8233 ; 28   |#define regsspiinc 1
                             8234 ; 29   |
                             8235 ; 30   |#include "types.h"
                             8236 
                             8238 
                             8239 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8240 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8241 ; 3    |//
                             8242 ; 4    |// Filename: types.h
                             8243 ; 5    |// Description: Standard data types
                             8244 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8245 ; 7    |
                             8246 ; 8    |#ifndef _TYPES_H
                             8247 ; 9    |#define _TYPES_H
                             8248 ; 10   |
                             8249 ; 11   |// TODO:  move this outta here!
                             8250 ; 12   |#if !defined(NOERROR)
                             8251 ; 13   |#define NOERROR 0
                             8252 ; 14   |#define SUCCESS 0
                             8253 ; 15   |#endif 
                             8254 ; 16   |#if !defined(SUCCESS)
                             8255 ; 17   |#define SUCCESS  0
                             8256 ; 18   |#endif
                             8257 ; 19   |#if !defined(ERROR)
                             8258 ; 20   |#define ERROR   -1
                             8259 ; 21   |#endif
                             8260 ; 22   |#if !defined(FALSE)
                             8261 ; 23   |#define FALSE 0
                             8262 ; 24   |#endif
                             8263 ; 25   |#if !defined(TRUE)
                             8264 ; 26   |#define TRUE  1
                             8265 ; 27   |#endif
                             8266 ; 28   |
                             8267 ; 29   |#if !defined(NULL)
                             8268 ; 30   |#define NULL 0
                             8269 ; 31   |#endif
                             8270 ; 32   |
                             8271 ; 33   |#define MAX_INT     0x7FFFFF
                             8272 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8273 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8274 ; 36   |#define MAX_ULONG   (-1) 
                             8275 ; 37   |
                             8276 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8277 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8278 ; 40   |
                             8279 ; 41   |
                             8280 ; 42   |#define BYTE    unsigned char       // btVarName
                             8281 ; 43   |#define CHAR    signed char         // cVarName
                             8282 ; 44   |#define USHORT  unsigned short      // usVarName
                             8283 ; 45   |#define SHORT   unsigned short      // sVarName
                             8284 ; 46   |#define WORD    unsigned int        // wVarName
                             8285 ; 47   |#define INT     signed int          // iVarName
                             8286 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8287 ; 49   |#define LONG    signed long         // lVarName
                             8288 ; 50   |#define BOOL    unsigned int        // bVarName
                             8289 ; 51   |#define FRACT   _fract              // frVarName
                             8290 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8291 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8292 ; 54   |#define FLOAT   float               // fVarName
                             8293 ; 55   |#define DBL     double              // dVarName
                             8294 ; 56   |#define ENUM    enum                // eVarName
                             8295 ; 57   |#define CMX     _complex            // cmxVarName
                             8296 ; 58   |typedef WORD UCS3;                   // 
                             8297 ; 59   |
                             8298 ; 60   |#define UINT16  unsigned short
                             8299 ; 61   |#define UINT8   unsigned char   
                             8300 ; 62   |#define UINT32  unsigned long
                             8301 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8302 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8303 ; 65   |#define WCHAR   UINT16
                             8304 ; 66   |
                             8305 ; 67   |//UINT128 is 16 bytes or 6 words
                             8306 ; 68   |typedef struct UINT128_3500 {   
                             8307 ; 69   |    int val[6];     
                             8308 ; 70   |} UINT128_3500;
                             8309 ; 71   |
                             8310 ; 72   |#define UINT128   UINT128_3500
                             8311 ; 73   |
                             8312 ; 74   |// Little endian word packed byte strings:   
                             8313 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8314 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8315 ; 77   |// Little endian word packed byte strings:   
                             8316 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8317 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8318 ; 80   |
                             8319 ; 81   |// Declare Memory Spaces To Use When Coding
                             8320 ; 82   |// A. Sector Buffers
                             8321 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8322 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8323 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8324 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8325 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8326 ; 88   |// B. Media DDI Memory
                             8327 ; 89   |#define MEDIA_DDI_MEM _Y
                             8328 ; 90   |
                             8329 ; 91   |
                             8330 ; 92   |
                             8331 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8332 ; 94   |// Examples of circular pointers:
                             8333 ; 95   |//    INT CIRC cpiVarName
                             8334 ; 96   |//    DWORD CIRC cpdwVarName
                             8335 ; 97   |
                             8336 ; 98   |#define RETCODE INT                 // rcVarName
                             8337 ; 99   |
                             8338 ; 100  |// generic bitfield structure
                             8339 ; 101  |struct Bitfield {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8340 ; 102  |    unsigned int B0  :1;
                             8341 ; 103  |    unsigned int B1  :1;
                             8342 ; 104  |    unsigned int B2  :1;
                             8343 ; 105  |    unsigned int B3  :1;
                             8344 ; 106  |    unsigned int B4  :1;
                             8345 ; 107  |    unsigned int B5  :1;
                             8346 ; 108  |    unsigned int B6  :1;
                             8347 ; 109  |    unsigned int B7  :1;
                             8348 ; 110  |    unsigned int B8  :1;
                             8349 ; 111  |    unsigned int B9  :1;
                             8350 ; 112  |    unsigned int B10 :1;
                             8351 ; 113  |    unsigned int B11 :1;
                             8352 ; 114  |    unsigned int B12 :1;
                             8353 ; 115  |    unsigned int B13 :1;
                             8354 ; 116  |    unsigned int B14 :1;
                             8355 ; 117  |    unsigned int B15 :1;
                             8356 ; 118  |    unsigned int B16 :1;
                             8357 ; 119  |    unsigned int B17 :1;
                             8358 ; 120  |    unsigned int B18 :1;
                             8359 ; 121  |    unsigned int B19 :1;
                             8360 ; 122  |    unsigned int B20 :1;
                             8361 ; 123  |    unsigned int B21 :1;
                             8362 ; 124  |    unsigned int B22 :1;
                             8363 ; 125  |    unsigned int B23 :1;
                             8364 ; 126  |};
                             8365 ; 127  |
                             8366 ; 128  |union BitInt {
                             8367 ; 129  |        struct Bitfield B;
                             8368 ; 130  |        int        I;
                             8369 ; 131  |};
                             8370 ; 132  |
                             8371 ; 133  |#define MAX_MSG_LENGTH 10
                             8372 ; 134  |struct CMessage
                             8373 ; 135  |{
                             8374 ; 136  |        unsigned int m_uLength;
                             8375 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8376 ; 138  |};
                             8377 ; 139  |
                             8378 ; 140  |typedef struct {
                             8379 ; 141  |    WORD m_wLength;
                             8380 ; 142  |    WORD m_wMessage;
                             8381 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8382 ; 144  |} Message;
                             8383 ; 145  |
                             8384 ; 146  |struct MessageQueueDescriptor
                             8385 ; 147  |{
                             8386 ; 148  |        int *m_pBase;
                             8387 ; 149  |        int m_iModulo;
                             8388 ; 150  |        int m_iSize;
                             8389 ; 151  |        int *m_pHead;
                             8390 ; 152  |        int *m_pTail;
                             8391 ; 153  |};
                             8392 ; 154  |
                             8393 ; 155  |struct ModuleEntry
                             8394 ; 156  |{
                             8395 ; 157  |    int m_iSignaledEventMask;
                             8396 ; 158  |    int m_iWaitEventMask;
                             8397 ; 159  |    int m_iResourceOfCode;
                             8398 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8399 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             8400 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8401 ; 163  |    int m_uTimeOutHigh;
                             8402 ; 164  |    int m_uTimeOutLow;
                             8403 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8404 ; 166  |};
                             8405 ; 167  |
                             8406 ; 168  |union WaitMask{
                             8407 ; 169  |    struct B{
                             8408 ; 170  |        unsigned int m_bNone     :1;
                             8409 ; 171  |        unsigned int m_bMessage  :1;
                             8410 ; 172  |        unsigned int m_bTimer    :1;
                             8411 ; 173  |        unsigned int m_bButton   :1;
                             8412 ; 174  |    } B;
                             8413 ; 175  |    int I;
                             8414 ; 176  |} ;
                             8415 ; 177  |
                             8416 ; 178  |
                             8417 ; 179  |struct Button {
                             8418 ; 180  |        WORD wButtonEvent;
                             8419 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8420 ; 182  |};
                             8421 ; 183  |
                             8422 ; 184  |struct Message {
                             8423 ; 185  |        WORD wMsgLength;
                             8424 ; 186  |        WORD wMsgCommand;
                             8425 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8426 ; 188  |};
                             8427 ; 189  |
                             8428 ; 190  |union EventTypes {
                             8429 ; 191  |        struct CMessage msg;
                             8430 ; 192  |        struct Button Button ;
                             8431 ; 193  |        struct Message Message;
                             8432 ; 194  |};
                             8433 ; 195  |
                             8434 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8435 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8436 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8437 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8438 ; 200  |
                             8439 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8440 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8441 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8442 ; 204  |
                             8443 ; 205  |#if DEBUG
                             8444 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8445 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8446 ; 208  |#else 
                             8447 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             8448 ; 210  |#define DebugBuildAssert(x)    
                             8449 ; 211  |#endif
                             8450 ; 212  |
                             8451 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8452 ; 214  |//  #pragma asm
                             8453 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8454 ; 216  |//  #pragma endasm
                             8455 ; 217  |
                             8456 ; 218  |
                             8457 ; 219  |#ifdef COLOR_262K
                             8458 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             8459 ; 221  |#elif defined(COLOR_65K)
                             8460 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             8461 ; 223  |#else
                             8462 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             8463 ; 225  |#endif
                             8464 ; 226  |    
                             8465 ; 227  |#endif // #ifndef _TYPES_H
                             8466 
                             8468 
                             8469 ; 31   |
                             8470 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8471 ; 33   |
                             8472 ; 34   |//   SPI STMP3500 Registers 
                             8473 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                             8474 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8475 ; 37   |
                             8476 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                             8477 ; 39   |
                             8478 ; 40   |
                             8479 ; 41   |
                             8480 ; 42   |// /////////////////////////////////////////////
                             8481 ; 43   |// //  SPI Control/Status Register Bit Definitions
                             8482 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                             8483 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                             8484 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                             8485 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                             8486 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                             8487 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                             8488 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                             8489 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                             8490 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                             8491 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                             8492 ; 54   |
                             8493 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                             8494 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                             8495 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                             8496 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                             8497 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                             8498 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                             8499 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                             8500 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                             8501 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
                             8502 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                             8503 ; 65   |
                             8504 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                             8505 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                             8506 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                             8507 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                             8508 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                             8509 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                             8510 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                             8511 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                             8512 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                             8513 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                             8514 ; 76   |
                             8515 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                             8516 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                             8517 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                             8518 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                             8519 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                             8520 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                             8521 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                             8522 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                             8523 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                             8524 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                             8525 ; 87   |
                             8526 ; 88   |typedef union               
                             8527 ; 89   |{
                             8528 ; 90   |    struct {
                             8529 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                             8530 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                             8531 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                             8532 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                             8533 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                             8534 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                             8535 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                             8536 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                             8537 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                             8538 ; 100  |    } B;
                             8539 ; 101  |
                             8540 ; 102  |    int I;
                             8541 ; 103  |    unsigned int U;
                             8542 ; 104  |} spcsr_type;
                             8543 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / Status Register */
                             8544 ; 106  |
                             8545 ; 107  |// /////////////////////////////////////////////
                             8546 ; 108  |// //  SPI Data Register Bit Definitions
                             8547 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                             8548 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                             8549 ; 111  |
                             8550 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                             8551 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                             8552 ; 114  |
                             8553 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                             8554 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                             8555 ; 117  |
                             8556 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                             8557 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                             8558 ; 120  |
                             8559 ; 121  |typedef union               
                             8560 ; 122  |{
                             8561 ; 123  |    struct {
                             8562 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                             8563 ; 125  |    } B;
                             8564 ; 126  |
                             8565 ; 127  |    int I;
                             8566 ; 128  |    unsigned int U;
                             8567 ; 129  |} spdr_type;
                             8568 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Register */
                             8569 ; 131  |
                             8570 ; 132  |
                             8571 ; 133  |#endif
                             8572 ; 134  |
                             8573 ; 135  |
                             8574 
                             8576 
                             8577 ; 32   |#include "regsswizzle.h"
                             8578 
                             8580 
                             8581 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8582 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8583 ; 3    |//;; Filename    : regsswizzle.inc
                             8584 ; 4    |//;; Description : Register definitions for Swizzle interface
                             8585 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8586 ; 6    |
                             8587 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8588 ; 8    |// The following naming conventions are followed in this file.
                             8589 ; 9    |// All registers are named using the format...
                             8590 ; 10   |//     HW_<module>_<regname>
                             8591 ; 11   |// where <module> is the module name which can be any of the following...
                             8592 ; 12   |//     USB20
                             8593 ; 13   |// (Note that when there is more than one copy of a particular module, the
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8594 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8595 ; 15   |// that module)
                             8596 ; 16   |// <regname> is the specific register within that module
                             8597 ; 17   |// We also define the following...
                             8598 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8599 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8600 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8601 ; 21   |// which does something else, and
                             8602 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8603 ; 23   |// which does something else.
                             8604 ; 24   |// Other rules
                             8605 ; 25   |//     All caps
                             8606 ; 26   |//     Numeric identifiers start at 0
                             8607 ; 27   |#if !(defined(regsswizzleinc))
                             8608 ; 28   |#define regsswizzleinc 1
                             8609 ; 29   |
                             8610 ; 30   |#include "types.h"
                             8611 
                             8613 
                             8614 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8615 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8616 ; 3    |//
                             8617 ; 4    |// Filename: types.h
                             8618 ; 5    |// Description: Standard data types
                             8619 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8620 ; 7    |
                             8621 ; 8    |#ifndef _TYPES_H
                             8622 ; 9    |#define _TYPES_H
                             8623 ; 10   |
                             8624 ; 11   |// TODO:  move this outta here!
                             8625 ; 12   |#if !defined(NOERROR)
                             8626 ; 13   |#define NOERROR 0
                             8627 ; 14   |#define SUCCESS 0
                             8628 ; 15   |#endif 
                             8629 ; 16   |#if !defined(SUCCESS)
                             8630 ; 17   |#define SUCCESS  0
                             8631 ; 18   |#endif
                             8632 ; 19   |#if !defined(ERROR)
                             8633 ; 20   |#define ERROR   -1
                             8634 ; 21   |#endif
                             8635 ; 22   |#if !defined(FALSE)
                             8636 ; 23   |#define FALSE 0
                             8637 ; 24   |#endif
                             8638 ; 25   |#if !defined(TRUE)
                             8639 ; 26   |#define TRUE  1
                             8640 ; 27   |#endif
                             8641 ; 28   |
                             8642 ; 29   |#if !defined(NULL)
                             8643 ; 30   |#define NULL 0
                             8644 ; 31   |#endif
                             8645 ; 32   |
                             8646 ; 33   |#define MAX_INT     0x7FFFFF
                             8647 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8648 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8649 ; 36   |#define MAX_ULONG   (-1) 
                             8650 ; 37   |
                             8651 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8652 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8653 ; 40   |
                             8654 ; 41   |
                             8655 ; 42   |#define BYTE    unsigned char       // btVarName
                             8656 ; 43   |#define CHAR    signed char         // cVarName
                             8657 ; 44   |#define USHORT  unsigned short      // usVarName
                             8658 ; 45   |#define SHORT   unsigned short      // sVarName
                             8659 ; 46   |#define WORD    unsigned int        // wVarName
                             8660 ; 47   |#define INT     signed int          // iVarName
                             8661 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8662 ; 49   |#define LONG    signed long         // lVarName
                             8663 ; 50   |#define BOOL    unsigned int        // bVarName
                             8664 ; 51   |#define FRACT   _fract              // frVarName
                             8665 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8666 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8667 ; 54   |#define FLOAT   float               // fVarName
                             8668 ; 55   |#define DBL     double              // dVarName
                             8669 ; 56   |#define ENUM    enum                // eVarName
                             8670 ; 57   |#define CMX     _complex            // cmxVarName
                             8671 ; 58   |typedef WORD UCS3;                   // 
                             8672 ; 59   |
                             8673 ; 60   |#define UINT16  unsigned short
                             8674 ; 61   |#define UINT8   unsigned char   
                             8675 ; 62   |#define UINT32  unsigned long
                             8676 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8677 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8678 ; 65   |#define WCHAR   UINT16
                             8679 ; 66   |
                             8680 ; 67   |//UINT128 is 16 bytes or 6 words
                             8681 ; 68   |typedef struct UINT128_3500 {   
                             8682 ; 69   |    int val[6];     
                             8683 ; 70   |} UINT128_3500;
                             8684 ; 71   |
                             8685 ; 72   |#define UINT128   UINT128_3500
                             8686 ; 73   |
                             8687 ; 74   |// Little endian word packed byte strings:   
                             8688 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8689 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8690 ; 77   |// Little endian word packed byte strings:   
                             8691 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8692 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8693 ; 80   |
                             8694 ; 81   |// Declare Memory Spaces To Use When Coding
                             8695 ; 82   |// A. Sector Buffers
                             8696 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8697 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8698 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8699 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8700 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8701 ; 88   |// B. Media DDI Memory
                             8702 ; 89   |#define MEDIA_DDI_MEM _Y
                             8703 ; 90   |
                             8704 ; 91   |
                             8705 ; 92   |
                             8706 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8707 ; 94   |// Examples of circular pointers:
                             8708 ; 95   |//    INT CIRC cpiVarName
                             8709 ; 96   |//    DWORD CIRC cpdwVarName
                             8710 ; 97   |
                             8711 ; 98   |#define RETCODE INT                 // rcVarName
                             8712 ; 99   |
                             8713 ; 100  |// generic bitfield structure
                             8714 ; 101  |struct Bitfield {
                             8715 ; 102  |    unsigned int B0  :1;
                             8716 ; 103  |    unsigned int B1  :1;
                             8717 ; 104  |    unsigned int B2  :1;
                             8718 ; 105  |    unsigned int B3  :1;
                             8719 ; 106  |    unsigned int B4  :1;
                             8720 ; 107  |    unsigned int B5  :1;
                             8721 ; 108  |    unsigned int B6  :1;
                             8722 ; 109  |    unsigned int B7  :1;
                             8723 ; 110  |    unsigned int B8  :1;
                             8724 ; 111  |    unsigned int B9  :1;
                             8725 ; 112  |    unsigned int B10 :1;
                             8726 ; 113  |    unsigned int B11 :1;
                             8727 ; 114  |    unsigned int B12 :1;
                             8728 ; 115  |    unsigned int B13 :1;
                             8729 ; 116  |    unsigned int B14 :1;
                             8730 ; 117  |    unsigned int B15 :1;
                             8731 ; 118  |    unsigned int B16 :1;
                             8732 ; 119  |    unsigned int B17 :1;
                             8733 ; 120  |    unsigned int B18 :1;
                             8734 ; 121  |    unsigned int B19 :1;
                             8735 ; 122  |    unsigned int B20 :1;
                             8736 ; 123  |    unsigned int B21 :1;
                             8737 ; 124  |    unsigned int B22 :1;
                             8738 ; 125  |    unsigned int B23 :1;
                             8739 ; 126  |};
                             8740 ; 127  |
                             8741 ; 128  |union BitInt {
                             8742 ; 129  |        struct Bitfield B;
                             8743 ; 130  |        int        I;
                             8744 ; 131  |};
                             8745 ; 132  |
                             8746 ; 133  |#define MAX_MSG_LENGTH 10
                             8747 ; 134  |struct CMessage
                             8748 ; 135  |{
                             8749 ; 136  |        unsigned int m_uLength;
                             8750 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8751 ; 138  |};
                             8752 ; 139  |
                             8753 ; 140  |typedef struct {
                             8754 ; 141  |    WORD m_wLength;
                             8755 ; 142  |    WORD m_wMessage;
                             8756 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8757 ; 144  |} Message;
                             8758 ; 145  |
                             8759 ; 146  |struct MessageQueueDescriptor
                             8760 ; 147  |{
                             8761 ; 148  |        int *m_pBase;
                             8762 ; 149  |        int m_iModulo;
                             8763 ; 150  |        int m_iSize;
                             8764 ; 151  |        int *m_pHead;
                             8765 ; 152  |        int *m_pTail;
                             8766 ; 153  |};
                             8767 ; 154  |
                             8768 ; 155  |struct ModuleEntry
                             8769 ; 156  |{
                             8770 ; 157  |    int m_iSignaledEventMask;
                             8771 ; 158  |    int m_iWaitEventMask;
                             8772 ; 159  |    int m_iResourceOfCode;
                             8773 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8774 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             8775 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8776 ; 163  |    int m_uTimeOutHigh;
                             8777 ; 164  |    int m_uTimeOutLow;
                             8778 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8779 ; 166  |};
                             8780 ; 167  |
                             8781 ; 168  |union WaitMask{
                             8782 ; 169  |    struct B{
                             8783 ; 170  |        unsigned int m_bNone     :1;
                             8784 ; 171  |        unsigned int m_bMessage  :1;
                             8785 ; 172  |        unsigned int m_bTimer    :1;
                             8786 ; 173  |        unsigned int m_bButton   :1;
                             8787 ; 174  |    } B;
                             8788 ; 175  |    int I;
                             8789 ; 176  |} ;
                             8790 ; 177  |
                             8791 ; 178  |
                             8792 ; 179  |struct Button {
                             8793 ; 180  |        WORD wButtonEvent;
                             8794 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8795 ; 182  |};
                             8796 ; 183  |
                             8797 ; 184  |struct Message {
                             8798 ; 185  |        WORD wMsgLength;
                             8799 ; 186  |        WORD wMsgCommand;
                             8800 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8801 ; 188  |};
                             8802 ; 189  |
                             8803 ; 190  |union EventTypes {
                             8804 ; 191  |        struct CMessage msg;
                             8805 ; 192  |        struct Button Button ;
                             8806 ; 193  |        struct Message Message;
                             8807 ; 194  |};
                             8808 ; 195  |
                             8809 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8810 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8811 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8812 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8813 ; 200  |
                             8814 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8815 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8816 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8817 ; 204  |
                             8818 ; 205  |#if DEBUG
                             8819 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8820 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8821 ; 208  |#else 
                             8822 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             8823 ; 210  |#define DebugBuildAssert(x)    
                             8824 ; 211  |#endif
                             8825 ; 212  |
                             8826 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8827 ; 214  |//  #pragma asm
                             8828 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8829 ; 216  |//  #pragma endasm
                             8830 ; 217  |
                             8831 ; 218  |
                             8832 ; 219  |#ifdef COLOR_262K
                             8833 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             8834 ; 221  |#elif defined(COLOR_65K)
                             8835 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             8836 ; 223  |#else
                             8837 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             8838 ; 225  |#endif
                             8839 ; 226  |    
                             8840 ; 227  |#endif // #ifndef _TYPES_H
                             8841 
                             8843 
                             8844 ; 31   |
                             8845 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8846 ; 33   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8847 ; 34   |//   SWIZZLE STMP3500 Registers 
                             8848 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                             8849 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8850 ; 37   |
                             8851 ; 38   |
                             8852 ; 39   |
                             8853 ; 40   |
                             8854 ; 41   |
                             8855 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                             8856 ; 43   |
                             8857 ; 44   |
                             8858 ; 45   |
                             8859 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                             8860 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                             8861 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                             8862 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                             8863 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                             8864 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                             8865 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                             8866 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                             8867 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                             8868 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                             8869 ; 56   |
                             8870 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                             8871 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                             8872 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                             8873 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                             8874 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                             8875 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                             8876 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                             8877 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                             8878 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                             8879 ; 66   |
                             8880 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITPOS)
                             8881 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITPOS)
                             8882 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_BITPOS)
                             8883 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIGN_BITPOS)
                             8884 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_SHIFT_BITPOS)
                             8885 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_BITPOS)
                             8886 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECSR1_CLK_OFF_BITPOS)
                             8887 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1_NEWADD_BITPOS)
                             8888 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSVD_BITPOS)
                             8889 ; 76   |
                             8890 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                             8891 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                             8892 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                             8893 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                             8894 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                             8895 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                             8896 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                             8897 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                             8898 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                             8899 ; 86   |
                             8900 ; 87   |////////////////////////////////////////////////////////////////////////////////
                             8901 ; 88   |//  Bit Manipulation Unit Registers
                             8902 ; 89   |////////////////////////////////////////////////////////////////////////////////
                             8903 ; 90   |typedef union
                             8904 ; 91   |{
                             8905 ; 92   |    struct
                             8906 ; 93   |    {
                             8907 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                             8908 ; 95   |    int LA      :1;     /* Left Align Data                          */
                             8909 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                             8910 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                             8911 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                             8912 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                             8913 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                             8914 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                             8915 ; 102  |    } B;
                             8916 ; 103  |    int I;
                             8917 ; 104  |    unsigned U;
                             8918 ; 105  |} swizzlecsr1_type;
                             8919 ; 106  |////////////////////////////////////////////////////////////////////////////////
                             8920 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* Swizzle Control & Status Register 1 */
                             8921 ; 108  |
                             8922 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                             8923 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                             8924 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                             8925 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                             8926 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                             8927 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                             8928 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                             8929 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                             8930 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                             8931 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                             8932 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                             8933 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                             8934 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                             8935 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                             8936 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                             8937 ; 124  |
                             8938 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                             8939 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                             8940 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                             8941 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                             8942 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                             8943 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                             8944 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                             8945 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                             8946 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                             8947 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                             8948 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                             8949 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                             8950 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                             8951 ; 138  |
                             8952 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KICK_BITPOS)
                             8953 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_SASEL_BITPOS)
                             8954 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECSR2_DESASEL_BITPOS)
                             8955 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIGE_BITPOS)
                             8956 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2_BITREV_BITPOS)
                             8957 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLSB_BITPOS)
                             8958 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMSB_BITPOS)
                             8959 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16L_BITPOS)
                             8960 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16I_BITPOS)
                             8961 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_BS_EN_BITPOS)
                             8962 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZLECSR2_SBYTEDEST_BITPOS)
                             8963 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2_UNKICK_BITPOS)
                             8964 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSVD_BITPOS)
                             8965 ; 152  |
                             8966 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                             8967 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                             8968 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                             8969 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                             8970 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                             8971 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                             8972 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                             8973 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                             8974 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                             8975 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                             8976 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                             8977 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                             8978 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                             8979 ; 166  |
                             8980 ; 167  |///////////////////////////////////////////////////////////////////////////////
                             8981 ; 168  |typedef union
                             8982 ; 169  |{
                             8983 ; 170  |    struct
                             8984 ; 171  |    {
                             8985 ; 172  |    int KICK    :1;         /* Start transfer                      */
                             8986 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                             8987 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                             8988 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                             8989 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                             8990 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                             8991 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                             8992 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                             8993 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                             8994 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                             8995 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                             8996 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                             8997 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                             8998 ; 185  |    } B;
                             8999 ; 186  |    unsigned int I;
                             9000 ; 187  |    unsigned int U;
                             9001 ; 188  |} swizzlecsr2_type;
                             9002 ; 189  |///////////////////////////////////////////////////////////////////////////////
                             9003 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* Swizzle Control & Status Register 2 */
                             9004 ; 191  |
                             9005 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                             9006 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                             9007 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                             9008 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                             9009 ; 196  |
                             9010 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                             9011 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                             9012 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                             9013 ; 200  |
                             9014 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_SIZE_BITPOS)
                             9015 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWIZZLESIZER_NEW_SHIFT_BITPOS)
                             9016 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_RSVD_BITPOS)
                             9017 ; 204  |
                             9018 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                             9019 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                             9020 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                             9021 ; 208  |
                             9022 ; 209  |///////////////////////////////////////////////////////////////////////////////
                             9023 ; 210  |typedef union
                             9024 ; 211  |{
                             9025 ; 212  |    struct
                             9026 ; 213  |    {
                             9027 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                             9028 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                             9029 ; 216  |    } B;
                             9030 ; 217  |    int I;
                             9031 ; 218  |    unsigned U;
                             9032 ; 219  |} swizzlesizer_type;
                             9033 ; 220  |///////////////////////////////////////////////////////////////////////////////
                             9034 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))        /* Swizzle Transfer Size Register */
                             9035 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* Swizzle Source Address Register */
                             9036 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* Swizzle Data1 Register */
                             9037 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* Swizzle Data2 Register */
                             9038 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* Swizzle Destination Address Register */
                             9039 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* Swizzle Big Endian Register */
                             9040 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* Swizzle BITREV Register */
                             9041 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* Swizzle Pass Least Significant Byte Register */
                             9042 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* Swizzle Pass Intermediate Byte Register */
                             9043 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* Swizzle Pass Most Significant Byte Register */
                             9044 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* Swizzle Pass Least Significant Word Register */
                             9045 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* Swizzle Pass Intermediate Significant Word Register */
                             9046 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* Swizzle Pass Most Significant Word Register */
                             9047 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Swizzle Barrel Shift Register */
                             9048 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swizzle Divide By 3 Lower Register */
                             9049 ; 236  |
                             9050 ; 237  |
                             9051 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                             9052 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                             9053 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                             9054 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                             9055 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                             9056 ; 243  |
                             9057 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                             9058 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                             9059 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                             9060 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                             9061 ; 248  |
                             9062 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                             9063 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD0_BITPOS)
                             9064 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_REMAINDER_BITPOS)
                             9065 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD1_BITPOS)
                             9066 ; 253  |
                             9067 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                             9068 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                             9069 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                             9070 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                             9071 ; 258  |
                             9072 ; 259  |///////////////////////////////////////////////////////////////////////////////
                             9073 ; 260  |typedef union
                             9074 ; 261  |{
                             9075 ; 262  |    struct
                             9076 ; 263  |    {
                             9077 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                             9078 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                             9079 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                             9080 ; 267  |    } B;
                             9081 ; 268  |    int I;
                             9082 ; 269  |    unsigned U;
                             9083 ; 270  |} swizzlediv3ur_type;
                             9084 ; 271  |///////////////////////////////////////////////////////////////////////////////
                             9085 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    /* Swizzle Divide By 3 Upper Register */
                             9086 ; 273  |
                             9087 ; 274  |#endif
                             9088 ; 275  |
                             9089 
                             9091 
                             9092 ; 33   |#include "regssdram.h"
                             9093 
                             9095 
                             9096 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9097 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                             9098 ; 3    |//;  File        : regssdram.inc
                             9099 ; 4    |//;  Description : Mixed Signal IP Register definition
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9100 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9101 ; 6    |
                             9102 ; 7    |// The following naming conventions are followed in this file.
                             9103 ; 8    |// All registers are named using the format...
                             9104 ; 9    |//     HW_<module>_<regname>
                             9105 ; 10   |// where <module> is the module name which can be any of the following...
                             9106 ; 11   |//     SYSTEM
                             9107 ; 12   |// (Note that when there is more than one copy of a particular module, the
                             9108 ; 13   |// module name includes a number starting from 0 for the first instance of
                             9109 ; 14   |// that module)
                             9110 ; 15   |// <regname> is the specific register within that module
                             9111 ; 16   |// We also define the following...
                             9112 ; 17   |//     HW_<module>_<regname>_BITPOS
                             9113 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9114 ; 19   |//     HW_<module>_<regname>_SETMASK
                             9115 ; 20   |// which does something else, and
                             9116 ; 21   |//     HW_<module>_<regname>_CLRMASK
                             9117 ; 22   |// which does something else.
                             9118 ; 23   |// Other rules
                             9119 ; 24   |//     All caps
                             9120 ; 25   |//     Numeric identifiers start at 0
                             9121 ; 26   |
                             9122 ; 27   |#if !(defined(regssdraminc))
                             9123 ; 28   |#define regssdraminc 1
                             9124 ; 29   |
                             9125 ; 30   |#include "types.h"
                             9126 
                             9128 
                             9129 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9130 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9131 ; 3    |//
                             9132 ; 4    |// Filename: types.h
                             9133 ; 5    |// Description: Standard data types
                             9134 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9135 ; 7    |
                             9136 ; 8    |#ifndef _TYPES_H
                             9137 ; 9    |#define _TYPES_H
                             9138 ; 10   |
                             9139 ; 11   |// TODO:  move this outta here!
                             9140 ; 12   |#if !defined(NOERROR)
                             9141 ; 13   |#define NOERROR 0
                             9142 ; 14   |#define SUCCESS 0
                             9143 ; 15   |#endif 
                             9144 ; 16   |#if !defined(SUCCESS)
                             9145 ; 17   |#define SUCCESS  0
                             9146 ; 18   |#endif
                             9147 ; 19   |#if !defined(ERROR)
                             9148 ; 20   |#define ERROR   -1
                             9149 ; 21   |#endif
                             9150 ; 22   |#if !defined(FALSE)
                             9151 ; 23   |#define FALSE 0
                             9152 ; 24   |#endif
                             9153 ; 25   |#if !defined(TRUE)
                             9154 ; 26   |#define TRUE  1
                             9155 ; 27   |#endif
                             9156 ; 28   |
                             9157 ; 29   |#if !defined(NULL)
                             9158 ; 30   |#define NULL 0
                             9159 ; 31   |#endif
                             9160 ; 32   |
                             9161 ; 33   |#define MAX_INT     0x7FFFFF
                             9162 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9163 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9164 ; 36   |#define MAX_ULONG   (-1) 
                             9165 ; 37   |
                             9166 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9167 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9168 ; 40   |
                             9169 ; 41   |
                             9170 ; 42   |#define BYTE    unsigned char       // btVarName
                             9171 ; 43   |#define CHAR    signed char         // cVarName
                             9172 ; 44   |#define USHORT  unsigned short      // usVarName
                             9173 ; 45   |#define SHORT   unsigned short      // sVarName
                             9174 ; 46   |#define WORD    unsigned int        // wVarName
                             9175 ; 47   |#define INT     signed int          // iVarName
                             9176 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9177 ; 49   |#define LONG    signed long         // lVarName
                             9178 ; 50   |#define BOOL    unsigned int        // bVarName
                             9179 ; 51   |#define FRACT   _fract              // frVarName
                             9180 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9181 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9182 ; 54   |#define FLOAT   float               // fVarName
                             9183 ; 55   |#define DBL     double              // dVarName
                             9184 ; 56   |#define ENUM    enum                // eVarName
                             9185 ; 57   |#define CMX     _complex            // cmxVarName
                             9186 ; 58   |typedef WORD UCS3;                   // 
                             9187 ; 59   |
                             9188 ; 60   |#define UINT16  unsigned short
                             9189 ; 61   |#define UINT8   unsigned char   
                             9190 ; 62   |#define UINT32  unsigned long
                             9191 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9192 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9193 ; 65   |#define WCHAR   UINT16
                             9194 ; 66   |
                             9195 ; 67   |//UINT128 is 16 bytes or 6 words
                             9196 ; 68   |typedef struct UINT128_3500 {   
                             9197 ; 69   |    int val[6];     
                             9198 ; 70   |} UINT128_3500;
                             9199 ; 71   |
                             9200 ; 72   |#define UINT128   UINT128_3500
                             9201 ; 73   |
                             9202 ; 74   |// Little endian word packed byte strings:   
                             9203 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9204 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9205 ; 77   |// Little endian word packed byte strings:   
                             9206 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9207 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9208 ; 80   |
                             9209 ; 81   |// Declare Memory Spaces To Use When Coding
                             9210 ; 82   |// A. Sector Buffers
                             9211 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9212 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9213 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9214 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9215 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9216 ; 88   |// B. Media DDI Memory
                             9217 ; 89   |#define MEDIA_DDI_MEM _Y
                             9218 ; 90   |
                             9219 ; 91   |
                             9220 ; 92   |
                             9221 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9222 ; 94   |// Examples of circular pointers:
                             9223 ; 95   |//    INT CIRC cpiVarName
                             9224 ; 96   |//    DWORD CIRC cpdwVarName
                             9225 ; 97   |
                             9226 ; 98   |#define RETCODE INT                 // rcVarName
                             9227 ; 99   |
                             9228 ; 100  |// generic bitfield structure
                             9229 ; 101  |struct Bitfield {
                             9230 ; 102  |    unsigned int B0  :1;
                             9231 ; 103  |    unsigned int B1  :1;
                             9232 ; 104  |    unsigned int B2  :1;
                             9233 ; 105  |    unsigned int B3  :1;
                             9234 ; 106  |    unsigned int B4  :1;
                             9235 ; 107  |    unsigned int B5  :1;
                             9236 ; 108  |    unsigned int B6  :1;
                             9237 ; 109  |    unsigned int B7  :1;
                             9238 ; 110  |    unsigned int B8  :1;
                             9239 ; 111  |    unsigned int B9  :1;
                             9240 ; 112  |    unsigned int B10 :1;
                             9241 ; 113  |    unsigned int B11 :1;
                             9242 ; 114  |    unsigned int B12 :1;
                             9243 ; 115  |    unsigned int B13 :1;
                             9244 ; 116  |    unsigned int B14 :1;
                             9245 ; 117  |    unsigned int B15 :1;
                             9246 ; 118  |    unsigned int B16 :1;
                             9247 ; 119  |    unsigned int B17 :1;
                             9248 ; 120  |    unsigned int B18 :1;
                             9249 ; 121  |    unsigned int B19 :1;
                             9250 ; 122  |    unsigned int B20 :1;
                             9251 ; 123  |    unsigned int B21 :1;
                             9252 ; 124  |    unsigned int B22 :1;
                             9253 ; 125  |    unsigned int B23 :1;
                             9254 ; 126  |};
                             9255 ; 127  |
                             9256 ; 128  |union BitInt {
                             9257 ; 129  |        struct Bitfield B;
                             9258 ; 130  |        int        I;
                             9259 ; 131  |};
                             9260 ; 132  |
                             9261 ; 133  |#define MAX_MSG_LENGTH 10
                             9262 ; 134  |struct CMessage
                             9263 ; 135  |{
                             9264 ; 136  |        unsigned int m_uLength;
                             9265 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9266 ; 138  |};
                             9267 ; 139  |
                             9268 ; 140  |typedef struct {
                             9269 ; 141  |    WORD m_wLength;
                             9270 ; 142  |    WORD m_wMessage;
                             9271 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9272 ; 144  |} Message;
                             9273 ; 145  |
                             9274 ; 146  |struct MessageQueueDescriptor
                             9275 ; 147  |{
                             9276 ; 148  |        int *m_pBase;
                             9277 ; 149  |        int m_iModulo;
                             9278 ; 150  |        int m_iSize;
                             9279 ; 151  |        int *m_pHead;
                             9280 ; 152  |        int *m_pTail;
                             9281 ; 153  |};
                             9282 ; 154  |
                             9283 ; 155  |struct ModuleEntry
                             9284 ; 156  |{
                             9285 ; 157  |    int m_iSignaledEventMask;
                             9286 ; 158  |    int m_iWaitEventMask;
                             9287 ; 159  |    int m_iResourceOfCode;
                             9288 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9289 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             9290 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9291 ; 163  |    int m_uTimeOutHigh;
                             9292 ; 164  |    int m_uTimeOutLow;
                             9293 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9294 ; 166  |};
                             9295 ; 167  |
                             9296 ; 168  |union WaitMask{
                             9297 ; 169  |    struct B{
                             9298 ; 170  |        unsigned int m_bNone     :1;
                             9299 ; 171  |        unsigned int m_bMessage  :1;
                             9300 ; 172  |        unsigned int m_bTimer    :1;
                             9301 ; 173  |        unsigned int m_bButton   :1;
                             9302 ; 174  |    } B;
                             9303 ; 175  |    int I;
                             9304 ; 176  |} ;
                             9305 ; 177  |
                             9306 ; 178  |
                             9307 ; 179  |struct Button {
                             9308 ; 180  |        WORD wButtonEvent;
                             9309 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9310 ; 182  |};
                             9311 ; 183  |
                             9312 ; 184  |struct Message {
                             9313 ; 185  |        WORD wMsgLength;
                             9314 ; 186  |        WORD wMsgCommand;
                             9315 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9316 ; 188  |};
                             9317 ; 189  |
                             9318 ; 190  |union EventTypes {
                             9319 ; 191  |        struct CMessage msg;
                             9320 ; 192  |        struct Button Button ;
                             9321 ; 193  |        struct Message Message;
                             9322 ; 194  |};
                             9323 ; 195  |
                             9324 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9325 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9326 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9327 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9328 ; 200  |
                             9329 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9330 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9331 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9332 ; 204  |
                             9333 ; 205  |#if DEBUG
                             9334 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9335 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9336 ; 208  |#else 
                             9337 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             9338 ; 210  |#define DebugBuildAssert(x)    
                             9339 ; 211  |#endif
                             9340 ; 212  |
                             9341 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9342 ; 214  |//  #pragma asm
                             9343 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9344 ; 216  |//  #pragma endasm
                             9345 ; 217  |
                             9346 ; 218  |
                             9347 ; 219  |#ifdef COLOR_262K
                             9348 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             9349 ; 221  |#elif defined(COLOR_65K)
                             9350 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             9351 ; 223  |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9352 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             9353 ; 225  |#endif
                             9354 ; 226  |    
                             9355 ; 227  |#endif // #ifndef _TYPES_H
                             9356 
                             9358 
                             9359 ; 31   |
                             9360 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                             9361 ; 33   |
                             9362 ; 34   |
                             9363 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                             9364 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                             9365 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                             9366 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                             9367 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
                             9368 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                             9369 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                             9370 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                             9371 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                             9372 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                             9373 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                             9374 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                             9375 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                             9376 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                             9377 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                             9378 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                             9379 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                             9380 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                             9381 ; 53   |
                             9382 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                             9383 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                             9384 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                             9385 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                             9386 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                             9387 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                             9388 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                             9389 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                             9390 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                             9391 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                             9392 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                             9393 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                             9394 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                             9395 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                             9396 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                             9397 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                             9398 ; 70   |
                             9399 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SDRAMEN_BITPOS)
                             9400 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                             9401 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS)
                             9402 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BITPOS)
                             9403 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                             9404 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_BITPOS)
                             9405 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BITPOS)
                             9406 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_BITPOS)
                             9407 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS)
                             9408 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BITPOS)
                             9409 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_BITPOS)
                             9410 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_BITPOS)
                             9411 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS)
                             9412 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_BITPOS)
                             9413 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_BITPOS)
                             9414 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BITPOS)
                             9415 ; 87   |
                             9416 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                             9417 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                             9418 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                             9419 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                             9420 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                             9421 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                             9422 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                             9423 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                             9424 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                             9425 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                             9426 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                             9427 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                             9428 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                             9429 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                             9430 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                             9431 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                             9432 ; 104  |
                             9433 ; 105  |typedef union               
                             9434 ; 106  |{
                             9435 ; 107  |    struct {
                             9436 ; 108  |        int SDRAMEN                     :1;
                             9437 ; 109  |        int IE                          :1;
                             9438 ; 110  |        int RNW                         :1;
                             9439 ; 111  |        int KICK                        :1;
                             9440 ; 112  |        int LM                          :1;
                             9441 ; 113  |        int ISTAT                       :1;
                             9442 ; 114  |        int PWDN                        :1;
                             9443 ; 115  |        int RSVD                        :1;
                             9444 ; 116  |        int SBYTE                       :2;
                             9445 ; 117  |        int MEM                         :2;
                             9446 ; 118  |        int BIGE                        :1;
                             9447 ; 119  |        int ASIZE                       :3;
                             9448 ; 120  |        int UKICK                       :1;
                             9449 ; 121  |        int DIV                         :4;
                             9450 ; 122  |        int MULTI                       :1;
                             9451 ; 123  |        int SDRAM                       :1;
                             9452 ; 124  |        int SIGN                        :1;
                             9453 ; 125  |    } B;
                             9454 ; 126  |    int I;
                             9455 ; 127  |} sdramcsr_type;
                             9456 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                             9457 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                             9458 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                             9459 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                             9460 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                             9461 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                             9462 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                             9463 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                             9464 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                             9465 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                             9466 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                             9467 ; 139  |
                             9468 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                             9469 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                             9470 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                             9471 ; 143  |
                             9472 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                             9473 ; 145  |
                             9474 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                             9475 ; 147  |
                             9476 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                             9477 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                             9478 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                             9479 ; 151  |
                             9480 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                             9481 ; 153  |
                             9482 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                             9483 ; 155  |
                             9484 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                             9485 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                             9486 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                             9487 ; 159  |
                             9488 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                             9489 ; 161  |
                             9490 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                             9491 ; 163  |
                             9492 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                             9493 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                             9494 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                             9495 ; 167  |
                             9496 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                             9497 ; 169  |
                             9498 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                             9499 ; 171  |
                             9500 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                             9501 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                             9502 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                             9503 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                             9504 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                             9505 ; 177  |
                             9506 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                             9507 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                             9508 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                             9509 ; 181  |
                             9510 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1_INIT_BITPOS)
                             9511 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_TRP_BITPOS)
                             9512 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1_TRFC_BITPOS)
                             9513 ; 185  |
                             9514 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                             9515 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                             9516 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                             9517 ; 189  |
                             9518 ; 190  |typedef union               
                             9519 ; 191  |{
                             9520 ; 192  |    struct {
                             9521 ; 193  |        int INIT                :16;
                             9522 ; 194  |        int TRP                 :4;
                             9523 ; 195  |        int TRFC                :4;
                             9524 ; 196  |    } B;
                             9525 ; 197  |    int I;
                             9526 ; 198  |} sdramtimer1_type;
                             9527 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                             9528 ; 200  |
                             9529 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                             9530 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                             9531 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                             9532 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                             9533 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                             9534 ; 206  |
                             9535 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                             9536 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                             9537 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                             9538 ; 210  |
                             9539 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2_TXSR_BITPOS)
                             9540 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2_TREF_BITPOS)
                             9541 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2_TRCD_BITPOS)
                             9542 ; 214  |
                             9543 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                             9544 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                             9545 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                             9546 ; 218  |
                             9547 ; 219  |typedef union               
                             9548 ; 220  |{
                             9549 ; 221  |    struct {
                             9550 ; 222  |        int TXSR                :4;
                             9551 ; 223  |        int TREF                :12;
                             9552 ; 224  |        int TRCD                :4;
                             9553 ; 225  |        int RSVD                :4; 
                             9554 ; 226  |    } B;
                             9555 ; 227  |    int I;
                             9556 ; 228  |} sdramtimer2_type;
                             9557 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                             9558 ; 230  |
                             9559 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             9560 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                             9561 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                             9562 ; 234  |
                             9563 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                             9564 ; 236  |
                             9565 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                             9566 ; 238  |
                             9567 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                             9568 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                             9569 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                             9570 ; 242  |
                             9571 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                             9572 ; 244  |
                             9573 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                             9574 ; 246  |
                             9575 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             9576 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                             9577 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                             9578 ; 250  |
                             9579 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                             9580 ; 252  |
                             9581 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS)
                             9582 ; 254  |
                             9583 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                             9584 ; 256  |
                             9585 ; 257  |typedef union               
                             9586 ; 258  |{
                             9587 ; 259  |    struct {
                             9588 ; 260  |        int VALUE               :14;
                             9589 ; 261  |        int RSVD                :10; 
                             9590 ; 262  |    } B;
                             9591 ; 263  |    int I;
                             9592 ; 264  |} sdrammode_type;
                             9593 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                             9594 ; 266  |
                             9595 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                             9596 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                             9597 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                             9598 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                             9599 ; 271  |
                             9600 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                             9601 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                             9602 ; 274  |
                             9603 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_COLWIDTH_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9604 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_ROWWIDTH_BITPOS)
                             9605 ; 277  |
                             9606 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                             9607 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                             9608 ; 280  |
                             9609 ; 281  |typedef union               
                             9610 ; 282  |{
                             9611 ; 283  |    struct {
                             9612 ; 284  |        int COLWIDTH               :4;
                             9613 ; 285  |        int ROWWIDTH               :4; 
                             9614 ; 286  |    } B;
                             9615 ; 287  |    int I;
                             9616 ; 288  |} sdramtype_type;
                             9617 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                             9618 ; 290  |
                             9619 ; 291  |#endif
                             9620 ; 292  |
                             9621 ; 293  |
                             9622 ; 294  |
                             9623 ; 295  |
                             9624 ; 296  |
                             9625 ; 297  |
                             9626 
                             9628 
                             9629 ; 34   |#include "regstb.h"
                             9630 
                             9632 
                             9633 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             9634 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             9635 ; 3    |// Filename: regstb.inc
                             9636 ; 4    |// Description: Register definitions for Trace Buffer
                             9637 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             9638 ; 6    |// The following naming conventions are followed in this file.
                             9639 ; 7    |// All registers are named using the format...
                             9640 ; 8    |//     HW_<module>_<regname>
                             9641 ; 9    |// where <module> is the module name which can be any of the following...
                             9642 ; 10   |//     USB20
                             9643 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             9644 ; 12   |// module name includes a number starting from 0 for the first instance of
                             9645 ; 13   |// that module)
                             9646 ; 14   |// <regname> is the specific register within that module
                             9647 ; 15   |// We also define the following...
                             9648 ; 16   |//     HW_<module>_<regname>_BITPOS
                             9649 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9650 ; 18   |//     HW_<module>_<regname>_SETMASK
                             9651 ; 19   |// which does something else, and
                             9652 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             9653 ; 21   |// which does something else.
                             9654 ; 22   |// Other rules
                             9655 ; 23   |//     All caps
                             9656 ; 24   |//     Numeric identifiers start at 0
                             9657 ; 25   |#if !(defined(regstbinc))
                             9658 ; 26   |#define regstbinc 1
                             9659 ; 27   |
                             9660 ; 28   |#include "types.h"
                             9661 
                             9663 
                             9664 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9665 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9666 ; 3    |//
                             9667 ; 4    |// Filename: types.h
                             9668 ; 5    |// Description: Standard data types
                             9669 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9670 ; 7    |
                             9671 ; 8    |#ifndef _TYPES_H
                             9672 ; 9    |#define _TYPES_H
                             9673 ; 10   |
                             9674 ; 11   |// TODO:  move this outta here!
                             9675 ; 12   |#if !defined(NOERROR)
                             9676 ; 13   |#define NOERROR 0
                             9677 ; 14   |#define SUCCESS 0
                             9678 ; 15   |#endif 
                             9679 ; 16   |#if !defined(SUCCESS)
                             9680 ; 17   |#define SUCCESS  0
                             9681 ; 18   |#endif
                             9682 ; 19   |#if !defined(ERROR)
                             9683 ; 20   |#define ERROR   -1
                             9684 ; 21   |#endif
                             9685 ; 22   |#if !defined(FALSE)
                             9686 ; 23   |#define FALSE 0
                             9687 ; 24   |#endif
                             9688 ; 25   |#if !defined(TRUE)
                             9689 ; 26   |#define TRUE  1
                             9690 ; 27   |#endif
                             9691 ; 28   |
                             9692 ; 29   |#if !defined(NULL)
                             9693 ; 30   |#define NULL 0
                             9694 ; 31   |#endif
                             9695 ; 32   |
                             9696 ; 33   |#define MAX_INT     0x7FFFFF
                             9697 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9698 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9699 ; 36   |#define MAX_ULONG   (-1) 
                             9700 ; 37   |
                             9701 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9702 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9703 ; 40   |
                             9704 ; 41   |
                             9705 ; 42   |#define BYTE    unsigned char       // btVarName
                             9706 ; 43   |#define CHAR    signed char         // cVarName
                             9707 ; 44   |#define USHORT  unsigned short      // usVarName
                             9708 ; 45   |#define SHORT   unsigned short      // sVarName
                             9709 ; 46   |#define WORD    unsigned int        // wVarName
                             9710 ; 47   |#define INT     signed int          // iVarName
                             9711 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9712 ; 49   |#define LONG    signed long         // lVarName
                             9713 ; 50   |#define BOOL    unsigned int        // bVarName
                             9714 ; 51   |#define FRACT   _fract              // frVarName
                             9715 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9716 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9717 ; 54   |#define FLOAT   float               // fVarName
                             9718 ; 55   |#define DBL     double              // dVarName
                             9719 ; 56   |#define ENUM    enum                // eVarName
                             9720 ; 57   |#define CMX     _complex            // cmxVarName
                             9721 ; 58   |typedef WORD UCS3;                   // 
                             9722 ; 59   |
                             9723 ; 60   |#define UINT16  unsigned short
                             9724 ; 61   |#define UINT8   unsigned char   
                             9725 ; 62   |#define UINT32  unsigned long
                             9726 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9727 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9728 ; 65   |#define WCHAR   UINT16
                             9729 ; 66   |
                             9730 ; 67   |//UINT128 is 16 bytes or 6 words
                             9731 ; 68   |typedef struct UINT128_3500 {   
                             9732 ; 69   |    int val[6];     
                             9733 ; 70   |} UINT128_3500;
                             9734 ; 71   |
                             9735 ; 72   |#define UINT128   UINT128_3500
                             9736 ; 73   |
                             9737 ; 74   |// Little endian word packed byte strings:   
                             9738 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9739 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9740 ; 77   |// Little endian word packed byte strings:   
                             9741 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9742 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9743 ; 80   |
                             9744 ; 81   |// Declare Memory Spaces To Use When Coding
                             9745 ; 82   |// A. Sector Buffers
                             9746 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9747 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9748 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9749 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9750 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9751 ; 88   |// B. Media DDI Memory
                             9752 ; 89   |#define MEDIA_DDI_MEM _Y
                             9753 ; 90   |
                             9754 ; 91   |
                             9755 ; 92   |
                             9756 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9757 ; 94   |// Examples of circular pointers:
                             9758 ; 95   |//    INT CIRC cpiVarName
                             9759 ; 96   |//    DWORD CIRC cpdwVarName
                             9760 ; 97   |
                             9761 ; 98   |#define RETCODE INT                 // rcVarName
                             9762 ; 99   |
                             9763 ; 100  |// generic bitfield structure
                             9764 ; 101  |struct Bitfield {
                             9765 ; 102  |    unsigned int B0  :1;
                             9766 ; 103  |    unsigned int B1  :1;
                             9767 ; 104  |    unsigned int B2  :1;
                             9768 ; 105  |    unsigned int B3  :1;
                             9769 ; 106  |    unsigned int B4  :1;
                             9770 ; 107  |    unsigned int B5  :1;
                             9771 ; 108  |    unsigned int B6  :1;
                             9772 ; 109  |    unsigned int B7  :1;
                             9773 ; 110  |    unsigned int B8  :1;
                             9774 ; 111  |    unsigned int B9  :1;
                             9775 ; 112  |    unsigned int B10 :1;
                             9776 ; 113  |    unsigned int B11 :1;
                             9777 ; 114  |    unsigned int B12 :1;
                             9778 ; 115  |    unsigned int B13 :1;
                             9779 ; 116  |    unsigned int B14 :1;
                             9780 ; 117  |    unsigned int B15 :1;
                             9781 ; 118  |    unsigned int B16 :1;
                             9782 ; 119  |    unsigned int B17 :1;
                             9783 ; 120  |    unsigned int B18 :1;
                             9784 ; 121  |    unsigned int B19 :1;
                             9785 ; 122  |    unsigned int B20 :1;
                             9786 ; 123  |    unsigned int B21 :1;
                             9787 ; 124  |    unsigned int B22 :1;
                             9788 ; 125  |    unsigned int B23 :1;
                             9789 ; 126  |};
                             9790 ; 127  |
                             9791 ; 128  |union BitInt {
                             9792 ; 129  |        struct Bitfield B;
                             9793 ; 130  |        int        I;
                             9794 ; 131  |};
                             9795 ; 132  |
                             9796 ; 133  |#define MAX_MSG_LENGTH 10
                             9797 ; 134  |struct CMessage
                             9798 ; 135  |{
                             9799 ; 136  |        unsigned int m_uLength;
                             9800 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9801 ; 138  |};
                             9802 ; 139  |
                             9803 ; 140  |typedef struct {
                             9804 ; 141  |    WORD m_wLength;
                             9805 ; 142  |    WORD m_wMessage;
                             9806 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9807 ; 144  |} Message;
                             9808 ; 145  |
                             9809 ; 146  |struct MessageQueueDescriptor
                             9810 ; 147  |{
                             9811 ; 148  |        int *m_pBase;
                             9812 ; 149  |        int m_iModulo;
                             9813 ; 150  |        int m_iSize;
                             9814 ; 151  |        int *m_pHead;
                             9815 ; 152  |        int *m_pTail;
                             9816 ; 153  |};
                             9817 ; 154  |
                             9818 ; 155  |struct ModuleEntry
                             9819 ; 156  |{
                             9820 ; 157  |    int m_iSignaledEventMask;
                             9821 ; 158  |    int m_iWaitEventMask;
                             9822 ; 159  |    int m_iResourceOfCode;
                             9823 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9824 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             9825 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9826 ; 163  |    int m_uTimeOutHigh;
                             9827 ; 164  |    int m_uTimeOutLow;
                             9828 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9829 ; 166  |};
                             9830 ; 167  |
                             9831 ; 168  |union WaitMask{
                             9832 ; 169  |    struct B{
                             9833 ; 170  |        unsigned int m_bNone     :1;
                             9834 ; 171  |        unsigned int m_bMessage  :1;
                             9835 ; 172  |        unsigned int m_bTimer    :1;
                             9836 ; 173  |        unsigned int m_bButton   :1;
                             9837 ; 174  |    } B;
                             9838 ; 175  |    int I;
                             9839 ; 176  |} ;
                             9840 ; 177  |
                             9841 ; 178  |
                             9842 ; 179  |struct Button {
                             9843 ; 180  |        WORD wButtonEvent;
                             9844 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9845 ; 182  |};
                             9846 ; 183  |
                             9847 ; 184  |struct Message {
                             9848 ; 185  |        WORD wMsgLength;
                             9849 ; 186  |        WORD wMsgCommand;
                             9850 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9851 ; 188  |};
                             9852 ; 189  |
                             9853 ; 190  |union EventTypes {
                             9854 ; 191  |        struct CMessage msg;
                             9855 ; 192  |        struct Button Button ;
                             9856 ; 193  |        struct Message Message;
                             9857 ; 194  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9858 ; 195  |
                             9859 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9860 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9861 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9862 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9863 ; 200  |
                             9864 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9865 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9866 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9867 ; 204  |
                             9868 ; 205  |#if DEBUG
                             9869 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9870 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9871 ; 208  |#else 
                             9872 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             9873 ; 210  |#define DebugBuildAssert(x)    
                             9874 ; 211  |#endif
                             9875 ; 212  |
                             9876 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9877 ; 214  |//  #pragma asm
                             9878 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9879 ; 216  |//  #pragma endasm
                             9880 ; 217  |
                             9881 ; 218  |
                             9882 ; 219  |#ifdef COLOR_262K
                             9883 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             9884 ; 221  |#elif defined(COLOR_65K)
                             9885 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             9886 ; 223  |#else
                             9887 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             9888 ; 225  |#endif
                             9889 ; 226  |    
                             9890 ; 227  |#endif // #ifndef _TYPES_H
                             9891 
                             9893 
                             9894 ; 29   |
                             9895 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9896 ; 31   |
                             9897 ; 32   |//   Trace Buffer STMP Registers 
                             9898 ; 33   |//   Last Updated 6.30.2003 D. Baker
                             9899 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9900 ; 35   |
                             9901 ; 36   |#define HW_TB_BASEADDR (0xF080)
                             9902 ; 37   |
                             9903 ; 38   |
                             9904 ; 39   |
                             9905 ; 40   |
                             9906 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                             9907 ; 42   |
                             9908 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                             9909 ; 44   |
                             9910 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                             9911 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                             9912 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                             9913 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                             9914 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                             9915 ; 50   |
                             9916 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                             9917 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                             9918 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                             9919 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                             9920 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                             9921 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                             9922 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                             9923 ; 58   |
                             9924 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_ENABLE_BITPOS) 
                             9925 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS) 
                             9926 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                             9927 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_BITPOS) 
                             9928 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_EVENT_BITPOS) 
                             9929 ; 64   |
                             9930 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                             9931 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                             9932 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                             9933 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                             9934 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                             9935 ; 70   |
                             9936 ; 71   |typedef union               
                             9937 ; 72   |{
                             9938 ; 73   |    struct {
                             9939 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                             9940 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                             9941 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                             9942 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                             9943 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                             9944 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                             9945 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                             9946 ; 81   |    } B;
                             9947 ; 82   |    int I;
                             9948 ; 83   |    unsigned int U;
                             9949 ; 84   |} tb_cfg_type;
                             9950 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer Configuration Register */
                             9951 ; 86   |
                             9952 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             9953 ; 88   |
                             9954 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                             9955 ; 90   |
                             9956 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                             9957 ; 92   |
                             9958 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                             9959 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                             9960 ; 95   |
                             9961 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BITPOS) 
                             9962 ; 97   |
                             9963 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                             9964 ; 99   |
                             9965 ; 100  |typedef union               
                             9966 ; 101  |{
                             9967 ; 102  |    struct {
                             9968 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                             9969 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                             9970 ; 105  |    } B;
                             9971 ; 106  |    int I;
                             9972 ; 107  |    unsigned int U;
                             9973 ; 108  |} tb_bar_type;
                             9974 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer Base Address Register */
                             9975 ; 110  |
                             9976 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             9977 ; 112  |
                             9978 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                             9979 ; 114  |
                             9980 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                             9981 ; 116  |
                             9982 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                             9983 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                             9984 ; 119  |
                             9985 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BITPOS) 
                             9986 ; 121  |
                             9987 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                             9988 ; 123  |
                             9989 ; 124  |typedef union               
                             9990 ; 125  |{
                             9991 ; 126  |    struct {
                             9992 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                             9993 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                             9994 ; 129  |    } B;
                             9995 ; 130  |    int I;
                             9996 ; 131  |    unsigned int U;
                             9997 ; 132  |} tb_mod_type;
                             9998 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer Modulus Register */
                             9999 ; 134  |
                            10000 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            10001 ; 136  |
                            10002 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            10003 ; 138  |
                            10004 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            10005 ; 140  |
                            10006 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            10007 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            10008 ; 143  |
                            10009 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            10010 ; 145  |
                            10011 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            10012 ; 147  |
                            10013 ; 148  |typedef union               
                            10014 ; 149  |{
                            10015 ; 150  |    struct {
                            10016 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            10017 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            10018 ; 153  |    } B;
                            10019 ; 154  |    int I;
                            10020 ; 155  |    unsigned int U;
                            10021 ; 156  |} tb_cir_type;
                            10022 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer Current Index Register */
                            10023 ; 158  |
                            10024 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            10025 ; 160  |
                            10026 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            10027 ; 162  |
                            10028 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            10029 ; 164  |
                            10030 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            10031 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            10032 ; 167  |
                            10033 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            10034 ; 169  |
                            10035 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            10036 ; 171  |
                            10037 ; 172  |typedef union               
                            10038 ; 173  |{
                            10039 ; 174  |    struct {
                            10040 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            10041 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            10042 ; 177  |    } B;
                            10043 ; 178  |    int I;
                            10044 ; 179  |    unsigned int U;
                            10045 ; 180  |} tb_obc_type;
                            10046 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer one byte code Register */
                            10047 ; 182  |
                            10048 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            10049 ; 184  |
                            10050 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            10051 ; 186  |
                            10052 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            10053 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            10054 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            10055 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            10056 ; 191  |
                            10057 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            10058 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            10059 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            10060 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            10061 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            10062 ; 197  |
                            10063 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STYLE_BITPOS) 
                            10064 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLASS_BITPOS) 
                            10065 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLASS_BITPOS) 
                            10066 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS) 
                            10067 ; 202  |
                            10068 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            10069 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            10070 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            10071 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            10072 ; 207  |
                            10073 ; 208  |typedef union               
                            10074 ; 209  |{
                            10075 ; 210  |    struct {
                            10076 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            10077 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            10078 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            10079 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            10080 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            10081 ; 216  |    } B;
                            10082 ; 217  |    int I;
                            10083 ; 218  |    unsigned int U;
                            10084 ; 219  |} tb_tcs_type;
                            10085 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffer Trigger Command Register */
                            10086 ; 221  |
                            10087 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            10088 ; 223  |
                            10089 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            10090 ; 225  |
                            10091 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            10092 ; 227  |
                            10093 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            10094 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            10095 ; 230  |
                            10096 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH_ADDR_BITPOS) 
                            10097 ; 232  |
                            10098 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            10099 ; 234  |
                            10100 ; 235  |typedef union               
                            10101 ; 236  |{
                            10102 ; 237  |    struct {
                            10103 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            10104 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            10105 ; 240  |    } B;
                            10106 ; 241  |    int I;
                            10107 ; 242  |    unsigned int U;
                            10108 ; 243  |} tb_tvr_type;
                            10109 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffer Trigger Value Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10110 ; 245  |
                            10111 ; 246  |
                            10112 ; 247  |
                            10113 ; 248  |#endif
                            10114 ; 249  |
                            10115 ; 250  |
                            10116 ; 251  |
                            10117 ; 252  |
                            10118 ; 253  |
                            10119 ; 254  |
                            10120 ; 255  |
                            10121 ; 256  |
                            10122 ; 257  |
                            10123 ; 258  |
                            10124 ; 259  |
                            10125 ; 260  |
                            10126 ; 261  |
                            10127 ; 262  |
                            10128 ; 263  |
                            10129 ; 264  |
                            10130 ; 265  |
                            10131 
                            10133 
                            10134 ; 35   |#include "regstimer.h"
                            10135 
                            10137 
                            10138 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10139 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            10140 ; 3    |// Filename: regstimer.inc
                            10141 ; 4    |// Description: Register definitions for  Timers interface
                            10142 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10143 ; 6    |// The following naming conventions are followed in this file.
                            10144 ; 7    |// All registers are named using the format...
                            10145 ; 8    |//     HW_<module>_<regname>
                            10146 ; 9    |// where <module> is the module name which can be any of the following...
                            10147 ; 10   |//     USB20
                            10148 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10149 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10150 ; 13   |// that module)
                            10151 ; 14   |// <regname> is the specific register within that module
                            10152 ; 15   |// We also define the following...
                            10153 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10154 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10155 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10156 ; 19   |// which does something else, and
                            10157 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10158 ; 21   |// which does something else.
                            10159 ; 22   |// Other rules
                            10160 ; 23   |//     All caps
                            10161 ; 24   |//     Numeric identifiers start at 0
                            10162 ; 25   |#if !(defined(regstimerinc))
                            10163 ; 26   |#define regstimerinc 1
                            10164 ; 27   |
                            10165 ; 28   |#include "types.h"
                            10166 
                            10168 
                            10169 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10170 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10171 ; 3    |//
                            10172 ; 4    |// Filename: types.h
                            10173 ; 5    |// Description: Standard data types
                            10174 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10175 ; 7    |
                            10176 ; 8    |#ifndef _TYPES_H
                            10177 ; 9    |#define _TYPES_H
                            10178 ; 10   |
                            10179 ; 11   |// TODO:  move this outta here!
                            10180 ; 12   |#if !defined(NOERROR)
                            10181 ; 13   |#define NOERROR 0
                            10182 ; 14   |#define SUCCESS 0
                            10183 ; 15   |#endif 
                            10184 ; 16   |#if !defined(SUCCESS)
                            10185 ; 17   |#define SUCCESS  0
                            10186 ; 18   |#endif
                            10187 ; 19   |#if !defined(ERROR)
                            10188 ; 20   |#define ERROR   -1
                            10189 ; 21   |#endif
                            10190 ; 22   |#if !defined(FALSE)
                            10191 ; 23   |#define FALSE 0
                            10192 ; 24   |#endif
                            10193 ; 25   |#if !defined(TRUE)
                            10194 ; 26   |#define TRUE  1
                            10195 ; 27   |#endif
                            10196 ; 28   |
                            10197 ; 29   |#if !defined(NULL)
                            10198 ; 30   |#define NULL 0
                            10199 ; 31   |#endif
                            10200 ; 32   |
                            10201 ; 33   |#define MAX_INT     0x7FFFFF
                            10202 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10203 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10204 ; 36   |#define MAX_ULONG   (-1) 
                            10205 ; 37   |
                            10206 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10207 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10208 ; 40   |
                            10209 ; 41   |
                            10210 ; 42   |#define BYTE    unsigned char       // btVarName
                            10211 ; 43   |#define CHAR    signed char         // cVarName
                            10212 ; 44   |#define USHORT  unsigned short      // usVarName
                            10213 ; 45   |#define SHORT   unsigned short      // sVarName
                            10214 ; 46   |#define WORD    unsigned int        // wVarName
                            10215 ; 47   |#define INT     signed int          // iVarName
                            10216 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10217 ; 49   |#define LONG    signed long         // lVarName
                            10218 ; 50   |#define BOOL    unsigned int        // bVarName
                            10219 ; 51   |#define FRACT   _fract              // frVarName
                            10220 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10221 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10222 ; 54   |#define FLOAT   float               // fVarName
                            10223 ; 55   |#define DBL     double              // dVarName
                            10224 ; 56   |#define ENUM    enum                // eVarName
                            10225 ; 57   |#define CMX     _complex            // cmxVarName
                            10226 ; 58   |typedef WORD UCS3;                   // 
                            10227 ; 59   |
                            10228 ; 60   |#define UINT16  unsigned short
                            10229 ; 61   |#define UINT8   unsigned char   
                            10230 ; 62   |#define UINT32  unsigned long
                            10231 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10232 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10233 ; 65   |#define WCHAR   UINT16
                            10234 ; 66   |
                            10235 ; 67   |//UINT128 is 16 bytes or 6 words
                            10236 ; 68   |typedef struct UINT128_3500 {   
                            10237 ; 69   |    int val[6];     
                            10238 ; 70   |} UINT128_3500;
                            10239 ; 71   |
                            10240 ; 72   |#define UINT128   UINT128_3500
                            10241 ; 73   |
                            10242 ; 74   |// Little endian word packed byte strings:   
                            10243 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10244 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10245 ; 77   |// Little endian word packed byte strings:   
                            10246 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10247 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10248 ; 80   |
                            10249 ; 81   |// Declare Memory Spaces To Use When Coding
                            10250 ; 82   |// A. Sector Buffers
                            10251 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10252 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10253 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10254 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10255 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10256 ; 88   |// B. Media DDI Memory
                            10257 ; 89   |#define MEDIA_DDI_MEM _Y
                            10258 ; 90   |
                            10259 ; 91   |
                            10260 ; 92   |
                            10261 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10262 ; 94   |// Examples of circular pointers:
                            10263 ; 95   |//    INT CIRC cpiVarName
                            10264 ; 96   |//    DWORD CIRC cpdwVarName
                            10265 ; 97   |
                            10266 ; 98   |#define RETCODE INT                 // rcVarName
                            10267 ; 99   |
                            10268 ; 100  |// generic bitfield structure
                            10269 ; 101  |struct Bitfield {
                            10270 ; 102  |    unsigned int B0  :1;
                            10271 ; 103  |    unsigned int B1  :1;
                            10272 ; 104  |    unsigned int B2  :1;
                            10273 ; 105  |    unsigned int B3  :1;
                            10274 ; 106  |    unsigned int B4  :1;
                            10275 ; 107  |    unsigned int B5  :1;
                            10276 ; 108  |    unsigned int B6  :1;
                            10277 ; 109  |    unsigned int B7  :1;
                            10278 ; 110  |    unsigned int B8  :1;
                            10279 ; 111  |    unsigned int B9  :1;
                            10280 ; 112  |    unsigned int B10 :1;
                            10281 ; 113  |    unsigned int B11 :1;
                            10282 ; 114  |    unsigned int B12 :1;
                            10283 ; 115  |    unsigned int B13 :1;
                            10284 ; 116  |    unsigned int B14 :1;
                            10285 ; 117  |    unsigned int B15 :1;
                            10286 ; 118  |    unsigned int B16 :1;
                            10287 ; 119  |    unsigned int B17 :1;
                            10288 ; 120  |    unsigned int B18 :1;
                            10289 ; 121  |    unsigned int B19 :1;
                            10290 ; 122  |    unsigned int B20 :1;
                            10291 ; 123  |    unsigned int B21 :1;
                            10292 ; 124  |    unsigned int B22 :1;
                            10293 ; 125  |    unsigned int B23 :1;
                            10294 ; 126  |};
                            10295 ; 127  |
                            10296 ; 128  |union BitInt {
                            10297 ; 129  |        struct Bitfield B;
                            10298 ; 130  |        int        I;
                            10299 ; 131  |};
                            10300 ; 132  |
                            10301 ; 133  |#define MAX_MSG_LENGTH 10
                            10302 ; 134  |struct CMessage
                            10303 ; 135  |{
                            10304 ; 136  |        unsigned int m_uLength;
                            10305 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10306 ; 138  |};
                            10307 ; 139  |
                            10308 ; 140  |typedef struct {
                            10309 ; 141  |    WORD m_wLength;
                            10310 ; 142  |    WORD m_wMessage;
                            10311 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10312 ; 144  |} Message;
                            10313 ; 145  |
                            10314 ; 146  |struct MessageQueueDescriptor
                            10315 ; 147  |{
                            10316 ; 148  |        int *m_pBase;
                            10317 ; 149  |        int m_iModulo;
                            10318 ; 150  |        int m_iSize;
                            10319 ; 151  |        int *m_pHead;
                            10320 ; 152  |        int *m_pTail;
                            10321 ; 153  |};
                            10322 ; 154  |
                            10323 ; 155  |struct ModuleEntry
                            10324 ; 156  |{
                            10325 ; 157  |    int m_iSignaledEventMask;
                            10326 ; 158  |    int m_iWaitEventMask;
                            10327 ; 159  |    int m_iResourceOfCode;
                            10328 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10329 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10330 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10331 ; 163  |    int m_uTimeOutHigh;
                            10332 ; 164  |    int m_uTimeOutLow;
                            10333 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10334 ; 166  |};
                            10335 ; 167  |
                            10336 ; 168  |union WaitMask{
                            10337 ; 169  |    struct B{
                            10338 ; 170  |        unsigned int m_bNone     :1;
                            10339 ; 171  |        unsigned int m_bMessage  :1;
                            10340 ; 172  |        unsigned int m_bTimer    :1;
                            10341 ; 173  |        unsigned int m_bButton   :1;
                            10342 ; 174  |    } B;
                            10343 ; 175  |    int I;
                            10344 ; 176  |} ;
                            10345 ; 177  |
                            10346 ; 178  |
                            10347 ; 179  |struct Button {
                            10348 ; 180  |        WORD wButtonEvent;
                            10349 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10350 ; 182  |};
                            10351 ; 183  |
                            10352 ; 184  |struct Message {
                            10353 ; 185  |        WORD wMsgLength;
                            10354 ; 186  |        WORD wMsgCommand;
                            10355 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10356 ; 188  |};
                            10357 ; 189  |
                            10358 ; 190  |union EventTypes {
                            10359 ; 191  |        struct CMessage msg;
                            10360 ; 192  |        struct Button Button ;
                            10361 ; 193  |        struct Message Message;
                            10362 ; 194  |};
                            10363 ; 195  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10364 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10365 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10366 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10367 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10368 ; 200  |
                            10369 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10370 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10371 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10372 ; 204  |
                            10373 ; 205  |#if DEBUG
                            10374 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10375 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10376 ; 208  |#else 
                            10377 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            10378 ; 210  |#define DebugBuildAssert(x)    
                            10379 ; 211  |#endif
                            10380 ; 212  |
                            10381 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10382 ; 214  |//  #pragma asm
                            10383 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10384 ; 216  |//  #pragma endasm
                            10385 ; 217  |
                            10386 ; 218  |
                            10387 ; 219  |#ifdef COLOR_262K
                            10388 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            10389 ; 221  |#elif defined(COLOR_65K)
                            10390 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10391 ; 223  |#else
                            10392 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10393 ; 225  |#endif
                            10394 ; 226  |    
                            10395 ; 227  |#endif // #ifndef _TYPES_H
                            10396 
                            10398 
                            10399 ; 29   |
                            10400 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10401 ; 31   |//   TIMER STMP Registers 
                            10402 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10403 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            10404 ; 34   |
                            10405 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            10406 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            10407 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            10408 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            10409 ; 39   |
                            10410 ; 40   |#define HW_TIMER_NUMBER_0 0
                            10411 ; 41   |#define HW_TIMER_NUMBER_1 1
                            10412 ; 42   |#define HW_TIMER_NUMBER_2 2
                            10413 ; 43   |#define HW_TIMER_NUMBER_3 3
                            10414 ; 44   |
                            10415 ; 45   |#define HW_TMRCSR 0
                            10416 ; 46   |#define HW_TMRCNTR 1
                            10417 ; 47   |
                            10418 ; 48   |
                            10419 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            10420 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            10421 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            10422 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            10423 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            10424 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            10425 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            10426 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            10427 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            10428 ; 58   |
                            10429 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            10430 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            10431 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            10432 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            10433 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            10434 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            10435 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            10436 ; 66   |
                            10437 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CSR_TIMER_ENABLE_BITPOS)
                            10438 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CSR_TIMER_INT_EN_BITPOS)
                            10439 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BITPOS)
                            10440 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0CSR_TIMER_CONTROL_BITPOS)
                            10441 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CSR_TIMER_STATUS_BITPOS)
                            10442 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TIMER_MODE_BITPOS)
                            10443 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS)
                            10444 ; 74   |
                            10445 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            10446 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            10447 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            10448 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            10449 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            10450 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            10451 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            10452 ; 82   |
                            10453 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            10454 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            10455 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            10456 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            10457 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            10458 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            10459 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            10460 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            10461 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            10462 ; 92   |
                            10463 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            10464 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            10465 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            10466 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            10467 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            10468 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            10469 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            10470 ; 100  |
                            10471 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CSR_TIMER_ENABLE_BITPOS)
                            10472 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CSR_TIMER_INT_EN_BITPOS)
                            10473 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BITPOS)
                            10474 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1CSR_TIMER_CONTROL_BITPOS)
                            10475 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CSR_TIMER_STATUS_BITPOS)
                            10476 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TIMER_MODE_BITPOS)
                            10477 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS)
                            10478 ; 108  |
                            10479 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            10480 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            10481 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            10482 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            10483 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            10484 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            10485 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            10486 ; 116  |
                            10487 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            10488 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            10489 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            10490 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            10491 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            10492 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            10493 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            10494 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            10495 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            10496 ; 126  |
                            10497 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            10498 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            10499 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            10500 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            10501 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            10502 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            10503 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            10504 ; 134  |
                            10505 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CSR_TIMER_ENABLE_BITPOS)
                            10506 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CSR_TIMER_INT_EN_BITPOS)
                            10507 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BITPOS)
                            10508 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2CSR_TIMER_CONTROL_BITPOS)
                            10509 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CSR_TIMER_STATUS_BITPOS)
                            10510 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TIMER_MODE_BITPOS)
                            10511 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS)
                            10512 ; 142  |
                            10513 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            10514 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            10515 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            10516 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            10517 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            10518 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            10519 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            10520 ; 150  |
                            10521 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            10522 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            10523 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            10524 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            10525 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            10526 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            10527 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            10528 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            10529 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            10530 ; 160  |
                            10531 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            10532 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            10533 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            10534 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            10535 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            10536 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            10537 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            10538 ; 168  |
                            10539 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CSR_TIMER_ENABLE_BITPOS)
                            10540 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CSR_TIMER_INT_EN_BITPOS)
                            10541 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BITPOS)
                            10542 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3CSR_TIMER_CONTROL_BITPOS)
                            10543 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CSR_TIMER_STATUS_BITPOS)
                            10544 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TIMER_MODE_BITPOS)
                            10545 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS)
                            10546 ; 176  |
                            10547 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            10548 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            10549 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            10550 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            10551 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            10552 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            10553 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            10554 ; 184  |
                            10555 ; 185  |typedef union               
                            10556 ; 186  |{
                            10557 ; 187  |    struct {
                            10558 ; 188  |       int TIMER_ENABLE              :1;
                            10559 ; 189  |       int TIMER_INT_EN              :1;
                            10560 ; 190  |       int INVERT                    :1;
                            10561 ; 191  |       int TIMER_CONTROL             :3;
                            10562 ; 192  |       int RSVD0                     :1;
                            10563 ; 193  |       int TIMER_STATUS              :1;
                            10564 ; 194  |       int TIMER_MODE                :2;
                            10565 ; 195  |       int RSVD1                     :13;
                            10566 ; 196  |       int CLKGT                     :1;
                            10567 ; 197  |    } B;
                            10568 ; 198  |    int I;
                            10569 ; 199  |} timercsr_type;
                            10570 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /* Timer0 Control Status Register */
                            10571 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /* Timer1 Control Status Register */
                            10572 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /* Timer2 Control Status Register */
                            10573 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /* Timer3 Control Status Register */
                            10574 ; 204  |
                            10575 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            10576 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            10577 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            10578 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            10579 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BITPOS)
                            10580 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            10581 ; 211  |
                            10582 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            10583 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            10584 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            10585 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            10586 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BITPOS)
                            10587 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            10588 ; 218  |
                            10589 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            10590 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            10591 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            10592 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            10593 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BITPOS)
                            10594 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            10595 ; 225  |
                            10596 ; 226  |typedef union               
                            10597 ; 227  |{
                            10598 ; 228  |    struct {
                            10599 ; 229  |       int COUNT                    :24;
                            10600 ; 230  |    } B;
                            10601 ; 231  |    int I;
                            10602 ; 232  |} tmrcntr_type;
                            10603 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /* Timer0 Count Register */
                            10604 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /* Timer1 Count Register */
                            10605 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /* Timer2 Count Register */
                            10606 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /* Timer3 Count Register */
                            10607 ; 237  |
                            10608 ; 238  |
                            10609 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                            10610 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                            10611 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            10612 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            10613 ; 243  |
                            10614 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            10615 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10616 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            10617 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            10618 ; 248  |
                            10619 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            10620 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            10621 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            10622 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            10623 ; 253  |
                            10624 ; 254  |// Timer enable
                            10625 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            10626 ; 256  |// Timer clock gating control
                            10627 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            10628 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            10629 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            10630 ; 260  |#endif
                            10631 ; 261  |
                            10632 ; 262  |
                            10633 ; 263  |
                            10634 ; 264  |
                            10635 
                            10637 
                            10638 ; 36   |#include "regsusb20.h"
                            10639 
                            10641 
                            10642 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10643 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            10644 ; 3    |//;  File        : regsusb20ip.inc
                            10645 ; 4    |//;  Description : USB20 IP Register definition
                            10646 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10647 ; 6    |
                            10648 ; 7    |// The following naming conventions are followed in this file.
                            10649 ; 8    |// All registers are named using the format...
                            10650 ; 9    |//     HW_<module>_<regname>
                            10651 ; 10   |// where <module> is the module name which can be any of the following...
                            10652 ; 11   |//     USB20
                            10653 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            10654 ; 13   |// module name includes a number starting from 0 for the first instance of
                            10655 ; 14   |// that module)
                            10656 ; 15   |// <regname> is the specific register within that module
                            10657 ; 16   |// We also define the following...
                            10658 ; 17   |//     HW_<module>_<regname>_BITPOS
                            10659 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10660 ; 19   |//     HW_<module>_<regname>_SETMASK
                            10661 ; 20   |// which does something else, and
                            10662 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            10663 ; 22   |// which does something else.
                            10664 ; 23   |// Other rules
                            10665 ; 24   |//     All caps
                            10666 ; 25   |//     Numeric identifiers start at 0
                            10667 ; 26   |
                            10668 ; 27   |#if !(defined(regsusb20inc))
                            10669 ; 28   |#define regsusb20inc 1
                            10670 ; 29   |
                            10671 ; 30   |#include "types.h"
                            10672 
                            10674 
                            10675 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10676 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10677 ; 3    |//
                            10678 ; 4    |// Filename: types.h
                            10679 ; 5    |// Description: Standard data types
                            10680 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10681 ; 7    |
                            10682 ; 8    |#ifndef _TYPES_H
                            10683 ; 9    |#define _TYPES_H
                            10684 ; 10   |
                            10685 ; 11   |// TODO:  move this outta here!
                            10686 ; 12   |#if !defined(NOERROR)
                            10687 ; 13   |#define NOERROR 0
                            10688 ; 14   |#define SUCCESS 0
                            10689 ; 15   |#endif 
                            10690 ; 16   |#if !defined(SUCCESS)
                            10691 ; 17   |#define SUCCESS  0
                            10692 ; 18   |#endif
                            10693 ; 19   |#if !defined(ERROR)
                            10694 ; 20   |#define ERROR   -1
                            10695 ; 21   |#endif
                            10696 ; 22   |#if !defined(FALSE)
                            10697 ; 23   |#define FALSE 0
                            10698 ; 24   |#endif
                            10699 ; 25   |#if !defined(TRUE)
                            10700 ; 26   |#define TRUE  1
                            10701 ; 27   |#endif
                            10702 ; 28   |
                            10703 ; 29   |#if !defined(NULL)
                            10704 ; 30   |#define NULL 0
                            10705 ; 31   |#endif
                            10706 ; 32   |
                            10707 ; 33   |#define MAX_INT     0x7FFFFF
                            10708 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10709 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10710 ; 36   |#define MAX_ULONG   (-1) 
                            10711 ; 37   |
                            10712 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10713 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10714 ; 40   |
                            10715 ; 41   |
                            10716 ; 42   |#define BYTE    unsigned char       // btVarName
                            10717 ; 43   |#define CHAR    signed char         // cVarName
                            10718 ; 44   |#define USHORT  unsigned short      // usVarName
                            10719 ; 45   |#define SHORT   unsigned short      // sVarName
                            10720 ; 46   |#define WORD    unsigned int        // wVarName
                            10721 ; 47   |#define INT     signed int          // iVarName
                            10722 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10723 ; 49   |#define LONG    signed long         // lVarName
                            10724 ; 50   |#define BOOL    unsigned int        // bVarName
                            10725 ; 51   |#define FRACT   _fract              // frVarName
                            10726 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10727 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10728 ; 54   |#define FLOAT   float               // fVarName
                            10729 ; 55   |#define DBL     double              // dVarName
                            10730 ; 56   |#define ENUM    enum                // eVarName
                            10731 ; 57   |#define CMX     _complex            // cmxVarName
                            10732 ; 58   |typedef WORD UCS3;                   // 
                            10733 ; 59   |
                            10734 ; 60   |#define UINT16  unsigned short
                            10735 ; 61   |#define UINT8   unsigned char   
                            10736 ; 62   |#define UINT32  unsigned long
                            10737 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10738 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10739 ; 65   |#define WCHAR   UINT16
                            10740 ; 66   |
                            10741 ; 67   |//UINT128 is 16 bytes or 6 words
                            10742 ; 68   |typedef struct UINT128_3500 {   
                            10743 ; 69   |    int val[6];     
                            10744 ; 70   |} UINT128_3500;
                            10745 ; 71   |
                            10746 ; 72   |#define UINT128   UINT128_3500
                            10747 ; 73   |
                            10748 ; 74   |// Little endian word packed byte strings:   
                            10749 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10750 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10751 ; 77   |// Little endian word packed byte strings:   
                            10752 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10753 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10754 ; 80   |
                            10755 ; 81   |// Declare Memory Spaces To Use When Coding
                            10756 ; 82   |// A. Sector Buffers
                            10757 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10758 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10759 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10760 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10761 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10762 ; 88   |// B. Media DDI Memory
                            10763 ; 89   |#define MEDIA_DDI_MEM _Y
                            10764 ; 90   |
                            10765 ; 91   |
                            10766 ; 92   |
                            10767 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10768 ; 94   |// Examples of circular pointers:
                            10769 ; 95   |//    INT CIRC cpiVarName
                            10770 ; 96   |//    DWORD CIRC cpdwVarName
                            10771 ; 97   |
                            10772 ; 98   |#define RETCODE INT                 // rcVarName
                            10773 ; 99   |
                            10774 ; 100  |// generic bitfield structure
                            10775 ; 101  |struct Bitfield {
                            10776 ; 102  |    unsigned int B0  :1;
                            10777 ; 103  |    unsigned int B1  :1;
                            10778 ; 104  |    unsigned int B2  :1;
                            10779 ; 105  |    unsigned int B3  :1;
                            10780 ; 106  |    unsigned int B4  :1;
                            10781 ; 107  |    unsigned int B5  :1;
                            10782 ; 108  |    unsigned int B6  :1;
                            10783 ; 109  |    unsigned int B7  :1;
                            10784 ; 110  |    unsigned int B8  :1;
                            10785 ; 111  |    unsigned int B9  :1;
                            10786 ; 112  |    unsigned int B10 :1;
                            10787 ; 113  |    unsigned int B11 :1;
                            10788 ; 114  |    unsigned int B12 :1;
                            10789 ; 115  |    unsigned int B13 :1;
                            10790 ; 116  |    unsigned int B14 :1;
                            10791 ; 117  |    unsigned int B15 :1;
                            10792 ; 118  |    unsigned int B16 :1;
                            10793 ; 119  |    unsigned int B17 :1;
                            10794 ; 120  |    unsigned int B18 :1;
                            10795 ; 121  |    unsigned int B19 :1;
                            10796 ; 122  |    unsigned int B20 :1;
                            10797 ; 123  |    unsigned int B21 :1;
                            10798 ; 124  |    unsigned int B22 :1;
                            10799 ; 125  |    unsigned int B23 :1;
                            10800 ; 126  |};
                            10801 ; 127  |
                            10802 ; 128  |union BitInt {
                            10803 ; 129  |        struct Bitfield B;
                            10804 ; 130  |        int        I;
                            10805 ; 131  |};
                            10806 ; 132  |
                            10807 ; 133  |#define MAX_MSG_LENGTH 10
                            10808 ; 134  |struct CMessage
                            10809 ; 135  |{
                            10810 ; 136  |        unsigned int m_uLength;
                            10811 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10812 ; 138  |};
                            10813 ; 139  |
                            10814 ; 140  |typedef struct {
                            10815 ; 141  |    WORD m_wLength;
                            10816 ; 142  |    WORD m_wMessage;
                            10817 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10818 ; 144  |} Message;
                            10819 ; 145  |
                            10820 ; 146  |struct MessageQueueDescriptor
                            10821 ; 147  |{
                            10822 ; 148  |        int *m_pBase;
                            10823 ; 149  |        int m_iModulo;
                            10824 ; 150  |        int m_iSize;
                            10825 ; 151  |        int *m_pHead;
                            10826 ; 152  |        int *m_pTail;
                            10827 ; 153  |};
                            10828 ; 154  |
                            10829 ; 155  |struct ModuleEntry
                            10830 ; 156  |{
                            10831 ; 157  |    int m_iSignaledEventMask;
                            10832 ; 158  |    int m_iWaitEventMask;
                            10833 ; 159  |    int m_iResourceOfCode;
                            10834 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10835 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10836 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10837 ; 163  |    int m_uTimeOutHigh;
                            10838 ; 164  |    int m_uTimeOutLow;
                            10839 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10840 ; 166  |};
                            10841 ; 167  |
                            10842 ; 168  |union WaitMask{
                            10843 ; 169  |    struct B{
                            10844 ; 170  |        unsigned int m_bNone     :1;
                            10845 ; 171  |        unsigned int m_bMessage  :1;
                            10846 ; 172  |        unsigned int m_bTimer    :1;
                            10847 ; 173  |        unsigned int m_bButton   :1;
                            10848 ; 174  |    } B;
                            10849 ; 175  |    int I;
                            10850 ; 176  |} ;
                            10851 ; 177  |
                            10852 ; 178  |
                            10853 ; 179  |struct Button {
                            10854 ; 180  |        WORD wButtonEvent;
                            10855 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10856 ; 182  |};
                            10857 ; 183  |
                            10858 ; 184  |struct Message {
                            10859 ; 185  |        WORD wMsgLength;
                            10860 ; 186  |        WORD wMsgCommand;
                            10861 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10862 ; 188  |};
                            10863 ; 189  |
                            10864 ; 190  |union EventTypes {
                            10865 ; 191  |        struct CMessage msg;
                            10866 ; 192  |        struct Button Button ;
                            10867 ; 193  |        struct Message Message;
                            10868 ; 194  |};
                            10869 ; 195  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10870 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10871 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10872 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10873 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10874 ; 200  |
                            10875 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10876 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10877 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10878 ; 204  |
                            10879 ; 205  |#if DEBUG
                            10880 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10881 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10882 ; 208  |#else 
                            10883 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            10884 ; 210  |#define DebugBuildAssert(x)    
                            10885 ; 211  |#endif
                            10886 ; 212  |
                            10887 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10888 ; 214  |//  #pragma asm
                            10889 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10890 ; 216  |//  #pragma endasm
                            10891 ; 217  |
                            10892 ; 218  |
                            10893 ; 219  |#ifdef COLOR_262K
                            10894 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            10895 ; 221  |#elif defined(COLOR_65K)
                            10896 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10897 ; 223  |#else
                            10898 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10899 ; 225  |#endif
                            10900 ; 226  |    
                            10901 ; 227  |#endif // #ifndef _TYPES_H
                            10902 
                            10904 
                            10905 ; 31   |
                            10906 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10907 ; 33   |//   USB2.0 STMP Registers 
                            10908 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10909 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            10910 ; 36   |
                            10911 ; 37   |
                            10912 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            10913 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            10914 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            10915 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            10916 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            10917 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            10918 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            10919 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            10920 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            10921 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            10922 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            10923 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            10924 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            10925 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            10926 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            10927 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            10928 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            10929 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            10930 ; 56   |
                            10931 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            10932 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            10933 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            10934 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            10935 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            10936 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            10937 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            10938 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            10939 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            10940 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            10941 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            10942 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            10943 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            10944 ; 70   |
                            10945 ; 71   |
                            10946 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            10947 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            10948 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            10949 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            10950 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            10951 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            10952 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            10953 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            10954 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            10955 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            10956 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            10957 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            10958 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            10959 ; 85   |
                            10960 ; 86   |typedef union               
                            10961 ; 87   |{
                            10962 ; 88   |    struct {
                            10963 ; 89   |        int USBEN          :1;
                            10964 ; 90   |        int WAKEUPIRQ      :1;
                            10965 ; 91   |        int WAKEUPIE       :1;
                            10966 ; 92   |        int VBUSCXIRQ      :1;
                            10967 ; 93   |        int VBUSCXIE       :1;
                            10968 ; 94   |        int VBUSDISCXIRQ   :1;
                            10969 ; 95   |        int VBUSDISCXIE    :1;
                            10970 ; 96   |        int CLKOFF         :1;
                            10971 ; 97   |        int SUSP           :1;
                            10972 ; 98   |        int SUSPF          :1;
                            10973 ; 99   |        int UTMITST        :1;
                            10974 ; 100  |        int ARCCONNECT     :1;
                            10975 ; 101  |        int PLUGGEDIN_EN   :1;
                            10976 ; 102  |        int PLUGGEDIN      :1;
                            10977 ; 103  |        int                :8;
                            10978 ; 104  |        int HOSTDISCONNECT :1;
                            10979 ; 105  |        int VBUSSENSE      :1;
                            10980 ; 106  |    } B;
                            10981 ; 107  |    int I;
                            10982 ; 108  |} usbcsr_type;
                            10983 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control / Status Register */
                            10984 ; 110  |
                            10985 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            10986 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            10987 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            10988 ; 114  |
                            10989 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            10990 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            10991 ; 117  |
                            10992 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            10993 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            10994 ; 120  |
                            10995 ; 121  |typedef union               
                            10996 ; 122  |{
                            10997 ; 123  |    struct {
                            10998 ; 124  |        int ADD            :16;
                            10999 ; 125  |        int MEM            :2;
                            11000 ; 126  |        int                :6;
                            11001 ; 127  |    } B;
                            11002 ; 128  |    int I;
                            11003 ; 129  |} usbdmaoff_type;
                            11004 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            11005 ; 131  |
                            11006 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            11007 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            11008 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            11009 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            11010 ; 136  |
                            11011 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            11012 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            11013 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            11014 ; 140  |
                            11015 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            11016 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            11017 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            11018 ; 144  |
                            11019 ; 145  |typedef union               
                            11020 ; 146  |{
                            11021 ; 147  |    struct {
                            11022 ; 148  |        int ADD            :9;
                            11023 ; 149  |        int                :7;
                            11024 ; 150  |        int RWB            :1;
                            11025 ; 151  |        int                :14;
                            11026 ; 152  |        int KICK           :1;
                            11027 ; 153  |    } B;
                            11028 ; 154  |    int I;
                            11029 ; 155  |} usbarcaccess_type;
                            11030 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            11031 ; 157  |
                            11032 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            11033 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            11034 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            11035 ; 161  |
                            11036 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            11037 ; 163  |
                            11038 ; 164  |typedef union               
                            11039 ; 165  |{
                            11040 ; 166  |    struct {
                            11041 ; 167  |        int DATA           :16;
                            11042 ; 168  |        int                :8;
                            11043 ; 169  |    } B;
                            11044 ; 170  |    int I;
                            11045 ; 171  |} usbarcdatalow_type;
                            11046 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                            11047 ; 173  |
                            11048 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            11049 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            11050 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            11051 ; 177  |
                            11052 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            11053 ; 179  |
                            11054 ; 180  |typedef union               
                            11055 ; 181  |{
                            11056 ; 182  |    struct {
                            11057 ; 183  |        int DATA           :16;
                            11058 ; 184  |        int                :8;
                            11059 ; 185  |    } B;
                            11060 ; 186  |    int I;
                            11061 ; 187  |} usbarcdatahigh_type;
                            11062 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))    
                            11063 ; 189  |
                            11064 ; 190  |
                            11065 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11066 ; 192  |//   USB2.0 ARC Registers 
                            11067 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11068 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            11069 ; 195  |
                            11070 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            11071 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            11072 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            11073 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            11074 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            11075 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            11076 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            11077 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            11078 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            11079 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            11080 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            11081 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            11082 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            11083 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            11084 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            11085 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            11086 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            11087 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            11088 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            11089 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            11090 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            11091 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            11092 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            11093 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            11094 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            11095 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            11096 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            11097 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            11098 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            11099 ; 225  |
                            11100 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            11101 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            11102 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            11103 ; 229  |
                            11104 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            11105 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            11106 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            11107 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            11108 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            11109 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            11110 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            11111 ; 237  |
                            11112 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            11113 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            11114 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            11115 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            11116 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            11117 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            11118 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            11119 ; 245  |
                            11120 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            11121 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11122 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            11123 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            11124 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            11125 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            11126 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            11127 ; 253  |
                            11128 ; 254  |typedef union               
                            11129 ; 255  |{
                            11130 ; 256  |    struct {
                            11131 ; 257  |        int N_PORTS         :4;
                            11132 ; 258  |        int PPC             :1;
                            11133 ; 259  |        int                 :3;
                            11134 ; 260  |        int N_PCC           :4;
                            11135 ; 261  |        int N_CC            :4;
                            11136 ; 262  |        int PI              :1;
                            11137 ; 263  |        int                 :3;
                            11138 ; 264  |        int N_PTT           :4;
                            11139 ; 265  |        int N_TT            :4;
                            11140 ; 266  |        int                 :20;
                            11141 ; 267  |    } B;
                            11142 ; 268  |    DWORD I;
                            11143 ; 269  |} hcsparams_type;
                            11144 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            11145 ; 271  |
                            11146 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            11147 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            11148 ; 274  |
                            11149 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            11150 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            11151 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            11152 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            11153 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            11154 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            11155 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            11156 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            11157 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            11158 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            11159 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            11160 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            11161 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            11162 ; 288  |
                            11163 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            11164 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            11165 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            11166 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            11167 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            11168 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            11169 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            11170 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            11171 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            11172 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            11173 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            11174 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            11175 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            11176 ; 302  |
                            11177 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            11178 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            11179 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            11180 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            11181 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            11182 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            11183 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            11184 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            11185 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            11186 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            11187 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            11188 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            11189 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            11190 ; 316  |
                            11191 ; 317  |typedef union               
                            11192 ; 318  |{
                            11193 ; 319  |    struct {
                            11194 ; 320  |        int RS              :1;
                            11195 ; 321  |        int RST             :1;
                            11196 ; 322  |        int FS0             :1;
                            11197 ; 323  |        int FS1             :1;
                            11198 ; 324  |        int PSE             :1;
                            11199 ; 325  |        int ASE             :1;
                            11200 ; 326  |        int IAA             :1;
                            11201 ; 327  |        int LR              :1;
                            11202 ; 328  |        int ASP0            :1;
                            11203 ; 329  |        int ASP1            :1;
                            11204 ; 330  |        int                 :1;
                            11205 ; 331  |        int ASPE            :1;
                            11206 ; 332  |        int                 :3;
                            11207 ; 333  |        int FS2             :1;
                            11208 ; 334  |        int ITC             :8;
                            11209 ; 335  |        int                 :24;
                            11210 ; 336  |    } B;
                            11211 ; 337  |    DWORD I;
                            11212 ; 338  |} usbcmd_type;
                            11213 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            11214 ; 340  |
                            11215 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            11216 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            11217 ; 343  |
                            11218 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            11219 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            11220 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            11221 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            11222 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            11223 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            11224 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            11225 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            11226 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            11227 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            11228 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            11229 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            11230 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            11231 ; 357  |
                            11232 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            11233 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            11234 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            11235 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            11236 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            11237 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            11238 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            11239 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            11240 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            11241 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            11242 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            11243 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            11244 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            11245 ; 371  |
                            11246 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            11247 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            11248 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            11249 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            11250 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            11251 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            11252 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            11253 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            11254 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            11255 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            11256 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                            11257 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            11258 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            11259 ; 385  |
                            11260 ; 386  |
                            11261 ; 387  |typedef union               
                            11262 ; 388  |{
                            11263 ; 389  |    struct {
                            11264 ; 390  |        int UI              :1;
                            11265 ; 391  |        int UEI             :1;
                            11266 ; 392  |        int PCI             :1;
                            11267 ; 393  |        int FRI             :1;
                            11268 ; 394  |        int SEI             :1;
                            11269 ; 395  |        int AAI             :1;
                            11270 ; 396  |        int URI             :1;
                            11271 ; 397  |        int STI             :1;
                            11272 ; 398  |        int SLI             :1;
                            11273 ; 399  |        int                 :3;
                            11274 ; 400  |        int HCH             :1;
                            11275 ; 401  |        int RCL             :1;
                            11276 ; 402  |        int PS              :1;
                            11277 ; 403  |        int AS              :1;
                            11278 ; 404  |        int                 :24;
                            11279 ; 405  |    } B;
                            11280 ; 406  |    DWORD I;
                            11281 ; 407  |} usbsts_type;
                            11282 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            11283 ; 409  |
                            11284 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            11285 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            11286 ; 412  |
                            11287 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            11288 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            11289 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            11290 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            11291 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            11292 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            11293 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            11294 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            11295 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            11296 ; 422  |
                            11297 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            11298 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            11299 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            11300 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            11301 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            11302 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            11303 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            11304 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            11305 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            11306 ; 432  |
                            11307 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            11308 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            11309 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            11310 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            11311 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            11312 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            11313 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            11314 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            11315 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            11316 ; 442  |
                            11317 ; 443  |
                            11318 ; 444  |typedef union               
                            11319 ; 445  |{
                            11320 ; 446  |    struct {
                            11321 ; 447  |        int UE              :1;
                            11322 ; 448  |        int UEE             :1;
                            11323 ; 449  |        int PCE             :1;
                            11324 ; 450  |        int FRE             :1;
                            11325 ; 451  |        int SEE             :1;
                            11326 ; 452  |        int AAE             :1;
                            11327 ; 453  |        int URE             :1;
                            11328 ; 454  |        int STE             :1;
                            11329 ; 455  |        int SLE             :1;
                            11330 ; 456  |        int                 :39;
                            11331 ; 457  |    } B;
                            11332 ; 458  |    DWORD I;
                            11333 ; 459  |} usbintr_type;
                            11334 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            11335 ; 461  |
                            11336 ; 462  |
                            11337 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            11338 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            11339 ; 465  |
                            11340 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            11341 ; 467  |
                            11342 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            11343 ; 469  |
                            11344 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            11345 ; 471  |
                            11346 ; 472  |typedef union               
                            11347 ; 473  |{
                            11348 ; 474  |    struct {
                            11349 ; 475  |        int                 :25;
                            11350 ; 476  |        int ADD             :7;
                            11351 ; 477  |        int                 :16;
                            11352 ; 478  |    } B;
                            11353 ; 479  |    DWORD I;
                            11354 ; 480  |} devaddr_type;
                            11355 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            11356 ; 482  |
                            11357 ; 483  |
                            11358 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            11359 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            11360 ; 486  |
                            11361 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            11362 ; 488  |
                            11363 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            11364 ; 490  |
                            11365 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            11366 ; 492  |
                            11367 ; 493  |typedef union               
                            11368 ; 494  |{
                            11369 ; 495  |    struct {
                            11370 ; 496  |        int                 :10;
                            11371 ; 497  |        int ADD             :22;
                            11372 ; 498  |        int                 :16;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11373 ; 499  |    } B;
                            11374 ; 500  |    DWORD I;
                            11375 ; 501  |} endptlistaddr_type;
                            11376 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158))    
                            11377 ; 503  |
                            11378 ; 504  |
                            11379 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            11380 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            11381 ; 507  |
                            11382 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            11383 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            11384 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            11385 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            11386 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            11387 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            11388 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            11389 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            11390 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            11391 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            11392 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            11393 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            11394 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            11395 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            11396 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            11397 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            11398 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            11399 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            11400 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            11401 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            11402 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            11403 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            11404 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            11405 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            11406 ; 532  |
                            11407 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            11408 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            11409 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            11410 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            11411 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            11412 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            11413 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            11414 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            11415 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            11416 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            11417 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            11418 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            11419 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            11420 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            11421 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            11422 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            11423 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            11424 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            11425 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            11426 ; 552  |
                            11427 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            11428 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            11429 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            11430 ; 556  |
                            11431 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            11432 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            11433 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            11434 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            11435 ; 561  |
                            11436 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            11437 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            11438 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            11439 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            11440 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            11441 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            11442 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            11443 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            11444 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            11445 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            11446 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            11447 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            11448 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            11449 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            11450 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            11451 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            11452 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            11453 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            11454 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            11455 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            11456 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            11457 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            11458 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            11459 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            11460 ; 586  |
                            11461 ; 587  |typedef union               
                            11462 ; 588  |{
                            11463 ; 589  |    struct {
                            11464 ; 590  |        int CCS             :1;
                            11465 ; 591  |        int CSC             :1;
                            11466 ; 592  |        int PE              :1;
                            11467 ; 593  |        int PEC             :1;
                            11468 ; 594  |        int OCA             :1;
                            11469 ; 595  |        int OCC             :1;
                            11470 ; 596  |        int FPR             :1;
                            11471 ; 597  |        int SUSP            :1;
                            11472 ; 598  |        int PR              :1;
                            11473 ; 599  |        int HSP             :1;
                            11474 ; 600  |        int LS              :2;
                            11475 ; 601  |        int PP              :1;
                            11476 ; 602  |        int PO              :1;
                            11477 ; 603  |        int PIC             :2;
                            11478 ; 604  |        int PTC             :4;
                            11479 ; 605  |        int WKCN            :1;
                            11480 ; 606  |        int WKDS            :1;
                            11481 ; 607  |        int WKOC            :1;
                            11482 ; 608  |        int PHCD            :1;
                            11483 ; 609  |        int PFSC            :1;
                            11484 ; 610  |        int                 :1;
                            11485 ; 611  |        int PSPD            :2;
                            11486 ; 612  |        int                 :1;
                            11487 ; 613  |        int PTW             :1;
                            11488 ; 614  |        int STS             :1;
                            11489 ; 615  |        int PTS             :1;
                            11490 ; 616  |        int                 :16;
                            11491 ; 617  |    } B;
                            11492 ; 618  |    DWORD I;
                            11493 ; 619  |} portsc1_type;
                            11494 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            11495 ; 621  |
                            11496 ; 622  |
                            11497 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            11498 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            11499 ; 625  |
                            11500 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            11501 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            11502 ; 628  |
                            11503 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            11504 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            11505 ; 631  |
                            11506 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            11507 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                            11508 ; 634  |
                            11509 ; 635  |typedef union               
                            11510 ; 636  |{
                            11511 ; 637  |    struct {
                            11512 ; 638  |        int CM              :2;
                            11513 ; 639  |        int ES              :1;
                            11514 ; 640  |        int                 :46;
                            11515 ; 641  |    } B;
                            11516 ; 642  |    DWORD I;
                            11517 ; 643  |} usbmode_type;
                            11518 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            11519 ; 645  |
                            11520 ; 646  |
                            11521 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            11522 ; 648  |//  The following endpoint equates are common for the following registers
                            11523 ; 649  |
                            11524 ; 650  |#define ENDPOINT0_BITPOS (0)
                            11525 ; 651  |#define ENDPOINT1_BITPOS (1)
                            11526 ; 652  |#define ENDPOINT2_BITPOS (2)
                            11527 ; 653  |#define ENDPOINT3_BITPOS (3)
                            11528 ; 654  |#define ENDPOINT4_BITPOS (4)
                            11529 ; 655  |#define ENDPOINT5_BITPOS (5)
                            11530 ; 656  |#define ENDPOINT6_BITPOS (6)
                            11531 ; 657  |#define ENDPOINT7_BITPOS (7)
                            11532 ; 658  |#define ENDPOINT8_BITPOS (8)
                            11533 ; 659  |#define ENDPOINT9_BITPOS (9)
                            11534 ; 660  |#define ENDPOINT10_BITPOS (10)
                            11535 ; 661  |#define ENDPOINT11_BITPOS (11)
                            11536 ; 662  |#define ENDPOINT12_BITPOS (12)
                            11537 ; 663  |#define ENDPOINT13_BITPOS (13)
                            11538 ; 664  |#define ENDPOINT14_BITPOS (14)
                            11539 ; 665  |#define ENDPOINT15_BITPOS (15)
                            11540 ; 666  |
                            11541 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            11542 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            11543 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            11544 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            11545 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            11546 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            11547 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            11548 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            11549 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            11550 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            11551 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            11552 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            11553 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            11554 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            11555 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            11556 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            11557 ; 683  |
                            11558 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            11559 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            11560 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            11561 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            11562 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            11563 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            11564 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            11565 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            11566 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            11567 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            11568 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            11569 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            11570 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            11571 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            11572 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            11573 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            11574 ; 700  |
                            11575 ; 701  |typedef union               
                            11576 ; 702  |{
                            11577 ; 703  |    struct {
                            11578 ; 704  |        int EP0              :1;
                            11579 ; 705  |        int EP1              :1;
                            11580 ; 706  |        int EP2              :1;
                            11581 ; 707  |        int EP3              :1;
                            11582 ; 708  |        int EP4              :1;
                            11583 ; 709  |        int EP5              :1;
                            11584 ; 710  |        int EP6              :1;
                            11585 ; 711  |        int EP7              :1;
                            11586 ; 712  |        int EP8              :1;
                            11587 ; 713  |        int EP9              :1;
                            11588 ; 714  |        int EP10             :1;
                            11589 ; 715  |        int EP11             :1;
                            11590 ; 716  |        int EP12             :1;
                            11591 ; 717  |        int EP13             :1;
                            11592 ; 718  |        int EP14             :1;
                            11593 ; 719  |        int EP15             :1;
                            11594 ; 720  |        int                  :32;
                            11595 ; 721  |    } B;
                            11596 ; 722  |    DWORD I;
                            11597 ; 723  |} endpsetupstat_type;
                            11598 ; 724  |
                            11599 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac))    
                            11600 ; 726  |
                            11601 ; 727  |typedef union               
                            11602 ; 728  |{
                            11603 ; 729  |    struct {
                            11604 ; 730  |        int EP0              :1;
                            11605 ; 731  |        int EP1              :1;
                            11606 ; 732  |        int EP2              :1;
                            11607 ; 733  |        int EP3              :1;
                            11608 ; 734  |        int EP4              :1;
                            11609 ; 735  |        int EP5              :1;
                            11610 ; 736  |        int EP6              :1;
                            11611 ; 737  |        int EP7              :1;
                            11612 ; 738  |        int EP8              :1;
                            11613 ; 739  |        int EP9              :1;
                            11614 ; 740  |        int EP10             :1;
                            11615 ; 741  |        int EP11             :1;
                            11616 ; 742  |        int EP12             :1;
                            11617 ; 743  |        int EP13             :1;
                            11618 ; 744  |        int EP14             :1;
                            11619 ; 745  |        int EP15             :1;
                            11620 ; 746  |        int                  :8;
                            11621 ; 747  |    } B;
                            11622 ; 748  |    WORD I;
                            11623 ; 749  |} endpt_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11624 
                            11662 
                            11663 ; 750  |
                            11664 ; 751  |typedef union
                            11665 ; 752  |{
                            11666 ; 753  |   struct {
                            11667 ; 754  |       endpt_type  RX;
                            11668 ; 755  |       endpt_type  TX;
                            11669 ; 756  |   } W;
                            11670 ; 757  |   DWORD DW;
                            11671 ; 758  |} endptrxtx_type;
                            11672 ; 759  |
                            11673 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))    
                            11674 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))    
                            11675 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))    
                            11676 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))    
                            11677 ; 764  |
                            11678 ; 765  |
                            11679 ; 766  |
                            11680 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            11681 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            11682 ; 769  |
                            11683 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            11684 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            11685 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            11686 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            11687 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            11688 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            11689 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            11690 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            11691 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            11692 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            11693 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            11694 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            11695 ; 782  |
                            11696 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            11697 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            11698 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            11699 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            11700 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            11701 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            11702 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            11703 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            11704 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            11705 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            11706 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            11707 ; 794  |
                            11708 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            11709 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11710 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            11711 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11712 ; 799  |
                            11713 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            11714 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            11715 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            11716 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            11717 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            11718 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            11719 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            11720 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            11721 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            11722 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            11723 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            11724 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            11725 ; 812  |
                            11726 ; 813  |
                            11727 ; 814  |typedef union               
                            11728 ; 815  |{
                            11729 ; 816  |    struct {
                            11730 ; 817  |        int RXS             :1;
                            11731 ; 818  |        int RXD             :1;
                            11732 ; 819  |        int RXT             :2;
                            11733 ; 820  |        int                 :1;
                            11734 ; 821  |        int RXI             :1;
                            11735 ; 822  |        int RXR             :1;
                            11736 ; 823  |        int RXE             :1;
                            11737 ; 824  |        int                 :8;
                            11738 ; 825  |        int TXS             :1;
                            11739 ; 826  |        int TXD             :1;
                            11740 ; 827  |        int TXT             :2;
                            11741 ; 828  |        int                 :1;
                            11742 ; 829  |        int TXI             :1;
                            11743 ; 830  |        int TXR             :1;
                            11744 ; 831  |        int TXE             :1;
                            11745 ; 832  |        int                 :24;
                            11746 ; 833  |    } B;
                            11747 ; 834  |    DWORD I;
                            11748 ; 835  |} endptctrl_type;
                            11749 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)))    
                            11750 ; 837  |
                            11751 ; 838  |#endif
                            11752 ; 839  |
                            11753 ; 840  |
                            11754 
                            11756 
                            11757 ; 37   |#include "regsusb20phy.h"
                            11758 
                            11760 
                            11761 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11762 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            11763 ; 3    |//;  File        : regsusbphy.inc
                            11764 ; 4    |//;  Description : USB20 PHY Register definition
                            11765 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            11766 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11767 ; 7    |
                            11768 ; 8    |// The following naming conventions are followed in this file.
                            11769 ; 9    |// All registers are named using the format...
                            11770 ; 10   |//     HW_<module>_<regname>
                            11771 ; 11   |// where <module> is the module name which can be any of the following...
                            11772 ; 12   |//     USB20
                            11773 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            11774 ; 14   |// module name includes a number starting from 0 for the first instance of
                            11775 ; 15   |// that module)
                            11776 ; 16   |// <regname> is the specific register within that module
                            11777 ; 17   |// We also define the following...
                            11778 ; 18   |//     HW_<module>_<regname>_BITPOS
                            11779 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11780 ; 20   |//     HW_<module>_<regname>_SETMASK
                            11781 ; 21   |// which does something else, and
                            11782 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            11783 ; 23   |// which does something else.
                            11784 ; 24   |// Other rules
                            11785 ; 25   |//     All caps
                            11786 ; 26   |//     Numeric identifiers start at 0
                            11787 ; 27   |
                            11788 ; 28   |#if !(defined(regsusbphyinc))
                            11789 ; 29   |#define regsusbphyinc 1
                            11790 ; 30   |
                            11791 ; 31   |#include "types.h"
                            11792 
                            11794 
                            11795 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11796 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11797 ; 3    |//
                            11798 ; 4    |// Filename: types.h
                            11799 ; 5    |// Description: Standard data types
                            11800 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11801 ; 7    |
                            11802 ; 8    |#ifndef _TYPES_H
                            11803 ; 9    |#define _TYPES_H
                            11804 ; 10   |
                            11805 ; 11   |// TODO:  move this outta here!
                            11806 ; 12   |#if !defined(NOERROR)
                            11807 ; 13   |#define NOERROR 0
                            11808 ; 14   |#define SUCCESS 0
                            11809 ; 15   |#endif 
                            11810 ; 16   |#if !defined(SUCCESS)
                            11811 ; 17   |#define SUCCESS  0
                            11812 ; 18   |#endif
                            11813 ; 19   |#if !defined(ERROR)
                            11814 ; 20   |#define ERROR   -1
                            11815 ; 21   |#endif
                            11816 ; 22   |#if !defined(FALSE)
                            11817 ; 23   |#define FALSE 0
                            11818 ; 24   |#endif
                            11819 ; 25   |#if !defined(TRUE)
                            11820 ; 26   |#define TRUE  1
                            11821 ; 27   |#endif
                            11822 ; 28   |
                            11823 ; 29   |#if !defined(NULL)
                            11824 ; 30   |#define NULL 0
                            11825 ; 31   |#endif
                            11826 ; 32   |
                            11827 ; 33   |#define MAX_INT     0x7FFFFF
                            11828 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11829 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11830 ; 36   |#define MAX_ULONG   (-1) 
                            11831 ; 37   |
                            11832 ; 38   |#define WORD_SIZE   24              // word size in bits
                            11833 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11834 ; 40   |
                            11835 ; 41   |
                            11836 ; 42   |#define BYTE    unsigned char       // btVarName
                            11837 ; 43   |#define CHAR    signed char         // cVarName
                            11838 ; 44   |#define USHORT  unsigned short      // usVarName
                            11839 ; 45   |#define SHORT   unsigned short      // sVarName
                            11840 ; 46   |#define WORD    unsigned int        // wVarName
                            11841 ; 47   |#define INT     signed int          // iVarName
                            11842 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11843 ; 49   |#define LONG    signed long         // lVarName
                            11844 ; 50   |#define BOOL    unsigned int        // bVarName
                            11845 ; 51   |#define FRACT   _fract              // frVarName
                            11846 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11847 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11848 ; 54   |#define FLOAT   float               // fVarName
                            11849 ; 55   |#define DBL     double              // dVarName
                            11850 ; 56   |#define ENUM    enum                // eVarName
                            11851 ; 57   |#define CMX     _complex            // cmxVarName
                            11852 ; 58   |typedef WORD UCS3;                   // 
                            11853 ; 59   |
                            11854 ; 60   |#define UINT16  unsigned short
                            11855 ; 61   |#define UINT8   unsigned char   
                            11856 ; 62   |#define UINT32  unsigned long
                            11857 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            11858 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            11859 ; 65   |#define WCHAR   UINT16
                            11860 ; 66   |
                            11861 ; 67   |//UINT128 is 16 bytes or 6 words
                            11862 ; 68   |typedef struct UINT128_3500 {   
                            11863 ; 69   |    int val[6];     
                            11864 ; 70   |} UINT128_3500;
                            11865 ; 71   |
                            11866 ; 72   |#define UINT128   UINT128_3500
                            11867 ; 73   |
                            11868 ; 74   |// Little endian word packed byte strings:   
                            11869 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11870 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11871 ; 77   |// Little endian word packed byte strings:   
                            11872 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11873 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11874 ; 80   |
                            11875 ; 81   |// Declare Memory Spaces To Use When Coding
                            11876 ; 82   |// A. Sector Buffers
                            11877 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11878 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11879 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11880 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11881 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11882 ; 88   |// B. Media DDI Memory
                            11883 ; 89   |#define MEDIA_DDI_MEM _Y
                            11884 ; 90   |
                            11885 ; 91   |
                            11886 ; 92   |
                            11887 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11888 ; 94   |// Examples of circular pointers:
                            11889 ; 95   |//    INT CIRC cpiVarName
                            11890 ; 96   |//    DWORD CIRC cpdwVarName
                            11891 ; 97   |
                            11892 ; 98   |#define RETCODE INT                 // rcVarName
                            11893 ; 99   |
                            11894 ; 100  |// generic bitfield structure
                            11895 ; 101  |struct Bitfield {
                            11896 ; 102  |    unsigned int B0  :1;
                            11897 ; 103  |    unsigned int B1  :1;
                            11898 ; 104  |    unsigned int B2  :1;
                            11899 ; 105  |    unsigned int B3  :1;
                            11900 ; 106  |    unsigned int B4  :1;
                            11901 ; 107  |    unsigned int B5  :1;
                            11902 ; 108  |    unsigned int B6  :1;
                            11903 ; 109  |    unsigned int B7  :1;
                            11904 ; 110  |    unsigned int B8  :1;
                            11905 ; 111  |    unsigned int B9  :1;
                            11906 ; 112  |    unsigned int B10 :1;
                            11907 ; 113  |    unsigned int B11 :1;
                            11908 ; 114  |    unsigned int B12 :1;
                            11909 ; 115  |    unsigned int B13 :1;
                            11910 ; 116  |    unsigned int B14 :1;
                            11911 ; 117  |    unsigned int B15 :1;
                            11912 ; 118  |    unsigned int B16 :1;
                            11913 ; 119  |    unsigned int B17 :1;
                            11914 ; 120  |    unsigned int B18 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11915 ; 121  |    unsigned int B19 :1;
                            11916 ; 122  |    unsigned int B20 :1;
                            11917 ; 123  |    unsigned int B21 :1;
                            11918 ; 124  |    unsigned int B22 :1;
                            11919 ; 125  |    unsigned int B23 :1;
                            11920 ; 126  |};
                            11921 ; 127  |
                            11922 ; 128  |union BitInt {
                            11923 ; 129  |        struct Bitfield B;
                            11924 ; 130  |        int        I;
                            11925 ; 131  |};
                            11926 ; 132  |
                            11927 ; 133  |#define MAX_MSG_LENGTH 10
                            11928 ; 134  |struct CMessage
                            11929 ; 135  |{
                            11930 ; 136  |        unsigned int m_uLength;
                            11931 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11932 ; 138  |};
                            11933 ; 139  |
                            11934 ; 140  |typedef struct {
                            11935 ; 141  |    WORD m_wLength;
                            11936 ; 142  |    WORD m_wMessage;
                            11937 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11938 ; 144  |} Message;
                            11939 ; 145  |
                            11940 ; 146  |struct MessageQueueDescriptor
                            11941 ; 147  |{
                            11942 ; 148  |        int *m_pBase;
                            11943 ; 149  |        int m_iModulo;
                            11944 ; 150  |        int m_iSize;
                            11945 ; 151  |        int *m_pHead;
                            11946 ; 152  |        int *m_pTail;
                            11947 ; 153  |};
                            11948 ; 154  |
                            11949 ; 155  |struct ModuleEntry
                            11950 ; 156  |{
                            11951 ; 157  |    int m_iSignaledEventMask;
                            11952 ; 158  |    int m_iWaitEventMask;
                            11953 ; 159  |    int m_iResourceOfCode;
                            11954 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11955 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            11956 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11957 ; 163  |    int m_uTimeOutHigh;
                            11958 ; 164  |    int m_uTimeOutLow;
                            11959 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11960 ; 166  |};
                            11961 ; 167  |
                            11962 ; 168  |union WaitMask{
                            11963 ; 169  |    struct B{
                            11964 ; 170  |        unsigned int m_bNone     :1;
                            11965 ; 171  |        unsigned int m_bMessage  :1;
                            11966 ; 172  |        unsigned int m_bTimer    :1;
                            11967 ; 173  |        unsigned int m_bButton   :1;
                            11968 ; 174  |    } B;
                            11969 ; 175  |    int I;
                            11970 ; 176  |} ;
                            11971 ; 177  |
                            11972 ; 178  |
                            11973 ; 179  |struct Button {
                            11974 ; 180  |        WORD wButtonEvent;
                            11975 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11976 ; 182  |};
                            11977 ; 183  |
                            11978 ; 184  |struct Message {
                            11979 ; 185  |        WORD wMsgLength;
                            11980 ; 186  |        WORD wMsgCommand;
                            11981 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11982 ; 188  |};
                            11983 ; 189  |
                            11984 ; 190  |union EventTypes {
                            11985 ; 191  |        struct CMessage msg;
                            11986 ; 192  |        struct Button Button ;
                            11987 ; 193  |        struct Message Message;
                            11988 ; 194  |};
                            11989 ; 195  |
                            11990 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11991 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11992 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11993 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11994 ; 200  |
                            11995 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11996 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11997 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11998 ; 204  |
                            11999 ; 205  |#if DEBUG
                            12000 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12001 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12002 ; 208  |#else 
                            12003 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            12004 ; 210  |#define DebugBuildAssert(x)    
                            12005 ; 211  |#endif
                            12006 ; 212  |
                            12007 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12008 ; 214  |//  #pragma asm
                            12009 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12010 ; 216  |//  #pragma endasm
                            12011 ; 217  |
                            12012 ; 218  |
                            12013 ; 219  |#ifdef COLOR_262K
                            12014 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            12015 ; 221  |#elif defined(COLOR_65K)
                            12016 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            12017 ; 223  |#else
                            12018 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            12019 ; 225  |#endif
                            12020 ; 226  |    
                            12021 ; 227  |#endif // #ifndef _TYPES_H
                            12022 
                            12024 
                            12025 ; 32   |
                            12026 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12027 ; 34   |//   USB2.0 PHY STMP Registers 
                            12028 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12029 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            12030 ; 37   |
                            12031 ; 38   |
                            12032 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            12033 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            12034 ; 41   |
                            12035 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            12036 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            12037 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            12038 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            12039 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            12040 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            12041 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            12042 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            12043 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            12044 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            12045 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            12046 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            12047 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            12048 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            12049 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            12050 ; 57   |
                            12051 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            12052 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            12053 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            12054 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            12055 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            12056 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            12057 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            12058 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            12059 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            12060 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            12061 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            12062 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            12063 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            12064 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            12065 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            12066 ; 73   |
                            12067 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            12068 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            12069 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            12070 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            12071 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            12072 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            12073 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            12074 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            12075 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            12076 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            12077 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            12078 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            12079 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            12080 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            12081 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            12082 ; 89   |
                            12083 ; 90   |typedef union               
                            12084 ; 91   |{
                            12085 ; 92   |    struct {
                            12086 ; 93   |        int RSVD0          :5;
                            12087 ; 94   |        int TXDISCON1500   :1;
                            12088 ; 95   |        int PLLVCOPWD      :1;
                            12089 ; 96   |        int PLLVCPPWD      :1;
                            12090 ; 97   |        int RSVD1          :2;
                            12091 ; 98   |        int TXPWDFS        :1;
                            12092 ; 99   |        int TXPWDIBIAS     :1;
                            12093 ; 100  |        int TXPWDV2I       :1;
                            12094 ; 101  |        int TXPWDVBG       :1;
                            12095 ; 102  |        int TXPWDCOMP      :1;
                            12096 ; 103  |        int RSVD2          :1;
                            12097 ; 104  |        int RXPWDDISCONDET :1;
                            12098 ; 105  |        int RXPWDENV       :1;
                            12099 ; 106  |        int RXPWD1PT1      :1;
                            12100 ; 107  |        int RXPWDDIFF      :1;
                            12101 ; 108  |        int RXPWDRX        :1;
                            12102 ; 109  |        int RSVD3          :1;
                            12103 ; 110  |        int PWDIBIAS       :1;
                            12104 ; 111  |        int REGRESET       :1;
                            12105 ; 112  |    } B;
                            12106 ; 113  |    int I;
                            12107 ; 114  |} usbphypwd_type;
                            12108 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB PHY Powerdown Register */
                            12109 ; 116  |
                            12110 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            12111 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            12112 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            12113 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            12114 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            12115 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            12116 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            12117 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            12118 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            12119 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            12120 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            12121 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            12122 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            12123 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            12124 ; 131  |
                            12125 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            12126 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            12127 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            12128 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            12129 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            12130 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            12131 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            12132 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            12133 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            12134 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            12135 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            12136 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            12137 ; 144  |
                            12138 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXCAL1500_BITPOS)
                            12139 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXENCAL1500_BITPOS)
                            12140 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXHSXCVR_BITPOS)
                            12141 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHYTX_TXCALIBRATE_BITPOS)
                            12142 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DN_BITPOS)
                            12143 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DN_BITPOS)
                            12144 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXHSTERM_BITPOS)
                            12145 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_BITPOS)
                            12146 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DP_BITPOS)
                            12147 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DP_BITPOS)
                            12148 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSHIZ_BITPOS)
                            12149 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_TXCOMPOUT_BITPOS)
                            12150 ; 157  |
                            12151 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            12152 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            12153 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            12154 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            12155 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            12156 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            12157 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            12158 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            12159 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            12160 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            12161 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            12162 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            12163 ; 170  |
                            12164 ; 171  |typedef union               
                            12165 ; 172  |{
                            12166 ; 173  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12167 ; 174  |        int TXCAL1500          :4;
                            12168 ; 175  |        int RSVD0              :1;
                            12169 ; 176  |        int TXENCAL1500        :1;
                            12170 ; 177  |        int TXHSXCVR           :1;
                            12171 ; 178  |        int TXCALIBRATE        :1;
                            12172 ; 179  |        int TXCAL45DN          :4;
                            12173 ; 180  |        int RSVD1              :1;
                            12174 ; 181  |        int TXENCAL45DN        :1;
                            12175 ; 182  |        int TXHSTERM           :1;
                            12176 ; 183  |        int TXSKEW             :1;
                            12177 ; 184  |        int TXCAL45DP          :4;
                            12178 ; 185  |        int RSVD2              :1;
                            12179 ; 186  |        int TXENCAL45DP        :1;
                            12180 ; 187  |        int TXFSHIZ            :1;
                            12181 ; 188  |        int TXCOMPOUT          :1;
                            12182 ; 189  |    } B;
                            12183 ; 190  |    int I;
                            12184 ; 191  |} usbphytx_type;
                            12185 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            12186 ; 193  |
                            12187 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            12188 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            12189 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            12190 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            12191 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            12192 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            12193 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            12194 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            12195 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            12196 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            12197 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            12198 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            12199 ; 206  |
                            12200 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            12201 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            12202 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            12203 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                            12204 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            12205 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            12206 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            12207 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            12208 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            12209 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            12210 ; 217  |
                            12211 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPLL_PLLV2ISEL_BITPOS)
                            12212 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHYPLL_PLLCPDBLIP_BITPOS)
                            12213 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK2_BITPOS)
                            12214 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK24_BITPOS)
                            12215 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCPNSEL_BITPOS)
                            12216 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS)
                            12217 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPLL_PLLPFDRST_BITPOS)
                            12218 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            12219 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOKSTART_BITPOS)
                            12220 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            12221 ; 228  |
                            12222 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            12223 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            12224 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            12225 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            12226 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            12227 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            12228 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            12229 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            12230 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            12231 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            12232 ; 239  |
                            12233 ; 240  |typedef union               
                            12234 ; 241  |{
                            12235 ; 242  |    struct {
                            12236 ; 243  |        int PLLV2ISEL        :4;
                            12237 ; 244  |        int RSVD0            :1;
                            12238 ; 245  |        int PLLCPDBLIP       :1;
                            12239 ; 246  |        int PLLVCOCLK2       :1;
                            12240 ; 247  |        int PLLVCOCLK24      :1;
                            12241 ; 248  |        int PLLCPNSEL        :4;
                            12242 ; 249  |        int PLLCLKDIVSEL     :4;
                            12243 ; 250  |        int RSVD1            :4;
                            12244 ; 251  |        int PLLPFDRST        :1;
                            12245 ; 252  |        int PLLCPSHORTLFR    :1;
                            12246 ; 253  |        int PLLVCOKSTART     :1;
                            12247 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            12248 ; 255  |    } B;
                            12249 ; 256  |    int I;
                            12250 ; 257  |} usbphypll_type;
                            12251 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                            12252 ; 259  |
                            12253 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            12254 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            12255 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                            12256 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            12257 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            12258 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            12259 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            12260 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            12261 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            12262 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            12263 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            12264 ; 271  |
                            12265 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            12266 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            12267 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            12268 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            12269 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            12270 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            12271 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            12272 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            12273 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            12274 ; 281  |
                            12275 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            12276 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_BITPOS)
                            12277 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_BITPOS)
                            12278 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLLKTIMECTL_BITPOS)
                            12279 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKDIVCTL_BITPOS)
                            12280 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives actual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            12281 ; 288  |//              480Mhz/7 =68.57Mhz
                            12282 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            12283 ; 290  |
                            12284 ; 291  |//              480Mhz/8 ~60Mhz
                            12285 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            12286 ; 293  |
                            12287 ; 294  |//              480Mhz/9 =53.3Mhz
                            12288 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            12289 ; 296  |
                            12290 ; 297  |//              480Mhz/10 =48Mhz
                            12291 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            12292 ; 299  |
                            12293 ; 300  |
                            12294 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOSTMODETEST_BITPOS)
                            12295 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FSCKSOURCESEL_BITPOS)
                            12296 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGRXDBYPASS_BITPOS)
                            12297 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_BITPOS)
                            12298 ; 305  |
                            12299 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            12300 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            12301 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            12302 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            12303 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            12304 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                            12305 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            12306 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            12307 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            12308 ; 315  |
                            12309 ; 316  |typedef union               
                            12310 ; 317  |{
                            12311 ; 318  |    struct {
                            12312 ; 319  |     int ENVADJ               :4;
                            12313 ; 320  |     int DISCONADJ            :4;
                            12314 ; 321  |     int DEBUGMODE            :4;
                            12315 ; 322  |     int PLLLKTIMECTL         :4;
                            12316 ; 323  |     int PLLCKDIVCTL          :4;
                            12317 ; 324  |     int HOSTMODETEST         :1;
                            12318 ; 325  |     int FSCKSOURCESEL        :1;
                            12319 ; 326  |     int REGRXDBYPASS         :1;
                            12320 ; 327  |     int PLLLOCKED            :1;
                            12321 ; 328  |    } B;
                            12322 ; 329  |    int I;
                            12323 ; 330  |} usbphyrx_type;
                            12324 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            12325 ; 332  |
                            12326 ; 333  |#endif
                            12327 ; 334  |
                            12328 
                            12330 
                            12331 ; 38   |
                            12332 ; 39   |
                            12333 ; 40   |#endif // if (!@def(hwequ))
                            12334 ; 41   |
                            12335 
                            12337 
                            12338 ; 9    |#include "messages.h"
                            12339 
                            12341 
                            12342 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            12343 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                            12344 ; 3    |// Message defs
                            12345 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                            12346 ; 5    |
                            12347 ; 6    |#if (!defined(MSGEQU_INC))
                            12348 ; 7    |#define MSGEQU_INC 1
                            12349 ; 8    |
                            12350 ; 9    |
                            12351 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                            12352 ; 11   |
                            12353 ; 12   |
                            12354 ; 13   |#define MSG_TYPE_DECODER 0x000000
                            12355 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                            12356 ; 15   |#define MSG_TYPE_PARSER 0x020000
                            12357 ; 16   |#define MSG_TYPE_LCD 0x030000
                            12358 ; 17   |#define MSG_TYPE_MIXER 0x040000
                            12359 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                            12360 ; 19   |#define MSG_TYPE_MENU 0x060000
                            12361 ; 20   |#define MSG_TYPE_LED 0x070000
                            12362 ; 21   |#define MSG_TYPE_TUNER 0x080000
                            12363 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                            12364 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                            12365 ; 24   |// Equalizer and other effects
                            12366 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                            12367 ; 26   |#if (defined(USE_PLAYLIST3))
                            12368 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                            12369 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                            12370 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                            12371 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                            12372 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                            12373 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                            12374 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                            12375 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                            12376 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                            12377 ; 36   |#if defined(USE_PLAYLIST5)
                            12378 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                            12379 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                            12380 ; 39   |#endif // if @def('USE_PLAYLIST5')
                            12381 ; 40   |
                            12382 ; 41   |// Message Structure Offsets
                            12383 ; 42   |#define MSG_Length 0
                            12384 ; 43   |#define MSG_ID 1
                            12385 ; 44   |#define MSG_Argument1 2
                            12386 ; 45   |#define MSG_Argument2 3
                            12387 ; 46   |#define MSG_Argument3 4
                            12388 ; 47   |#define MSG_Argument4 5
                            12389 ; 48   |#define MSG_Argument5 6
                            12390 ; 49   |#define MSG_Argument6 7
                            12391 ; 50   |
                            12392 ; 51   |
                            12393 ; 52   |
                            12394 ; 53   |// LCD Message IDs
                            12395 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                            12396 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                            12397 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                            12398 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                            12399 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                            12400 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                            12401 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                            12402 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                            12403 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                            12404 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                            12405 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                            12406 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                            12407 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                            12408 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                            12409 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                            12410 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                            12411 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                            12412 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                            12413 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                            12414 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                            12415 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                            12416 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                            12417 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                            12418 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                            12419 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                            12420 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12421 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                            12422 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                            12423 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                            12424 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                            12425 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                            12426 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                            12427 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                            12428 ; 87   |//send a NULL as Param1 to return to root frame buffer
                            12429 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                            12430 ; 89   |//Param1 = left
                            12431 ; 90   |//Param2 = top
                            12432 ; 91   |//Param3 = right
                            12433 ; 92   |//Param4 = bottom
                            12434 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                            12435 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                            12436 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                            12437 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                            12438 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                            12439 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                            12440 ; 99   |
                            12441 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                            12442 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
                            12443 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                            12444 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                            12445 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                            12446 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                            12447 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                            12448 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                            12449 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                            12450 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                            12451 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                            12452 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                            12453 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                            12454 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                            12455 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                            12456 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                            12457 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                            12458 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                            12459 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                            12460 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                            12461 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                            12462 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                            12463 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                            12464 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                            12465 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                            12466 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                            12467 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                            12468 ; 127  |
                            12469 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                            12470 ; 129  |
                            12471 ; 130  |#if defined(CLCD_16BIT)
                            12472 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                            12473 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                            12474 ; 133  |
                            12475 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                            12476 ; 135  |#else 
                            12477 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                            12478 ; 137  |#endif
                            12479 ; 138  |
                            12480 ; 139  |// If you change the LCD message ID's then you must
                            12481 ; 140  |// also change the jump table in lcdapi.asm
                            12482 ; 141  |
                            12483 ; 142  |// Character LCD Message IDs
                            12484 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                            12485 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                            12486 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                            12487 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                            12488 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                            12489 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                            12490 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                            12491 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                            12492 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                            12493 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                            12494 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                            12495 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                            12496 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                            12497 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                            12498 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                            12499 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                            12500 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                            12501 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                            12502 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                            12503 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                            12504 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                            12505 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                            12506 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                            12507 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                            12508 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                            12509 ; 168  |// also change the jump table in lcdapi.asm
                            12510 ; 169  |
                            12511 ; 170  |// Decoder Message IDs
                            12512 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                            12513 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                            12514 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                            12515 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                            12516 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                            12517 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                            12518 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                            12519 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                            12520 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                            12521 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                            12522 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                            12523 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                            12524 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                            12525 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                            12526 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                            12527 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                            12528 ; 187  |// If you change the Decoder message ID's, then you must
                            12529 ; 188  |// also change the jump table in decoder_overlay.asm
                            12530 ; 189  |// and in dec_adpcm_overlay.asm.
                            12531 ; 190  |
                            12532 ; 191  |// Encoder Message IDs
                            12533 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                            12534 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                            12535 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                            12536 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                            12537 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                            12538 ; 197  |// If you change the Encoder message ID's, then you must
                            12539 ; 198  |// also change the jump table in all encoder overlay modules.
                            12540 ; 199  |
                            12541 ; 200  |// Parser Message IDs
                            12542 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                            12543 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                            12544 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                            12545 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                            12546 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                            12547 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                            12548 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                            12549 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                            12550 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                            12551 ; 210  |// If you change the Parser message ID's, then you must
                            12552 ; 211  |// also change the jump table in parser.asm
                            12553 ; 212  |
                            12554 ; 213  |// Button Message IDs
                            12555 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                            12556 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                            12557 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                            12558 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                            12559 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                            12560 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                            12561 ; 220  |
                            12562 ; 221  |// Mixer Message IDs
                            12563 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                            12564 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                            12565 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                            12566 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                            12567 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                            12568 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                            12569 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                            12570 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                            12571 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                            12572 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                            12573 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                            12574 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                            12575 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                            12576 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                            12577 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                            12578 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                            12579 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                            12580 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                            12581 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                            12582 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                            12583 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                            12584 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                            12585 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                            12586 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                            12587 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                            12588 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                            12589 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                            12590 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                            12591 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                            12592 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                            12593 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                            12594 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                            12595 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                            12596 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                            12597 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                            12598 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                            12599 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                            12600 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                            12601 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                            12602 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                            12603 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                            12604 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                            12605 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                            12606 ; 265  |// If you change the mixer message ID's then you must
                            12607 ; 266  |// also change the jump table in mixer.asm
                            12608 ; 267  |#define MIXER_ON 0
                            12609 ; 268  |#define MIXER_OFF 1
                            12610 ; 269  |
                            12611 ; 270  |
                            12612 ; 271  |// System Message IDs
                            12613 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                            12614 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                            12615 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                            12616 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                            12617 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                            12618 ; 277  |// If you change the system message ID's then you must
                            12619 ; 278  |// also change the jump table in systemapi.asm
                            12620 ; 279  |
                            12621 ; 280  |// Menu IDs
                            12622 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                            12623 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                            12624 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                            12625 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                            12626 ; 285  |//sub parameters for this message:
                            12627 ; 286  |#define RECORDER_START 0
                            12628 ; 287  |#define RECORDER_PAUSE 0x2000
                            12629 ; 288  |#define RECORDER_RESUME 0x4000
                            12630 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                            12631 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                            12632 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                            12633 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                            12634 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                            12635 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                            12636 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                            12637 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                            12638 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                            12639 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                            12640 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                            12641 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                            12642 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                            12643 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                            12644 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                            12645 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                            12646 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                            12647 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                            12648 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                            12649 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                            12650 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                            12651 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                            12652 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                            12653 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                            12654 ; 313  |
                            12655 ; 314  |// Note that other versions of this file have different msg equates.
                            12656 ; 315  |// If you change the system message ID's then you must
                            12657 ; 316  |// also change the jump table in all menu *.asm
                            12658 ; 317  |
                            12659 ; 318  |// LED Message IDs
                            12660 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                            12661 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                            12662 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                            12663 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                            12664 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                            12665 ; 324  |// If you change the LeD message ID's then you must
                            12666 ; 325  |// also change the jump table in ledapi.asm
                            12667 ; 326  |
                            12668 ; 327  |#if (!defined(REMOVE_FM))
                            12669 ; 328  |// FM Tuner Message IDs
                            12670 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                            12671 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12672 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                            12673 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                            12674 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                            12675 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                            12676 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                            12677 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                            12678 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                            12679 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                            12680 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                            12681 ; 340  |//one parameter--the sensitivity in uV
                            12682 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                            12683 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                            12684 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                            12685 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                            12686 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                            12687 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                            12688 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                            12689 ; 348  |#endif
                            12690 ; 349  |
                            12691 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                            12692 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                            12693 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                            12694 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                            12695 ; 354  |
                            12696 ; 355  |
                            12697 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                            12698 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                            12699 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                            12700 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                            12701 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                            12702 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                            12703 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                            12704 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                            12705 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                            12706 ; 365  |
                            12707 ; 366  |#if (defined(USE_PLAYLIST3))
                            12708 ; 367  |// Music Library
                            12709 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                            12710 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                            12711 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                            12712 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                            12713 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                            12714 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                            12715 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                            12716 ; 375  |
                            12717 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                            12718 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                            12719 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                            12720 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                            12721 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                            12722 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                            12723 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                            12724 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                            12725 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                            12726 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                            12727 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                            12728 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                            12729 ; 388  |
                            12730 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                            12731 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                            12732 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                            12733 ; 392  |
                            12734 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                            12735 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                            12736 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                            12737 ; 396  |
                            12738 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                            12739 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                            12740 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                            12741 ; 400  |
                            12742 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                            12743 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                            12744 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                            12745 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
                            12746 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                            12747 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                            12748 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                            12749 ; 408  |
                            12750 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                            12751 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                            12752 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                            12753 ; 412  |
                            12754 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                            12755 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                            12756 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                            12757 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                            12758 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                            12759 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                            12760 ; 419  |
                            12761 ; 420  |#if defined(USE_PLAYLIST5)
                            12762 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                            12763 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                            12764 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                            12765 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                            12766 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                            12767 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                            12768 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                            12769 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                            12770 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                            12771 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                            12772 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                            12773 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                            12774 ; 433  |
                            12775 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                            12776 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                            12777 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                            12778 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                            12779 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                            12780 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                            12781 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                            12782 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                            12783 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                            12784 ; 443  |#endif // if @def('USE_PLAYLIST5')
                            12785 ; 444  |// Events
                            12786 ; 445  |// No event
                            12787 ; 446  |#define EVENT_NONE 0x000001   
                            12788 ; 447  |// A message has been posted
                            12789 ; 448  |#define EVENT_MESSAGE 0x000002   
                            12790 ; 449  |// Run if wait time elapsed
                            12791 ; 450  |#define EVENT_TIMER 0x000004   
                            12792 ; 451  |// Run if a button event occured
                            12793 ; 452  |#define EVENT_BUTTON 0x000008   
                            12794 ; 453  |// Run if a background event occured
                            12795 ; 454  |#define EVENT_BACKGROUND 0x000010   
                            12796 ; 455  |// The executive should immediately repeat this module
                            12797 ; 456  |#define EVENT_REPEAT 0x000020   
                            12798 ; 457  |// Run the module's init routine
                            12799 ; 458  |#define EVENT_INIT 0x800000   
                            12800 ; 459  |
                            12801 ; 460  |#define EVENT_NONE_BITPOS 0
                            12802 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                            12803 ; 462  |#define EVENT_TIMER_BITPOS 2
                            12804 ; 463  |#define EVENT_BUTTON_BITPOS 3
                            12805 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                            12806 ; 465  |#define EVENT_REPEAT_BITPOS 5
                            12807 ; 466  |#define EVENT_INIT_BITPOS 23
                            12808 ; 467  |
                            12809 ; 468  |// Parser Message Buffers
                            12810 ; 469  |#define ParserPlayBit 0
                            12811 ; 470  |#define ButtonPressBit 1
                            12812 ; 471  |#define ParserRwndBit 1
                            12813 ; 472  |#define ParserFfwdBit 2
                            12814 ; 473  |
                            12815 ; 474  |//NextSong Message Parameters
                            12816 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                            12817 ; 476  |#define NEXT_SONG 2             
                            12818 ; 477  |// ButtonPressBit1 cleared
                            12819 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                            12820 ; 479  |// ButtonPressBit1 set
                            12821 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                            12822 ; 481  |// NextSong + Ffwd
                            12823 ; 482  |#define NEXT_SONG_FFWD 4          
                            12824 ; 483  |
                            12825 ; 484  |//PrevSong Message Parameters
                            12826 ; 485  |// PrevSong + Stopped
                            12827 ; 486  |#define PREV_SONG 0          
                            12828 ; 487  |// PrevSong + Play
                            12829 ; 488  |#define PREV_SONG_PLAY 1          
                            12830 ; 489  |// PrevSong + Rwnd
                            12831 ; 490  |#define PREV_SONG_RWND 2          
                            12832 ; 491  |
                            12833 ; 492  |
                            12834 ; 493  |
                            12835 ; 494  |
                            12836 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                            12837 ; 496  |
                            12838 ; 497  |
                            12839 
                            12841 
                            12842 ; 10   |#include "exec.h"
                            12843 
                            12845 
                            12846 ; 1    |#ifndef EXEC_H
                            12847 ; 2    |#define EXEC_H
                            12848 ; 3    |
                            12849 ; 4    |
                            12850 ; 5    |void _reentrant SysPostMessage(int iLength,...);
                            12851 ; 6    |int _asmfunc GetMessage(struct MessageQueueDescriptor*,struct CMessage * );
                            12852 ; 7    |long _asmfunc SysGetCurrentTime(void);
                            12853 ; 8    |
                            12854 ; 9    |
                            12855 ; 10   |#endif
                            12856 
                            12858 
                            12859 ; 11   |#include "resource.h"
                            12860 
                            12862 
                            12863 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                            12864 ; 2    |//  Do not edit it directly.
                            12865 ; 3    |//  Created on Sat Jun 28 16:37:44 2008 using resource.inc as input.
                            12866 ; 4    |
                            12867 ; 5    |
                            12868 ; 6    |
                            12869 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                            12870 ; 8    |//  Do not edit it directly.
                            12871 ; 9    |//  Created on Sat Jun 28 16:13:49 2008 using resource.inc as input.
                            12872 ; 10   |
                            12873 ; 11   |
                            12874 ; 12   |
                            12875 ; 13   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12876 ; 14   |//  Do not edit it directly.
                            12877 ; 15   |//  Created on Sat Jun 28 15:55:53 2008 using resource.inc as input.
                            12878 ; 16   |
                            12879 ; 17   |
                            12880 ; 18   |
                            12881 ; 19   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12882 ; 20   |//  Do not edit it directly.
                            12883 ; 21   |//  Created on Thu Jun 26 08:58:05 2008 using resource.inc as input.
                            12884 ; 22   |
                            12885 ; 23   |
                            12886 ; 24   |
                            12887 ; 25   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12888 ; 26   |//  Do not edit it directly.
                            12889 ; 27   |//  Created on Wed Jun 25 17:00:35 2008 using resource.inc as input.
                            12890 ; 28   |
                            12891 ; 29   |
                            12892 ; 30   |
                            12893 ; 31   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12894 ; 32   |//  Do not edit it directly.
                            12895 ; 33   |//  Created on Wed Jun 25 11:42:38 2008 using resource.inc as input.
                            12896 ; 34   |
                            12897 ; 35   |
                            12898 ; 36   |
                            12899 ; 37   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12900 ; 38   |//  Do not edit it directly.
                            12901 ; 39   |//  Created on Wed Jun 25 11:17:50 2008 using resource.inc as input.
                            12902 ; 40   |
                            12903 ; 41   |
                            12904 ; 42   |
                            12905 ; 43   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12906 ; 44   |//  Do not edit it directly.
                            12907 ; 45   |//  Created on Wed Jun 25 11:17:05 2008 using resource.inc as input.
                            12908 ; 46   |
                            12909 ; 47   |
                            12910 ; 48   |
                            12911 ; 49   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12912 ; 50   |//  Do not edit it directly.
                            12913 ; 51   |//  Created on Tue Jun 24 15:21:11 2008 using resource.inc as input.
                            12914 ; 52   |
                            12915 ; 53   |
                            12916 ; 54   |
                            12917 ; 55   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12918 ; 56   |//  Do not edit it directly.
                            12919 ; 57   |//  Created on Sun Jun 22 02:54:01 2008 using resource.inc as input.
                            12920 ; 58   |
                            12921 ; 59   |
                            12922 ; 60   |
                            12923 ; 61   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12924 ; 62   |//  Do not edit it directly.
                            12925 ; 63   |//  Created on Sun Jun 22 00:47:39 2008 using resource.inc as input.
                            12926 ; 64   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12927 ; 65   |
                            12928 ; 66   |
                            12929 ; 67   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12930 ; 68   |//  Do not edit it directly.
                            12931 ; 69   |//  Created on Fri Jun 20 16:15:57 2008 using resource.inc as input.
                            12932 ; 70   |
                            12933 ; 71   |
                            12934 ; 72   |
                            12935 ; 73   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12936 ; 74   |//  Do not edit it directly.
                            12937 ; 75   |//  Created on Thu Jun 19 09:47:30 2008 using resource.inc as input.
                            12938 ; 76   |
                            12939 ; 77   |
                            12940 ; 78   |
                            12941 ; 79   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12942 ; 80   |//  Do not edit it directly.
                            12943 ; 81   |//  Created on Wed Jun 18 23:11:16 2008 using resource.inc as input.
                            12944 ; 82   |
                            12945 ; 83   |
                            12946 ; 84   |
                            12947 ; 85   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12948 ; 86   |//  Do not edit it directly.
                            12949 ; 87   |//  Created on Wed Jun 18 22:57:19 2008 using resource.inc as input.
                            12950 ; 88   |
                            12951 ; 89   |
                            12952 ; 90   |
                            12953 ; 91   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12954 ; 92   |//  Do not edit it directly.
                            12955 ; 93   |//  Created on Wed Jun 18 22:49:16 2008 using resource.inc as input.
                            12956 ; 94   |
                            12957 ; 95   |
                            12958 ; 96   |
                            12959 ; 97   |//  NOTE: This file was generated automatically by rscrenum.pl
                            12960 ; 98   |//  Do not edit it directly.
                            12961 ; 99   |//  Created on Wed Jun 18 11:53:38 2008 using resource.inc as input.
                            12962 ; 100  |
                            12963 ; 101  |
                            12964 ; 102  |
                            12965 ; 103  |//  NOTE: This file was generated automatically by rscrenum.pl
                            12966 ; 104  |//  Do not edit it directly.
                            12967 ; 105  |//  Created on Wed Jun 18 10:45:13 2008 using resource.inc as input.
                            12968 ; 106  |
                            12969 ; 107  |
                            12970 ; 108  |
                            12971 ; 109  |//  NOTE: This file was generated automatically by rscrenum.pl
                            12972 ; 110  |//  Do not edit it directly.
                            12973 ; 111  |//  Created on Wed Jun 18 09:54:56 2008 using resource.inc as input.
                            12974 ; 112  |
                            12975 ; 113  |
                            12976 ; 114  |
                            12977 ; 115  |//  NOTE: This file was generated automatically by rscrenum.pl
                            12978 ; 116  |//  Do not edit it directly.
                            12979 ; 117  |//  Created on Tue Jun 17 16:47:21 2008 using resource.inc as input.
                            12980 ; 118  |
                            12981 ; 119  |
                            12982 ; 120  |
                            12983 ; 121  |//  NOTE: This file was generated automatically by rscrenum.pl
                            12984 ; 122  |//  Do not edit it directly.
                            12985 ; 123  |//  Created on Tue Jun 17 11:30:49 2008 using resource.inc as input.
                            12986 ; 124  |
                            12987 ; 125  |
                            12988 ; 126  |
                            12989 ; 127  |/////////////////////////////////////////////////////////////////////////////////
                            12990 ; 128  |// Copyright(C) SigmaTel, Inc. 2001-2007
                            12991 ; 129  |// Reviews: DanhNguyen (06-2008) for X8iTF/STFM1000
                            12992 ; 130  |// LCD example resource listing
                            12993 ; 131  |/////////////////////////////////////////////////////////////////////////////////
                            12994 ; 132  |
                            12995 ; 133  |#if (!defined(resources))
                            12996 ; 134  |#define resources 1
                            12997 ; 135  |
                            12998 ; 136  |/////////////////////////////////////////////////////////////////////////////////
                            12999 ; 137  |//  Player version number  no leading zeros in version number!!!!!
                            13000 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                            13001 ; 139  |
                            13002 ; 140  |#define VERSION_MAJOR 3
                            13003 ; 141  |#define VERSION_MIDDLE 200
                            13004 ; 142  |#define VERSION_MINOR 910
                            13005 ; 143  |
                            13006 ; 144  |#define LCD_SEG_OFFSET 0x000000
                            13007 ; 145  |#define NUMBER_OF_PRESETS 10
                            13008 ; 146  |
                            13009 ; 147  |
                            13010 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            13011 ; 149  |//  High usage resource. These have been moved here to take maximum advantage of
                            13012 ; 150  |//  the resource index cache if it was added.
                            13013 ; 151  |//  This block is sorted by frequency of use while loading a new song.
                            13014 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                            13015 ; 153  |
                            13016 ; 154  |//$FILENAME searchdirectory.src
                            13017 ; 155  |#define RSRC_FUNCLET_SEARCHDIRECTORY 1    
                            13018 ; 156  |//$FILENAME shortdirmatch.src
                            13019 ; 157  |#define RSRC_FUNCLET_SHORTDIRMATCH 2    
                            13020 ; 158  |//$FILENAME fopen.src
                            13021 ; 159  |#define RSRC_FUNCLET_FOPEN 3    
                            13022 ; 160  |//$FILENAME musicmenu.src
                            13023 ; 161  |#define RSRC_MUSIC_MENU_CODE_BANK 4    
                            13024 ; 162  |//$FILENAME changepath.src
                            13025 ; 163  |#define RSRC_FUNCLET_CHANGEPATH 5    
                            13026 ; 164  |//$FILENAME _openandverifyslot.src
                            13027 ; 165  |#define RSRC_FUNCLET__OPENANDVERIFYSLOT 6    
                            13028 ; 166  |//$FILENAME _loadslot.src
                            13029 ; 167  |#define RSRC_FUNCLET__LOADSLOT 7    
                            13030 ; 168  |//$FILENAME getname.src
                            13031 ; 169  |#define RSRC_FUNCLET_GETNAME 8    
                            13032 ; 170  |//$FILENAME Funclet_SteppingVoltageSet.src
                            13033 ; 171  |#define RSRC_FUNCLET_STEPPINGVOLTAGESET 9    
                            13034 ; 172  |//$FILENAME sethandleforsearch.src
                            13035 ; 173  |#define RSRC_FUNCLET_SETHANDLEFORSEARCH 10    
                            13036 ; 174  |//$FILENAME wmaWrap.src
                            13037 ; 175  |#define RSRC_WMADEC_CODE 11    
                            13038 ; 176  |//$FILENAME extractfilename.src
                            13039 ; 177  |#define RSRC_FUNCLET_EXTRACTFILENAME 12    
                            13040 ; 178  |//$FILENAME oem_getgroupcertprivatekey.src
                            13041 ; 179  |#define RSRC_FUNCLET_OEM_GETGROUPCERTPRIVATEKEY 13    
                            13042 ; 180  |//$FILENAME SoftTimerMod.src
                            13043 ; 181  |#define RSRC_SOFT_TIMER_MODULE_CODE 14    
                            13044 ; 182  |//$FILENAME GetShortfilename.src
                            13045 ; 183  |#define RSRC_FUNCLET_GETSHORTFILENAME 15    
                            13046 ; 184  |//$FILENAME drm_dcp_loadpropertiescache.src
                            13047 ; 185  |#define RSRC_FUNCLET_DRM_DCP_LOADPROPERTIESCACHE 16    
                            13048 ; 186  |//$FILENAME playerstatemachine.src
                            13049 ; 187  |#define RSRC_PLAY_STATE_MACHINE_CODE_BANK 17    
                            13050 ; 188  |//$FILENAME SysMod.src
                            13051 ; 189  |#define RSRC_SYSMOD_CODE 18    
                            13052 ; 190  |//$FILENAME drm_b64_decodew.src
                            13053 ; 191  |#define RSRC_FUNCLET_DRM_B64_DECODEW 19    
                            13054 ; 192  |//$FILENAME discardtrailigperiods.src
                            13055 ; 193  |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODS 20    
                            13056 ; 194  |//$FILENAME uppercase.src
                            13057 ; 195  |#define RSRC_FUNCLET_UPPERCASE 21    
                            13058 ; 196  |//$FILENAME strlength.src
                            13059 ; 197  |#define RSRC_FUNCLET_STRLENGTH 22    
                            13060 ; 198  |//$FILENAME ConverToShortname.src
                            13061 ; 199  |#define RSRC_FUNCLET_CONVERTOSHORTNAME 23    
                            13062 ; 200  |//$FILENAME drm_bbx_hashvalue.src
                            13063 ; 201  |#define RSRC_FUNCLET_DRM_BBX_HASHVALUE 24    
                            13064 ; 202  |//$FILENAME drm_expr_evaluateexpression.src
                            13065 ; 203  |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION 25    
                            13066 ; 204  |//$FILENAME drm_sst_closekey.src
                            13067 ; 205  |#define RSRC_FUNCLET_DRM_SST_CLOSEKEY 26    
                            13068 ; 206  |//$FILENAME Funclet_SysSetSpeed.src
                            13069 ; 207  |#define RSRC_FUNCLET_SYSSETSPEED 27    
                            13070 ; 208  |//$FILENAME freehandle.src
                            13071 ; 209  |#define RSRC_FUNCLET_FREEHANDLE 28    
                            13072 ; 210  |//$FILENAME searchfreehandleallocate.src
                            13073 ; 211  |#define RSRC_FUNCLET_SEARCHFREEHANDLEALLOCATE 29    
                            13074 ; 212  |//$FILENAME _parselicenseattributes.src
                            13075 ; 213  |#define RSRC_FUNCLET__PARSELICENSEATTRIBUTES 30    
                            13076 ; 214  |//$FILENAME variablesecstategetorset.src
                            13077 ; 215  |#define RSRC_FUNCLET_VARIABLESECSTATEGETORSET 31    
                            13078 ; 216  |//$FILENAME _setuplicevalobjecttoshare.src
                            13079 ; 217  |#define RSRC_FUNCLET__SETUPLICEVALOBJECTTOSHARE 32    
                            13080 ; 218  |//$FILENAME drm_mgr_initialize.src
                            13081 ; 219  |#define RSRC_FUNCLET_DRM_MGR_INITIALIZE 33    
                            13082 ; 220  |//$FILENAME display.src
                            13083 ; 221  |#define RSRC_DISPLAY_CODE_BANK 34    
                            13084 ; 222  |//$FILENAME DisplayModule.src
                            13085 ; 223  |#define RSRC_DISPLAY_MODULE 35    
                            13086 ; 224  |//$FILENAME extractpath.src
                            13087 ; 225  |#define RSRC_FUNCLET_EXTRACTPATH 36    
                            13088 ; 226  |//$FILENAME drm_sst_createglobalstorepassword.src
                            13089 ; 227  |#define RSRC_FUNCLET_DRM_SST_CREATEGLOBALSTOREPASSWORD 37    
                            13090 ; 228  |//$FILENAME _getprivatekey.src
                            13091 ; 229  |#define RSRC_FUNCLET__GETPRIVATEKEY 38    
                            13092 ; 230  |//$FILENAME drm_hds_opennamespace.src
                            13093 ; 231  |#define RSRC_FUNCLET_DRM_HDS_OPENNAMESPACE 39    
                            13094 ; 232  |//$FILENAME drm_hds_openslot.src
                            13095 ; 233  |#define RSRC_FUNCLET_DRM_HDS_OPENSLOT 40    
                            13096 ; 234  |//$FILENAME fclose.src
                            13097 ; 235  |#define RSRC_FUNCLET_FCLOSE 41    
                            13098 ; 236  |//$FILENAME drm_cphr_init.src
                            13099 ; 237  |#define RSRC_FUNCLET_DRM_CPHR_INIT 42    
                            13100 ; 238  |//$FILENAME drm_pk_symmetriccrypt.src
                            13101 ; 239  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICCRYPT 43    
                            13102 ; 240  |//$FILENAME drm_mgr_bind.src
                            13103 ; 241  |#define RSRC_FUNCLET_DRM_MGR_BIND 44    
                            13104 ; 242  |//$FILENAME _decryptcontentkey.src
                            13105 ; 243  |#define RSRC_FUNCLET__DECRYPTCONTENTKEY 45    
                            13106 ; 244  |//$FILENAME drm_mac_inv32.src
                            13107 ; 245  |#define RSRC_FUNCLET_DRM_MAC_INV32 46    
                            13108 ; 246  |//$FILENAME drm_lic_getattribute.src
                            13109 ; 247  |#define RSRC_FUNCLET_DRM_LIC_GETATTRIBUTE 47    
                            13110 ; 248  |//$FILENAME drm_utl_getversionasstring.src
                            13111 ; 249  |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONASSTRING 48    
                            13112 ; 250  |//$FILENAME drm_dcp_getattribute.src
                            13113 ; 251  |#define RSRC_FUNCLET_DRM_DCP_GETATTRIBUTE 49    
                            13114 ; 252  |//$FILENAME effectsmodules.src
                            13115 ; 253  |#define RSRC_EFFECTS_MODULES_P 50    
                            13116 ; 254  |//$FILENAME janusx.src
                            13117 ; 255  |#define RSRC_JANUSX_CODE 51    
                            13118 ; 256  |//$FILENAME drm_sst_openkeytokens.src
                            13119 ; 257  |#define RSRC_FUNCLET_DRM_SST_OPENKEYTOKENS 52    
                            13120 ; 258  |//$FILENAME eval.src
                            13121 ; 259  |#define RSRC_FUNCLET_EVAL 53    
                            13122 ; 260  |//$FILENAME _verifyslothash.src
                            13123 ; 261  |#define RSRC_FUNCLET__VERIFYSLOTHASH 54    
                            13124 ; 262  |//$FILENAME januscommon.src
                            13125 ; 263  |#define RSRC_JANUS_COMMON 55    
                            13126 ; 264  |//$FILENAME changecase.src
                            13127 ; 265  |#define RSRC_FUNCLET_CHANGECASE 56    
                            13128 ; 266  |//$FILENAME drm_bbx_symmetricverify.src
                            13129 ; 267  |#define RSRC_FUNCLET_DRM_BBX_SYMMETRICVERIFY 57    
                            13130 ; 268  |//$FILENAME _loadlicenseattributes.src
                            13131 ; 269  |#define RSRC_FUNCLET__LOADLICENSEATTRIBUTES 58    
                            13132 ; 270  |//$FILENAME drm_hds_slotseek.src
                            13133 ; 271  |#define RSRC_FUNCLET_DRM_HDS_SLOTSEEK 59    
                            13134 ; 272  |//$FILENAME drm_hds_slotwrite.src
                            13135 ; 273  |#define RSRC_FUNCLET_DRM_HDS_SLOTWRITE 60    
                            13136 ; 274  |//$FILENAME drm_levl_performoperations.src
                            13137 ; 275  |#define RSRC_FUNCLET_DRM_LEVL_PERFORMOPERATIONS 61    
                            13138 ; 276  |//$FILENAME drm_lic_verifysignature.src
                            13139 ; 277  |#define RSRC_FUNCLET_DRM_LIC_VERIFYSIGNATURE 62    
                            13140 ; 278  |//$FILENAME drm_lst_getlicense.src
                            13141 ; 279  |#define RSRC_FUNCLET_DRM_LST_GETLICENSE 63    
                            13142 ; 280  |//$FILENAME drm_utl_numbertostring.src
                            13143 ; 281  |#define RSRC_FUNCLET_DRM_UTL_NUMBERTOSTRING 64    
                            13144 ; 282  |//$FILENAME oem_writefile.src
                            13145 ; 283  |#define RSRC_FUNCLET_OEM_WRITEFILE 65    
                            13146 ; 284  |//$FILENAME drm_sst_getdata.src
                            13147 ; 285  |#define RSRC_FUNCLET_DRM_SST_GETDATA 66    
                            13148 ; 286  |//$FILENAME updatehandlemode.src
                            13149 ; 287  |#define RSRC_FUNCLET_UPDATEHANDLEMODE 67    
                            13150 ; 288  |//$FILENAME _getlicenseinfoandsetup.src
                            13151 ; 289  |#define RSRC_FUNCLET__GETLICENSEINFOANDSETUP 68    
                            13152 ; 290  |//$FILENAME drm_lic_completelicensechain.src
                            13153 ; 291  |#define RSRC_FUNCLET_DRM_LIC_COMPLETELICENSECHAIN 69    
                            13154 ; 292  |//$FILENAME doplay_p.src
                            13155 ; 293  |#define RSRC_DOPLAY_P 70    
                            13156 ; 294  |//$FILENAME fatwritep.src
                            13157 ; 295  |#define RSRC_FATWRITE_P_CODE 71    
                            13158 ; 296  |//$FILENAME findfirst.src
                            13159 ; 297  |#define RSRC_FUNCLET_FINDFIRST 72    
                            13160 ; 298  |//$FILENAME Funclet_SysLoadFatWrite.src
                            13161 ; 299  |#define RSRC_FUNCLET_SYSLOADFATWRITE 73    
                            13162 ; 300  |//$FILENAME changetorootdirectory.src
                            13163 ; 301  |#define RSRC_FUNCLET_CHANGETOROOTDIRECTORY 74    
                            13164 ; 302  |//$FILENAME _findkeypair.src
                            13165 ; 303  |#define RSRC_FUNCLET__FINDKEYPAIR 75    
                            13166 ; 304  |//$FILENAME variablemachinegetorset.src
                            13167 ; 305  |#define RSRC_FUNCLET_VARIABLEMACHINEGETORSET 76    
                            13168 ; 306  |//$FILENAME _hdsslotenumnext.src
                            13169 ; 307  |#define RSRC_FUNCLET__HDSSLOTENUMNEXT 77    
                            13170 ; 308  |//$FILENAME getlspubkey.src
                            13171 ; 309  |#define RSRC_FUNCLET_GETLSPUBKEY 78    
                            13172 ; 310  |//$FILENAME drm_sst_gettokenvalue.src
                            13173 ; 311  |#define RSRC_FUNCLET_DRM_SST_GETTOKENVALUE 79    
                            13174 ; 312  |//$FILENAME drm_utl_decodekid.src
                            13175 ; 313  |#define RSRC_FUNCLET_DRM_UTL_DECODEKID 80    
                            13176 ; 314  |//$FILENAME drm_xml_getnodecdata.src
                            13177 ; 315  |#define RSRC_FUNCLET_DRM_XML_GETNODECDATA 81    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13178 ; 316  |//$FILENAME _freedrmmanagerinternalcontexts.src
                            13179 ; 317  |#define RSRC_FUNCLET__FREEDRMMANAGERINTERNALCONTEXTS 82    
                            13180 ; 318  |//$FILENAME drm_clk_initchecksecureclock.src
                            13181 ; 319  |#define RSRC_FUNCLET_DRM_CLK_INITCHECKSECURECLOCK 83    
                            13182 ; 320  |//$FILENAME drm_sst_openandlockslot.src
                            13183 ; 321  |#define RSRC_FUNCLET_DRM_SST_OPENANDLOCKSLOT 84    
                            13184 ; 322  |//$FILENAME aes_enc.src
                            13185 ; 323  |#define RSRC_AES_ENC 85    
                            13186 ; 324  |//$FILENAME getprivkey.src
                            13187 ; 325  |#define RSRC_FUNCLET_GETPRIVKEY 86    
                            13188 ; 326  |//$FILENAME Funclet_GetUnicodeCharacterBitmap.src
                            13189 ; 327  |#define RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP 87    
                            13190 ; 328  |//$FILENAME playlist_codebank.src
                            13191 ; 329  |#define RSRC_PLAYLIST_CODEBANK 88    
                            13192 ; 330  |//$FILENAME drm_lic_getenablingbits.src
                            13193 ; 331  |#define RSRC_FUNCLET_DRM_LIC_GETENABLINGBITS 89    
                            13194 ; 332  |//$FILENAME drm_mgr_uninitialize.src
                            13195 ; 333  |#define RSRC_FUNCLET_DRM_MGR_UNINITIALIZE 90    
                            13196 ; 334  |//$FILENAME _getdevicecert.src
                            13197 ; 335  |#define RSRC_FUNCLET__GETDEVICECERT 91    
                            13198 ; 336  |//$FILENAME drm_lic_reportactions.src
                            13199 ; 337  |#define RSRC_FUNCLET_DRM_LIC_REPORTACTIONS 92    
                            13200 ; 338  |//$FILENAME drmcrt_wcsntol.src
                            13201 ; 339  |#define RSRC_FUNCLET_DRMCRT_WCSNTOL 93    
                            13202 ; 340  |//$FILENAME _basicheaderchecks.src
                            13203 ; 341  |#define RSRC_FUNCLET__BASICHEADERCHECKS 94    
                            13204 ; 342  |//$FILENAME drm_hdr_getattribute.src
                            13205 ; 343  |#define RSRC_FUNCLET_DRM_HDR_GETATTRIBUTE 95    
                            13206 ; 344  |//$FILENAME drm_hds_slotenumnext.src
                            13207 ; 345  |#define RSRC_FUNCLET_DRM_HDS_SLOTENUMNEXT 96    
                            13208 ; 346  |//$FILENAME drm_levl_evaluateexpression.src
                            13209 ; 347  |#define RSRC_FUNCLET_DRM_LEVL_EVALUATEEXPRESSION 97    
                            13210 ; 348  |//$FILENAME drm_lst_open.src
                            13211 ; 349  |#define RSRC_FUNCLET_DRM_LST_OPEN 98    
                            13212 ; 350  |//$FILENAME drm_xml_getnodeattribute.src
                            13213 ; 351  |#define RSRC_FUNCLET_DRM_XML_GETNODEATTRIBUTE 99    
                            13214 ; 352  |//$FILENAME _verifysymmerticsignature.src
                            13215 ; 353  |#define RSRC_FUNCLET__VERIFYSYMMERTICSIGNATURE 100    
                            13216 ; 354  |//$FILENAME oem_openfile.src
                            13217 ; 355  |#define RSRC_FUNCLET_OEM_OPENFILE 101    
                            13218 ; 356  |//$FILENAME _getdrmfullpathname.src
                            13219 ; 357  |#define RSRC_FUNCLET__GETDRMFULLPATHNAME 102    
                            13220 ; 358  |//$FILENAME oem_getsecurestoreglobalpasswordseed.src
                            13221 ; 359  |#define RSRC_FUNCLET_OEM_GETSECURESTOREGLOBALPASSWORDSEED 103    
                            13222 ; 360  |//$FILENAME _applydiffstostore.src
                            13223 ; 361  |#define RSRC_FUNCLET__APPLYDIFFSTOSTORE 104    
                            13224 ; 362  |//$FILENAME drm_sst_setdata.src
                            13225 ; 363  |#define RSRC_FUNCLET_DRM_SST_SETDATA 105    
                            13226 ; 364  |//$FILENAME drm_sst_getlockeddata.src
                            13227 ; 365  |#define RSRC_FUNCLET_DRM_SST_GETLOCKEDDATA 106    
                            13228 ; 366  |//$FILENAME drm_sst_setlockeddata.src
                            13229 ; 367  |#define RSRC_FUNCLET_DRM_SST_SETLOCKEDDATA 107    
                            13230 ; 368  |//$FILENAME playerlib_extra.src
                            13231 ; 369  |#define RSRC_PLAYERLIB_EXTRA_CODE_BANK 108    
                            13232 ; 370  |//$FILENAME wmaCommon.src
                            13233 ; 371  |#define RSRC_WMA_COMMON 109    
                            13234 ; 372  |//$FILENAME wmainit.src
                            13235 ; 373  |#define RSRC_WMA_INIT 110    
                            13236 ; 374  |//$FILENAME playlist2traverse_codebank.src
                            13237 ; 375  |#define RSRC_PLAYLIST2TRAVERSE_CODEBANK 111    
                            13238 ; 376  |//$FILENAME drm_bbx_cipherkeysetup.src
                            13239 ; 377  |#define RSRC_FUNCLET_DRM_BBX_CIPHERKEYSETUP 112    
                            13240 ; 378  |//$FILENAME drm_lic_checkclockrollback.src
                            13241 ; 379  |#define RSRC_FUNCLET_DRM_LIC_CHECKCLOCKROLLBACK 113    
                            13242 ; 380  |//$FILENAME drm_hds_closestore.src
                            13243 ; 381  |#define RSRC_FUNCLET_DRM_HDS_CLOSESTORE 114    
                            13244 ; 382  |//$FILENAME _hdsloadsrn.src
                            13245 ; 383  |#define RSRC_FUNCLET__HDSLOADSRN 115    
                            13246 ; 384  |//$FILENAME _loadproritizedlist.src
                            13247 ; 385  |#define RSRC_FUNCLET__LOADPRORITIZEDLIST 116    
                            13248 ; 386  |//$FILENAME drm_lst_initenum.src
                            13249 ; 387  |#define RSRC_FUNCLET_DRM_LST_INITENUM 117    
                            13250 ; 388  |//$FILENAME _loadattributesintocache.src
                            13251 ; 389  |#define RSRC_FUNCLET__LOADATTRIBUTESINTOCACHE 118    
                            13252 ; 390  |//$FILENAME drm_pk_symmetricverify.src
                            13253 ; 391  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICVERIFY 119    
                            13254 ; 392  |
                            13255 ; 393  |/////////////////////////////////////////////////////////////////////////////////
                            13256 ; 394  |//  Menu Modules (codebanks)
                            13257 ; 395  |/////////////////////////////////////////////////////////////////////////////////
                            13258 ; 396  |//$FILENAME mainmenu.src
                            13259 ; 397  |#define RSRC_MAIN_MENU_CODE_BANK 120    
                            13260 ; 398  |//$FILENAME displaylists.src
                            13261 ; 399  |#define RSRC_DISPLAY_LISTS_CODE_BANK 121    
                            13262 ; 400  |
                            13263 ; 401  |//$FILENAME voicemenu.src
                            13264 ; 402  |#define RSRC_VOICE_MENU_CODE_BANK 122    
                            13265 ; 403  |//$FILENAME fmtunermenu.src
                            13266 ; 404  |#define RSRC_FMTUNER_MENU_CODE_BANK 123    
                            13267 ; 405  |//$FILENAME recorderstatemachine.src
                            13268 ; 406  |#define RSRC_RECORDER_STATE_MACHINE_CODE_BANK 124    
                            13269 ; 407  |
                            13270 ; 408  |//$FILENAME eqmenu.src
                            13271 ; 409  |#define RSRC_EQ_MENU_CODE_BANK 125    
                            13272 ; 410  |//$FILENAME playmodemenu.src
                            13273 ; 411  |#define RSRC_PLAYMODE_MENU_CODE_BANK 126    
                            13274 ; 412  |//$FILENAME contrastmenu.src
                            13275 ; 413  |#define RSRC_CONTRAST_MENU_CODE_BANK 127    
                            13276 ; 414  |//$FILENAME pwrsettingsmenu.src
                            13277 ; 415  |#define RSRC_PWRSETTINGS_MENU_CODE_BANK 128    
                            13278 ; 416  |//$FILENAME timedatemenu.src
                            13279 ; 417  |#define RSRC_TIMEDATE_MENU_CODE_BANK 129    
                            13280 ; 418  |//$FILENAME settimemenu.src
                            13281 ; 419  |#define RSRC_SETTIME_MENU_CODE_BANK 130    
                            13282 ; 420  |//$FILENAME setdatemenu.src
                            13283 ; 421  |#define RSRC_SETDATE_MENU_CODE_BANK 131    
                            13284 ; 422  |//$FILENAME settingsmenu.src
                            13285 ; 423  |#define RSRC_SETTINGS_MENU_CODE_BANK 132    
                            13286 ; 424  |//$FILENAME string_system_menu.src
                            13287 ; 425  |#define RSRC_SYSTEM_MENU_CODE_BANK 133    
                            13288 ; 426  |//$FILENAME deletemenu.src
                            13289 ; 427  |#define RSRC_DELETE_MENU_CODE_BANK 134    
                            13290 ; 428  |//$FILENAME aboutmenu.src
                            13291 ; 429  |#define RSRC_ABOUT_MENU_CODE_BANK 135    
                            13292 ; 430  |
                            13293 ; 431  |//$FILENAME spectrogram.src
                            13294 ; 432  |#define RSRC_SPECTROGRAM_MENU_CODE_BANK 136    
                            13295 ; 433  |
                            13296 ; 434  |//$FILENAME motionvideomenu.src
                            13297 ; 435  |#define RSRC_MOTION_VIDEO_MENU_CODE_BANK 137    
                            13298 ; 436  |//$FILENAME motionvideomenuinitstate.src
                            13299 ; 437  |#define RSRC_MOTION_VIDEO_MENU_INITSTATE_CODE_BANK 138    
                            13300 ; 438  |//$FILENAME jpegdisplaymenu.src
                            13301 ; 439  |#define RSRC_JPEG_DISPLAY_MENU_CODE_BANK 139    
                            13302 ; 440  |//$FILENAME jpegmanualmenu.src
                            13303 ; 441  |#define RSRC_JPEG_MANUAL_MENU_CODE_BANK 140    
                            13304 ; 442  |//$FILENAME jpegthumbnailmenu.src
                            13305 ; 443  |#define RSRC_JPEG_THUMBNAIL_MENU_CODE_BANK 141    
                            13306 ; 444  |//$FILENAME jpegslideshowmenu.src
                            13307 ; 445  |#define RSRC_JPEG_SLIDESHOW_MENU_CODE_BANK 142    
                            13308 ; 446  |//$FILENAME albumartmenu.src
                            13309 ; 447  |#define RSRC_ALBUM_ART_MENU_CODE_BANK 143    
                            13310 ; 448  |//$FILENAME jpegfileutilextra.src
                            13311 ; 449  |#define RSRC_JPEG_FILEUTIL_EXTRA_MENU_CODE_BANK 144    
                            13312 ; 450  |
                            13313 ; 451  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13314 ; 452  |// General Modules
                            13315 ; 453  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13316 ; 454  |//$FILENAME MixMod.src
                            13317 ; 455  |#define RSRC_MIXMOD_CODE 145    
                            13318 ; 456  |//$FILENAME TunerModule.src
                            13319 ; 457  |#define RSRC_TUNER_MODULE 146    
                            13320 ; 458  |//$FILENAME geqoverlay.src
                            13321 ; 459  |#define RSRC_GEQOVERLAY_CODE 147    
                            13322 ; 460  |
                            13323 ; 461  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13324 ; 462  |// Decoders/Encoders
                            13325 ; 463  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13326 ; 464  |//$FILENAME DecMod.src
                            13327 ; 465  |#define RSRC_DECMOD_CODE 148    
                            13328 ; 466  |//$FILENAME mp3p.src
                            13329 ; 467  |#define RSRC_MP3P_CODE 149    
                            13330 ; 468  |//$FILENAME mp3x.src
                            13331 ; 469  |#define RSRC_MP3X_CODE 150    
                            13332 ; 470  |//$FILENAME mp3y.src
                            13333 ; 471  |#define RSRC_MP3Y_CODE 151    
                            13334 ; 472  |//$FILENAME janusp.src
                            13335 ; 473  |#define RSRC_JANUSP_CODE 152    
                            13336 ; 474  |//RSRC_JANUSY_CODE        equ       29    ;$FILENAME janusy.src
                            13337 ; 475  |
                            13338 ; 476  |//$FILENAME decadpcmimamod.src
                            13339 ; 477  |#define RSRC_DEC_ADPCM_MOD_CODE 153    
                            13340 ; 478  |//$FILENAME dec_adpcmp.src
                            13341 ; 479  |#define RSRC_DEC_ADPCMP_CODE 154    
                            13342 ; 480  |//$FILENAME dec_adpcmx.src
                            13343 ; 481  |#define RSRC_DEC_ADPCMX_CODE 155    
                            13344 ; 482  |//$FILENAME dec_adpcmy.src
                            13345 ; 483  |#define RSRC_DEC_ADPCMY_CODE 156    
                            13346 ; 484  |
                            13347 ; 485  |//$FILENAME decadpcmsmvmod.src
                            13348 ; 486  |#define RSRC_DEC_SMVADPCM_MOD_CODE 157    
                            13349 ; 487  |//$FILENAME dec_smvadpcmp.src
                            13350 ; 488  |#define RSRC_DEC_SMVADPCMP_CODE 158    
                            13351 ; 489  |//$FILENAME dec_smvadpcmx.src
                            13352 ; 490  |#define RSRC_DEC_SMVADPCMX_CODE 159    
                            13353 ; 491  |//$FILENAME dec_smvadpcmy.src
                            13354 ; 492  |#define RSRC_DEC_SMVADPCMY_CODE 160    
                            13355 ; 493  |
                            13356 ; 494  |//$FILENAME encadpcmimamod.src
                            13357 ; 495  |#define RSRC_ENC_ADPCM_MOD_CODE 161    
                            13358 ; 496  |//$FILENAME enc_adpcmp.src
                            13359 ; 497  |#define RSRC_ENC_ADPCMP_CODE 162    
                            13360 ; 498  |//$FILENAME enc_adpcmx.src
                            13361 ; 499  |#define RSRC_ENC_ADPCMX_CODE 163    
                            13362 ; 500  |//$FILENAME enc_adpcmy.src
                            13363 ; 501  |#define RSRC_ENC_ADPCMY_CODE 164    
                            13364 ; 502  |
                            13365 ; 503  |//$FILENAME jpeg_p.src
                            13366 ; 504  |#define RSRC_JPEG_DECODER_P 165    
                            13367 ; 505  |//$FILENAME jpeg_x.src
                            13368 ; 506  |#define RSRC_JPEG_DECODER_X 166    
                            13369 ; 507  |//$FILENAME jpeg_y.src
                            13370 ; 508  |#define RSRC_JPEG_DECODER_Y 167    
                            13371 ; 509  |//$FILENAME jpeg2_y.src
                            13372 ; 510  |#define RSRC_JPEG_DECODER_Y_2 168    
                            13373 ; 511  |//$FILENAME bmp2_y.src
                            13374 ; 512  |#define RSRC_BMP_DECODER_Y_2 169    
                            13375 ; 513  |//$FILENAME bmp_p.src
                            13376 ; 514  |#define RSRC_BMP_DECODER_P 170    
                            13377 ; 515  |
                            13378 ; 516  |//RSRC_SMVJPEG_DECODER_P    equ       57    ;$FILENAME smvjpeg_p.src
                            13379 ; 517  |//$FILENAME smvjpeg_x.src
                            13380 ; 518  |#define RSRC_SMVJPEG_DECODER_X 171    
                            13381 ; 519  |//$FILENAME smvjpeg_y.src
                            13382 ; 520  |#define RSRC_SMVJPEG_DECODER_Y 172    
                            13383 ; 521  |
                            13384 ; 522  |
                            13385 ; 523  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13386 ; 524  |// System Settings
                            13387 ; 525  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13388 ; 526  |//$FILENAME settings.src
                            13389 ; 527  |#define RSRC_SETTINGS_COMMANDS 173    
                            13390 ; 528  |
                            13391 ; 529  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13392 ; 530  |// Media Device Drivers
                            13393 ; 531  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13394 ; 532  |//This resource is filled with garbage unless it is the MMC build
                            13395 ; 533  |//$FILENAME null.src
                            13396 ; 534  |#define RSRC_MMCDD_CODE 174    
                            13397 ; 535  |//$FILENAME null.src
                            13398 ; 536  |#define RSRC_SMDD_HIGH_CODE 175    
                            13399 ; 537  |
                            13400 ; 538  |/////////////////////////////////////////////////////////////////////////////////
                            13401 ; 539  |//  PlayState resources
                            13402 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                            13403 ; 541  |//$FILENAME play_icon_with_border.src
                            13404 ; 542  |#define RSRC_PLAY_ICON_WITH_BORDER 176    
                            13405 ; 543  |//$FILENAME pause_icon_with_border.src
                            13406 ; 544  |#define RSRC_PAUSE_ICON_WITH_BORDER 177    
                            13407 ; 545  |//$FILENAME stop_icon_with_border.src
                            13408 ; 546  |#define RSRC_STOP_ICON_WITH_BORDER 178    
                            13409 ; 547  |//$FILENAME record_icon_with_border.src
                            13410 ; 548  |#define RSRC_RECORD_ICON_WITH_BORDER 179    
                            13411 ; 549  |//$FILENAME paused_record_icon_with_border.src
                            13412 ; 550  |#define RSRC_PAUSED_RECORD_ICON_BORDER 180    
                            13413 ; 551  |//$FILENAME ffwd_icon_with_border.src
                            13414 ; 552  |#define RSRC_FFWD_ICON_WITH_BORDER 181    
                            13415 ; 553  |//$FILENAME rwnd_icon_with_border.src
                            13416 ; 554  |#define RSRC_RWND_ICON_WITH_BORDER 182    
                            13417 ; 555  |
                            13418 ; 556  |/////////////////////////////////////////////////////////////////////////////////
                            13419 ; 557  |//  PlayMode resources
                            13420 ; 558  |/////////////////////////////////////////////////////////////////////////////////
                            13421 ; 559  |//$FILENAME repeatall_icon.src
                            13422 ; 560  |#define RSRC_REPEAT_ALL_ICON 183    
                            13423 ; 561  |//$FILENAME repeatsong_icon.src
                            13424 ; 562  |#define RSRC_REPEAT_SONG_ICON 184    
                            13425 ; 563  |//$FILENAME shuffle_icon.src
                            13426 ; 564  |#define RSRC_SHUFFLE_ICON 185    
                            13427 ; 565  |//$FILENAME random_icon.src
                            13428 ; 566  |#define RSRC_RANDOM_ICON 186    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13429 ; 567  |//$FILENAME repeatallclear_icon.src
                            13430 ; 568  |#define RSRC_REPEAT_ALL_CLEAR_ICON 187    
                            13431 ; 569  |//$FILENAME repeatsongclear_icon.src
                            13432 ; 570  |#define RSRC_REPEAT_SONG_CLEAR_ICON 188    
                            13433 ; 571  |//$FILENAME shuffleclear_icon.src
                            13434 ; 572  |#define RSRC_SHUFFLE_CLEAR_ICON 189    
                            13435 ; 573  |
                            13436 ; 574  |/////////////////////////////////////////////////////////////////////////////////
                            13437 ; 575  |//  Battery Status
                            13438 ; 576  |/////////////////////////////////////////////////////////////////////////////////
                            13439 ; 577  |//$FILENAME battery_00.src
                            13440 ; 578  |#define RSRC_BATTERY_00 190    
                            13441 ; 579  |//$FILENAME battery_01.src
                            13442 ; 580  |#define RSRC_BATTERY_01 191    
                            13443 ; 581  |//$FILENAME battery_02.src
                            13444 ; 582  |#define RSRC_BATTERY_02 192    
                            13445 ; 583  |//$FILENAME battery_03.src
                            13446 ; 584  |#define RSRC_BATTERY_03 193    
                            13447 ; 585  |//$FILENAME battery_04.src
                            13448 ; 586  |#define RSRC_BATTERY_04 194    
                            13449 ; 587  |//$FILENAME battery_05.src
                            13450 ; 588  |#define RSRC_BATTERY_05 195    
                            13451 ; 589  |//$FILENAME battery_06.src
                            13452 ; 590  |#define RSRC_BATTERY_06 196    
                            13453 ; 591  |//$FILENAME battery_07.src
                            13454 ; 592  |#define RSRC_BATTERY_07 197    
                            13455 ; 593  |//$FILENAME battery_08.src
                            13456 ; 594  |#define RSRC_BATTERY_08 198    
                            13457 ; 595  |//$FILENAME battery_09.src
                            13458 ; 596  |#define RSRC_BATTERY_09 199    
                            13459 ; 597  |//$FILENAME battery_10.src
                            13460 ; 598  |#define RSRC_BATTERY_10 200    
                            13461 ; 599  |
                            13462 ; 600  |/////////////////////////////////////////////////////////////////////////////////
                            13463 ; 601  |//  System Icons
                            13464 ; 602  |/////////////////////////////////////////////////////////////////////////////////
                            13465 ; 603  |//$FILENAME disk_small.src
                            13466 ; 604  |#define RSRC_DISK_ICON 201    
                            13467 ; 605  |//$FILENAME lock_small.src
                            13468 ; 606  |#define RSRC_LOCK_ICON 202    
                            13469 ; 607  |//$FILENAME icon_music_mode.src
                            13470 ; 608  |#define RSRC_MUSIC_MODE_ICON 203    
                            13471 ; 609  |//$FILENAME icon_voice_mode.src
                            13472 ; 610  |#define RSRC_VOICE_MODE_ICON 204    
                            13473 ; 611  |
                            13474 ; 612  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13475 ; 613  |// Volume Bitmaps
                            13476 ; 614  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13477 ; 615  |//$FILENAME icon_vol_00.src
                            13478 ; 616  |#define RSRC_ICON_VOL_00 205    
                            13479 ; 617  |//$FILENAME icon_vol_01.src
                            13480 ; 618  |#define RSRC_ICON_VOL_01 206    
                            13481 ; 619  |//$FILENAME icon_vol_02.src
                            13482 ; 620  |#define RSRC_ICON_VOL_02 207    
                            13483 ; 621  |//$FILENAME icon_vol_03.src
                            13484 ; 622  |#define RSRC_ICON_VOL_03 208    
                            13485 ; 623  |//$FILENAME icon_vol_04.src
                            13486 ; 624  |#define RSRC_ICON_VOL_04 209    
                            13487 ; 625  |//$FILENAME icon_vol_05.src
                            13488 ; 626  |#define RSRC_ICON_VOL_05 210    
                            13489 ; 627  |//$FILENAME icon_vol_06.src
                            13490 ; 628  |#define RSRC_ICON_VOL_06 211    
                            13491 ; 629  |//$FILENAME icon_vol_07.src
                            13492 ; 630  |#define RSRC_ICON_VOL_07 212    
                            13493 ; 631  |//$FILENAME icon_vol_08.src
                            13494 ; 632  |#define RSRC_ICON_VOL_08 213    
                            13495 ; 633  |//$FILENAME icon_vol_09.src
                            13496 ; 634  |#define RSRC_ICON_VOL_09 214    
                            13497 ; 635  |//$FILENAME icon_vol_10.src
                            13498 ; 636  |#define RSRC_ICON_VOL_10 215    
                            13499 ; 637  |//$FILENAME icon_vol_11.src
                            13500 ; 638  |#define RSRC_ICON_VOL_11 216    
                            13501 ; 639  |//$FILENAME icon_vol_12.src
                            13502 ; 640  |#define RSRC_ICON_VOL_12 217    
                            13503 ; 641  |//$FILENAME icon_vol_13.src
                            13504 ; 642  |#define RSRC_ICON_VOL_13 218    
                            13505 ; 643  |//$FILENAME icon_vol_14.src
                            13506 ; 644  |#define RSRC_ICON_VOL_14 219    
                            13507 ; 645  |//$FILENAME icon_vol_15.src
                            13508 ; 646  |#define RSRC_ICON_VOL_15 220    
                            13509 ; 647  |//$FILENAME icon_vol_16.src
                            13510 ; 648  |#define RSRC_ICON_VOL_16 221    
                            13511 ; 649  |//$FILENAME icon_vol_17.src
                            13512 ; 650  |#define RSRC_ICON_VOL_17 222    
                            13513 ; 651  |//$FILENAME icon_vol_18.src
                            13514 ; 652  |#define RSRC_ICON_VOL_18 223    
                            13515 ; 653  |//$FILENAME icon_vol_19.src
                            13516 ; 654  |#define RSRC_ICON_VOL_19 224    
                            13517 ; 655  |//$FILENAME icon_vol_20.src
                            13518 ; 656  |#define RSRC_ICON_VOL_20 225    
                            13519 ; 657  |//$FILENAME icon_vol_21.src
                            13520 ; 658  |#define RSRC_ICON_VOL_21 226    
                            13521 ; 659  |//$FILENAME icon_vol_22.src
                            13522 ; 660  |#define RSRC_ICON_VOL_22 227    
                            13523 ; 661  |//$FILENAME icon_vol_23.src
                            13524 ; 662  |#define RSRC_ICON_VOL_23 228    
                            13525 ; 663  |//$FILENAME icon_vol_24.src
                            13526 ; 664  |#define RSRC_ICON_VOL_24 229    
                            13527 ; 665  |//$FILENAME icon_vol_25.src
                            13528 ; 666  |#define RSRC_ICON_VOL_25 230    
                            13529 ; 667  |//$FILENAME icon_vol_26.src
                            13530 ; 668  |#define RSRC_ICON_VOL_26 231    
                            13531 ; 669  |//$FILENAME icon_vol_27.src
                            13532 ; 670  |#define RSRC_ICON_VOL_27 232    
                            13533 ; 671  |//$FILENAME icon_vol_28.src
                            13534 ; 672  |#define RSRC_ICON_VOL_28 233    
                            13535 ; 673  |//$FILENAME icon_vol_29.src
                            13536 ; 674  |#define RSRC_ICON_VOL_29 234    
                            13537 ; 675  |//$FILENAME icon_vol_30.src
                            13538 ; 676  |#define RSRC_ICON_VOL_30 235    
                            13539 ; 677  |//$FILENAME icon_vol_31.src
                            13540 ; 678  |#define RSRC_ICON_VOL_31 236    
                            13541 ; 679  |
                            13542 ; 680  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13543 ; 681  |// Splash Screen Stuff
                            13544 ; 682  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13545 ; 683  |//$FILENAME st_bw1.src
                            13546 ; 684  |#define RSRC_SPLASH_SCREEN 237    
                            13547 ; 685  |//$FILENAME siglogo1.src
                            13548 ; 686  |#define RSRC_SPLASH_SCREEN_1 238    
                            13549 ; 687  |//$FILENAME siglogo2.src
                            13550 ; 688  |#define RSRC_SPLASH_SCREEN_2 239    
                            13551 ; 689  |//$FILENAME siglogo3.src
                            13552 ; 690  |#define RSRC_SPLASH_SCREEN_3 240    
                            13553 ; 691  |//$FILENAME siglogo4.src
                            13554 ; 692  |#define RSRC_SPLASH_SCREEN_4 241    
                            13555 ; 693  |//$FILENAME siglogo5.src
                            13556 ; 694  |#define RSRC_SPLASH_SCREEN_5 242    
                            13557 ; 695  |//$FILENAME siglogo6.src
                            13558 ; 696  |#define RSRC_SPLASH_SCREEN_6 243    
                            13559 ; 697  |//$FILENAME siglogo7.src
                            13560 ; 698  |#define RSRC_SPLASH_SCREEN_7 244    
                            13561 ; 699  |//$FILENAME siglogo8.src
                            13562 ; 700  |#define RSRC_SPLASH_SCREEN_8 245    
                            13563 ; 701  |//$FILENAME siglogo9.src
                            13564 ; 702  |#define RSRC_SPLASH_SCREEN_9 246    
                            13565 ; 703  |//$FILENAME siglogo10.src
                            13566 ; 704  |#define RSRC_SPLASH_SCREEN_10 247    
                            13567 ; 705  |//$FILENAME siglogo11.src
                            13568 ; 706  |#define RSRC_SPLASH_SCREEN_11 248    
                            13569 ; 707  |//$FILENAME siglogo12.src
                            13570 ; 708  |#define RSRC_SPLASH_SCREEN_12 249    
                            13571 ; 709  |//$FILENAME siglogo13.src
                            13572 ; 710  |#define RSRC_SPLASH_SCREEN_13 250    
                            13573 ; 711  |//$FILENAME siglogo.src
                            13574 ; 712  |#define RSRC_SPLASH_SCREEN_ALL 251    
                            13575 ; 713  |
                            13576 ; 714  |//$FILENAME locked.src
                            13577 ; 715  |#define RSRC_LOCKED_SCREEN 252    
                            13578 ; 716  |
                            13579 ; 717  |/////////////////////////////////////////////////////////////////////////////////
                            13580 ; 718  |//  Shutdown
                            13581 ; 719  |/////////////////////////////////////////////////////////////////////////////////
                            13582 ; 720  |//$FILENAME string_arial_8_continue_holding_to_power_off.src
                            13583 ; 721  |#define RSRC_PDOWN_HOLD_STRING 253    
                            13584 ; 722  |//$FILENAME status_16_6_steps_0.src
                            13585 ; 723  |#define RSRC_PDOWN_STATUS_0 254    
                            13586 ; 724  |//$FILENAME status_16_6_steps_1.src
                            13587 ; 725  |#define RSRC_PDOWN_STATUS_1 255    
                            13588 ; 726  |//$FILENAME status_16_6_steps_2.src
                            13589 ; 727  |#define RSRC_PDOWN_STATUS_2 256    
                            13590 ; 728  |//$FILENAME status_16_6_steps_3.src
                            13591 ; 729  |#define RSRC_PDOWN_STATUS_3 257    
                            13592 ; 730  |//$FILENAME status_16_6_steps_4.src
                            13593 ; 731  |#define RSRC_PDOWN_STATUS_4 258    
                            13594 ; 732  |//$FILENAME status_16_6_steps_5.src
                            13595 ; 733  |#define RSRC_PDOWN_STATUS_5 259    
                            13596 ; 734  |//$FILENAME status_16_6_steps_6.src
                            13597 ; 735  |#define RSRC_PDOWN_STATUS_6 260    
                            13598 ; 736  |
                            13599 ; 737  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13600 ; 738  |// EQ
                            13601 ; 739  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13602 ; 740  |//$FILENAME eq_clear_icon.src
                            13603 ; 741  |#define RSRC_EQ_CLEAR_ICON 261    
                            13604 ; 742  |//$FILENAME rock_icon.src
                            13605 ; 743  |#define RSRC_ROCK_ICON 262    
                            13606 ; 744  |//$FILENAME jazz_icon.src
                            13607 ; 745  |#define RSRC_JAZZ_ICON 263    
                            13608 ; 746  |//$FILENAME classic_icon.src
                            13609 ; 747  |#define RSRC_CLASSIC_ICON 264    
                            13610 ; 748  |//$FILENAME pop_icon.src
                            13611 ; 749  |#define RSRC_POP_ICON 265    
                            13612 ; 750  |//$FILENAME custom_icon.src
                            13613 ; 751  |#define RSRC_CUSTOM_ICON 266    
                            13614 ; 752  |
                            13615 ; 753  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13616 ; 754  |// AB
                            13617 ; 755  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13618 ; 756  |//$FILENAME ab_mark_a.src
                            13619 ; 757  |#define RSRC_AB_MARK_A_ICON 267    
                            13620 ; 758  |//$FILENAME ab_mark_b.src
                            13621 ; 759  |#define RSRC_AB_MARK_B_ICON 268    
                            13622 ; 760  |
                            13623 ; 761  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13624 ; 762  |// Menu Display Resources
                            13625 ; 763  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13626 ; 764  |//$FILENAME string_music_menu.src
                            13627 ; 765  |#define RSRC_STRING_MUSIC_MENU 269    
                            13628 ; 766  |//$FILENAME string_mvideo_menu.src
                            13629 ; 767  |#define RSRC_STRING_MVIDEO_MENU 270    
                            13630 ; 768  |//$FILENAME string_jpeg_display_menu.src
                            13631 ; 769  |#define RSRC_STRING_JPEG_DISPLAY_MENU 271    
                            13632 ; 770  |//$FILENAME string_jpeg_manual_menu.src
                            13633 ; 771  |#define RSRC_STRING_JPEG_MANUAL_MENU 272    
                            13634 ; 772  |//$FILENAME string_jpeg_slideshow_menu.src
                            13635 ; 773  |#define RSRC_STRING_JPEG_SLIDESHOW_MENU 273    
                            13636 ; 774  |//$FILENAME string_jpeg_thumbnail_menu.src
                            13637 ; 775  |#define RSRC_STRING_JPEG_THUMBNAIL_MENU 274    
                            13638 ; 776  |//$FILENAME string_voice_menu.src
                            13639 ; 777  |#define RSRC_STRING_VOICE_MENU 275    
                            13640 ; 778  |//$FILENAME string_audible_menu.src
                            13641 ; 779  |#define RSRC_STRING_AUDIBLE_MENU 276    
                            13642 ; 780  |//$FILENAME string_fmtuner_menu.src
                            13643 ; 781  |#define RSRC_STRING_FMTUNER_MENU 277    
                            13644 ; 782  |//$FILENAME string_settings_menu.src
                            13645 ; 783  |#define RSRC_STRING_SETTINGS_MENU 278    
                            13646 ; 784  |//$FILENAME string_eq_menu.src
                            13647 ; 785  |#define RSRC_STRING_EQ_MENU 279    
                            13648 ; 786  |//$FILENAME string_playmode_menu.src
                            13649 ; 787  |#define RSRC_STRING_PLAYMODE_MENU 280    
                            13650 ; 788  |//$FILENAME string_contrast_menu.src
                            13651 ; 789  |#define RSRC_STRING_CONTRAST_MENU 281    
                            13652 ; 790  |//$FILENAME string_pwrsavings_menu.src
                            13653 ; 791  |#define RSRC_STRING_PWRSAVINGS_MENU 282    
                            13654 ; 792  |//$FILENAME string_time_date_menu.src
                            13655 ; 793  |#define RSRC_STRING_TIME_DATE_MENU 283    
                            13656 ; 794  |//$FILENAME string_set_time_menu.src
                            13657 ; 795  |#define RSRC_STRING_SET_TIME_MENU 284    
                            13658 ; 796  |//$FILENAME string_set_date_menu.src
                            13659 ; 797  |#define RSRC_STRING_SET_DATE_MENU 285    
                            13660 ; 798  |//$FILENAME string_exit_menu.src
                            13661 ; 799  |#define RSRC_STRING_EXIT_MENU 286    
                            13662 ; 800  |//$FILENAME string_rock_menu.src
                            13663 ; 801  |#define RSRC_STRING_ROCK_MENU 287    
                            13664 ; 802  |//$FILENAME string_pop_menu.src
                            13665 ; 803  |#define RSRC_STRING_POP_MENU 288    
                            13666 ; 804  |//$FILENAME string_classic_menu.src
                            13667 ; 805  |#define RSRC_STRING_CLASSIC_MENU 289    
                            13668 ; 806  |//$FILENAME string_normal_menu.src
                            13669 ; 807  |#define RSRC_STRING_NORMAL_MENU 290    
                            13670 ; 808  |//$FILENAME string_jazz_menu.src
                            13671 ; 809  |#define RSRC_STRING_JAZZ_MENU 291    
                            13672 ; 810  |//$FILENAME string_repeat1_menu.src
                            13673 ; 811  |#define RSRC_STRING_REPEAT1_MENU 292    
                            13674 ; 812  |//$FILENAME string_repeatall_menu.src
                            13675 ; 813  |#define RSRC_STRING_REPEATALL_MENU 293    
                            13676 ; 814  |//$FILENAME string_shuffle_menu.src
                            13677 ; 815  |#define RSRC_STRING_SHUFFLE_MENU 294    
                            13678 ; 816  |//$FILENAME string_repeatshuffle_menu.src
                            13679 ; 817  |#define RSRC_STRING_SHUFFLEREPEAT_MENU 295    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13680 ; 818  |//$FILENAME string_disable_menu.src
                            13681 ; 819  |#define RSRC_STRING_DISABLE_MENU 296    
                            13682 ; 820  |//$FILENAME string_1min_menu.src
                            13683 ; 821  |#define RSRC_STRING_1MIN_MENU 297    
                            13684 ; 822  |//$FILENAME string_2min_menu.src
                            13685 ; 823  |#define RSRC_STRING_2MIN_MENU 298    
                            13686 ; 824  |//$FILENAME string_5min_menu.src
                            13687 ; 825  |#define RSRC_STRING_5MIN_MENU 299    
                            13688 ; 826  |//$FILENAME string_10min_menu.src
                            13689 ; 827  |#define RSRC_STRING_10MIN_MENU 300    
                            13690 ; 828  |//$FILENAME string_system_menu.src
                            13691 ; 829  |#define RSRC_STRING_SYSTEM_MENU 301    
                            13692 ; 830  |//$FILENAME string_about_menu.src
                            13693 ; 831  |#define RSRC_STRING_ABOUT_MENU 302    
                            13694 ; 832  |//$FILENAME string_delete_menu.src
                            13695 ; 833  |#define RSRC_STRING_DELETE_MENU 303    
                            13696 ; 834  |//$FILENAME string_record_menu.src
                            13697 ; 835  |#define RSRC_STRING_RECORD_MENU 304    
                            13698 ; 836  |//$FILENAME string_spectrogram_menu.src
                            13699 ; 837  |#define RSRC_STRING_SPECTROGRAM_MENU 305    
                            13700 ; 838  |
                            13701 ; 839  |//$FILENAME string_end_of_slide_show.src
                            13702 ; 840  |#define RSRC_STRING_END_OF_SLIDE_SHOW 306    
                            13703 ; 841  |
                            13704 ; 842  |//$FILENAME string_mb.src
                            13705 ; 843  |#define RSRC_STRING_MB 307    
                            13706 ; 844  |
                            13707 ; 845  |//$FILENAME internal_media.src
                            13708 ; 846  |#define RSRC_INT_MEDIA 308    
                            13709 ; 847  |//$FILENAME external_media.src
                            13710 ; 848  |#define RSRC_EXT_MEDIA 309    
                            13711 ; 849  |
                            13712 ; 850  |//$FILENAME about_title.src
                            13713 ; 851  |#define RSRC_ABOUT_TITLE 310    
                            13714 ; 852  |//$FILENAME player_name.src
                            13715 ; 853  |#define RSRC_PLAYER_NAME_VER 311    
                            13716 ; 854  |
                            13717 ; 855  |//$FILENAME settings_title.src
                            13718 ; 856  |#define RSRC_SETTINGS_TITLE 312    
                            13719 ; 857  |//$FILENAME jpeg_display_title.src
                            13720 ; 858  |#define RSRC_JPEG_DISPLAY_TITLE 313    
                            13721 ; 859  |//$FILENAME erase_title.src
                            13722 ; 860  |#define RSRC_ERASE_TITLE 314    
                            13723 ; 861  |
                            13724 ; 862  |//$FILENAME del_warning_no.src
                            13725 ; 863  |#define RSRC_DELETE_NO 315    
                            13726 ; 864  |//$FILENAME del_warning_yes.src
                            13727 ; 865  |#define RSRC_DELETE_YES 316    
                            13728 ; 866  |//$FILENAME del_warning_line1.src
                            13729 ; 867  |#define RSRC_WARNING_MSG_LINE1 317    
                            13730 ; 868  |//$FILENAME del_warning_line2.src
                            13731 ; 869  |#define RSRC_WARNING_MSG_LINE2 318    
                            13732 ; 870  |//$FILENAME lowbattery.src
                            13733 ; 871  |#define RSRC_BROWNOUT_BITMAP 319    
                            13734 ; 872  |//$FILENAME vbr.src
                            13735 ; 873  |#define RSRC_VBR_BITMAP 320    
                            13736 ; 874  |
                            13737 ; 875  |//$FILENAME string_song.src
                            13738 ; 876  |#define RSRC_STRING_SONG_COLON 321    
                            13739 ; 877  |//$FILENAME string_voice.src
                            13740 ; 878  |#define RSRC_STRING_VOICE_COLON 322    
                            13741 ; 879  |
                            13742 ; 880  |//$FILENAME time_date_title.src
                            13743 ; 881  |#define RSRC_TIME_DATE_TITLE 323    
                            13744 ; 882  |//$FILENAME set_time_title.src
                            13745 ; 883  |#define RSRC_SET_TIME_TITLE 324    
                            13746 ; 884  |//$FILENAME set_date_title.src
                            13747 ; 885  |#define RSRC_SET_DATE_TITLE 325    
                            13748 ; 886  |//$FILENAME string_searching.src
                            13749 ; 887  |#define RSRC_STRING_SEARCHING 326    
                            13750 ; 888  |/////////////////////////////////////////////////////////////////////////////////
                            13751 ; 889  |//  Save Changes
                            13752 ; 890  |/////////////////////////////////////////////////////////////////////////////////
                            13753 ; 891  |//$FILENAME save_changes_yes.src
                            13754 ; 892  |#define RSRC_SAVE_CHANGES_YES 327    
                            13755 ; 893  |//$FILENAME save_changes_no.src
                            13756 ; 894  |#define RSRC_SAVE_CHANGES_NO 328    
                            13757 ; 895  |//$FILENAME save_changes_cancel.src
                            13758 ; 896  |#define RSRC_SAVE_CHANGES_CANCEL 329    
                            13759 ; 897  |//$FILENAME save_changes_clear.src
                            13760 ; 898  |#define RSRC_SAVE_CHANGES_CLEAR 330    
                            13761 ; 899  |/////////////////////////////////////////////////////////////////////////////////
                            13762 ; 900  |//  Contrast
                            13763 ; 901  |/////////////////////////////////////////////////////////////////////////////////
                            13764 ; 902  |//$FILENAME contrast_title.src
                            13765 ; 903  |#define RSRC_CONTRAST_TITLE 331    
                            13766 ; 904  |//$FILENAME contrast_frame.src
                            13767 ; 905  |#define RSRC_CONTRAST_FRAME 332    
                            13768 ; 906  |//$FILENAME contrast_level0.src
                            13769 ; 907  |#define RSRC_CONTRAST_LEVEL_0 333    
                            13770 ; 908  |//$FILENAME contrast_level1.src
                            13771 ; 909  |#define RSRC_CONTRAST_LEVEL_1 334    
                            13772 ; 910  |//$FILENAME contrast_level2.src
                            13773 ; 911  |#define RSRC_CONTRAST_LEVEL_2 335    
                            13774 ; 912  |//$FILENAME contrast_level3.src
                            13775 ; 913  |#define RSRC_CONTRAST_LEVEL_3 336    
                            13776 ; 914  |//$FILENAME contrast_level4.src
                            13777 ; 915  |#define RSRC_CONTRAST_LEVEL_4 337    
                            13778 ; 916  |//$FILENAME contrast_level5.src
                            13779 ; 917  |#define RSRC_CONTRAST_LEVEL_5 338    
                            13780 ; 918  |//$FILENAME contrast_level6.src
                            13781 ; 919  |#define RSRC_CONTRAST_LEVEL_6 339    
                            13782 ; 920  |//$FILENAME contrast_level7.src
                            13783 ; 921  |#define RSRC_CONTRAST_LEVEL_7 340    
                            13784 ; 922  |//$FILENAME contrast_level8.src
                            13785 ; 923  |#define RSRC_CONTRAST_LEVEL_8 341    
                            13786 ; 924  |//$FILENAME contrast_level9.src
                            13787 ; 925  |#define RSRC_CONTRAST_LEVEL_9 342    
                            13788 ; 926  |//$FILENAME contrast_level10.src
                            13789 ; 927  |#define RSRC_CONTRAST_LEVEL_10 343    
                            13790 ; 928  |
                            13791 ; 929  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13792 ; 930  |// Funclets
                            13793 ; 931  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13794 ; 932  |//$FILENAME Funclet_SetRTC.src
                            13795 ; 933  |#define RSRC_FUNCLET_SET_RTC 344    
                            13796 ; 934  |//$FILENAME Funclet_InitRTC.src
                            13797 ; 935  |#define RSRC_FUNCLET_INIT_RTC 345    
                            13798 ; 936  |//$FILENAME Funclet_ReadRTC.src
                            13799 ; 937  |#define RSRC_FUNCLET_READ_RTC 346    
                            13800 ; 938  |//$FILENAME Funclet_SysResetAllInt.src
                            13801 ; 939  |#define RSRC_FUNCLET_SYSRESETALLINT 347    
                            13802 ; 940  |//$FILENAME Funclet_SysSetupDecVec.src
                            13803 ; 941  |#define RSRC_FUNCLET_SYSSETUPDECVEC 348    
                            13804 ; 942  |//$FILENAME Funclet_SysSetupEncVec.src
                            13805 ; 943  |#define RSRC_FUNCLET_SYSSETUPENCVEC 349    
                            13806 ; 944  |//$FILENAME Funclet_SysTimeInit.src
                            13807 ; 945  |#define RSRC_FUNCLET_SYSTIMEINIT 350    
                            13808 ; 946  |//$FILENAME Funclet_AnalogInit.src
                            13809 ; 947  |#define RSRC_FUNCLET_ANALOGINIT 351    
                            13810 ; 948  |//$FILENAME Funclet_UsbConnected.src
                            13811 ; 949  |#define RSRC_FUNCLET_USBCONNECTED 352    
                            13812 ; 950  |//$FILENAME Funclet_ButtonInit.src
                            13813 ; 951  |#define RSRC_FUNCLET_BUTTONINIT 353    
                            13814 ; 952  |//$FILENAME Funclet_PowerUpHeadPhones.src
                            13815 ; 953  |#define RSRC_FUNCLET_POWERUPHEADPHONES 354    
                            13816 ; 954  |//$FILENAME Funclet_PowerDownHeadPhones.src
                            13817 ; 955  |#define RSRC_FUNCLET_POWERDOWNHEADPHONES 355    
                            13818 ; 956  |//$FILENAME Funclet_StartProject.src
                            13819 ; 957  |#define RSRC_FUNCLET_STARTPROJECT 356    
                            13820 ; 958  |//$FILENAME Funclet_ModuleSetTimer.src
                            13821 ; 959  |#define RSRC_FUNCLET_MODULESETTIMER 357    
                            13822 ; 960  |//$FILENAME null.src
                            13823 ; 961  |#define RSRC_FUNCLET_MEDIADETECTION 358    
                            13824 ; 962  |//$FILENAME Funclet_SysStopDecoder.src
                            13825 ; 963  |#define RSRC_FUNCLET_SYSSTOPDECODER 359    
                            13826 ; 964  |//$FILENAME Funclet_SysStopEncoder.src
                            13827 ; 965  |#define RSRC_FUNCLET_SYSSTOPENCODER 360    
                            13828 ; 966  |//$FILENAME Funclet_SysSetDecoder.src
                            13829 ; 967  |#define RSRC_FUNCLET_SYSSETDECODER 361    
                            13830 ; 968  |//$FILENAME Funclet_SysSetEncoder.src
                            13831 ; 969  |#define RSRC_FUNCLET_SYSSETENCODER 362    
                            13832 ; 970  |//$FILENAME null.src
                            13833 ; 971  |#define RSRC_FUNCLET_PROCESSPT 363    
                            13834 ; 972  |//$FILENAME Funclet_DisplaySplashScreen.src
                            13835 ; 973  |#define RSRC_FUNCLET_DISPLAYSPLASHSCREEN 364    
                            13836 ; 974  |//$FILENAME Funclet_SysGetVolume.src
                            13837 ; 975  |#define RSRC_FUNCLET_SYSGETVOLUME 365    
                            13838 ; 976  |//$FILENAME null.src
                            13839 ; 977  |#define RSRC_FUNCLET_MMCENUMERATEPHYSICALDEVICE 366    
                            13840 ; 978  |//$FILENAME null.src
                            13841 ; 979  |#define RSRC_FUNCLET_RESETDEVICE 367    
                            13842 ; 980  |//$FILENAME null.src
                            13843 ; 981  |#define RSRC_FUNCLET_PROCESSCSD 368    
                            13844 ; 982  |//$FILENAME null.src
                            13845 ; 983  |#define RSRC_FUNCLET_PROCESSPARTITION 369    
                            13846 ; 984  |//$FILENAME null.src
                            13847 ; 985  |#define RSRC_FUNCLET_PARTITIONENTRYCOPY 370    
                            13848 ; 986  |//$FILENAME Funclet_MixerMasterFadeOut.src
                            13849 ; 987  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_OUT 371    
                            13850 ; 988  |//$FILENAME Funclet_MixerMasterFadeIn.src
                            13851 ; 989  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_IN 372    
                            13852 ; 990  |//$FILENAME Funclet_EncSetProperties.src
                            13853 ; 991  |#define RSRC_FUNCLET_ENCSETPROPERTIES 373    
                            13854 ; 992  |//$FILENAME null.src
                            13855 ; 993  |#define RSRC_FUNCLET_DOESMBREXIST 374    
                            13856 ; 994  |//$FILENAME null.src
                            13857 ; 995  |#define RSRC_FUNCLET_EXTRACTPARTITIONPARAMETERS 375    
                            13858 ; 996  |//$FILENAME Funclet_SaveSettings.src
                            13859 ; 997  |#define RSRC_FUNCLET_SYSSAVESETTINGS 376    
                            13860 ; 998  |//$FILENAME Funclet_LoadSettings.src
                            13861 ; 999  |#define RSRC_FUNCLET_SYSLOADSETTINGS 377    
                            13862 ; 1000 |///////////////////////////////////////////////////////////////
                            13863 ; 1001 |// Sanyo FM Tuner Fuclet
                            13864 ; 1002 |///////////////////////////////////////////////////////////////
                            13865 ; 1003 |//RSRC_FUNCLET_TUNER_DRIVER_INIT    equ      334    ;$FILENAME Funclet_TunerDriverInit.src
                            13866 ; 1004 |//RSRC_FUNCLET_TUNER_SCAN_STATIONS    equ      335    ;$FILENAME Funclet_TunerScanStations.src
                            13867 ; 1005 |//RSRC_FUNCLET_TUNER_SET_TO_PRESET    equ      336    ;$FILENAME Funclet_TunerSetToPreset.src
                            13868 ; 1006 |//RSRC_FUNCLET_TUNER_SET_MONO_STEREO    equ      337    ;$FILENAME Funclet_TunerSetMonoStereo.src
                            13869 ; 1007 |//RSRC_FUNCLET_TUNER_SET_STANDBY    equ      338    ;$FILENAME Funclet_TunerSetStandby.src
                            13870 ; 1008 |//RSRC_FUNCLET_TUNER_SET_PRESET    equ      339    ;$FILENAME Funclet_TunerSetPreset.src
                            13871 ; 1009 |//RSRC_FUNCLET_TUNER_ERASE_PRESET    equ      340    ;$FILENAME Funclet_TunerErasePreset.src
                            13872 ; 1010 |//RSRC_FUNCLET_TUNER_SET_IF    equ      341    ;$FILENAME Funclet_TunerSetIf.src
                            13873 ; 1011 |//RSRC_FUNCLET_TUNER_WRITE_IF_OSC    equ      342    ;$FILENAME Funclet_TunerWriteIfOSc.src
                            13874 ; 1012 |//RSRC_FUNCLET_TUNER_GET_FIELD_STRENGTH    equ      343    ;$FILENAME Funclet_TunerGetFieldStrength.src
                            13875 ; 1013 |//RSRC_FUNCLET_TUNER_INIT_RF_CAP_OSC    equ      344    ;$FILENAME Funclet_TunerInitRfCapOsc.src
                            13876 ; 1014 |//RSRC_FUNCLET_TUNER_STORE_FM_STATION    equ      345    ;$FILENAME Funclet_TunerStoreFmStation.src
                            13877 ; 1015 |//RSRC_FUNCLET_TUNER_STORE_FM_PRESET    equ      346    ;$FILENAME Funclet_TunerStoreFmPreset.src
                            13878 ; 1016 |//RSRC_FUNCLET_TUNER_SET_REGION    equ      347    ;$FILENAME Funclet_TunerSetRegion.src
                            13879 ; 1017 |
                            13880 ; 1018 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13881 ; 1019 |// WMA Resources
                            13882 ; 1020 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13883 ; 1021 |//$FILENAME wmaCore.src
                            13884 ; 1022 |#define RSRC_WMA_CORE 378    
                            13885 ; 1023 |//$FILENAME wmaMidLow.src
                            13886 ; 1024 |#define RSRC_WMA_MIDLOW 379    
                            13887 ; 1025 |//$FILENAME wmaHigh.src
                            13888 ; 1026 |#define RSRC_WMA_HIGH 380    
                            13889 ; 1027 |//$FILENAME wmaHighMid.src
                            13890 ; 1028 |#define RSRC_WMA_HIGHMID 381    
                            13891 ; 1029 |//$FILENAME wmaMid.src
                            13892 ; 1030 |#define RSRC_WMA_MID 382    
                            13893 ; 1031 |//$FILENAME wmaLow.src
                            13894 ; 1032 |#define RSRC_WMA_LOW 383    
                            13895 ; 1033 |//$FILENAME wmaX1mem.src
                            13896 ; 1034 |#define RSRC_WMA_DATA_X1 384    
                            13897 ; 1035 |//$FILENAME wmaYmem.src
                            13898 ; 1036 |#define RSRC_WMA_DATA_Y 385    
                            13899 ; 1037 |//$FILENAME wmaLXmem.src
                            13900 ; 1038 |#define RSRC_WMA_DATA_L_X 386    
                            13901 ; 1039 |//$FILENAME wmaLYmem.src
                            13902 ; 1040 |#define RSRC_WMA_DATA_L_Y 387    
                            13903 ; 1041 |//$FILENAME wmaHuff44Qb.src
                            13904 ; 1042 |#define RSRC_WMA_HUFF44QB 388    
                            13905 ; 1043 |//$FILENAME wmaHuff44Ob.src
                            13906 ; 1044 |#define RSRC_WMA_HUFF44OB 389    
                            13907 ; 1045 |//$FILENAME wmaHuff16Ob.src
                            13908 ; 1046 |#define RSRC_WMA_HUFF16OB 390    
                            13909 ; 1047 |//$FILENAME drmpdcommon.src
                            13910 ; 1048 |#define RSRC_DRMPD_COMMON 391    
                            13911 ; 1049 |//$FILENAME januswmasupport.src
                            13912 ; 1050 |#define RSRC_JANUS_WMASUPPORT 392    
                            13913 ; 1051 |//$FILENAME wmalicenseinit.src
                            13914 ; 1052 |#define RSRC_WMA_LICENSEINIT 393    
                            13915 ; 1053 |//$FILENAME wma_tables.src
                            13916 ; 1054 |#define RSRC_WMA_TABLES 394    
                            13917 ; 1055 |//$FILENAME janus_tables.src
                            13918 ; 1056 |#define RSRC_JANUS_TABLES 395    
                            13919 ; 1057 |//$FILENAME wma_constants.src
                            13920 ; 1058 |#define RSRC_WMA_CONSTANTS 396    
                            13921 ; 1059 |//$FILENAME janus_constants.src
                            13922 ; 1060 |#define RSRC_JANUS_CONSTANTS 397    
                            13923 ; 1061 |//$FILENAME janus_xmem.src
                            13924 ; 1062 |#define RSRC_JANUS_X 398    
                            13925 ; 1063 |//$FILENAME janusy_data.src
                            13926 ; 1064 |#define RSRC_JANUSY_DATA 399    
                            13927 ; 1065 |
                            13928 ; 1066 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13929 ; 1067 |// Fonts -- these are last because they are very large
                            13930 ; 1068 |////////////////////////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13931 ; 1069 |//$FILENAME font_table.src
                            13932 ; 1070 |#define RSRC_FONT_TABLE 400    
                            13933 ; 1071 |//$FILENAME font_PGM.src
                            13934 ; 1072 |#define RSRC_PGM_8 401    
                            13935 ; 1073 |//$FILENAME font_SGMs.src
                            13936 ; 1074 |#define RSRC_SGMS_8 402    
                            13937 ; 1075 |//$FILENAME font_script_00.src
                            13938 ; 1076 |#define RSRC_SCRIPT_00_8 403    
                            13939 ; 1077 |//$FILENAME font_scripts.src
                            13940 ; 1078 |#define RSRC_SCRIPTS_8 404    
                            13941 ; 1079 |//$FILENAME font_PDM.src
                            13942 ; 1080 |#define RSRC_PDM 405    
                            13943 ; 1081 |//$FILENAME font_SDMs.src
                            13944 ; 1082 |#define RSRC_SDMS 406    
                            13945 ; 1083 |//$FILENAME bitmap_warning.src
                            13946 ; 1084 |#define RSRC_WARNING 407    
                            13947 ; 1085 |//$FILENAME bitmap_device_full.src
                            13948 ; 1086 |#define RSRC_DEVICE_FULL 408    
                            13949 ; 1087 |
                            13950 ; 1088 |
                            13951 ; 1089 |//$FILENAME lcd_controller_init.src
                            13952 ; 1090 |#define RSRC_LCD_INIT_SEQ 409    
                            13953 ; 1091 |
                            13954 ; 1092 |//$FILENAME Funclet_DBCSToUnicode.src
                            13955 ; 1093 |#define RSRC_FUNCLET_DBCS_TO_UNICODE 410    
                            13956 ; 1094 |//$FILENAME Funclet_DBCSToUnicodeDstXSrcY.src
                            13957 ; 1095 |#define RSRC_FUNCLET_DBCS_TO_UNICODE_DSTX_SRCY 411    
                            13958 ; 1096 |//$FILENAME Funclet_LCDSetFont.src
                            13959 ; 1097 |#define RSRC_FUNCLET_SET_FONT 412    
                            13960 ; 1098 |//$FILENAME Funclet_GetTextWidthAddressUnicode.src
                            13961 ; 1099 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE 413    
                            13962 ; 1100 |//$FILENAME Funclet_GetTextWidthResourceUnicode.src
                            13963 ; 1101 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE 414    
                            13964 ; 1102 |//$FILENAME Funclet_GetTextWidthAddressDBCS.src
                            13965 ; 1103 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS 415    
                            13966 ; 1104 |//$FILENAME Funclet_GetTextWidthResourceDBCS.src
                            13967 ; 1105 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS 416    
                            13968 ; 1106 |//$FILENAME Funclet_ChipSerialNumberInit.src
                            13969 ; 1107 |#define RSRC_FUNCLET_CHIPSERIALNUMBERINIT 417    
                            13970 ; 1108 |//$FILENAME Funclet_InternalMediaSerialNumberInit.src
                            13971 ; 1109 |#define RSRC_FUNCLET_INTERNALMEDIASERIALNUMBERINIT 418    
                            13972 ; 1110 |//$FILENAME Funclet_ChipGetSerialNumber.src
                            13973 ; 1111 |#define RSRC_FUNCLET_CHIPGETSERIALNUMBER 419    
                            13974 ; 1112 |//$FILENAME Funclet_CreateNullSerialNumber.src
                            13975 ; 1113 |#define RSRC_FUNCLET_CREATENULLSERIALNUMBER 420    
                            13976 ; 1114 |//$FILENAME Funclet_ConvertHexToASCII.src
                            13977 ; 1115 |#define RSRC_FUNCLET_CONVERTHEXTOASCII 421    
                            13978 ; 1116 |//$FILENAME Funclet_LowResolutionAdcInit.src
                            13979 ; 1117 |#define RSRC_FUNCLET_LOWRESOLUTIONADCINIT 422    
                            13980 ; 1118 |
                            13981 ; 1119 |
                            13982 ; 1120 |//$FILENAME sysrecord.src
                            13983 ; 1121 |#define RSRC_SYSRECORD_CODE 423    
                            13984 ; 1122 |
                            13985 ; 1123 |//$FILENAME string_record_settings.src
                            13986 ; 1124 |#define RSRC_STRING_RECORD_SETTINGS 424    
                            13987 ; 1125 |//$FILENAME string_sample_rate.src
                            13988 ; 1126 |#define RSRC_STRING_SAMPLE_RATE 425    
                            13989 ; 1127 |//$FILENAME string_encoder.src
                            13990 ; 1128 |#define RSRC_STRING_ENCODER 426    
                            13991 ; 1129 |//$FILENAME string_adpcm.src
                            13992 ; 1130 |#define RSRC_STRING_ADPCM 427    
                            13993 ; 1131 |//$FILENAME string_msadpcm.src
                            13994 ; 1132 |#define RSRC_STRING_MSADPCM 428    
                            13995 ; 1133 |//$FILENAME string_imadpcm.src
                            13996 ; 1134 |#define RSRC_STRING_IMADPCM 429    
                            13997 ; 1135 |//$FILENAME string_pcm.src
                            13998 ; 1136 |#define RSRC_STRING_PCM 430    
                            13999 ; 1137 |//$FILENAME string_internal.src
                            14000 ; 1138 |#define RSRC_STRING_INTERNAL 431    
                            14001 ; 1139 |//$FILENAME string_external.src
                            14002 ; 1140 |#define RSRC_STRING_EXTERNAL 432    
                            14003 ; 1141 |//$FILENAME string_device.src
                            14004 ; 1142 |#define RSRC_STRING_DEVICE 433    
                            14005 ; 1143 |//$FILENAME string_source.src
                            14006 ; 1144 |#define RSRC_STRING_SOURCE 434    
                            14007 ; 1145 |//$FILENAME string_microphone.src
                            14008 ; 1146 |#define RSRC_STRING_MICROPHONE 435    
                            14009 ; 1147 |//$FILENAME string_linein.src
                            14010 ; 1148 |#define RSRC_STRING_LINEIN 436    
                            14011 ; 1149 |//$FILENAME string_bits.src
                            14012 ; 1150 |#define RSRC_STRING_BITS 437    
                            14013 ; 1151 |//$FILENAME string_4.src
                            14014 ; 1152 |#define RSRC_STRING_4 438    
                            14015 ; 1153 |//$FILENAME string_8.src
                            14016 ; 1154 |#define RSRC_STRING_8 439    
                            14017 ; 1155 |//$FILENAME string_16.src
                            14018 ; 1156 |#define RSRC_STRING_16 440    
                            14019 ; 1157 |//$FILENAME string_24.src
                            14020 ; 1158 |#define RSRC_STRING_24 441    
                            14021 ; 1159 |//$FILENAME string_fm.src
                            14022 ; 1160 |#define RSRC_STRING_FM 442    
                            14023 ; 1161 |//$FILENAME string_mono.src
                            14024 ; 1162 |#define RSRC_STRING_MONO 443    
                            14025 ; 1163 |//$FILENAME string_stereo.src
                            14026 ; 1164 |#define RSRC_STRING_STEREO 444    
                            14027 ; 1165 |//$FILENAME string_8000hz.src
                            14028 ; 1166 |#define RSRC_STRING_8000HZ 445    
                            14029 ; 1167 |//$FILENAME string_11025hz.src
                            14030 ; 1168 |#define RSRC_STRING_11025HZ 446    
                            14031 ; 1169 |//$FILENAME string_16000hz.src
                            14032 ; 1170 |#define RSRC_STRING_16000HZ 447    
                            14033 ; 1171 |//$FILENAME string_22050hz.src
                            14034 ; 1172 |#define RSRC_STRING_22050HZ 448    
                            14035 ; 1173 |//$FILENAME string_32000hz.src
                            14036 ; 1174 |#define RSRC_STRING_32000HZ 449    
                            14037 ; 1175 |//$FILENAME string_44100hz.src
                            14038 ; 1176 |#define RSRC_STRING_44100HZ 450    
                            14039 ; 1177 |//$FILENAME string_48000hz.src
                            14040 ; 1178 |#define RSRC_STRING_48000HZ 451    
                            14041 ; 1179 |//$FILENAME string_channels.src
                            14042 ; 1180 |#define RSRC_STRING_CHANNELS 452    
                            14043 ; 1181 |//$FILENAME string_spaces.src
                            14044 ; 1182 |#define RSRC_STRING_SPACES 453    
                            14045 ; 1183 |//$FILENAME slider_bar.src
                            14046 ; 1184 |#define RSRC_SLIDER_BAR 454    
                            14047 ; 1185 |//$FILENAME slider_bar_inv.src
                            14048 ; 1186 |#define RSRC_SLIDER_BAR_INV 455    
                            14049 ; 1187 |//$FILENAME slider_track.src
                            14050 ; 1188 |#define RSRC_SLIDER_TRACK 456    
                            14051 ; 1189 |//$FILENAME string_no_files.src
                            14052 ; 1190 |#define RSRC_STRING_NO_FILES 457    
                            14053 ; 1191 |
                            14054 ; 1192 |/////////////////////////////////////////////////////////////////////
                            14055 ; 1193 |//  Time and Date Resource Strings
                            14056 ; 1194 |/////////////////////////////////////////////////////////////////////
                            14057 ; 1195 |//$FILENAME string_sunday.src
                            14058 ; 1196 |#define RSRC_STRING_SUNDAY 458    
                            14059 ; 1197 |//$FILENAME string_monday.src
                            14060 ; 1198 |#define RSRC_STRING_MONDAY 459    
                            14061 ; 1199 |//$FILENAME string_tuesday.src
                            14062 ; 1200 |#define RSRC_STRING_TUESDAY 460    
                            14063 ; 1201 |//$FILENAME string_wednesday.src
                            14064 ; 1202 |#define RSRC_STRING_WEDNESDAY 461    
                            14065 ; 1203 |//$FILENAME string_thursday.src
                            14066 ; 1204 |#define RSRC_STRING_THURSDAY 462    
                            14067 ; 1205 |//$FILENAME string_friday.src
                            14068 ; 1206 |#define RSRC_STRING_FRIDAY 463    
                            14069 ; 1207 |//$FILENAME string_saturday.src
                            14070 ; 1208 |#define RSRC_STRING_SATURDAY 464    
                            14071 ; 1209 |//$FILENAME string_am.src
                            14072 ; 1210 |#define RSRC_STRING_AM 465    
                            14073 ; 1211 |//$FILENAME string_pm.src
                            14074 ; 1212 |#define RSRC_STRING_PM 466    
                            14075 ; 1213 |//$FILENAME string_amclear.src
                            14076 ; 1214 |#define RSRC_STRING_AMCLEAR 467    
                            14077 ; 1215 |//$FILENAME string_slash.src
                            14078 ; 1216 |#define RSRC_STRING_SLASH 468    
                            14079 ; 1217 |//$FILENAME string_colon.src
                            14080 ; 1218 |#define RSRC_STRING_COLON 469    
                            14081 ; 1219 |//$FILENAME string_12hour.src
                            14082 ; 1220 |#define RSRC_STRING_12HOUR 470    
                            14083 ; 1221 |//$FILENAME string_24hour.src
                            14084 ; 1222 |#define RSRC_STRING_24HOUR 471    
                            14085 ; 1223 |//$FILENAME string_format.src
                            14086 ; 1224 |#define RSRC_STRING_FORMAT 472    
                            14087 ; 1225 |//$FILENAME string_mmddyyyy.src
                            14088 ; 1226 |#define RSRC_STRING_MMDDYYYY 473    
                            14089 ; 1227 |//$FILENAME string_ddmmyyyy.src
                            14090 ; 1228 |#define RSRC_STRING_DDMMYYYY 474    
                            14091 ; 1229 |//$FILENAME string_yyyymmdd.src
                            14092 ; 1230 |#define RSRC_STRING_YYYYMMDD 475    
                            14093 ; 1231 |//$FILENAME string_ok.src
                            14094 ; 1232 |#define RSRC_STRING_OK 476    
                            14095 ; 1233 |//$FILENAME string_cancel.src
                            14096 ; 1234 |#define RSRC_STRING_CANCEL 477    
                            14097 ; 1235 |//$FILENAME negative_sign.src
                            14098 ; 1236 |#define RSRC_NEGATIVE_SIGN 478    
                            14099 ; 1237 |//$FILENAME string_dec_pt5.src
                            14100 ; 1238 |#define RSRC_DEC_PT5_STRING 479    
                            14101 ; 1239 |//$FILENAME string_dec_pt0.src
                            14102 ; 1240 |#define RSRC_DEC_PT0_STRING 480    
                            14103 ; 1241 |//$FILENAME string_db.src
                            14104 ; 1242 |#define RSRC_DB_STRING 481    
                            14105 ; 1243 |//$FILENAME string_hz2.src
                            14106 ; 1244 |#define RSRC_HZ2_STRING 482    
                            14107 ; 1245 |
                            14108 ; 1246 |
                            14109 ; 1247 |//$FILENAME record_settings_menu_code_bank.src
                            14110 ; 1248 |#define RSRC_RECORD_SETTINGS_MENU_CODE_BANK 483    
                            14111 ; 1249 |//$FILENAME metadata_codebank.src
                            14112 ; 1250 |#define RSRC_METADATA_CODEBANK 484    
                            14113 ; 1251 |//$FILENAME mp3metadata_codebank.src
                            14114 ; 1252 |#define RSRC_MP3_METADATA_CODEBANK 485    
                            14115 ; 1253 |//$FILENAME wmametadata_codebank.src
                            14116 ; 1254 |#define RSRC_WMA_METADATA_CODEBANK 486    
                            14117 ; 1255 |//$FILENAME wavmetadata_codebank.src
                            14118 ; 1256 |#define RSRC_WAV_METADATA_CODEBANK 487    
                            14119 ; 1257 |//$FILENAME smvmetadata_codebank.src
                            14120 ; 1258 |#define RSRC_SMV_METADATA_CODEBANK 488    
                            14121 ; 1259 |//$FILENAME playlist2init_codebank.src
                            14122 ; 1260 |#define RSRC_PLAYLIST2INIT_CODEBANK 489    
                            14123 ; 1261 |
                            14124 ; 1262 |//$FILENAME delete_successful.src
                            14125 ; 1263 |#define RSRC_DELETE_SUCCESSFUL 490    
                            14126 ; 1264 |//$FILENAME delete_error.src
                            14127 ; 1265 |#define RSRC_DELETE_ERROR 491    
                            14128 ; 1266 |//$FILENAME lic_expired.src
                            14129 ; 1267 |#define RSRC_LIC_EXPIRED 492    
                            14130 ; 1268 |//$FILENAME id3v2_codebank.src
                            14131 ; 1269 |#define RSRC_ID3V2_CODEBANK 493    
                            14132 ; 1270 |//$FILENAME id3v2lyrics_codebank.src
                            14133 ; 1271 |#define RSRC_ID3V2_LYRICS_CODEBANK 494    
                            14134 ; 1272 |//$FILENAME lyrics3_codebank.src
                            14135 ; 1273 |#define RSRC_LYRICS3_CODEBANK 495    
                            14136 ; 1274 |//$FILENAME lrc_codebank.src
                            14137 ; 1275 |#define RSRC_LRC_CODEBANK 496    
                            14138 ; 1276 |//$FILENAME lyrics_api_codebank.src
                            14139 ; 1277 |#define RSRC_LYRICS_API_CODEBANK 497    
                            14140 ; 1278 |//$FILENAME wmalyrics_codebank.src
                            14141 ; 1279 |#define RSRC_WMA_LYRICS_CODEBANK 498    
                            14142 ; 1280 |//$FILENAME apicframe_codebank.src
                            14143 ; 1281 |#define RSRC_APIC_FRAME_CODEBANK 499    
                            14144 ; 1282 |
                            14145 ; 1283 |//$FILENAME exmediaerror1.src
                            14146 ; 1284 |#define RSRC_EXTERNAL_MEDIA_ERROR1 500    
                            14147 ; 1285 |//$FILENAME exmediaerror2.src
                            14148 ; 1286 |#define RSRC_EXTERNAL_MEDIA_ERROR2 501    
                            14149 ; 1287 |//$FILENAME inmediaerror1.src
                            14150 ; 1288 |#define RSRC_INTERNAL_MEDIA_ERROR1 502    
                            14151 ; 1289 |
                            14152 ; 1290 |//$FILENAME backlight_title.src
                            14153 ; 1291 |#define RSRC_BACKLIGHT_TITLE 503    
                            14154 ; 1292 |//$FILENAME backlight_state_on.src
                            14155 ; 1293 |#define RSRC_BACKLIGHT_STATE_ON 504    
                            14156 ; 1294 |//$FILENAME backlight_state_off.src
                            14157 ; 1295 |#define RSRC_BACKLIGHT_STATE_OFF 505    
                            14158 ; 1296 |//$FILENAME backlightmenu.src
                            14159 ; 1297 |#define RSRC_BACKLIGHT_MENU_CODE_BANK 506    
                            14160 ; 1298 |//$FILENAME string_backlight_menu.src
                            14161 ; 1299 |#define RSRC_STRING_BACKLIGHT_MENU 507    
                            14162 ; 1300 |
                            14163 ; 1301 |//$FILENAME enc_mp3mod.src
                            14164 ; 1302 |#define RSRC_ENC_MP3_MOD_CODE 508    
                            14165 ; 1303 |//$FILENAME enc_mp3p.src
                            14166 ; 1304 |#define RSRC_ENC_MP3P_CODE 509    
                            14167 ; 1305 |//$FILENAME enc_mp3x.src
                            14168 ; 1306 |#define RSRC_ENC_MP3X_CODE 510    
                            14169 ; 1307 |//$FILENAME enc_mp3y.src
                            14170 ; 1308 |#define RSRC_ENC_MP3Y_CODE 511    
                            14171 ; 1309 |//$FILENAME mp3_implementation.src
                            14172 ; 1310 |#define RSRC_MP3_IMPLEMENTATION 512    
                            14173 ; 1311 |//$FILENAME string_mp3.src
                            14174 ; 1312 |#define RSRC_STRING_MP3 513    
                            14175 ; 1313 |//$FILENAME string_all.src
                            14176 ; 1314 |#define RSRC_STRING_ALL 514    
                            14177 ; 1315 |
                            14178 ; 1316 |//$FILENAME mediastartup.src
                            14179 ; 1317 |#define RSRC_NANDMEDIAINIT 515    
                            14180 ; 1318 |#define RSRC_NANDMEDIAALLOCATE 0
                            14181 ; 1319 |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14182 ; 1320 |#define RSRC_NANDMEDIAGETMEDIATABLE RSRC_NANDMEDIAINIT
                            14183 ; 1321 |#define RSRC_NANDMEDIAGETINFO RSRC_NANDMEDIAINIT
                            14184 ; 1322 |#define RSRC_NANDMEDIAERASE 0
                            14185 ; 1323 |
                            14186 ; 1324 |//$FILENAME nanddatadriveinit.src
                            14187 ; 1325 |#define RSRC_NANDDATADRIVEINIT 516    
                            14188 ; 1326 |#define RSRC_NANDDATADRIVEGETINFO RSRC_NANDDATADRIVEREADSECTOR
                            14189 ; 1327 |#define RSRC_NANDDATADRIVESETINFO 0
                            14190 ; 1328 |//$FILENAME nanddatadrivereadsector.src
                            14191 ; 1329 |#define RSRC_NANDDATADRIVEREADSECTOR 517    
                            14192 ; 1330 |#define RSRC_NANDDATADRIVEWRITESECTOR RSRC_NANDDATADRIVEREADSECTOR
                            14193 ; 1331 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0
                            14194 ; 1332 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0
                            14195 ; 1333 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0
                            14196 ; 1334 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0
                            14197 ; 1335 |#define RSRC_NANDDATADRIVEERASE 0
                            14198 ; 1336 |#define RSRC_NANDDATADRIVEFLUSH RSRC_NANDDATADRIVEREADSECTOR
                            14199 ; 1337 |
                            14200 ; 1338 |#define RSRC_NANDSYSTEMDRIVEINIT RSRC_NANDMEDIAINIT
                            14201 ; 1339 |#define RSRC_NANDSYSTEMDRIVEGETINFO RSRC_NANDMEDIAINIT
                            14202 ; 1340 |#define RSRC_NANDSYSTEMDRIVESETINFO 0
                            14203 ; 1341 |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0
                            14204 ; 1342 |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0
                            14205 ; 1343 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0
                            14206 ; 1344 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0
                            14207 ; 1345 |#define RSRC_NANDSYSTEMDRIVEERASE 0
                            14208 ; 1346 |#define RSRC_NANDSYSTEMDRIVEFLUSH 0
                            14209 ; 1347 |
                            14210 ; 1348 |//$FILENAME vbr_codebank.src
                            14211 ; 1349 |#define RSRC_VBR_CODEBANK 518    
                            14212 ; 1350 |
                            14213 ; 1351 |//$FILENAME string_recordtest_menu.src
                            14214 ; 1352 |#define RSRC_STRING_RECORDTEST_MENU 519    
                            14215 ; 1353 |//$FILENAME string_recordtest_duration.src
                            14216 ; 1354 |#define RSRC_STRING_DURATION 520    
                            14217 ; 1355 |//$FILENAME string_recordtest_time5.src
                            14218 ; 1356 |#define RSRC_STRING_TIME5 521    
                            14219 ; 1357 |//$FILENAME string_recordtest_time10.src
                            14220 ; 1358 |#define RSRC_STRING_TIME10 522    
                            14221 ; 1359 |//$FILENAME string_recordtest_time30.src
                            14222 ; 1360 |#define RSRC_STRING_TIME30 523    
                            14223 ; 1361 |//$FILENAME string_recordtest_time60.src
                            14224 ; 1362 |#define RSRC_STRING_TIME60 524    
                            14225 ; 1363 |//$FILENAME string_recordtest_time300.src
                            14226 ; 1364 |#define RSRC_STRING_TIME300 525    
                            14227 ; 1365 |//$FILENAME string_recordtest_time600.src
                            14228 ; 1366 |#define RSRC_STRING_TIME600 526    
                            14229 ; 1367 |
                            14230 ; 1368 |//$FILENAME test_title.src
                            14231 ; 1369 |#define RSRC_TEST_TITLE 527    
                            14232 ; 1370 |//$FILENAME testmenu.src
                            14233 ; 1371 |#define RSRC_TEST_MENU_CODE_BANK 528    
                            14234 ; 1372 |
                            14235 ; 1373 |
                            14236 ; 1374 |//$FILENAME mmcmediastartup.src
                            14237 ; 1375 |#define RSRC_MMCDATADRIVEINIT 529    
                            14238 ; 1376 |#define RSRC_MMCMEDIAALLOCATE RSRC_MMCDATADRIVEINIT
                            14239 ; 1377 |#define RSRC_MMCMEDIADISCOVERALLOCATION RSRC_MMCDATADRIVEINIT
                            14240 ; 1378 |//$FILENAME mmcinfo.src
                            14241 ; 1379 |#define RSRC_MMCMEDIAGETINFO 530    
                            14242 ; 1380 |#define RSRC_MMCMEDIAGETMEDIATABLE RSRC_MMCMEDIAGETINFO
                            14243 ; 1381 |//$FILENAME mmcerase.src
                            14244 ; 1382 |#define RSRC_MMCMEDIAERASE 531    
                            14245 ; 1383 |
                            14246 ; 1384 |
                            14247 ; 1385 |#define RSRC_MMCDATADRIVEFLUSH RSRC_MMCDATADRIVEINIT
                            14248 ; 1386 |
                            14249 ; 1387 |//$FILENAME mmcenumerate.src
                            14250 ; 1388 |#define RSRC_MMCENUMERATE 532    
                            14251 ; 1389 |//$FILENAME mmcresetdevice.src
                            14252 ; 1390 |#define RSRC_MMC_RESETDEVICE 533    
                            14253 ; 1391 |//$FILENAME mmcprocesscsd.src
                            14254 ; 1392 |#define RSRC_MMC_PROCESSCSD 534    
                            14255 ; 1393 |//$FILENAME mmcprocesscid.src
                            14256 ; 1394 |#define RSRC_MMC_PROCESSCID 535    
                            14257 ; 1395 |//$FILENAME mmcprocesscid2.src
                            14258 ; 1396 |#define RSRC_FUNCLET_MMCPROCESSCID2 536    
                            14259 ; 1397 |//$FILENAME mmcdetectpresence.src
                            14260 ; 1398 |#define RSRC_MMC_DETECTPRESENCE 537    
                            14261 ; 1399 |//$FILENAME mmcserialnumberinit.src
                            14262 ; 1400 |#define RSRC_MMCSERIALNUMBERINIT 538    
                            14263 ; 1401 |//$FILENAME mmccheckwriteprotect.src
                            14264 ; 1402 |#define RSRC_MMC_CHECKWRITEPROTECT 539    
                            14265 ; 1403 |
                            14266 ; 1404 |//$FILENAME mmcread.src
                            14267 ; 1405 |#define RSRC_MMCDATADRIVEREADSECTOR 540    
                            14268 ; 1406 |//$FILENAME mmcmediainit.src
                            14269 ; 1407 |#define RSRC_MMCMEDIAINIT 541    
                            14270 ; 1408 |//$FILENAME mmcdatadriveinfo.src
                            14271 ; 1409 |#define RSRC_MMCDATADRIVESETINFO 542    
                            14272 ; 1410 |#define RSRC_MMCDATADRIVEGETINFO RSRC_MMCDATADRIVESETINFO
                            14273 ; 1411 |//$FILENAME mmcdatadriveerase.src
                            14274 ; 1412 |#define RSRC_MMCDATADRIVEERASE 543    
                            14275 ; 1413 |
                            14276 ; 1414 |#define RSRC_MMCDATADRIVEWRITESECTOR RSRC_MMCDATADRIVEREADSECTOR
                            14277 ; 1415 |#define RSRC_MMCDATADRIVEMULTIWRITESETUP RSRC_MMCDATADRIVEWRITESECTOR
                            14278 ; 1416 |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR RSRC_MMCDATADRIVEWRITESECTOR
                            14279 ; 1417 |
                            14280 ; 1418 |
                            14281 ; 1419 |/////////////////////////////////////////////////////////////////////////////////
                            14282 ; 1420 |//  File system
                            14283 ; 1421 |/////////////////////////////////////////////////////////////////////////////////
                            14284 ; 1422 |//$FILENAME arrangefilename.src
                            14285 ; 1423 |#define RSRC_FUNCLET_ARRANGEFILENAME 544    
                            14286 ; 1424 |//$FILENAME clearcluster.src
                            14287 ; 1425 |#define RSRC_FUNCLET_CLEARCLUSTER 545    
                            14288 ; 1426 |//$FILENAME createdirectory.src
                            14289 ; 1427 |#define RSRC_FUNCLET_CREATEDIRECTORY 546    
                            14290 ; 1428 |//$FILENAME deletecontent.src
                            14291 ; 1429 |#define RSRC_FUNCLET_DELETECONTENT 547    
                            14292 ; 1430 |//$FILENAME deleterecord.src
                            14293 ; 1431 |#define RSRC_FUNCLET_DELETERECORD 548    
                            14294 ; 1432 |//$FILENAME fastopen.src
                            14295 ; 1433 |#define RSRC_FUNCLET_FASTOPEN 549    
                            14296 ; 1434 |//$FILENAME fcreate.src
                            14297 ; 1435 |#define RSRC_FUNCLET_FCREATE 550    
                            14298 ; 1436 |//$FILENAME filegetattrib.src
                            14299 ; 1437 |#define RSRC_FUNCLET_FILEGETATTRIB 551    
                            14300 ; 1438 |//$FILENAME filegetdate.src
                            14301 ; 1439 |#define RSRC_FUNCLET_FILEGETDATE 552    
                            14302 ; 1440 |//$FILENAME filesetattrib.src
                            14303 ; 1441 |#define RSRC_FUNCLET_FILESETATTRIB 553    
                            14304 ; 1442 |//$FILENAME filesetdate.src
                            14305 ; 1443 |#define RSRC_FUNCLET_FILESETDATE 554    
                            14306 ; 1444 |//$FILENAME fsinit.src
                            14307 ; 1445 |#define RSRC_FUNCLET_FSINIT 555    
                            14308 ; 1446 |//$FILENAME fsshutdown.src
                            14309 ; 1447 |#define RSRC_FUNCLET_FSSHUTDOWN 556    
                            14310 ; 1448 |//$FILENAME readdevicerecord.src
                            14311 ; 1449 |#define RSRC_FUNCLET_READDEVICERECORD 557    
                            14312 ; 1450 |//$FILENAME checkspaceinrootdir.src
                            14313 ; 1451 |#define RSRC_FUNCLET_CHECKSPACEINROOTDIR 558    
                            14314 ; 1452 |//$FILENAME setcwdhandle.src
                            14315 ; 1453 |#define RSRC_FUNCLET_SETCWDHANDLE 559    
                            14316 ; 1454 |//$FILENAME fsdriveinit.src
                            14317 ; 1455 |#define RSRC_FUNCLET_FSDRIVEINIT 560    
                            14318 ; 1456 |//$FILENAME fsclearBuf.src
                            14319 ; 1457 |#define RSRC_FUNCLET_FSCLEARDRIVEBUF 561    
                            14320 ; 1458 |//RSRC_FUNCLET_TOTALFREECLUSTER    equ      328    ;$FILENAME totalfreecluster.src
                            14321 ; 1459 |//RSRC_FUNCLET_TOTALFREECLUSTERFAT16    equ      328    ;$FILENAME totalfreeclusterfat16.src
                            14322 ; 1460 |//$FILENAME fgetfasthandle.src
                            14323 ; 1461 |#define RSRC_FUNCLET_FGETFASTHANDLE 562    
                            14324 ; 1462 |//$FILENAME ishandlewriteallocated.src
                            14325 ; 1463 |#define RSRC_FUNCLET_ISHANDLEWRITEALLOCATED 563    
                            14326 ; 1464 |//$FILENAME isfileopen.src
                            14327 ; 1465 |#define RSRC_FUNCLET_ISFILEOPEN 564    
                            14328 ; 1466 |//$FILENAME iscurrworkdir.src
                            14329 ; 1467 |#define RSRC_FUNCLET_ISCURRWORKDIR 565    
                            14330 ; 1468 |//$FILENAME chdir.src
                            14331 ; 1469 |#define RSRC_FUNCLET_CHDIR 566    
                            14332 ; 1470 |//$FILENAME chdirFromOffset.src
                            14333 ; 1471 |#define RSRC_FUNCLET_CHDIR_FROM_OFFSET 567    
                            14334 ; 1472 |//$FILENAME deletetree.src
                            14335 ; 1473 |#define RSRC_FUNCLET_DELETETREE 568    
                            14336 ; 1474 |//$FILENAME deleteallrecords.src
                            14337 ; 1475 |#define RSRC_FUNCLET_DELETEALLRECORDS 569    
                            14338 ; 1476 |//$FILENAME cleardata.src
                            14339 ; 1477 |#define RSRC_FUNCLET_CLEARDATA 570    
                            14340 ; 1478 |//$FILENAME changetolowleveldir.src
                            14341 ; 1479 |#define RSRC_FUNCLET_CHANGETOLOWLEVELDIR 571    
                            14342 ; 1480 |//$FILENAME getrecordnumber.src
                            14343 ; 1481 |#define RSRC_FUNCLET_GETRECORDNUMBER 572    
                            14344 ; 1482 |//$FILENAME fileremove.src
                            14345 ; 1483 |#define RSRC_FUNCLET_FILEREMOVE 573    
                            14346 ; 1484 |//$FILENAME charactersearch.src
                            14347 ; 1485 |#define RSRC_FUNCLET_CHARACTERSEARCH 574    
                            14348 ; 1486 |//$FILENAME stringcompare.src
                            14349 ; 1487 |#define RSRC_FUNCLET_STRINGCOMPARE 575    
                            14350 ; 1488 |//$FILENAME fopenw.src
                            14351 ; 1489 |#define RSRC_FUNCLET_FOPENW 576    
                            14352 ; 1490 |//$FILENAME fremove.src
                            14353 ; 1491 |#define RSRC_FUNCLET_FREMOVE 577    
                            14354 ; 1492 |//$FILENAME fremovew.src
                            14355 ; 1493 |#define RSRC_FUNCLET_FREMOVEW 578    
                            14356 ; 1494 |//$FILENAME mkdir.src
                            14357 ; 1495 |#define RSRC_FUNCLET_MKDIR 579    
                            14358 ; 1496 |//$FILENAME mkdirw.src
                            14359 ; 1497 |#define RSRC_FUNCLET_MKDIRW 580    
                            14360 ; 1498 |//$FILENAME rmdir.src
                            14361 ; 1499 |#define RSRC_FUNCLET_RMDIR 581    
                            14362 ; 1500 |//$FILENAME rmdirw.src
                            14363 ; 1501 |#define RSRC_FUNCLET_RMDIRW 582    
                            14364 ; 1502 |//$FILENAME fgetc.src
                            14365 ; 1503 |#define RSRC_FUNCLET_FGETC 583    
                            14366 ; 1504 |//$FILENAME fgets.src
                            14367 ; 1505 |#define RSRC_FUNCLET_FGETS 584    
                            14368 ; 1506 |//$FILENAME fputc.src
                            14369 ; 1507 |#define RSRC_FUNCLET_FPUTC 585    
                            14370 ; 1508 |//$FILENAME fputs.src
                            14371 ; 1509 |#define RSRC_FUNCLET_FPUTS 586    
                            14372 ; 1510 |//$FILENAME arrangelongfilename.src
                            14373 ; 1511 |#define RSRC_FUNCLET_ARRANGELONGFILENAME 587    
                            14374 ; 1512 |//$FILENAME convert_itoa.src
                            14375 ; 1513 |#define RSRC_FUNCLET_CONVERT_ITOA 588    
                            14376 ; 1514 |//$FILENAME createdirrecord.src
                            14377 ; 1515 |#define RSRC_FUNCLET_CREATEDIRRECORD 589    
                            14378 ; 1516 |//$FILENAME chksum.src
                            14379 ; 1517 |#define RSRC_FUNCLET_CHKSUM 590    
                            14380 ; 1518 |//$FILENAME createshortdirrecord.src
                            14381 ; 1519 |#define RSRC_FUNCLET_CREATESHORTDIRRECORD 591    
                            14382 ; 1520 |//$FILENAME discardtrailigperiodsucs3.src
                            14383 ; 1521 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSUCS3 592    
                            14384 ; 1522 |//$FILENAME discardtrailigperiodsw.src
                            14385 ; 1523 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSW 593    
                            14386 ; 1524 |//$FILENAME extractfilenamew.src
                            14387 ; 1525 |#define RSRC_FUNCLET_EXTRACTFILENAMEW 594    
                            14388 ; 1526 |//$FILENAME extractpathw.src
                            14389 ; 1527 |#define RSRC_FUNCLET_EXTRACTPATHW 595    
                            14390 ; 1528 |//$FILENAME findfreerecord.src
                            14391 ; 1529 |#define RSRC_FUNCLET_FINDFREERECORD 596    
                            14392 ; 1530 |//$FILENAME getnamew.src
                            14393 ; 1531 |#define RSRC_FUNCLET_GETNAMEW 597    
                            14394 ; 1532 |//$FILENAME isdirectoryempty.src
                            14395 ; 1533 |#define RSRC_FUNCLET_ISDIRECTORYEMPTY 598    
                            14396 ; 1534 |//$FILENAME isshortnamevalid.src
                            14397 ; 1535 |#define RSRC_FUNCLET_ISSHORTNAMEVALID 599    
                            14398 ; 1536 |//$FILENAME longdirmatch.src
                            14399 ; 1537 |#define RSRC_FUNCLET_LONGDIRMATCH 600    
                            14400 ; 1538 |//$FILENAME unicodetooem.src
                            14401 ; 1539 |#define RSRC_FUNCLET_UNICODETOOEM 601    
                            14402 ; 1540 |//$FILENAME matchdirrecordw.src
                            14403 ; 1541 |#define RSRC_FUNCLET_MATCHDIRRECORDW 602    
                            14404 ; 1542 |//$FILENAME setcwd.src
                            14405 ; 1543 |#define RSRC_FUNCLET_SETCWD 603    
                            14406 ; 1544 |//$FILENAME setshortfilename.src
                            14407 ; 1545 |#define RSRC_FUNCLET_SETSHORTFILENAME 604    
                            14408 ; 1546 |//$FILENAME generatefilenametail.src
                            14409 ; 1547 |#define RSRC_FUNCLET_GENERATEFILENAMETAIL 605    
                            14410 ; 1548 |//$FILENAME dbcstounicode.src
                            14411 ; 1549 |#define RSRC_FUNCLET_DBCSTOUNICODE 606    
                            14412 ; 1550 |//$FILENAME strcpy.src
                            14413 ; 1551 |#define RSRC_FUNCLET_STRCPY 607    
                            14414 ; 1552 |//$FILENAME strcpyw.src
                            14415 ; 1553 |#define RSRC_FUNCLET_STRCPYW 608    
                            14416 ; 1554 |//$FILENAME strlengthw.src
                            14417 ; 1555 |#define RSRC_FUNCLET_STRLENGTHW 609    
                            14418 ; 1556 |//$FILENAME filesystempresent.src
                            14419 ; 1557 |#define RSRC_FUNCLET_FILESYSTEMPRESENT 610    
                            14420 ; 1558 |//$FILENAME DataDriveInit.src
                            14421 ; 1559 |#define RSRC_FUNCLET_DATADRIVEINIT 611    
                            14422 ; 1560 |//$FILENAME FSGetDataDrivePbsLocation.src
                            14423 ; 1561 |#define RSRC_FUNCLET_FSGETDATADRIVEPBSLOCATION 612    
                            14424 ; 1562 |//$FILENAME FSPartitionEntryCopy.src
                            14425 ; 1563 |#define RSRC_FUNCLET_FSPARTITIONENTRYCOPYFSDD 613    
                            14426 ; 1564 |//$FILENAME DataDriveGetSize.src
                            14427 ; 1565 |#define RSRC_FUNCLET_DATADRIVEGETSIZE 614    
                            14428 ; 1566 |//$FILENAME ConstructLongFileName.src
                            14429 ; 1567 |#define RSRC_FUNCLET_CONSTRUCTLONGFILENAME 615    
                            14430 ; 1568 |//$FILENAME strcpyucs3_2.src
                            14431 ; 1569 |#define RSRC_FUNCLET_STRCPYUCS3_2 616    
                            14432 ; 1570 |//$FILENAME getvolumelabel.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14433 ; 1571 |#define RSRC_FUNCLET_GETVOLUMELABEL 617    
                            14434 ; 1572 |//$FILENAME setvolumelabel.src
                            14435 ; 1573 |#define RSRC_FUNCLET_SETVOLUMELABEL 618    
                            14436 ; 1574 |//$FILENAME disk_full.src
                            14437 ; 1575 |#define RSRC_DISK_FULL 619    
                            14438 ; 1576 |//$FILENAME chkdskstartup.src
                            14439 ; 1577 |#define RSRC_CHECKDISK 620    
                            14440 ; 1578 |//$FILENAME chkdskstartupy.src
                            14441 ; 1579 |#define RSRC_CHKDSK_YMEM 621    
                            14442 ; 1580 |//$FILENAME low_level_pwr_line1.src
                            14443 ; 1581 |#define RSRC_LOW_PWR_EXT_DEV_LINE1 622    
                            14444 ; 1582 |//$FILENAME low_level_pwr_line2.src
                            14445 ; 1583 |#define RSRC_LOW_PWR_EXT_DEV_LINE2 623    
                            14446 ; 1584 |//$FILENAME string_bit_rate.src
                            14447 ; 1585 |#define RSRC_STRING_BIT_RATE 624    
                            14448 ; 1586 |//$FILENAME string_96000hz.src
                            14449 ; 1587 |#define RSRC_STRING_96KBPS 625    
                            14450 ; 1588 |//$FILENAME string_112000hz.src
                            14451 ; 1589 |#define RSRC_STRING_112KBPS 626    
                            14452 ; 1590 |//$FILENAME string_128000hz.src
                            14453 ; 1591 |#define RSRC_STRING_128KBPS 627    
                            14454 ; 1592 |//$FILENAME string_160000hz.src
                            14455 ; 1593 |#define RSRC_STRING_160KBPS 628    
                            14456 ; 1594 |//$FILENAME string_192000hz.src
                            14457 ; 1595 |#define RSRC_STRING_192KBPS 629    
                            14458 ; 1596 |//$FILENAME string_224000hz.src
                            14459 ; 1597 |#define RSRC_STRING_224KBPS 630    
                            14460 ; 1598 |//$FILENAME string_256000hz.src
                            14461 ; 1599 |#define RSRC_STRING_256KBPS 631    
                            14462 ; 1600 |//$FILENAME string_320000hz.src
                            14463 ; 1601 |#define RSRC_STRING_320KBPS 632    
                            14464 ; 1602 |//$FILENAME string_hz.src
                            14465 ; 1603 |#define RSRC_STRING_HZ 633    
                            14466 ; 1604 |//$FILENAME EncCommonp.src
                            14467 ; 1605 |#define RSRC_ENCODERCOMMON_P_CODE 634    
                            14468 ; 1606 |//$FILENAME adc_adcx.src
                            14469 ; 1607 |#define RSRC_ADC_ADCX_CODE 635    
                            14470 ; 1608 |//$FILENAME adc_adcy.src
                            14471 ; 1609 |#define RSRC_ADC_ADCY_CODE 636    
                            14472 ; 1610 |//$FILENAME Funclet_encodercommon.src
                            14473 ; 1611 |#define RSRC_FUNCLET_LOADENCODERCOMMON 637    
                            14474 ; 1612 |//$FILENAME string_album.src
                            14475 ; 1613 |#define RSRC_STRING_ALBUM 638    
                            14476 ; 1614 |//$FILENAME string_encoder_song.src
                            14477 ; 1615 |#define RSRC_STRING_SONG 639    
                            14478 ; 1616 |//$FILENAME string_mode.src
                            14479 ; 1617 |#define RSRC_STRING_MODE 640    
                            14480 ; 1618 |
                            14481 ; 1619 |//////////////////////////////////////////////////////////////////////////////////
                            14482 ; 1620 |// display related
                            14483 ; 1621 |//////////////////////////////////////////////////////////////////////////////////
                            14484 ; 1622 |//$FILENAME Funclet_HalDisplayInit.src
                            14485 ; 1623 |#define RSRC_FUNCLET_HAL_DISPLAY_INIT 641    
                            14486 ; 1624 |//$FILENAME Funclet_SalDisplayInit.src
                            14487 ; 1625 |#define RSRC_FUNCLET_SAL_DISPLAY_INIT 642    
                            14488 ; 1626 |//$FILENAME Funclet_SalHandleMessage.src
                            14489 ; 1627 |#define RSRC_FUNCLET_SAL_HANDLE_MSG 643    
                            14490 ; 1628 |//$FILENAME Funclet_FixBitmapHeader.src
                            14491 ; 1629 |#define RSRC_FUNCLET_FIXBITMAPHEADER 644    
                            14492 ; 1630 |//$FILENAME Funclet_BitmapReadHeader.src
                            14493 ; 1631 |#define RSRC_FUNCLET_BITMAPREADHEADER 645    
                            14494 ; 1632 |//$FILENAME Funclet_BitmapReadPalette.src
                            14495 ; 1633 |#define RSRC_FUNCLET_BITMAPREADPALETTE 646    
                            14496 ; 1634 |//$FILENAME Funclet_BitmapReadBitMask.src
                            14497 ; 1635 |#define RSRC_FUNCLET_BITMAPREADBITMASK 647    
                            14498 ; 1636 |//$FILENAME Funclet_BitmapPrintNonPalette.src
                            14499 ; 1637 |#define RSRC_FUNCLET_BITMAPPRINTNONPALETTE 648    
                            14500 ; 1638 |//$FILENAME Funclet_BitmapPrintPalette.src
                            14501 ; 1639 |#define RSRC_FUNCLET_BITMAPPRINTPALETTE 649    
                            14502 ; 1640 |//$FILENAME Funclet_DisplayPrintBitmapFile.src
                            14503 ; 1641 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPFILE 650    
                            14504 ; 1642 |//$FILENAME Funclet_DisplayPrintBitmapResource.src
                            14505 ; 1643 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPRESOURCE 651    
                            14506 ; 1644 |
                            14507 ; 1645 |//////////////////////////////////////////////////////////////////////////////////
                            14508 ; 1646 |//WMDRM Related
                            14509 ; 1647 |//////////////////////////////////////////////////////////////////////////////////
                            14510 ; 1648 |//$FILENAME legacy_decryptcontentkey.src
                            14511 ; 1649 |#define RSRC_FUNCLET_LEGACY_DECRYPTCONTENTKEY 652    
                            14512 ; 1650 |//$FILENAME drm_bbx_legacycipherkeysetup.src
                            14513 ; 1651 |#define RSRC_FUNCLET_DRM_BBX_LEGACYCIPHERKEYSETUP 653    
                            14514 ; 1652 |//$FILENAME drm_bbx_initialize.src
                            14515 ; 1653 |#define RSRC_FUNCLET_DRM_BBX_INITIALIZE 654    
                            14516 ; 1654 |//$FILENAME drm_bbx_canbind.src
                            14517 ; 1655 |#define RSRC_FUNCLET_DRM_BBX_CANBIND 655    
                            14518 ; 1656 |//$FILENAME verifychecksum.src
                            14519 ; 1657 |#define RSRC_FUNCLET_VERIFYCHECKSUM 656    
                            14520 ; 1658 |//$FILENAME drm_b64_encodew.src
                            14521 ; 1659 |#define RSRC_FUNCLET_DRM_B64_ENCODEW 657    
                            14522 ; 1660 |//$FILENAME _performactions.src
                            14523 ; 1661 |#define RSRC_FUNCLET__PERFORMACTIONS 658    
                            14524 ; 1662 |//$FILENAME _processendofchain.src
                            14525 ; 1663 |#define RSRC_FUNCLET__PROCESSENDOFCHAIN 659    
                            14526 ; 1664 |//$FILENAME drmcrt_iswxdigit.src
                            14527 ; 1665 |#define RSRC_FUNCLET_DRMCRT_ISWXDIGIT 660    
                            14528 ; 1666 |//$FILENAME drmcrt_towlower.src
                            14529 ; 1667 |#define RSRC_FUNCLET_DRMCRT_TOWLOWER 661    
                            14530 ; 1668 |//$FILENAME drmcrt_wcslen.src
                            14531 ; 1669 |#define RSRC_FUNCLET_DRMCRT_WCSLEN 662    
                            14532 ; 1670 |//$FILENAME drmcrt_wcsncpy.src
                            14533 ; 1671 |#define RSRC_FUNCLET_DRMCRT_WCSNCPY 663    
                            14534 ; 1672 |//$FILENAME drmcrt_memmove.src
                            14535 ; 1673 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE 664    
                            14536 ; 1674 |//$FILENAME performoperation_part1.src
                            14537 ; 1675 |#define RSRC_FUNCLET_PERFORMOPERATION_PART1 665    
                            14538 ; 1676 |//$FILENAME performoperation_part2.src
                            14539 ; 1677 |#define RSRC_FUNCLET_PERFORMOPERATION_PART2 666    
                            14540 ; 1678 |//$FILENAME performoperation_part3.src
                            14541 ; 1679 |#define RSRC_FUNCLET_PERFORMOPERATION_PART3 667    
                            14542 ; 1680 |//$FILENAME performoperation_part4.src
                            14543 ; 1681 |#define RSRC_FUNCLET_PERFORMOPERATION_PART4 668    
                            14544 ; 1682 |//$FILENAME performoperation_part5.src
                            14545 ; 1683 |#define RSRC_FUNCLET_PERFORMOPERATION_PART5 669    
                            14546 ; 1684 |//$FILENAME performoperation_part6.src
                            14547 ; 1685 |#define RSRC_FUNCLET_PERFORMOPERATION_PART6 670    
                            14548 ; 1686 |//$FILENAME isvalidfunction.src
                            14549 ; 1687 |#define RSRC_FUNCLET_ISVALIDFUNCTION 671    
                            14550 ; 1688 |//$FILENAME functiongetvalue.src
                            14551 ; 1689 |#define RSRC_FUNCLET_FUNCTIONGETVALUE 672    
                            14552 ; 1690 |//$FILENAME globalsetvariable.src
                            14553 ; 1691 |#define RSRC_FUNCLET_GLOBALSETVARIABLE 673    
                            14554 ; 1692 |//$FILENAME variabledrmkgetorset.src
                            14555 ; 1693 |#define RSRC_FUNCLET_VARIABLEDRMKGETORSET 674    
                            14556 ; 1694 |//$FILENAME variabledrmgetorset.src
                            14557 ; 1695 |#define RSRC_FUNCLET_VARIABLEDRMGETORSET 675    
                            14558 ; 1696 |//$FILENAME variableappgetorset.src
                            14559 ; 1697 |#define RSRC_FUNCLET_VARIABLEAPPGETORSET 676    
                            14560 ; 1698 |//$FILENAME variablelicensegetorset.src
                            14561 ; 1699 |#define RSRC_FUNCLET_VARIABLELICENSEGETORSET 677    
                            14562 ; 1700 |//$FILENAME variablecontentgetorset.src
                            14563 ; 1701 |#define RSRC_FUNCLET_VARIABLECONTENTGETORSET 678    
                            14564 ; 1702 |//$FILENAME variabledevicegetorset.src
                            14565 ; 1703 |#define RSRC_FUNCLET_VARIABLEDEVICEGETORSET 679    
                            14566 ; 1704 |//$FILENAME variablepmlicensegetorset.src
                            14567 ; 1705 |#define RSRC_FUNCLET_VARIABLEPMLICENSEGETORSET 680    
                            14568 ; 1706 |//$FILENAME drm_hds_createstore.src
                            14569 ; 1707 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE 681    
                            14570 ; 1708 |//$FILENAME drm_hds_init.src
                            14571 ; 1709 |#define RSRC_FUNCLET_DRM_HDS_INIT 682    
                            14572 ; 1710 |//$FILENAME drm_hds_uninit.src
                            14573 ; 1711 |#define RSRC_FUNCLET_DRM_HDS_UNINIT 683    
                            14574 ; 1712 |//$FILENAME drm_hds_openstore.src
                            14575 ; 1713 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE 684    
                            14576 ; 1714 |//$FILENAME drm_hds_deleteslot.src
                            14577 ; 1715 |#define RSRC_FUNCLET_DRM_HDS_DELETESLOT 685    
                            14578 ; 1716 |//$FILENAME drm_hds_slotresize.src
                            14579 ; 1717 |#define RSRC_FUNCLET_DRM_HDS_SLOTRESIZE 686    
                            14580 ; 1718 |//$FILENAME drm_hds_initslotenum.src
                            14581 ; 1719 |#define RSRC_FUNCLET_DRM_HDS_INITSLOTENUM 687    
                            14582 ; 1720 |//$FILENAME drm_hds_cleanupstore.src
                            14583 ; 1721 |#define RSRC_FUNCLET_DRM_HDS_CLEANUPSTORE 688    
                            14584 ; 1722 |//$FILENAME _hdscopyslot_child2child.src
                            14585 ; 1723 |#define RSRC_FUNCLET__HDSCOPYSLOT_CHILD2CHILD 689    
                            14586 ; 1724 |//$FILENAME _hdscopychildpayload.src
                            14587 ; 1725 |#define RSRC_FUNCLET__HDSCOPYCHILDPAYLOAD 690    
                            14588 ; 1726 |//$FILENAME _hdsdefragmentfile.src
                            14589 ; 1727 |#define RSRC_FUNCLET__HDSDEFRAGMENTFILE 691    
                            14590 ; 1728 |//$FILENAME _hdscleanupnamespace.src
                            14591 ; 1729 |#define RSRC_FUNCLET__HDSCLEANUPNAMESPACE 692    
                            14592 ; 1730 |//$FILENAME _hdscleanupstore.src
                            14593 ; 1731 |#define RSRC_FUNCLET__HDSCLEANUPSTORE 693    
                            14594 ; 1732 |//$FILENAME drm_lst_clean.src
                            14595 ; 1733 |#define RSRC_FUNCLET_DRM_LST_CLEAN 694    
                            14596 ; 1734 |//$FILENAME _hdslocatefreeblockforslot.src
                            14597 ; 1735 |#define RSRC_FUNCLET__HDSLOCATEFREEBLOCKFORSLOT 695    
                            14598 ; 1736 |//$FILENAME _hdslockblock2deleteslot.src
                            14599 ; 1737 |#define RSRC_FUNCLET__HDSLOCKBLOCK2DELETESLOT 696    
                            14600 ; 1738 |//$FILENAME _hdsunlockblock2deleteslot.src
                            14601 ; 1739 |#define RSRC_FUNCLET__HDSUNLOCKBLOCK2DELETESLOT 697    
                            14602 ; 1740 |//$FILENAME _hdscreatenamespace.src
                            14603 ; 1741 |#define RSRC_FUNCLET__HDSCREATENAMESPACE 698    
                            14604 ; 1742 |//$FILENAME _hdsfilepos2blocknum.src
                            14605 ; 1743 |#define RSRC_FUNCLET__HDSFILEPOS2BLOCKNUM 699    
                            14606 ; 1744 |//$FILENAME _writesrn.src
                            14607 ; 1745 |#define RSRC_FUNCLET__WRITESRN 700    
                            14608 ; 1746 |//$FILENAME _writecommonblockheader.src
                            14609 ; 1747 |#define RSRC_FUNCLET__WRITECOMMONBLOCKHEADER 701    
                            14610 ; 1748 |//$FILENAME _writechildblockheader.src
                            14611 ; 1749 |#define RSRC_FUNCLET__WRITECHILDBLOCKHEADER 702    
                            14612 ; 1750 |//$FILENAME _readdatablockheader.src
                            14613 ; 1751 |#define RSRC_FUNCLET__READDATABLOCKHEADER 703    
                            14614 ; 1752 |//$FILENAME _writedatablockheader.src
                            14615 ; 1753 |#define RSRC_FUNCLET__WRITEDATABLOCKHEADER 704    
                            14616 ; 1754 |//$FILENAME _hdsexpandstore.src
                            14617 ; 1755 |#define RSRC_FUNCLET__HDSEXPANDSTORE 705    
                            14618 ; 1756 |//$FILENAME _hdsallocblock.src
                            14619 ; 1757 |#define RSRC_FUNCLET__HDSALLOCBLOCK 706    
                            14620 ; 1758 |//$FILENAME _hdsfreeblock.src
                            14621 ; 1759 |#define RSRC_FUNCLET__HDSFREEBLOCK 707    
                            14622 ; 1760 |//$FILENAME _hdscreateoversizedslot.src
                            14623 ; 1761 |#define RSRC_FUNCLET__HDSCREATEOVERSIZEDSLOT 708    
                            14624 ; 1762 |//$FILENAME _hdsallocslotinfile.src
                            14625 ; 1763 |#define RSRC_FUNCLET__HDSALLOCSLOTINFILE 709    
                            14626 ; 1764 |//$FILENAME _hdswriteblockhdr.src
                            14627 ; 1765 |#define RSRC_FUNCLET__HDSWRITEBLOCKHDR 710    
                            14628 ; 1766 |//$FILENAME _hdsadjustchildpayload.src
                            14629 ; 1767 |#define RSRC_FUNCLET__HDSADJUSTCHILDPAYLOAD 711    
                            14630 ; 1768 |//$FILENAME _hdsfindleftmostleafblock.src
                            14631 ; 1769 |#define RSRC_FUNCLET__HDSFINDLEFTMOSTLEAFBLOCK 712    
                            14632 ; 1770 |//$FILENAME _hdscreateandopenslot.src
                            14633 ; 1771 |#define RSRC_FUNCLET__HDSCREATEANDOPENSLOT 713    
                            14634 ; 1772 |//$FILENAME _hdsremoveslot.src
                            14635 ; 1773 |#define RSRC_FUNCLET__HDSREMOVESLOT 714    
                            14636 ; 1774 |//$FILENAME _hdscopyandlocknewslot.src
                            14637 ; 1775 |#define RSRC_FUNCLET__HDSCOPYANDLOCKNEWSLOT 715    
                            14638 ; 1776 |//$FILENAME _hdsrelocateslotandkeepcurrlock.src
                            14639 ; 1777 |#define RSRC_FUNCLET__HDSRELOCATESLOTANDKEEPCURRLOCK 716    
                            14640 ; 1778 |//$FILENAME _hdstraversenextrightsiblingblock.src
                            14641 ; 1779 |#define RSRC_FUNCLET__HDSTRAVERSENEXTRIGHTSIBLINGBLOCK 717    
                            14642 ; 1780 |//$FILENAME _hdstraverseblocksinpostorder.src
                            14643 ; 1781 |#define RSRC_FUNCLET__HDSTRAVERSEBLOCKSINPOSTORDER 718    
                            14644 ; 1782 |//$FILENAME _hdsslotresize.src
                            14645 ; 1783 |#define RSRC_FUNCLET__HDSSLOTRESIZE 719    
                            14646 ; 1784 |//$FILENAME _isnull.src
                            14647 ; 1785 |#define RSRC_FUNCLET__ISNULL 720    
                            14648 ; 1786 |//$FILENAME _hdsgensrnhash.src
                            14649 ; 1787 |#define RSRC_FUNCLET__HDSGENSRNHASH 721    
                            14650 ; 1788 |//$FILENAME _hdsallocblockbuffer.src
                            14651 ; 1789 |#define RSRC_FUNCLET__HDSALLOCBLOCKBUFFER 722    
                            14652 ; 1790 |//$FILENAME _readsrn.src
                            14653 ; 1791 |#define RSRC_FUNCLET__READSRN 723    
                            14654 ; 1792 |//$FILENAME _hdsgetputchildblocknum.src
                            14655 ; 1793 |#define RSRC_FUNCLET__HDSGETPUTCHILDBLOCKNUM 724    
                            14656 ; 1794 |//$FILENAME _hdshashkeytoindex.src
                            14657 ; 1795 |#define RSRC_FUNCLET__HDSHASHKEYTOINDEX 725    
                            14658 ; 1796 |//$FILENAME _hdsslotwrite.src
                            14659 ; 1797 |#define RSRC_FUNCLET__HDSSLOTWRITE 726    
                            14660 ; 1798 |//$FILENAME _hdsinitslotenum.src
                            14661 ; 1799 |#define RSRC_FUNCLET__HDSINITSLOTENUM 727    
                            14662 ; 1800 |//$FILENAME drm_lst_close.src
                            14663 ; 1801 |#define RSRC_FUNCLET_DRM_LST_CLOSE 728    
                            14664 ; 1802 |//$FILENAME drm_lst_enumnext.src
                            14665 ; 1803 |#define RSRC_FUNCLET_DRM_LST_ENUMNEXT 729    
                            14666 ; 1804 |//$FILENAME drm_lst_enumdelete.src
                            14667 ; 1805 |#define RSRC_FUNCLET_DRM_LST_ENUMDELETE 730    
                            14668 ; 1806 |//$FILENAME _processextensions.src
                            14669 ; 1807 |#define RSRC_FUNCLET__PROCESSEXTENSIONS 731    
                            14670 ; 1808 |//$FILENAME _processidlist.src
                            14671 ; 1809 |#define RSRC_FUNCLET__PROCESSIDLIST 732    
                            14672 ; 1810 |//$FILENAME _processexclusions.src
                            14673 ; 1811 |#define RSRC_FUNCLET__PROCESSEXCLUSIONS 733    
                            14674 ; 1812 |//$FILENAME _processinclusions.src
                            14675 ; 1813 |#define RSRC_FUNCLET__PROCESSINCLUSIONS 734    
                            14676 ; 1814 |//$FILENAME drm_opl_processcopyoutputleveldata.src
                            14677 ; 1815 |#define RSRC_FUNCLET_DRM_OPL_PROCESSCOPYOUTPUTLEVELDATA 735    
                            14678 ; 1816 |//$FILENAME _getopllevel.src
                            14679 ; 1817 |#define RSRC_FUNCLET__GETOPLLEVEL 736    
                            14680 ; 1818 |//$FILENAME drm_opl_processplayoutputleveldata.src
                            14681 ; 1819 |#define RSRC_FUNCLET_DRM_OPL_PROCESSPLAYOUTPUTLEVELDATA 737    
                            14682 ; 1820 |//$FILENAME _updateattributetokeninslot.src
                            14683 ; 1821 |#define RSRC_FUNCLET__UPDATEATTRIBUTETOKENINSLOT 738    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14684 ; 1822 |//$FILENAME drm_sst_settokenvalue.src
                            14685 ; 1823 |#define RSRC_FUNCLET_DRM_SST_SETTOKENVALUE 739    
                            14686 ; 1824 |//$FILENAME drm_sst_createlicensestatepassword.src
                            14687 ; 1825 |#define RSRC_FUNCLET_DRM_SST_CREATELICENSESTATEPASSWORD 740    
                            14688 ; 1826 |//$FILENAME drm_utl_promoteansitounicode.src
                            14689 ; 1827 |#define RSRC_FUNCLET_DRM_UTL_PROMOTEANSITOUNICODE 741    
                            14690 ; 1828 |//$FILENAME drm_pk_symmetricsign.src
                            14691 ; 1829 |#define RSRC_FUNCLET_DRM_PK_SYMMETRICSIGN 742    
                            14692 ; 1830 |//$FILENAME drm_utl_getversionfromstring.src
                            14693 ; 1831 |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONFROMSTRING 743    
                            14694 ; 1832 |//$FILENAME drm_utl_stringinsertblanksubstring.src
                            14695 ; 1833 |#define RSRC_FUNCLET_DRM_UTL_STRINGINSERTBLANKSUBSTRING 744    
                            14696 ; 1834 |//$FILENAME drm_utl_stringremovesubstring.src
                            14697 ; 1835 |#define RSRC_FUNCLET_DRM_UTL_STRINGREMOVESUBSTRING 745    
                            14698 ; 1836 |//$FILENAME drm_utl_dstrsearch.src
                            14699 ; 1837 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCH 746    
                            14700 ; 1838 |//$FILENAME drm_utl_dstrsearchreverse.src
                            14701 ; 1839 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCHREVERSE 747    
                            14702 ; 1840 |//$FILENAME drm_utl_stringtoguid.src
                            14703 ; 1841 |#define RSRC_FUNCLET_DRM_UTL_STRINGTOGUID 748    
                            14704 ; 1842 |//$FILENAME drm_utl_ensuredataalignment.src
                            14705 ; 1843 |#define RSRC_FUNCLET_DRM_UTL_ENSUREDATAALIGNMENT 749    
                            14706 ; 1844 |//$FILENAME overlappingdates.src
                            14707 ; 1845 |#define RSRC_FUNCLET_OVERLAPPINGDATES 750    
                            14708 ; 1846 |//$FILENAME drm_asd_parsev2license.src
                            14709 ; 1847 |#define RSRC_FUNCLET_DRM_ASD_PARSEV2LICENSE 751    
                            14710 ; 1848 |//$FILENAME neginfdate.src
                            14711 ; 1849 |#define RSRC_FUNCLET_NEGINFDATE 752    
                            14712 ; 1850 |//$FILENAME infdate.src
                            14713 ; 1851 |#define RSRC_FUNCLET_INFDATE 753    
                            14714 ; 1852 |//$FILENAME isexpired.src
                            14715 ; 1853 |#define RSRC_FUNCLET_ISEXPIRED 754    
                            14716 ; 1854 |//$FILENAME getsecstateattr.src
                            14717 ; 1855 |#define RSRC_FUNCLET_GETSECSTATEATTR 755    
                            14718 ; 1856 |//$FILENAME setexpirycategory.src
                            14719 ; 1857 |#define RSRC_FUNCLET_SETEXPIRYCATEGORY 756    
                            14720 ; 1858 |//$FILENAME getv2licenseinfo.src
                            14721 ; 1859 |#define RSRC_FUNCLET_GETV2LICENSEINFO 757    
                            14722 ; 1860 |//$FILENAME getnextlicense.src
                            14723 ; 1861 |#define RSRC_FUNCLET_GETNEXTLICENSE 758    
                            14724 ; 1862 |//$FILENAME aggregate.src
                            14725 ; 1863 |#define RSRC_FUNCLET_AGGREGATE 759    
                            14726 ; 1864 |//$FILENAME drm_asd_getlicenseaggregatedata.src
                            14727 ; 1865 |#define RSRC_FUNCLET_DRM_ASD_GETLICENSEAGGREGATEDATA 760    
                            14728 ; 1866 |//$FILENAME _scannodeforattributew.src
                            14729 ; 1867 |#define RSRC_FUNCLET__SCANNODEFORATTRIBUTEW 761    
                            14730 ; 1868 |//$FILENAME _getxmlnodecdataw.src
                            14731 ; 1869 |#define RSRC_FUNCLET__GETXMLNODECDATAW 762    
                            14732 ; 1870 |//$FILENAME drm_ddc_getdevicecertificate.src
                            14733 ; 1871 |#define RSRC_FUNCLET_DRM_DDC_GETDEVICECERTIFICATE 763    
                            14734 ; 1872 |//$FILENAME _createdevicestore.src
                            14735 ; 1873 |#define RSRC_FUNCLET__CREATEDEVICESTORE 764    
                            14736 ; 1874 |//$FILENAME _mapdrmerror.src
                            14737 ; 1875 |#define RSRC_FUNCLET__MAPDRMERROR 765    
                            14738 ; 1876 |//$FILENAME _comparemachineid.src
                            14739 ; 1877 |#define RSRC_FUNCLET__COMPAREMACHINEID 766    
                            14740 ; 1878 |//$FILENAME initmgrcontext.src
                            14741 ; 1879 |#define RSRC_FUNCLET_INITMGRCONTEXT 767    
                            14742 ; 1880 |//$FILENAME drm_mgr_setv2header.src
                            14743 ; 1881 |#define RSRC_FUNCLET_DRM_MGR_SETV2HEADER 768    
                            14744 ; 1882 |//$FILENAME drm_mgr_commit.src
                            14745 ; 1883 |#define RSRC_FUNCLET_DRM_MGR_COMMIT 769    
                            14746 ; 1884 |//$FILENAME drm_mgr_cleanuplicensestore.src
                            14747 ; 1885 |#define RSRC_FUNCLET_DRM_MGR_CLEANUPLICENSESTORE 770    
                            14748 ; 1886 |//$FILENAME januscleandatastore.src
                            14749 ; 1887 |#define RSRC_FUNCLET_JANUSCLEANDATASTORE 771    
                            14750 ; 1888 |//$FILENAME drm_mtr_openid.src
                            14751 ; 1889 |#define RSRC_FUNCLET_DRM_MTR_OPENID 772    
                            14752 ; 1890 |//$FILENAME drm_mtr_incrementcount.src
                            14753 ; 1891 |#define RSRC_FUNCLET_DRM_MTR_INCREMENTCOUNT 773    
                            14754 ; 1892 |//$FILENAME drm_mtr_closecontext.src
                            14755 ; 1893 |#define RSRC_FUNCLET_DRM_MTR_CLOSECONTEXT 774    
                            14756 ; 1894 |//$FILENAME oem_setendoffile.src
                            14757 ; 1895 |#define RSRC_FUNCLET_OEM_SETENDOFFILE 775    
                            14758 ; 1896 |//$FILENAME oem_genrandombytes.src
                            14759 ; 1897 |#define RSRC_FUNCLET_OEM_GENRANDOMBYTES 776    
                            14760 ; 1898 |//$FILENAME oem_getfallbacksigningkey.src
                            14761 ; 1899 |#define RSRC_FUNCLET_OEM_GETFALLBACKSIGNINGKEY 777    
                            14762 ; 1900 |//$FILENAME oem_getdevicecerttemplate.src
                            14763 ; 1901 |#define RSRC_FUNCLET_OEM_GETDEVICECERTTEMPLATE 778    
                            14764 ; 1902 |//$FILENAME oem_setdevicecert.src
                            14765 ; 1903 |#define RSRC_FUNCLET_OEM_SETDEVICECERT 779    
                            14766 ; 1904 |//$FILENAME oem_getclockresetstate.src
                            14767 ; 1905 |#define RSRC_FUNCLET_OEM_GETCLOCKRESETSTATE 780    
                            14768 ; 1906 |//$FILENAME oem_setclockresetstate.src
                            14769 ; 1907 |#define RSRC_FUNCLET_OEM_SETCLOCKRESETSTATE 781    
                            14770 ; 1908 |//$FILENAME oem_getuniqueid.src
                            14771 ; 1909 |#define RSRC_FUNCLET_OEM_GETUNIQUEID 782    
                            14772 ; 1910 |//$FILENAME oem_getdevicecert.src
                            14773 ; 1911 |#define RSRC_FUNCLET_OEM_GETDEVICECERT 783    
                            14774 ; 1912 |//$FILENAME drm_snc_openstore.src
                            14775 ; 1913 |#define RSRC_FUNCLET_DRM_SNC_OPENSTORE 784    
                            14776 ; 1914 |//$FILENAME drm_snc_closestore.src
                            14777 ; 1915 |#define RSRC_FUNCLET_DRM_SNC_CLOSESTORE 785    
                            14778 ; 1916 |//$FILENAME _setkidstoredata.src
                            14779 ; 1917 |#define RSRC_FUNCLET__SETKIDSTOREDATA 786    
                            14780 ; 1918 |//$FILENAME drm_snc_deletekid.src
                            14781 ; 1919 |#define RSRC_FUNCLET_DRM_SNC_DELETEKID 787    
                            14782 ; 1920 |//$FILENAME drm_snc_updatekid.src
                            14783 ; 1921 |#define RSRC_FUNCLET_DRM_SNC_UPDATEKID 788    
                            14784 ; 1922 |//$FILENAME drm_mgr_setv1header.src
                            14785 ; 1923 |#define RSRC_FUNCLET_DRM_MGR_SETV1HEADER 789    
                            14786 ; 1924 |//$FILENAME functiongetvalue_part1.src
                            14787 ; 1925 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_PART1 790    
                            14788 ; 1926 |//$FILENAME functiongetvalue_fn_datediff.src
                            14789 ; 1927 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_FN_DATEDIFF 791    
                            14790 ; 1928 |//$FILENAME _hdscreatenamespacestore.src
                            14791 ; 1929 |#define RSRC_FUNCLET__HDSCREATENAMESPACESTORE 792    
                            14792 ; 1930 |//$FILENAME drm_hds_createstore2.src
                            14793 ; 1931 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE2 793    
                            14794 ; 1932 |//$FILENAME drm_hds_openstore2.src
                            14795 ; 1933 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE2 794    
                            14796 ; 1934 |//$FILENAME _hdsprealloc.src
                            14797 ; 1935 |#define RSRC_FUNCLET__HDSPREALLOC 795    
                            14798 ; 1936 |//$FILENAME oem_systemtimetofiletime.src
                            14799 ; 1937 |#define RSRC_FUNCLET_OEM_SYSTEMTIMETOFILETIME 796    
                            14800 ; 1938 |//$FILENAME oem_filetimetosystemtime.src
                            14801 ; 1939 |#define RSRC_FUNCLET_OEM_FILETIMETOSYSTEMTIME 797    
                            14802 ; 1940 |//$FILENAME gendevicecertificate.src
                            14803 ; 1941 |#define RSRC_FUNCLET_GENDEVICECERTIFICATE 798    
                            14804 ; 1942 |//$FILENAME drmcrt_memmove_mem.src
                            14805 ; 1943 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE_MEM 799    
                            14806 ; 1944 |//$FILENAME copyhdsdtore.src
                            14807 ; 1945 |#define RSRC_FUNCLET_COPYHDSDTORE 800    
                            14808 ; 1946 |//$FILENAME generatedevicecert.src
                            14809 ; 1947 |#define RSRC_FUNCLET_GENERATEDEVICECERT 801    
                            14810 ; 1948 |//$FILENAME oem_getdevicedatetime.src
                            14811 ; 1949 |#define RSRC_FUNCLET_OEM_GETDEVICEDATETIME 802    
                            14812 ; 1950 |//$FILENAME drm_mtr_updatedata.src
                            14813 ; 1951 |#define RSRC_FUNCLET_DRM_MTR_UPDATEDATA 803    
                            14814 ; 1952 |//$FILENAME _hdsupdatesrn.src
                            14815 ; 1953 |#define RSRC_FUNCLET__HDSUPDATESRN 804    
                            14816 ; 1954 |//$FILENAME drm_b64_decodew_inplace.src
                            14817 ; 1955 |#define RSRC_FUNCLET_DRM_B64_DECODEW_INPLACE 805    
                            14818 ; 1956 |//$FILENAME _checksecureclock.src
                            14819 ; 1957 |#define RSRC_FUNCLET__CHECKSECURECLOCK 806    
                            14820 ; 1958 |//$FILENAME _preparesecureclockdataforwriting.src
                            14821 ; 1959 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORWRITING 807    
                            14822 ; 1960 |//$FILENAME _preparesecureclockdataforreading.src
                            14823 ; 1961 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORREADING 808    
                            14824 ; 1962 |//$FILENAME drm_sst_closelockedslot.src
                            14825 ; 1963 |#define RSRC_FUNCLET_DRM_SST_CLOSELOCKEDSLOT 809    
                            14826 ; 1964 |//$FILENAME variablesecuretimegetorset.src
                            14827 ; 1965 |#define RSRC_FUNCLET_VARIABLESECURETIMEGETORSET 810    
                            14828 ; 1966 |//$FILENAME strtol.src
                            14829 ; 1967 |#define RSRC_FUNCLET_STRTOL 811    
                            14830 ; 1968 |//$FILENAME mktime.src
                            14831 ; 1969 |#define RSRC_FUNCLET_MKTIME 812    
                            14832 ; 1970 |//$FILENAME gmtime.src
                            14833 ; 1971 |#define RSRC_FUNCLET_GMTIME 813    
                            14834 ; 1972 |//$FILENAME localtime.src
                            14835 ; 1973 |#define RSRC_FUNCLET_LOCALTIME 814    
                            14836 ; 1974 |//$FILENAME _struct_tm_to_systemtime.src
                            14837 ; 1975 |#define RSRC_FUNCLET__STRUCT_TM_TO_SYSTEMTIME 815    
                            14838 ; 1976 |//$FILENAME _systemtime_to_struct_tm.src
                            14839 ; 1977 |#define RSRC_FUNCLET__SYSTEMTIME_TO_STRUCT_TM 816    
                            14840 ; 1978 |//$FILENAME _systemtimetotime_t.src
                            14841 ; 1979 |#define RSRC_FUNCLET__SYSTEMTIMETOTIME_T 817    
                            14842 ; 1980 |//$FILENAME oem_setsystemtime.src
                            14843 ; 1981 |#define RSRC_FUNCLET_OEM_SETSYSTEMTIME 818    
                            14844 ; 1982 |//$FILENAME const_pkcrypto.src
                            14845 ; 1983 |#define RSRC_CONST_PKCRYPTO 819    
                            14846 ; 1984 |//$FILENAME const_y.src
                            14847 ; 1985 |#define RSRC_CONST_Y 820    
                            14848 ; 1986 |//$FILENAME aes_dec_table.src
                            14849 ; 1987 |#define RSRC_AES_DEC_TABLE 821    
                            14850 ; 1988 |//$FILENAME aes_key_table.src
                            14851 ; 1989 |#define RSRC_AES_KEY_TABLE 822    
                            14852 ; 1990 |//$FILENAME aes_enc_table.src
                            14853 ; 1991 |#define RSRC_AES_ENC_TABLE 823    
                            14854 ; 1992 |//$FILENAME device_cert.src
                            14855 ; 1993 |#define RSRC_DEVCERT 824    
                            14856 ; 1994 |//$FILENAME devcert_template.src
                            14857 ; 1995 |#define RSRC_DEVCERT_TEMPLATE 825    
                            14858 ; 1996 |//$FILENAME getbase64decodedkey.src
                            14859 ; 1997 |#define RSRC_FUNCLET_GETBASE64DECODEDKEY 826    
                            14860 ; 1998 |//$FILENAME _initslot.src
                            14861 ; 1999 |#define RSRC_FUNCLET__INITSLOT 827    
                            14862 ; 2000 |//$FILENAME hdsimplcommon.src
                            14863 ; 2001 |#define RSRC_HDSIMPLCOMMON_P 828    
                            14864 ; 2002 |//$FILENAME hdsimpl_p.src
                            14865 ; 2003 |#define RSRC_HDSIMPL_P 829    
                            14866 ; 2004 |
                            14867 ; 2005 |
                            14868 ; 2006 |//////////////////////////////////////////////////////////////////////////////////
                            14869 ; 2007 |//pkcrypto Related
                            14870 ; 2008 |//////////////////////////////////////////////////////////////////////////////////
                            14871 ; 2009 |//$FILENAME two_adic_inverse.src
                            14872 ; 2010 |#define RSRC_FUNCLET_TWO_ADIC_INVERSE 830    
                            14873 ; 2011 |//$FILENAME mp_shift.src
                            14874 ; 2012 |#define RSRC_FUNCLET_MP_SHIFT 831    
                            14875 ; 2013 |//$FILENAME mp_significant_bit_count.src
                            14876 ; 2014 |#define RSRC_FUNCLET_MP_SIGNIFICANT_BIT_COUNT 832    
                            14877 ; 2015 |//$FILENAME set_immediate.src
                            14878 ; 2016 |#define RSRC_FUNCLET_SET_IMMEDIATE 833    
                            14879 ; 2017 |//$FILENAME multiply_immediate.src
                            14880 ; 2018 |#define RSRC_FUNCLET_MULTIPLY_IMMEDIATE 834    
                            14881 ; 2019 |//$FILENAME multiply.src
                            14882 ; 2020 |#define RSRC_FUNCLET_MULTIPLY 835    
                            14883 ; 2021 |//$FILENAME divide_precondition_1.src
                            14884 ; 2022 |#define RSRC_FUNCLET_DIVIDE_PRECONDITION_1 836    
                            14885 ; 2023 |//$FILENAME divide_immediate.src
                            14886 ; 2024 |#define RSRC_FUNCLET_DIVIDE_IMMEDIATE 837    
                            14887 ; 2025 |//$FILENAME ecaffine_exponentiation_tabular.src
                            14888 ; 2026 |#define RSRC_FUNCLET_ECAFFINE_EXPONENTIATION_TABULAR 838    
                            14889 ; 2027 |//$FILENAME ecaffine_table_construction.src
                            14890 ; 2028 |#define RSRC_FUNCLET_ECAFFINE_TABLE_CONSTRUCTION 839    
                            14891 ; 2029 |//$FILENAME ecproj5_to_ecaffine.src
                            14892 ; 2030 |#define RSRC_FUNCLET_ECPROJ5_TO_ECAFFINE 840    
                            14893 ; 2031 |//$FILENAME ecproj5_set_infinite.src
                            14894 ; 2032 |#define RSRC_FUNCLET_ECPROJ5_SET_INFINITE 841    
                            14895 ; 2033 |//$FILENAME ecaffine_on_curve.src
                            14896 ; 2034 |#define RSRC_FUNCLET_ECAFFINE_ON_CURVE 842    
                            14897 ; 2035 |//$FILENAME ecaffine_addition.src
                            14898 ; 2036 |#define RSRC_FUNCLET_ECAFFINE_ADDITION 843    
                            14899 ; 2037 |//$FILENAME ecaffine_addition_subtraction.src
                            14900 ; 2038 |#define RSRC_FUNCLET_ECAFFINE_ADDITION_SUBTRACTION 844    
                            14901 ; 2039 |//$FILENAME ecaffine_attributes2.src
                            14902 ; 2040 |#define RSRC_FUNCLET_ECAFFINE_ATTRIBUTES2 845    
                            14903 ; 2041 |//$FILENAME kfdesc_initialize.src
                            14904 ; 2042 |#define RSRC_FUNCLET_KFDESC_INITIALIZE 846    
                            14905 ; 2043 |//$FILENAME kimmediate.src
                            14906 ; 2044 |#define RSRC_FUNCLET_KIMMEDIATE 847    
                            14907 ; 2045 |//$FILENAME kprime_immediater.src
                            14908 ; 2046 |#define RSRC_FUNCLET_KPRIME_IMMEDIATER 848    
                            14909 ; 2047 |//$FILENAME kprime_sqrter.src
                            14910 ; 2048 |#define RSRC_FUNCLET_KPRIME_SQRTER 849    
                            14911 ; 2049 |//$FILENAME kinitialize_prime.src
                            14912 ; 2050 |#define RSRC_FUNCLET_KINITIALIZE_PRIME 850    
                            14913 ; 2051 |//$FILENAME mod_lucasuv.src
                            14914 ; 2052 |#define RSRC_FUNCLET_MOD_LUCASUV 851    
                            14915 ; 2053 |//$FILENAME mod_lucas.src
                            14916 ; 2054 |#define RSRC_FUNCLET_MOD_LUCAS 852    
                            14917 ; 2055 |//$FILENAME bucket_multiply.src
                            14918 ; 2056 |#define RSRC_FUNCLET_BUCKET_MULTIPLY 853    
                            14919 ; 2057 |//$FILENAME mod_exp2000.src
                            14920 ; 2058 |#define RSRC_FUNCLET_MOD_EXP2000 854    
                            14921 ; 2059 |//$FILENAME mod_exp.src
                            14922 ; 2060 |#define RSRC_FUNCLET_MOD_EXP 855    
                            14923 ; 2061 |//$FILENAME modmul_choices1.src
                            14924 ; 2062 |#define RSRC_FUNCLET_MODMUL_CHOICES1 856    
                            14925 ; 2063 |//$FILENAME mod_sqrt.src
                            14926 ; 2064 |#define RSRC_FUNCLET_MOD_SQRT 857    
                            14927 ; 2065 |//$FILENAME create_modulus.src
                            14928 ; 2066 |#define RSRC_FUNCLET_CREATE_MODULUS 858    
                            14929 ; 2067 |//$FILENAME from_modular.src
                            14930 ; 2068 |#define RSRC_FUNCLET_FROM_MODULAR 859    
                            14931 ; 2069 |//$FILENAME add_immediate.src
                            14932 ; 2070 |#define RSRC_FUNCLET_ADD_IMMEDIATE 860    
                            14933 ; 2071 |//$FILENAME add_diff.src
                            14934 ; 2072 |#define RSRC_FUNCLET_ADD_DIFF 861    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14935 ; 2073 |//$FILENAME add_full.src
                            14936 ; 2074 |#define RSRC_FUNCLET_ADD_FULL 862    
                            14937 ; 2075 |//$FILENAME compare_sum_same.src
                            14938 ; 2076 |#define RSRC_FUNCLET_COMPARE_SUM_SAME 863    
                            14939 ; 2077 |//$FILENAME sub_immediate.src
                            14940 ; 2078 |#define RSRC_FUNCLET_SUB_IMMEDIATE 864    
                            14941 ; 2079 |//$FILENAME mp_initialization.src
                            14942 ; 2080 |#define RSRC_FUNCLET_MP_INITIALIZATION 865    
                            14943 ; 2081 |//$FILENAME new_random_bytes.src
                            14944 ; 2082 |#define RSRC_FUNCLET_NEW_RANDOM_BYTES 866    
                            14945 ; 2083 |//$FILENAME new_random_dword_interval.src
                            14946 ; 2084 |#define RSRC_FUNCLET_NEW_RANDOM_DWORD_INTERVAL 867    
                            14947 ; 2085 |//$FILENAME new_random_digit_interval.src
                            14948 ; 2086 |#define RSRC_FUNCLET_NEW_RANDOM_DIGIT_INTERVAL 868    
                            14949 ; 2087 |//$FILENAME new_random_mod.src
                            14950 ; 2088 |#define RSRC_FUNCLET_NEW_RANDOM_MOD 869    
                            14951 ; 2089 |//$FILENAME new_random_mod_nonzero.src
                            14952 ; 2090 |#define RSRC_FUNCLET_NEW_RANDOM_MOD_NONZERO 870    
                            14953 ; 2091 |//$FILENAME new_random_digits.src
                            14954 ; 2092 |#define RSRC_FUNCLET_NEW_RANDOM_DIGITS 871    
                            14955 ; 2093 |//$FILENAME words_to_ecaffine.src
                            14956 ; 2094 |#define RSRC_FUNCLET_WORDS_TO_ECAFFINE 872    
                            14957 ; 2095 |//$FILENAME ecaffine_to_dwords.src
                            14958 ; 2096 |#define RSRC_FUNCLET_ECAFFINE_TO_DWORDS 873    
                            14959 ; 2097 |//$FILENAME _threadunsafepkinit.src
                            14960 ; 2098 |#define RSRC_FUNCLET__THREADUNSAFEPKINIT 874    
                            14961 ; 2099 |//$FILENAME pkinit.src
                            14962 ; 2100 |#define RSRC_FUNCLET_PKINIT 875    
                            14963 ; 2101 |//$FILENAME drm_pk_genkeypair.src
                            14964 ; 2102 |#define RSRC_FUNCLET_DRM_PK_GENKEYPAIR 876    
                            14965 ; 2103 |//$FILENAME drm_pk_encrypt.src
                            14966 ; 2104 |#define RSRC_FUNCLET_DRM_PK_ENCRYPT 877    
                            14967 ; 2105 |//$FILENAME drm_pk_decrypt.src
                            14968 ; 2106 |#define RSRC_FUNCLET_DRM_PK_DECRYPT 878    
                            14969 ; 2107 |//$FILENAME byte_array_mod_bignum.src
                            14970 ; 2108 |#define RSRC_FUNCLET_BYTE_ARRAY_MOD_BIGNUM 879    
                            14971 ; 2109 |//$FILENAME fe2ipmod.src
                            14972 ; 2110 |#define RSRC_FUNCLET_FE2IPMOD 880    
                            14973 ; 2111 |//$FILENAME drm_pk_sign.src
                            14974 ; 2112 |#define RSRC_FUNCLET_DRM_PK_SIGN 881    
                            14975 ; 2113 |//$FILENAME drm_pk_verify.src
                            14976 ; 2114 |#define RSRC_FUNCLET_DRM_PK_VERIFY 882    
                            14977 ; 2115 |//$FILENAME random_bytes.src
                            14978 ; 2116 |#define RSRC_FUNCLET_RANDOM_BYTES 883    
                            14979 ; 2117 |//$FILENAME mp_gcdex.src
                            14980 ; 2118 |#define RSRC_FUNCLET_MP_GCDEX 884    
                            14981 ; 2119 |//$FILENAME mp_gcdex_split1.src
                            14982 ; 2120 |#define RSRC_FUNCLET_MP_GCDEX_SPLIT1 885    
                            14983 ; 2121 |//$FILENAME pkcrypto_p.src
                            14984 ; 2122 |#define RSRC_PKCRYPTO_P 886    
                            14985 ; 2123 |//$FILENAME pkcrypto_ovl_p.src
                            14986 ; 2124 |#define RSRC_PKCRYPTO_OVL_P 887    
                            14987 ; 2125 |//$FILENAME del_all_warning_line2.src
                            14988 ; 2126 |#define RSRC_WARNING_MSG_ALL_LINE2 888    
                            14989 ; 2127 |//$FILENAME del_all_file_star.src
                            14990 ; 2128 |#define RSRC_FILE_DELETE_STAR 889    
                            14991 ; 2129 |//$FILENAME string_voice_menu_delete_all.src
                            14992 ; 2130 |#define RSRC_STRING_VOICE_MENU_DELETE_ALL 890    
                            14993 ; 2131 |//$FILENAME Funclet_Init5VSense.src
                            14994 ; 2132 |#define RSRC_FUNCLET_INIT5VSENSE 891    
                            14995 ; 2133 |//$FILENAME Funclet_UpdateDCDCDutyCycle.src
                            14996 ; 2134 |#define RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE 892    
                            14997 ; 2135 |//$FILENAME Funclet_changeplayset.src
                            14998 ; 2136 |#define RSRC_FUNCLET_CHANGE_PLAYSET 893    
                            14999 ; 2137 |
                            15000 ; 2138 |//$FILENAME Funclet_mmctesterase.src
                            15001 ; 2139 |#define RSRC_FUNCLET_MMC_TEST_ERASE 894    
                            15002 ; 2140 |//$FILENAME Funclet_mmchalinit.src
                            15003 ; 2141 |#define RSRC_FUNCLET_MMC_HALINIT 895    
                            15004 ; 2142 |
                            15005 ; 2143 |
                            15006 ; 2144 |// Added to allow rechargeable battery configurations to build
                            15007 ; 2145 |//$FILENAME battery_charging.src
                            15008 ; 2146 |#define RSRC_BATTERY_CHARGING 896    
                            15009 ; 2147 |//$FILENAME batterychargecodebank.src
                            15010 ; 2148 |#define RSRC_BATTERY_CHARGE_CODEBANK 897    
                            15011 ; 2149 |//$FILENAME updatevolume.src
                            15012 ; 2150 |#define RSRC_FUNCLET_SYSUPDATEVOLUME 898    
                            15013 ; 2151 |//$FILENAME Funclet_TestSkipCheckDisk.src
                            15014 ; 2152 |#define RSRC_FUNCLET_TESTSKIPCHECKDISK 899    
                            15015 ; 2153 |//$FILENAME Funclet_DisableStmpGeneratedMicBias.src
                            15016 ; 2154 |#define RSRC_FUNCLET_DISABLE_STMP_GENERATED_MICBIAS 900    
                            15017 ; 2155 |//$FILENAME Funclet_EnableStmpGeneratedMicBias.src
                            15018 ; 2156 |#define RSRC_FUNCLET_ENABLE_STMP_GENERATED_MICBIAS 901    
                            15019 ; 2157 |//$FILENAME Funclet_SetSkipCheckDisk.src
                            15020 ; 2158 |#define RSRC_FUNCLET_SETSKIPCHECKDISK 902    
                            15021 ; 2159 |//$FILENAME drm_expr_evaluateexpression_no_more_tokens.src
                            15022 ; 2160 |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION_NO_MORE_TOKENS 903    
                            15023 ; 2161 |//$FILENAME _iscachedevent.src
                            15024 ; 2162 |#define RSRC_FUNCLET__ISCACHEDEVENT 904    
                            15025 ; 2163 |//$FILENAME setcountedexpirycategory.src
                            15026 ; 2164 |#define RSRC_FUNCLET_SETCOUNTEDEXPIRYCATEGORY 905    
                            15027 ; 2165 |//$FILENAME oem_data.src
                            15028 ; 2166 |#define RSRC_OEM_DATA 906    
                            15029 ; 2167 |//$FILENAME gpk_p.src
                            15030 ; 2168 |#define RSRC_GPK_P 907    
                            15031 ; 2169 |//$FILENAME key_data.src
                            15032 ; 2170 |#define RSRC_KEY_DATA 908    
                            15033 ; 2171 |//$FILENAME string_arial_8_defragmenting_store.src
                            15034 ; 2172 |#define RSRC_DEFRAGMENT_STORE_STRING 909    
                            15035 ; 2173 |//$FILENAME string_working.src
                            15036 ; 2174 |#define RSRC_STRING_WORKING 910    
                            15037 ; 2175 |//$FILENAME Funclet_loadusertime.src
                            15038 ; 2176 |#define RSRC_FUNCLET_LOADUSERTIME 911    
                            15039 ; 2177 |//$FILENAME Funclet_saveusertime.src
                            15040 ; 2178 |#define RSRC_FUNCLET_SAVEUSERTIME 912    
                            15041 ; 2179 |
                            15042 ; 2180 |//$FILENAME Funclet_SysLRADCBrownoutInit.src
                            15043 ; 2181 |#define RSRC_FUNCLET_SYSLRADCBROWNOUTINIT 913    
                            15044 ; 2182 |//$FILENAME Funclet_SysBatteryGetLevel.src
                            15045 ; 2183 |#define RSRC_FUNCLET_SYSBATTERYGETLEVEL 914    
                            15046 ; 2184 |
                            15047 ; 2185 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15048 ; 2186 |// Audible ACELP Resources
                            15049 ; 2187 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15050 ; 2188 |//$FILENAME AudibleAcelpDec.src
                            15051 ; 2189 |#define RSRC_AUDIBLE_ACELPDEC_CODE 915    
                            15052 ; 2190 |//$FILENAME AudibleAcelpP.src
                            15053 ; 2191 |#define RSRC_AUDIBLE_ACELP_CODE_P 916    
                            15054 ; 2192 |//$FILENAME AudibleAcelpX.src
                            15055 ; 2193 |#define RSRC_AUDIBLE_ACELP_DATA_X 917    
                            15056 ; 2194 |//$FILENAME AudibleAcelpY.src
                            15057 ; 2195 |#define RSRC_AUDIBLE_ACELP_DATA_Y 918    
                            15058 ; 2196 |
                            15059 ; 2197 |//$FILENAME AudibleDecMod.src
                            15060 ; 2198 |#define RSRC_AUDIBLE_DECMOD_CODE 919    
                            15061 ; 2199 |//$FILENAME audiblemp3p.src
                            15062 ; 2200 |#define RSRC_AUDIBLE_MP3P_CODE 920    
                            15063 ; 2201 |//$FILENAME audiblemp3x.src
                            15064 ; 2202 |#define RSRC_AUDIBLE_MP3X_CODE 921    
                            15065 ; 2203 |//$FILENAME audiblemp3y.src
                            15066 ; 2204 |#define RSRC_AUDIBLE_MP3Y_CODE 922    
                            15067 ; 2205 |
                            15068 ; 2206 |//$FILENAME audiblemetadata_p.src
                            15069 ; 2207 |#define RSRC_AUDIBLE_METADATA_P 923    
                            15070 ; 2208 |//$FILENAME audiblemetadata_y.src
                            15071 ; 2209 |#define RSRC_AUDIBLE_METADATA_Y 924    
                            15072 ; 2210 |//$FILENAME audiblesongposition_p.src
                            15073 ; 2211 |#define RSRC_AUDIBLE_SONG_POSITION_P 925    
                            15074 ; 2212 |//$FILENAME audibletargetcheck_p.src
                            15075 ; 2213 |#define RSRC_AUDIBLE_TARGET_CHECK_P 926    
                            15076 ; 2214 |//$FILENAME audiblefillfileinfo_p.src
                            15077 ; 2215 |#define RSRC_AUDIBLE_FILLFILEINFO_P 927    
                            15078 ; 2216 |//$FILENAME audibledsa_p.src
                            15079 ; 2217 |#define RSRC_AUDIBLE_DSA_P 928    
                            15080 ; 2218 |//$FILENAME audiblefillmetadata_p.src
                            15081 ; 2219 |#define RSRC_AUDIBLE_FILLMETADATA_P 929    
                            15082 ; 2220 |//$FILENAME audiblemetastrings_p.src
                            15083 ; 2221 |#define RSRC_AUDIBLE_METASTRINGS_P 930    
                            15084 ; 2222 |//$FILENAME aaactivationrecords_p.src
                            15085 ; 2223 |#define RSRC_AUDIBLE_ACTIVATION_P 931    
                            15086 ; 2224 |
                            15087 ; 2225 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15088 ; 2226 |// Effects and SRS Resources
                            15089 ; 2227 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15090 ; 2228 |//$FILENAME srs_effectsmodules_p.src
                            15091 ; 2229 |#define RSRC_SRS_EFFECTS_MODULES_P 932    
                            15092 ; 2230 |//$FILENAME srs_effectsmodules_x.src
                            15093 ; 2231 |#define RSRC_SRS_EFFECTS_MODULES_X 933    
                            15094 ; 2232 |//$FILENAME wowctrl.src
                            15095 ; 2233 |#define RSRC_WOW_CTRL 934    
                            15096 ; 2234 |
                            15097 ; 2235 |//$FILENAME wowmenu.src
                            15098 ; 2236 |#define RSRC_WOW_MENU_CODE_BANK 935    
                            15099 ; 2237 |//$FILENAME string_wowbrightness_menu.src
                            15100 ; 2238 |#define RSRC_STRING_WOW_BRIGHTNESS 936    
                            15101 ; 2239 |//$FILENAME string_wow_menu.src
                            15102 ; 2240 |#define RSRC_STRING_WOW_MENU 937    
                            15103 ; 2241 |//$FILENAME string_wowtrubass_menu.src
                            15104 ; 2242 |#define RSRC_STRING_WOW_TRUBASS 938    
                            15105 ; 2243 |//$FILENAME string_wowvolume_menu.src
                            15106 ; 2244 |#define RSRC_STRING_WOW_VOLUME 939    
                            15107 ; 2245 |//$FILENAME string_wowbrightness_low_menu.src
                            15108 ; 2246 |#define RSRC_STRING_WOW_BRIGHT_LOW 940    
                            15109 ; 2247 |//$FILENAME string_wowbrightness_mid_menu.src
                            15110 ; 2248 |#define RSRC_STRING_WOW_BRIGHT_MID 941    
                            15111 ; 2249 |//$FILENAME string_wowbrightness_high_menu.src
                            15112 ; 2250 |#define RSRC_STRING_WOW_BRIGHT_HIGH 942    
                            15113 ; 2251 |//$FILENAME wow_icon.src
                            15114 ; 2252 |#define RSRC_WOW_ICON 943    
                            15115 ; 2253 |
                            15116 ; 2254 |//$FILENAME wow16k.src
                            15117 ; 2255 |#define RSRC_WOW16K 944    
                            15118 ; 2256 |//$FILENAME wow32k.src
                            15119 ; 2257 |#define RSRC_WOW32K 945    
                            15120 ; 2258 |//$FILENAME wow8k.src
                            15121 ; 2259 |#define RSRC_WOW8K 946    
                            15122 ; 2260 |//$FILENAME wow11k.src
                            15123 ; 2261 |#define RSRC_WOW11K 947    
                            15124 ; 2262 |//$FILENAME wow22k.src
                            15125 ; 2263 |#define RSRC_WOW22K 948    
                            15126 ; 2264 |//$FILENAME wow24k.src
                            15127 ; 2265 |#define RSRC_WOW24K 949    
                            15128 ; 2266 |//$FILENAME wow44k.src
                            15129 ; 2267 |#define RSRC_WOW44K 950    
                            15130 ; 2268 |//$FILENAME wow48k.src
                            15131 ; 2269 |#define RSRC_WOW48K 951    
                            15132 ; 2270 |
                            15133 ; 2271 |//$FILENAME wow16k_Y.src
                            15134 ; 2272 |#define RSRC_WOW16K_Y 952    
                            15135 ; 2273 |//$FILENAME wow32k_Y.src
                            15136 ; 2274 |#define RSRC_WOW32K_Y 953    
                            15137 ; 2275 |//$FILENAME wow8k_Y.src
                            15138 ; 2276 |#define RSRC_WOW8K_Y 954    
                            15139 ; 2277 |//$FILENAME wow11k_Y.src
                            15140 ; 2278 |#define RSRC_WOW11K_Y 955    
                            15141 ; 2279 |//$FILENAME wow22k_Y.src
                            15142 ; 2280 |#define RSRC_WOW22K_Y 956    
                            15143 ; 2281 |//$FILENAME wow24k_Y.src
                            15144 ; 2282 |#define RSRC_WOW24K_Y 957    
                            15145 ; 2283 |//$FILENAME wow44k_Y.src
                            15146 ; 2284 |#define RSRC_WOW44K_Y 958    
                            15147 ; 2285 |//$FILENAME wow48k_Y.src
                            15148 ; 2286 |#define RSRC_WOW48K_Y 959    
                            15149 ; 2287 |
                            15150 ; 2288 |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            15151 ; 2289 |// Audible Section Navigation
                            15152 ; 2290 |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            15153 ; 2291 |//$FILENAME audible_secnav.src
                            15154 ; 2292 |#define RSRC_AUDIBLE_SECNAV_ICON 960    
                            15155 ; 2293 |
                            15156 ; 2294 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15157 ; 2295 |// PLAYLIST3 and Music Library
                            15158 ; 2296 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15159 ; 2297 |
                            15160 ; 2298 |//$FILENAME build_ml.src
                            15161 ; 2299 |#define RSRC_BUILD_ML 961    
                            15162 ; 2300 |//$FILENAME build_ml_warning.src
                            15163 ; 2301 |#define RSRC_BUILD_ML_WARNING 962    
                            15164 ; 2302 |//$FILENAME build_ml_warning2.src
                            15165 ; 2303 |#define RSRC_BUILD_ML_WARNING2 963    
                            15166 ; 2304 |//$FILENAME build_flash1.src
                            15167 ; 2305 |#define RSRC_BUILD_FLASH1 964    
                            15168 ; 2306 |//$FILENAME build_flash2.src
                            15169 ; 2307 |#define RSRC_BUILD_FLASH2 965    
                            15170 ; 2308 |//$FILENAME build_flash3.src
                            15171 ; 2309 |#define RSRC_BUILD_FLASH3 966    
                            15172 ; 2310 |//$FILENAME build_sd1.src
                            15173 ; 2311 |#define RSRC_BUILD_SD1 967    
                            15174 ; 2312 |//$FILENAME build_sd2.src
                            15175 ; 2313 |#define RSRC_BUILD_SD2 968    
                            15176 ; 2314 |//$FILENAME build_sd3.src
                            15177 ; 2315 |#define RSRC_BUILD_SD3 969    
                            15178 ; 2316 |//$FILENAME build_newmusic.src
                            15179 ; 2317 |#define RSRC_BUILD_NEWMUSIC 970    
                            15180 ; 2318 |//$FILENAME sdmd.src
                            15181 ; 2319 |#define RSRC_SDMD_MENU_CODE_BANK 971    
                            15182 ; 2320 |//$FILENAME musiclib_build_function_sec.src
                            15183 ; 2321 |#define RSRC_MUSICLIB_BUILD_FUNCTION_SEC 972    
                            15184 ; 2322 |//$FILENAME musiclib_build_function_flush.src
                            15185 ; 2323 |#define RSRC_MUSICLIB_BUILD_FUNCTION_FLUSH 973    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15186 ; 2324 |//$FILENAME MusicLibBuildModule.src
                            15187 ; 2325 |#define RSRC_MUSICLIB_BUILD_MODULE 974    
                            15188 ; 2326 |//$FILENAME MusicLibBuildGenreTable.src
                            15189 ; 2327 |#define RSRC_MUSICLIB_BUILD_GENRE_TABLE 975    
                            15190 ; 2328 |//$FILENAME MusicLibBuildFlushMem.src
                            15191 ; 2329 |#define RSRC_MUSICLIB_BUILD_FLUSH_MEM 976    
                            15192 ; 2330 |//$FILENAME MusicLibBrowseModule.src
                            15193 ; 2331 |#define RSRC_MUSICLIB_BROWSE_MODULE 977    
                            15194 ; 2332 |//$FILENAME MusicLibPlayModule.src
                            15195 ; 2333 |#define RSRC_MUSICLIB_PLAY_MODULE 978    
                            15196 ; 2334 |//$FILENAME MusicLibPlayAllNextModule.src
                            15197 ; 2335 |#define RSRC_MUSICLIB_PLAYALLNEXT_MODULE 979    
                            15198 ; 2336 |//$FILENAME MusicLibPlayAllPrevModule.src
                            15199 ; 2337 |#define RSRC_MUSICLIB_PLAYALLPREV_MODULE 980    
                            15200 ; 2338 |//$FILENAME MusicLibShuffleModule.src
                            15201 ; 2339 |#define RSRC_MUSICLIB_SHUFFLE_MODULE 981    
                            15202 ; 2340 |//$FILENAME Funclet_write_detection_access.src
                            15203 ; 2341 |#define RSRC_FUNCLET_WRITE_DETECTION_ACCESS 982    
                            15204 ; 2342 |//$FILENAME Funclet_LOCAL_GetLvlOneItem_info.src
                            15205 ; 2343 |#define RSRC_FUNCLET_LOCAL_GET_LVL_ONE_ITEM_INFO 983    
                            15206 ; 2344 |//$FILENAME Funclet_LOCAL_GetFlashAssociatedList_info.src
                            15207 ; 2345 |#define RSRC_FUNCLET_LOCAL_GET_FLASH_ASSOCIATED_LIST_INFO 984    
                            15208 ; 2346 |//$FILENAME Funclet_ML_ResumePlayState.src
                            15209 ; 2347 |#define RSRC_FUNCLET_ML_RESUMEPLAYSTATE 985    
                            15210 ; 2348 |//$FILENAME Funclet_ML_UpdateOnTheGo.src
                            15211 ; 2349 |#define RSRC_FUNCLET_ML_UPDATE_ON_THE_GO 986    
                            15212 ; 2350 |//$FILENAME Funclet_ML_ChOnTheGo.src
                            15213 ; 2351 |#define RSRC_FUNCLET_ML_CH_ON_THE_GO 987    
                            15214 ; 2352 |//$FILENAME Funclet_ML_LoadOnTheGo.src
                            15215 ; 2353 |#define RSRC_FUNCLET_ML_LOAD_ON_THE_GO 988    
                            15216 ; 2354 |//$FILENAME Funclet_Build_InitandUseCache.src
                            15217 ; 2355 |#define RSRC_FUNCLET_BUILD_INIT_AND_USE_CACHE 989    
                            15218 ; 2356 |//$FILENAME Funclet_Build_FlushAndCloseCache.src
                            15219 ; 2357 |#define RSRC_FUNCLET_BUILD_FLUSH_AND_CLOSE_CACHE 990    
                            15220 ; 2358 |//$FILENAME Funclet_ML_movePointerBackward.src
                            15221 ; 2359 |#define RSRC_FUNCLET_ML_MOVE_POINTER_BACKWARD 991    
                            15222 ; 2360 |//$FILENAME Funclet_ML_findLastItemPointer.src
                            15223 ; 2361 |#define RSRC_FUNCLET_ML_FIND_LAST_ITEM_POINTER 992    
                            15224 ; 2362 |//$FILENAME Funclet_ML_startShuffle.src
                            15225 ; 2363 |#define RSRC_FUNCLET_ML_START_SHUFFLE 993    
                            15226 ; 2364 |//$FILENAME Funclet_ML_GetFlashDirAssocListId.src
                            15227 ; 2365 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ID 994    
                            15228 ; 2366 |//$FILENAME Funclet_ML_GetFlashDirAssocListRootId.src
                            15229 ; 2367 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ROOT_ID 995    
                            15230 ; 2368 |//$FILENAME Funclet_ML_GetFlashDirAssocListSize.src
                            15231 ; 2369 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_SIZE 996    
                            15232 ; 2370 |//$FILENAME Funclet_ML_GetIdByStateAndPosition.src
                            15233 ; 2371 |#define RSRC_FUNCLET_ML_GET_ID_BY_STATE_AND_POSITION 997    
                            15234 ; 2372 |//$FILENAME Funclet_ML_StartPlayDirSongInit.src
                            15235 ; 2373 |#define RSRC_FUNCLET_ML_START_PLAY_DIR_SONG_INIT 998    
                            15236 ; 2374 |//$FILENAME Funclet_ML_ShuffleNextDirSong.src
                            15237 ; 2375 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_DIR_SONG 999    
                            15238 ; 2376 |//$FILENAME Funclet_ML_BrowseMenu.src
                            15239 ; 2377 |#define RSRC_FUNCLET_ML_BROWSE_MENU 1000    
                            15240 ; 2378 |//$FILENAME Funclet_ML_StartPlayAllSong.src
                            15241 ; 2379 |#define RSRC_FUNCLET_ML_START_PLAY_ALL_SONG 1001    
                            15242 ; 2380 |//$FILENAME Funclet_ML_PlayAllNextSong.src
                            15243 ; 2381 |#define RSRC_FUNCLET_ML_PLAY_ALL_NEXT_SONG 1002    
                            15244 ; 2382 |//$FILENAME Funclet_ML_PlayAllPreviousSong.src
                            15245 ; 2383 |#define RSRC_FUNCLET_ML_PLAY_ALL_PREVIOUS_SONG 1003    
                            15246 ; 2384 |//$FILENAME Funclet_ML_PlayPreviousDirSong.src
                            15247 ; 2385 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_DIR_SONG 1004    
                            15248 ; 2386 |//$FILENAME Funclet_ML_ShuffleNextSong.src
                            15249 ; 2387 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_SONG 1005    
                            15250 ; 2388 |//$FILENAME Funclet_ML_PlayNextSong.src
                            15251 ; 2389 |#define RSRC_FUNCLET_ML_PLAY_NEXT_SONG 1006    
                            15252 ; 2390 |//$FILENAME Funclet_ML_PlayPreviousSong.src
                            15253 ; 2391 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_SONG 1007    
                            15254 ; 2392 |//$FILENAME Funclet_BuildVoiceFilePath.src
                            15255 ; 2393 |#define RSRC_FUNCLET_BUILDVOICEFILEPATH 1008    
                            15256 ; 2394 |//$FILENAME Funclet_BuildFMFilePath.src
                            15257 ; 2395 |#define RSRC_FUNCLET_BUILDFMFILEPATH 1009    
                            15258 ; 2396 |//$FILENAME Funclet_BuildLINEINFilePath.src
                            15259 ; 2397 |#define RSRC_FUNCLET_BUILDLINEINFILEPATH 1010    
                            15260 ; 2398 |//$FILENAME Funclet_GetVoiceFastKey.src
                            15261 ; 2399 |#define RSRC_FUNCLET_GETVOICEFASTKEY 1011    
                            15262 ; 2400 |//$FILENAME MusicLibVoiceApp.src
                            15263 ; 2401 |#define RSRC_MUSICLIB_VOICE_APP 1012    
                            15264 ; 2402 |//$FILENAME MusicLibVoiceModule.src
                            15265 ; 2403 |#define RSRC_MUSICLIB_VOICE_MODULE 1013    
                            15266 ; 2404 |//$FILENAME MusicLibVoicePlayModule.src
                            15267 ; 2405 |#define RSRC_MUSICLIB_VOICEPLAY_MODULE 1014    
                            15268 ; 2406 |//$FILENAME MusicLibMergeFunction.src
                            15269 ; 2407 |#define RSRC_MUSICLIB_MERGE_FUNCTION 1015    
                            15270 ; 2408 |//$FILENAME MusicLibMergeModule.src
                            15271 ; 2409 |#define RSRC_MUSICLIB_MERGE_MODULE 1016    
                            15272 ; 2410 |//$FILENAME MusicLibBrowseApp.src
                            15273 ; 2411 |#define RSRC_MUSICLIB_BROWSE_APP 1017    
                            15274 ; 2412 |//$FILENAME playmusicmenu.src
                            15275 ; 2413 |#define RSRC_PLAYMUSIC_MENU_CODE_BANK 1018    
                            15276 ; 2414 |//$FILENAME browsemenu.src
                            15277 ; 2415 |#define RSRC_BROWSE_MENU_CODE_BANK 1019    
                            15278 ; 2416 |//$FILENAME browsemenu_extra.src
                            15279 ; 2417 |#define RSRC_BROWSE_MENU_EXTRA_CODE_BANK 1020    
                            15280 ; 2418 |//$FILENAME string_play_all.src
                            15281 ; 2419 |#define RSRC_STRING_PLAY_ALL 1021    
                            15282 ; 2420 |//$FILENAME string_play.src
                            15283 ; 2421 |#define RSRC_STRING_PLAY 1022    
                            15284 ; 2422 |//$FILENAME string_unknown_year.src
                            15285 ; 2423 |#define RSRC_STRING_UNKNOWN_YEAR 1023    
                            15286 ; 2424 |//$FILENAME string_year_width.src
                            15287 ; 2425 |#define RSRC_STRING_YEAR_WIDTH 1024    
                            15288 ; 2426 |//$FILENAME string_artist.src
                            15289 ; 2427 |#define RSRC_STRING_ARTIST 1025    
                            15290 ; 2428 |//$FILENAME string_songs.src
                            15291 ; 2429 |#define RSRC_STRING_SONGS 1026    
                            15292 ; 2430 |//$FILENAME string_on_the_fly.src
                            15293 ; 2431 |#define RSRC_STRING_ON_THE_FLY 1027    
                            15294 ; 2432 |//$FILENAME string_new_music.src
                            15295 ; 2433 |#define RSRC_STRING_NEW_MUSIC_MENU 1028    
                            15296 ; 2434 |//$FILENAME string_genre.src
                            15297 ; 2435 |#define RSRC_STRING_GENRE 1029    
                            15298 ; 2436 |//$FILENAME string_year.src
                            15299 ; 2437 |#define RSRC_STRING_YEAR 1030    
                            15300 ; 2438 |//$FILENAME string_playlist.src
                            15301 ; 2439 |#define RSRC_STRING_PLAYLIST 1031    
                            15302 ; 2440 |//$FILENAME string_fm_rec.src
                            15303 ; 2441 |#define RSRC_STRING_FM_REC 1032    
                            15304 ; 2442 |//$FILENAME string_linein_rec.src
                            15305 ; 2443 |#define RSRC_STRING_LINEIN_REC 1033    
                            15306 ; 2444 |//$FILENAME string_play_music.src
                            15307 ; 2445 |#define RSRC_STRING_PLAY_MUSIC 1034    
                            15308 ; 2446 |//$FILENAME highlight_back.src
                            15309 ; 2447 |#define RSRC_HIGHLIGHT_BACK 1035    
                            15310 ; 2448 |//$FILENAME newmusicmenu.src
                            15311 ; 2449 |#define RSRC_NEW_MUSIC_MENU_CODE_BANK 1036    
                            15312 ; 2450 |//$FILENAME string_1_day.src
                            15313 ; 2451 |#define RSRC_STRING_1_DAY 1037    
                            15314 ; 2452 |//$FILENAME string_1_week.src
                            15315 ; 2453 |#define RSRC_STRING_1_WEEK 1038    
                            15316 ; 2454 |//$FILENAME string_1_month.src
                            15317 ; 2455 |#define RSRC_STRING_1_MONTH 1039    
                            15318 ; 2456 |//$FILENAME on_the_fly_full.src
                            15319 ; 2457 |#define RSRC_LIST_FULL_MESSAGE 1040    
                            15320 ; 2458 |//$FILENAME on_the_fly_free1.src
                            15321 ; 2459 |#define RSRC_LIST_FREE_MESSAGE 1041    
                            15322 ; 2460 |//$FILENAME on_the_fly_free2.src
                            15323 ; 2461 |#define RSRC_LIST_FREE_MESSAGE2 1042    
                            15324 ; 2462 |//$FILENAME on_the_fly_delete1.src
                            15325 ; 2463 |#define RSRC_LIST_DELETE_MESSAGE 1043    
                            15326 ; 2464 |//$FILENAME on_the_fly_delete2.src
                            15327 ; 2465 |#define RSRC_LIST_DELETE_MESSAGE2 1044    
                            15328 ; 2466 |//$FILENAME empty_favourite.src
                            15329 ; 2467 |#define RSRC_EMPTY_FAVOURITE 1045    
                            15330 ; 2468 |//$FILENAME sd_remove.src
                            15331 ; 2469 |#define RSRC_SD_REMOVE 1046    
                            15332 ; 2470 |//$FILENAME sd_insert.src
                            15333 ; 2471 |#define RSRC_SD_INSERT 1047    
                            15334 ; 2472 |//$FILENAME check_disk_1.src
                            15335 ; 2473 |#define RSRC_CHECK_DISK_1 1048    
                            15336 ; 2474 |//$FILENAME check_disk_2.src
                            15337 ; 2475 |#define RSRC_CHECK_DISK_2 1049    
                            15338 ; 2476 |//$FILENAME check_disk_3.src
                            15339 ; 2477 |#define RSRC_CHECK_DISK_3 1050    
                            15340 ; 2478 |//$FILENAME flash_error.src
                            15341 ; 2479 |#define RSRC_FLASH_ERROR 1051    
                            15342 ; 2480 |
                            15343 ; 2481 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15344 ; 2482 |// STFM1000 Tuner funclet
                            15345 ; 2483 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15346 ; 2484 |//$FILENAME Funclet_TunerDriverInit.src
                            15347 ; 2485 |#define RSRC_FUNCLET_TUNER_DRIVER_INIT 1052    
                            15348 ; 2486 |//$FILENAME Funclet_TunerDriverIncUp.src
                            15349 ; 2487 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_UP 1053    
                            15350 ; 2488 |//$FILENAME Funclet_TunerDriverIncDown.src
                            15351 ; 2489 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN 1054    
                            15352 ; 2490 |//$FILENAME Funclet_TunerDriverStandyby.src
                            15353 ; 2491 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY 1055    
                            15354 ; 2492 |//$FILENAME Funclet_TunerDriverReplacePreset.src
                            15355 ; 2493 |#define RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET 1056    
                            15356 ; 2494 |//$FILENAME Funclet_TunerDriverErasePreset.src
                            15357 ; 2495 |#define RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET 1057    
                            15358 ; 2496 |//$FILENAME Funclet_TunerDriverTuneToPreset.src
                            15359 ; 2497 |#define RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET 1058    
                            15360 ; 2498 |//$FILENAME Funclet_TunerDriverSearchDown.src
                            15361 ; 2499 |#define RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN 1059    
                            15362 ; 2500 |//$FILENAME Funclet_TunerSTFM1000SafePowerDown.src
                            15363 ; 2501 |#define RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN 1060    
                            15364 ; 2502 |//$FILENAME Funclet_TunerSTFM1000OptimizeChannel.src
                            15365 ; 2503 |#define RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL 1061    
                            15366 ; 2504 |//$FILENAME decstfmmod.src
                            15367 ; 2505 |#define RSRC_DEC_STFM_MOD_CODE 1062    
                            15368 ; 2506 |//$FILENAME dec_stfmp.src
                            15369 ; 2507 |#define RSRC_DEC_STFMP_CODE 1063    
                            15370 ; 2508 |//$FILENAME dec_stfmx.src
                            15371 ; 2509 |#define RSRC_DEC_STFMX_CODE 1064    
                            15372 ; 2510 |//$FILENAME dec_stfmy.src
                            15373 ; 2511 |#define RSRC_DEC_STFMY_CODE 1065    
                            15374 ; 2512 |//$FILENAME Funclet_TunerSTFM1000I2CInit.src
                            15375 ; 2513 |#define RSRC_FUNCLET_STFM1000_I2C_INIT 1066    
                            15376 ; 2514 |//$FILENAME Funclet_TunerDriverScanStations.src
                            15377 ; 2515 |#define RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION 1067    
                            15378 ; 2516 |//$FILENAME Funclet_TunerDriverSetMonoStereoMode.src
                            15379 ; 2517 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE 1068    
                            15380 ; 2518 |//$FILENAME Funclet_STFM1000TestPresence.src
                            15381 ; 2519 |#define RSRC_FUNCLET_STFM1000_TEST_PRESENCE 1069    
                            15382 ; 2520 |//$FILENAME Funclet_I2CWriteTunerRegister.src
                            15383 ; 2521 |#define RSRC_FUNCLET_I2C_WRITE_TUNER_REGISTER 1070    
                            15384 ; 2522 |//$FILENAME Funclet_I2CReset.src
                            15385 ; 2523 |#define RSRC_FUNCLET_I2C_RESET 1071    
                            15386 ; 2524 |//$FILENAME fmtunersecondrsrc.src
                            15387 ; 2525 |#define RSRC_FM_TUNER_SECOND_RSRC 1072    
                            15388 ; 2526 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp1.src
                            15389 ; 2527 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP1 1073    
                            15390 ; 2528 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp2.src
                            15391 ; 2529 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP2 1074    
                            15392 ; 2530 |//$FILENAME Funclet_TunerSTFM1000FindRssiThreshold.src
                            15393 ; 2531 |#define RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD 1075    
                            15394 ; 2532 |//$FILENAME Funclet_TunerSTFM1000DataPathOff.src
                            15395 ; 2533 |#define RSRC_FUNCLET_STFM1000_DATA_PATH_OFF 1076    
                            15396 ; 2534 |//$FILENAME Funclet_TunerSTFM1000ContinueSearching.src
                            15397 ; 2535 |#define RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING 1077    
                            15398 ; 2536 |//RSRC_FUNCLET_STFM1000_SET_LNA_BIAS    equ      975    ;$FILENAME Funclet_STFM1000SetLnaBias.src
                            15399 ; 2537 |//RSRC_FUNCLET_STFM1000_LOOK_FOR_PILOT    equ      976    ;$FILENAME Funclet_STFM1000LookForPilot.src
                            15400 ; 2538 |//$FILENAME Funclet_STFM1000TunerSearchEnded.src
                            15401 ; 2539 |#define RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED 1078    
                            15402 ; 2540 |// for RestoreDriveFromBackup
                            15403 ; 2541 |//$FILENAME restoresysdrive.src
                            15404 ; 2542 |#define RSRC_RESTORESYSDRIVE_P_CODE 1079    
                            15405 ; 2543 |
                            15406 ; 2544 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15407 ; 2545 |// Playlist5 sources
                            15408 ; 2546 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15409 ; 2547 |//$FILENAME playlist5_browsemenu.src
                            15410 ; 2548 |#define RSRC_PL5BROWSE_MENU_CODEBANK 1080    
                            15411 ; 2549 |//$FILENAME playlist5_browsemenu_extra.src
                            15412 ; 2550 |#define RSRC_PL5_BROWSEMENU_EXTRA 1081    
                            15413 ; 2551 |//$FILENAME playlist5_browse_submenu.src
                            15414 ; 2552 |#define RSRC_PL5BROWSE_SUBMENU_CODEBANK 1082    
                            15415 ; 2553 |//$FILENAME playlist5_playback_module.src
                            15416 ; 2554 |#define RSRC_PLAYLIST5_PLAYBACK_MODULE 1083    
                            15417 ; 2555 |//$FILENAME playlist5_browse_module.src
                            15418 ; 2556 |#define RSRC_PLAYLIST5_BROWSE_MODULE 1084    
                            15419 ; 2557 |
                            15420 ; 2558 |//$FILENAME Funclet_Get_LRCDirName_PL5.src
                            15421 ; 2559 |#define RSRC_FUNCLET_GET_LRC_DIR_NAME_PL5 1085    
                            15422 ; 2560 |//$FILENAME Funclet_PL5_PL_QueuePushBack.src   
                            15423 ; 2561 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHBACK 1086    
                            15424 ; 2562 |//$FILENAME Funclet_PL5_PL_QueuePushFront.src 
                            15425 ; 2563 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHFRONT 1087    
                            15426 ; 2564 |
                            15427 ; 2565 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15428 ; 2566 |// DanhNguyen added bitmaps
                            15429 ; 2567 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15430 ; 2568 |//$FILENAME icon_folder.src
                            15431 ; 2569 |#define RSRC_ICON_FOLDER 1088    
                            15432 ; 2570 |//$FILENAME icon_song.src
                            15433 ; 2571 |#define RSRC_ICON_SONG 1089    
                            15434 ; 2572 |
                            15435 ; 2573 |//$FILENAME menu_music.src
                            15436 ; 2574 |#define RSRC_MENU_MUSIC 1090    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15437 ; 2575 |//$FILENAME vie_menu_music.src
                            15438 ; 2576 |#define RSRC_VIE_MENU_MUSIC 1091    
                            15439 ; 2577 |
                            15440 ; 2578 |//$FILENAME menu_voice.src
                            15441 ; 2579 |#define RSRC_MENU_VOICE 1092    
                            15442 ; 2580 |//$FILENAME vie_menu_voice.src
                            15443 ; 2581 |#define RSRC_VIE_MENU_VOICE 1093    
                            15444 ; 2582 |
                            15445 ; 2583 |//$FILENAME menu_fmtuner.src
                            15446 ; 2584 |#define RSRC_MENU_FMTUNER 1094    
                            15447 ; 2585 |//$FILENAME vie_menu_fmtuner.src
                            15448 ; 2586 |#define RSRC_VIE_MENU_FMTUNER 1095    
                            15449 ; 2587 |
                            15450 ; 2588 |//$FILENAME menu_record.src
                            15451 ; 2589 |#define RSRC_MENU_RECORD 1096    
                            15452 ; 2590 |//$FILENAME vie_menu_record.src
                            15453 ; 2591 |#define RSRC_VIE_MENU_RECORD 1097    
                            15454 ; 2592 |
                            15455 ; 2593 |//$FILENAME menu_settings.src
                            15456 ; 2594 |#define RSRC_MENU_SETTINGS 1098    
                            15457 ; 2595 |//$FILENAME vie_menu_settings.src
                            15458 ; 2596 |#define RSRC_VIE_MENU_SETTINGS 1099    
                            15459 ; 2597 |
                            15460 ; 2598 |//$FILENAME menu_shutdown.src
                            15461 ; 2599 |#define RSRC_MENU_SHUTDOWN 1100    
                            15462 ; 2600 |//$FILENAME vie_menu_shutdown.src
                            15463 ; 2601 |#define RSRC_VIE_MENU_SHUTDOWN 1101    
                            15464 ; 2602 |
                            15465 ; 2603 |//$FILENAME menu_clock.src
                            15466 ; 2604 |#define RSRC_MENU_CLOCK 1102    
                            15467 ; 2605 |//$FILENAME vie_menu_clock.src
                            15468 ; 2606 |#define RSRC_VIE_MENU_CLOCK 1103    
                            15469 ; 2607 |
                            15470 ; 2608 |//$FILENAME menu_ab.src
                            15471 ; 2609 |#define RSRC_MENU_AB 1104    
                            15472 ; 2610 |//$FILENAME vie_menu_ab.src
                            15473 ; 2611 |#define RSRC_VIE_MENU_AB 1105    
                            15474 ; 2612 |
                            15475 ; 2613 |//$FILENAME menu_delete.src
                            15476 ; 2614 |#define RSRC_MENU_DELETE 1106    
                            15477 ; 2615 |//$FILENAME vie_menu_delete.src
                            15478 ; 2616 |#define RSRC_VIE_MENU_DELETE 1107    
                            15479 ; 2617 |
                            15480 ; 2618 |//$FILENAME menu_about.src
                            15481 ; 2619 |#define RSRC_MENU_ABOUT 1108    
                            15482 ; 2620 |//$FILENAME vie_menu_about.src
                            15483 ; 2621 |#define RSRC_VIE_MENU_ABOUT 1109    
                            15484 ; 2622 |
                            15485 ; 2623 |//$FILENAME menu_exit.src
                            15486 ; 2624 |#define RSRC_MENU_EXIT 1110    
                            15487 ; 2625 |//$FILENAME vie_menu_exit.src
                            15488 ; 2626 |#define RSRC_VIE_MENU_EXIT 1111    
                            15489 ; 2627 |
                            15490 ; 2628 |//$FILENAME music_play_all.src
                            15491 ; 2629 |#define RSRC_MUSIC_PLAY_ALL 1112    
                            15492 ; 2630 |//$FILENAME vie_music_play_all.src
                            15493 ; 2631 |#define RSRC_VIE_MUSIC_PLAY_ALL 1113    
                            15494 ; 2632 |
                            15495 ; 2633 |//$FILENAME music_folder_internal.src
                            15496 ; 2634 |#define RSRC_MUSIC_FOLDER_INTERNAL 1114    
                            15497 ; 2635 |//$FILENAME vie_music_folder_internal.src
                            15498 ; 2636 |#define RSRC_VIE_MUSIC_FOLDER_INTERNAL 1115    
                            15499 ; 2637 |
                            15500 ; 2638 |//$FILENAME music_folder_external.src
                            15501 ; 2639 |#define RSRC_MUSIC_FOLDER_EXTERNAL 1116    
                            15502 ; 2640 |//$FILENAME vie_music_folder_external.src
                            15503 ; 2641 |#define RSRC_VIE_MUSIC_FOLDER_EXTERNAL 1117    
                            15504 ; 2642 |
                            15505 ; 2643 |//$FILENAME music_songs.src
                            15506 ; 2644 |#define RSRC_MUSIC_SONGS 1118    
                            15507 ; 2645 |//$FILENAME vie_music_songs.src
                            15508 ; 2646 |#define RSRC_VIE_MUSIC_SONGS 1119    
                            15509 ; 2647 |
                            15510 ; 2648 |//$FILENAME music_favorites.src
                            15511 ; 2649 |#define RSRC_MUSIC_FAVORITES 1120    
                            15512 ; 2650 |//$FILENAME vie_music_favorites.src
                            15513 ; 2651 |#define RSRC_VIE_MUSIC_FAVORITES 1121    
                            15514 ; 2652 |
                            15515 ; 2653 |//$FILENAME music_fm_record.src
                            15516 ; 2654 |#define RSRC_MUSIC_FM_RECORD 1122    
                            15517 ; 2655 |//$FILENAME vie_music_fm_record.src
                            15518 ; 2656 |#define RSRC_VIE_MUSIC_FM_RECORD 1123    
                            15519 ; 2657 |
                            15520 ; 2658 |//$FILENAME music_exit.src
                            15521 ; 2659 |#define RSRC_MUSIC_EXIT 1124    
                            15522 ; 2660 |//$FILENAME vie_music_exit.src
                            15523 ; 2661 |#define RSRC_VIE_MUSIC_EXIT 1125    
                            15524 ; 2662 |
                            15525 ; 2663 |//$FILENAME browse_music_folder_internal.src
                            15526 ; 2664 |#define RSRC_BROWSE_MUSIC_FOLDER_INTERNAL 1126    
                            15527 ; 2665 |//$FILENAME vie_browse_music_folder_internal.src
                            15528 ; 2666 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_INTERNAL 1127    
                            15529 ; 2667 |
                            15530 ; 2668 |//$FILENAME browse_music_folder_external.src
                            15531 ; 2669 |#define RSRC_BROWSE_MUSIC_FOLDER_EXTERNAL 1128    
                            15532 ; 2670 |//$FILENAME vie_browse_music_folder_external.src
                            15533 ; 2671 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_EXTERNAL 1129    
                            15534 ; 2672 |
                            15535 ; 2673 |//$FILENAME browse_music_list_songs.src
                            15536 ; 2674 |#define RSRC_BROWSE_MUSIC_LIST_SONGS 1130    
                            15537 ; 2675 |//$FILENAME vie_browse_music_list_songs.src
                            15538 ; 2676 |#define RSRC_VIE_BROWSE_MUSIC_LIST_SONGS 1131    
                            15539 ; 2677 |
                            15540 ; 2678 |//$FILENAME browse_music_favourites.src
                            15541 ; 2679 |#define RSRC_BROWSE_MUSIC_FAVOURITES 1132    
                            15542 ; 2680 |//$FILENAME vie_browse_music_favourites.src
                            15543 ; 2681 |#define RSRC_VIE_BROWSE_MUSIC_FAVOURITES 1133    
                            15544 ; 2682 |
                            15545 ; 2683 |//$FILENAME browse_music_fm_files.src
                            15546 ; 2684 |#define RSRC_BROWSE_MUSIC_FM_FILES 1134    
                            15547 ; 2685 |//$FILENAME vie_browse_music_fm_files.src
                            15548 ; 2686 |#define RSRC_VIE_BROWSE_MUSIC_FM_FILES 1135    
                            15549 ; 2687 |
                            15550 ; 2688 |//$FILENAME browse_voice.src
                            15551 ; 2689 |#define RSRC_BROWSE_VOICE 1136    
                            15552 ; 2690 |//$FILENAME vie_browse_voice.src
                            15553 ; 2691 |#define RSRC_VIE_BROWSE_VOICE 1137    
                            15554 ; 2692 |
                            15555 ; 2693 |//$FILENAME favourites_list_add.src
                            15556 ; 2694 |#define RSRC_FAVOURITES_LIST_ADD 1138    
                            15557 ; 2695 |//$FILENAME vie_favourites_list_add.src
                            15558 ; 2696 |#define RSRC_VIE_FAVOURITES_LIST_ADD 1139    
                            15559 ; 2697 |
                            15560 ; 2698 |//$FILENAME favourites_list_remove.src
                            15561 ; 2699 |#define RSRC_FAVOURITES_LIST_REMOVE 1140    
                            15562 ; 2700 |//$FILENAME vie_favourites_list_remove.src
                            15563 ; 2701 |#define RSRC_VIE_FAVOURITES_LIST_REMOVE 1141    
                            15564 ; 2702 |
                            15565 ; 2703 |//$FILENAME favourites_list_is_full.src
                            15566 ; 2704 |#define RSRC_FAVOURITES_LIST_IS_FULL 1142    
                            15567 ; 2705 |//$FILENAME vie_favourites_list_is_full.src
                            15568 ; 2706 |#define RSRC_VIE_FAVOURITES_LIST_IS_FULL 1143    
                            15569 ; 2707 |
                            15570 ; 2708 |//$FILENAME about_screen_1.src
                            15571 ; 2709 |#define RSRC_ABOUT_SCREEN_1 1144    
                            15572 ; 2710 |//$FILENAME vie_about_screen_1.src
                            15573 ; 2711 |#define RSRC_VIE_ABOUT_SCREEN_1 1145    
                            15574 ; 2712 |
                            15575 ; 2713 |//$FILENAME about_screen_2.src
                            15576 ; 2714 |#define RSRC_ABOUT_SCREEN_2 1146    
                            15577 ; 2715 |//$FILENAME vie_about_screen_2.src
                            15578 ; 2716 |#define RSRC_VIE_ABOUT_SCREEN_2 1147    
                            15579 ; 2717 |
                            15580 ; 2718 |//$FILENAME about_screen_3.src
                            15581 ; 2719 |#define RSRC_ABOUT_SCREEN_3 1148    
                            15582 ; 2720 |//$FILENAME vie_about_screen_3.src
                            15583 ; 2721 |#define RSRC_VIE_ABOUT_SCREEN_3 1149    
                            15584 ; 2722 |
                            15585 ; 2723 |//$FILENAME about_screen_4.src
                            15586 ; 2724 |#define RSRC_ABOUT_SCREEN_4 1150    
                            15587 ; 2725 |//$FILENAME vie_about_screen_4.src
                            15588 ; 2726 |#define RSRC_VIE_ABOUT_SCREEN_4 1151    
                            15589 ; 2727 |
                            15590 ; 2728 |//$FILENAME time_date_exit_title.src
                            15591 ; 2729 |#define RSRC_TIME_DATE_EXIT_TITLE 1152    
                            15592 ; 2730 |//$FILENAME vie_time_date_exit_title.src
                            15593 ; 2731 |#define RSRC_VIE_TIME_DATE_EXIT_TITLE 1153    
                            15594 ; 2732 |
                            15595 ; 2733 |//$FILENAME time_clean_desktop.src
                            15596 ; 2734 |#define RSRC_TIME_CLEAN_DESKTOP 1154    
                            15597 ; 2735 |//$FILENAME time_dash.src
                            15598 ; 2736 |#define RSRC_TIME_DASH 1155    
                            15599 ; 2737 |
                            15600 ; 2738 |//$FILENAME time_day_7.src
                            15601 ; 2739 |#define RSRC_TIME_DAY_SAT 1156    
                            15602 ; 2740 |//$FILENAME vie_time_day_7.src
                            15603 ; 2741 |#define RSRC_VIE_TIME_DAY_SAT 1157    
                            15604 ; 2742 |//$FILENAME time_day_cn.src
                            15605 ; 2743 |#define RSRC_TIME_DAY_SUN 1158    
                            15606 ; 2744 |//$FILENAME vie_time_day_cn.src
                            15607 ; 2745 |#define RSRC_VIE_TIME_DAY_SUN 1159    
                            15608 ; 2746 |//$FILENAME time_day_2.src
                            15609 ; 2747 |#define RSRC_TIME_DAY_MON 1160    
                            15610 ; 2748 |//$FILENAME vie_time_day_2.src
                            15611 ; 2749 |#define RSRC_VIE_TIME_DAY_MON 1161    
                            15612 ; 2750 |//$FILENAME time_day_3.src
                            15613 ; 2751 |#define RSRC_TIME_DAY_TUE 1162    
                            15614 ; 2752 |//$FILENAME vie_time_day_3.src
                            15615 ; 2753 |#define RSRC_VIE_TIME_DAY_TUE 1163    
                            15616 ; 2754 |//$FILENAME time_day_4.src
                            15617 ; 2755 |#define RSRC_TIME_DAY_WED 1164    
                            15618 ; 2756 |//$FILENAME vie_time_day_4.src
                            15619 ; 2757 |#define RSRC_VIE_TIME_DAY_WED 1165    
                            15620 ; 2758 |//$FILENAME time_day_5.src
                            15621 ; 2759 |#define RSRC_TIME_DAY_THU 1166    
                            15622 ; 2760 |//$FILENAME vie_time_day_5.src
                            15623 ; 2761 |#define RSRC_VIE_TIME_DAY_THU 1167    
                            15624 ; 2762 |//$FILENAME time_day_6.src
                            15625 ; 2763 |#define RSRC_TIME_DAY_FRI 1168    
                            15626 ; 2764 |//$FILENAME vie_time_day_6.src
                            15627 ; 2765 |#define RSRC_VIE_TIME_DAY_FRI 1169    
                            15628 ; 2766 |
                            15629 ; 2767 |//$FILENAME time_month_1.src
                            15630 ; 2768 |#define RSRC_TIME_MONTH_1 1170    
                            15631 ; 2769 |//$FILENAME vie_time_month_1.src
                            15632 ; 2770 |#define RSRC_VIE_TIME_MONTH_1 1171    
                            15633 ; 2771 |//$FILENAME time_month_2.src
                            15634 ; 2772 |#define RSRC_TIME_MONTH_2 1172    
                            15635 ; 2773 |//$FILENAME vie_time_month_2.src
                            15636 ; 2774 |#define RSRC_VIE_TIME_MONTH_2 1173    
                            15637 ; 2775 |//$FILENAME time_month_3.src
                            15638 ; 2776 |#define RSRC_TIME_MONTH_3 1174    
                            15639 ; 2777 |//$FILENAME vie_time_month_3.src
                            15640 ; 2778 |#define RSRC_VIE_TIME_MONTH_3 1175    
                            15641 ; 2779 |//$FILENAME time_month_4.src
                            15642 ; 2780 |#define RSRC_TIME_MONTH_4 1176    
                            15643 ; 2781 |//$FILENAME vie_time_month_4.src
                            15644 ; 2782 |#define RSRC_VIE_TIME_MONTH_4 1177    
                            15645 ; 2783 |//$FILENAME time_month_5.src
                            15646 ; 2784 |#define RSRC_TIME_MONTH_5 1178    
                            15647 ; 2785 |//$FILENAME vie_time_month_5.src
                            15648 ; 2786 |#define RSRC_VIE_TIME_MONTH_5 1179    
                            15649 ; 2787 |//$FILENAME time_month_6.src
                            15650 ; 2788 |#define RSRC_TIME_MONTH_6 1180    
                            15651 ; 2789 |//$FILENAME vie_time_month_6.src
                            15652 ; 2790 |#define RSRC_VIE_TIME_MONTH_6 1181    
                            15653 ; 2791 |//$FILENAME time_month_7.src
                            15654 ; 2792 |#define RSRC_TIME_MONTH_7 1182    
                            15655 ; 2793 |//$FILENAME vie_time_month_7.src
                            15656 ; 2794 |#define RSRC_VIE_TIME_MONTH_7 1183    
                            15657 ; 2795 |//$FILENAME time_month_8.src
                            15658 ; 2796 |#define RSRC_TIME_MONTH_8 1184    
                            15659 ; 2797 |//$FILENAME vie_time_month_8.src
                            15660 ; 2798 |#define RSRC_VIE_TIME_MONTH_8 1185    
                            15661 ; 2799 |//$FILENAME time_month_9.src
                            15662 ; 2800 |#define RSRC_TIME_MONTH_9 1186    
                            15663 ; 2801 |//$FILENAME vie_time_month_9.src
                            15664 ; 2802 |#define RSRC_VIE_TIME_MONTH_9 1187    
                            15665 ; 2803 |//$FILENAME time_month_10.src
                            15666 ; 2804 |#define RSRC_TIME_MONTH_10 1188    
                            15667 ; 2805 |//$FILENAME vie_time_month_10.src
                            15668 ; 2806 |#define RSRC_VIE_TIME_MONTH_10 1189    
                            15669 ; 2807 |//$FILENAME time_month_11.src
                            15670 ; 2808 |#define RSRC_TIME_MONTH_11 1190    
                            15671 ; 2809 |//$FILENAME vie_time_month_11.src
                            15672 ; 2810 |#define RSRC_VIE_TIME_MONTH_11 1191    
                            15673 ; 2811 |//$FILENAME time_month_12.src
                            15674 ; 2812 |#define RSRC_TIME_MONTH_12 1192    
                            15675 ; 2813 |//$FILENAME vie_time_month_12.src
                            15676 ; 2814 |#define RSRC_VIE_TIME_MONTH_12 1193    
                            15677 ; 2815 |
                            15678 ; 2816 |//$FILENAME time_num_am.src
                            15679 ; 2817 |#define RSRC_TIME_NUM_AM 1194    
                            15680 ; 2818 |//$FILENAME time_num_am.src
                            15681 ; 2819 |#define RSRC_TIME_NUM_PM 1195    
                            15682 ; 2820 |//$FILENAME settime_format_12h.src
                            15683 ; 2821 |#define RSRC_SETTIME_FORMAT_12H 1196    
                            15684 ; 2822 |//$FILENAME settime_format_24h.src
                            15685 ; 2823 |#define RSRC_SETTIME_FORMAT_24H 1197    
                            15686 ; 2824 |//$FILENAME setdate_format_dmy.src
                            15687 ; 2825 |#define RSRC_SETDATE_FORMAT_DMY 1198    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15688 ; 2826 |//$FILENAME setdate_format_mdy.src
                            15689 ; 2827 |#define RSRC_SETDATE_FORMAT_MDY 1199    
                            15690 ; 2828 |//$FILENAME setdate_format_ymd.src
                            15691 ; 2829 |#define RSRC_SETDATE_FORMAT_YMD 1200    
                            15692 ; 2830 |
                            15693 ; 2831 |//$FILENAME time_num_large_0.src
                            15694 ; 2832 |#define RSRC_TIME_NUM_LARGE_0 1201    
                            15695 ; 2833 |//$FILENAME time_num_large_1.src
                            15696 ; 2834 |#define RSRC_TIME_NUM_LARGE_1 1202    
                            15697 ; 2835 |//$FILENAME time_num_large_2.src
                            15698 ; 2836 |#define RSRC_TIME_NUM_LARGE_2 1203    
                            15699 ; 2837 |//$FILENAME time_num_large_3.src
                            15700 ; 2838 |#define RSRC_TIME_NUM_LARGE_3 1204    
                            15701 ; 2839 |//$FILENAME time_num_large_4.src
                            15702 ; 2840 |#define RSRC_TIME_NUM_LARGE_4 1205    
                            15703 ; 2841 |//$FILENAME time_num_large_5.src
                            15704 ; 2842 |#define RSRC_TIME_NUM_LARGE_5 1206    
                            15705 ; 2843 |//$FILENAME time_num_large_6.src
                            15706 ; 2844 |#define RSRC_TIME_NUM_LARGE_6 1207    
                            15707 ; 2845 |//$FILENAME time_num_large_7.src
                            15708 ; 2846 |#define RSRC_TIME_NUM_LARGE_7 1208    
                            15709 ; 2847 |//$FILENAME time_num_large_8.src
                            15710 ; 2848 |#define RSRC_TIME_NUM_LARGE_8 1209    
                            15711 ; 2849 |//$FILENAME time_num_large_9.src
                            15712 ; 2850 |#define RSRC_TIME_NUM_LARGE_9 1210    
                            15713 ; 2851 |
                            15714 ; 2852 |//$FILENAME time_num_medium_0.src
                            15715 ; 2853 |#define RSRC_TIME_NUM_MEDIUM_0 1211    
                            15716 ; 2854 |//$FILENAME time_num_medium_1.src
                            15717 ; 2855 |#define RSRC_TIME_NUM_MEDIUM_1 1212    
                            15718 ; 2856 |//$FILENAME time_num_medium_2.src
                            15719 ; 2857 |#define RSRC_TIME_NUM_MEDIUM_2 1213    
                            15720 ; 2858 |//$FILENAME time_num_medium_3.src
                            15721 ; 2859 |#define RSRC_TIME_NUM_MEDIUM_3 1214    
                            15722 ; 2860 |//$FILENAME time_num_medium_4.src
                            15723 ; 2861 |#define RSRC_TIME_NUM_MEDIUM_4 1215    
                            15724 ; 2862 |//$FILENAME time_num_medium_5.src
                            15725 ; 2863 |#define RSRC_TIME_NUM_MEDIUM_5 1216    
                            15726 ; 2864 |//$FILENAME time_num_medium_6.src
                            15727 ; 2865 |#define RSRC_TIME_NUM_MEDIUM_6 1217    
                            15728 ; 2866 |//$FILENAME time_num_medium_7.src
                            15729 ; 2867 |#define RSRC_TIME_NUM_MEDIUM_7 1218    
                            15730 ; 2868 |//$FILENAME time_num_medium_8.src
                            15731 ; 2869 |#define RSRC_TIME_NUM_MEDIUM_8 1219    
                            15732 ; 2870 |//$FILENAME time_num_medium_9.src
                            15733 ; 2871 |#define RSRC_TIME_NUM_MEDIUM_9 1220    
                            15734 ; 2872 |
                            15735 ; 2873 |//$FILENAME time_colon.src
                            15736 ; 2874 |#define RSRC_TIME_COLON 1221    
                            15737 ; 2875 |
                            15738 ; 2876 |//$FILENAME settings_backlight_title.src
                            15739 ; 2877 |#define RSRC_SETTINGS_BACKLIGHT_TITLE 1222    
                            15740 ; 2878 |//$FILENAME settings_auto_shutdown_title.src
                            15741 ; 2879 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_TITLE 1223    
                            15742 ; 2880 |//$FILENAME settings_playmode_title.src
                            15743 ; 2881 |#define RSRC_SETTINGS_PLAYMODE_TITLE 1224    
                            15744 ; 2882 |
                            15745 ; 2883 |//$FILENAME settings_contrast_title.src
                            15746 ; 2884 |#define RSRC_SETTINGS_CONTRAST_TITLE 1225    
                            15747 ; 2885 |//$FILENAME vie_settings_contrast_title.src
                            15748 ; 2886 |#define RSRC_VIE_SETTINGS_CONTRAST_TITLE 1226    
                            15749 ; 2887 |
                            15750 ; 2888 |//$FILENAME settings_eq_title.src
                            15751 ; 2889 |#define RSRC_SETTINGS_EQ_TITLE 1227    
                            15752 ; 2890 |//$FILENAME vie_settings_eq_title.src
                            15753 ; 2891 |#define RSRC_VIE_SETTINGS_EQ_TITLE 1228    
                            15754 ; 2892 |
                            15755 ; 2893 |//$FILENAME settings_exit_title.src
                            15756 ; 2894 |#define RSRC_SETTINGS_EXIT_TITLE 1229    
                            15757 ; 2895 |//$FILENAME vie_settings_exit_title.src
                            15758 ; 2896 |#define RSRC_VIE_SETTINGS_EXIT_TITLE 1230    
                            15759 ; 2897 |
                            15760 ; 2898 |//$FILENAME settings_set_date_title.src
                            15761 ; 2899 |#define RSRC_SETTINGS_SET_DATE_TITLE 1231    
                            15762 ; 2900 |//$FILENAME vie_settings_set_date_title.src
                            15763 ; 2901 |#define RSRC_VIE_SETTINGS_SET_DATE_TITLE 1232    
                            15764 ; 2902 |
                            15765 ; 2903 |//$FILENAME settings_set_time_title.src
                            15766 ; 2904 |#define RSRC_SETTINGS_SET_TIME_TITLE 1233    
                            15767 ; 2905 |//$FILENAME vie_settings_set_time_title.src
                            15768 ; 2906 |#define RSRC_VIE_SETTINGS_SET_TIME_TITLE 1234    
                            15769 ; 2907 |
                            15770 ; 2908 |//$FILENAME settings_playmode_normal.src
                            15771 ; 2909 |#define RSRC_SETTINGS_PLAYMODE_NORMAL 1235    
                            15772 ; 2910 |//$FILENAME vie_settings_playmode_normal.src
                            15773 ; 2911 |#define RSRC_VIE_SETTINGS_PLAYMODE_NORMAL 1236    
                            15774 ; 2912 |
                            15775 ; 2913 |//$FILENAME settings_playmode_repeatone.src
                            15776 ; 2914 |#define RSRC_SETTINGS_PLAYMODE_REPEATONE 1237    
                            15777 ; 2915 |//$FILENAME vie_settings_playmode_repeatone.src
                            15778 ; 2916 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATONE 1238    
                            15779 ; 2917 |
                            15780 ; 2918 |//$FILENAME settings_playmode_repeatall.src
                            15781 ; 2919 |#define RSRC_SETTINGS_PLAYMODE_REPEATALL 1239    
                            15782 ; 2920 |//$FILENAME vie_settings_playmode_repeatall.src
                            15783 ; 2921 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATALL 1240    
                            15784 ; 2922 |
                            15785 ; 2923 |//$FILENAME settings_playmode_shuffle.src
                            15786 ; 2924 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE 1241    
                            15787 ; 2925 |//$FILENAME vie_settings_playmode_shuffle.src
                            15788 ; 2926 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE 1242    
                            15789 ; 2927 |
                            15790 ; 2928 |//$FILENAME settings_playmode_shuffle_repeat.src
                            15791 ; 2929 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1243    
                            15792 ; 2930 |//$FILENAME vie_settings_playmode_shuffle_repeat.src
                            15793 ; 2931 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1244    
                            15794 ; 2932 |
                            15795 ; 2933 |//$FILENAME settings_backlight_on.src
                            15796 ; 2934 |#define RSRC_SETTINGS_BACKLIGHT_ON 1245    
                            15797 ; 2935 |//$FILENAME vie_settings_backlight_on.src
                            15798 ; 2936 |#define RSRC_VIE_SETTINGS_BACKLIGHT_ON 1246    
                            15799 ; 2937 |
                            15800 ; 2938 |//$FILENAME settings_backlight_10s.src
                            15801 ; 2939 |#define RSRC_SETTINGS_BACKLIGHT_10S 1247    
                            15802 ; 2940 |//$FILENAME vie_settings_backlight_10s.src
                            15803 ; 2941 |#define RSRC_VIE_SETTINGS_BACKLIGHT_10S 1248    
                            15804 ; 2942 |
                            15805 ; 2943 |//$FILENAME settings_backlight_20s.src
                            15806 ; 2944 |#define RSRC_SETTINGS_BACKLIGHT_20S 1249    
                            15807 ; 2945 |//$FILENAME vie_settings_backlight_20s.src
                            15808 ; 2946 |#define RSRC_VIE_SETTINGS_BACKLIGHT_20s 1250    
                            15809 ; 2947 |
                            15810 ; 2948 |//$FILENAME settings_backlight_30s.src
                            15811 ; 2949 |#define RSRC_SETTINGS_BACKLIGHT_30S 1251    
                            15812 ; 2950 |//$FILENAME vie_settings_backlight_30s.src
                            15813 ; 2951 |#define RSRC_VIE_SETTINGS_BACKLIGHT_30S 1252    
                            15814 ; 2952 |
                            15815 ; 2953 |//$FILENAME settings_auto_shutdown_disable.src
                            15816 ; 2954 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_DISABLE 1253    
                            15817 ; 2955 |//$FILENAME vie_settings_auto_shutdown_disable.src
                            15818 ; 2956 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_DISABLE 1254    
                            15819 ; 2957 |
                            15820 ; 2958 |//$FILENAME settings_auto_shutdown_1minute.src
                            15821 ; 2959 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1255    
                            15822 ; 2960 |//$FILENAME vie_settings_auto_shutdown_1min.src
                            15823 ; 2961 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1256    
                            15824 ; 2962 |
                            15825 ; 2963 |//$FILENAME settings_auto_shutdown_2minutes.src
                            15826 ; 2964 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1257    
                            15827 ; 2965 |//$FILENAME vie_settings_auto_shutdown_2min.src
                            15828 ; 2966 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1258    
                            15829 ; 2967 |
                            15830 ; 2968 |//$FILENAME settings_auto_shutdown_5minutes.src
                            15831 ; 2969 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1259    
                            15832 ; 2970 |//$FILENAME vie_settings_auto_shutdown_5min.src
                            15833 ; 2971 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1260    
                            15834 ; 2972 |
                            15835 ; 2973 |//$FILENAME settings_auto_shutdown_10minutes.src
                            15836 ; 2974 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1261    
                            15837 ; 2975 |//$FILENAME vie_settings_auto_shutdown_10min.src
                            15838 ; 2976 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1262    
                            15839 ; 2977 |
                            15840 ; 2978 |//$FILENAME settings_languages_eng.src
                            15841 ; 2979 |#define RSRC_SETTINGS_LANGUAGES_ENG 1263    
                            15842 ; 2980 |//$FILENAME settings_languages_vie.src
                            15843 ; 2981 |#define RSRC_SETTINGS_LANGUAGES_VIE 1264    
                            15844 ; 2982 |
                            15845 ; 2983 |//$FILENAME fraction_dot.src
                            15846 ; 2984 |#define RSRC_FRACTION_DOT 1265    
                            15847 ; 2985 |
                            15848 ; 2986 |//$FILENAME fm_background.src
                            15849 ; 2987 |#define RSRC_FM_BACKGROUND 1266    
                            15850 ; 2988 |//$FILENAME vie_fm_background.src
                            15851 ; 2989 |#define RSRC_VIE_FM_BACKGROUND 1267    
                            15852 ; 2990 |
                            15853 ; 2991 |//$FILENAME searching_please_wait.src
                            15854 ; 2992 |#define RSRC_SEARCHING_PLEASE_WAIT 1268    
                            15855 ; 2993 |//$FILENAME vie_searching_please_wait.src
                            15856 ; 2994 |#define RSRC_VIE_SEARCHING_PLEASE_WAIT 1269    
                            15857 ; 2995 |
                            15858 ; 2996 |//$FILENAME fm_auto_search.src
                            15859 ; 2997 |#define RSRC_FM_AUTO_SEARCH 1270    
                            15860 ; 2998 |//$FILENAME vie_fm_auto_search.src
                            15861 ; 2999 |#define RSRC_VIE_FM_AUTO_SEARCH 1271    
                            15862 ; 3000 |
                            15863 ; 3001 |//$FILENAME jvj_shutdown_player.src
                            15864 ; 3002 |#define RSRC_JVJ_SHUTDOWN_PLAYER 1272    
                            15865 ; 3003 |//$FILENAME vie_jvj_shutdown_player.src
                            15866 ; 3004 |#define RSRC_VIE_JVJ_SHUTDOWN_PLAYER 1273    
                            15867 ; 3005 |
                            15868 ; 3006 |#endif //IF (!@def(resources))
                            15869 ; 3007 |
                            15870 
                            15872 
                            15873 ; 12   |#include "project.h"
                            15874 
                            15876 
                            15877 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            15878 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                            15879 ; 3    |//  Filename: project.inc
                            15880 ; 4    |//  Description: 
                            15881 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            15882 ; 6    |
                            15883 ; 7    |#if (!defined(_PROJECT_INC))
                            15884 ; 8    |#define _PROJECT_INC 1
                            15885 ; 9    |
                            15886 ; 10   |#if defined(STMP_BUILD_PLAYER)
                            15887 ; 11   |#include "hwequ.h"
                            15888 
                            15890 
                            15891 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            15892 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                            15893 ; 3    |//  File        : hwequ.inc
                            15894 ; 4    |//  Description : STMP Hardware Constants
                            15895 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            15896 ; 6    |
                            15897 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                            15898 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                            15899 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                            15900 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                            15901 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                            15902 ; 12   |
                            15903 ; 13   |#if (!defined(HWEQU_INC))
                            15904 ; 14   |#define HWEQU_INC 1
                            15905 ; 15   |
                            15906 ; 16   |#include "types.h"
                            15907 ; 17   |#include "regsclkctrl.h"
                            15908 ; 18   |#include "regscore.h"
                            15909 ; 19   |#include "regscodec.h"
                            15910 ; 20   |#include "regsdcdc.h"
                            15911 ; 21   |#include "regsemc.h"
                            15912 ; 22   |#include "regsgpio.h"
                            15913 ; 23   |#include "regsi2c.h"
                            15914 ; 24   |#include "regsi2s.h"
                            15915 ; 25   |#include "regsicoll.h"
                            15916 ; 26   |#include "regslradc.h"
                            15917 ; 27   |#include "regspwm.h"
                            15918 ; 28   |#include "regsrevision.h"
                            15919 ; 29   |#include "regsrtc.h"
                            15920 ; 30   |#include "regsspare.h"
                            15921 ; 31   |#include "regsspi.h"
                            15922 ; 32   |#include "regsswizzle.h"
                            15923 ; 33   |#include "regssdram.h"
                            15924 ; 34   |#include "regstb.h"
                            15925 ; 35   |#include "regstimer.h"
                            15926 ; 36   |#include "regsusb20.h"
                            15927 ; 37   |#include "regsusb20phy.h"
                            15928 ; 38   |
                            15929 ; 39   |
                            15930 ; 40   |#endif // if (!@def(hwequ))
                            15931 ; 41   |
                            15932 
                            15934 
                            15935 ; 12   |#else 
                            15936 ; 13   |//include "regscodec.inc"
                            15937 ; 14   |#endif
                            15938 ; 15   |
                            15939 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            15940 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults ON) & 
                            15941 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm. STMP00012148
                            15942 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal). 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15943 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's specs can 
                            15944 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player mode.  
                            15945 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            15946 ; 23   |
                            15947 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            15948 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            15949 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            15950 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define below by defining
                            15951 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            15952 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            15953 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            15954 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot config above- 
                            15955 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down threshholds by maybe 50mV.
                            15956 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed.
                            15957 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            15958 ; 35   |
                            15959 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            15960 ; 37   |// MEDIA DEFINITIONS
                            15961 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            15962 ; 39   |
                            15963 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            15964 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            15965 ; 42   |#if defined(NAND1)
                            15966 ; 43   |#define SM_INTERNAL_CHIPS 1
                            15967 ; 44   |#else 
                            15968 ; 45   |#if defined(NAND2)
                            15969 ; 46   |#define SM_INTERNAL_CHIPS 2
                            15970 ; 47   |#else 
                            15971 ; 48   |#if defined(NAND3)
                            15972 ; 49   |#define SM_INTERNAL_CHIPS 3
                            15973 ; 50   |#else 
                            15974 ; 51   |#if defined(NAND4)
                            15975 ; 52   |#define SM_INTERNAL_CHIPS 4
                            15976 ; 53   |#else 
                            15977 ; 54   |#define SM_INTERNAL_CHIPS 1
                            15978 ; 55   |#endif
                            15979 ; 56   |#endif
                            15980 ; 57   |#endif
                            15981 ; 58   |#endif
                            15982 ; 59   |
                            15983 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            15984 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            15985 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it reads 0.  
                            15986 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            15987 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it reads 1.
                            15988 ; 65   |//*** comment out if active high ****
                            15989 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            15990 ; 67   |
                            15991 ; 68   |#if defined(SMEDIA)
                            15992 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            15993 ; 70   |#define NUM_SM_EXTERNAL 1
                            15994 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            15995 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            15996 ; 73   |#else 
                            15997 ; 74   |#if defined(MMC)
                            15998 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            15999 ; 76   |#define NUM_SM_EXTERNAL 0
                            16000 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            16001 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            16002 ; 79   |#else 
                            16003 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            16004 ; 81   |#define NUM_SM_EXTERNAL 0
                            16005 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            16006 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            16007 ; 84   |#endif
                            16008 ; 85   |#endif
                            16009 ; 86   |
                            16010 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            16011 ; 88   |// Mass Storage Class definitions
                            16012 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            16013 ; 90   |// Set to 0 if Composite Device build is desired.    
                            16014 ; 91   |#define MULTI_LUN_BUILD 1   
                            16015 ; 92   |
                            16016 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            16017 ; 94   |//  SCSI
                            16018 ; 95   |#if (MULTI_LUN_BUILD==0)
                            16019 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            16020 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            16021 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            16022 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            16023 ; 100  |  #else
                            16024 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            16025 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            16026 ; 103  |  #endif
                            16027 ; 104  |#else
                            16028 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            16029 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            16030 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            16031 ; 108  |  #else
                            16032 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            16033 ; 110  |  #endif
                            16034 ; 111  |#endif
                            16035 ; 112  |
                            16036 ; 113  |
                            16037 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            16038 ; 115  |
                            16039 ; 116  |
                            16040 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            16041 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            16042 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            16043 ; 120  |#ifdef MMC
                            16044 ; 121  |#ifdef MTP_BUILD
                            16045 ; 122  |// --------------------
                            16046 ; 123  |// MTP and MMC
                            16047 ; 124  |// --------------------
                            16048 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            16049 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            16050 ; 127  |#else  // ifndef MTP_BUILD
                            16051 ; 128  |#ifdef STMP_BUILD_PLAYER
                            16052 ; 129  |// --------------------
                            16053 ; 130  |// Player and MMC
                            16054 ; 131  |// --------------------
                            16055 ; 132  |#else
                            16056 ; 133  |// --------------------
                            16057 ; 134  |// USBMSC and MMC
                            16058 ; 135  |// --------------------
                            16059 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            16060 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            16061 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            16062 ; 139  |#endif // ifdef MTP_BUILD
                            16063 ; 140  |#else  // ifndef MMC
                            16064 ; 141  |#ifdef MTP_BUILD
                            16065 ; 142  |// --------------------
                            16066 ; 143  |// MTP and NAND only
                            16067 ; 144  |// --------------------
                            16068 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            16069 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            16070 ; 147  |#else  // ifndef MTP_BUILD
                            16071 ; 148  |#ifdef STMP_BUILD_PLAYER
                            16072 ; 149  |// --------------------
                            16073 ; 150  |// Player and NAND only
                            16074 ; 151  |// --------------------
                            16075 ; 152  |#else
                            16076 ; 153  |// --------------------
                            16077 ; 154  |// USBMSC and NAND only
                            16078 ; 155  |// --------------------
                            16079 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            16080 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            16081 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            16082 ; 159  |#endif // ifdef MTP_BUILD
                            16083 ; 160  |#endif // ifdef MMC 
                            16084 ; 161  |
                            16085 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            16086 ; 163  |#if (defined(MTP_BUILD))
                            16087 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            16088 ; 165  |
                            16089 ; 166  |////!
                            16090 ; 167  |////! This varible holds the watchdog count for the store flush.
                            16091 ; 168  |////!
                            16092 ; 169  |///
                            16093 ; 170  |#include <types.h>
                            16094 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            16095 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            16096 ; 173  |#endif
                            16097 ; 174  |
                            16098 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            16099 ; 176  |// These are needed here for Mass Storage Class
                            16100 ; 177  |// Needs to be cleaned up
                            16101 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            16102 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            16103 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            16104 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            16105 ; 182  |
                            16106 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            16107 ; 184  |
                            16108 ; 185  |#endif
                            16109 ; 186  |
                            16110 ; 187  |
                            16111 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            16112 ; 189  |// SmartMedia/NAND defs
                            16113 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            16114 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            16115 ; 192  |
                            16116 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            16117 ; 194  |// Sysloadresources defs
                            16118 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            16119 ; 196  |
                            16120 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            16121 ; 198  |// MMC defs
                            16122 ; 199  |#define MMC_MAX_PARTITIONS 1
                            16123 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            16124 ; 201  |
                            16125 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            16126 ; 203  |// SPI defs
                            16127 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            16128 ; 205  |
                            16129 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            16130 ; 207  |// Global media defs
                            16131 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            16132 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            16133 ; 210  |
                            16134 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            16135 ; 212  |// DO NOT CHANGE THESE!!!
                            16136 ; 213  |#define SM_MAX_PARTITIONS 4
                            16137 ; 214  |#define MAX_HANDLES 2
                            16138 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            16139 ; 216  |
                            16140 ; 217  |
                            16141 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            16142 ; 219  |// Battery LRADC Values 
                            16143 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            16144 ; 221  |// brownout trip point in mV (moved by RS)
                            16145 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            16146 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            16147 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            16148 ; 225  |//     audio recording to media.
                            16149 ; 226  |#define BATT_SAFETY_MARGIN 10
                            16150 ; 227  |
                            16151 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                            16152 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline voltage to do a refresh.
                            16153 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            16154 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            16155 ; 232  |
                            16156 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc presence.
                            16157 ; 234  |
                            16158 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            16159 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat check.
                            16160 ; 237  |#if (!defined(CLCD))
                            16161 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            16162 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            16163 ; 240  |#else 
                            16164 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            16165 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            16166 ; 243  |#endif
                            16167 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            16168 ; 245  |
                            16169 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            16170 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIon.
                            16171 ; 248  |// See mp3 encoder overlay.
                            16172 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            16173 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            16174 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            16175 ; 252  |
                            16176 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            16177 ; 254  |// Voice recording filenames
                            16178 ; 255  |// number of digits in filename Vxxx.wav
                            16179 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            16180 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            16181 ; 258  |
                            16182 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            16183 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            16184 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            16185 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            16186 ; 263  |#if defined(DEVICE_3500)
                            16187 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            16188 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            16189 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            16190 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, & demo player)
                            16191 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            16192 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            16193 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16194 ; 271  |
                            16195 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn when bias not yet ready.
                            16196 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            16197 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevention if you use rec button from outside voice menu.
                            16198 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latency in the record-from-music-menu use-case.
                            16199 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            16200 ; 277  |
                            16201 ; 278  |#else 
                            16202 ; 279  |// STMP3410
                            16203 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            16204 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            16205 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            16206 ; 283  |#endif
                            16207 ; 284  |
                            16208 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            16209 ; 286  |// Number of available soft timers
                            16210 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            16211 ; 288  |#if defined(SYNC_LYRICS)
                            16212 ; 289  |#define SOFT_TIMERS 10
                            16213 ; 290  |#else 
                            16214 ; 291  |#if defined(JPEG_DECODER)
                            16215 ; 292  |#define SOFT_TIMERS 10
                            16216 ; 293  |#else 
                            16217 ; 294  |#define SOFT_TIMERS 9
                            16218 ; 295  |#endif
                            16219 ; 296  |#endif
                            16220 ; 297  |
                            16221 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            16222 ; 299  |//  sizes
                            16223 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            16224 ; 301  |#if defined(MMC)
                            16225 ; 302  |#if defined(USE_PLAYLIST5)
                            16226 ; 303  |#define MENU_STACK_SIZE 1500
                            16227 ; 304  |#else 
                            16228 ; 305  |#define MENU_STACK_SIZE 1250
                            16229 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            16230 ; 307  |#else 
                            16231 ; 308  |#if defined(USE_PLAYLIST5)
                            16232 ; 309  |#define MENU_STACK_SIZE 1500
                            16233 ; 310  |#else 
                            16234 ; 311  |#define MENU_STACK_SIZE 1250
                            16235 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            16236 ; 313  |#endif //if @def('MMC')
                            16237 ; 314  |
                            16238 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 750 else 550 for other builds? TOVERIFY. MYALLOC
                            16239 ; 316  |// 
                            16240 ; 317  |#define STACK_L1_SIZE 750
                            16241 ; 318  |#define STACK_L2_SIZE 100
                            16242 ; 319  |#define STACK_L3_SIZE 160
                            16243 ; 320  |
                            16244 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            16245 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            16246 ; 323  |// is ok with switching code.
                            16247 ; 324  |#if defined(MTP_BUILD)
                            16248 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            16249 ; 326  |#endif
                            16250 ; 327  |
                            16251 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            16252 ; 329  |// maximum number of nested funclets 
                            16253 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            16254 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            16255 ; 332  |
                            16256 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            16257 ; 334  |//    LCD DEFINITIONS
                            16258 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            16259 ; 336  |
                            16260 ; 337  |#define SPACE_CHAR 0x000020          
                            16261 ; 338  |#define ZERO_CHAR 0x000030
                            16262 ; 339  |#define COLON_CHAR 0x00003A
                            16263 ; 340  |#define PERIOD_CHAR 0x00002E
                            16264 ; 341  |
                            16265 ; 342  |#if (defined(S6B33B0A_LCD))
                            16266 ; 343  |#define LCD_X_SIZE 128
                            16267 ; 344  |#define LCD_Y_SIZE 159
                            16268 ; 345  |#endif
                            16269 ; 346  |
                            16270 ; 347  |#if (defined(SED15XX_LCD))
                            16271 ; 348  |#define LCD_X_SIZE 128
                            16272 ; 349  |#define LCD_Y_SIZE 64
                            16273 ; 350  |#endif
                            16274 ; 351  |
                            16275 ; 352  |
                            16276 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            16277 ; 354  |//   Details on Customizing Contrast
                            16278 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            16279 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            16280 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            16281 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            16282 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            16283 ; 360  |//   unless the ezact sequence is remembered.
                            16284 ; 361  |//   To find out what range your player supports: 
                            16285 ; 362  |//   change these equs to full range or comment out (full range is default)
                            16286 ; 363  |//;;;;;;
                            16287 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            16288 ; 365  |// recommended calibration using player -- uncomment 
                            16289 ; 366  |//;;;;;;
                            16290 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            16291 ; 368  |////////////////////////////
                            16292 ; 369  |#if (defined(DEMO_HW))
                            16293 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi LCD (June6'05)
                            16294 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            16295 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            16296 ; 373  |#else 
                            16297 ; 374  |
                            16298 ; 375  |#if (defined(S6B33B0A_LCD))
                            16299 ; 376  |#define LCD_MAX_CONTRAST 210
                            16300 ; 377  |#define LCD_MIN_CONTRAST 160    
                            16301 ; 378  |#endif
                            16302 ; 379  |
                            16303 ; 380  |#if (defined(SED15XX_LCD))
                            16304 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            16305 ; 382  |// Engineering board regs support range [17-37].
                            16306 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            16307 ; 384  |//   One default contrast range [24-42] works for both.
                            16308 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            16309 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            16310 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            16311 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            16312 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            16313 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            16314 ; 391  |
                            16315 ; 392  |#if (defined(NEWSHINGYIH))
                            16316 ; 393  |#define LCD_MAX_CONTRAST 250
                            16317 ; 394  |#define LCD_MIN_CONTRAST 0
                            16318 ; 395  |#else 
                            16319 ; 396  |//-----
                            16320 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            16321 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for both LCDs.
                            16322 ; 399  |#define LCD_MAX_CONTRAST 250
                            16323 ; 400  |#define LCD_MIN_CONTRAST 0
                            16324 ; 401  |
                            16325 ; 402  |//=====
                            16326 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            16327 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this historic ver.
                            16328 ; 405  |//LCD_MAX_CONTRAST equ 42
                            16329 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            16330 ; 407  |
                            16331 ; 408  |#endif
                            16332 ; 409  |#endif
                            16333 ; 410  |
                            16334 ; 411  |#endif
                            16335 ; 412  |
                            16336 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            16337 ; 414  |// The default value of the lcd contrast in % of range
                            16338 ; 415  |//   the default value is used when no settings.dat is available
                            16339 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            16340 ; 417  |
                            16341 ; 418  |#if (defined(S6B33B0A_LCD))
                            16342 ; 419  |// 60% of range is default value
                            16343 ; 420  |#define DEFAULT_CONTRAST 50 
                            16344 ; 421  |#endif
                            16345 ; 422  |
                            16346 ; 423  |#if (defined(SED15XX_LCD))
                            16347 ; 424  |// % of range is default value (was 60%)
                            16348 ; 425  |#define DEFAULT_CONTRAST 50 
                            16349 ; 426  |#endif
                            16350 ; 427  |
                            16351 ; 428  |
                            16352 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            16353 ; 430  |// make lower when doing calibration
                            16354 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            16355 ; 432  |
                            16356 ; 433  |
                            16357 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            16358 ; 435  |// For FFWD and RWND
                            16359 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            16360 ; 437  |#define SECONDS_TO_SKIP 1
                            16361 ; 438  |#define SECONDS_TO_SKIP1 3
                            16362 ; 439  |#define SECONDS_TO_SKIP2 6
                            16363 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            16364 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            16365 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16366 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            16367 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16368 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            16369 ; 446  |
                            16370 ; 447  |// For audible FFW/RWD
                            16371 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            16372 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            16373 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            16374 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            16375 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16376 ; 453  |#define LEVEL1_BOUNDARY 17 
                            16377 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16378 ; 455  |#define LEVEL2_BOUNDARY 33 
                            16379 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16380 ; 457  |#define LEVEL3_BOUNDARY 50 
                            16381 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            16382 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            16383 ; 460  |// Short Song Time, songs too short to play.
                            16384 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            16385 ; 462  |
                            16386 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            16387 ; 464  |// MP3 Sync Values
                            16388 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            16389 ; 466  |// # bytes to look for sync before marking it bad
                            16390 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            16391 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            16392 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            16393 ; 470  |// once we have sync'd, the isr should be called this frequently
                            16394 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            16395 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            16396 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            16397 ; 474  |
                            16398 ; 475  |
                            16399 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            16400 ; 477  |//// Multi-Stage Volume Control Definitions
                            16401 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            16402 ; 479  |//// Use Multi-Stage Volume
                            16403 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            16404 ; 481  |
                            16405 ; 482  |//// Master Volume definitions
                            16406 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            16407 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            16408 ; 485  |
                            16409 ; 486  |//// DAC-Mode definitions
                            16410 ; 487  |//// Adjusts 0dB point
                            16411 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            16412 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            16413 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines above.
                            16414 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            16415 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provides 1.5 dB gain on Stmp34x0; 
                            16416 ; 493  |//                                               Max gain possible: 8 step diff would provide +12dB gain.   
                            16417 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            16418 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            16419 ; 496  |
                            16420 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            16421 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            16422 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                            16423 ; 500  |
                            16424 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not the default
                            16425 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoint.
                            16426 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            16427 ; 504  |
                            16428 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the default
                            16429 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            16430 ; 507  |
                            16431 ; 508  |
                            16432 ; 509  |//// Line In definitions (used for Line-In 1)
                            16433 ; 510  |//// 0dB point of the Line In
                            16434 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            16435 ; 512  |//// Minimum volume of Line In
                            16436 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            16437 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            16438 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            16439 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            16440 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            16441 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS+1)
                            16442 ; 519  |
                            16443 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            16444 ; 521  |//// 0dB point of the Line In
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16445 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            16446 ; 523  |//// Minimum volume of Line In
                            16447 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            16448 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            16449 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            16450 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            16451 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            16452 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            16453 ; 530  |
                            16454 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            16455 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid deadlock states & recovers. 
                            16456 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            16457 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            16458 ; 535  |
                            16459 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            16460 ; 537  |////
                            16461 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            16462 ; 539  |////
                            16463 ; 540  |///
                            16464 ; 541  |#include <types.h>
                            16465 ; 542  |extern volatile WORD g_wActivityState;
                            16466 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            16467 ; 544  |
                            16468 ; 545  |void _reentrant Init5VSense(void);
                            16469 ; 546  |void _reentrant ServiceDCDC(void);
                            16470 ; 547  |
                            16471 ; 548  |////////////////////////////////////////////////////////////////////////////
                            16472 ; 549  |//// JPEG Thumbnail Mode Setting
                            16473 ; 550  |//// number of column in thumbnail mode
                            16474 ; 551  |#define THUMBNAIL_X 2           
                            16475 ; 552  |//// number of row in  thumbnail mode
                            16476 ; 553  |#define THUMBNAIL_Y 2           
                            16477 ; 554  |//// thumbnail boundary offset x
                            16478 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            16479 ; 556  |//// thumbnail boundary offset y
                            16480 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            16481 ; 558  |
                            16482 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            16483 ; 560  |
                            16484 
                            16486 
                            16487 ; 13   |#include "gettime.h"
                            16488 
                            16490 
                            16491 ; 1    |#ifndef __TIME_H
                            16492 ; 2    |#define __TIME_H
                            16493 ; 3    |
                            16494 ; 4    |_callee_save LONG GetTime(void);
                            16495 ; 5    |
                            16496 ; 6    |#endif
                            16497 
                            16499 
                            16500 ; 14   |#include "types.h"
                            16501 
                            16503 
                            16504 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16505 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16506 ; 3    |//
                            16507 ; 4    |// Filename: types.h
                            16508 ; 5    |// Description: Standard data types
                            16509 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16510 ; 7    |
                            16511 ; 8    |#ifndef _TYPES_H
                            16512 ; 9    |#define _TYPES_H
                            16513 ; 10   |
                            16514 ; 11   |// TODO:  move this outta here!
                            16515 ; 12   |#if !defined(NOERROR)
                            16516 ; 13   |#define NOERROR 0
                            16517 ; 14   |#define SUCCESS 0
                            16518 ; 15   |#endif 
                            16519 ; 16   |#if !defined(SUCCESS)
                            16520 ; 17   |#define SUCCESS  0
                            16521 ; 18   |#endif
                            16522 ; 19   |#if !defined(ERROR)
                            16523 ; 20   |#define ERROR   -1
                            16524 ; 21   |#endif
                            16525 ; 22   |#if !defined(FALSE)
                            16526 ; 23   |#define FALSE 0
                            16527 ; 24   |#endif
                            16528 ; 25   |#if !defined(TRUE)
                            16529 ; 26   |#define TRUE  1
                            16530 ; 27   |#endif
                            16531 ; 28   |
                            16532 ; 29   |#if !defined(NULL)
                            16533 ; 30   |#define NULL 0
                            16534 ; 31   |#endif
                            16535 ; 32   |
                            16536 ; 33   |#define MAX_INT     0x7FFFFF
                            16537 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16538 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16539 ; 36   |#define MAX_ULONG   (-1) 
                            16540 ; 37   |
                            16541 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16542 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16543 ; 40   |
                            16544 ; 41   |
                            16545 ; 42   |#define BYTE    unsigned char       // btVarName
                            16546 ; 43   |#define CHAR    signed char         // cVarName
                            16547 ; 44   |#define USHORT  unsigned short      // usVarName
                            16548 ; 45   |#define SHORT   unsigned short      // sVarName
                            16549 ; 46   |#define WORD    unsigned int        // wVarName
                            16550 ; 47   |#define INT     signed int          // iVarName
                            16551 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16552 ; 49   |#define LONG    signed long         // lVarName
                            16553 ; 50   |#define BOOL    unsigned int        // bVarName
                            16554 ; 51   |#define FRACT   _fract              // frVarName
                            16555 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            16556 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            16557 ; 54   |#define FLOAT   float               // fVarName
                            16558 ; 55   |#define DBL     double              // dVarName
                            16559 ; 56   |#define ENUM    enum                // eVarName
                            16560 ; 57   |#define CMX     _complex            // cmxVarName
                            16561 ; 58   |typedef WORD UCS3;                   // 
                            16562 ; 59   |
                            16563 ; 60   |#define UINT16  unsigned short
                            16564 ; 61   |#define UINT8   unsigned char   
                            16565 ; 62   |#define UINT32  unsigned long
                            16566 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16567 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16568 ; 65   |#define WCHAR   UINT16
                            16569 ; 66   |
                            16570 ; 67   |//UINT128 is 16 bytes or 6 words
                            16571 ; 68   |typedef struct UINT128_3500 {   
                            16572 ; 69   |    int val[6];     
                            16573 ; 70   |} UINT128_3500;
                            16574 ; 71   |
                            16575 ; 72   |#define UINT128   UINT128_3500
                            16576 ; 73   |
                            16577 ; 74   |// Little endian word packed byte strings:   
                            16578 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16579 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16580 ; 77   |// Little endian word packed byte strings:   
                            16581 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16582 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16583 ; 80   |
                            16584 ; 81   |// Declare Memory Spaces To Use When Coding
                            16585 ; 82   |// A. Sector Buffers
                            16586 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            16587 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            16588 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            16589 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            16590 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            16591 ; 88   |// B. Media DDI Memory
                            16592 ; 89   |#define MEDIA_DDI_MEM _Y
                            16593 ; 90   |
                            16594 ; 91   |
                            16595 ; 92   |
                            16596 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            16597 ; 94   |// Examples of circular pointers:
                            16598 ; 95   |//    INT CIRC cpiVarName
                            16599 ; 96   |//    DWORD CIRC cpdwVarName
                            16600 ; 97   |
                            16601 ; 98   |#define RETCODE INT                 // rcVarName
                            16602 ; 99   |
                            16603 ; 100  |// generic bitfield structure
                            16604 ; 101  |struct Bitfield {
                            16605 ; 102  |    unsigned int B0  :1;
                            16606 ; 103  |    unsigned int B1  :1;
                            16607 ; 104  |    unsigned int B2  :1;
                            16608 ; 105  |    unsigned int B3  :1;
                            16609 ; 106  |    unsigned int B4  :1;
                            16610 ; 107  |    unsigned int B5  :1;
                            16611 ; 108  |    unsigned int B6  :1;
                            16612 ; 109  |    unsigned int B7  :1;
                            16613 ; 110  |    unsigned int B8  :1;
                            16614 ; 111  |    unsigned int B9  :1;
                            16615 ; 112  |    unsigned int B10 :1;
                            16616 ; 113  |    unsigned int B11 :1;
                            16617 ; 114  |    unsigned int B12 :1;
                            16618 ; 115  |    unsigned int B13 :1;
                            16619 ; 116  |    unsigned int B14 :1;
                            16620 ; 117  |    unsigned int B15 :1;
                            16621 ; 118  |    unsigned int B16 :1;
                            16622 ; 119  |    unsigned int B17 :1;
                            16623 ; 120  |    unsigned int B18 :1;
                            16624 ; 121  |    unsigned int B19 :1;
                            16625 ; 122  |    unsigned int B20 :1;
                            16626 ; 123  |    unsigned int B21 :1;
                            16627 ; 124  |    unsigned int B22 :1;
                            16628 ; 125  |    unsigned int B23 :1;
                            16629 ; 126  |};
                            16630 ; 127  |
                            16631 ; 128  |union BitInt {
                            16632 ; 129  |        struct Bitfield B;
                            16633 ; 130  |        int        I;
                            16634 ; 131  |};
                            16635 ; 132  |
                            16636 ; 133  |#define MAX_MSG_LENGTH 10
                            16637 ; 134  |struct CMessage
                            16638 ; 135  |{
                            16639 ; 136  |        unsigned int m_uLength;
                            16640 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            16641 ; 138  |};
                            16642 ; 139  |
                            16643 ; 140  |typedef struct {
                            16644 ; 141  |    WORD m_wLength;
                            16645 ; 142  |    WORD m_wMessage;
                            16646 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            16647 ; 144  |} Message;
                            16648 ; 145  |
                            16649 ; 146  |struct MessageQueueDescriptor
                            16650 ; 147  |{
                            16651 ; 148  |        int *m_pBase;
                            16652 ; 149  |        int m_iModulo;
                            16653 ; 150  |        int m_iSize;
                            16654 ; 151  |        int *m_pHead;
                            16655 ; 152  |        int *m_pTail;
                            16656 ; 153  |};
                            16657 ; 154  |
                            16658 ; 155  |struct ModuleEntry
                            16659 ; 156  |{
                            16660 ; 157  |    int m_iSignaledEventMask;
                            16661 ; 158  |    int m_iWaitEventMask;
                            16662 ; 159  |    int m_iResourceOfCode;
                            16663 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            16664 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            16665 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            16666 ; 163  |    int m_uTimeOutHigh;
                            16667 ; 164  |    int m_uTimeOutLow;
                            16668 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            16669 ; 166  |};
                            16670 ; 167  |
                            16671 ; 168  |union WaitMask{
                            16672 ; 169  |    struct B{
                            16673 ; 170  |        unsigned int m_bNone     :1;
                            16674 ; 171  |        unsigned int m_bMessage  :1;
                            16675 ; 172  |        unsigned int m_bTimer    :1;
                            16676 ; 173  |        unsigned int m_bButton   :1;
                            16677 ; 174  |    } B;
                            16678 ; 175  |    int I;
                            16679 ; 176  |} ;
                            16680 ; 177  |
                            16681 ; 178  |
                            16682 ; 179  |struct Button {
                            16683 ; 180  |        WORD wButtonEvent;
                            16684 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            16685 ; 182  |};
                            16686 ; 183  |
                            16687 ; 184  |struct Message {
                            16688 ; 185  |        WORD wMsgLength;
                            16689 ; 186  |        WORD wMsgCommand;
                            16690 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            16691 ; 188  |};
                            16692 ; 189  |
                            16693 ; 190  |union EventTypes {
                            16694 ; 191  |        struct CMessage msg;
                            16695 ; 192  |        struct Button Button ;
                            16696 ; 193  |        struct Message Message;
                            16697 ; 194  |};
                            16698 ; 195  |
                            16699 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16700 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            16701 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            16702 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            16703 ; 200  |
                            16704 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            16705 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            16706 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            16707 ; 204  |
                            16708 ; 205  |#if DEBUG
                            16709 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            16710 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            16711 ; 208  |#else 
                            16712 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            16713 ; 210  |#define DebugBuildAssert(x)    
                            16714 ; 211  |#endif
                            16715 ; 212  |
                            16716 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            16717 ; 214  |//  #pragma asm
                            16718 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            16719 ; 216  |//  #pragma endasm
                            16720 ; 217  |
                            16721 ; 218  |
                            16722 ; 219  |#ifdef COLOR_262K
                            16723 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            16724 ; 221  |#elif defined(COLOR_65K)
                            16725 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            16726 ; 223  |#else
                            16727 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            16728 ; 225  |#endif
                            16729 ; 226  |    
                            16730 ; 227  |#endif // #ifndef _TYPES_H
                            16731 
                            16733 
                            16734 ; 15   |#include "..\Algorithms\Decoders\Stfm\src\sw_stereocontrol.h"
                            16735 
                            16737 
                            16738 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16739 ; 2    |// Copyright(C) SigmaTel, Inc. 2005
                            16740 ; 3    |//
                            16741 ; 4    |// File :         sw_stereocontrol.h
                            16742 ; 5    |// Description:   This function contain declarations of functions and
                            16743 ; 6    |//                                sw_stereocontrol structure.
                            16744 ; 7    |////////////////////////////////////////////////////////////////////////////////
                            16745 ; 8    |
                            16746 ; 9    |extern void Update_IIRFiltCoeff(void);
                            16747 ; 10   |extern void sw_stereocontrol_reset(void);
                            16748 ; 11   |extern void sw_stereopath_xcall(int _X *pDai, int _X *pDa0, int n);
                            16749 ; 12   |
                            16750 ; 13   |
                            16751 ; 14   |extern int g_sd_audio_LprB0_i16;
                            16752 ; 15   |extern int g_sd_audio_LprB1_i16;
                            16753 ; 16   |extern int g_sd_audio_LprA1_i16;
                            16754 ; 17   |extern int g_sd_audio_LprA2_i16;
                            16755 ; 18   |
                            16756 ; 19   |#define DEFAULT_RSSI_ATTACK     24108
                            16757 ; 20   |#define DEFAULT_RSSI_DELAY      59299 
                            16758 ; 21   |#define DEFAULT_LPR_BW_TH_LO     5120
                            16759 ; 22   |#define DEFAULT_LPR_BW_TH_HI     7680
                            16760 ; 23   |#define DEFAULT_LPR_GA_TH          20
                            16761 ; 24   |#define DEFAULT_LMR_GA_TH          50
                            16762 ; 25   |#define DEFAULT_LPR_BW_SL_SC     4800
                            16763 ; 26   |#define DEFAULT_LPR_BW_SL_SH       10
                            16764 ; 27   |
                            16765 ; 28   |#define DEFAULT_LPR_GA          32767
                            16766 ; 29   |#define DEFAULT_LMR_GA          32767
                            16767 ; 30   |
                            16768 ; 31   |// Default IIR filter coefficients for -3dB cutoff @ 17 kHz
                            16769 ; 32   |#define DEFAULT_B0               9403 
                            16770 ; 33   |#define DEFAULT_B1              18812 
                            16771 ; 34   |#define DEFAULT_B2         DEFAULT_B0 
                            16772 ; 35   |#define DEFAULT_A1             -16079 
                            16773 ; 36   |#define DEFAULT_A2              -5563
                            16774 ; 37   |
                            16775 ; 38   |#define COEF_SCALE                256           /* << 8 same as * 256 */
                            16776 ; 39   |        
                            16777 ; 40   |        
                            16778 ; 41   |
                            16779 ; 42   |
                            16780 ; 43   |_reentrant void sw_stereocontrol_xcall(unsigned short sd_audio_Rssi_u16);
                            16781 ; 44   |_reentrant void sw_stereocontrol_bwsweep(void);
                            16782 ; 45   | 
                            16783 ; 46   |extern int  _Y g_sd_audio_pCoefForcedMono_u1;               // Forced Mono control bit
                            16784 ; 47   |extern int  _Y g_sd_audio_pCoefBypassBlend_u1;              // Forced bypass of stereo blend
                            16785 ; 48   |extern int  _Y g_sd_audio_pCoefBypassSoftmute_u1;           // Forced bypass of softmute
                            16786 ; 49   |
                            16787 ; 50   |typedef struct sw_stereocontrol_str
                            16788 ; 51   |{                                                  // *** Programmable Coef's
                            16789 ; 52   |  unsigned short sd_audio_pCoefRssiAttack_u16;    // prog coef RSSI attack
                            16790 ; 53   |  unsigned short sd_audio_pCoefRssiDecay_u16;     // prog coef RSSI decay
                            16791 ; 54   |
                            16792 ; 55   |  unsigned short sd_audio_pCoefLprBwThLo_u16;     // prog coef Low Th LPR BW
                            16793 ; 56   |  unsigned short sd_audio_pCoefLprBwThHi_u16;     // prog coef High Th LPR BW
                            16794 ; 57   | 
                            16795 ; 58   |  unsigned short sd_audio_pCoefLprGaTh_u16;       // prog coef Th LPR Gain (SoftMute)
                            16796 ; 59   |  unsigned short sd_audio_pCoefLmrGaTh_u16;       // prog coef Th LMR Gain (Blend)
                            16797 ; 60   |
                            16798 ; 61   |  unsigned short sd_audio_pCoefLprBwSlSc_u16;     // prog coef Slope scale LPR BW
                            16799 ; 62   |  unsigned short sd_audio_pCoefLprBwSlSh_u16;     // prog coef Slope shift LPR BW
                            16800 ; 63   |//  unsigned short sd_audio_pCoefLprGaSlSc_u16;     // prog coef Slope scale LPR Gain
                            16801 ; 64   |//  unsigned short sd_audio_pCoefLprGaSlSh_u16;     // prog coef Slope shift LPR Gain
                            16802 ; 65   |
                            16803 ; 66   |  char sd_audio_pCoefBypassBwCtl_u1;              // prog coef Slope shift LPR Gain
                            16804 ; 67   |                                                  // *** end of Programmable Coef's
                            16805 ; 68   |
                            16806 ; 69   |  unsigned short sd_audio_LprGa_u16;              // LPR Gain (SoftMute) desired
                            16807 ; 70   |  unsigned short sd_audio_LmrGa_u16;              // LMR Gain (Blend) desired
                            16808 ; 71   |
                            16809 ; 72   |  signed short sd_audio_LprB0_i16;                // LPR,LMR stereo filter coef
                            16810 ; 73   |  signed short sd_audio_LprB1_i16;                // LPR,LMR stereo filter coef  
                            16811 ; 74   |  signed short sd_audio_LprA1_i16;                // LPR,LMR stereo filter coef
                            16812 ; 75   |  signed short sd_audio_LprA2_i16;                // LPR,LMR stereo filter coef
                            16813 ; 76   |
                            16814 ; 77   |  unsigned long sd_audio_RssiDecoded_u24;         // integer decoded RSSI
                            16815 ; 78   |  signed short sd_audio_RssiLog_i16;              // 10log10(decoded RSSI)
                            16816 ; 79   |  unsigned short sd_audio_RssiMant_u16;           // mantissa of float-coded RSSI
                            16817 ; 80   |  unsigned short sd_audio_RssiExp_u16;            // exponent of float-coded RSSI
                            16818 ; 81   |  unsigned short sd_audio_Prssi_u16;              // power of 2 for RSSI
                            16819 ; 82   |
                            16820 ; 83   |  unsigned short sd_audio_ScaledTrueRssi_u16;     // scaled version for precision
                            16821 ; 84   |  unsigned short sd_audio_FilteredRssi_u16;       // Attack/Decay filtered RSSI
                            16822 ; 85   |  unsigned short sd_audio_PrevFilteredRssi_u16;   // previous version of above
                            16823 ; 86   |//  unsigned short sd_audio_DecRssi_u16;            // Decimation modulo counter
                            16824 ; 87   |  
                            16825 ; 88   |  signed short sd_audio_ControlLpr_i16;           // master control for LPR
                            16826 ; 89   |  signed short sd_audio_ControlLmr_i16;           // master control for LMR
                            16827 ; 90   |  unsigned short sd_audio_LprBw_u16;              // LPR Bandwidth desired
                            16828 ; 91   |  unsigned short sd_audio_ScaledControlLmr_u16;   // Scaled down version Ctl LMR
                            16829 ; 92   |  unsigned short sd_audio_ScaledControlLpr_u16;   // Scaled down version Ctl LPR
                            16830 ; 93   |
                            16831 ; 94   |  signed short sd_audio_B0B_i16;                  // BW ctl B0 coef y-intercept
                            16832 ; 95   |  unsigned short sd_audio_B0S_u16;                // BW ctl B0 coef scale
                            16833 ; 96   |  signed short sd_audio_B0M_i16;                  // BW ctl B0 coef slope
                            16834 ; 97   |  signed short sd_audio_B1B_i16;                  // BW ctl B1 coef y-intercept
                            16835 ; 98   |  unsigned short sd_audio_B1S_u16;                // BW ctl B1 coef scale
                            16836 ; 99   |  signed short sd_audio_B1M_i16;                  // BW ctl B1 coef slope
                            16837 ; 100  |  signed short sd_audio_A1B_i16;                  // BW ctl A1 coef y-intercept
                            16838 ; 101  |  unsigned short sd_audio_A1S_u16;                // BW ctl A1 coef scale
                            16839 ; 102  |  signed short sd_audio_A1M_i16;                  // BW ctl A1 coef slope
                            16840 ; 103  |  signed short sd_audio_A2B_i16;                  // BW ctl A2 coef y-intercept
                            16841 ; 104  |  unsigned short sd_audio_A2S_u16;                // BW ctl A2 coef scale
                            16842 ; 105  |  signed short sd_audio_A2M_i16;                  // BW ctl A2 coef slope
                            16843 ; 106  |  unsigned short sd_audio_AdjBw_u16;              // Desired Filter BW scaled into range
                            16844 ; 107  |
                            16845 ; 108  |  unsigned long  sd_audio_Acc_u32;                // mimics H/W accumulator
                            16846 ; 109  |  signed short temp1_reg;                         // mimics 16 bit register
                            16847 ; 110  |  signed short temp2_reg;                         // mimics 16 bit register
                            16848 ; 111  |  signed short temp3_reg;                         // mimics 16 bit register
                            16849 ; 112  |
                            16850 ; 113  |}sw_stereocontrol_t;
                            16851 ; 114  |
                            16852 ; 115  |extern int gCOEF_SCALE;
                            16853 
                            16901 
                            16902 ; 116  |
                            16903 ; 117  |extern sw_stereocontrol_t sw_stereocontrol;
                            16904 
                            16906 
                            16907 ; 16   |#include "..\tunerdriver.h"
                            16908 
                            16910 
                            16911 ; 1    |#ifndef __TUNERDRIVER_H
                            16912 ; 2    |#define __TUNERDRIVER_H
                            16913 ; 3    |
                            16914 ; 4    |
                            16915 ; 5    |#include "types.h"
                            16916 
                            16918 
                            16919 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16920 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16921 ; 3    |//
                            16922 ; 4    |// Filename: types.h
                            16923 ; 5    |// Description: Standard data types
                            16924 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16925 ; 7    |
                            16926 ; 8    |#ifndef _TYPES_H
                            16927 ; 9    |#define _TYPES_H
                            16928 ; 10   |
                            16929 ; 11   |// TODO:  move this outta here!
                            16930 ; 12   |#if !defined(NOERROR)
                            16931 ; 13   |#define NOERROR 0
                            16932 ; 14   |#define SUCCESS 0
                            16933 ; 15   |#endif 
                            16934 ; 16   |#if !defined(SUCCESS)
                            16935 ; 17   |#define SUCCESS  0
                            16936 ; 18   |#endif
                            16937 ; 19   |#if !defined(ERROR)
                            16938 ; 20   |#define ERROR   -1
                            16939 ; 21   |#endif
                            16940 ; 22   |#if !defined(FALSE)
                            16941 ; 23   |#define FALSE 0
                            16942 ; 24   |#endif
                            16943 ; 25   |#if !defined(TRUE)
                            16944 ; 26   |#define TRUE  1
                            16945 ; 27   |#endif
                            16946 ; 28   |
                            16947 ; 29   |#if !defined(NULL)
                            16948 ; 30   |#define NULL 0
                            16949 ; 31   |#endif
                            16950 ; 32   |
                            16951 ; 33   |#define MAX_INT     0x7FFFFF
                            16952 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16953 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16954 ; 36   |#define MAX_ULONG   (-1) 
                            16955 ; 37   |
                            16956 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16957 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16958 ; 40   |
                            16959 ; 41   |
                            16960 ; 42   |#define BYTE    unsigned char       // btVarName
                            16961 ; 43   |#define CHAR    signed char         // cVarName
                            16962 ; 44   |#define USHORT  unsigned short      // usVarName
                            16963 ; 45   |#define SHORT   unsigned short      // sVarName
                            16964 ; 46   |#define WORD    unsigned int        // wVarName
                            16965 ; 47   |#define INT     signed int          // iVarName
                            16966 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16967 ; 49   |#define LONG    signed long         // lVarName
                            16968 ; 50   |#define BOOL    unsigned int        // bVarName
                            16969 ; 51   |#define FRACT   _fract              // frVarName
                            16970 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            16971 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            16972 ; 54   |#define FLOAT   float               // fVarName
                            16973 ; 55   |#define DBL     double              // dVarName
                            16974 ; 56   |#define ENUM    enum                // eVarName
                            16975 ; 57   |#define CMX     _complex            // cmxVarName
                            16976 ; 58   |typedef WORD UCS3;                   // 
                            16977 ; 59   |
                            16978 ; 60   |#define UINT16  unsigned short
                            16979 ; 61   |#define UINT8   unsigned char   
                            16980 ; 62   |#define UINT32  unsigned long
                            16981 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16982 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16983 ; 65   |#define WCHAR   UINT16
                            16984 ; 66   |
                            16985 ; 67   |//UINT128 is 16 bytes or 6 words
                            16986 ; 68   |typedef struct UINT128_3500 {   
                            16987 ; 69   |    int val[6];     
                            16988 ; 70   |} UINT128_3500;
                            16989 ; 71   |
                            16990 ; 72   |#define UINT128   UINT128_3500
                            16991 ; 73   |
                            16992 ; 74   |// Little endian word packed byte strings:   
                            16993 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16994 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16995 ; 77   |// Little endian word packed byte strings:   
                            16996 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16997 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16998 ; 80   |
                            16999 ; 81   |// Declare Memory Spaces To Use When Coding
                            17000 ; 82   |// A. Sector Buffers
                            17001 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            17002 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17003 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            17004 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            17005 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            17006 ; 88   |// B. Media DDI Memory
                            17007 ; 89   |#define MEDIA_DDI_MEM _Y
                            17008 ; 90   |
                            17009 ; 91   |
                            17010 ; 92   |
                            17011 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            17012 ; 94   |// Examples of circular pointers:
                            17013 ; 95   |//    INT CIRC cpiVarName
                            17014 ; 96   |//    DWORD CIRC cpdwVarName
                            17015 ; 97   |
                            17016 ; 98   |#define RETCODE INT                 // rcVarName
                            17017 ; 99   |
                            17018 ; 100  |// generic bitfield structure
                            17019 ; 101  |struct Bitfield {
                            17020 ; 102  |    unsigned int B0  :1;
                            17021 ; 103  |    unsigned int B1  :1;
                            17022 ; 104  |    unsigned int B2  :1;
                            17023 ; 105  |    unsigned int B3  :1;
                            17024 ; 106  |    unsigned int B4  :1;
                            17025 ; 107  |    unsigned int B5  :1;
                            17026 ; 108  |    unsigned int B6  :1;
                            17027 ; 109  |    unsigned int B7  :1;
                            17028 ; 110  |    unsigned int B8  :1;
                            17029 ; 111  |    unsigned int B9  :1;
                            17030 ; 112  |    unsigned int B10 :1;
                            17031 ; 113  |    unsigned int B11 :1;
                            17032 ; 114  |    unsigned int B12 :1;
                            17033 ; 115  |    unsigned int B13 :1;
                            17034 ; 116  |    unsigned int B14 :1;
                            17035 ; 117  |    unsigned int B15 :1;
                            17036 ; 118  |    unsigned int B16 :1;
                            17037 ; 119  |    unsigned int B17 :1;
                            17038 ; 120  |    unsigned int B18 :1;
                            17039 ; 121  |    unsigned int B19 :1;
                            17040 ; 122  |    unsigned int B20 :1;
                            17041 ; 123  |    unsigned int B21 :1;
                            17042 ; 124  |    unsigned int B22 :1;
                            17043 ; 125  |    unsigned int B23 :1;
                            17044 ; 126  |};
                            17045 ; 127  |
                            17046 ; 128  |union BitInt {
                            17047 ; 129  |        struct Bitfield B;
                            17048 ; 130  |        int        I;
                            17049 ; 131  |};
                            17050 ; 132  |
                            17051 ; 133  |#define MAX_MSG_LENGTH 10
                            17052 ; 134  |struct CMessage
                            17053 ; 135  |{
                            17054 ; 136  |        unsigned int m_uLength;
                            17055 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            17056 ; 138  |};
                            17057 ; 139  |
                            17058 ; 140  |typedef struct {
                            17059 ; 141  |    WORD m_wLength;
                            17060 ; 142  |    WORD m_wMessage;
                            17061 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            17062 ; 144  |} Message;
                            17063 ; 145  |
                            17064 ; 146  |struct MessageQueueDescriptor
                            17065 ; 147  |{
                            17066 ; 148  |        int *m_pBase;
                            17067 ; 149  |        int m_iModulo;
                            17068 ; 150  |        int m_iSize;
                            17069 ; 151  |        int *m_pHead;
                            17070 ; 152  |        int *m_pTail;
                            17071 ; 153  |};
                            17072 ; 154  |
                            17073 ; 155  |struct ModuleEntry
                            17074 ; 156  |{
                            17075 ; 157  |    int m_iSignaledEventMask;
                            17076 ; 158  |    int m_iWaitEventMask;
                            17077 ; 159  |    int m_iResourceOfCode;
                            17078 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            17079 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            17080 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            17081 ; 163  |    int m_uTimeOutHigh;
                            17082 ; 164  |    int m_uTimeOutLow;
                            17083 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            17084 ; 166  |};
                            17085 ; 167  |
                            17086 ; 168  |union WaitMask{
                            17087 ; 169  |    struct B{
                            17088 ; 170  |        unsigned int m_bNone     :1;
                            17089 ; 171  |        unsigned int m_bMessage  :1;
                            17090 ; 172  |        unsigned int m_bTimer    :1;
                            17091 ; 173  |        unsigned int m_bButton   :1;
                            17092 ; 174  |    } B;
                            17093 ; 175  |    int I;
                            17094 ; 176  |} ;
                            17095 ; 177  |
                            17096 ; 178  |
                            17097 ; 179  |struct Button {
                            17098 ; 180  |        WORD wButtonEvent;
                            17099 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            17100 ; 182  |};
                            17101 ; 183  |
                            17102 ; 184  |struct Message {
                            17103 ; 185  |        WORD wMsgLength;
                            17104 ; 186  |        WORD wMsgCommand;
                            17105 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            17106 ; 188  |};
                            17107 ; 189  |
                            17108 ; 190  |union EventTypes {
                            17109 ; 191  |        struct CMessage msg;
                            17110 ; 192  |        struct Button Button ;
                            17111 ; 193  |        struct Message Message;
                            17112 ; 194  |};
                            17113 ; 195  |
                            17114 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            17115 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            17116 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            17117 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            17118 ; 200  |
                            17119 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            17120 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            17121 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            17122 ; 204  |
                            17123 ; 205  |#if DEBUG
                            17124 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            17125 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            17126 ; 208  |#else 
                            17127 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            17128 ; 210  |#define DebugBuildAssert(x)    
                            17129 ; 211  |#endif
                            17130 ; 212  |
                            17131 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            17132 ; 214  |//  #pragma asm
                            17133 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            17134 ; 216  |//  #pragma endasm
                            17135 ; 217  |
                            17136 ; 218  |
                            17137 ; 219  |#ifdef COLOR_262K
                            17138 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            17139 ; 221  |#elif defined(COLOR_65K)
                            17140 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            17141 ; 223  |#else
                            17142 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            17143 ; 225  |#endif
                            17144 ; 226  |    
                            17145 ; 227  |#endif // #ifndef _TYPES_H
                            17146 
                            17148 
                            17149 ; 6    |
                            17150 ; 7    |#define TUNER_MODE_STEREO   1
                            17151 ; 8    |#define TUNER_MODE_MONO     0
                            17152 ; 9    |
                            17153 ; 10   |#define E_TUNER_FUNCTION_NOT_SUPPORTED  -1
                            17154 ; 11   |#define E_TUNER_PARAMETER_IN_ERROR      -2
                            17155 ; 12   |#define E_TUNER_NO_COMMUNICATION        -3
                            17156 ; 13   |#define E_TUNER_BUSY                    -4
                            17157 ; 14   |#define TUNER_SUCCESS                   0
                            17158 ; 15   |#define E_TUNER_POWERED_DOWN                    -8
                            17159 ; 16   |
                            17160 ; 17   |extern struct ModuleEntry *g_pTunerModuleEntry;
                            17161 ; 18   |
                            17162 ; 19   |_reentrant INT TunerGetStatus(void);
                            17163 ; 20   |_reentrant INT TunerDriverInit(void);
                            17164 ; 21   |_reentrant INT TunerDriverTuneToFrequency(INT);
                            17165 ; 22   |_reentrant INT TunerDriverIncrementUp(void );
                            17166 ; 23   |_reentrant INT TunerDriverIncrementDown(void );
                            17167 ; 24   |_reentrant INT TunerDriverSearchUp(void );
                            17168 ; 25   |_reentrant INT TunerDriverSearchDown(void);
                            17169 ; 26   |_reentrant INT TunerDriverSetMonoStereoMode(INT);
                            17170 ; 27   |_reentrant INT TunerDriverSetSensitivity(INT);
                            17171 ; 28   |_reentrant BOOL bIsTunerModulePowered(void);
                            17172 ; 29   |_reentrant INT TunerDriverSetTunerStandby(BOOL);
                            17173 ; 30   |_reentrant INT TunerDriverGetTunerstate( void );
                            17174 ; 31   |_reentrant INT TunerDriverScanStations( void );
                            17175 ; 32   |_reentrant INT TunerDriverSetToPresetStations( INT );
                            17176 ; 33   |_reentrant INT TunerDriverSetPresetStations( INT );
                            17177 ; 34   |_reentrant INT TunerDriverErasePresetStations( INT );
                            17178 ; 35   |
                            17179 ; 36   |
                            17180 ; 37   |struct ErrorBits {
                            17181 ; 38   |        int     m_bTUNER_BUSY:1;
                            17182 ; 39   |        int     m_bSEARCHING_UP:1;
                            17183 ; 40   |        int     m_bSEARCHING_DOWN:1;
                            17184 ; 41   |        int     :1;
                            17185 ; 42   |        int m_bSCANNING_STATION:1;
                            17186 ; 43   |        int :3;
                            17187 ; 44   |        int     m_bBAND_LIMIT_HIGH_ERROR:1;
                            17188 ; 45   |        int m_bBAND_LIMIT_LOW_ERROR:1;
                            17189 ; 46   |        int m_bUNUSED_PRESET:1;
                            17190 ; 47   |        int m_bPRESET_RANGE_ERROR:1;
                            17191 ; 48   |        int :1;
                            17192 ; 49   |        int m_bTUNER_NOT_FOUND:1;
                            17193 ; 50   |        int m_bPOWERED_OFF:1;
                            17194 ; 51   |        };
                            17195 ; 52   |extern struct ErrorBits g_wFMTunerError;
                            17196 ; 53   |
                            17197 ; 54   |#endif
                            17198 
                            17200 
                            17201 ; 17   |#include "stfm1000.h"
                            17202 
                            17204 
                            17205 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17206 ; 2    |// Copyright(C) SigmaTel, Inc. 2005
                            17207 ; 3    |//
                            17208 ; 4    |// Filename: STFM1000.h
                            17209 ; 5    |// Description: 
                            17210 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17211 ; 7    |
                            17212 ; 8    |#ifndef _STFM_1000_H
                            17213 ; 9    |#define _STFM_1000_H
                            17214 ; 10   |//////////////////////////////////////////////////////////////////////////////
                            17215 ; 11   |//!   Includes
                            17216 ; 12   |//////////////////////////////////////////////////////////////////////////////
                            17217 ; 13   |
                            17218 ; 14   |////////////////////////////////////////////////////////////////////////////////
                            17219 ; 15   |//! Definitions
                            17220 ; 16   |////////////////////////////////////////////////////////////////////////////////
                            17221 ; 17   |
                            17222 ; 18   |/**********************************************************************/
                            17223 ; 19   |
                            17224 ; 20   |//! STFM1000 Register Addresses
                            17225 ; 21   |// as of 2005/07/28
                            17226 ; 22   |#define TUNE1_REG_ADDR                      0x00
                            17227 ; 23   |#define SDNOMINAL_REG_ADDR                  0x04
                            17228 ; 24   |#define PILOTTRACKING_REG_ADDR              0x08
                            17229 ; 25   |#define STFM1000_UNUSED_REG_0C              0x0C
                            17230 ; 26   |#define INITIALIZATION1_REG_ADDR            0x10
                            17231 ; 27   |#define INITIALIZATION2_REG_ADDR            0x14
                            17232 ; 28   |#define INITIALIZATION3_REG_ADDR            0x18
                            17233 ; 29   |#define INITIALIZATION4_REG_ADDR            0x1C
                            17234 ; 30   |#define INITIALIZATION5_REG_ADDR            0x20
                            17235 ; 31   |#define INITIALIZATION6_REG_ADDR            0x24
                            17236 ; 32   |#define REF_REG_ADDR                        0x28
                            17237 ; 33   |#define LNA_REG_ADDR                        0x2C
                            17238 ; 34   |#define MIXFILT_REG_ADDR                    0x30
                            17239 ; 35   |#define CLK1_REG_ADDR                       0x34
                            17240 ; 36   |#define CLK2_REG_ADDR                       0x38
                            17241 ; 37   |#define ADC_REG_ADDR                        0x3C
                            17242 ; 38   |#define STFM1000_UNUSED_REG_40              0x40
                            17243 ; 39   |#define AGC_CONTROL1_REG_ADDR               0x44
                            17244 ; 40   |#define AGC_CONTROL2_REG_ADDR               0x48
                            17245 ; 41   |#define STFM1000_UNUSED_REG_4C              0x4C
                            17246 ; 42   |#define STFM1000_UNUSED_REG_50              0x50
                            17247 ; 43   |#define STFM1000_UNUSED_REG_54              0x54
                            17248 ; 44   |#define STFM1000_UNUSED_REG_58              0x58
                            17249 ; 45   |#define DATAPATH_REG_ADDR                   0x5C
                            17250 ; 46   |#define RMS_REG_ADDR                        0x60
                            17251 ; 47   |#define AGC_STAT_REG_ADDR                   0x64
                            17252 ; 48   |#define SIGNALQUALITY_REG_ADDR              0x68
                            17253 ; 49   |#define DCEST_REG_ADDR                      0x6C
                            17254 ; 50   |#define RSSI_TONE_REG_ADDR                  0x70
                            17255 ; 51   |#define PILOTCORRECTION_REG_ADDR            0x74
                            17256 ; 52   |#define ATTENTION_REG_ADDR                  0x78
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17257 ; 53   |#define CL3_REG_ADDR                        0x7C
                            17258 ; 54   |#define CHIPID_REG_ADDR                     0x80
                            17259 ; 55   |
                            17260 ; 56   |
                            17261 ; 57   |//! STFM1000 Register Fields
                            17262 ; 58   |// as of 2005/07/28
                            17263 ; 59   |
                            17264 ; 60   |// ******* Generic Definitions ***********************
                            17265 ; 61   |#define REGISTER_BYTES                      4
                            17266 ; 62   |
                            17267 ; 63   |#define WHOLEREG_MASK                       0xFFFFFFFF
                            17268 ; 64   |#define BYTE3_MASK                          0xFF000000
                            17269 ; 65   |#define BYTE2_MASK                          0x00FF0000
                            17270 ; 66   |#define BYTE1_MASK                          0x0000FF00
                            17271 ; 67   |#define BYTE0_MASK                          0x000000FF
                            17272 ; 68   |// ***************************************************
                            17273 ; 69   |
                            17274 ; 70   |
                            17275 ; 71   |// #define TUNE1_REG_ADDR                      0x00
                            17276 ; 72   |// ***************************************************
                            17277 ; 73   |#define TUNE1_B2_MIX_REG_MASK               0x001C0000
                            17278 ; 74   |#define TUNE1_CICOSR_REG_MASK               0x00007E00
                            17279 ; 75   |#define TUNE1_PLL_DIV_REG_MASK              0x000001FF
                            17280 ; 76   |// ***************************************************
                            17281 ; 77   |#define TUNE1_STARTUP_REG              0
                            17282 ; 78   |#define TUNE1_B2_MIX_REG               1             // IF = -100 kHz
                            17283 ; 79   |// b010110100 -- For Ftune=87.5MHz, we want Ffe=875-1, thus Ndiv = 11, Incr = 4
                            17284 ; 80   |#define TUNE1_PLL_DIV_REG              0xB4
                            17285 ; 81   |#define TUNE1_CICOSR_REG               36
                            17286 ; 82   |
                            17287 ; 83   |// #define SDNOMINAL_REG_ADDR                  0x04
                            17288 ; 84   |// ***************************************************
                            17289 ; 85   |#define SDNOMINAL_REG_MASK                  0xFFFFFFFF
                            17290 ; 86   |// ***************************************************
                            17291 ; 87   |// Based on tuning param's above
                            17292 ; 88   |#define SDNOMINAL_REG                  476390083
                            17293 ; 89   |
                            17294 ; 90   |// #define PILOTTRACKING_REG_ADDR              0x08
                            17295 ; 91   |// ***************************************************
                            17296 ; 92   |#define B2_PILOTTRACKING_ENABLE_REG_MASK    0x00008000
                            17297 ; 93   |#define B2_PILOTLPF_TIMECONSTANT_REG_MASK   0x00000F00
                            17298 ; 94   |#define B2_PFDSCALE_REG_MASK                0x000000F0
                            17299 ; 95   |#define B2_PFDFILTER_SPEEDUP_REG_MASK       0x0000000F
                            17300 ; 96   |// ***************************************************
                            17301 ; 97   | // start with pilottracking OFF
                            17302 ; 98   |#define B2_PILOTTRACKING_ENABLE_REG    0
                            17303 ; 99   |#define B2_PILOTLPF_TIMECONSTANT_REG   1
                            17304 ; 100  |#define B2_PFDSCALE_REG                12
                            17305 ; 101  |#define B2_PFDFILTER_SPEEDUP_REG       6
                            17306 ; 102  |
                            17307 ; 103  |
                            17308 ; 104  |// #define STFM1000_UNUSED_REG_0C              0x0C
                            17309 ; 105  |// ***************************************************
                            17310 ; 106  |// ***************************************************
                            17311 ; 107  |
                            17312 ; 108  |// #define INITIALIZATION1_REG_ADDR            0x10
                            17313 ; 109  |// ***************************************************
                            17314 ; 110  |#define SCALE_DEMOD_REG_MASK                0xE0000000
                            17315 ; 111  |#define ATTENTION_DISABLE_REG_MASK          0x1F800000
                            17316 ; 112  |#define BYPASS_DCFILT_REG_MASK              0x00700000
                            17317 ; 113  |#define DCEST_EN_REG_MASK                   0x00080000
                            17318 ; 114  |#define GAIN_MATCH_REG_MASK                 0x0007F000
                            17319 ; 115  |#define IQSWAP_REG_MASK                     0x00000800
                            17320 ; 116  |#define PHASE_MATCH_REG_MASK                0x000007F0
                            17321 ; 117  |#define B2_BYPASS_FILT_REG_MASK             0x0000000C
                            17322 ; 118  |#define DMD_BYPASS_REG_MASK                 0x00000003
                            17323 ; 119  |// ***************************************************
                            17324 ; 120  |#define SCALE_DEMOD_REG                1
                            17325 ; 121  |#define ATTENTION_DISABLE_REG          0
                            17326 ; 122  |#define BYPASS_DCFILT_REG              3
                            17327 ; 123  |#define DCEST_EN_REG                   1
                            17328 ; 124  |#define GAIN_MATCH_REG                 0
                            17329 ; 125  |#define IQSWAP_REG                     0
                            17330 ; 126  |#define PHASE_MATCH_REG                0
                            17331 ; 127  |#define B2_BYPASS_FILT_REG             2
                            17332 ; 128  |#define DMD_BYPASS_REG                 0
                            17333 ; 129  |
                            17334 ; 130  |
                            17335 ; 131  |// #define INITIALIZATION2_REG_ADDR            0x14
                            17336 ; 132  |// ***************************************************
                            17337 ; 133  |#define DRI_CLK_EN_REG_MASK                 0x80000000
                            17338 ; 134  |#define DISBALE_IQMATCH_REG_MASK            0x20000000
                            17339 ; 135  |#define DISABLE_GAINMATCH_REG_MASK          0x10000000
                            17340 ; 136  |#define VIEW_TONEDATA_REG_MASK              0x08000000
                            17341 ; 137  |#define PILOTCORRECTION_SMOOTHING_REG_MASK  0x04000000
                            17342 ; 138  |#define PILOTEST_MIXOFFSET_REG_MASK         0x02000000
                            17343 ; 139  |#define CCT_ENABLE_REG_MASK                 0x01000000
                            17344 ; 140  |#define TIMECONSTANT_REG_MASK               0x000C0000
                            17345 ; 141  |#define RDS_MIXOFFSET_REG_MASK              0x00020000
                            17346 ; 142  |#define PILOTOFFSET_LMR_REG_MASK            0x0001E000
                            17347 ; 143  |#define PILOTPEAKOFFSET_REG_MASK            0x00001E00
                            17348 ; 144  |#define DEEMPH_50_75B_REG_MASK              0x00000100
                            17349 ; 145  |#define K2_REG_MASK                         0x000000F0
                            17350 ; 146  |#define K1_REG_MASK                         0x0000000F
                            17351 ; 147  |// ***************************************************
                            17352 ; 148  |#define DRI_CLK_EN_REG                 1
                            17353 ; 149  |#define DISBALE_IQMATCH_REG            0
                            17354 ; 150  |#define DISABLE_GAINMATCH_REG          0
                            17355 ; 151  |#define VIEW_TONEDATA_REG              0
                            17356 ; 152  |#define PILOTCORRECTION_SMOOTHING_REG  1              // Turn smoothing ON
                            17357 ; 153  |#define PILOTEST_MIXOFFSET_REG         0
                            17358 ; 154  |#define CCT_ENABLE_REG                 1
                            17359 ; 155  |#define TIMECONSTANT_REG               1
                            17360 ; 156  |#define RDS_MIXOFFSET_REG              1
                            17361 ; 157  |#define PILOTOFFSET_LMR_REG            7
                            17362 ; 158  |#define PILOTPEAKOFFSET_REG            2
                            17363 ; 159  |#define DEEMPH_50_75B_REG              0              // 75 us
                            17364 ; 160  |#define K2_REG                         4
                            17365 ; 161  |#define K1_REG                         4
                            17366 ; 162  |
                            17367 ; 163  |// #define INITIALIZATION3_REG_ADDR            0x18
                            17368 ; 164  |// ***************************************************
                            17369 ; 165  |#define DRI_TEST_MODE_REG_MASK              0xE0000000
                            17370 ; 166  |#define B2_NEAR_CHAN_MIX_REG_MASK           0x1C000000
                            17371 ; 167  |#define PILOTCORRECTION_LIMIT_REG_MASK      0x03FC0000
                            17372 ; 168  |#define BYPASS_XTALLOCK_REG_MASK            0x00020000
                            17373 ; 169  |#define SEL_441B_48_REG_MASK                0x00010000
                            17374 ; 170  |#define PFD_DECRATE_REG_MASK                0x0000FFC0
                            17375 ; 171  |#define BYPASS_COMPEN_REG_MASK              0x00000020
                            17376 ; 172  |#define B2_I2PQ2_SCALE_REG_MASK             0x0000001F
                            17377 ; 173  |// ***************************************************
                            17378 ; 174  |#define DRI_TEST_MODE_REG              0              // Normal mode
                            17379 ; 175  |// monitor the strength of the received channel
                            17380 ; 176  |#define B2_NEAR_CHAN_MIX_REG           7
                            17381 ; 177  |#define PILOTCORRECTION_LIMIT_REG      0
                            17382 ; 178  |// start in pilot-lock mode, then switch later to xtal-lock once Fs is stable
                            17383 ; 179  |#define BYPASS_XTALLOCK_REG            1
                            17384 ; 180  |#define SEL_441B_48_REG                0
                            17385 ; 181  |#define PFD_DECRATE_REG                100
                            17386 ; 182  |#define BYPASS_COMPEN_REG              0
                            17387 ; 183  |#define B2_I2PQ2_SCALE_REG             13
                            17388 ; 184  |
                            17389 ; 185  |// #define INITIALIZATION4_REG_ADDR            0x1C
                            17390 ; 186  |// ***************************************************
                            17391 ; 187  |#define SAMPLE_SKIP_REG_MASK                0x7E000000
                            17392 ; 188  |#define POSITION_0_255_REG_MASK             0x01FFFFFF
                            17393 ; 189  |// ***************************************************
                            17394 ; 190  |#define SAMPLE_SKIP_REG                41             // For 44.1 kHz
                            17395 ; 191  |// For 44.1 kHz, (int)(91.93875*65536)
                            17396 ; 192  |#define POSITION_0_255_REG             6025298
                            17397 ; 193  |
                            17398 ; 194  |// #define INITIALIZATION5_REG_ADDR            0x20
                            17399 ; 195  |// ***************************************************
                            17400 ; 196  |#define FLAG_RDS_REG_MASK                   0xE0000000
                            17401 ; 197  |#define NUM_SLOTS_REG_MASK                  0x1C000000
                            17402 ; 198  |#define RDS_SLOT_POS_REG_MASK               0x0001C000
                            17403 ; 199  |#define RSSI_SLOT_POS_REG_MASK              0x00003800
                            17404 ; 200  |#define LMR_SLOT_POS_REG_MASK               0x00000700
                            17405 ; 201  |#define LPR_SLOT_POS_REG_MASK               0x000000E0
                            17406 ; 202  |#define DRI_QUIET_REG_MASK                  0x0000001F
                            17407 ; 203  |// ***************************************************
                            17408 ; 204  |#define FLAG_RDS_REG                   3
                            17409 ; 205  |#define NUM_SLOTS_REG                  4
                            17410 ; 206  |#define RDS_SLOT_POS_REG               3
                            17411 ; 207  |#define RSSI_SLOT_POS_REG              2
                            17412 ; 208  |#define LMR_SLOT_POS_REG               1
                            17413 ; 209  |#define LPR_SLOT_POS_REG               0
                            17414 ; 210  |#define DRI_QUIET_REG                  6    // Set to minimum acceptable
                            17415 ; 211  |
                            17416 ; 212  |// #define INITIALIZATION6_REG_ADDR            0x24
                            17417 ; 213  |// ***************************************************
                            17418 ; 214  |#define PAD_I2C18_OEB_REG_MASK              0x00060000
                            17419 ; 215  |#define DRI_CLKOUT_SEL_REG_MASK             0x00010000
                            17420 ; 216  |#define PAD_PD10KTST_OEB_REG_MASK           0x0000C000
                            17421 ; 217  |#define PAD_DRI_OEMAXB_REG_MASK             0x00002000
                            17422 ; 218  |#define PAD_DRI_OEB_REG_MASK                0x00001C00
                            17423 ; 219  |#define RXADC_LEVEL_REG_MASK                0x000003FF
                            17424 ; 220  |#define CHIPID_MASK                         0x0000FF00  // Reset values: TA2: 0x0000C000 ; TB2: 0x00007C00
                            17425 ; 221  |// ***************************************************
                            17426 ; 222  |#define PAD_I2C18_OEB_REG              0
                            17427 ; 223  |#define DRI_CLKOUT_SEL_REG             0
                            17428 ; 224  |#define PAD_PD10KTST_OEB_REG           0
                            17429 ; 225  |#define PAD_DRI_OEMAXB_REG             0
                            17430 ; 226  |#define PAD_DRI_OEB_REG                0
                            17431 ; 227  |#define RXADC_LEVEL_REG                581
                            17432 ; 228  |
                            17433 ; 229  |// #define REF_REG_ADDR                        0x28
                            17434 ; 230  |// ***************************************************
                            17435 ; 231  |#define REF_PWRUP_MASK                      0x00200000
                            17436 ; 232  |#define REG2V_PWRUP_MASK                    0x00100000
                            17437 ; 233  |#define SELFBIASOFF_MASK                    0x00040000
                            17438 ; 234  |#define IBIAS_ADJUST_MASK                   0x00030000
                            17439 ; 235  |#define TESTMODE_VBGVAG_MASK                0x00008000
                            17440 ; 236  |#define MIX_VAG_MASK                        0x00007000
                            17441 ; 237  |#define LOWPOWER_MASK                       0x00000800
                            17442 ; 238  |#define ADC_VAG_MASK                        0x00000700
                            17443 ; 239  |#define LNA_VAG_MASK                        0x000000F0
                            17444 ; 240  |#define ADJUST_MASK                         0x0000000F
                            17445 ; 241  |// ***************************************************
                            17446 ; 242  |#define REF_PWRUP                      0
                            17447 ; 243  |#define REG2V_PWRUP                    0
                            17448 ; 244  |#define SELFBIASOFF                    0
                            17449 ; 245  |#define IBIAS_ADJUST                   0
                            17450 ; 246  |#define TESTMODE_VBGVAG                0
                            17451 ; 247  |#define MIX_VAG                        0
                            17452 ; 248  |#define LOWPOWER                       0
                            17453 ; 249  |#define ADC_VAG                        0
                            17454 ; 250  |#define LNA_VAG                        0
                            17455 ; 251  |#define ADJUST                         0
                            17456 ; 252  |
                            17457 ; 253  |// #define LNA_REG_ADDR                        0x2C
                            17458 ; 254  |// ***************************************************
                            17459 ; 255  |#define RMS_SHIFT_RIGHT_MASK                0x08000000
                            17460 ; 256  |#define PWRUP_RMSDETECTOR_MASK              0x04000000
                            17461 ; 257  |#define PWRUP_REG_MASK                      0x02000000
                            17462 ; 258  |#define PWRUP_LNA_MASK                      0x01000000
                            17463 ; 259  |#define SEL_IBIAS_FROM_CLKXTAL_MASK         0x00800000
                            17464 ; 260  |#define USEATTEN_MASK                       0x00600000
                            17465 ; 261  |#define ANTENNA_TUNECAP_REG_MASK            0x001F0000
                            17466 ; 262  |#define USE_TEST_MASK                       0x00008000
                            17467 ; 263  |#define LNA_CURRENT_UP30_MASK               0x00004000
                            17468 ; 264  |#define LNA_CURRENT_DN50_MASK               0x00002000
                            17469 ; 265  |#define USE_LOW_REG_MASK                    0x00000100
                            17470 ; 266  |#define REG_ADJUST_MASK                     0x000000F0
                            17471 ; 267  |#define VCASN2_UP_MASK                      0x00000008
                            17472 ; 268  |#define VCASN2_DN_MASK                      0x00000004
                            17473 ; 269  |#define VCASN1_UP_MASK                      0x00000002
                            17474 ; 270  |#define VCASN1_DN_MASK                      0x00000001
                            17475 ; 271  |#define IBIAS2_UP_MASK                      0x00000008
                            17476 ; 272  |#define IBIAS2_DN_MASK                      0x00000004
                            17477 ; 273  |#define IBIAS1_UP_MASK                      0x00000002
                            17478 ; 274  |#define IBIAS1_DN_MASK                      0x00000001
                            17479 ; 275  |// ***************************************************
                            17480 ; 276  |#define RMS_SHIFT_RIGHT                0
                            17481 ; 277  |#define PWRUP_RMSDETECTOR              0
                            17482 ; 278  |#define PWRUP_REG                      0
                            17483 ; 279  |#define PWRUP_LNA                      0
                            17484 ; 280  |#define SEL_IBIAS_FROM_CLKXTAL         0
                            17485 ; 281  |#define USEATTEN                       0
                            17486 ; 282  |#define ANTENNA_TUNECAP_REG            0
                            17487 ; 283  |#define USE_TEST                       0
                            17488 ; 284  |#define LNA_CURRENT_UP30               0
                            17489 ; 285  |#define LNA_CURRENT_DN50               0
                            17490 ; 286  |#define USE_LOW_REG                    0
                            17491 ; 287  |#define REG_ADJUST                     0
                            17492 ; 288  |#define VCASN2_UP                      0
                            17493 ; 289  |#define VCASN2_DN                      0
                            17494 ; 290  |#define VCASN1_UP                      0
                            17495 ; 291  |#define VCASN1_DN                      0
                            17496 ; 292  |#define IBIAS2_UP                      0
                            17497 ; 293  |#define IBIAS2_DN                      0
                            17498 ; 294  |#define IBIAS1_UP                      0
                            17499 ; 295  |#define IBIAS1_DN                      0
                            17500 ; 296  |
                            17501 ; 297  |
                            17502 ; 298  |// #define MIXFILT_REG_ADDR                    0x30
                            17503 ; 299  |// ***************************************************
                            17504 ; 300  |#define RESET_MIX_MASK                      0x00008000
                            17505 ; 301  |#define PWRUP_DIG_CLK_MASK                  0x00004000
                            17506 ; 302  |#define PWRUP_ADC_CLK_MASK                  0x00002000
                            17507 ; 303  |#define PWRUP_MASK                          0x00001000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17508 ; 304  |#define DELAY_DIG_CLK1_MASK                 0x00000800
                            17509 ; 305  |#define DELAY_DIG_CLK0_MASK                 0x00000400
                            17510 ; 306  |#define INVERT_DIG_CLK_MASK                 0x00000200
                            17511 ; 307  |#define MOVE_ADC_SAMPLE_BACK_MASK           0x00000100
                            17512 ; 308  |#define INVERT_PHASE_MASK                   0x00000080
                            17513 ; 309  |#define EXTEND_NOV_MASK                     0x00000040
                            17514 ; 310  |#define DISABLE_INPUT_SWAP_MASK             0x00000020
                            17515 ; 311  |#define DISABLE_GAIN_SWAP_MASK              0x00000010
                            17516 ; 312  |#define CURRENT_UP30_MASK                   0x00000008
                            17517 ; 313  |#define CURRENT_DOWN50_MASK                 0x00000004
                            17518 ; 314  |#define VAG_CURRENT_UP30_MASK               0x00000002
                            17519 ; 315  |#define VAG_CURRENT_DOWN50_MASK             0x00000001
                            17520 ; 316  |// ***************************************************
                            17521 ; 317  |#define RESET_MIX                      0
                            17522 ; 318  |#define PWRUP_DIG_CLK                  0
                            17523 ; 319  |#define PWRUP_ADC_CLK                  0
                            17524 ; 320  |#define PWRUP                          0
                            17525 ; 321  |#define DELAY_DIG_CLK1                 0
                            17526 ; 322  |#define DELAY_DIG_CLK0                 0
                            17527 ; 323  |#define INVERT_DIG_CLK                 0
                            17528 ; 324  |#define MOVE_ADC_SAMPLE_BACK           0
                            17529 ; 325  |#define INVERT_PHASE                   0
                            17530 ; 326  |#define EXTEND_NOV                     0
                            17531 ; 327  |#define DISABLE_INPUT_SWAP             0
                            17532 ; 328  |#define DISABLE_GAIN_SWAP              0
                            17533 ; 329  |#define CURRENT_UP30                   0
                            17534 ; 330  |#define CURRENT_DOWN50                 0
                            17535 ; 331  |#define VAG_CURRENT_UP30               0
                            17536 ; 332  |#define VAG_CURRENT_DOWN50             0
                            17537 ; 333  |
                            17538 ; 334  |// #define CLK1_REG_ADDR                       0x34
                            17539 ; 335  |// ***************************************************
                            17540 ; 336  |#define HWFM_RESET_MASK                     0x20000000
                            17541 ; 337  |#define CLK1_PWRUP_MASK                     0x10000000
                            17542 ; 338  |#define ENABLE_REG_MASK                     0x08000000
                            17543 ; 339  |#define XTALAMP_SAVEPOWER_BIT1_MASK         0x02000000
                            17544 ; 340  |#define XTALAMP_SAVEPOWER_BIT0_MASK         0x01000000
                            17545 ; 341  |#define CLKOUT_SAVEPOWER_BIT1_MASK          0x00800000
                            17546 ; 342  |#define CLKOUT_SAVEPOWER_BIT0_MASK          0x00400000
                            17547 ; 343  |#define ENABLE_TESTVCOVOLTAGE_MASK          0x00200000
                            17548 ; 344  |#define ENABLE_LSBBOOST_MASK                0x00100000
                            17549 ; 345  |#define ENABLE_TESTPTATIDAC_MASK            0x00080000
                            17550 ; 346  |#define ENABLE_TEST_DELAY_DAC_MASK          0x00040000
                            17551 ; 347  |#define SEL_CLK_PTATIDAC_DELAY_MASK         0x00020000
                            17552 ; 348  |#define SEL_CLK_SC_IS_FREF24_MASK           0x00010000
                            17553 ; 349  |#define TESTOUTQ_ISDELAYOUT_PFDB_MASK       0x00008000
                            17554 ; 350  |#define DISABLE_CLKMIXFILT_MASK             0x00004000
                            17555 ; 351  |#define ENABLE_VCO_MASK                     0x00002000
                            17556 ; 352  |#define PTAT_SHORT_RESISTOR_MASK            0x00001000
                            17557 ; 353  |#define PTAT_TEMPCO_DN_MASK                 0x00000800
                            17558 ; 354  |#define PTAT_TEMPCO_UP_MASK                 0x00000400
                            17559 ; 355  |#define PTAT_PCASC_UP_MASK                  0x00000200
                            17560 ; 356  |#define PTAT_PCASC_DN_MASK                  0x00000100
                            17561 ; 357  |#define DELAY_SCALEUP_MASK                  0x00000080
                            17562 ; 358  |#define DELAY_SCALEDN_MASK                  0x00000040
                            17563 ; 359  |#define ENABLE_TAPDELAYFIX_REG_MASK         0x00000020
                            17564 ; 360  |#define ENABLE_DELAYMISMATCH_TAU_REG1_MASK  0x00000010
                            17565 ; 361  |#define XTAL_LOAD_MASK                      0x0000000F
                            17566 ; 362  |// ***************************************************
                            17567 ; 363  |#define HWFM_RESET                     0
                            17568 ; 364  |#define CLK1_PWRUP                     0
                            17569 ; 365  |#define ENABLE_REG                     0
                            17570 ; 366  |#define XTALAMP_SAVEPOWER_BIT1         0
                            17571 ; 367  |#define XTALAMP_SAVEPOWER_BIT0         0
                            17572 ; 368  |#define CLKOUT_SAVEPOWER_BIT1          0
                            17573 ; 369  |#define CLKOUT_SAVEPOWER_BIT0          0
                            17574 ; 370  |#define ENABLE_TESTVCOVOLTAGE          0
                            17575 ; 371  |#define ENABLE_LSBBOOST                0
                            17576 ; 372  |#define ENABLE_TESTPTATIDAC            0
                            17577 ; 373  |#define ENABLE_TEST_DELAY_DAC          0
                            17578 ; 374  |#define SEL_CLK_PTATIDAC_DELAY         0
                            17579 ; 375  |#define SEL_CLK_SC_IS_FREF24           0
                            17580 ; 376  |#define TESTOUTQ_ISDELAYOUT_PFDB       0
                            17581 ; 377  |#define DISABLE_CLKMIXFILT             0
                            17582 ; 378  |#define ENABLE_VCO                     0
                            17583 ; 379  |#define PTAT_SHORT_RESISTOR            0
                            17584 ; 380  |#define PTAT_TEMPCO_DN                 0
                            17585 ; 381  |#define PTAT_TEMPCO_UP                 0
                            17586 ; 382  |#define PTAT_PCASC_UP                  0
                            17587 ; 383  |#define PTAT_PCASC_DN                  0
                            17588 ; 384  |#define DELAY_SCALEUP                  0
                            17589 ; 385  |#define DELAY_SCALEDN                  0
                            17590 ; 386  |#define ENABLE_TAPDELAYFIX_REG         0
                            17591 ; 387  |#define ENABLE_DELAYMISMATCH_TAU_REG1  0
                            17592 ; 388  |#define XTAL_LOAD                      0
                            17593 ; 389  |
                            17594 ; 390  |// #define CLK2_REG_ADDR                       0x38
                            17595 ; 391  |// ***************************************************
                            17596 ; 392  |#define PLL_PHASE_SCALE_MAX_REG3_MASK       0x70000000
                            17597 ; 393  |#define PLL_PHASE_TWEAK_REG2_MASK           0x0C000000
                            17598 ; 394  |#define PLL_FREQ_TWEAK_REG2_MASK            0x03000000
                            17599 ; 395  |#define PLL_LF_OVERRIDE_REG24_MASK          0x00FFFFFF
                            17600 ; 396  |// ***************************************************
                            17601 ; 397  |#define PLL_PHASE_SCALE_MAX_REG3       0
                            17602 ; 398  |#define PLL_PHASE_TWEAK_REG2           0
                            17603 ; 399  |#define PLL_FREQ_TWEAK_REG2            0
                            17604 ; 400  |#define PLL_LF_OVERRIDE_REG24          0
                            17605 ; 401  |
                            17606 ; 402  |// #define ADC_REG_ADDR                        0x3C
                            17607 ; 403  |// ***************************************************
                            17608 ; 404  |#define VREF_TM_MUX_ENABLE_MASK             0x00040000
                            17609 ; 405  |#define PWRUPQ_MASK                         0x00020000
                            17610 ; 406  |#define PWRUPI_MASK                         0x00010000
                            17611 ; 407  |#define TESTMODE_ADCREF_MASK                0x00008000
                            17612 ; 408  |#define ADC_VREF_ADJ_MASK                   0x00007000
                            17613 ; 409  |#define ADC_EXTEND_NOV_MASK                 0x00000800
                            17614 ; 410  |#define EXTEND_DELAY_MASK                   0x00000400
                            17615 ; 411  |#define CURRENT_DOWN50_VREF_MASK            0x00000200
                            17616 ; 412  |#define CURRENT_UP30_VREF_MASK              0x00000100
                            17617 ; 413  |#define CURRENT_DOWN50_VAG_MASK             0x00000080
                            17618 ; 414  |#define CURRENT_UP30_VAG_MASK               0x00000040
                            17619 ; 415  |#define CURRENT_DOWN50_OTA2_MASK            0x00000020
                            17620 ; 416  |#define CURRENT_UP30_OTA2_MASK              0x00000010
                            17621 ; 417  |#define CURRENT_DOWN50_OTA1_MASK            0x00000008
                            17622 ; 418  |#define CURRENT_UP30_OTA1_MASK              0x00000004
                            17623 ; 419  |#define CURRENT_DOWN50_ALL_MASK             0x00000002
                            17624 ; 420  |#define CURRENT_UP30_ALL_MASK               0x00000001
                            17625 ; 421  |// ***************************************************
                            17626 ; 422  |#define VREF_TM_MUX_ENABLE             0
                            17627 ; 423  |#define PWRUPQ                         0
                            17628 ; 424  |#define PWRUPI                         0
                            17629 ; 425  |#define TESTMODE_ADCREF                0
                            17630 ; 426  |#define ADC_VREF_ADJ                   0
                            17631 ; 427  |#define ADC_EXTEND_NOV                 0
                            17632 ; 428  |#define EXTEND_DELAY                   0
                            17633 ; 429  |#define CURRENT_DOWN50_VREF            0
                            17634 ; 430  |#define CURRENT_UP30_VREF              0
                            17635 ; 431  |#define CURRENT_DOWN50_VAG             0
                            17636 ; 432  |#define CURRENT_UP30_VAG               0
                            17637 ; 433  |#define CURRENT_DOWN50_OTA2            0
                            17638 ; 434  |#define CURRENT_UP30_OTA2              0
                            17639 ; 435  |#define CURRENT_DOWN50_OTA1            0
                            17640 ; 436  |#define CURRENT_UP30_OTA1              0
                            17641 ; 437  |#define CURRENT_DOWN50_ALL             0
                            17642 ; 438  |#define CURRENT_UP30_ALL               0
                            17643 ; 439  |
                            17644 ; 440  |
                            17645 ; 441  |// #define STFM1000_UNUSED_REG_40              0x40
                            17646 ; 442  |// ***************************************************
                            17647 ; 443  |// ***************************************************
                            17648 ; 444  |
                            17649 ; 445  |// #define AGC_CONTROL1_REG_ADDR               0x44
                            17650 ; 446  |// ***************************************************
                            17651 ; 447  |#define B2_SEL_LNA_OR_WB_REG_MASK           0x00200000
                            17652 ; 448  |#define B2_LNATH_REG_MASK                   0x001F0000
                            17653 ; 449  |#define B2_BYPASS_REF_CTL_REG_MASK          0x00008000
                            17654 ; 450  |#define B2_BYPASS_AGC_CTL_REG_MASK          0x00004000
                            17655 ; 451  |#define B2_AGCREF_REG_MASK                  0x00003F00
                            17656 ; 452  |#define B2_LNA_GAIN_REG_MASK                0x000000F8
                            17657 ; 453  |#define B2_AGCGAIN_REG_MASK                 0x00000007
                            17658 ; 454  |// ***************************************************
                            17659 ; 455  |#define B2_SEL_LNA_OR_WB_REG           0
                            17660 ; 456  |#define B2_LNATH_REG                   12
                            17661 ; 457  |#define B2_BYPASS_REF_CTL_REG          0
                            17662 ; 458  |#define B2_BYPASS_AGC_CTL_REG          1    // Start out with AGC bypassed
                            17663 ; 459  |#define B2_AGCREF_REG                  30
                            17664 ; 460  |#define B2_LNA_GAIN_REG                0    // Start with minimum gain
                            17665 ; 461  |#define B2_AGCGAIN_REG                 2
                            17666 ; 462  |
                            17667 ; 463  |
                            17668 ; 464  |//#define AGC_CONTROL2_REG_ADDR               0x48
                            17669 ; 465  |// ***************************************************
                            17670 ; 466  |#define DECREFCTL_REG_MASK                  0x0FFF0000
                            17671 ; 467  |#define B2_DECAGC_REG_MASK                  0x00000FFF
                            17672 ; 468  |// ***************************************************
                            17673 ; 469  |#define DECREFCTL_REG                  20
                            17674 ; 470  |// 80 runs the AGC at 800k/80 = 10kHz
                            17675 ; 471  |#define B2_DECAGC_REG                  80
                            17676 ; 472  |
                            17677 ; 473  |
                            17678 ; 474  |// #define STFM1000_UNUSED_REG_4C              0x4C
                            17679 ; 475  |// ***************************************************
                            17680 ; 476  |// ***************************************************
                            17681 ; 477  |
                            17682 ; 478  |// #define STFM1000_UNUSED_REG_50              0x50
                            17683 ; 479  |// ***************************************************
                            17684 ; 480  |// ***************************************************
                            17685 ; 481  |
                            17686 ; 482  |// #define STFM1000_UNUSED_REG_54              0x54
                            17687 ; 483  |// ***************************************************
                            17688 ; 484  |// ***************************************************
                            17689 ; 485  |
                            17690 ; 486  |// #define STFM1000_UNUSED_REG_58              0x58
                            17691 ; 487  |// ***************************************************
                            17692 ; 488  |// ***************************************************
                            17693 ; 489  |
                            17694 ; 490  |// #define DATAPATH_REG_ADDR                   0x5C
                            17695 ; 491  |// ***************************************************
                            17696 ; 492  |#define DP_EN_REG_MASK                      0x01000000
                            17697 ; 493  |#define DB_ACCEPT_REG_MASK                  0x00010000
                            17698 ; 494  |#define TST_CLK_OUT_REG_MASK                0x00004000
                            17699 ; 495  |#define I2C_CLK_FREQ_REG_MASK               0x00000E00
                            17700 ; 496  |#define DP_CLK_SEL_REG_MASK                 0x00000100
                            17701 ; 497  |#define INTERP_DATAPATH_CLKGATE_REG_MASK    0x00000080
                            17702 ; 498  |#define DRI_CLK_DIV_REG_MASK                0x0000007C
                            17703 ; 499  |#define DRI_CLK_SEL_REG_MASK                0x00000002
                            17704 ; 500  |#define DRI_EN_REG_MASK                     0x00000001
                            17705 ; 501  |// ***************************************************
                            17706 ; 502  |#define DP_EN_REG                      0
                            17707 ; 503  |// Start off accepting all B2_x writes
                            17708 ; 504  |#define DB_ACCEPT_REG                  1
                            17709 ; 505  |#define TST_CLK_OUT_REG                0
                            17710 ; 506  |#define I2C_CLK_FREQ_REG               0
                            17711 ; 507  |#define DP_CLK_SEL_REG                 0
                            17712 ; 508  |#define INTERP_DATAPATH_CLKGATE_REG    0
                            17713 ; 509  |// Want 4 since 24MHz/6MHz = 4
                            17714 ; 510  |#define DRI_CLK_DIV_REG                4
                            17715 ; 511  |#define DRI_CLK_SEL_REG                0
                            17716 ; 512  |#define DRI_EN_REG                     0
                            17717 ; 513  |
                            17718 ; 514  |
                            17719 ; 515  |// #define RMS_REG_ADDR                        0x60
                            17720 ; 516  |// ***************************************************
                            17721 ; 517  |#define RMS_I_REG_MASK                      0x7FFF0000
                            17722 ; 518  |#define RMS_Q_REG_MASK                      0x00007FFF
                            17723 ; 519  |// ***************************************************
                            17724 ; 520  |
                            17725 ; 521  |// #define AGC_STAT_REG_ADDR                   0x64
                            17726 ; 522  |// ***************************************************
                            17727 ; 523  |#define AGCOUT_STAT_REG_MASK                0x1F000000
                            17728 ; 524  |#define AGCREF_STAT_REG_MASK                0x003F0000
                            17729 ; 525  |#define LNA_RMS_REG_MASK                    0x00001F00
                            17730 ; 526  |#define WB_RMS_REG_MASK                     0x000000FF
                            17731 ; 527  |// ***************************************************
                            17732 ; 528  |
                            17733 ; 529  |// #define SIGNALQUALITY_REG_ADDR              0x68
                            17734 ; 530  |// ***************************************************
                            17735 ; 531  |#define SRC_NOMPOS_REG_MASK                 0x0000FF00
                            17736 ; 532  |#define NEAR_CHAN_AMP_READY_REG_MASK        0x00000080
                            17737 ; 533  |#define NEAR_CHAN_AMPLITUDE_REG_MASK        0x0000007F
                            17738 ; 534  |// ***************************************************
                            17739 ; 535  |
                            17740 ; 536  |// #define DCEST_REG_ADDR                      0x6C
                            17741 ; 537  |// ***************************************************
                            17742 ; 538  |#define DCEST_I_REG_MASK                    0x7FFF0000
                            17743 ; 539  |#define DCEST_Q_REG_MASK                    0x00007FFF
                            17744 ; 540  |// ***************************************************
                            17745 ; 541  |
                            17746 ; 542  |// #define RSSI_TONE_REG_ADDR                  0x70
                            17747 ; 543  |// ***************************************************
                            17748 ; 544  |#define TONEDATA_REG_MASK                   0x0FFF0000
                            17749 ; 545  |#define RSSI_DCEST_REG_MASK                 0x0000FFFF
                            17750 ; 546  |// ***************************************************
                            17751 ; 547  |
                            17752 ; 548  |// #define PILOTCORRECTION_REG_ADDR            0x74
                            17753 ; 549  |// ***************************************************
                            17754 ; 550  |#define PILOTEST_REG_MASK                   0xFF000000
                            17755 ; 551  |#define PILOTEST_REG_TA2_MASK               0xFF000000
                            17756 ; 552  |#define PILOTEST_REG_TB2_MASK               0xFE000000
                            17757 ; 553  |#define PILOTCORRECTION_REG_MASK            0x00FFFFFF
                            17758 ; 554  |// ***************************************************
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17759 ; 555  |
                            17760 ; 556  |// #define ATTENTION_REG_ADDR                  0x78
                            17761 ; 557  |// ***************************************************
                            17762 ; 558  |#define ATTENTION_REG_MASK                  0x0000003F
                            17763 ; 559  |#define MIXFILT_10PERCENT_REG_MASK          0x00000020
                            17764 ; 560  |#define DRI_OVERRUN_REG_MASK                0x00000010
                            17765 ; 561  |#define PILOT_LIMIT_REG_MASK                0x00000008
                            17766 ; 562  |#define ZIF_OUTCLIP_REG_MASK                0x00000004
                            17767 ; 563  |#define WBRMS_CLIP_REG_MASK                 0x00000002
                            17768 ; 564  |#define DEMOD_OUTCLIP_REG_MASK              0x00000001
                            17769 ; 565  |// ***************************************************
                            17770 ; 566  |
                            17771 ; 567  |// #define CL3_REG_ADDR                        0x7C
                            17772 ; 568  |// ***************************************************
                            17773 ; 569  |#define PLL_DAC_OVERFLOW_REG2_MASK          0x06000000
                            17774 ; 570  |#define PLL_MODE_REG2_MASK                  0x01800000
                            17775 ; 571  |#define PLL_SC_FILTEROUT_REG23_MASK         0x007FFFFF
                            17776 ; 572  |// ***************************************************
                            17777 ; 573  |
                            17778 ; 574  |// #define CHIPID_REG_ADDR                     0x80
                            17779 ; 575  |// ***************************************************
                            17780 ; 576  |#define MAJOR_REV_ID_REG_MASK               0x000000F0
                            17781 ; 577  |#define MINOR_REV_ID_REG_MASK               0x0000000F
                            17782 ; 578  |#define VERSION_TA1                         0x00000001
                            17783 ; 579  |#define VERSION_TA2                         0x00000002  
                            17784 ; 580  |#define VERSION_TB1                         0x00000011
                            17785 ; 581  |#define VERSION_TB2                         0x00000012
                            17786 ; 582  |// ***************************************************
                            17787 ; 583  |
                            17788 ; 584  |
                            17789 ; 585  |////////////////////////////////////////////////////////////////////////////////
                            17790 ; 586  |//! GENERIC Interface Section
                            17791 ; 587  |////////////////////////////////////////////////////////////////////////////////
                            17792 ; 588  |
                            17793 ; 589  |
                            17794 ; 590  |
                            17795 ; 591  |//! Generic Definitions
                            17796 ; 592  |
                            17797 ; 593  |//! temp for when settings functions available from generic level
                            17798 ; 594  |#define SETTINGS_IN_TABLE 20
                            17799 ; 595  |
                            17800 ; 596  |#define SettingTableSize (sizeof(ddi_tuner_TunerSettingsTable_t)\ 
                            17801 ; 597  |+(sizeof(ddi_tuner_TunerSettingsEntry_t)*(SETTINGS_IN_TABLE-1)))
                            17802 ; 598  |
                            17803 ; 599  |
                            17804 ; 600  |//!  Mute duration parameter DDI_TUNER_SOUND_ON_USEC
                            17805 ; 601  |#define DDI_TUNER_SOUND_ON_USEC (50 * 1000)
                            17806 ; 602  |
                            17807 ; 603  |//!  Mute duration parameter DDI_TUNER_SOUND_OFF_USEC
                            17808 ; 604  |#define DDI_TUNER_SOUND_OFF_USEC (20 * 1000)
                            17809 ; 605  |
                            17810 ; 606  |
                            17811 ; 607  |
                            17812 ; 608  |
                            17813 ; 609  |////////////////////////////////////////////////////////////////////////////////
                            17814 ; 610  |//! TUNING Interface Section
                            17815 ; 611  |////////////////////////////////////////////////////////////////////////////////
                            17816 ; 612  |
                            17817 ; 613  |
                            17818 ; 614  |
                            17819 ; 615  |//!  Tuning Structure
                            17820 ; 616  |typedef struct _STFM1000Tune_
                            17821 ; 617  |{
                            17822 ; 618  |    //! Initial 18 registers copied from default data structure
                            17823 ; 619  |
                            17824 ; 620  |    // shadow images written to on-chip registers
                            17825 ; 621  |    // Shadow reg for TUNE1_REG
                            17826 ; 622  |    DWORD sd_ctl_ShadowTune1_dw;
                            17827 ; 623  |    // Shadow reg for SDNOMINAL_REG
                            17828 ; 624  |    DWORD sd_ctl_ShadowSdnominal_dw;
                            17829 ; 625  |    // Shadow reg for PILOTTRACKING_REG
                            17830 ; 626  |    DWORD sd_ctl_ShadowPilotTracking_dw;
                            17831 ; 627  |    // Shadow reg for INITIALIZATION1_REG
                            17832 ; 628  |    DWORD sd_ctl_ShadowInitialization1_dw;
                            17833 ; 629  |    // Shadow reg for INITIALIZATION2_REG
                            17834 ; 630  |    DWORD sd_ctl_ShadowInitialization2_dw;
                            17835 ; 631  |    // Shadow reg for INITIALIZATION3_REG
                            17836 ; 632  |    DWORD sd_ctl_ShadowInitialization3_dw;
                            17837 ; 633  |    // Shadow reg for INITIALIZATION4_REG
                            17838 ; 634  |    DWORD sd_ctl_ShadowInitialization4_dw;
                            17839 ; 635  |    // Shadow reg for INITIALIZATION5_REG
                            17840 ; 636  |    DWORD sd_ctl_ShadowInitialization5_dw;
                            17841 ; 637  |    // Shadow reg for INITIALIZATION6_REG
                            17842 ; 638  |    DWORD sd_ctl_ShadowInitialization6_dw;
                            17843 ; 639  |    // Shadow reg for ANALOG1_REG
                            17844 ; 640  |    DWORD sd_ctl_ShadowRef_dw;
                            17845 ; 641  |    // Shadow reg for ANALOG2_REG
                            17846 ; 642  |    DWORD sd_ctl_ShadowLna_dw;
                            17847 ; 643  |    // Shadow reg for ANALOG3_REG
                            17848 ; 644  |    DWORD sd_ctl_ShadowMixFilt_dw;
                            17849 ; 645  |    // Shadow reg for ANALOG4_REG
                            17850 ; 646  |    DWORD sd_ctl_ShadowClk1_dw;
                            17851 ; 647  |    // Shadow reg for ANALOG4_REG
                            17852 ; 648  |    DWORD sd_ctl_ShadowClk2_dw;
                            17853 ; 649  |    // Shadow reg for ANALOG5_REG
                            17854 ; 650  |    DWORD sd_ctl_ShadowAdc_dw;
                            17855 ; 651  |    // Shadow reg for AGC_CONTROL1_REG
                            17856 ; 652  |    DWORD sd_ctl_ShadowAgcControl1_dw;
                            17857 ; 653  |    // Shadow reg for AGC_CONTROL2_REG
                            17858 ; 654  |    DWORD sd_ctl_ShadowAgcControl2_dw;
                            17859 ; 655  |    // Shadow reg for DATAPATH_REG
                            17860 ; 656  |    DWORD sd_ctl_ShadowDataPath_dw;
                            17861 ; 657  |
                            17862 ; 658  |    // tuning parameters
                            17863 ; 659  |    // user-set RSSI threshold for good station (SETID_SEARCH_RSSI_THRESH)
                            17864 ; 660  |    WORD sd_ctl_TuneRssiTh_w;
                            17865 ; 661  |    // driver-set Multiplex threshold for good station
                            17866 ; 662  |    WORD sd_ctl_TuneMpxDcTh_w;
                            17867 ; 663  |    // driver-set Adjacent-channel interference threshold for Bypass Filter
                            17868 ; 664  |    // -setting
                            17869 ; 665  |    WORD sd_ctl_AdjChanTh_w;
                            17870 ; 666  |    // driver-set Pilot Level threshold to allow stereo decoding (else force
                            17871 ; 667  |    // -mono)
                            17872 ; 668  |    WORD sd_ctl_PilotEstTh_w;
                            17873 ; 669  |
                            17874 ; 670  |    // parameters for monitoring AGC
                            17875 ; 671  |    // driver-set switch to prevent AGC loop from running while DRI active
                            17876 ; 672  |    WORD sd_ctl_AgcMonitorDisabled;
                            17877 ; 673  |    // Approximate number of milliseconds between AGC monitor cycles
                            17878 ; 674  |    WORD sd_ctl_agc_msec_per_cycle;
                            17879 ; 675  |    // Current state of AGC on chip set by monitor routine
                            17880 ; 676  |    BOOL sd_ctl_LnaDriving_u1;
                            17881 ; 677  |    // driver-set AGC monitor threshold of LNA RMS-output to turn off LNA
                            17882 ; 678  |    WORD sd_ctl_pCoefLnaTurnOffTh_w;
                            17883 ; 679  |    // driver-set AGC monitor threshold of LNA RMS-output to turn on LNA
                            17884 ; 680  |    WORD sd_ctl_pCoefLnaTurnOnTh_w;
                            17885 ; 681  |    // Put this in AGC_CONTROL1_REG_ADDR:B2_AGCREF_REG_MASK when turn off LNA
                            17886 ; 682  |    WORD sd_ctl_pRegAgcRefLnaOff_w;
                            17887 ; 683  |    // Put this in AGC_CONTROL1_REG_ADDR:B2_AGCREF_REG_MASK when turn on LNA
                            17888 ; 684  |    WORD sd_ctl_pRegAgcRefLnaOn_w;
                            17889 ; 685  |
                            17890 ; 686  |    // tuning data being maintained
                            17891 ; 687  |    // IF offset to tuning table (in 100 kHz units)
                            17892 ; 688  |    INT  sd_ctl_IfFreq_i;
                            17893 ; 689  |    // Freq which Analog Front End should be tuned to
                            17894 ; 690  |    WORD sd_ctl_FeFreq_w;
                            17895 ; 691  |    // calculated tuning data to be sent to SD
                            17896 ; 692  |    DWORD sd_ctl_Tune1Data_dw;
                            17897 ; 693  |    // sdnominal data to be sent to SD
                            17898 ; 694  |    DWORD sd_ctl_SdnominalData_dw;
                            17899 ; 695  |
                            17900 ; 696  |    // data read from on-chip registers
                            17901 ; 697  |    WORD sd_ctl_ShadowRssiDcEst_w; // current RSSI reading
                            17902 ; 698  |    WORD sd_ctl_ShadowRssiDcEstLog_w; // above value converted to log 
                            17903 ; 699  |    WORD sd_ctl_ShadowToneData_w;  // current Multiplex reading
                            17904 ; 700  |    // Added - francis: To accomodate SD_SetChannelFilter sequence
                            17905 ; 701  |    WORD sd_ctl_ShadowSignalQuality_w; // cur Signal Quality reg reading
                            17906 ; 702  |    // Pilot Present flag
                            17907 ; 703  |    BOOL sd_ctl_PilotPresent_b;
                            17908 ; 704  |    BOOL bPrevPilotPresent;
                            17909 ; 705  |    DWORD STFM1000_Version;
                            17910 ; 706  | 
                            17911 ; 707  |}STFM1000Tune_t;
                            17912 ; 708  |
                            17913 ; 709  |/* Check if build environment already defined following */
                            17914 ; 710  |#ifndef TUNE_RSSI_THRESH
                            17915 ; 711  |#define TUNE_RSSI_THRESH        (20)    // First Guess from Hardware Team
                            17916 ; 712  |#endif
                            17917 ; 713  |
                            17918 ; 714  |#ifndef TUNE_MPX_DC_THRESH
                            17919 ; 715  |#define TUNE_MPX_DC_THRESH      (300)   // First Guess from Hardware Team
                            17920 ; 716  |#endif
                            17921 ; 717  |
                            17922 ; 718  |#ifndef ADJACENT_CHAN_THRESH
                            17923 ; 719  |#define ADJACENT_CHAN_THRESH    (100)   // First Guess from Hardware Team
                            17924 ; 720  |#endif
                            17925 ; 721  |
                            17926 ; 722  |#ifndef PILOT_EST_THRESH
                            17927 ; 723  |#define PILOT_EST_THRESH        (17)    // TBD from SD hardware folks
                            17928 ; 724  |#endif
                            17929 ; 725  |
                            17930 ; 726  |// AGC control initial values
                            17931 ; 727  |
                            17932 ; 728  |#ifndef AGC_MSEC_PER_CYCLE
                            17933 ; 729  |#define AGC_MSEC_PER_CYCLE 20
                            17934 ; 730  |#endif
                            17935 ; 731  |
                            17936 ; 732  |#ifndef LNA_TURN_OFF_THRESH
                            17937 ; 733  |#define LNA_TURN_OFF_THRESH 8
                            17938 ; 734  |#endif
                            17939 ; 735  |
                            17940 ; 736  |#ifndef LNA_TURN_ON_THRESH
                            17941 ; 737  |#define LNA_TURN_ON_THRESH 15
                            17942 ; 738  |#endif
                            17943 ; 739  |
                            17944 ; 740  |#ifndef LNA_TURN_OFF_REG_REF
                            17945 ; 741  |#define LNA_TURN_OFF_REG_REF 27
                            17946 ; 742  |#endif
                            17947 ; 743  |
                            17948 ; 744  |#ifndef LNA_TURN_ON_REG_REF
                            17949 ; 745  |#define LNA_TURN_ON_REG_REF 8
                            17950 ; 746  |#endif
                            17951 ; 747  |
                            17952 ; 748  |#ifndef LNA_AMP1_IMPROVE_DISTORTION
                            17953 ; 749  |#define LNA_AMP1_IMPROVE_DISTORTION         0x00800000
                            17954 ; 750  |#endif 
                            17955 ; 751  |
                            17956 ; 752  |// convert between display values and register values
                            17957 ; 753  |
                            17958 ; 754  |#define RSSI_DISPLAY_TO_REG(displayval) ((60*displayval)/100)
                            17959 ; 755  |#define RSSI_REG_TO_DISPLAY(regval) ((100*regval)/60)
                            17960 ; 756  |
                            17961 ; 757  |
                            17962 ; 758  |#define FREQUENCY_100KHZ_MIN   758
                            17963 ; 759  |#define FREQUENCY_100KHZ_RANGE 325
                            17964 ; 760  |
                            17965 ; 761  |
                            17966 ; 762  |
                            17967 ; 763  |
                            17968 ; 764  |////////////////////////////////////////////////////////////////////////////////
                            17969 ; 765  |//! I2C Interface Section
                            17970 ; 766  |////////////////////////////////////////////////////////////////////////////////
                            17971 ; 767  |
                            17972 ; 768  |//! I2C Interface buffer
                            17973 ; 769  |
                            17974 ; 770  |#define STFM1000_I2C_ADDR 0xC0
                            17975 ; 771  |
                            17976 ; 772  |#define MAX_REGISTERS_I2C 1
                            17977 ; 773  |#define MAX_I2C_WRITE_TRIES 6
                            17978 ; 774  |#define MAX_I2C_READ_TRIES  6
                            17979 ; 775  |
                            17980 ; 776  |/**************************************************** 
                            17981 ; 777  | * I2C data and clock pin
                            17982 ; 778  | * GPIO-16: I2C_SCL
                            17983 ; 779  | * GPIO-17: I2C_SDA
                            17984 ; 780  | ****************************************************/
                            17985 ; 781  |#define HW_I2C_CLOCK_ENR    HW_GP0ENR.B.B16    //  0 - Assigned function, 1 - GPIO pin
                            17986 ; 782  |#define HW_I2C_CLOCK_PWR    HW_GP0PWR.B.B16    //  0 - Power down,        1 - Power on
                            17987 ; 783  |#define HW_I2C_CLOCK_DOER   HW_GP0DOER.B.B16   //  0 - Input,             1 - Output
                            17988 ; 784  |#define HW_I2C_CLOCK_DIR    HW_GP0DIR.B.B16    //  Input data pin if configured as input
                            17989 ; 785  |#define HW_I2C_CLOCK_DOR    HW_GP0DOR.B.B16    //  Output dtat pint if configured as output
                            17990 ; 786  |#define HW_I2C_DATA_ENR     HW_GP0ENR.B.B17
                            17991 ; 787  |#define HW_I2C_DATA_PWR     HW_GP0PWR.B.B17
                            17992 ; 788  |#define HW_I2C_DATA_DOER    HW_GP0DOER.B.B17
                            17993 ; 789  |#define HW_I2C_DATA_DIR     HW_GP0DIR.B.B17
                            17994 ; 790  |#define HW_I2C_DATA_DOR     HW_GP0DOR.B.B17
                            17995 ; 791  |
                            17996 ; 792  |#if 0
                            17997 ; 793  |// speed in MHz * 10 /4 - 3 for 50Khz I2C clock
                            17998 ; 794  |#define I2C_IDLE_SPEED      102/4 -3 
                            17999 ; 795  |#define I2C_FM_SPEED        240/4 -3 
                            18000 ; 796  |#define I2C_FM_EQ_SPEED     300/4 -3 
                            18001 ; 797  |#define I2C_MP3_SPEED       360/4 -3 
                            18002 ; 798  |#define I2C_ADPCM_SPEED     360/4 -3
                            18003 ; 799  |#define I2C_MIXER_SPEED IDLE_SPEED  
                            18004 ; 800  |#define I2C_ADCBASE_SPEED   360/4 -3 
                            18005 ; 801  |#define I2C_MAX_SPEED       480/4 -3 
                            18006 ; 802  |#define I2C_WMA_SPEED       600/4 -3  
                            18007 ; 803  |#define I2C_MP3ENCODE_SPEED 636/4 -3  
                            18008 ; 804  |#define I2C_PEAK_SPEED      756/4 -3 
                            18009 ; 805  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18010 ; 806  |
                            18011 ; 807  |// compute FACT = ((DCLK/I2CCLOCK) - 22)/8 for 20Khz I2C clock
                            18012 ; 808  |#define I2C_IDLE_SPEED      (INT)((102*5 -22)/8) 
                            18013 ; 809  |//#define I2C_FM_SPEED        (INT)((180*5 -22)/8) 
                            18014 ; 810  |#define I2C_FM_SPEED        (INT)((240*5 -22)/8)    // stmp10415
                            18015 ; 811  |#define I2C_FM_EQ_SPEED        (INT)((300*5 -22)/8)   
                            18016 ; 812  |#define I2C_MP3_SPEED       (INT)((360*5 -22)/8) 
                            18017 ; 813  |#define I2C_ADPCM_SPEED     (INT)((360*5 -22)/8)
                            18018 ; 814  |#define I2C_MIXER_SPEED     IDLE_SPEED  
                            18019 ; 815  |#define I2C_ADCBASE_SPEED   (INT)((360*5 -22)/8) 
                            18020 ; 816  |#define I2C_MAX_SPEED       (INT)((480*5 -22)/8) 
                            18021 ; 817  |#define I2C_WMA_SPEED       (INT)((600*5 -22)/8)  
                            18022 ; 818  |#define I2C_MP3ENCODE_SPEED (INT)((636*5 -22)/8)  
                            18023 ; 819  |#define I2C_PEAK_SPEED      (INT)((756*5 -22)/8)  
                            18024 ; 820  |
                            18025 ; 821  | 
                            18026 ; 822  |#define I2C_USBMSC_SPEED    686/4 - 3           // For USBMSC: fDCLK is fixed at 68.57 Mhz
                            18027 ; 823  |
                            18028 ; 824  |
                            18029 ; 825  |
                            18030 ; 826  |#define PWR_ON_HW_I2CCSR_STATE 0x200000
                            18031 ; 827  |#define RESET_HW_I2CCSR_STATE  0x010000 //0x008000 @ power on, or 0x010000 otherwise
                            18032 ; 828  |#define RESET_HW_I2CCSR_MASK   0xFE7FFF
                            18033 ; 829  |
                            18034 ; 830  |
                            18035 ; 831  |/****************************************************
                            18036 ; 832  | * I2C
                            18037 ; 833  | ****************************************************/
                            18038 ; 834  |////////////////////////////////////////////////////////////////////////////////
                            18039 ; 835  |//  Macros
                            18040 ; 836  |////////////////////////////////////////////////////////////////////////////////
                            18041 ; 837  |#define TIMEOUT_COUNT  8192
                            18042 ; 838  |#define TIMEOUT_ERROR  -1
                            18043 ; 839  |#define ACKF_ERROR     -2 
                            18044 ; 840  |#define READMODE        1    
                            18045 ; 841  |#define WRITEMODE       0 
                            18046 ; 842  |#define ONE_BYTE        0   // WL values 8 bit
                            18047 ; 843  |#define TWO_BYTES       2   // WL values 16 bit
                            18048 ; 844  |#define THREE_BYTES     1   // WL values 24 bit
                            18049 ; 845  |////////////////////////////////////////////////////////////////////////////////
                            18050 ; 846  |//  Data type Definitions
                            18051 ; 847  |////////////////////////////////////////////////////////////////////////////////
                            18052 ; 848  |typedef union               /* I2C Data Register */
                            18053 ; 849  |{
                            18054 ; 850  |    struct {
                            18055 ; 851  |        unsigned int BYTE2 :8;  // LSB
                            18056 ; 852  |        unsigned int BYTE1 :8;
                            18057 ; 853  |        unsigned int BYTE0 :8;  // MSB 
                            18058 ; 854  |    } B;
                            18059 ; 855  |     
                            18060 ; 856  |    int I;
                            18061 ; 857  |    unsigned U;
                            18062 ; 858  |} i2cdata_type;
                            18063 ; 859  |
                            18064 ; 860  |typedef union                
                            18065 ; 861  |{
                            18066 ; 862  |    DWORD D;
                            18067 ; 863  |    struct {
                            18068 ; 864  |        unsigned int W1;    // LSB
                            18069 ; 865  |        unsigned int W0;    // MSB 
                            18070 ; 866  |    } U;
                            18071 ; 867  | } DWORD_type;
                            18072 ; 868  | 
                            18073 ; 869  |////////////////////////////////////////////////////////////////////////////////
                            18074 ; 870  |//  Prototypes
                            18075 ; 871  |////////////////////////////////////////////////////////////////////////////////
                            18076 ; 872  |_reentrant INT STFM1000I2CInit(WORD mode, WORD ClockDiv);
                            18077 ; 873  |_reentrant INT STFM1000I2CWriteRegister(WORD I2C_Sub_Addr, DWORD DataOut);
                            18078 ; 874  |_reentrant INT STFM1000I2CReadRegister(WORD I2C_Sub_Addr, DWORD DataOut,DWORD * DataIn);
                            18079 ; 875  |_reentrant void STFM1000I2CClose(void);
                            18080 ; 876  |_reentrant INT  STFM1000SetLnaBias(INT iRssiLog);
                            18081 ; 877  |
                            18082 ; 878  |//! Tuning Function Prototypes
                            18083 ; 879  |//!
                            18084 ; 880  |
                            18085 ; 881  |_reentrant void STFM1000Reset(void);
                            18086 ; 882  |
                            18087 ; 883  |_reentrant void STFM1000RegValsReset(void);
                            18088 ; 884  |
                            18089 ; 885  |_reentrant INT STFM1000RegsPowerUp1(void);
                            18090 ; 886  |_reentrant INT STFM1000RegsPowerUp2(void);
                            18091 ; 887  |
                            18092 ; 888  |_reentrant INT STFM1000RegsPowerDown(void);
                            18093 ; 889  |
                            18094 ; 890  |///////////////////////////////////////////////////////////////////////////////
                            18095 ; 891  |// Prototypes
                            18096 ; 892  |////////////////////////////////////////////////////////////////////////////////
                            18097 ; 893  |_reentrant INT STFM1000QuickTune(WORD wTuneFreqIn);
                            18098 ; 894  |
                            18099 ; 895  |
                            18100 ; 896  |// * Optimize Channel on chip  (tspec_v09x.pdf::SD_Optimize_Channel)
                            18101 ; 897  |_reentrant INT STFM1000OptimizeChannel(void);
                            18102 ; 898  |
                            18103 ; 899  |// OptmizeChannel() calls the following 3 procedures:
                            18104 ; 900  |
                            18105 ; 901  |// * Set Channel Filter on chip  (tspec_v09x.pdf::SD_SetChannelFilter)
                            18106 ; 902  |_reentrant INT STFM1000SetChannelFilter(void);
                            18107 ; 903  |
                            18108 ; 904  |_reentrant INT STFM1000TunerMonitorQuality(void);
                            18109 ; 905  |
                            18110 ; 906  |// * Look for Pilot Tone on chip  (tspec_v09x.pdf::SD_LookForPilot)
                            18111 ; 907  |_reentrant INT STFM1000LookForPilot(BOOL * bPilotPresent);
                            18112 ; 908  |
                            18113 ; 909  |// * OPptimizeChannel on chip  (tspec_v09x.pdf::SD_GearShiftPilotTracking)
                            18114 ; 910  |_reentrant INT STFM1000GearShiftPilotTracking(void);
                            18115 ; 911  |
                            18116 ; 912  |_reentrant INT STFM1000TunerSafeStandbyMode(void);
                            18117 ; 913  |
                            18118 ; 914  |_reentrant void TunerTuningInit(void);
                            18119 ; 915  |
                            18120 ; 916  |//! Tuner Specific Function Prototypes
                            18121 ; 917  |//
                            18122 ; 918  |// Note:  Any of these primitives can block for a significant period of time.
                            18123 ; 919  |// In that case, the primitive must spend its sleeping time waiting on the
                            18124 ; 920  |// main message queue for an Abort message, which will cause it immediately
                            18125 ; 921  |// to return a status of ERROR_DDI_TUNER_UNBLOCKED_BY_ABORT
                            18126 ; 922  |
                            18127 ; 923  |_inline    INT STFM1000TunerInit(void); //_inline
                            18128 ; 924  |
                            18129 ; 925  |_reentrant INT STFM1000TunerUninit(void);
                            18130 ; 926  |
                            18131 ; 927  |_reentrant INT STFM1000TunerPowerUp(void);
                            18132 ; 928  |
                            18133 ; 929  |_reentrant INT STFM1000TunerPowerDown(void);
                            18134 ; 930  |
                            18135 ; 931  |_reentrant INT STFM1000TunerUnlockStation(void);
                            18136 ; 932  |
                            18137 ; 933  |_reentrant INT STFM1000TunerQuicksetStation(WORD wNewFrequency);
                            18138 ; 934  |
                            18139 ; 935  |_reentrant INT STFM1000TunerLockStation(void);
                            18140 ; 936  |
                            18141 ; 937  |_reentrant INT STFM1000TunerQueryIsStation(BOOL * pIsStation);
                            18142 ; 938  |_reentrant INT STFM1000TunerMonitorQualityStateStart(void);
                            18143 ; 939  |_reentrant INT STFM1000TunerMonitorQualityStateFinal(void);
                            18144 ; 940  |_reentrant INT STFM1000OptimizeChannelStart(void);
                            18145 ; 941  |_reentrant INT STFM1000OptimizeChannelEnd(void);
                            18146 ; 942  |_inline    INT STFM1000SetNearChannelOffset(WORD wOffsetCode);      //_inline
                            18147 ; 943  |_inline    INT STFM1000GetNearChannelOffset(void);                  //_inline
                            18148 ; 944  |_inline    INT STFM1000SetNearChannelFilter(WORD wBypassSetting);   //_inline
                            18149 ; 945  |_inline    INT STFM1000GearShiftPtGear(DWORD dwBits);               //_inline
                            18150 ; 946  |
                            18151 ; 947  |/* Private functions */
                            18152 ; 948  |
                            18153 ; 949  |_inline    INT STFM1000DriOff(void);
                            18154 ; 950  |_inline    INT STFM1000DriOn(void);                                 //_inline
                            18155 ; 951  |_reentrant INT STFM1000DataPathOff(void);
                            18156 ; 952  |_reentrant INT STFM1000DataPathOn(void);
                            18157 ; 953  |_reentrant INT STFM1000TakeDown(void);
                            18158 ; 954  |_reentrant INT STFM1000BringUp(void);
                            18159 ; 955  |_reentrant INT STFM1000TunerLowPowerMode(void);
                            18160 ; 956  |   
                            18161 ; 957  |//! I2C Interface Function Prototypes
                            18162 ; 958  |
                            18163 ; 959  |_reentrant INT STFM1000WriteRegister(WORD wAddr, DWORD dwMask,
                            18164 ; 960  |    DWORD *pShadow, DWORD dwData);
                            18165 ; 961  |
                            18166 ; 962  |_reentrant INT STFM1000ReadRegisterToShadow(WORD wAddr, DWORD *pShadow);
                            18167 ; 963  |
                            18168 ; 964  |_reentrant void STFM1000ReadShadowRegister(DWORD dwMask, DWORD *pShadow,
                            18169 ; 965  |    DWORD *pData);
                            18170 ; 966  |
                            18171 ; 967  |_reentrant INT STFM1000ReadSubRegister(WORD wAddr, DWORD dwMask,
                            18172 ; 968  |    DWORD *pData);
                            18173 ; 969  |
                            18174 ; 970  |_reentrant void STFM1000delay_ms(WORD wDelay);            
                            18175 ; 971  |
                            18176 ; 972  |_reentrant INT STFM1000ContinueScanning( void );
                            18177 ; 973  |_reentrant INT STFM1000ContinueSearching( void );
                            18178 ; 974  |_reentrant INT STFM1000TunerSearchEnded( WORD wSearchFrequency );
                            18179 ; 975  |_reentrant INT STFM1000NextSearchFrequency( void );
                            18180 ; 976  |_reentrant INT STFM1000EndAutoScanning( void );
                            18181 ; 977  |_reentrant void STFM1000WriteDataReAlignment(DWORD* pdwNewData);
                            18182 ; 978  |_reentrant void STFM1000ReadDataReAlignment(DWORD* pdwNewData);
                            18183 ; 979  |_reentrant INT STFM1000TuningSearchingScanning(void);
                            18184 ; 980  |_reentrant INT STFM1000FindRSSIThresHold(void);
                            18185 ; 981  |_reentrant int STFM1000TestPresence(void); // i2c write error detects non presense of stfm1000
                            18186 ; 982  |_reentrant INT I2CWriteTunerRegister(WORD I2C_Sub_Addr, DWORD DataOut);
                            18187 ; 983  |_reentrant I2CReset(WORD mode, WORD ClockDiv);
                            18188 ; 984  |
                            18189 ; 985  |
                            18190 ; 986  |#define UCHAR unsigned char
                            18191 ; 987  |typedef union                // Required since casting between int and _fract does not work as expected
                            18192 ; 988  |{
                            18193 ; 989  |    long _fract FF;
                            18194 ; 990  |    DWORD D;
                            18195 ; 991  |    _fract F;
                            18196 ; 992  |    unsigned int I;
                            18197 ; 993  |}Fract_type;
                            18198 ; 994  |
                            18199 ; 995  |#define NOT_SEARCHING       0
                            18200 ; 996  |#define SEARCHING_UP        1
                            18201 ; 997  |#define SEARCHING_DOWN     -1
                            18202 ; 998  |
                            18203 ; 999  |#ifdef SD_USE_200KHZ_TUNING_GRID
                            18204 ; 1000 |#define FM_FREQ_STEP    200
                            18205 ; 1001 |#else
                            18206 ; 1002 |#define FM_FREQ_STEP    100
                            18207 ; 1003 |#endif
                            18208 ; 1004 |
                            18209 ; 1005 |#define RSSI_THRESHOLD_OFFSET   7
                            18210 ; 1006 |/* FM TUNER Constants that can be overruled by project.inc */
                            18211 ; 1007 |
                            18212 ; 1008 |
                            18213 ; 1009 |#if !defined(NUMBER_OF_PRESETS)
                            18214 ; 1010 |#define NUMBER_OF_PRESETS       10
                            18215 ; 1011 |#endif
                            18216 ; 1012 |
                            18217 ; 1013 |#if 0
                            18218 ; 1014 |#if !defined(FM_BAND_LIMIT_HIGH_FREQ)
                            18219 ; 1015 | #ifdef FM_JAPAN_REGION
                            18220 ; 1016 |  #ifdef SD_USE_200KHZ_TUNING_GRID 
                            18221 ; 1017 |  // stmp10809 solved by changing this from 89000 to 89900 (correct japan high freq limit)
                            18222 ; 1018 |  #define       FM_BAND_LIMIT_HIGH_FREQ 89900
                            18223 ; 1019 |  #else
                            18224 ; 1020 |  #define       FM_BAND_LIMIT_HIGH_FREQ 90000 
                            18225 ; 1021 |  #endif
                            18226 ; 1022 | #else // non japan fm band
                            18227 ; 1023 |  #ifdef SD_USE_200KHZ_TUNING_GRID 
                            18228 ; 1024 |  #define       FM_BAND_LIMIT_HIGH_FREQ 107900
                            18229 ; 1025 |  #else
                            18230 ; 1026 |  #define       FM_BAND_LIMIT_HIGH_FREQ 108000 
                            18231 ; 1027 |  #endif
                            18232 ; 1028 | #endif // non japan fm band 
                            18233 ; 1029 |#endif // FM band limit high freq
                            18234 ; 1030 |
                            18235 ; 1031 |#if !defined(FM_BAND_LIMIT_LOW_FREQ)
                            18236 ; 1032 |#ifdef FM_JAPAN_REGION
                            18237 ; 1033 |#define FM_BAND_LIMIT_LOW_FREQ  76000
                            18238 ; 1034 |#else
                            18239 ; 1035 |#define FM_BAND_LIMIT_LOW_FREQ  87500
                            18240 ; 1036 |#endif
                            18241 ; 1037 |#endif
                            18242 ; 1038 |#endif
                            18243 ; 1039 |
                            18244 ; 1040 |#if !defined(FM_BAND_LIMIT_HIGH_FREQ)
                            18245 ; 1041 |    #ifdef  FM_USA_REGION               //USA
                            18246 ; 1042 |                #define FM_BAND_LIMIT_HIGH_FREQ    107900 
                            18247 ; 1043 |                #define FM_BAND_LIMIT_LOW_FREQ     87500
                            18248 ; 1044 |    #else             //  !(USA)
                            18249 ; 1045 |        #ifdef  FM_EUROPE_REGION      //Europe and China
                            18250 ; 1046 |                #define FM_BAND_LIMIT_HIGH_FREQ    108000 
                            18251 ; 1047 |                #define FM_BAND_LIMIT_LOW_FREQ      87500
                            18252 ; 1048 |        #else         //  !(EUROPE)
                            18253 ; 1049 |            #ifdef FM_JAPAN_REGION    //Japan
                            18254 ; 1050 |                #define FM_BAND_LIMIT_HIGH_FREQ     90000
                            18255 ; 1051 |                #define FM_BAND_LIMIT_LOW_FREQ      76000
                            18256 ; 1052 |            #endif   // end (JAPAN)
                            18257 ; 1053 |        #endif      // end (EUROPE)
                            18258 ; 1054 |    #endif          // end (USA)
                            18259 ; 1055 |#endif
                            18260 ; 1056 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18261 ; 1057 |#if !defined(FM_TUNER_GRID)
                            18262 ; 1058 |#ifdef SD_USE_200KHZ_TUNING_GRID
                            18263 ; 1059 |#define FM_TUNER_GRID   200
                            18264 ; 1060 |#else
                            18265 ; 1061 |#define FM_TUNER_GRID   100
                            18266 ; 1062 |#endif
                            18267 ; 1063 |#endif
                            18268 ; 1064 |
                            18269 ; 1065 |#define FM_SEARCH_HIGH_LIMIT (FM_BAND_LIMIT_HIGH_FREQ+FM_FREQ_STEP)
                            18270 ; 1066 |#define FM_SEARCH_LOW_LIMIT (FM_BAND_LIMIT_LOW_FREQ-FM_FREQ_STEP)
                            18271 ; 1067 |#define STFM1000_TA2A_CHIP
                            18272 ; 1068 |#define STFM1000_POWER_REDUCTION_VERSION
                            18273 ; 1069 |
                            18274 ; 1070 |/* Set up the preset stations */  
                            18275 ; 1071 |typedef struct PresetStation
                            18276 ; 1072 |{
                            18277 ; 1073 |        WORD Frequency;
                            18278 ; 1074 |        INT      Level;
                            18279 ; 1075 |} FMTunerPreset;
                            18280 ; 1076 |
                            18281 ; 1077 |typedef struct TunerSearchStatus
                            18282 ; 1078 |{
                            18283 ; 1079 |        WORD Frequency;
                            18284 ; 1080 |        INT      Level;
                            18285 ; 1081 |    INT  MpxAdc;
                            18286 ; 1082 |} FMTunerSearchStatus;
                            18287 ; 1083 |
                            18288 ; 1084 |typedef enum
                            18289 ; 1085 |{
                            18290 ; 1086 |    MONITOR_SIGNAL_QUALITY_STATE_START = 0,
                            18291 ; 1087 |    MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_1, 
                            18292 ; 1088 |    MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_2, 
                            18293 ; 1089 |    MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_3,    
                            18294 ; 1090 |    MONITOR_SIGNAL_QUALITY_STATE_COMPLETE
                            18295 ; 1091 |}eMonitorSignalQualityState;
                            18296 ; 1092 |
                            18297 ; 1093 |typedef enum
                            18298 ; 1094 |{
                            18299 ; 1095 |    OPTIMIZE_CHANNEL_STATE_START = 0,
                            18300 ; 1096 |    OPTIMIZE_CHANNEL_STATE_PROCESSING_1, 
                            18301 ; 1097 |    OPTIMIZE_CHANNEL_STATE_PROCESSING_2, 
                            18302 ; 1098 |    OPTIMIZE_CHANNEL_STATE_PROCESSING_3,
                            18303 ; 1099 |    OPTIMIZE_CHANNEL_STATE_COMPLETE      
                            18304 ; 1100 |}eOptimizeChannelState;
                            18305 ; 1101 |
                            18306 ; 1102 |typedef struct _STFM1000GearShiftPilotTrackingTable
                            18307 ; 1103 |{
                            18308 ; 1104 |    DWORD dw_msec_delay;
                            18309 ; 1105 |    DWORD dw_bits;
                            18310 ; 1106 |} STFM1000GearShiftPilotTrackingTable_t;
                            18311 ; 1107 |
                            18312 ; 1108 |#endif //_STFM_1000_H
                            18313 
                            18315 
                            18316 ; 18   |#include "hwequ.h"
                            18317 
                            18319 
                            18320 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            18321 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                            18322 ; 3    |//  File        : hwequ.inc
                            18323 ; 4    |//  Description : STMP Hardware Constants
                            18324 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            18325 ; 6    |
                            18326 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                            18327 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                            18328 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                            18329 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                            18330 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                            18331 ; 12   |
                            18332 ; 13   |#if (!defined(HWEQU_INC))
                            18333 ; 14   |#define HWEQU_INC 1
                            18334 ; 15   |
                            18335 ; 16   |#include "types.h"
                            18336 ; 17   |#include "regsclkctrl.h"
                            18337 ; 18   |#include "regscore.h"
                            18338 ; 19   |#include "regscodec.h"
                            18339 ; 20   |#include "regsdcdc.h"
                            18340 ; 21   |#include "regsemc.h"
                            18341 ; 22   |#include "regsgpio.h"
                            18342 ; 23   |#include "regsi2c.h"
                            18343 ; 24   |#include "regsi2s.h"
                            18344 ; 25   |#include "regsicoll.h"
                            18345 ; 26   |#include "regslradc.h"
                            18346 ; 27   |#include "regspwm.h"
                            18347 ; 28   |#include "regsrevision.h"
                            18348 ; 29   |#include "regsrtc.h"
                            18349 ; 30   |#include "regsspare.h"
                            18350 ; 31   |#include "regsspi.h"
                            18351 ; 32   |#include "regsswizzle.h"
                            18352 ; 33   |#include "regssdram.h"
                            18353 ; 34   |#include "regstb.h"
                            18354 ; 35   |#include "regstimer.h"
                            18355 ; 36   |#include "regsusb20.h"
                            18356 ; 37   |#include "regsusb20phy.h"
                            18357 ; 38   |
                            18358 ; 39   |
                            18359 ; 40   |#endif // if (!@def(hwequ))
                            18360 ; 41   |
                            18361 
                            18363 
                            18364 ; 19   |#include "misc.h"
                            18365 
                            18367 
                            18368 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            18369 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                            18370 ; 3    |//
                            18371 ; 4    |// Filename: misc.h
                            18372 ; 5    |// Description: 
                            18373 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            18374 ; 7    |
                            18375 ; 8    |#ifndef _MISC_H
                            18376 ; 9    |#define _MISC_H
                            18377 ; 10   |
                            18378 ; 11   |////////////////////////////////////////////////////////////////////////////////
                            18379 ; 12   |// Defs
                            18380 ; 13   |////////////////////////////////////////////////////////////////////////////////
                            18381 ; 14   |
                            18382 ; 15   |////////////////////////////////////////////////////////////////////////////////
                            18383 ; 16   |// Error codes
                            18384 ; 17   |////////////////////////////////////////////////////////////////////////////////
                            18385 ; 18   |
                            18386 ; 19   |////////////////////////////////////////////////////////////////////////////////
                            18387 ; 20   |// Typedefs
                            18388 ; 21   |////////////////////////////////////////////////////////////////////////////////
                            18389 ; 22   |
                            18390 ; 23   |////////////////////////////////////////////////////////////////////////////////
                            18391 ; 24   |// Prototypes
                            18392 ; 25   |////////////////////////////////////////////////////////////////////////////////
                            18393 ; 26   |
                            18394 ; 27   |RETCODE PowerInit(void);
                            18395 ; 28   |RETCODE PllInit(void);
                            18396 ; 29   |RETCODE _reentrant SystemShutdown(void);
                            18397 ; 30   |RETCODE _reentrant SysGpioDisableAll(void);
                            18398 ; 31   |RETCODE _reentrant SysPadPowerDownAll(void);
                            18399 ; 32   |RETCODE _reentrant SysPllShutdown(void);
                            18400 ; 33   |RETCODE GoToSleep(void);
                            18401 ; 34   |void _reentrant SysDelayMs(WORD wDelay);
                            18402 ; 35   |DWORD GetDclkCount(void);
                            18403 ; 36   |#ifdef USE_PLAYLIST2
                            18404 ; 37   |DWORD GetDclkCount_PL2(void);
                            18405 ; 38   |#endif
                            18406 ; 39   |void SetDclkCount(DWORD dwCount);
                            18407 ; 40   |RETCODE SmartMediaSetPortTiming(WORD wTiming);
                            18408 ; 41   |RETCODE ProgramPll(INT iSpeed);
                            18409 ; 42   |void _reentrant SystemReset(void);
                            18410 ; 43   |void _reentrant SystemPowerOff(void);
                            18411 ; 44   |void _reentrant ReconfigureAsDcc(void);
                            18412 ; 45   |void _reentrant PowerDownFMTuners(void);
                            18413 ; 46   |#ifdef TUNER_5767
                            18414 ; 47   |void _reentrant  Philips5767_3WireWriteByte(INT data);
                            18415 ; 48   |void _reentrant Philips5767_3WireClockDelay(void);
                            18416 ; 49   |#endif
                            18417 ; 50   |extern BOOL g_bPowerOff;
                            18418 ; 51   |
                            18419 ; 52   |#ifndef DISABLE_USB_CURRENT_REQUIREMENT_FOR_MMC_DRIVER
                            18420 ; 53   |extern int g_iHighPwrPeriphInitMode; // def in usbmscmisc.c
                            18421 ; 54   | #define STRUCTURE_INIT_ONLY                            2
                            18422 ; 55   | #define USB_HIGH_CURRENT_GRANTED                       3
                            18423 ; 56   |#endif
                            18424 ; 57   |
                            18425 ; 58   |#endif // #ifndef _MISC_H
                            18426 
                            18428 
                            18429 ; 20   |#include "regsgpio.h"
                            18430 
                            18432 
                            18433 ; 1    |#if !(defined(__REGS_GPIO_INC))
                            18434 ; 2    |#define __REGS_GPIO_INC 1
                            18435 ; 3    |
                            18436 ; 4    |#include "types.h"
                            18437 ; 5    |
                            18438 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                            18439 ; 7    |//  Interrupt Collector Registers
                            18440 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                            18441 ; 9    |
                            18442 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                            18443 ; 11   |
                            18444 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                            18445 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                            18446 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                            18447 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                            18448 ; 16   |
                            18449 ; 17   |#define HW_GPB0_BLOCKNUM 0
                            18450 ; 18   |#define HW_GPB1_BLOCKNUM 1
                            18451 ; 19   |#define HW_GPB2_BLOCKNUM 2
                            18452 ; 20   |#define HW_GPB3_BLOCKNUM 3
                            18453 ; 21   |
                            18454 ; 22   |#define HW_GPB_GPENR 0
                            18455 ; 23   |#define HW_GPB_GPDOR 1
                            18456 ; 24   |#define HW_GPB_GPDIR 2
                            18457 ; 25   |#define HW_GPB_GPDOER 3
                            18458 ; 26   |#define HW_GPB_GPIPENR 4
                            18459 ; 27   |#define HW_GPB_GPIENR 5
                            18460 ; 28   |#define HW_GPB_GPILVLR 6
                            18461 ; 29   |#define HW_GPB_GPIPOLR 7
                            18462 ; 30   |#define HW_GPB_GPISTATR 8
                            18463 ; 31   |#define HW_GPB_GPPWR 9
                            18464 ; 32   |#define HW_GPB_GP8MA 10
                            18465 ; 33   |
                            18466 ; 34   |
                            18467 ; 35   |
                            18468 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            18469 ; 37   |//  GPIO Register Bit Positions
                            18470 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                            18471 ; 39   |{
                            18472 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                            18473 ; 41   |    unsigned int I;
                            18474 ; 42   |    unsigned int U;
                            18475 ; 43   |} gpr_type;
                            18476 ; 44   |
                            18477 ; 45   |#define HW_GP_B0_BITPOS 0
                            18478 ; 46   |#define HW_GP_B1_BITPOS 1
                            18479 ; 47   |#define HW_GP_B2_BITPOS 2
                            18480 ; 48   |#define HW_GP_B3_BITPOS 3
                            18481 ; 49   |#define HW_GP_B4_BITPOS 4
                            18482 ; 50   |#define HW_GP_B5_BITPOS 5
                            18483 ; 51   |#define HW_GP_B6_BITPOS 6
                            18484 ; 52   |#define HW_GP_B7_BITPOS 7
                            18485 ; 53   |#define HW_GP_B8_BITPOS 8
                            18486 ; 54   |#define HW_GP_B9_BITPOS 9
                            18487 ; 55   |#define HW_GP_B10_BITPOS 10
                            18488 ; 56   |#define HW_GP_B11_BITPOS 11
                            18489 ; 57   |#define HW_GP_B12_BITPOS 12
                            18490 ; 58   |#define HW_GP_B13_BITPOS 13
                            18491 ; 59   |#define HW_GP_B14_BITPOS 14
                            18492 ; 60   |#define HW_GP_B15_BITPOS 15
                            18493 ; 61   |#define HW_GP_B16_BITPOS 16
                            18494 ; 62   |#define HW_GP_B17_BITPOS 17
                            18495 ; 63   |#define HW_GP_B18_BITPOS 18
                            18496 ; 64   |#define HW_GP_B19_BITPOS 19
                            18497 ; 65   |#define HW_GP_B20_BITPOS 20
                            18498 ; 66   |#define HW_GP_B21_BITPOS 21
                            18499 ; 67   |#define HW_GP_B22_BITPOS 22
                            18500 ; 68   |#define HW_GP_B23_BITPOS 23
                            18501 ; 69   |
                            18502 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                            18503 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                            18504 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                            18505 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                            18506 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                            18507 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                            18508 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                            18509 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                            18510 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                            18511 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                            18512 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                            18513 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                            18514 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                            18515 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                            18516 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                            18517 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18518 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                            18519 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                            18520 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                            18521 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                            18522 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                            18523 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                            18524 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                            18525 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                            18526 ; 94   |
                            18527 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                            18528 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                            18529 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                            18530 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                            18531 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                            18532 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                            18533 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                            18534 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                            18535 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                            18536 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                            18537 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                            18538 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                            18539 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                            18540 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                            18541 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                            18542 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                            18543 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                            18544 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                            18545 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                            18546 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                            18547 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                            18548 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                            18549 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                            18550 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                            18551 ; 119  |
                            18552 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                            18553 ; 121  |//  GPIO 8mA Register Bit Positions
                            18554 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                            18555 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                            18556 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                            18557 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                            18558 ; 126  |
                            18559 ; 127  |
                            18560 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                            18561 ; 129  |//  Logical GPIO numbers
                            18562 ; 130  |#define HW_GPIO_000 0
                            18563 ; 131  |#define HW_GPIO_001 1
                            18564 ; 132  |#define HW_GPIO_002 2
                            18565 ; 133  |#define HW_GPIO_003 3
                            18566 ; 134  |#define HW_GPIO_004 4
                            18567 ; 135  |#define HW_GPIO_005 5
                            18568 ; 136  |#define HW_GPIO_006 6
                            18569 ; 137  |#define HW_GPIO_007 7
                            18570 ; 138  |#define HW_GPIO_008 8
                            18571 ; 139  |#define HW_GPIO_009 9
                            18572 ; 140  |#define HW_GPIO_010 10
                            18573 ; 141  |#define HW_GPIO_011 11
                            18574 ; 142  |#define HW_GPIO_012 12
                            18575 ; 143  |#define HW_GPIO_013 13
                            18576 ; 144  |#define HW_GPIO_014 14
                            18577 ; 145  |#define HW_GPIO_015 15
                            18578 ; 146  |#define HW_GPIO_016 16
                            18579 ; 147  |#define HW_GPIO_017 17
                            18580 ; 148  |#define HW_GPIO_018 18
                            18581 ; 149  |#define HW_GPIO_019 19
                            18582 ; 150  |#define HW_GPIO_020 20
                            18583 ; 151  |#define HW_GPIO_021 21
                            18584 ; 152  |#define HW_GPIO_022 22
                            18585 ; 153  |#define HW_GPIO_023 23
                            18586 ; 154  |#define HW_GPIO_024 24
                            18587 ; 155  |#define HW_GPIO_025 25
                            18588 ; 156  |#define HW_GPIO_026 26
                            18589 ; 157  |#define HW_GPIO_027 27
                            18590 ; 158  |#define HW_GPIO_028 28
                            18591 ; 159  |#define HW_GPIO_029 29
                            18592 ; 160  |#define HW_GPIO_030 30
                            18593 ; 161  |#define HW_GPIO_031 31
                            18594 ; 162  |#define HW_GPIO_032 32
                            18595 ; 163  |#define HW_GPIO_033 33
                            18596 ; 164  |#define HW_GPIO_034 34
                            18597 ; 165  |#define HW_GPIO_035 35
                            18598 ; 166  |#define HW_GPIO_036 36
                            18599 ; 167  |#define HW_GPIO_037 37
                            18600 ; 168  |#define HW_GPIO_038 38
                            18601 ; 169  |#define HW_GPIO_039 39
                            18602 ; 170  |#define HW_GPIO_040 40
                            18603 ; 171  |#define HW_GPIO_041 41
                            18604 ; 172  |#define HW_GPIO_042 42
                            18605 ; 173  |#define HW_GPIO_043 43
                            18606 ; 174  |#define HW_GPIO_044 44
                            18607 ; 175  |#define HW_GPIO_045 45
                            18608 ; 176  |#define HW_GPIO_046 46
                            18609 ; 177  |#define HW_GPIO_047 47
                            18610 ; 178  |#define HW_GPIO_048 48
                            18611 ; 179  |#define HW_GPIO_049 49
                            18612 ; 180  |#define HW_GPIO_050 50
                            18613 ; 181  |#define HW_GPIO_051 51
                            18614 ; 182  |#define HW_GPIO_052 52
                            18615 ; 183  |#define HW_GPIO_053 53
                            18616 ; 184  |#define HW_GPIO_054 54
                            18617 ; 185  |#define HW_GPIO_055 55
                            18618 ; 186  |#define HW_GPIO_056 56
                            18619 ; 187  |#define HW_GPIO_057 57
                            18620 ; 188  |#define HW_GPIO_058 58
                            18621 ; 189  |#define HW_GPIO_059 59
                            18622 ; 190  |#define HW_GPIO_060 60
                            18623 ; 191  |#define HW_GPIO_061 61
                            18624 ; 192  |#define HW_GPIO_062 62
                            18625 ; 193  |#define HW_GPIO_063 63
                            18626 ; 194  |#define HW_GPIO_064 64
                            18627 ; 195  |#define HW_GPIO_065 65
                            18628 ; 196  |#define HW_GPIO_066 66
                            18629 ; 197  |#define HW_GPIO_067 67
                            18630 ; 198  |#define HW_GPIO_068 68
                            18631 ; 199  |#define HW_GPIO_069 69
                            18632 ; 200  |#define HW_GPIO_070 70
                            18633 ; 201  |#define HW_GPIO_071 71
                            18634 ; 202  |#define HW_GPIO_072 72
                            18635 ; 203  |#define HW_GPIO_073 73
                            18636 ; 204  |#define HW_GPIO_074 74
                            18637 ; 205  |#define HW_GPIO_075 75
                            18638 ; 206  |#define HW_GPIO_076 76
                            18639 ; 207  |#define HW_GPIO_077 77
                            18640 ; 208  |#define HW_GPIO_078 78
                            18641 ; 209  |#define HW_GPIO_079 79
                            18642 ; 210  |#define HW_GPIO_080 80
                            18643 ; 211  |#define HW_GPIO_081 81
                            18644 ; 212  |#define HW_GPIO_082 82
                            18645 ; 213  |#define HW_GPIO_083 83
                            18646 ; 214  |#define HW_GPIO_084 84
                            18647 ; 215  |#define HW_GPIO_085 85
                            18648 ; 216  |#define HW_GPIO_086 86
                            18649 ; 217  |#define HW_GPIO_087 87
                            18650 ; 218  |#define HW_GPIO_088 88
                            18651 ; 219  |#define HW_GPIO_089 89
                            18652 ; 220  |#define HW_GPIO_090 90
                            18653 ; 221  |#define HW_GPIO_091 91
                            18654 ; 222  |#define HW_GPIO_092 92
                            18655 ; 223  |#define HW_GPIO_093 93
                            18656 ; 224  |#define HW_GPIO_094 94
                            18657 ; 225  |#define HW_GPIO_095 95
                            18658 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                            18659 ; 227  |
                            18660 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO 0 Enable Register   */
                            18661 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 0 Data Out Register */
                            18662 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 0 Dait In Register  */
                            18663 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO 0 Dait Out Enable Register  */
                            18664 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 0 Interrupt Pin Enable Register */
                            18665 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO 0 Interrupt Enable Register */
                            18666 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 0 Interrupt Level Register  */
                            18667 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 0 Interrupt Polarity Register   */
                            18668 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 0 Interrupt Status Register */
                            18669 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                            18670 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                            18671 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* GPIO 1 Enable Register   */
                            18672 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 1 Data Out Register */
                            18673 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 1 Dait In Register  */
                            18674 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO 1 Dait Out Enable Register  */
                            18675 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 1 Interrupt Pin Enable Register */
                            18676 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO 1 Interrupt Enable Register */
                            18677 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 1 Interrupt Level Register  */
                            18678 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 1 Interrupt Polarity Register   */
                            18679 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 1 Interrupt Status Register */
                            18680 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                            18681 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                            18682 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                            18683 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                            18684 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                            18685 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                            18686 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                            18687 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                            18688 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                            18689 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                            18690 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                            18691 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                            18692 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                            18693 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                            18694 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                            18695 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                            18696 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                            18697 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                            18698 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                            18699 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                            18700 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                            18701 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                            18702 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                            18703 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                            18704 ; 272  |
                            18705 ; 273  |#endif
                            18706 ; 274  |
                            18707 
                            18709 
                            18710 ; 21   |#include "display.h"
                            18711 
                            18713 
                            18714 ; 1    |#ifndef _DISPLAY_H
                            18715 ; 2    |#define _DISPLAY_H
                            18716 ; 3    |
                            18717 ; 4    |//Display bits
                            18718 ; 5    |#define DISPLAY_CLEAR_DISPLAY_BITPOS        0
                            18719 ; 6    |
                            18720 ; 7    |#define DISPLAY_ENCODER_TRACK_TIME_BITPOS   1
                            18721 ; 8    |#define DISPLAY_ENCODER_TRACK_NAME_BITPOS   2
                            18722 ; 9    |#define DISPLAY_RECORD_MODE_BITPOS          3
                            18723 ; 10   |
                            18724 ; 11   |//This bit (DISPLAY_MISC_BITPOS) is set to allow DisplayHints to be non zero, but does not map
                            18725 ; 12   |//to anything in UpdateDisplay();  (meant to be used to indicate that specific
                            18726 ; 13   |//things that are specific for that menu.
                            18727 ; 14   |#define DISPLAY_MISC_BITPOS                 4
                            18728 ; 15   |
                            18729 ; 16   |#define DISPLAY_FMTUNER_FREQUENCY           5
                            18730 ; 17   |#define DISPLAY_FMTUNER_PRESET              6
                            18731 ; 18   |#define DISPLAY_FMTUNER_STRENGTH            7
                            18732 ; 19   |
                            18733 ; 20   |#define DISPLAY_PLAYSTATE_BITPOS             9
                            18734 ; 21   |#define DISPLAY_AB_ICON_BITPOS              10
                            18735 ; 22   |#define DISPLAY_PLAYMODE_BITPOS             11
                            18736 ; 23   |#define DISPLAY_PLAYSET_BITPOS              12
                            18737 ; 24   |
                            18738 ; 25   |//Playback info
                            18739 ; 26   |#define DISPLAY_EQ_BITPOS                   13
                            18740 ; 27   |#define DISPLAY_VOLUME_BITPOS               14
                            18741 ; 28   |
                            18742 ; 29   |//Track Info
                            18743 ; 30   |#define DISPLAY_SONGARTISTALBUM_BITPOS      15
                            18744 ; 31   |#define DISPLAY_SONGTITLE_BITPOS            16
                            18745 ; 32   |#define DISPLAY_CURRENTTRACK_BITPOS         17
                            18746 ; 33   |#define DISPLAY_TRACKTIME_BITPOS            18
                            18747 ; 34   |#define DISPLAY_TOTALTRACKTIME_BITPOS        8
                            18748 ; 35   |#define DISPLAY_BITRATE_BITPOS              19
                            18749 ; 36   |
                            18750 ; 37   |//Device status info
                            18751 ; 38   |#define DISPLAY_LOCK_BITPOS                 20
                            18752 ; 39   |#define DISPLAY_DISK_BITPOS                 21
                            18753 ; 40   |#define DISPLAY_BATTERY_BITPOS              22
                            18754 ; 41   |#define DISPLAY_ALBUMART_BITPOS              23
                            18755 ; 42   |
                            18756 ; 43   |#ifdef PLAYER_STRESS
                            18757 ; 44   |// this may not work since album art uses bit 23 so we may need a new word variable for this player stress test bit below.
                            18758 ; 45   |#define DISPLAY_STRESSTEST_BITPOS            23
                            18759 ; 46   |#endif
                            18760 ; 47   |
                            18761 ; 48   |
                            18762 ; 49   |union DisplayHints
                            18763 ; 50   |{
                            18764 ; 51   |    struct {
                            18765 ; 52   |        int ClearDisplay        :1;//0
                            18766 ; 53   |        int EncoderTrackTime    :1;//1
                            18767 ; 54   |        int EncoderTrackName    :1;//2
                            18768 ; 55   |        int RecordMode          :1;//3
                            18769 ; 56   |        int Misc                :1;//4
                            18770 ; 57   |        int FMTunerFrequency    :1;//5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18771 ; 58   |        int FMTunerPreset       :1;//6
                            18772 ; 59   |        int FMTunerStrength     :1;//7
                            18773 ; 60   |        int TotalTrackTime      :1;//8
                            18774 ; 61   |        int PlayState           :1;//9
                            18775 ; 62   |        int ABIcon              :1;//10
                            18776 ; 63   |        int PlayMode            :1;//11
                            18777 ; 64   |        int PlaySet             :1;//12
                            18778 ; 65   |        int EQ                  :1;//13
                            18779 ; 66   |        int Volume              :1;//14
                            18780 ; 67   |        int SongArtistAlbum     :1;//15
                            18781 ; 68   |        int SongTitle           :1;//16
                            18782 ; 69   |        int CurrentTrack        :1;//17
                            18783 ; 70   |        int TrackTime           :1;//18
                            18784 ; 71   |        int Bitrate             :1;//19
                            18785 ; 72   |        int LockIcon            :1;//20
                            18786 ; 73   |        int Disk                :1;//21
                            18787 ; 74   |        int Battery             :1;//22
                            18788 ; 75   |#ifdef PLAYER_STRESS
                            18789 ; 76   |        int StressTest         :1;//23  // this might not work since bit 23 is already taken by album art. 23 is last bit in word.
                            18790 ; 77   |#else
                            18791 ; 78   |        int AlbumArt            :1;//23
                            18792 ; 79   |#endif
                            18793 ; 80   |    } bits;
                            18794 ; 81   |    WORD I;
                            18795 ; 82   |};
                            18796 ; 83   |
                            18797 ; 84   |// setup default display for all menus
                            18798 ; 85   |// can be adjusted in each menus as required.
                            18799 ; 86   |#define COMMON_DISPLAY_ALL  (\ 
                            18800 ; 87   |                                (1<<DISPLAY_BATTERY_BITPOS)|\ 
                            18801 ; 88   |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                            18802 ; 89   |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                            18803 ; 90   |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                            18804 ; 91   |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                            18805 ; 92   |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                            18806 ; 93   |                                (1<<DISPLAY_EQ_BITPOS)|\ 
                            18807 ; 94   |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                            18808 ; 95   |                                (1<<DISPLAY_PLAYSTATE_BITPOS)\ 
                            18809 ; 96   |                                )
                            18810 ; 97   |
                            18811 ; 98   |#define SPECTROGRAM_MENU_DISPLAY_ALL  (\ 
                            18812 ; 99   |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                            18813 ; 100  |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                            18814 ; 101  |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                            18815 ; 102  |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                            18816 ; 103  |                                (1<<DISPLAY_EQ_BITPOS)|\ 
                            18817 ; 104  |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                            18818 ; 105  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)\ 
                            18819 ; 106  |                                )
                            18820 ; 107  |
                            18821 ; 108  |//-----------------------------------------------
                            18822 ; 109  |#ifdef JPEG_ALBUM_ART
                            18823 ; 110  |#define ALBUMART_SET_MASK_IF_APPROPRIATE (1<<DISPLAY_ALBUMART_BITPOS)
                            18824 ; 111  |#else
                            18825 ; 112  |#define ALBUMART_SET_MASK_IF_APPROPRIATE (0)
                            18826 ; 113  |#endif
                            18827 ; 114  |
                            18828 ; 115  |#ifdef PLAYER_STRESS
                            18829 ; 116  |#define PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE (1<<DISPLAY_STRESSTEST_BITPOS)
                            18830 ; 117  |#else
                            18831 ; 118  |#define PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE (0)
                            18832 ; 119  |#endif
                            18833 ; 120  |
                            18834 ; 121  |
                            18835 ; 122  |#define MUSIC_MENU_DISPLAY_ALL  (\ 
                            18836 ; 123  |                                (COMMON_DISPLAY_ALL)|\ 
                            18837 ; 124  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                            18838 ; 125  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                            18839 ; 126  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                            18840 ; 127  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                            18841 ; 128  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                            18842 ; 129  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                            18843 ; 130  |                                (1<<DISPLAY_TRACKTIME_BITPOS)|\ 
                            18844 ; 131  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)\ 
                            18845 ; 132  |                                )
                            18846 ; 133  |
                            18847 ; 134  |#define MUSIC_MENU_DISPLAY_NEW_TRACK (\ 
                            18848 ; 135  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                            18849 ; 136  |                                (PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE)|\ 
                            18850 ; 137  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                            18851 ; 138  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                            18852 ; 139  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                            18853 ; 140  |                                (1<<DISPLAY_TRACKTIME_BITPOS)|\ 
                            18854 ; 141  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)|\ 
                            18855 ; 142  |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                            18856 ; 143  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                            18857 ; 144  |                                (1<<DISPLAY_PLAYSET_BITPOS)\ 
                            18858 ; 145  |                                )
                            18859 ; 146  |//-----------------------------------------------
                            18860 ; 147  |
                            18861 ; 148  |
                            18862 ; 149  |#define MVIDEO_MENU_DISPLAY_ALL ((1<<DISPLAY_CURRENTTRACK_BITPOS)|(1<<DISPLAY_SONGTITLE_BITPOS))
                            18863 ; 150  |
                            18864 ; 151  |
                            18865 ; 152  |#define VOICE_MENU_DISPLAY_ALL  (\ 
                            18866 ; 153  |                                COMMON_DISPLAY_ALL|\ 
                            18867 ; 154  |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                            18868 ; 155  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                            18869 ; 156  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                            18870 ; 157  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                            18871 ; 158  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                            18872 ; 159  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                            18873 ; 160  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)|\ 
                            18874 ; 161  |                                (1<<DISPLAY_TRACKTIME_BITPOS)\ 
                            18875 ; 162  |                                )
                            18876 ; 163  |
                            18877 ; 164  |
                            18878 ; 165  |#define RECORDING_DISPLAY_ALL   (\ 
                            18879 ; 166  |                                COMMON_DISPLAY_ALL|\ 
                            18880 ; 167  |                                (1<<DISPLAY_ENCODER_TRACK_TIME_BITPOS)|\ 
                            18881 ; 168  |                                (1<<DISPLAY_ENCODER_TRACK_NAME_BITPOS)|\ 
                            18882 ; 169  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                            18883 ; 170  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                            18884 ; 171  |                                (1<<DISPLAY_RECORD_MODE_BITPOS)\ 
                            18885 ; 172  |                                )
                            18886 ; 173  |
                            18887 ; 174  |#ifdef USE_PLAYLIST3
                            18888 ; 175  |#define BROWSE_MENU_DISPLAY_ALL  (\ 
                            18889 ; 176  |                                (1<<DISPLAY_BATTERY_BITPOS)|\ 
                            18890 ; 177  |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                            18891 ; 178  |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                            18892 ; 179  |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                            18893 ; 180  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                            18894 ; 181  |                                )
                            18895 ; 182  |#else
                            18896 ; 183  |#ifdef USE_PLAYLIST5
                            18897 ; 184  |#if 0
                            18898 ; 185  |#define BROWSE_MENU_DISPLAY_ALL (\ 
                            18899 ; 186  |                                 COMMON_DISPLAY_ALL|\ 
                            18900 ; 187  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                            18901 ; 188  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                            18902 ; 189  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                            18903 ; 190  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                            18904 ; 191  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                            18905 ; 192  |                                )
                            18906 ; 193  |#else
                            18907 ; 194  |#define BROWSE_MENU_DISPLAY_ALL (\ 
                            18908 ; 195  |                                 COMMON_DISPLAY_ALL|\ 
                            18909 ; 196  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                            18910 ; 197  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                            18911 ; 198  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                            18912 ; 199  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                            18913 ; 200  |                                )
                            18914 ; 201  |#endif
                            18915 ; 202  |#endif  // #ifdef USE_PLAYLIST5
                            18916 ; 203  |#endif  // #ifdef USE_PLAYLIST3
                            18917 ; 204  |
                            18918 ; 205  |
                            18919 ; 206  |
                            18920 ; 207  |#define MAIN_MENU_DISPLAY_ALL           (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                            18921 ; 208  |
                            18922 ; 209  |#define EQ_MENU_DISPLAY_ALL             (\ 
                            18923 ; 210  |                                        COMMON_DISPLAY_ALL|\ 
                            18924 ; 211  |                                        (1<<DISPLAY_EQ_BITPOS)|\ 
                            18925 ; 212  |                                        (1<<DISPLAY_VOLUME_BITPOS)\ 
                            18926 ; 213  |                                        )     // (SDK2.520)
                            18927 ; 214  |
                            18928 ; 215  |#define PM_MENU_DISPLAY_ALL             (COMMON_DISPLAY_ALL|(1<<DISPLAY_PLAYMODE_BITPOS)|(1<<DISPLAY_MISC_BITPOS))
                            18929 ; 216  |#define PWR_MENU_DISPLAY_ALL            (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                            18930 ; 217  |#define SETTINGS_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                            18931 ; 218  |#define JPEG_DISPLAY_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                            18932 ; 219  |#define DELETE_MENU_DISPLAY_ALL         (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                            18933 ; 220  |#define ABOUT_MENU_DISPLAY_ALL          (COMMON_DISPLAY_ALL)
                            18934 ; 221  |#define ERASE_MENU_DISPLAY_ALL          ((1<<DISPLAY_BATTERY_BITPOS)|(1<<DISPLAY_LOCK_BITPOS))
                            18935 ; 222  |
                            18936 ; 223  |#define CONTRAST_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                            18937 ; 224  |
                            18938 ; 225  |#define TIME_DATE_MENU_DISPLAY_ALL      0
                            18939 ; 226  |#define RECORDTEST_DISPLAY_ALL       (\ 
                            18940 ; 227  |                                        (1<<DISPLAY_ENCODER_TRACK_TIME_BITPOS)|\ 
                            18941 ; 228  |                                                                        (1<<DISPLAY_ENCODER_TRACK_NAME_BITPOS)|\ 
                            18942 ; 229  |                                                                        (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                            18943 ; 230  |                                        (1<<DISPLAY_RECORD_MODE_BITPOS)|\ 
                            18944 ; 231  |                                    (1<<DISPLAY_MISC_BITPOS)\ 
                            18945 ; 232  |                                                                        )
                            18946 ; 233  |
                            18947 ; 234  |#define SPLASH_MENU_DISPLAY_ALL         (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                            18948 ; 235  |// used during track update to force total time update
                            18949 ; 236  |#define AUTOUPDATE              FALSE
                            18950 ; 237  |#define FORCEUPDATE             TRUE
                            18951 ; 238  |
                            18952 ; 239  |
                            18953 ; 240  |// based on font used for title/artist display
                            18954 ; 241  |#define DEFAULT_CHAR_WIDTH  5
                            18955 ; 242  |
                            18956 ; 243  |
                            18957 ; 244  |// LCD dimensions
                            18958 ; 245  |#ifdef LDS514_LCD
                            18959 ; 246  |#define   LCD_SIZE_X       96
                            18960 ; 247  |#define   LCD_SIZE_Y       64
                            18961 ; 248  |#endif
                            18962 ; 249  |
                            18963 ; 250  |#ifdef ILI814_LCD
                            18964 ; 251  |#define   LCD_SIZE_X       96
                            18965 ; 252  |#define   LCD_SIZE_Y       64
                            18966 ; 253  |#endif
                            18967 ; 254  |
                            18968 ; 255  |#ifdef ML9341_LCD
                            18969 ; 256  |#define   LCD_SIZE_X       96
                            18970 ; 257  |#define   LCD_SIZE_Y       96
                            18971 ; 258  |#endif
                            18972 ; 259  |
                            18973 ; 260  |#ifdef SSD1332_LCD
                            18974 ; 261  |#define   LCD_SIZE_X       96
                            18975 ; 262  |#define   LCD_SIZE_Y       64
                            18976 ; 263  |#endif
                            18977 ; 264  |
                            18978 ; 265  |#ifdef S6B33B0A_LCD
                            18979 ; 266  |#define   LCD_SIZE_X       128
                            18980 ; 267  |#define   LCD_SIZE_Y       159
                            18981 ; 268  |#endif
                            18982 ; 269  |
                            18983 ; 270  |#ifdef SED15XX_LCD
                            18984 ; 271  |#define LCD_SIZE_X                      128
                            18985 ; 272  |#define LCD_SIZE_Y                      64
                            18986 ; 273  |#endif
                            18987 ; 274  |
                            18988 ; 275  |#define LCD_SIZE_ROW                     8
                            18989 ; 276  |
                            18990 ; 277  |#define TOP_OF_SCREEN           0
                            18991 ; 278  |#define LEFT_OF_SCREEN          0
                            18992 ; 279  |
                            18993 ; 280  |#ifdef LDS514_LCD
                            18994 ; 281  |#define   SCREEN_WIDTH       96
                            18995 ; 282  |#define   SCREEN_HEIGHT       64
                            18996 ; 283  |#endif
                            18997 ; 284  |
                            18998 ; 285  |#ifdef ILI814_LCD
                            18999 ; 286  |#define   SCREEN_WIDTH       96
                            19000 ; 287  |#define   SCREEN_HEIGHT       64
                            19001 ; 288  |#endif
                            19002 ; 289  |
                            19003 ; 290  |#ifdef ML9341_LCD
                            19004 ; 291  |#define   SCREEN_WIDTH       96
                            19005 ; 292  |#define   SCREEN_HEIGHT       96
                            19006 ; 293  |#endif
                            19007 ; 294  |
                            19008 ; 295  |#ifdef SSD1332_LCD
                            19009 ; 296  |#define   SCREEN_WIDTH       96
                            19010 ; 297  |#define   SCREEN_HEIGHT       64
                            19011 ; 298  |#endif
                            19012 ; 299  |
                            19013 ; 300  |#ifdef S6B33B0A_LCD
                            19014 ; 301  |#define   SCREEN_WIDTH       128
                            19015 ; 302  |#define   SCREEN_HEIGHT       159
                            19016 ; 303  |#endif
                            19017 ; 304  |
                            19018 ; 305  |#ifdef SED15XX_LCD
                            19019 ; 306  |#define SCREEN_WIDTH            128
                            19020 ; 307  |#define SCREEN_HEIGHT           64
                            19021 ; 308  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19022 ; 309  |
                            19023 ; 310  |#define CHAR_SIZE_X             6
                            19024 ; 311  |#define CHAR_SIZE_Y             8
                            19025 ; 312  |
                            19026 ; 313  |// Physical rows are numbered from 0 to LCD_SIZE_Y/LCD_SIZE_ROW
                            19027 ; 314  |#define LCD_FIRST_ROW_NUM                1
                            19028 ; 315  |#define LCD_FIRST_ROW_POS_Y=LCD_FIRST_ROW_NUM*LCD_SIZE_ROW  // skipping the first row
                            19029 ; 316  |
                            19030 ; 317  |// Top row in order from left to right
                            19031 ; 318  |#define PLAY_STATE_ICON_X_POS   LEFT_OF_SCREEN+0
                            19032 ; 319  |#define PLAY_STATE_ICON_Y_POS   TOP_OF_SCREEN+0
                            19033 ; 320  |#define PLAY_STATE_ICON_X_SIZE  12
                            19034 ; 321  |#define PLAY_STATE_ICON_Y_SIZE  8
                            19035 ; 322  |
                            19036 ; 323  |#define REPEAT_ICON_X_POS       LEFT_OF_SCREEN+13
                            19037 ; 324  |#define REPEAT_ICON_Y_POS       TOP_OF_SCREEN+0
                            19038 ; 325  |#define REPEAT_ICON_X_SIZE      12
                            19039 ; 326  |#define REPEAT_ICON_Y_SIZE      8
                            19040 ; 327  |
                            19041 ; 328  |#define SHUFFLE_ICON_X_POS      LEFT_OF_SCREEN+25
                            19042 ; 329  |#define SHUFFLE_ICON_Y_POS      TOP_OF_SCREEN+0
                            19043 ; 330  |#define SHUFFLE_ICON_X_SIZE     5     // includes white space on left side of .bmp
                            19044 ; 331  |#define SHUFFLE_ICON_Y_SIZE     8
                            19045 ; 332  |
                            19046 ; 333  |#define AB_ICON_X_POS           LEFT_OF_SCREEN+31
                            19047 ; 334  |#define AB_ICON_Y_POS           TOP_OF_SCREEN+0
                            19048 ; 335  |#define AB_ICON_X_SIZE          12
                            19049 ; 336  |#define AB_ICON_Y_SIZE          8
                            19050 ; 337  |
                            19051 ; 338  |#ifdef  AUDIBLE
                            19052 ; 339  |#define SECNAV_ICON_X_POS       LEFT_OF_SCREEN+31
                            19053 ; 340  |#define SECNAV_ICON_Y_POS       TOP_OF_SCREEN+0
                            19054 ; 341  |#define SECNAV_ICON_X_SIZE      12
                            19055 ; 342  |#define SECNAV_ICON_Y_SIZE      8
                            19056 ; 343  |#endif
                            19057 ; 344  |
                            19058 ; 345  |#define EQ_ICON_X_POS           LEFT_OF_SCREEN+44
                            19059 ; 346  |#define EQ_ICON_Y_POS           TOP_OF_SCREEN+0
                            19060 ; 347  |#define EQ_ICON_X_SIZE          22
                            19061 ; 348  |#define EQ_ICON_Y_SIZE          8
                            19062 ; 349  |
                            19063 ; 350  |#ifdef WOW
                            19064 ; 351  |#define WOW_X_POS               EQ_ICON_X_POS
                            19065 ; 352  |#define WOW_Y_POS               EQ_ICON_Y_POS
                            19066 ; 353  |#endif
                            19067 ; 354  |
                            19068 ; 355  |
                            19069 ; 356  |// Media icon
                            19070 ; 357  |#define DISK_X_POS              LEFT_OF_SCREEN+66
                            19071 ; 358  |#define DISK_Y_POS              TOP_OF_SCREEN
                            19072 ; 359  |#define DISK_X_SIZE             8
                            19073 ; 360  |#define DISK_Y_SIZE             8
                            19074 ; 361  |
                            19075 ; 362  |// Hold icon
                            19076 ; 363  |#define LOCK_ICON_X_POS         LEFT_OF_SCREEN+73
                            19077 ; 364  |#define LOCK_ICON_Y_POS         TOP_OF_SCREEN
                            19078 ; 365  |#define LOCK_ICON_X_SIZE        8
                            19079 ; 366  |#define LOCK_ICON_Y_SIZE        8
                            19080 ; 367  |
                            19081 ; 368  |#define BATTERY_ICON_X_POS      LEFT_OF_SCREEN+110
                            19082 ; 369  |#define BATTERY_ICON_Y_POS      TOP_OF_SCREEN+0
                            19083 ; 370  |#define BATTERY_ICON_X_SIZE     16
                            19084 ; 371  |#define BATTERY_ICON_Y_SIZE     8
                            19085 ; 372  |#define BATTERY_RESOURCE        RSRC_BATTERY_00
                            19086 ; 373  |
                            19087 ; 374  |// Second row from left to right
                            19088 ; 375  |#define VOLUME_ICON_X_POS       LEFT_OF_SCREEN+0
                            19089 ; 376  |#define VOLUME_ICON_Y_POS       TOP_OF_SCREEN+8
                            19090 ; 377  |#define VOLUME_ICON_X_SIZE      48
                            19091 ; 378  |#define VOLUME_ICON_Y_SIZE      8
                            19092 ; 379  |#define VOLUME_RESOURCE         RSRC_ICON_VOL_00
                            19093 ; 380  |#define VOLUME_NUM_ICONS        27
                            19094 ; 381  |
                            19095 ; 382  |#define PLAYSET_X_POS           SCREEN_WIDTH-8
                            19096 ; 383  |#define PLAYSET_Y_POS           TOP_OF_SCREEN+8
                            19097 ; 384  |
                            19098 ; 385  |//Lyrics Position
                            19099 ; 386  |#define LYRICS_DISPLAY_X_POS    LEFT_OF_SCREEN
                            19100 ; 387  |#define LYRICS_DISPLAY_Y_POS    TOP_OF_SCREEN+16
                            19101 ; 388  |#define LYRICS_DISPLAY_HEIGHT           10
                            19102 ; 389  |
                            19103 ; 390  |// Music menu
                            19104 ; 391  |#define SONG_TITLE_X_POS        LEFT_OF_SCREEN+0
                            19105 ; 392  |#define SONG_TITLE_Y_POS        TOP_OF_SCREEN+16
                            19106 ; 393  |#define SONG_TITLE_X_SIZE       SCREEN_WIDTH
                            19107 ; 394  |#define SONG_TITLE_Y_SIZE       10
                            19108 ; 395  |
                            19109 ; 396  |#define SONG_ARTIST_X_POS       LEFT_OF_SCREEN
                            19110 ; 397  |#define SONG_ARTIST_Y_POS       TOP_OF_SCREEN+26
                            19111 ; 398  |#define SONG_ARTIST_X_SIZE      SCREEN_WIDTH
                            19112 ; 399  |#define SONG_ARTIST_Y_SIZE      10
                            19113 ; 400  |
                            19114 ; 401  |#define SONG_ALBUM_X_POS       LEFT_OF_SCREEN
                            19115 ; 402  |#define SONG_ALBUM_Y_POS       TOP_OF_SCREEN+36
                            19116 ; 403  |#define SONG_ALBUM_X_SIZE      SCREEN_WIDTH
                            19117 ; 404  |#define SONG_ALBUM_Y_SIZE      10
                            19118 ; 405  |
                            19119 ; 406  |#ifdef USE_PLAYLIST5
                            19120 ; 407  |#define TRACK_NUMBER_X_POS      LEFT_OF_SCREEN+28
                            19121 ; 408  |#define TRACK_NUMBER_Y_POS      TOP_OF_SCREEN+56
                            19122 ; 409  |#define TRACK_NUMBER_X_SIZE     6*4
                            19123 ; 410  |#define TRACK_NUMBER_Y_SIZE     8
                            19124 ; 411  |
                            19125 ; 412  |#define TRACK_COUNT_X_POS       TRACK_NUMBER_X_POS+TRACK_NUMBER_X_SIZE+10
                            19126 ; 413  |#define TRACK_COUNT_Y_POS       TOP_OF_SCREEN+56
                            19127 ; 414  |#define TRACK_COUNT_X_SIZE      6*4
                            19128 ; 415  |#define TRACK_COUNT_Y_SIZE      8
                            19129 ; 416  |
                            19130 ; 417  |#define TRACK_DIVIDE_X TRACK_NUMBER_X_POS+TRACK_COUNT_X_SIZE + 2
                            19131 ; 418  |#else
                            19132 ; 419  |#define TRACK_NUMBER_X_POS      LEFT_OF_SCREEN+34
                            19133 ; 420  |#define TRACK_NUMBER_Y_POS      TOP_OF_SCREEN+56
                            19134 ; 421  |#define TRACK_NUMBER_X_SIZE     6*3
                            19135 ; 422  |#define TRACK_NUMBER_Y_SIZE     8
                            19136 ; 423  |
                            19137 ; 424  |#define TRACK_COUNT_X_POS       TRACK_NUMBER_X_POS+TRACK_NUMBER_X_SIZE+10
                            19138 ; 425  |#define TRACK_COUNT_Y_POS       TOP_OF_SCREEN+56
                            19139 ; 426  |#define TRACK_COUNT_X_SIZE      6*3
                            19140 ; 427  |#define TRACK_COUNT_Y_SIZE      8
                            19141 ; 428  |
                            19142 ; 429  |#define TRACK_DIVIDE_X  TRACK_NUMBER_X_POS+24
                            19143 ; 430  |#endif
                            19144 ; 431  |
                            19145 ; 432  |
                            19146 ; 433  |#define TRACK_CURR_TIME_X_POS       LEFT_OF_SCREEN+28
                            19147 ; 434  |#define TRACK_CURR_TIME_Y_POS       TOP_OF_SCREEN+48
                            19148 ; 435  |#define TRACK_CURR_TIME_X_SIZE      25
                            19149 ; 436  |#define TRACK_CURR_TIME_Y_SIZE      8
                            19150 ; 437  |
                            19151 ; 438  |#define TRACK_SLASH_X_SIZE          5
                            19152 ; 439  |#define TRACK_SLASH_X_POS           TRACK_TOTAL_TIME_X_POS-TRACK_SLASH_X_SIZE
                            19153 ; 440  |#define TRACK_SLASH_Y_POS           TRACK_CURR_TIME_Y_POS
                            19154 ; 441  |
                            19155 ; 442  |#define TRACK_TOTAL_TIME_X_POS      LEFT_OF_SCREEN+60
                            19156 ; 443  |#define TRACK_TOTAL_TIME_Y_POS      TRACK_CURR_TIME_Y_POS
                            19157 ; 444  |#define TRACK_TOTAL_TIME_X_SIZE     28
                            19158 ; 445  |#define TRACK_TOTAL_TIME_Y_SIZE     8
                            19159 ; 446  |
                            19160 ; 447  |#define VBR_FLAG_X_POS      LEFT_OF_SCREEN+80
                            19161 ; 448  |#define VBR_FLAG_Y_POS      8
                            19162 ; 449  |#define VBR_FLAG_X_SIZE     20
                            19163 ; 450  |#define VBR_FLAG_Y_SIZE     8
                            19164 ; 451  |#ifdef JPEG_ALBUM_ART
                            19165 ; 452  |// Album art display parameters:
                            19166 ; 453  |#define ALBUM_ART_X_POS         TOP_OF_SCREEN
                            19167 ; 454  |#define ALBUM_ART_Y_POS         80
                            19168 ; 455  |#define ALBUM_ART_X_SIZE        SCREEN_WIDTH
                            19169 ; 456  |#define ALBUM_ART_Y_SIZE        (SCREEN_HEIGHT-ALBUM_ART_Y_POS)
                            19170 ; 457  |#endif
                            19171 ; 458  |
                            19172 ; 459  |// Recording Display
                            19173 ; 460  |#define REC_CURR_TIME_X_POS       LEFT_OF_SCREEN
                            19174 ; 461  |#define REC_CURR_TIME_Y_POS       TOP_OF_SCREEN+48
                            19175 ; 462  |#define REC_CURR_TIME_X_SIZE      12
                            19176 ; 463  |#define REC_CURR_TIME_Y_SIZE      8
                            19177 ; 464  |
                            19178 ; 465  |#define REC_TOTAL_TIME_X_POS      LEFT_OF_SCREEN+45
                            19179 ; 466  |#define REC_TOTAL_TIME_Y_POS      TOP_OF_SCREEN+48
                            19180 ; 467  |#define REC_TOTAL_TIME_X_SIZE     28
                            19181 ; 468  |#define REC_TOTAL_TIME_Y_SIZE     8
                            19182 ; 469  |
                            19183 ; 470  |// Playback Display with hours added.
                            19184 ; 471  |#ifdef LDS514_LCD
                            19185 ; 472  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                            19186 ; 473  |#endif
                            19187 ; 474  |
                            19188 ; 475  |#ifdef ILI814_LCD
                            19189 ; 476  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                            19190 ; 477  |#endif
                            19191 ; 478  |
                            19192 ; 479  |#ifdef ML9341_LCD
                            19193 ; 480  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                            19194 ; 481  |#endif
                            19195 ; 482  |
                            19196 ; 483  |#ifdef SSD1332_LCD
                            19197 ; 484  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                            19198 ; 485  |#endif
                            19199 ; 486  |
                            19200 ; 487  |#ifdef S6B33B0A_LCD
                            19201 ; 488  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                            19202 ; 489  |#endif
                            19203 ; 490  |
                            19204 ; 491  |#ifdef SED15XX_LCD
                            19205 ; 492  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                            19206 ; 493  |#endif
                            19207 ; 494  |
                            19208 ; 495  |#define HR_TRACK_CURR_TIME_Y_POS        TOP_OF_SCREEN+48
                            19209 ; 496  |#define HR_TRACK_CURR_TIME_X_SIZE       28
                            19210 ; 497  |#define HR_TRACK_CURR_TIME_Y_SIZE       8
                            19211 ; 498  |
                            19212 ; 499  |#define HR_TRACK_TOTAL_TIME_X_POS       LEFT_OF_SCREEN+59
                            19213 ; 500  |#define HR_TRACK_TOTAL_TIME_Y_POS       TRACK_CURR_TIME_Y_POS
                            19214 ; 501  |#define HR_TRACK_TOTAL_TIME_X_SIZE      28
                            19215 ; 502  |#define HR_TRACK_TOTAL_TIME_Y_SIZE      8
                            19216 ; 503  |
                            19217 ; 504  |//Clear entire Track Time when song changes.
                            19218 ; 505  |#define CLR_TRACK_TIME_X_POS            LEFT_OF_SCREEN
                            19219 ; 506  |#define CLR_TRACK_TIME_Y_POS            TRACK_CURR_TIME_Y_POS
                            19220 ; 507  |#define CLR_TRACK_TIME_X_SIZE           SCREEN_WIDTH
                            19221 ; 508  |#define CLR_TRACK_TIME_Y_SIZE           8
                            19222 ; 509  |
                            19223 ; 510  |#define HR_TRACK_SLASH_X_SIZE           3
                            19224 ; 511  |#define HR_TRACK_SLASH_X_POS            HR_TRACK_TOTAL_TIME_X_POS-HR_TRACK_SLASH_X_SIZE
                            19225 ; 512  |#define HR_TRACK_SLASH_Y_POS            HR_TRACK_CURR_TIME_Y_POS
                            19226 ; 513  |
                            19227 ; 514  | //DVRWARN
                            19228 ; 515  |#define VOICE_SPACE_WARN_X_POS      LEFT_OF_SCREEN
                            19229 ; 516  |#define VOICE_SPACE_WARN_Y_POS      SONG_TITLE_Y_POS
                            19230 ; 517  |#define VOICE_SPACE_WARN_X_SIZE     93
                            19231 ; 518  |#define VOICE_SPACE_WARN_Y_SIZE     16
                            19232 ; 519  |
                            19233 ; 520  |//Shutdown
                            19234 ; 521  |#define SHUTDOWN_PROGRESS_X_POS     LEFT_OF_SCREEN+24
                            19235 ; 522  |#define SHUTDOWN_PROGRESS_Y_POS     TOP_OF_SCREEN+32
                            19236 ; 523  |#define SHUTDOWN_PROGRESS_X_SIZE    59
                            19237 ; 524  |#define SHUTDOWN_PROGRESS_Y_SIZE    16
                            19238 ; 525  |#define SHUTDOWN_PROGRESS_RESOURCE  RSRC_PDOWN_STATUS_0
                            19239 ; 526  |
                            19240 ; 527  |#define SHUTDOWN_STRING_X_POS       LEFT_OF_SCREEN+10
                            19241 ; 528  |#define SHUTDOWN_STRING_Y_POS       TOP_OF_SCREEN+16
                            19242 ; 529  |#define SHUTDOWN_STRING_X_SIZE      59
                            19243 ; 530  |#define SHUTDOWN_STRING_Y_SIZE      16
                            19244 ; 531  |#define SHUTDOWN_STRING_RESOURCE    RSRC_PDOWN_HOLD_STRING
                            19245 ; 532  |
                            19246 ; 533  |#define DEFRAGMENT_STRING_X_POS       LEFT_OF_SCREEN+0
                            19247 ; 534  |#define DEFRAGMENT_STRING_Y_POS       TOP_OF_SCREEN+16
                            19248 ; 535  |#define DEFRAGMENT_STRING_X_SIZE      59
                            19249 ; 536  |#define DEFRAGMENT_STRING_Y_SIZE      16
                            19250 ; 537  |#define DEFRAGMENT_STRING_RESOURCE    RSRC_DEFRAGMENT_STORE_STRING
                            19251 ; 538  |
                            19252 ; 539  |
                            19253 ; 540  |//Contrast Display
                            19254 ; 541  |#define CONTRAST_TITLE_X_POS        LEFT_OF_SCREEN+0
                            19255 ; 542  |#define CONTRAST_TITLE_Y_POS        TOP_OF_SCREEN+16
                            19256 ; 543  |
                            19257 ; 544  |#define CONTRAST_X_POS              LEFT_OF_SCREEN+8
                            19258 ; 545  |#define CONTRAST_Y_POS              TOP_OF_SCREEN+32
                            19259 ; 546  |#define CONTRAST_X_SIZE             96
                            19260 ; 547  |#define CONTRAST_Y_SIZE             8
                            19261 ; 548  |#define CONTRAST_RESOURCE           RSRC_CONTRAST_LEVEL_0
                            19262 ; 549  |
                            19263 ; 550  |//Backlight Display
                            19264 ; 551  |#define BACKLIGHT_TITLE_X_POS        LEFT_OF_SCREEN+0
                            19265 ; 552  |#define BACKLIGHT_TITLE_Y_POS        TOP_OF_SCREEN+24
                            19266 ; 553  |#define BACKLIGHT_STATE_X_POS        LEFT_OF_SCREEN+0
                            19267 ; 554  |#define BACKLIGHT_STATE_Y_POS        (LCD_FIRST_ROW_NUM+4)*LCD_SIZE_ROW
                            19268 ; 555  |
                            19269 ; 556  |//settings title display
                            19270 ; 557  |#define SETTINGS_TITLE_X_POS        LEFT_OF_SCREEN+0
                            19271 ; 558  |#define SETTINGS_TITLE_Y_POS        TOP_OF_SCREEN+8
                            19272 ; 559  |//jpeg display title display
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19273 ; 560  |#define JPEG_DISPLAY_TITLE_X_POS        LEFT_OF_SCREEN+0
                            19274 ; 561  |#define JPEG_DISPLAY_TITLE_Y_POS        TOP_OF_SCREEN+8
                            19275 ; 562  |//erase files title display
                            19276 ; 563  |#define ERASE_TITLE_X_POS           LEFT_OF_SCREEN+0
                            19277 ; 564  |#define ERASE_TITLE_Y_POS           TOP_OF_SCREEN+8
                            19278 ; 565  |
                            19279 ; 566  |// Splashscreen
                            19280 ; 567  |#ifdef LDS514_LCD
                            19281 ; 568  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                            19282 ; 569  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                            19283 ; 570  |#define SPLASH_SCREEN_X_SIZE        96
                            19284 ; 571  |#define SPLASH_SCREEN_Y_SIZE        64
                            19285 ; 572  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                            19286 ; 573  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                            19287 ; 574  |#endif
                            19288 ; 575  |
                            19289 ; 576  |#ifdef ILI814_LCD
                            19290 ; 577  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                            19291 ; 578  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                            19292 ; 579  |#define SPLASH_SCREEN_X_SIZE        96
                            19293 ; 580  |#define SPLASH_SCREEN_Y_SIZE        64
                            19294 ; 581  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                            19295 ; 582  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                            19296 ; 583  |#endif
                            19297 ; 584  |
                            19298 ; 585  |#ifdef ML9341_LCD
                            19299 ; 586  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                            19300 ; 587  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                            19301 ; 588  |#define SPLASH_SCREEN_X_SIZE        96
                            19302 ; 589  |#define SPLASH_SCREEN_Y_SIZE        96
                            19303 ; 590  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                            19304 ; 591  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                            19305 ; 592  |#endif
                            19306 ; 593  |
                            19307 ; 594  |#ifdef SSD1332_LCD
                            19308 ; 595  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                            19309 ; 596  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                            19310 ; 597  |#define SPLASH_SCREEN_X_SIZE        96
                            19311 ; 598  |#define SPLASH_SCREEN_Y_SIZE        64
                            19312 ; 599  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                            19313 ; 600  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                            19314 ; 601  |#endif
                            19315 ; 602  |
                            19316 ; 603  |#ifdef S6B33B0A_LCD
                            19317 ; 604  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                            19318 ; 605  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN + 16
                            19319 ; 606  |#define SPLASH_SCREEN_X_SIZE        80
                            19320 ; 607  |#define SPLASH_SCREEN_Y_SIZE        48
                            19321 ; 608  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                            19322 ; 609  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                            19323 ; 610  |#endif
                            19324 ; 611  |
                            19325 ; 612  |#ifdef SED15XX_LCD
                            19326 ; 613  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                            19327 ; 614  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN 
                            19328 ; 615  |#define SPLASH_SCREEN_X_SIZE        128
                            19329 ; 616  |#define SPLASH_SCREEN_Y_SIZE        64    
                            19330 ; 617  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                            19331 ; 618  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                            19332 ; 619  |#endif
                            19333 ; 620  |
                            19334 ; 621  |// FM tuner
                            19335 ; 622  |#define FM_TUNER_FREQUENCY_X_POS    LEFT_OF_SCREEN+30
                            19336 ; 623  |#define FM_TUNER_FREQUENCY_Y_POS    TOP_OF_SCREEN+24
                            19337 ; 624  |#define FM_TUNER_FREQUENCY_X_SIZE   CHAR_SIZE_X*10
                            19338 ; 625  |#define FM_TUNER_FREQUENCY_Y_SIZE   CHAR_SIZE_Y
                            19339 ; 626  |#define FM_TUNER_FREQUENCY_DOT_X_POS    FM_TUNER_FREQUENCY_X_POS+CHAR_SIZE_X*3
                            19340 ; 627  |#define FM_TUNER_FRAC_FREQUENCY_X_POS    FM_TUNER_FREQUENCY_DOT_X_POS+3
                            19341 ; 628  |
                            19342 ; 629  |#define FM_TUNER_PRESET_X_POS       LEFT_OF_SCREEN+30
                            19343 ; 630  |#define FM_TUNER_PRESET_Y_POS       TOP_OF_SCREEN+34
                            19344 ; 631  |#define FM_TUNER_PRESET_X_SIZE      CHAR_SIZE_X*5
                            19345 ; 632  |#define FM_TUNER_PRESET_Y_SIZE      CHAR_SIZE_Y
                            19346 ; 633  |
                            19347 ; 634  |#define FM_TUNER_PILOT_X_POS       LEFT_OF_SCREEN+30
                            19348 ; 635  |#define FM_TUNER_PILOT_Y_POS       TOP_OF_SCREEN+44
                            19349 ; 636  |
                            19350 ; 637  |// About menu
                            19351 ; 638  |#define ABOUT_TITLE_X_POS           LEFT_OF_SCREEN+0
                            19352 ; 639  |#define ABOUT_TITLE_Y_POS           TOP_OF_SCREEN+LCD_SIZE_ROW
                            19353 ; 640  |// starting row -- use offsets for the rest
                            19354 ; 641  |#define ABOUT_LINE_LABEL_X_POS      LEFT_OF_SCREEN+0
                            19355 ; 642  |#define ABOUT_LINE_LABEL_Y_POS      ABOUT_TITLE_Y_POS+(2*LCD_SIZE_ROW)
                            19356 ; 643  |
                            19357 ; 644  |#ifdef PLAYER_STRESS
                            19358 ; 645  |#define STRESS_TEST_X_POS       LEFT_OF_SCREEN
                            19359 ; 646  |#define STRESS_TEST_Y_POS       TOP_OF_SCREEN+40
                            19360 ; 647  |#define STRESS_TEST_X_SIZE      SCREEN_WIDTH
                            19361 ; 648  |#define STRESS_TEST_Y_SIZE      8
                            19362 ; 649  |#endif
                            19363 ; 650  |
                            19364 ; 651  |
                            19365 ; 652  |// Delete Menu
                            19366 ; 653  |#define WARNING_MSG_LINE1_X         LEFT_OF_SCREEN
                            19367 ; 654  |#define WARNING_MSG_LINE1_Y         (LCD_FIRST_ROW_NUM+1)*LCD_SIZE_ROW
                            19368 ; 655  |#define WARNING_MSG_LINE2_X         LEFT_OF_SCREEN
                            19369 ; 656  |#define WARNING_MSG_LINE2_Y         (LCD_FIRST_ROW_NUM+2)*LCD_SIZE_ROW
                            19370 ; 657  |#define WARNING_MSG_FILE_X          LEFT_OF_SCREEN
                            19371 ; 658  |#define WARNING_MSG_FILE_Y          (LCD_FIRST_ROW_NUM+4)*LCD_SIZE_ROW
                            19372 ; 659  |#define WARNING_MSG_YES_X           LEFT_OF_SCREEN
                            19373 ; 660  |#define WARNING_MSG_YES_Y           (LCD_FIRST_ROW_NUM+6)*LCD_SIZE_ROW
                            19374 ; 661  |#define DELETE_FAIL_MSG_X           LEFT_OF_SCREEN
                            19375 ; 662  |#define DELETE_FAIL_MSG_Y           (LCD_FIRST_ROW_NUM+6)*LCD_SIZE_ROW
                            19376 ; 663  |
                            19377 ; 664  |_reentrant void DisplayClear (void);
                            19378 ; 665  |_reentrant void DisplayLowBattery (void);
                            19379 ; 666  |
                            19380 ; 667  |_reentrant int DisplayContrast( int bDisplay, int iIgnored1, void *pPtr);
                            19381 ; 668  |
                            19382 ; 669  |_reentrant int DisplayBacklight( int bDisplay, int iIgnored1, void *pPtr);
                            19383 ; 670  |#ifdef WOW
                            19384 ; 671  |_reentrant int DisplayBar( int bDisplay, int step, void *pPtr);
                            19385 ; 672  |#endif
                            19386 ; 673  |extern _X BOOL g_bSongStringScroll;
                            19387 ; 674  |extern _X INT  g_iSongStringOffset;
                            19388 ; 675  |extern _X INT  g_iSongStringLength;
                            19389 ; 676  |
                            19390 ; 677  |extern _X BOOL g_bArtistStringScroll;
                            19391 ; 678  |extern _X INT  g_iArtistStringOffset;
                            19392 ; 679  |extern _X INT  g_iArtistStringLength;
                            19393 ; 680  |
                            19394 ; 681  |
                            19395 ; 682  |extern _X BOOL g_bAlbumStringScroll;
                            19396 ; 683  |extern _X INT  g_iAlbumStringOffset;
                            19397 ; 684  |extern _X INT  g_iAlbumStringLength;
                            19398 ; 685  |extern int g_iVolume_Control_Mode;
                            19399 ; 686  |extern int g_iAB_Control_Mode;
                            19400 ; 687  |
                            19401 ; 688  |
                            19402 ; 689  |#endif //_DISPLAY_H
                            19403 
                            19405 
                            19406 ; 22   |
                            19407 ; 23   |#ifdef PLAYER
                            19408 ; 24   |#include "sysspeed.h"
                            19409 
                            19411 
                            19412 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            19413 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            19414 ; 3    |// Speed defs
                            19415 ; 4    |// NOTE: sysspeed.H is generated from sysspeed.INC. Only modify inc version.
                            19416 ; 5    |// Speed clients: See SPEED_CLIENT_ defines and non 3400 Speed Indeces
                            19417 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                            19418 ; 7    |
                            19419 ; 8    |#if (!defined(SYSSPEED_INC))
                            19420 ; 9    |#define SYSSPEED_INC 1
                            19421 ; 10   |
                            19422 ; 11   |// PLL Frequency Divider (Assume DDIV=0)
                            19423 ; 12   |// PLL Output Frequency = (33+PDIV)*(XTAL/20)   XTAL=24 MHz
                            19424 ; 13   |// PDIV = (Speed * 20 / 24) - 33  (if DDIV=0)
                            19425 ; 14   |// Digital Clock Post Divider 
                            19426 ; 15   |// Digital Clock = PLL Output Fequency / 2^DDIV   (Speed is in MHz)
                            19427 ; 16   |// GP Flash Timing Registers
                            19428 ; 17   |// x:HW_GPFLASH_TIMING1R
                            19429 ; 18   |//      TSU = 0ns 
                            19430 ; 19   |//      TH = 10ns Min
                            19431 ; 20   |// Use Default Settings since max speed is 75.6 MHz or 13.2275 ns
                            19432 ; 21   |// Add Register if needed
                            19433 ; 22   |// x:HW_GPFLASH_TIMING2R 
                            19434 ; 23   |//      TDS = 25ns Min  data setup time
                            19435 ; 24   |//      TDH = 15ns Min  data hold  time
                            19436 ; 25   |//      TDS + TDH must be > 50 nS
                            19437 ; 26   |// Speed Indexes (into the speed table)
                            19438 ; 27   |//!!!!! ** MUST BE ORDERED FROM LOWEST TO HIGHEST FREQ ** !!!!!
                            19439 ; 28   |// NOTE: Executive speed client must only use speed index 1 or 0 (IDLE).
                            19440 ; 29   |#define SPEED_IDLE 0 
                            19441 ; 30   |#define SPEED_AUDIBLE_MP3 1
                            19442 ; 31   |#define SPEED_AUDIBLE_ACELP_SR8KHz 2
                            19443 ; 32   |#define SPEED_FM 3
                            19444 ; 33   |#define SPEED_FM_EQ 4
                            19445 ; 34   |#define SPEED_AUDIBLE_ACELP_SR16KHz 5
                            19446 ; 35   |#define SPEED_MP3 6
                            19447 ; 36   |#define SPEED_ADPCM 7
                            19448 ; 37   |#define SPEED_MIXER 8
                            19449 ; 38   |#define SPEED_ADCBASE 9
                            19450 ; 39   |#define SPEED_MAX 10
                            19451 ; 40   |#define SPEED_WMA 11
                            19452 ; 41   |#define SPEED_MP3ENCODE 12
                            19453 ; 42   |#define SPEED_PEAK 13
                            19454 ; 43   |#define SPEED_LAST SPEED_PEAK
                            19455 ; 44   |#define SPEED_UNINITIALIZED SPEED_LAST+1
                            19456 ; 45   |// SPEED_UNINITIALIZED must be the highest index value
                            19457 ; 46   |
                            19458 ; 47   |// Idle speed is 10 MHz  (98.04nS)
                            19459 ; 48   |#define IDLE_SPEED 10              
                            19460 ; 49   |// (1+33)*(24/20) = 40.8
                            19461 ; 50   |#define IDLE_PDIV 1               
                            19462 ; 51   |// 40.5504 / (2^2) = 10.2 MHz
                            19463 ; 52   |#define IDLE_DDIV 2               
                            19464 ; 53   |// 1.37v
                            19465 ; 54   |#define IDLE_VOLTAGE 0x00000B         
                            19466 ; 55   |// 1.28v 
                            19467 ; 56   |#define IDLE_BOVOLTAGE 0x000800         
                            19468 ; 57   |
                            19469 ; 58   |
                            19470 ; 59   |// tdh and tds: hold and setup times in n dclks are 6-bit fields that are right justified byte aligned
                            19471 ; 60   |// 60MHz MSC uses the following clock setup: 
                            19472 ; 61   |// NAND1     $000203 -> (2+3)/60MHz =  83.3ns   2 dclk hold and 3 dclk setup
                            19473 ; 62   |// NAND2     $000304 -> (3+4)/60MHz = 116.7ns
                            19474 ; 63   |// NAND3     $000305 -> (3+5)/60MHz = 133.3ns
                            19475 ; 64   |// NAND4     $000305 -> (3+5)/60MHz = 133.3ns
                            19476 ; 65   |// So, for 10MHz idle speed:
                            19477 ; 66   |// NAND1,2,4 may use $000101 
                            19478 ; 67   |#if (defined(DEBUG))
                            19479 ; 68   |#if (defined(NAND1))
                            19480 ; 69   |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19481 ; 70   |#define IDLE_GPSPEED 0x000101         
                            19482 ; 71   |#else 
                            19483 ; 72   |#if (defined(NAND2))
                            19484 ; 73   |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19485 ; 74   |#define IDLE_GPSPEED 0x000101         
                            19486 ; 75   |#else 
                            19487 ; 76   |#if (defined(NAND3))
                            19488 ; 77   |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19489 ; 78   |#define IDLE_GPSPEED 0x000101         
                            19490 ; 79   |#else 
                            19491 ; 80   |#if (defined(NAND4))
                            19492 ; 81   |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19493 ; 82   |#define IDLE_GPSPEED 0x000101         
                            19494 ; 83   |#else 
                            19495 ; 84   |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19496 ; 85   |#define IDLE_GPSPEED 0x000101         
                            19497 ; 86   |#endif
                            19498 ; 87   |#endif
                            19499 ; 88   |#endif
                            19500 ; 89   |#endif
                            19501 ; 90   |#else 
                            19502 ; 91   |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19503 ; 92   |#define IDLE_GPSPEED 0x000101         
                            19504 ; 93   |#endif
                            19505 ; 94   |//---------    
                            19506 ; 95   |
                            19507 ; 96   |// speed is 15 MHz(66.6nS)
                            19508 ; 97   |#define AUDIBLE_MP3_SPEED 15              
                            19509 ; 98   |// PLL O/P freq = (33 + PDIV)*(24/20) = (33 + 17)*(24/20) = 60MHz
                            19510 ; 99   |#define AUDIBLE_MP3_PDIV 17              
                            19511 ; 100  |// DCLK = 40.8MHz/(2^DDIV) = 15MHz
                            19512 ; 101  |#define AUDIBLE_MP3_DDIV 2               
                            19513 ; 102  |// 1.37V
                            19514 ; 103  |#define AUDIBLE_MP3_VOLTAGE 0x00000B         
                            19515 ; 104  |// 1.28V 
                            19516 ; 105  |#define AUDIBLE_MP3_BOVOLTAGE 0x000800         
                            19517 ; 106  |
                            19518 ; 107  |// NAND1     15MHz *  83.3ns = 1.249 -> $000101
                            19519 ; 108  |// NAND2     15MHz * 116.7ns = 1.750 -> $000101
                            19520 ; 109  |// NAND3|4   15MHz * 133.3ns = 1.999 -> $000101
                            19521 ; 110  |
                            19522 ; 111  |#if (defined(DEBUG))
                            19523 ; 112  |#if (defined(NAND1))
                            19524 ; 113  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19525 ; 114  |#define AUDIBLE_MP3_GPSPEED 0x000101         
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19526 ; 115  |#else 
                            19527 ; 116  |#if (defined(NAND2))
                            19528 ; 117  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19529 ; 118  |#define AUDIBLE_MP3_GPSPEED 0x000101         
                            19530 ; 119  |#else 
                            19531 ; 120  |#if (defined(NAND3))
                            19532 ; 121  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19533 ; 122  |#define AUDIBLE_MP3_GPSPEED 0x000101         
                            19534 ; 123  |#else 
                            19535 ; 124  |#if (defined(NAND4))
                            19536 ; 125  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19537 ; 126  |#define AUDIBLE_MP3_GPSPEED 0x000101         
                            19538 ; 127  |#else 
                            19539 ; 128  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19540 ; 129  |#define AUDIBLE_MP3_GPSPEED 0x000101         
                            19541 ; 130  |#endif
                            19542 ; 131  |#endif
                            19543 ; 132  |#endif
                            19544 ; 133  |#endif
                            19545 ; 134  |#else 
                            19546 ; 135  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19547 ; 136  |#define AUDIBLE_MP3_GPSPEED 0x000101         
                            19548 ; 137  |#endif
                            19549 ; 138  |//---------   
                            19550 ; 139  |
                            19551 ; 140  |// speed is 15 MHz(66.6nS)
                            19552 ; 141  |#define AUDIBLE_ACELP_SR8KHz_SPEED 15              
                            19553 ; 142  |// PLL O/P freq = (33 + PDIV)*(24/20) = (33 + 17)*(24/20) = 60MHz
                            19554 ; 143  |#define AUDIBLE_ACELP_SR8KHz_PDIV 17              
                            19555 ; 144  |// DCLK = 40.8MHz/(2^DDIV) = 15MHz
                            19556 ; 145  |#define AUDIBLE_ACELP_SR8KHz_DDIV 2               
                            19557 ; 146  |// 1.37V
                            19558 ; 147  |#define AUDIBLE_ACELP_SR8KHz_VOLTAGE 0x00000B         
                            19559 ; 148  |// 1.28V 
                            19560 ; 149  |#define AUDIBLE_ACELP_SR8KHz_BOVOLTAGE 0x000800         
                            19561 ; 150  |
                            19562 ; 151  |// NAND1     15MHz *  83.3ns = 1.249 -> $000101
                            19563 ; 152  |// NAND2     15MHz * 116.7ns = 1.750 -> $000101
                            19564 ; 153  |// NAND3|4   15MHz * 133.3ns = 1.999 -> $000101
                            19565 ; 154  |
                            19566 ; 155  |#if (defined(DEBUG))
                            19567 ; 156  |#if (defined(NAND1))
                            19568 ; 157  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19569 ; 158  |#define AUDIBLE_ACELP_SR8KHz_GPSPEED 0x000101         
                            19570 ; 159  |#else 
                            19571 ; 160  |#if (defined(NAND2))
                            19572 ; 161  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19573 ; 162  |#define AUDIBLE_ACELP_SR8KHz_GPSPEED 0x000101         
                            19574 ; 163  |#else 
                            19575 ; 164  |#if (defined(NAND3))
                            19576 ; 165  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19577 ; 166  |#define AUDIBLE_ACELP_SR8KHz_GPSPEED 0x000101         
                            19578 ; 167  |#else 
                            19579 ; 168  |#if (defined(NAND4))
                            19580 ; 169  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19581 ; 170  |#define AUDIBLE_ACELP_SR8KHz_GPSPEED 0x000101         
                            19582 ; 171  |#else 
                            19583 ; 172  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19584 ; 173  |#define AUDIBLE_ACELP_SR8KHz_GPSPEED 0x000101         
                            19585 ; 174  |#endif
                            19586 ; 175  |#endif
                            19587 ; 176  |#endif
                            19588 ; 177  |#endif
                            19589 ; 178  |#else 
                            19590 ; 179  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19591 ; 180  |#define AUDIBLE_ACELP_SR8KHz_GPSPEED 0x000101         
                            19592 ; 181  |#endif
                            19593 ; 182  |//--------- 
                            19594 ; 183  |// Changed speed from 18Mhz to 24Mhz stmp10415
                            19595 ; 184  |// stmp10415   was 18              ; FM speed is 18 MHz, which is as low as possible for Steely Dan Tuner in sdk 2.610. In 3.110 we need >22Mhz so we use 24Mhz. 
                            19596 ; 185  |#define FM_SPEED 24 
                            19597 ; 186  |// stmp10415   was 27              ; (27+33)*(24/20) = 72 in sdk2.610.  In sdk 3.110 we use (7+33)*(24/20) = 48.
                            19598 ; 187  |#define FM_PDIV 7  
                            19599 ; 188  |// stmp10415   was  2              ; 72 / (2^2) = 18 MHz in sdk 2.610.    In 3.110 we use 48/2^1 = 24Mhz. 
                            19600 ; 189  |#define FM_DDIV 1  
                            19601 ; 190  |
                            19602 ; 191  |// 1.44V        - Steely Dan spec at 1.35V
                            19603 ; 192  |#define FM_VOLTAGE 0x00000d         
                            19604 ; 193  |// 1.28v
                            19605 ; 194  |#define FM_BOVOLTAGE 0x000800         
                            19606 ; 195  |#if (defined(DEBUG))
                            19607 ; 196  |#if (defined(NAND1))
                            19608 ; 197  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            19609 ; 198  |#define FM_GPSPEED 0x000102         
                            19610 ; 199  |#else 
                            19611 ; 200  |#if (defined(NAND2))
                            19612 ; 201  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            19613 ; 202  |#define FM_GPSPEED 0x000203         
                            19614 ; 203  |#else 
                            19615 ; 204  |#if (defined(NAND3))
                            19616 ; 205  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            19617 ; 206  |#define FM_GPSPEED 0x000203         
                            19618 ; 207  |#else 
                            19619 ; 208  |#if (defined(NAND4))
                            19620 ; 209  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            19621 ; 210  |#define FM_GPSPEED 0x000203         
                            19622 ; 211  |#else 
                            19623 ; 212  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            19624 ; 213  |#define FM_GPSPEED 0x000102         
                            19625 ; 214  |#endif
                            19626 ; 215  |#endif
                            19627 ; 216  |#endif
                            19628 ; 217  |#endif
                            19629 ; 218  |#else 
                            19630 ; 219  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            19631 ; 220  |#define FM_GPSPEED 0x000203         
                            19632 ; 221  |#endif
                            19633 ; 222  |//---------
                            19634 ; 223  |// Increase to 30 MHz to support equalizer
                            19635 ; 224  |#define FM_EQ_SPEED 30  
                            19636 ; 225  |// (17+33)*(24/20) = 60
                            19637 ; 226  |#define FM_EQ_PDIV 17  
                            19638 ; 227  |//  60 / (2^1) = 30 MHz  
                            19639 ; 228  |#define FM_EQ_DDIV 1   
                            19640 ; 229  |
                            19641 ; 230  |// Higher voltages when using equalizer and TA2 STFM1000 to prevent lockup when changing EQ settings rapidly
                            19642 ; 231  |//1.44v  - Steely Dan spec at 1.35V
                            19643 ; 232  |#define FM_EQ_VOLTAGE 0x00000D   
                            19644 ; 233  |//1.31v     
                            19645 ; 234  |#define FM_EQ_BOVOLTAGE 0x000900   
                            19646 ; 235  |
                            19647 ; 236  |#if (defined(DEBUG))
                            19648 ; 237  |#if (defined(NAND1))
                            19649 ; 238  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            19650 ; 239  |#define FM_EQ_GPSPEED 0x000102         
                            19651 ; 240  |#else 
                            19652 ; 241  |#if (defined(NAND2))
                            19653 ; 242  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            19654 ; 243  |#define FM_EQ_GPSPEED 0x000203         
                            19655 ; 244  |#else 
                            19656 ; 245  |#if (defined(NAND3))
                            19657 ; 246  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            19658 ; 247  |#define FM_EQ_GPSPEED 0x000203         
                            19659 ; 248  |#else 
                            19660 ; 249  |#if (defined(NAND4))
                            19661 ; 250  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            19662 ; 251  |#define FM_EQ_GPSPEED 0x000203         
                            19663 ; 252  |#else 
                            19664 ; 253  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            19665 ; 254  |#define FM_EQ_GPSPEED 0x000102         
                            19666 ; 255  |#endif
                            19667 ; 256  |#endif
                            19668 ; 257  |#endif
                            19669 ; 258  |#endif
                            19670 ; 259  |#else 
                            19671 ; 260  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 1 for TDS
                            19672 ; 261  |#define FM_EQ_GPSPEED 0x000203         
                            19673 ; 262  |#endif
                            19674 ; 263  |//---------
                            19675 ; 264  |
                            19676 ; 265  |
                            19677 ; 266  |// Audible Acelp speed is 36 MHz(27.78nS)
                            19678 ; 267  |#define AUDIBLE_ACELP_SR16KHz_SPEED 36            
                            19679 ; 268  |// PLL O/P freq = (33 + PDIV)*(24/20)   = (33+27)*(24/20) = 72MHz
                            19680 ; 269  |#define AUDIBLE_ACELP_SR16KHz_PDIV 27              
                            19681 ; 270  |// DCLK = 60MHz/(2^DDIV) = 36MHz
                            19682 ; 271  |#define AUDIBLE_ACELP_SR16KHz_DDIV 1             
                            19683 ; 272  |// 1.37V
                            19684 ; 273  |#define AUDIBLE_ACELP_SR16KHz_VOLTAGE 0x00000B       
                            19685 ; 274  |// 1.28V 
                            19686 ; 275  |#define AUDIBLE_ACELP_SR16KHz_BOVOLTAGE 0x000800       
                            19687 ; 276  |
                            19688 ; 277  |// NAND1     36MHz *  83.3ns = 2.999 -> $000102
                            19689 ; 278  |// NAND2     36MHz * 116.7ns = 4.201 -> $000203
                            19690 ; 279  |// NAND4     36MHz * 133.3ns = 4.788 -> $000203
                            19691 ; 280  |#if (defined(DEBUG))
                            19692 ; 281  |#if (defined(NAND1))
                            19693 ; 282  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19694 ; 283  |#define AUDIBLE_ACELP_SR16KHz_GPSPEED 0x000102         
                            19695 ; 284  |#else 
                            19696 ; 285  |#if (defined(NAND2))
                            19697 ; 286  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19698 ; 287  |#define AUDIBLE_ACELP_SR16KHz_GPSPEED 0x000203         
                            19699 ; 288  |#else 
                            19700 ; 289  |#if (defined(NAND3))
                            19701 ; 290  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19702 ; 291  |#define AUDIBLE_ACELP_SR16KHz_GPSPEED 0x000203         
                            19703 ; 292  |#else 
                            19704 ; 293  |#if (defined(NAND4))
                            19705 ; 294  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19706 ; 295  |#define AUDIBLE_ACELP_SR16KHz_GPSPEED 0x000203         
                            19707 ; 296  |#else 
                            19708 ; 297  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19709 ; 298  |#define AUDIBLE_ACELP_SR16KHz_GPSPEED 0x000102         
                            19710 ; 299  |#endif
                            19711 ; 300  |#endif
                            19712 ; 301  |#endif
                            19713 ; 302  |#endif
                            19714 ; 303  |#else 
                            19715 ; 304  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19716 ; 305  |#define AUDIBLE_ACELP_SR16KHz_GPSPEED 0x000102         
                            19717 ; 306  |#endif
                            19718 ; 307  |//---------   
                            19719 ; 308  |
                            19720 ; 309  |
                            19721 ; 310  |
                            19722 ; 311  |
                            19723 ; 312  |// MP3 speed is 36 MHz  (27.78nS)
                            19724 ; 313  |#define MP3_SPEED 36              
                            19725 ; 314  |// (27+33)*(24/20) = 72
                            19726 ; 315  |#define MP3_PDIV 27              
                            19727 ; 316  |// 72 / (2^1) = 36 MHz
                            19728 ; 317  |#define MP3_DDIV 1               
                            19729 ; 318  |// 1.37v
                            19730 ; 319  |#define MP3_VOLTAGE 0x00000B         
                            19731 ; 320  |// 1.28v
                            19732 ; 321  |#define MP3_BOVOLTAGE 0x000800         
                            19733 ; 322  |
                            19734 ; 323  |// NAND1     36MHz *  83.3ns = 2.999 -> $000102
                            19735 ; 324  |// NAND2     36MHz * 116.7ns = 4.201 -> $000203
                            19736 ; 325  |// NAND4     36MHz * 133.3ns = 4.788 -> $000203
                            19737 ; 326  |#if (defined(DEBUG))
                            19738 ; 327  |#if (defined(NAND1))
                            19739 ; 328  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19740 ; 329  |#define MP3_GPSPEED 0x000102         
                            19741 ; 330  |#else 
                            19742 ; 331  |#if (defined(NAND2))
                            19743 ; 332  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19744 ; 333  |#define MP3_GPSPEED 0x000203         
                            19745 ; 334  |#else 
                            19746 ; 335  |#if (defined(NAND3))
                            19747 ; 336  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19748 ; 337  |#define MP3_GPSPEED 0x000203         
                            19749 ; 338  |#else 
                            19750 ; 339  |#if (defined(NAND4))
                            19751 ; 340  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19752 ; 341  |#define MP3_GPSPEED 0x000203         
                            19753 ; 342  |#else 
                            19754 ; 343  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19755 ; 344  |#define MP3_GPSPEED 0x000102         
                            19756 ; 345  |#endif
                            19757 ; 346  |#endif
                            19758 ; 347  |#endif
                            19759 ; 348  |#endif
                            19760 ; 349  |#else 
                            19761 ; 350  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19762 ; 351  |#define MP3_GPSPEED 0x000102         
                            19763 ; 352  |#endif
                            19764 ; 353  |//---------
                            19765 ; 354  |// ADPCM speed is 36 MHz  (27.78nS)
                            19766 ; 355  |#define ADPCM_SPEED 36              
                            19767 ; 356  |// (27+33)*(24/20) = 72
                            19768 ; 357  |#define ADPCM_PDIV 27              
                            19769 ; 358  |// 72 / (2^1) = 36 MHz
                            19770 ; 359  |#define ADPCM_DDIV 1               
                            19771 ; 360  |// 1.37v
                            19772 ; 361  |#define ADPCM_VOLTAGE 0x00000B         
                            19773 ; 362  |// 1.28v
                            19774 ; 363  |#define ADPCM_BOVOLTAGE 0x000800         
                            19775 ; 364  |
                            19776 ; 365  |// NAND1     36MHz *  83.3ns = 2.999 -> $000102
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19777 ; 366  |// NAND2     36MHz * 116.7ns = 4.201 -> $000203
                            19778 ; 367  |// NAND3|4   36MHz * 133.3ns = 4.788 -> $000203
                            19779 ; 368  |#if (defined(DEBUG))
                            19780 ; 369  |#if (defined(NAND1))
                            19781 ; 370  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19782 ; 371  |#define ADPCM_GPSPEED 0x000102         
                            19783 ; 372  |#else 
                            19784 ; 373  |#if (defined(NAND2))
                            19785 ; 374  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19786 ; 375  |#define ADPCM_GPSPEED 0x000203         
                            19787 ; 376  |#else 
                            19788 ; 377  |#if (defined(NAND3))
                            19789 ; 378  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19790 ; 379  |#define ADPCM_GPSPEED 0x000203         
                            19791 ; 380  |#else 
                            19792 ; 381  |#if (defined(NAND4))
                            19793 ; 382  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19794 ; 383  |#define ADPCM_GPSPEED 0x000203         
                            19795 ; 384  |#else 
                            19796 ; 385  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19797 ; 386  |#define ADPCM_GPSPEED 0x000102         
                            19798 ; 387  |#endif
                            19799 ; 388  |#endif
                            19800 ; 389  |#endif
                            19801 ; 390  |#endif
                            19802 ; 391  |#else 
                            19803 ; 392  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19804 ; 393  |#define ADPCM_GPSPEED 0x000102         
                            19805 ; 394  |#endif
                            19806 ; 395  |//---------
                            19807 ; 396  |// Mixer use requires a min vddd. Reason for this: 
                            19808 ; 397  |// ************
                            19809 ; 398  |// Stmp00004930: Field failure: Distortion from the mixer. Very worst case 
                            19810 ; 399  |//           conditions (at cold) will cause the ADC to not provide any samples.
                            19811 ; 400  |//           All mixer/adc functions must run VDDD>=1.43V. This includes encoding
                            19812 ; 401  |//           and Fmtuner  operation (uses line-in via mixer) in the SDK. 
                            19813 ; 402  |// ************
                            19814 ; 403  |// same as Idle speed defined above
                            19815 ; 404  |#define MIXER_SPEED IDLE_SPEED      
                            19816 ; 405  |// same as idle case defined above
                            19817 ; 406  |#define MIXER_PDIV IDLE_PDIV       
                            19818 ; 407  |// same as idle case defined above
                            19819 ; 408  |#define MIXER_DDIV IDLE_DDIV       
                            19820 ; 409  |// 1.44v
                            19821 ; 410  |#define MIXER_VOLTAGE 0x00000D         
                            19822 ; 411  |// 1.34v as in the MAX_BOVOLTAGE case below which has same Vddd.
                            19823 ; 412  |#define MIXER_BOVOLTAGE 0x000A00         
                            19824 ; 413  |
                            19825 ; 414  |// HW_GPFLASH_TIMING2R - 1dclk/access time for both TDH and TDS
                            19826 ; 415  |#define MIXER_GPSPEED IDLE_GPSPEED    
                            19827 ; 416  |//---------
                            19828 ; 417  |// ADCBASE speed is 36 MHz  (27.78nS)
                            19829 ; 418  |#define ADCBASE_SPEED 36              
                            19830 ; 419  |// (27+33)*(24/20) = 72
                            19831 ; 420  |#define ADCBASE_PDIV 27              
                            19832 ; 421  |// 72 / (2^1) = 36 MHz
                            19833 ; 422  |#define ADCBASE_DDIV 1               
                            19834 ; 423  |// 1.44v Min vddd voltage to operate high res ADC @ low temp.
                            19835 ; 424  |#define ADCBASE_VOLTAGE 0x00000D         
                            19836 ; 425  |// 1.34v Voltages same as max case. Rest matches ADPCM case.
                            19837 ; 426  |#define ADCBASE_BOVOLTAGE 0x000A00         
                            19838 ; 427  |
                            19839 ; 428  |// NAND1     36MHz *  83.3ns = 2.999 -> $000102
                            19840 ; 429  |// NAND2     36MHz * 116.7ns = 4.201 -> $000203
                            19841 ; 430  |// NAND4     36MHz * 133.3ns = 4.788 -> $000203
                            19842 ; 431  |#if (defined(DEBUG))
                            19843 ; 432  |#if (defined(NAND1))
                            19844 ; 433  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19845 ; 434  |#define ADCBASE_GPSPEED 0x000102         
                            19846 ; 435  |#else 
                            19847 ; 436  |#if (defined(NAND2))
                            19848 ; 437  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19849 ; 438  |#define ADCBASE_GPSPEED 0x000203         
                            19850 ; 439  |#else 
                            19851 ; 440  |#if (defined(NAND3))
                            19852 ; 441  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19853 ; 442  |#define ADCBASE_GPSPEED 0x000203         
                            19854 ; 443  |#else 
                            19855 ; 444  |#if (defined(NAND4))
                            19856 ; 445  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19857 ; 446  |#define ADCBASE_GPSPEED 0x000203         
                            19858 ; 447  |#else 
                            19859 ; 448  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19860 ; 449  |#define ADCBASE_GPSPEED 0x000102         
                            19861 ; 450  |#endif
                            19862 ; 451  |#endif
                            19863 ; 452  |#endif
                            19864 ; 453  |#endif
                            19865 ; 454  |#else 
                            19866 ; 455  |// HW_GPFLASH_TIMING2R - 1dclk/access time for TDH and 2 for TDS
                            19867 ; 456  |#define ADCBASE_GPSPEED 0x000102         
                            19868 ; 457  |#endif
                            19869 ; 458  |//---------
                            19870 ; 459  |// MAX speed is 48 MHz (20.83ns)
                            19871 ; 460  |#define MAX_SPEED 48              
                            19872 ; 461  |// (7+33)*(24/20) = 48
                            19873 ; 462  |#define MAX_PDIV 7               
                            19874 ; 463  |// 47.9232 / (2^0) = 48 MHz
                            19875 ; 464  |#define MAX_DDIV 0               
                            19876 ; 465  |// 1.44v
                            19877 ; 466  |#define MAX_VOLTAGE 0x00000D         
                            19878 ; 467  |// 1.34v
                            19879 ; 468  |#define MAX_BOVOLTAGE 0x000A00         
                            19880 ; 469  |
                            19881 ; 470  |// NAND1     48MHz *  83.3ns = 3.998 -> $000202 -> $000203 required (setup needs 3dclk)
                            19882 ; 471  |// NAND2     48MHz * 116.7ns = 5.602 -> $000303
                            19883 ; 472  |// NAND3|4   48MHz * 133.3ns = 6.398 -> $000304
                            19884 ; 473  |#if (defined(DEBUG))
                            19885 ; 474  |#if (defined(NAND1))
                            19886 ; 475  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19887 ; 476  |#define MAX_GPSPEED 0x000203         
                            19888 ; 477  |#else 
                            19889 ; 478  |#if (defined(NAND2))
                            19890 ; 479  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 3 for TDS
                            19891 ; 480  |#define MAX_GPSPEED 0x000303         
                            19892 ; 481  |#else 
                            19893 ; 482  |#if (defined(NAND3))
                            19894 ; 483  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 4 for TDS
                            19895 ; 484  |#define MAX_GPSPEED 0x000304         
                            19896 ; 485  |#else 
                            19897 ; 486  |#if (defined(NAND4))
                            19898 ; 487  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 4 for TDS
                            19899 ; 488  |#define MAX_GPSPEED 0x000304         
                            19900 ; 489  |#else 
                            19901 ; 490  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19902 ; 491  |#define MAX_GPSPEED 0x000203         
                            19903 ; 492  |#endif
                            19904 ; 493  |#endif
                            19905 ; 494  |#endif
                            19906 ; 495  |#endif
                            19907 ; 496  |#else 
                            19908 ; 497  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19909 ; 498  |#define MAX_GPSPEED 0x000203         
                            19910 ; 499  |#endif
                            19911 ; 500  |//---------
                            19912 ; 501  |// WMA speed is 60MHz   (16.67nS)
                            19913 ; 502  |#define WMA_SPEED 60              
                            19914 ; 503  |// (17+33)*(24/20) = 60
                            19915 ; 504  |#define WMA_PDIV 17              
                            19916 ; 505  |// 60 / (2^0) = 60 MHz
                            19917 ; 506  |#define WMA_DDIV 0               
                            19918 ; 507  |// 1.63V
                            19919 ; 508  |#define WMA_VOLTAGE 0x000013         
                            19920 ; 509  |// 1.54V
                            19921 ; 510  |#define WMA_BOVOLTAGE 0x001000         
                            19922 ; 511  |
                            19923 ; 512  |// Matching values for MSC (see note above for IDLE_GPSPEED)
                            19924 ; 513  |#if (defined(DEBUG))
                            19925 ; 514  |#if (defined(NAND1))
                            19926 ; 515  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19927 ; 516  |#define WMA_GPSPEED 0x000203         
                            19928 ; 517  |#else 
                            19929 ; 518  |#if (defined(NAND2))
                            19930 ; 519  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 4 for TDS
                            19931 ; 520  |#define WMA_GPSPEED 0x000304         
                            19932 ; 521  |#else 
                            19933 ; 522  |#if (defined(NAND3))
                            19934 ; 523  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 5 for TDS
                            19935 ; 524  |#define WMA_GPSPEED 0x000305         
                            19936 ; 525  |#else 
                            19937 ; 526  |#if (defined(NAND4))
                            19938 ; 527  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 5 for TDS
                            19939 ; 528  |#define WMA_GPSPEED 0x000305         
                            19940 ; 529  |#else 
                            19941 ; 530  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19942 ; 531  |#define WMA_GPSPEED 0x000203         
                            19943 ; 532  |#endif
                            19944 ; 533  |#endif
                            19945 ; 534  |#endif
                            19946 ; 535  |#endif
                            19947 ; 536  |#else 
                            19948 ; 537  |// HW_GPFLASH_TIMING2R - 2dclk/access time for TDH and 3 for TDS
                            19949 ; 538  |#define WMA_GPSPEED 0x000203         
                            19950 ; 539  |#endif
                            19951 ; 540  |//---------
                            19952 ; 541  |// MP3ENCODE speed is 65MHz   (15.35nS) but see next line
                            19953 ; 542  |#define MP3ENCODE_SPEED 65              
                            19954 ; 543  |// (22+33)*(24/20) = 65; but   (20+33)*(24/20)=63.6 (T=15.723 ns)
                            19955 ; 544  |#define MP3ENCODE_PDIV 20              
                            19956 ; 545  |// 65.1264 / (2^0) = 65 MHz;   63.6 / 2^0 = 63.6 MHz
                            19957 ; 546  |#define MP3ENCODE_DDIV 0               
                            19958 ; 547  |// 1.82V
                            19959 ; 548  |#define MP3ENCODE_VOLTAGE 0x000019         
                            19960 ; 549  |// 1.76 v 
                            19961 ; 550  |#define MP3ENCODE_BOVOLTAGE 0x001700         
                            19962 ; 551  |
                            19963 ; 552  |// NAND1     65MHz *  83.3ns = 5.415 -> $000303
                            19964 ; 553  |// NAND2     65MHz * 116.7ns = 7.586 -> $000404
                            19965 ; 554  |// NAND3|4   65MHz * 133.3ns = 8.665 -> $000405
                            19966 ; 555  |#if (defined(DEBUG))
                            19967 ; 556  |#if (defined(NAND1))
                            19968 ; 557  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 3 for TDS
                            19969 ; 558  |#define MP3ENCODE_GPSPEED 0x000303         
                            19970 ; 559  |#else 
                            19971 ; 560  |#if (defined(NAND2))
                            19972 ; 561  |// HW_GPFLASH_TIMING2R - 4dclk/access time for TDH and 4 for TDS
                            19973 ; 562  |#define MP3ENCODE_GPSPEED 0x000404         
                            19974 ; 563  |#else 
                            19975 ; 564  |#if (defined(NAND3))
                            19976 ; 565  |// HW_GPFLASH_TIMING2R - 4dclk/access time for TDH and 5 for TDS
                            19977 ; 566  |#define MP3ENCODE_GPSPEED 0x000405         
                            19978 ; 567  |#else 
                            19979 ; 568  |#if (defined(NAND4))
                            19980 ; 569  |// HW_GPFLASH_TIMING2R - 4dclk/access time for TDH and 5 for TDS
                            19981 ; 570  |#define MP3ENCODE_GPSPEED 0x000405         
                            19982 ; 571  |#else 
                            19983 ; 572  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 3 for TDS
                            19984 ; 573  |#define MP3ENCODE_GPSPEED 0x000303         
                            19985 ; 574  |#endif
                            19986 ; 575  |#endif
                            19987 ; 576  |#endif
                            19988 ; 577  |#endif
                            19989 ; 578  |#else 
                            19990 ; 579  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 3 for TDS
                            19991 ; 580  |#define MP3ENCODE_GPSPEED 0x000303         
                            19992 ; 581  |#endif
                            19993 ; 582  |//---------
                            19994 ; 583  |// x:HW_GPFLASH_TIMING2R 
                            19995 ; 584  |//      TDS = 25ns Min data setup time. Note usbmsc says 45 for min. 20ns is a typical nand flash.
                            19996 ; 585  |//      TDH = 15ns Min data hold  time. Note usbmsc says 30 for min. But has min (tds+tdh)>50ns.
                            19997 ; 586  |//      TDS + TDH must be > 50 nS
                            19998 ; 587  |// PEAK speed is 75.6MHz T=13.2275 ns  
                            19999 ; 588  |#define PEAK_SPEED 75              
                            20000 ; 589  |// (29+33)*(24/20) = 75.6          
                            20001 ; 590  |#define PEAK_PDIV 30              
                            20002 ; 591  |// 75.6 / (2^0) = 75.6 MHz     
                            20003 ; 592  |#define PEAK_DDIV 0               
                            20004 ; 593  |// 1.92V 
                            20005 ; 594  |#define PEAK_VOLTAGE 0x00001c         
                            20006 ; 595  |// 1.82V                        
                            20007 ; 596  |#define PEAK_BOVOLTAGE 0x001900         
                            20008 ; 597  |
                            20009 ; 598  |// DEBUG builds have different setup&hold due to engineering board's capacitance. RETAIL BUILDS USE ONE VALUE. 
                            20010 ; 599  |// ns times below are from usbmsc's total (tds + tdh) = setup+hold. USBMSC runs at 60 MHz.
                            20011 ; 600  |// NAND1     75.6 MHz *  83.3ns = 6.247 DCLKs so 7 -> $000304      
                            20012 ; 601  |// NAND2     75.6 MHz * 116.7ns = 8.823 DCLKs so 9 -> $000405      
                            20013 ; 602  |// NAND3|4   75.6 MHz * 133.3ns = 10.078 DCLKs     -> $000505 If issues try 000506 here (TDS=6).     
                            20014 ; 603  |#if (defined(DEBUG))
                            20015 ; 604  |#if (defined(NAND1))
                            20016 ; 605  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 4 for TDS
                            20017 ; 606  |#define PEAK_GPSPEED 0x000304         
                            20018 ; 607  |#else 
                            20019 ; 608  |#if (defined(NAND2))
                            20020 ; 609  |// HW_GPFLASH_TIMING2R - 4dclk/access time for TDH and 5 for TDS; nand1 settings work on multinand if good layout.
                            20021 ; 610  |#define PEAK_GPSPEED 0x000405         
                            20022 ; 611  |#else 
                            20023 ; 612  |#if (defined(NAND3))
                            20024 ; 613  |// HW_GPFLASH_TIMING2R - 5dclk/access time for TDH and 5 for TDS
                            20025 ; 614  |#define PEAK_GPSPEED 0x000505         
                            20026 ; 615  |#else 
                            20027 ; 616  |#if (defined(NAND4))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20028 ; 617  |// HW_GPFLASH_TIMING2R - 5dclk/access time for TDH and 5 for TDS
                            20029 ; 618  |#define PEAK_GPSPEED 0x000505         
                            20030 ; 619  |#else 
                            20031 ; 620  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 4 for TDS
                            20032 ; 621  |#define PEAK_GPSPEED 0x000304         
                            20033 ; 622  |#endif
                            20034 ; 623  |#endif
                            20035 ; 624  |#endif
                            20036 ; 625  |#endif
                            20037 ; 626  |#else 
                            20038 ; 627  |// HW_GPFLASH_TIMING2R - 3dclk/access time for TDH and 4 for TDS
                            20039 ; 628  |#define PEAK_GPSPEED 0x000304         
                            20040 ; 629  |#endif
                            20041 ; 630  |
                            20042 ; 631  |//------------------------------------------
                            20043 ; 632  |//> 
                            20044 ; 633  |// Multi-Client Clock Speed Adjustment API:  
                            20045 ; 634  |// Prototypes here are exported from sysspeed.inc to sysspeed.h by incToC util
                            20046 ; 635  |_reentrant INT SysGetSpeed(void);
                            20047 ; 636  |//             or asm input params: none
                            20048 ; 637  |//             Returns the CurrentSpeedIndex
                            20049 ; 638  |_reentrant INT SysSpeedIncrease(int SpeedIndex, int clockUserId); 
                            20050 ; 639  |//             or asm input parms:            x1,              y0
                            20051 ; 640  |//       Returns resulting SpeedIndex from SysGetSpeed
                            20052 ; 641  |_reentrant INT SysSpeedClockFree(int clockUserId);  
                            20053 ; 642  |//                   or asm input:              y0
                            20054 ; 643  |//       Returns resulting SpeedIndex from SysGetSpeed
                            20055 ; 644  |// Generally, new clock adjusting modules must insert a bit equate below 
                            20056 ; 645  |// (speed ordered) and use the API calls:
                            20057 ; 646  |// SysSpeedIncrease(SpeedIndex, MY_BIT) and SysSpeedClockFree(MY_BIT) 
                            20058 ; 647  |// passing in the client's clockUserId below for these calls
                            20059 ; 648  |// which manipulate a corresponding speed client bit in clockUserFlag.
                            20060 ; 649  |// SysSpeedClockFree(MY_BIT) reduces clock speed to that of highest active client
                            20061 ; 650  |// or IDLE. Each bit here is a client active indicator managed via this speed API.
                            20062 ; 651  |// clockUserFlag  dc      0      ; Module private var defined in sysspeed.asm
                            20063 ; 652  |// ORDER MUST BE LOWEST TO HIGHEST FREQ so insert your new speed client ID and renumber.
                            20064 ; 653  |// Exec turns up the clock on button events. 
                            20065 ; 654  |#define SPEED_CLIENT_EXECUTIVE 0 
                            20066 ; 655  |#define SPEED_CLIENT_AUDIBLE_MP3 1
                            20067 ; 656  |#define SPEED_CLIENT_STFM_DEC 2
                            20068 ; 657  |#define SPEED_CLIENT_AUDIBLE_ACELP 3
                            20069 ; 658  |#define SPEED_CLIENT_STFM_EQ 4
                            20070 ; 659  |#define SPEED_CLIENT_MP3_DEC 5
                            20071 ; 660  |#define SPEED_CLIENT_ADPCM_DEC 6
                            20072 ; 661  |#define SPEED_CLIENT_ADPCM_ENC 7
                            20073 ; 662  |#define SPEED_CLIENT_MIXER 8
                            20074 ; 663  |#define SPEED_CLIENT_MP3_DEC_SYNC 9
                            20075 ; 664  |// Music and voice parser share this client
                            20076 ; 665  |#define SPEED_CLIENT_PARSER 10 
                            20077 ; 666  |// Same speed as parser.asm or higher. C client. Rename if using.
                            20078 ; 667  |#define SPEED_CLIENT_MENU_WOW 11 
                            20079 ; 668  |#define SPEED_CLIENT_MVIDEO 12
                            20080 ; 669  |#define SPEED_CLIENT_METADATA 13
                            20081 ; 670  |#define SPEED_CLIENT_PLAYERLIB 14
                            20082 ; 671  |#define SPEED_CLIENT_PLAYLIST1 15 
                            20083 ; 672  |#define SPEED_CLIENT_WMA_DEC 16
                            20084 ; 673  |// Move line when used to maintain speed order
                            20085 ; 674  |#define SPEED_CLIENT_MP3_ENC 17 
                            20086 ; 675  |#define SPEED_CLIENT_JPEG_DEC 18 
                            20087 ; 676  |// change value to match high bit pos above
                            20088 ; 677  |#define SPEED_CLIENT_HIGHEST_USER 18 
                            20089 ; 678  |
                            20090 ; 679  |// Above equates are exported to incToC utility generated sysspeed.h file.
                            20091 ; 680  |// <
                            20092 ; 681  |//-----------------------------------------
                            20093 ; 682  |
                            20094 ; 683  |
                            20095 ; 684  |#endif // IF (!@def(SYSSPEED_INC))
                            20096 ; 685  |
                            20097 ; 686  |
                            20098 ; 687  |
                            20099 
                            20101 
                            20102 ; 25   |#endif
                            20103 ; 26   |
                            20104 ; 27   |#pragma optimize 1
                            20106 ; 28   |#define STFM1000_ENABLE_MONITOR_SIGNAL_QUALITY 1
                            20107 ; 29   |BOOL  g_STFM1000_CustomerForceMono = FALSE; //STMP00013255
                            20108 
                            20109 
Y:0000                      20110         org     y,".ydatastfm1000",init:
                            20111 Fg_STFM1000_CustomerForceMono:
Y:0000 000000               20112         dc      $000000
                            20115 
                            20116 ; 30   |
                            20117 ; 31   |#ifdef USE_PLAYLIST2
                            20118 ; 32   |static DWORD GetDclkCount(void);
                            20119 ; 33   |#endif
                            20120 ; 34   |
                            20121 ; 35   |#ifdef USE_PLAYLIST3
                            20122 ; 36   |DWORD GetDclkCount(void);
                            20123 ; 37   |#endif
                            20124 ; 38   |
                            20125 ; 39   |
                            20126 ; 40   |void SetDclkCount(DWORD dwCount);
                            20127 ; 41   |
                            20128 ; 42   |struct ErrorBits g_wFMTunerError;
                            20129 ; 43   |
                            20130 ; 44   |#ifdef CLCD_16BIT   
                            20131 ; 45   |BOOL g_blIsTB2Fm = TRUE;
                            20132 ; 46   |#endif
                            20133 ; 47   |
                            20134 ; 48   |/* FM Tuner Global variables */
                            20135 ; 49   |WORD g_wCurrentFrequency=96700;//90500;
                            20136 
                            20137 Fg_wCurrentFrequency:
Y:0001 0179BC               20138         dc      $0179bc
                            20141 
                            20142 ; 50   |BOOL _X g_bTunedStereoStation;          //
                            20143 ; 51   |BOOL _X g_bSearchEndAtBandLimit = TRUE; //
                            20144 
                            20145 
X:0000                      20146         org     x,".xdatastfm1000",init:
                            20147 Fg_bSearchEndAtBandLimit:
X:0000 000001               20148         dc      $000001
                            20151 
                            20152 ; 52   |WORD  g_wCurrentPreset;               //
                            20153 ; 53   |volatile WORD g_wRawRSSIData;
                            20154 ; 54   |extern int _X g_iTunerProcessIntervalMs; //
                            20155 ; 55   |#ifndef MIN_FILTER
                            20156 ; 56   |extern _reentrant void sw_stereocontrol_xcall(unsigned short sd_audio_Rssi_u16);
                            20157 ; 57   |extern _reentrant void sw_stereocontrol_bwsweep(void);
                            20158 ; 58   |extern sw_stereocontrol_t sw_stereocontrol;
                            20159 ; 59   |extern int g_sd_audio_pCoefForcedMono_u1;
                            20160 ; 60   |#else
                            20161 ; 61   |extern int sd_audio_pCoefForcedMono_u1;
                            20162 ; 62   |#endif
                            20163 ; 63   |extern _reentrant INT SysGetSpeed(void);
                            20164 ; 64   |#ifdef FUNCLET
                            20165 ; 65   |    #pragma asm
                            20166         extern SysCallFunclet
                            20167         extern SysCallFunclet2
                            20168 ; 68   |    #pragma endasm
                            20169 ; 69   |#endif
                            20170 
                            20175 
                            20176 ; 70   |FMTunerPreset   g_astPresetStations[NUMBER_OF_PRESETS];
                            20177 ; 71   |#ifdef SD_USE_50KHZ_TUNING_GRID
                            20178 ; 72   |FMTunerSearchStatus g_astSearchStations;
                            20179 ; 73   |#else
                            20180 ; 74   |FMTunerPreset g_astSearchStations;
                            20181 ; 75   |#endif
                            20182 
                            20190 
                            20191 ; 76   |
                            20192 ; 77   |eOptimizeChannelState s_eOptimizeChannelState = OPTIMIZE_CHANNEL_STATE_COMPLETE;
                            20193 
                            20194 
Y:0002                      20195         org     y,".ydatastfm1000",init:
                            20196 Fs_eOptimizeChannelState:
Y:0002 000004               20197         dc      $000004
                            20207 
                            20208 ; 78   |eMonitorSignalQualityState s_eMonitorSignalQualityState =  MONITOR_SIGNAL_QUALITY_STATE_COMPLETE;
                            20209 
                            20210 Fs_eMonitorSignalQualityState:
Y:0003 000004               20211         dc      $000004
                            20214 
                            20215 ; 79   |/* FM Tuner Static variables */
                            20216 ; 80   |WORD s_wCurrentFMFrequency;
                            20217 ; 81   |WORD s_wBeginSearchFMFrequency;
                            20218 ; 82   |INT  s_iFMTunerSearchStatus = NOT_SEARCHING; // 0 - idle, 1 searching up, -1 searching down
                            20219 
                            20220 Fs_iFMTunerSearchStatus:
Y:0004 000000               20221         dc      $000000
                            20224 
                            20225 ; 83   |BOOL _X s_bTunerSearchHitBandLimit;
                            20226 ; 84   |INT  s_iFMPresetCount;
                            20227 ; 85   |volatile INT  s_iFMSignalStrengthRSSI;
                            20228 ; 86   |#ifdef SD_USE_50KHZ_TUNING_GRID
                            20229 ; 87   |volatile INT  s_iFMSignalStrengthMpxDc;
                            20230 ; 88   |WORD s_wDisplayFMFrequency;
                            20231 ; 89   |#endif
                            20232 ; 90   |//INT  s_iFMTunerSensitivity = 20;      /* Tuner sensitivity, i.e.RSSI after decoded, the value is 0-70 */
                            20233 ; 91   |WORD wCountForTriggerMonitorQuality = 0;   // reset it when find a station or Rssi ten read
                            20234 
                            20235 FwCountForTriggerMonitorQuality:
Y:0005 000000               20236         dc      $000000
                            20239 
                            20240 ; 92   |BOOL bIsWeakSignal = FALSE;     // Reset to 0 whenever we change to a new station
                            20241 
                            20242 FbIsWeakSignal:
Y:0006 000000               20243         dc      $000000
                            20246 
                            20247 ; 93   |WORD s_wTrackTableIndex = 0;
                            20248 
                            20249 Fs_wTrackTableIndex:
Y:0007 000000               20250         dc      $000000
                            20253 
                            20254 ; 94   |BOOL _X bIsFirstTimeEnterFMMode = TRUE;  //
                            20255 
                            20256 
X:0001                      20257         org     x,".xdatastfm1000",init:
                            20258 FbIsFirstTimeEnterFMMode:
X:0001 000001               20259         dc      $000001
                            20262 
                            20263 ; 95   |BOOL bIsFirstTimeToNewStation = TRUE;
                            20264 
                            20265 
Y:0008                      20266         org     y,".ydatastfm1000",init:
                            20267 FbIsFirstTimeToNewStation:
Y:0008 000001               20268         dc      $000001
                            20271 
                            20272 ; 96   |// // inserted these statics dec 4 2006
                            20273 ; 97   |WORD wSd_ctl_Confidence_u16 = 0;
                            20274 
                            20275 FwSd_ctl_Confidence_u16:
Y:0009 000000               20276         dc      $000000
                            20279 
                            20280 ; 98   |DWORD dwBias1Up;
                            20281 ; 99   |DWORD dwBias1Down;
                            20282 ; 100  |INT global_filtered_rssi = 0;  // DEBUG!!!
                            20283 
                            20284 Fglobal_filtered_rssi:
Y:000A 000000               20285         dc      $000000
                            20288 
                            20289 ; 101  |INT count_MonitorQuality = 0;  // DEBUG!!!
                            20290 
                            20291 Fcount_MonitorQuality:
Y:000B 000000               20292         dc      $000000
                            20337 
                            20338 ; 102  |
                            20339 ; 103  |// tuning process data structures, including shadow registers
                            20340 ; 104  |STFM1000Tune_t StfmTuneData;
                            20341 ; 105  |
                            20342 ; 106  |
                            20343 ; 107  |// Register settings for powerup. Allocated in X to save Y and fit janus player
                            20344 ; 108  |#ifdef PLAYER
                            20345 ; 109  |STFM1000Tune_t _X StfmTuneDefault =
                            20346 ; 110  |#else
                            20347 ; 111  |STFM1000Tune_t _X StfmTuneDefault =
                            20348 ; 112  |#endif
                            20349 
                            20350 
X:0002                      20351         org     x,".xdatastfm1000",init:
                            20352 FStfmTuneDefault:
X:0002 044F01 000000        20353         dc      $044f01,$000000,$5ebcf0,$00001c,$0001b6,$000000,$b80008,$00009f
       5EBCF0 00001C              
       0001B6 000000              
       B80008 00009F              
X:000A 06E444 0000C5        20354         dc      $06e444,$0000c5,$02190b,$000014,$5bf052,$000052,$00d106,$000068
       02190B 000014              
       5BF052 000052              
       00D106 000068              
X:0012 003ECB 000000        20355         dc      $003ecb,$000000,$30222d,$000000,$080009,$000005,$007205,$000000
       30222D 000000              
       080009 000005              
       007205 000000              
X:001A 002000 000010        20356         dc      $002000,$000010,$000000,$00007f,$033282,$000000,$2c8802,$000000
       000000 00007F              
       033282 000000              
       2C8802 000000              
X:0022 140050 000000        20357         dc      $140050,$000000,$014210,$000000,$000014,$00012c,$000064,$000011
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
       014210 000000              
       000014 00012C              
       000064 000011              
X:002A 000000 000014        20358         dc      $000000,$000014,$000000,$000008,$00000f,$00001b,$000008,$000000
       000000 000008              
       00000F 00001B              
       000008 000000              
X:0032 000000 000000        20359         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
X:003A 000000 000000        20360         dc      $000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000                     
                            20363 
                            20364 ; 113  |{
                            20365 ; 114  |    // shadow images written to on-chip registers
                            20366 ; 115  |    // initialized to TA2 values, and re-initialized in STFM1000RegValsReset if necessary
                            20367 ; 116  |    0x00044F01, // TUNE1_REG
                            20368 ; 117  |    0x1C5EBCF0, // Shadow reg for SDNOMINAL_REG
                            20369 ; 118  |    0x000001B6, // Shadow reg for PILOTTRACKING_REG
                            20370 ; 119  |    0x9fb80008, // Shadow reg for INITIALIZATION1_REG
                            20371 ; 120  |    0xC506e444, // Shadow reg for INITIALIZATION2_REG  Var
                            20372 ; 121  |    0x1402190B, // Shadow reg for INITIALIZATION3_REG
                            20373 ; 122  |    0x525bf052, // Shadow reg for INITIALIZATION4_REG
                            20374 ; 123  |    0x6800d106, // Shadow reg for INITIALIZATION5_REG
                            20375 ; 124  |    0x00003ecb, // Shadow reg for INITIALIZATION6_REG
                            20376 ; 125  |    0x0030222D, // ShadowRef reg for ANALOG1_REG
                            20377 ; 126  |    0x05080009, // ShadowLna reg for ANALOG2_REG
                            20378 ; 127  |    0x00007205, // ShadowMixFlt reg for ANALOG3_REG
                            20379 ; 128  |    0x10002000, // ShadowClk1 reg for ANALOG4_REG
                            20380 ; 129  |    0x7F000000, // ShadowClk2 reg for ANALOG4_REG
                            20381 ; 130  |    0x00033282, // ShadowAdc reg for ANALOG5_REG
                            20382 ; 131  |    0x002c8802, // Shadow reg for AGC_CONTROL1_REG
                            20383 ; 132  |    0x00140050, // Shadow reg for AGC_CONTROL2_REG
                            20384 ; 133  |    0x00014210, // Shadow reg for DATAPATH_REG
                            20385 ; 134  |    // tuning parameters
                            20386 ; 135  |    TUNE_RSSI_THRESH,
                            20387 ; 136  |    TUNE_MPX_DC_THRESH,
                            20388 ; 137  |    ADJACENT_CHAN_THRESH,
                            20389 ; 138  |    PILOT_EST_THRESH,
                            20390 ; 139  |    // parameters for monitoring AGC
                            20391 ; 140  |    0,      // sd_ctl_AgcMonitorDisabled;
                            20392 ; 141  |    AGC_MSEC_PER_CYCLE,
                            20393 ; 142  |    0,      //sd_ctl_LnaDriving_u1
                            20394 ; 143  |    LNA_TURN_OFF_THRESH,
                            20395 ; 144  |    LNA_TURN_ON_THRESH,
                            20396 ; 145  |    LNA_TURN_OFF_REG_REF,
                            20397 ; 146  |    LNA_TURN_ON_REG_REF,
                            20398 ; 147  |    // tuning data being maintained
                            20399 ; 148  |    0,0,0,0,
                            20400 ; 149  |    // data read from on-chip registers
                            20401 ; 150  |    0,0,
                            20402 ; 151  |    0   //VERSION_TB2
                            20403 ; 152  |};
                            20404 ; 153  |
                            20405 ; 154  |
                            20406 ; 155  |
                            20407 ; 156  |//! Tuning Tables (Precalculated)
                            20408 ; 157  |// Since tune1 register only use bits[20:0] 21 bits, so we make it as WORD instead of DWORD to save memory
                            20409 ; 158  |//#define  STFM1000_PLL_TABLE
                            20410 ; 159  |#ifdef STFM1000_PLL_TABLE
                            20411 ; 160  |WORD _X sdc_ctl_TableTune1_w[325] =
                            20412 ; 161  |{
                            20413 ; 162  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20414 ; 163  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20415 ; 164  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20416 ; 165  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20417 ; 166  |
                            20418 ; 167  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20419 ; 168  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20420 ; 169  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20421 ; 170  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20422 ; 171  |
                            20423 ; 172  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20424 ; 173  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20425 ; 174  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20426 ; 175  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20427 ; 176  |
                            20428 ; 177  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
                            20429 ; 178  |};  // tuning table for programming TUNE1_REG[23:0]
                            20430 ; 179  |
                            20431 ; 180  |DWORD _X sdc_ctl_TableSdnom_dw[325] =
                            20432 ; 181  |{
                            20433 ; 182  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20434 ; 183  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20435 ; 184  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20436 ; 185  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20437 ; 186  |
                            20438 ; 187  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20439 ; 188  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20440 ; 189  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20441 ; 190  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20442 ; 191  |
                            20443 ; 192  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20444 ; 193  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20445 ; 194  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20446 ; 195  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,
                            20447 ; 196  |
                            20448 ; 197  |    0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
                            20449 ; 198  |};  // tuning table for setting SDNOMINAL_REG[31:0]
                            20450 ; 199  |#endif
                            20451 ; 200  |// * Gear Shift Pilot Tracking on chip
                            20452 ; 201  |// (tspec_v09y.pdf::SD_GearShiftPilotTracking)
                            20453 ; 202  |
                            20454 ; 203  |
                            20455 ; 204  |#ifdef PLAYER
                            20456 ; 205  |STFM1000GearShiftPilotTrackingTable_t
                            20457 ; 206  |#else
                            20458 ; 207  |_X STFM1000GearShiftPilotTrackingTable_t
                            20459 ; 208  |#endif
                            20460 
                            20465 
                            20466 ; 209  |STFM1000TrackTable[] =
                            20467 ; 210  |#if 0
                            20468 ; 211  |    {
                            20469 ; 212  |     {10, 0x82A5},
                            20470 ; 213  |     { 6, 0x8395},
                            20471 ; 214  |     { 6, 0x8474},
                            20472 ; 215  |     { 8, 0x8535},
                            20473 ; 216  |     {20, 0x8632},
                            20474 ; 217  |     {50, 0x8810},
                            20475 ; 218  |     { 0, 0x0000},   // table stops processing at 0,0
                            20476 ; 219  |     { 0, 0x0000},
                            20477 ; 220  |     { 0, 0x0000}}; // leave room to tweak in more steps
                            20478 ; 221  |#else
                            20479 
                            20480 
Y:000C                      20481         org     y,".ydatastfm1000",init:
                            20482 FSTFM1000TrackTable:
Y:000C 00000A 000000        20483         dc      $00000a,$000000,$0081b6,$000000,$000006,$000000,$0082a5,$000000
       0081B6 000000              
       000006 000000              
       0082A5 000000              
Y:0014 000006 000000        20484         dc      $000006,$000000,$008395,$000000,$000008,$000000,$008474,$000000
       008395 000000              
       000008 000000              
       008474 000000              
Y:001C 000014 000000        20485         dc      $000014,$000000,$008535,$000000,$000032,$000000,$008632,$000000
       008535 000000              
       000032 000000              
       008632 000000              
Y:0024 000000 000000        20486         dc      $000000,$000000,$008810,$000000,$000000,$000000,$000000,$000000
       008810 000000              
       000000 000000              
       000000 000000              
Y:002C 000000 000000        20487         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
                            20491 
                            20492 ; 222  |    // Updated table
                            20493 ; 223  |    {
                            20494 ; 224  |     {10, 0x81b6},
                            20495 ; 225  |     { 6, 0x82A5},
                            20496 ; 226  |     { 6, 0x8395},
                            20497 ; 227  |     { 8, 0x8474},
                            20498 ; 228  |     {20, 0x8535},
                            20499 ; 229  |     {50, 0x8632},
                            20500 ; 230  |     { 0, 0x8810},
                            20501 ; 231  |     { 0, 0x0000},   // table stops processing at 0,0
                            20502 ; 232  |     { 0, 0x0000},
                            20503 ; 233  |     { 0, 0x0000}}; // leave room to tweak in more steps
                            20504 ; 234  |#endif
                            20505 ; 235  |
                            20506 ; 236  |// Note: Since 32 <= cicosr <= 45 , a lookup table for Factor/cicosr can be used
                            20507 ; 237  |// This data is used by STFM1000Reset or STFM1000QuickTune() function dependingu upon
                            20508 ; 238  |// the value of #define STFM1000_PLL_TABLE.
                            20509 ; 239  |//#define OPTIMIZED_TUNE1_SDNOMINAL_CAL
                            20510 ; 240  |#ifdef OPTIMIZED_TUNE1_SDNOMINAL_CAL
                            20511 ; 241  |// If we save this table in X memory, something is messed up
                            20512 ; 242  |const DWORD _Y FractCicosr[14] =   {  // All values are pre-scaled by 2048 for rounding
                            20513 ; 243  |                                 (DWORD)100.0e3 * 4096 / 3.0 /32.0 / 228.0e3 * 134217728,
                            20514 ; 244  |                                 (DWORD)100.0e3 * 4096 / 3.0 /33.0 / 228.0e3 * 134217728,
                            20515 ; 245  |                                 (DWORD)100.0e3 * 4096 / 3.0 /34.0 / 228.0e3 * 134217728,
                            20516 ; 246  |                                 (DWORD)100.0e3 * 4096 / 3.0 /35.0 / 228.0e3 * 134217728,
                            20517 ; 247  |                                 (DWORD)100.0e3 * 4096 / 3.0 /36.0 / 228.0e3 * 134217728,
                            20518 ; 248  |                                 (DWORD)100.0e3 * 4096 / 3.0 /37.0 / 228.0e3 * 134217728,
                            20519 ; 249  |                                 (DWORD)100.0e3 * 4096 / 3.0 /38.0 / 228.0e3 * 134217728,
                            20520 ; 250  |                                 (DWORD)100.0e3 * 4096 / 3.0 /39.0 / 228.0e3 * 134217728,
                            20521 ; 251  |                                 (DWORD)100.0e3 * 4096 / 3.0 /40.0 / 228.0e3 * 134217728,
                            20522 ; 252  |                                 (DWORD)100.0e3 * 4096 / 3.0 /41.0 / 228.0e3 * 134217728,
                            20523 ; 253  |                                 (DWORD)100.0e3 * 4096 / 3.0 /42.0 / 228.0e3 * 134217728,
                            20524 ; 254  |                                 (DWORD)100.0e3 * 4096 / 3.0 /43.0 / 228.0e3 * 134217728,
                            20525 ; 255  |                                 (DWORD)100.0e3 * 4096 / 3.0 /44.0 / 228.0e3 * 134217728,
                            20526 ; 256  |                                 (DWORD)100.0e3 * 4096 / 3.0 /45.0 / 228.0e3 * 134217728
                            20527 ; 257  |                                };
                            20528 ; 258  |const _fract OneFifteenth = 0.066666666666666666666667;
                            20529 ; 259  |const _fract OneTwelfth   = 0.083333333333333333333333;
                            20530 ; 260  |
                            20531 ; 261  |volatile DWORD FC;
                            20532 ; 262  |#endif
                            20533 ; 263  |
                            20534 ; 264  |//#define DEBUG_MONITOR_SIGNAL_QUALITY
                            20535 ; 265  |#ifdef DEBUG_MONITOR_SIGNAL_QUALITY
                            20536 ; 266  |#define STFM1000_MONITOR_SIGNAL_LOG_MAX   240
                            20537 ; 267  |struct stLogWord {
                            20538 ; 268  |        WORD wMonitorQualityCurrentState    :4;
                            20539 ; 269  |        WORD wOptimizedChannelCurrentState  :4;
                            20540 ; 270  |        WORD wIsPolitPreset                 :4;
                            20541 ; 271  |        WORD wWeakSignal                        :4;
                            20542 ; 272  |        WORD wFunctionIndex                 :8;
                            20543 ; 273  |};
                            20544 ; 274  |
                            20545 ; 275  |#if 0
                            20546 ; 276  |typedef struct
                            20547 ; 277  |{
                            20548 ; 278  |    struct stLogWord stLogFirstWord;
                            20549 ; 279  |    WORD      wRssiValue;
                            20550 ; 280  |    WORD      wLnaRms;
                            20551 ; 281  |    WORD      wLnaTh;
                            20552 ; 282  |    WORD      wAgcOut;
                            20553 ; 283  |}stSTFM1000MonitorQuality;
                            20554 ; 284  |WORD s_wLnaRms = 0;
                            20555 ; 285  |WORD s_wLnaTh = 0;
                            20556 ; 286  |WORD s_wAgcOut= 0;
                            20557 ; 287  |WORD s_wCurrentTime;
                            20558 ; 288  |extern WORD g_wTunerMessage;
                            20559 ; 289  |
                            20560 ; 290  |#else
                            20561 ; 291  |typedef struct
                            20562 ; 292  |{
                            20563 ; 293  |    WORD      wRssiValue;
                            20564 ; 294  |    WORD      wMpxAdc;
                            20565 ; 295  |    BOOL      bIsStation;
                            20566 ; 296  |    WORD      wModulo;
                            20567 ; 297  |    WORD      wFreq;
                            20568 ; 298  |}stSTFM1000MonitorQuality;
                            20569 ; 299  |WORD s_wMpxAdc = 0;
                            20570 ; 300  |WORD s_wIsSatation = 0;
                            20571 ; 301  |WORD s_wModulo= 0;
                            20572 ; 302  |WORD s_wCurrentTime;
                            20573 ; 303  |
                            20574 ; 304  |#endif
                            20575 ; 305  |
                            20576 ; 306  |#ifdef DEBUG_MONITOR_SIGNAL_QUALITY
                            20577 ; 307  |WORD wMonitorQualityIndex = 0;
                            20578 ; 308  |void LogDebugFunction(WORD wFunctionIndex);
                            20579 ; 309  |#define STFM1000_MONITOR_SIGNAL_LOG_MAX   256
                            20580 ; 310  |stSTFM1000MonitorQuality _X stSTFM100MonitorQualityLogArrary[STFM1000_MONITOR_SIGNAL_LOG_MAX];
                            20581 ; 311  |WORD wTimeLogArray[STFM1000_MONITOR_SIGNAL_LOG_MAX];
                            20582 ; 312  |WORD wLogIndex = 0;
                            20583 ; 313  |WORD wLogTimeDelta =0;
                            20584 ; 314  |#endif
                            20585 ; 315  |
                            20586 ; 316  |
                            20587 ; 317  |
                            20588 ; 318  |#endif // endif DEBUG_MONITOR_SIGNAL_QUALITY
                            20589 ; 319  |
                            20590 ; 320  |#ifdef FM_USA_REGION        // If in US region
                            20591 ; 321  |BOOL s_bSearchFromTopBand = FALSE;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20592 ; 322  |#endif
                            20593 ; 323  |//DWORD swSteelyDan[100];
                            20594 ; 324  |static void do_nothing(void) {      // This function is here to make the dang FUNCLET, below, work right.
                            20595 
P:0000                      20596         org     p,".ptextstfm1000":
                            20600 Fdo_nothing:
                            20601 
                            20602 ; 325  |                                    // Without this here, the compiler switches back to ".ptext..." as soon
                            20603 ; 326  |                                    // as it hits some code.  With this here, the "org p,"SYSFUNCLET_..._P"
                            20604 ; 327  |                                    // stays in effect.
                            20605 ; 328  |                                    // The function is declared "static" so that it's invisible outside this file.
                            20606 ; 329  |  return;
                            20607 ; 330  |}
                            20608 
P:0000 00000C         4    420610         rts
                            20612 
                            20613 ; 331  |////////////////////////////////////////////////////////////////////////////////
                            20614 ; 332  |//!
                            20615 ; 333  |//! \brief      TunerInit
                            20616 ; 334  |//! \fntype     Function
                            20617 ; 335  |//!
                            20618 ; 336  |//! Initializes Stfm static data.  This includes initializing the values in two
                            20619 ; 337  |//! tables that convert a displayed frequency to the contents of the two major
                            20620 ; 338  |//! tuning control registers TUNE1_REG and SDNOMINAL_REG  (see below).
                            20621 ; 339  |//! initializes physical interface to tuner (ddi_i2c_Open(),  to verify that
                            20622 ; 340  |//! i2c hardware is up and running, and that a STFM1000 is located at the
                            20623 ; 341  |//! expected address.) initializes Audio Processing channel from tuner
                            20624 ; 342  |//! (ddi_dri_Init()) (registers for alert from tuner; this callback is a
                            20625 ; 343  |//! parameter in the DRI stream control block) allocates memory for the
                            20626 ; 344  |//! TunerSettingsTable data structure. initializes tuner itself in power-down
                            20627 ; 345  |//! mode.
                            20628 ; 346  |//!
                            20629 ; 347  |//! \param[in]  pTunerObject     Pointer to Tuner Object.
                            20630 ; 348  |//!
                            20631 ; 349  |//! \return     SUCCESS/ERROR.
                            20632 ; 350  |//!
                            20633 ; 351  |////////////////////////////////////////////////////////////////////////////////
                            20634 ; 352  |_inline INT STFM1000TunerInit(void)
                            20635 ; 353  |{
                            20636 ; 354  |    DWORD  STFM1000_Version;
                            20637 ; 355  |    INT RetCode = SUCCESS;
                            20638 ; 356  |
                            20639 ; 357  |    RetCode = STFM1000ReadSubRegister(  // Get version of STFM1000 part
                            20640 ; 358  |            CHIPID_REG_ADDR,
                            20641 ; 359  |            MAJOR_REV_ID_REG_MASK | MINOR_REV_ID_REG_MASK,
                            20642 ; 360  |            &STFM1000_Version);
                            20643 ; 361  |
                            20644 ; 362  |    StfmTuneDefault.STFM1000_Version =  STFM1000_Version;   // Test for VERSION_TB2
                            20645 ; 363  |    
                            20646 ; 364  |#ifdef CLCD_16BIT   
                            20647 ; 365  |    if( STFM1000_Version == VERSION_TA2 )
                            20648 ; 366  |    {
                            20649 ; 367  |        g_blIsTB2Fm = FALSE;
                            20650 ; 368  |    }
                            20651 ; 369  |    else
                            20652 ; 370  |    {
                            20653 ; 371  |        g_blIsTB2Fm = TRUE;
                            20654 ; 372  |    }
                            20655 ; 373  |#endif
                            20656 ; 374  |    // Initialize tuning tables (temp, replaced with compile-time in code)
                            20657 ; 375  |    STFM1000Reset();
                            20658 ; 376  |
                            20659 ; 377  |    // Initialize default register values (temp, replaced with compile-time
                            20660 ; 378  |    // in code)
                            20661 ; 379  |    STFM1000RegValsReset();
                            20662 ; 380  |
                            20663 ; 381  |    // Set to 100kHz for I2C
                            20664 ; 382  |    STFM1000I2CInit(0, 0);
                            20665 ; 383  |
                            20666 ; 384  |    return SUCCESS ;
                            20667 ; 385  |}
                            20668 ; 386  |////////////////////////////////////////////////////////////////////////////////
                            20669 ; 387  |//!
                            20670 ; 388  |//! \brief      Disables DRI transmission
                            20671 ; 389  |//! \fntype     Function
                            20672 ; 390  |//!
                            20673 ; 391  |//! Function will perform the following steps:
                            20674 ; 392  |//!     Stop AGC Monitor
                            20675 ; 393  |//!     Disable 3600 DMA
                            20676 ; 394  |//!     Disable DRI stream to transmit from chip
                            20677 ; 395  |//!
                            20678 ; 396  |//! \param[in]  None
                            20679 ; 397  |//!
                            20680 ; 398  |//! \return     SUCCESS/ERROR.
                            20681 ; 399  |//!
                            20682 ; 400  |////////////////////////////////////////////////////////////////////////////////
                            20683 ; 401  |_inline INT STFM1000DriOff(void)
                            20684 ; 402  |{
                            20685 ; 403  |    INT RetCode = SUCCESS;
                            20686 ; 404  |
                            20687 ; 405  |    // * Stops DRI transmission from tuner (tspec_v09u.pdf::DRI_off)
                            20688 ; 406  |    RetCode = STFM1000WriteRegister(
                            20689 ; 407  |        DATAPATH_REG_ADDR,
                            20690 ; 408  |        DRI_EN_REG_MASK,
                            20691 ; 409  |        &StfmTuneData.sd_ctl_ShadowDataPath_dw,
                            20692 ; 410  |        0);
                            20693 ; 411  |    if (SUCCESS != RetCode)
                            20694 ; 412  |    {
                            20695 ; 413  |        //SystemHalt();
                            20696 ; 414  |        return RetCode;
                            20697 ; 415  |    }
                            20698 ; 416  |
                            20699 ; 417  |    return RetCode;
                            20700 ; 418  |}
                            20701 ; 419  |
                            20702 ; 420  |////////////////////////////////////////////////////////////////////////////////
                            20703 ; 421  |//
                            20704 ; 422  |//>  Name:          TunerGetTunerDriverTuneToFrequency
                            20705 ; 423  |//
                            20706 ; 424  |//   Type:          Function
                            20707 ; 425  |//
                            20708 ; 426  |//   Description:   Tune to the frequency iFrequency
                            20709 ; 427  |//
                            20710 ; 428  |//   Inputs:        iFrequency
                            20711 ; 429  |//
                            20712 ; 430  |//   Outputs:       Error status
                            20713 ; 431  |//
                            20714 ; 432  |//   Notes:         none
                            20715 ; 433  |//<
                            20716 ; 434  |////////////////////////////////////////////////////////////////////////////////
                            20717 ; 435  |_reentrant INT TunerDriverTuneToFrequency(INT iFrequency)
                            20718 ; 436  |{
                            20719 
                            20724 FTunerDriverTuneToFrequency:
                            20734 
                            20735 ; 437  |    INT iTuningStatus=TUNER_SUCCESS;
                            20736 
                            20743 
                            20744 ; 438  |    // clear search flag
                            20745 ; 439  |        s_iFMTunerSearchStatus = 0;
                            20746 
                            20750 
                            20751 ; 440  |        TunerTuningInit();
                            20752 
P:0001 055F7C         2    620725         movec   ssh,y:(r7)+
P:0002 045FA0         2    820738         movec   m0,n7
P:0003 205F00         2   1020728         move    (r7)+
P:0004 5C6F13         4   1420748         clr     a	                a1,y:(r7+n7)
P:0005 5E7000 rrrrrr  3   1720749         move    a,y:Fs_iFMTunerSearchStatus
P:0007 0BF080 rrrrrr  6   2320754         jsr     FTunerTuningInit
                            20755 
                            20756 ; 441  |    //STFM1000DriOff();
                            20757 ; 442  |        s_wCurrentFMFrequency = iFrequency;     // set the current frequency
                            20758 
                            20764 
                            20765 ; 443  |#ifdef SD_USE_50KHZ_TUNING_GRID
                            20766 ; 444  |    s_wDisplayFMFrequency = s_wCurrentFMFrequency;
                            20767 ; 445  |#endif
                            20768 ; 446  |
                            20769 ; 447  |    // DRI off
                            20770 ; 448  |    STFM1000DriOff();
                            20771 
P:0009 60F400 rrrrrr  3   2620777         move    #FStfmTuneData+34,r0
P:000B 045FA0         2   2820760         movec   m0,n7
P:000C 44F413 00005C  3   3120773         clr     a	                #>92,x0
P:000E 5DEF00         4   3520762         move    y:(r7+n7),b1
P:000F 000008         2   3720774         inc     a
P:0010 5D701B rrrrrr  3   4020775         clr     b	                b1,y:Fs_wCurrentFMFrequency
P:0012 0BF080 rrrrrr  6   4620778         jsr     FSTFM1000WriteRegister
                            20779 
                            20780 ; 449  |    // Tune to the frequency
                            20781 ; 450  |    STFM1000TunerQuicksetStation(iFrequency);
                            20782 
P:0014 045FA0         2   4820784         movec   m0,n7
P:0015 000000         2   5020784         nop             ; (inserted)
P:0016 5EEF00         4   5420786         move    y:(r7+n7),a
P:0017 0BF080 rrrrrr  6   6020790         jsr     FSTFM1000TunerQuicksetStation
                            20791 
                            20792 ; 451  |
                            20793 ; 452  |    //Force tuner busy
                            20794 ; 453  |    return E_TUNER_BUSY;
                            20795 
                            20798 
                            20799 ; 454  |}
                            20800 
P:0019 56F400 FFFFFC  3   6320797         move    #>-4,a
P:001B 205700         2   6520802         move    (r7)-
P:001C 05FF7C         4   6920804         movec   y:-(r7),ssh
P:001D 000000         2   7120804         nop             ; (inserted)
P:001E 00000C         4   7520808         rts
                            20810 
                            20811 ; 455  |// OptmizeChannel() calls the following 3 procedures:
                            20812 ; 456  |// * Set Channel Filter on chip  (tspec_v09x.pdf::SD_SetChannelFilter)
                            20813 ; 457  |_inline INT STFM1000SetNearChannelOffset(WORD wOffsetCode)
                            20814 ; 458  |{
                            20815 ; 459  |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            20816 ; 460  |
                            20817 ; 461  |    // set "near channel" offset
                            20818 ; 462  |    return STFM1000WriteRegister(
                            20819 ; 463  |        INITIALIZATION3_REG_ADDR,
                            20820 ; 464  |        B2_NEAR_CHAN_MIX_REG_MASK,
                            20821 ; 465  |        &pDrst->sd_ctl_ShadowInitialization3_dw,
                            20822 ; 466  |        wOffsetCode);
                            20823 ; 467  |}
                            20824 ; 468  |
                            20825 ; 469  |_inline INT STFM1000GetNearChannelOffset(void)
                            20826 ; 470  |{
                            20827 ; 471  |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            20828 ; 472  |    DWORD dwTemp;
                            20829 ; 473  |    INT RetCode;
                            20830 ; 474  |    //INT RetCode = SUCCESS;
                            20831 ; 475  |
                            20832 ; 476  |    // * gets near channel amplitude
                            20833 ; 477  |    RetCode = STFM1000ReadSubRegister(
                            20834 ; 478  |        SIGNALQUALITY_REG_ADDR,
                            20835 ; 479  |        NEAR_CHAN_AMPLITUDE_REG_MASK,
                            20836 ; 480  |        &dwTemp);
                            20837 ; 481  |
                            20838 ; 482  |    pDrst->sd_ctl_ShadowSignalQuality_w = (WORD)dwTemp ;
                            20839 ; 483  |
                            20840 ; 484  |    return RetCode;
                            20841 ; 485  |
                            20842 ; 486  |}
                            20843 ; 487  |_inline INT STFM1000SetNearChannelFilter(WORD wBypassSetting)
                            20844 ; 488  |{
                            20845 ; 489  |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            20846 ; 490  |
                            20847 ; 491  |    // set filter settings
                            20848 ; 492  |    return STFM1000WriteRegister(
                            20849 ; 493  |        INITIALIZATION1_REG_ADDR,
                            20850 ; 494  |        B2_BYPASS_FILT_REG_MASK,
                            20851 ; 495  |        &pDrst->sd_ctl_ShadowInitialization1_dw,
                            20852 ; 496  |        wBypassSetting);
                            20853 ; 497  |
                            20854 ; 498  |}
                            20855 ; 499  |
                            20856 ; 500  |_inline INT STFM1000GearShiftPtGear(DWORD dwBits)
                            20857 ; 501  |{
                            20858 ; 502  |    INT RetCode;
                            20859 ; 503  |    // Shift gear
                            20860 ; 504  |    RetCode = STFM1000WriteRegister(
                            20861 ; 505  |        PILOTTRACKING_REG_ADDR,
                            20862 ; 506  |        (BYTE1_MASK | BYTE0_MASK),
                            20863 ; 507  |        &StfmTuneData.sd_ctl_ShadowPilotTracking_dw,
                            20864 ; 508  |        dwBits);
                            20865 ; 509  |
                            20866 ; 510  |    if (SUCCESS != RetCode)
                            20867 ; 511  |    {
                            20868 ; 512  |        //SystemHalt();
                            20869 ; 513  |        return RetCode;
                            20870 ; 514  |    }
                            20871 ; 515  |
                            20872 ; 516  |    return RetCode;
                            20873 ; 517  |}
                            20874 ; 518  |
                            20875 ; 519  |////////////////////////////////////////////////////////////////////////////////
                            20876 ; 520  |//
                            20877 ; 521  |//>  Name:          TunerTuningInit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20878 ; 522  |//
                            20879 ; 523  |//   Type:          Function
                            20880 ; 524  |//
                            20881 ; 525  |//   Description:   Init some of globals
                            20882 ; 526  |//
                            20883 ; 527  |//   Inputs:        none
                            20884 ; 528  |//
                            20885 ; 529  |//   Outputs:       Error status
                            20886 ; 530  |//
                            20887 ; 531  |//   Notes:         none
                            20888 ; 532  |//<
                            20889 ; 533  |////////////////////////////////////////////////////////////////////////////////
                            20890 ; 534  |_reentrant void TunerTuningInit(void)
                            20891 ; 535  |{
                            20892 
                            20897 FTunerTuningInit:
                            20898 
                            20899 ; 536  |        g_wFMTunerError.m_bBAND_LIMIT_HIGH_ERROR = FALSE;
                            20900 
                            20903 
                            20904 ; 537  |        g_wFMTunerError.m_bBAND_LIMIT_LOW_ERROR = FALSE;        // clear the searching error bits
                            20905 
                            20908 
                            20909 ; 538  |        g_wFMTunerError.m_bTUNER_BUSY = TRUE;
                            20910 
                            20913 
                            20914 ; 539  |    g_iTunerProcessIntervalMs = 50;                     // Reset to 50ms
                            20915 
                            20919 
                            20920 ; 540  |}
                            20921 
P:001F 0A7048 rrrrrr  6   8120902         bclr    #8,y:Fg_wFMTunerError
P:0021 47F400 000032  3   8420917         move    #>50,y1
P:0023 0A7049 rrrrrr  6   9020907         bclr    #9,y:Fg_wFMTunerError
P:0025 477000 rrrrrr  3   9320918         move    y1,x:Fg_iTunerProcessIntervalMs
P:0027 0A7060 rrrrrr  6   9920912         bset    #0,y:Fg_wFMTunerError
P:0029 00000C         4  10320923         rts
                            20925 
                            20926 ; 541  |
                            20927 ; 542  |
                            20928 ; 543  |
                            20929 ; 544  |////////////////////////////////////////////////////////////////////////////////
                            20930 ; 545  |//!
                            20931 ; 546  |//! \brief      Enables DRI transmission
                            20932 ; 547  |//! \fntype     Function
                            20933 ; 548  |//!
                            20934 ; 549  |//! Function will perform the following steps:
                            20935 ; 550  |//!     Enable DRI stream to transmit from chip
                            20936 ; 551  |//!     Enable 3600 DMA
                            20937 ; 552  |//!     Start AGC Monitor
                            20938 ; 553  |//!
                            20939 ; 554  |//! \param[in]  None
                            20940 ; 555  |//!
                            20941 ; 556  |//! \return     SUCCESS/ERROR.
                            20942 ; 557  |//!
                            20943 ; 558  |////////////////////////////////////////////////////////////////////////////////
                            20944 ; 559  |_inline INT STFM1000DriOn(void)
                            20945 ; 560  |{
                            20946 ; 561  |    INT RetCode = SUCCESS;
                            20947 ; 562  |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            20948 ; 563  |    // * Starts DRI transmission from tuner (tspec_v09u.pdf::DRI_on)
                            20949 ; 564  |    RetCode = STFM1000WriteRegister(
                            20950 ; 565  |        DATAPATH_REG_ADDR,
                            20951 ; 566  |        DRI_EN_REG_MASK,
                            20952 ; 567  |        &pDrst->sd_ctl_ShadowDataPath_dw,
                            20953 ; 568  |        1);
                            20954 ; 569  |    if (SUCCESS != RetCode)
                            20955 ; 570  |    {
                            20956 ; 571  |        //SystemHalt();
                            20957 ; 572  |        return RetCode;
                            20958 ; 573  |    }
                            20959 ; 574  |    return RetCode;
                            20960 ; 575  |}
                            20961 ; 576  |
                            20962 ; 577  |
                            20963 ; 578  |
                            20964 ; 579  |
                            20965 ; 580  |////////////////////////////////////////////////////////////////////////////////
                            20966 ; 581  |//
                            20967 ; 582  |//>  Name:          TunerDriverInit
                            20968 ; 583  |//
                            20969 ; 584  |//   Type:          Function
                            20970 ; 585  |//
                            20971 ; 586  |//   Description:   Init FM tuner ardware to be ready for operation
                            20972 ; 587  |//
                            20973 ; 588  |//   Inputs:        none
                            20974 ; 589  |//
                            20975 ; 590  |//   Outputs:       Error status
                            20976 ; 591  |//
                            20977 ; 592  |//   Notes:         none
                            20978 ; 593  |//<
                            20979 ; 594  |////////////////////////////////////////////////////////////////////////////////
                            20980 ; 595  |/******************************************************************************
                            20981 ; 596  | * Group TunerDriverInit, STFM1000TunerInit, STFM1000Reset, STFM1000RegsValsReset
                            20982 ; 597  | * and I2CInit together as one funclet since these functions are called once
                            20983 ; 598  | * during TunerDriverInit
                            20984 ; 599  | ******************************************************************************/
                            20985 ; 600  |#ifdef FUNCLET
                            20986 ; 601  |    #pragma asm
P:0000                      20987         org p,".stfm1000_SYS":
                            20988         FTunerDriverInit:
                            20989 
                            20994 
                            20995         ;If using funclet, function will be executed via funclet kernel
                            20996         CallFunclet2 RSRC_FUNCLET_TUNER_DRIVER_INIT
P:0000 0D0082         4    420996     jsr       $82
P:0001 00041C               20996     DC       RSRC_FUNCLET_TUNER_DRIVER_INIT  ; 1 word
                            20997 
P:0000                      20998         org p,"SYSFUNCLET_TUNER_DRIVER_INIT_P":
P:0000 00041C               20999         dc      RSRC_FUNCLET_TUNER_DRIVER_INIT
                            21000 ; 615  |    #pragma endasm
                            21001 ; 616  |_reentrant INT TunerDriverInit_Funclet(void)
                            21002 ; 617  |#else
                            21003 ; 618  |_reentrant INT TunerDriverInit(void)
                            21004 ; 619  |#endif
                            21005 ; 620  |{
                            21006 
                            21011 FTunerDriverInit_Funclet:
                            21020 
                            21021 ; 621  |    INT iReturn;
                            21022 ; 622  |// In the software (c filter)so we probably should call
                            21023 ; 623  |#ifdef FM_TUNER_HCC
                            21024 ; 624  |// Bypass_BWCtrl 0: HCC= 1 enbale/1: HCC disbale
                            21025 ; 625  |#endif
                            21026 ; 626  |#ifdef FM_TUNER_SNC
                            21027 ; 627  |// BypassBlend 0: SNC=1 enable/1: SNC= 0 disable
                            21028 ; 628  |#endif
                            21029 ; 629  |#ifdef FM_TUNER_SOFT_MUTE
                            21030 ; 630  |// BypassSoftMute: 0: Softmute=1 enable/1: softmute=0, disable softmute
                            21031 ; 631  |#endif
                            21032 ; 632  |#ifdef FM_JAPAN_REGION
                            21033 ; 633  |// FIll the empty
                            21034 ; 634  |#endif
                            21035 ; 635  |#ifdef FM_USA_REGION
                            21036 ; 636  |// FIll the empty
                            21037 ; 637  |#endif
                            21038 ; 638  |
                            21039 ; 639  |    g_wFMTunerError.m_bTUNER_BUSY= FALSE;
                            21040 
                            21043 
                            21044 ; 640  |    g_wFMTunerError.m_bSEARCHING_UP=FALSE;
                            21045 
                            21048 
                            21049 ; 641  |    g_wFMTunerError.m_bSEARCHING_DOWN=FALSE;
                            21050 
                            21053 
                            21054 ; 642  |    g_wFMTunerError.m_bSCANNING_STATION=FALSE;
                            21055 
                            21058 
                            21059 ; 643  |    g_wFMTunerError.m_bBAND_LIMIT_HIGH_ERROR=FALSE;
                            21060 
                            21063 
                            21064 ; 644  |    g_wFMTunerError.m_bBAND_LIMIT_LOW_ERROR=FALSE;
                            21065 
                            21068 
                            21069 ; 645  |    g_wFMTunerError.m_bUNUSED_PRESET=FALSE;
                            21070 
                            21073 
                            21074 ; 646  |    g_wFMTunerError.m_bPRESET_RANGE_ERROR=FALSE;
                            21075 
                            21078 
                            21079 ; 647  |    g_wFMTunerError.m_bPOWERED_OFF = TRUE;
                            21080 
                            21083 
                            21084 ; 648  |    // test if the tuner exist, write and read data while the tuner powered up
                            21085 ; 649  |    g_wFMTunerError.m_bTUNER_NOT_FOUND=TRUE;
                            21086 
                            21089 
                            21090 ; 650  |    // Quick test and tuner
                            21091 ; 651  |    // Check the error code for return
                            21092 ; 652  |
                            21093 ; 653  |    iReturn = STFM1000TunerInit();
                            21094 
P:0001 055F7C         2    221012         movec   ssh,y:(r7)+
P:0002 77F400 FFFFFE  3    521096         move    #-2,n7
P:0004 57F400 000080  3    821101         move    #>$80,b
P:0006 0A7040 rrrrrr  6   1421042         bclr    #0,y:Fg_wFMTunerError
P:0008 0A7041 rrrrrr  6   2021047         bclr    #1,y:Fg_wFMTunerError
P:000A 0A7042 rrrrrr  6   2621052         bclr    #2,y:Fg_wFMTunerError
P:000C 0A7044 rrrrrr  6   3221057         bclr    #4,y:Fg_wFMTunerError
P:000E 0A7048 rrrrrr  6   3821062         bclr    #8,y:Fg_wFMTunerError
P:0010 0A7049 rrrrrr  6   4421067         bclr    #9,y:Fg_wFMTunerError
P:0012 0A704A rrrrrr  6   5021072         bclr    #10,y:Fg_wFMTunerError
P:0014 0A704B rrrrrr  6   5621077         bclr    #11,y:Fg_wFMTunerError
P:0016 0A706E rrrrrr  6   6221082         bset    #14,y:Fg_wFMTunerError
P:0018 0A706D rrrrrr  6   6821088         bset    #13,y:Fg_wFMTunerError
P:001A 205F13         2   7021099         clr     a	                (r7)+
P:001B 28FF00         2   7221100         move    #$FF,a0
P:001C 205F00         2   7421016         move    (r7)+
P:001D 044F10         4   7821098         lua     (r7)+n7,r0
P:001E 0BF080 rrrrrr  6   8421102         jsr     FSTFM1000ReadSubRegister
P:0020 77F400 FFFFFE  3   8721103         move    #-2,n7
P:0022 205F00         2   8921104         move    (r7)+
P:0023 4FEF00         4   9321106         move    y:(r7+n7),y1
P:0024 205700         2   9521107         move    (r7)-
P:0025 477000 rrrrrr  3   9821110         move    y1,x:FStfmTuneDefault+60
P:0027 4EEF00         4  10221109         move    y:(r7+n7),y0
P:0028 467000 rrrrrr  3  10521111         move    y0,x:FStfmTuneDefault+59
P:002A 0BF080 rrrrrr  6  11121112         jsr     FSTFM1000Reset
P:002C 0BF080 rrrrrr  6  11721113         jsr     FSTFM1000RegValsReset
P:002E 2E001B         2  11921115         clr     b	                #0,a
P:002F 0BF080 rrrrrr  6  12521116         jsr     FSTFM1000I2CInit
                            21117 
                            21118 ; 654  |
                            21119 ; 655  |    if(iReturn != SUCCESS)
                            21120 ; 656  |    {
                            21121 ; 657  |        return iReturn;
                            21122 ; 658  |    }
                            21123 ; 659  |
                            21124 ; 660  |    // Turn-off tuner in case in the debug environment you didn't tuner off tuner properly
                            21125 ; 661  |    iReturn = TunerDriverSetTunerStandby(TRUE);
                            21126 
P:0031 56F400 000001  3  12821128         move    #>1,a
P:0033 0BF080 rrrrrr  6  13421129         jsr     FTunerDriverSetTunerStandby
                            21131 
                            21132 ; 662  |    if(iReturn != SUCCESS)
                            21133 
                            21136 
                            21137 ; 663  |    {
                            21138 ; 664  |        return iReturn;
                            21139 
P:0035 200003         2  13621135         tst     a
P:0036 0AF0A2 rrrrrr  6  14221141         jne     L18
                            21142 
                            21143 ; 665  |    }
                            21144 ; 666  |
                            21145 ; 667  |    return TUNER_SUCCESS;
                            21146 
                            21151 
                            21152 ; 668  |
                            21153 ; 669  |}
                            21154 
P:0038 2E0000         2  14421148         move    #0,a
P:0039 218E00         2  14621149         move    a1,a
                            21156 L18:
P:003A 205700         2  14821156         move    (r7)-
P:003B 205700         2  15021157         move    (r7)-
P:003C 05FF7C         4  15421159         movec   y:-(r7),ssh
P:003D 000000         2  15621159         nop             ; (inserted)
P:003E 00000C         4  16021163         rts
                            21165 
                            21166 ; 670  |
                            21167 ; 671  |
                            21168 ; 672  |////////////////////////////////////////////////////////////////////////////////
                            21169 ; 673  |//!
                            21170 ; 674  |//! \brief      Reset STFM software
                            21171 ; 675  |//! \fntype     Function
                            21172 ; 676  |//!
                            21173 ; 677  |//! Function will perform the following steps:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21174 ; 678  |//!     Initialize TUNE1 & SDNOMIBNAL tables and
                            21175 ; 679  |//!
                            21176 ; 680  |//! \param[in]  None
                            21177 ; 681  |//!
                            21178 ; 682  |//! \return     None
                            21179 ; 683  |//!
                            21180 ; 684  |////////////////////////////////////////////////////////////////////////////////
                            21181 ; 685  |
                            21182 ; 686  |_reentrant void STFM1000Reset(void)
                            21183 ; 687  |{
                            21184 
                            21189 FSTFM1000Reset:
                            21194 
                            21195 ; 688  |#ifdef STFM1000_PLL_TABLE
                            21196 ; 689  |    unsigned int ndiv;           // N Divider in PLL
                            21197 ; 690  |    unsigned int incr;           // Increment in PLL
                            21198 ; 691  |    unsigned int cicosr;         // CIC oversampling ratio
                            21199 ; 692  |    DWORD sdnominal;      // value to serve pilot/interpolator loop in SD
                            21200 ; 693  |    int temp;
                            21201 ; 694  |    Fract_type FractTemp;
                            21202 ; 695  |#endif
                            21203 ; 696  |    // ptr to X in Y syntax is:    int_X * _Y ptrInYtoX; // _Y is default so not required
                            21204 ; 697  |    STFM1000Tune_t _X * pStfmTuneDefault = &StfmTuneDefault;
                            21205 
                            21213 
                            21214 ; 698  |    STFM1000Tune_t * pStfmTuneData = &StfmTuneData;
                            21215 
                            21219 
                            21220 ; 699  |
                            21221 ; 700  |    // The following two tables form the tuning tables for programming
                            21222 ; 701  |    // TUNE1_REG[14:0] and SDNOMINAL_REG[31:0].  These tables should be indexed
                            21223 ; 702  |    // with the actual frequency which the Analog Front End must tune (fe_freq)
                            21224 ; 703  |    // and NOT the frequency which the listener wants to tune to (tune_freq)
                            21225 ; 704  |    // They are related as follows: fe_freq = tune_freq + IF
                            21226 ; 705  |    // NOTE: These two tables should be built up and stored in memory.  The
                            21227 ; 706  |    // following calculations will NOT actually be made in MCU code.
                            21228 ; 707  |    // Memory required is as follows:  tune1_table = 325 x 32 bits
                            21229 ; 708  |    //                                 sdnom_table = 325 x 32 bits
                            21230 ; 709  |#ifdef STFM1000_PLL_TABLE
                            21231 ; 710  |    for (i = FREQUENCY_100KHZ_MIN;
                            21232 ; 711  |        i < FREQUENCY_100KHZ_MIN + FREQUENCY_100KHZ_RANGE; i++)
                            21233 ; 712  |    {
                            21234 ; 713  |#if 0
                            21235 ; 714  |        ndiv = (DWORD)((i+14)/15) - 48;
                            21236 ; 715  |        incr = i - (DWORD)(i/15)*15;
                            21237 ; 716  |        cicosr = (DWORD)(i*2/3.0/16.0 + 0.5);
                            21238 ; 717  |        sdnominal =
                            21239 ; 718  |            (DWORD)(i*100.0e3/1.5/(DWORD)cicosr/2.0/2.0*2.0*8.0*256.0/228.0e3*65536);
                            21240 ; 719  |#else
                            21241 ; 720  |        FractTemp.I = 2048 * (i + 14) + 1;          // scale for rounding
                            21242 ; 721  |        FractTemp.F = FractTemp.F * OneFifteenth;   // Multiply as _fract values
                            21243 ; 722  |        ndiv = FractTemp.I >> 11;                   // unscale for rounding
                            21244 ; 723  |        ndiv = ndiv - 48;
                            21245 ; 724  |
                            21246 ; 725  |        FractTemp.I = (2048 * i) + 1;               // scale for rounding
                            21247 ; 726  |        FractTemp.F = FractTemp.F * OneFifteenth;   // Multiply as _fract values
                            21248 ; 727  |        temp = FractTemp.I >> 11;                   // unscale for rounding
                            21249 ; 728  |        temp = temp * 15;
                            21250 ; 729  |        incr = i - temp;
                            21251 ; 730  |
                            21252 ; 731  |        FractTemp.I = 1024 * i;
                            21253 ; 732  |        FractTemp.F = FractTemp.F * OneTwelfth;         // Multiply as _fract values
                            21254 ; 733  |        cicosr = FractTemp.I;
                            21255 ; 734  |        cicosr = cicosr + 1024;                         // Round to nearest 0.5
                            21256 ; 735  |        cicosr = cicosr >> 11;                          // Unscale for rounding
                            21257 ; 736  |
                            21258 ; 737  |        sdnominal = i * FractCicosr[cicosr - 32];   // Array is pre-scaled for rounding
                            21259 ; 738  |        sdnominal = sdnominal >> 12;                // unscale for rounding
                            21260 ; 739  |#endif
                            21261 ; 740  |
                            21262 ; 741  |        temp = 0x00000000;                                    // clear
                            21263 ; 742  |        temp = temp | ((cicosr<<9) & TUNE1_CICOSR_REG_MASK);  // bits[14:9] 0x00007E00
                            21264 ; 743  |        temp = temp | ((ndiv<<4)   & TUNE1_PLL_DIV_REG_MASK); // bits[8:4]  0x000001F0
                            21265 ; 744  |        temp = temp | ((incr)      & 0x0000000F); // bits[3:0]  0x0000000F
                            21266 ; 745  |        sdc_ctl_TableTune1_w[i - FREQUENCY_100KHZ_MIN] = (WORD)(temp & 0x001FFFFF);
                            21267 ; 746  |        sdc_ctl_TableSdnom_dw[i - FREQUENCY_100KHZ_MIN] = sdnominal;
                            21268 ; 747  |    }
                            21269 ; 748  |#ifdef TEST_BUILD_TABLE
                            21270 ; 749  |
                            21271 ; 750  |    // Use the following BoxView command to dump sdc_ctl_TableSdnom_dw to file MyData in 2 columns
                            21272 ; 751  |    // OUTPUT MyData -2
                            21273 ; 752  |    // OUTPUT OFF       ## closes all files
                            21274 ; 753  |    // OUTPUT           ## lists open files
                            21275 ; 754  |    // close all        ## closes all files
                            21276 ; 755  |    __asm(" move #$0103c0,x0");     // 324 words to file #1
                            21277 ; 756  |    __asm(" move #$000c00,r0");     // read from address xc00
                            21278 ; 757  |    __asm(" move #$004001,r1");     // read from space X
                            21279 ; 758  |
                            21280 ; 759  |
                            21281 ; 760  |    SystemHalt();   // at address P:E5D3
                            21282 ; 761  |    SystemHalt();
                            21283 ; 762  |    SystemHalt();
                            21284 ; 763  |#endif
                            21285 ; 764  |#endif
                            21286 ; 765  |    pStfmTuneDefault->sd_ctl_ShadowTune1_dw = 0;
                            21287 
                            21292 
                            21293 ; 766  |    pStfmTuneDefault->sd_ctl_ShadowSdnominal_dw = 0;
                            21294 
                            21302 
                            21303 ; 767  |    pStfmTuneDefault->sd_ctl_IfFreq_i = 0;
                            21304 
                            21309 
                            21310 ; 768  |    pStfmTuneDefault->sd_ctl_FeFreq_w = 0;
                            21311 
                            21316 
                            21317 ; 769  |    pStfmTuneDefault->sd_ctl_Tune1Data_dw = 0;
                            21318 
                            21326 
                            21327 ; 770  |    pStfmTuneDefault->sd_ctl_SdnominalData_dw = 0;
                            21328 
                            21336 
                            21337 ; 771  |
                            21338 ; 772  |    // Temporary Initialization of Threshold value(s)
                            21339 ; 773  |    pStfmTuneData->sd_ctl_TuneRssiTh_w  = 28;
                            21340 
                            21346 
                            21347 ; 774  |    pStfmTuneData->sd_ctl_TuneMpxDcTh_w = 300;
                            21348 
                            21353 
                            21354 ; 775  |    pStfmTuneData->sd_ctl_AdjChanTh_w   = 100;
                            21355 
                            21360 
                            21361 ; 776  |    pStfmTuneData->sd_ctl_PilotEstTh_w  = 28;
                            21362 
                            21367 
                            21368 ; 777  |    pStfmTuneData->sd_ctl_AgcMonitorDisabled  = TRUE;
                            21369 
                            21374 
                            21375 ; 778  |
                            21376 ; 779  |}
                            21377 
P:003F 3E2400         2  16221342         move    #36,n6
P:0040 3D2800         2  16421371         move    #40,n5
P:0041 63F41B rrrrrr  3  16721289         clr     b	                #FStfmTuneDefault,r3
P:0043 65F400 rrrrrr  3  17021217         move    #FStfmTuneData,r5
P:0045 3B0213         2  17221307         clr     a	                #2,n3
P:0046 46F400 00012C  3  17521351         move    #300,y0
P:0048 515B00         2  17721290         move    b0,x:(r3)+
P:0049 555300         2  17921291         move    b1,x:(r3)-
P:004A 044B16         4  18321298         lua     (r3)+n3,r6
P:004B 3B2F00         2  18521306         move    #47,n3
P:004C 515E00         2  18721300         move    b0,x:(r6)+
P:004D 555600         2  18921301         move    b1,x:(r6)-
P:004E 566B00         4  19321308         move    a,x:(r3+n3)
P:004F 3B3000         2  19521313         move    #$30,n3
P:0050 000000         2  19721313         nop             ; (inserted)
P:0051 566B00         4  20121315         move    a,x:(r3+n3)
P:0052 3B3100         2  20321320         move    #$31,n3
P:0053 000000         2  20521320         nop             ; (inserted)
P:0054 044B16         4  20921322         lua     (r3)+n3,r6
P:0055 3B3300         2  21121330         move    #51,n3
P:0056 515E00         2  21321324         move    b0,x:(r6)+
P:0057 555600         2  21521325         move    b1,x:(r6)-
P:0058 044B16         4  21921332         lua     (r3)+n3,r6
P:0059 000000         2  22121332         nop             ; (inserted)
P:005A 515E00         2  22321334         move    b0,x:(r6)+
P:005B 291C00         2  22521344         move    #28,b0
P:005C 555600         2  22721335         move    b1,x:(r6)-
P:005D 22B600         2  22921343         move    r5,r6
P:005E 2D6400         2  23121358         move    #100,b1
P:005F 596E00         4  23521345         move    b0,y:(r6+n6)
P:0060 3E2500         2  23721350         move    #37,n6
P:0061 000000         2  23921350         nop             ; (inserted)
P:0062 4E6E00         4  24321352         move    y0,y:(r6+n6)
P:0063 3E2600         2  24521357         move    #38,n6
P:0064 000000         2  24721357         nop             ; (inserted)
P:0065 5D6E00         4  25121359         move    b1,y:(r6+n6)
P:0066 3E2700         2  25321364         move    #39,n6
P:0067 000000         2  25521364         nop             ; (inserted)
P:0068 596E00         4  25921366         move    b0,y:(r6+n6)
P:0069 290100         2  26121372         move    #1,b0
P:006A 596D00         4  26521373         move    b0,y:(r5+n5)
P:006B 00000C         4  26921379         rts
                            21383 
                            21384 ; 780  |
                            21385 ; 781  |////////////////////////////////////////////////////////////////////////////////
                            21386 ; 782  |//!
                            21387 ; 783  |//! \brief      Reset STFM shadow registers (not h/w registers)
                            21388 ; 784  |//! \fntype     Function
                            21389 ; 785  |//!
                            21390 ; 786  |//! Function will perform the following steps:
                            21391 ; 787  |//!     Initialize the STFM shadow registers to known state
                            21392 ; 788  |//!
                            21393 ; 789  |//! \param[in]  None
                            21394 ; 790  |//!
                            21395 ; 791  |//! \return     None
                            21396 ; 792  |//!
                            21397 ; 793  |////////////////////////////////////////////////////////////////////////////////
                            21398 ; 794  |
                            21399 ; 795  |
                            21400 ; 796  |_reentrant void STFM1000RegValsReset(void)
                            21401 ; 797  |{
                            21402 
                            21407 FSTFM1000RegValsReset:
                            21410 
                            21411 ; 798  |    // NOTE: This reset() section is meant to build a set of initial values to
                            21412 ; 799  |    // be stored in a table in memory.
                            21413 ; 800  |    // Initialization Table = 17 words  x 32 bits
                            21414 ; 801  |    // Updated on 10/31/2005 according to Jon Hendrix. Moved to X in feb '06.
                            21415 ; 802  |    STFM1000Tune_t _X * pStfmTuneDefault = &StfmTuneDefault;
                            21416 
                            21426 
                            21427 ; 803  |    INT RetCode = SUCCESS;
                            21428 ; 804  |    DWORD dwShadowInitialization6Reg;
                            21429 ; 805  |    INT i;
                            21430 ; 806  |
                            21431 ; 807  |#ifndef STFM1000_POWER_REDUCTION_VERSION    // Must be first since TB2 can overwrite values
                            21432 ; 808  |    pStfmTuneDefault->sd_ctl_ShadowMixFilt_dw = 0x00007200; // MIXFILT_REG
                            21433 ; 809  |    pStfmTuneDefault->sd_ctl_ShadowAdc_dw = 0x00033000;     // ADC_REG
                            21434 ; 810  |#endif
                            21435 ; 811  |    // dec 2006: These numbers are derived from the stfm1000 t-spec (ic designers spec). See stfm1000 designers for more info. g:\consumer audio\steely dan\  t specs  ta2a or tb2
                            21436 ; 812  |if (VERSION_TB2 == StfmTuneDefault.STFM1000_Version)
                            21437 
P:006C 57F013 rrrrrr  3  27221441         clr     a	                x:FStfmTuneDefault+60,b
P:006E 2B0000         2  27421443         move    #0,b2
P:006F 281200         2  27621442         move    #18,a0
P:0070 51F000 rrrrrr  3  27921440         move    x:FStfmTuneDefault+59,b0
P:0072 63F40D rrrrrr  3  28221444         cmp     a,b	                #FStfmTuneDefault,r3
P:0074 0AF0A2 rrrrrr  6  28821445         jne     L21
                            21446 
                            21447 ; 813  |{
                            21448 ; 814  |    pStfmTuneDefault->sd_ctl_ShadowTune1_dw           = 0x00044F01; // TUNE1_REG
                            21449 
                            21455 
                            21456 ; 815  |    pStfmTuneDefault->sd_ctl_ShadowSdnominal_dw       = 0x1C5EBCF0; // Shadow reg for SDNOMINAL_REG
                            21457 
                            21466 
                            21467 ; 816  |    pStfmTuneDefault->sd_ctl_ShadowPilotTracking_dw   = 0x000001B6; // Shadow reg for PILOTTRACKING_REG
                            21468 
                            21477 
                            21478 ; 817  |    pStfmTuneDefault->sd_ctl_ShadowInitialization1_dw = 0x9fb80008; // Shadow reg for INITIALIZATION1_REG
                            21479 
                            21488 
                            21489 ; 818  |    pStfmTuneDefault->sd_ctl_ShadowInitialization2_dw = 0x8506e444; // Shadow reg for INITIALIZATION2_REG  Var
                            21490 
                            21499 
                            21500 ; 819  |    pStfmTuneDefault->sd_ctl_ShadowInitialization3_dw = 0xB400190B;  //Crystal Lock Bypass: 0xB402190B Or Crystal Lock on: 0xB400190B // Shadow reg for INITIALIZATION3_REG
                            21501 
                            21510 
                            21511 ; 820  |    pStfmTuneDefault->sd_ctl_ShadowInitialization4_dw = 0x525bf052; // Shadow reg for INITIALIZATION4_REG
                            21512 
                            21521 
                            21522 ; 821  |    pStfmTuneDefault->sd_ctl_ShadowInitialization5_dw = 0x0808d106; // Shadow reg for INITIALIZATION5_REG
                            21523 
                            21532 
                            21533 ; 822  |    pStfmTuneDefault->sd_ctl_ShadowInitialization6_dw = 0x000166cb;  //0x000366cb; // Shadow reg for INITIALIZATION6_REG
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21534 
                            21543 
                            21544 ; 823  |    pStfmTuneDefault->sd_ctl_ShadowRef_dw             = 0x00B8222D; // ShadowRef reg for ANALOG1_REG
                            21545 
                            21554 
                            21555 ; 824  |    pStfmTuneDefault->sd_ctl_ShadowLna_dw             = 0x0D080009; // ShadowLna reg for ANALOG2_REG
                            21556 
                            21565 
                            21566 ; 825  |    pStfmTuneDefault->sd_ctl_ShadowMixFilt_dw         = 0x00007205; // ShadowMixFlt reg for ANALOG3_REG
                            21567 
                            21576 
                            21577 ; 826  |    pStfmTuneDefault->sd_ctl_ShadowClk1_dw            = 0x10002000; // ShadowClk1 reg for ANALOG4_REG
                            21578 
                            21587 
                            21588 ; 827  |    pStfmTuneDefault->sd_ctl_ShadowClk2_dw            = 0x7F000000; // ShadowClk2 reg for ANALOG4_REG
                            21589 
                            21597 
                            21598 ; 828  |    pStfmTuneDefault->sd_ctl_ShadowAdc_dw             = 0x001B3282; // ShadowAdc reg for ANALOG5_REG Var
                            21599 
                            21608 
                            21609 ; 829  |    pStfmTuneDefault->sd_ctl_ShadowAgcControl1_dw     = 0x1BCB2202; // Shadow reg for AGC_CONTROL1_REG
                            21610 
                            21619 
                            21620 ; 830  |    pStfmTuneDefault->sd_ctl_ShadowAgcControl2_dw     = 0x000000F0; // Shadow reg for AGC_CONTROL2_REG
                            21621 
                            21630 
                            21631 ; 831  |    pStfmTuneDefault->sd_ctl_ShadowDataPath_dw        = 0x00010210; // Shadow reg for DATAPATH_REG
                            21632 
                            21641 
                            21642 ; 832  |#ifdef FM_TUNER_US_DEEMPHASIS
                            21643 ; 833  |    pStfmTuneDefault->sd_ctl_ShadowInitialization2_dw = 0x8506e444; // INITIALIZATION2_REG, clear bit[8], 75us de-emphasis,
                            21644 ; 834  |#else
                            21645 ; 835  |    pStfmTuneDefault->sd_ctl_ShadowInitialization2_dw = 0x8506e544; // set it to 50us de-emphasis
                            21646 
                            21652 
                            21653 ; 836  |#endif
                            21654 ; 837  |
                            21655 ; 838  |}   //VERSION_TB2
                            21656 ; 839  |
                            21657 ; 840  |if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            21658 
P:0076 3B021B         2  29021451         clr     b	                #2,n3
P:0077 56F400 00009F  3  29321484         move    #>$9F,a
P:0079 47F400 00001C  3  29621462         move    #>$1C,y1
P:007B 46F400 5EBCF0  3  29921463         move    #$5EBCF0,y0
P:007D 51F400 044F01  3  30221452         move    #282369,b0
P:007F 515B00         2  30421453         move    b0,x:(r3)+
P:0080 55531B         2  30621473         clr     b	                b1,x:(r3)-
P:0081 044B16         4  31021461         lua     (r3)+n3,r6
P:0082 3B0400         2  31221470         move    #4,n3
P:0083 51F400 0001B6  3  31521474         move    #438,b0
P:0085 465E00         2  31721464         move    y0,x:(r6)+
P:0086 475600         2  31921465         move    y1,x:(r6)-
P:0087 044B16         4  32321472         lua     (r3)+n3,r6
P:0088 3B0600         2  32521481         move    #6,n3
P:0089 46F400 06E444  3  32821496         move    #$6E444,y0
P:008B 47F400 000085  3  33121495         move    #>$85,y1
P:008D 515E00         2  33321475         move    b0,x:(r6)+
P:008E 555600         2  33521476         move    b1,x:(r6)-
P:008F 044B16         4  33921483         lua     (r3)+n3,r6
P:0090 3B0800         2  34121492         move    #8,n3
P:0091 57F400 B80008  3  34421485         move    #$B80008,b
P:0093 575E00         2  34621486         move    b,x:(r6)+
P:0094 57F400 000052  3  34921517         move    #>$52,b
P:0096 565600         2  35121487         move    a,x:(r6)-
P:0097 044B16         4  35521494         lua     (r3)+n3,r6
P:0098 3B0A00         2  35721503         move    #10,n3
P:0099 51F400 5BF052  3  36021518         move    #$5BF052,b0
P:009B 044B15         4  36421505         lua     (r3)+n3,r5
P:009C 3B0C00         2  36621514         move    #12,n3
P:009D 56F400 000008  3  36921528         move    #>8,a
P:009F 465E00         2  37121497         move    y0,x:(r6)+
P:00A0 50F400 08D106  3  37421529         move    #$8D106,a0
P:00A2 475600         2  37621498         move    y1,x:(r6)-
P:00A3 46F400 00190B  3  37921507         move    #$190B,y0
P:00A5 47F400 0000B4  3  38221506         move    #>$B4,y1
P:00A7 465D00         2  38421508         move    y0,x:(r5)+
P:00A8 475500         2  38621509         move    y1,x:(r5)-
P:00A9 044B15         4  39021516         lua     (r3)+n3,r5
P:00AA 3B0E00         2  39221525         move    #14,n3
P:00AB 46F400 080009  3  39521562         move    #$80009,y0
P:00AD 47F400 00000D  3  39821561         move    #>$D,y1
P:00AF 515D00         2  40021519         move    b0,x:(r5)+
P:00B0 55551B         2  40221539         clr     b	                b1,x:(r5)-
P:00B1 044B15         4  40621527         lua     (r3)+n3,r5
P:00B2 3B1000         2  40821536         move    #16,n3
P:00B3 51F400 0166CB  3  41121540         move    #91851,b0
P:00B5 505D00         2  41321530         move    a0,x:(r5)+
P:00B6 545500         2  41521531         move    a1,x:(r5)-
P:00B7 044B15         4  41921538         lua     (r3)+n3,r5
P:00B8 3B1200         2  42121547         move    #18,n3
P:00B9 56F400 000010  3  42421583         move    #>$10,a
P:00BB 515D00         2  42621541         move    b0,x:(r5)+
P:00BC 55551B         2  42821550         clr     b	                b1,x:(r5)-
P:00BD 044B15         4  43221549         lua     (r3)+n3,r5
P:00BE 3B1400         2  43421558         move    #20,n3
P:00BF 51F400 B8222D  3  43721551         move    #12067373,b0
P:00C1 515D00         2  43921552         move    b0,x:(r5)+
P:00C2 55551B         2  44121572         clr     b	                b1,x:(r5)-
P:00C3 044B15         4  44521560         lua     (r3)+n3,r5
P:00C4 3B1600         2  44721569         move    #22,n3
P:00C5 51F400 007205  3  45021573         move    #29189,b0
P:00C7 465D00         2  45221563         move    y0,x:(r5)+
P:00C8 475500         2  45421564         move    y1,x:(r5)-
P:00C9 044B15         4  45821571         lua     (r3)+n3,r5
P:00CA 3B1800         2  46021580         move    #24,n3
P:00CB 46F400 CB2202  3  46321616         move    #$CB2202,y0
P:00CD 47F400 00001B  3  46621615         move    #>$1B,y1
P:00CF 515D00         2  46821574         move    b0,x:(r5)+
P:00D0 555500         2  47021575         move    b1,x:(r5)-
P:00D1 044B15         4  47421582         lua     (r3)+n3,r5
P:00D2 3B1A00         2  47621591         move    #26,n3
P:00D3 57F400 002000  3  47921584         move    #$2000,b
P:00D5 575D00         2  48121585         move    b,x:(r5)+
P:00D6 57F400 00007F  3  48421594         move    #>$7F,b
P:00D8 565500         2  48621586         move    a,x:(r5)-
P:00D9 044B15         4  49021593         lua     (r3)+n3,r5
P:00DA 3B1C00         2  49221601         move    #28,n3
P:00DB 515D00         2  49421595         move    b0,x:(r5)+
P:00DC 55551B         2  49621604         clr     b	                b1,x:(r5)-
P:00DD 044B15         4  50021603         lua     (r3)+n3,r5
P:00DE 3B1E00         2  50221612         move    #30,n3
P:00DF 51F400 1B3282  3  50521605         move    #1782402,b0
P:00E1 515D00         2  50721606         move    b0,x:(r5)+
P:00E2 55551B         2  50921626         clr     b	                b1,x:(r5)-
P:00E3 044B15         4  51321614         lua     (r3)+n3,r5
P:00E4 3B2000         2  51521623         move    #$20,n3
P:00E5 29F000         2  51721627         move    #$F0,b0
P:00E6 465D00         2  51921617         move    y0,x:(r5)+
P:00E7 475500         2  52121618         move    y1,x:(r5)-
P:00E8 044B15         4  52521625         lua     (r3)+n3,r5
P:00E9 3B2200         2  52721634         move    #34,n3
P:00EA 46F400 06E544  3  53021649         move    #$6E544,y0
P:00EC 47F400 000085  3  53321648         move    #>$85,y1
P:00EE 515D00         2  53521628         move    b0,x:(r5)+
P:00EF 55551B         2  53721637         clr     b	                b1,x:(r5)-
P:00F0 044B15         4  54121636         lua     (r3)+n3,r5
P:00F1 51F400 010210  3  54421638         move    #66064,b0
P:00F3 515D00         2  54621639         move    b0,x:(r5)+
P:00F4 555500         2  54821640         move    b1,x:(r5)-
P:00F5 465E00         2  55021650         move    y0,x:(r6)+
P:00F6 475600         2  55221651         move    y1,x:(r6)-
                            21660 L21:
P:00F7 57F013 rrrrrr  3  55521662         clr     a	                x:FStfmTuneDefault+60,b
P:00F9 2B0000         2  55721664         move    #0,b2
P:00FA 280200         2  55921663         move    #2,a0
P:00FB 51F000 rrrrrr  3  56221661         move    x:FStfmTuneDefault+59,b0
P:00FD 20000D         2  56421665         cmp     a,b
P:00FE 0AF0A2 rrrrrr  6  57021666         jne     L22
                            21667 
                            21668 ; 841  |{
                            21669 ; 842  |    pStfmTuneDefault->sd_ctl_ShadowTune1_dw           = 0x00044F01; // TUNE1_REG
                            21670 
                            21676 
                            21677 ; 843  |    pStfmTuneDefault->sd_ctl_ShadowSdnominal_dw       = 0x1C5EBCF0; // Shadow reg for SDNOMINAL_REG
                            21678 
                            21687 
                            21688 ; 844  |    pStfmTuneDefault->sd_ctl_ShadowPilotTracking_dw   = 0x000001B6; // Shadow reg for PILOTTRACKING_REG
                            21689 
                            21698 
                            21699 ; 845  |    pStfmTuneDefault->sd_ctl_ShadowInitialization1_dw = 0x9fb80008; // Shadow reg for INITIALIZATION1_REG
                            21700 
                            21709 
                            21710 ; 846  |//    pStfmTuneDefault->sd_ctl_ShadowInitialization2_dw = 0xC506e444; // Shadow reg for INITIALIZATION2_REG  Var
                            21711 ; 847  |    pStfmTuneDefault->sd_ctl_ShadowInitialization3_dw = 0x1402190B; // Crypstal Lock Bypassed 0x1402190B; or Crystal Lock on 0x1400190B;  Shadow reg for INITIALIZATION3_REG
                            21712 
                            21721 
                            21722 ; 848  |    pStfmTuneDefault->sd_ctl_ShadowInitialization4_dw = 0x525bf052; // Shadow reg for INITIALIZATION4_REG
                            21723 
                            21732 
                            21733 ; 849  |    pStfmTuneDefault->sd_ctl_ShadowInitialization5_dw = 0x6800d106; // Shadow reg for INITIALIZATION5_REG
                            21734 
                            21743 
                            21744 ; 850  |    pStfmTuneDefault->sd_ctl_ShadowInitialization6_dw = 0x00003ecb; // Shadow reg for INITIALIZATION6_REG
                            21745 
                            21754 
                            21755 ; 851  |    pStfmTuneDefault->sd_ctl_ShadowRef_dw             = 0x0030222D; // ShadowRef reg for ANALOG1_REG
                            21756 
                            21765 
                            21766 ; 852  |    pStfmTuneDefault->sd_ctl_ShadowLna_dw             = 0x05080009; // ShadowLna reg for ANALOG2_REG
                            21767 
                            21776 
                            21777 ; 853  |//    pStfmTuneDefault->sd_ctl_ShadowMixFilt_dw         = 0x00007205; // ShadowMixFlt reg for ANALOG3_REG
                            21778 ; 854  |    pStfmTuneDefault->sd_ctl_ShadowClk1_dw            = 0x10002000; // ShadowClk1 reg for ANALOG4_REG
                            21779 
                            21788 
                            21789 ; 855  |    pStfmTuneDefault->sd_ctl_ShadowClk2_dw            = 0x7F000000; // ShadowClk2 reg for ANALOG4_REG
                            21790 
                            21798 
                            21799 ; 856  |//    pStfmTuneDefault->sd_ctl_ShadowAdc_dw             = 0x00033282; // ShadowAdc reg for ANALOG5_REG Var
                            21800 ; 857  |    pStfmTuneDefault->sd_ctl_ShadowAgcControl1_dw     = 0x002c8702; // Shadow reg for AGC_CONTROL1_REG
                            21801 
                            21810 
                            21811 ; 858  |    pStfmTuneDefault->sd_ctl_ShadowAgcControl2_dw     = 0x00140050; // Shadow reg for AGC_CONTROL2_REG
                            21812 
                            21821 
                            21822 ; 859  |    pStfmTuneDefault->sd_ctl_ShadowDataPath_dw        = 0x00014210; // Shadow reg for DATAPATH_REG
                            21823 
                            21832 
                            21833 ; 860  |
                            21834 ; 861  |#ifdef FM_TUNER_US_DEEMPHASIS
                            21835 ; 862  |    pStfmTuneDefault->sd_ctl_ShadowInitialization2_dw = 0xC506e444; // INITIALIZATION2_REG, clear bit[8], 75us de-emphasis,
                            21836 ; 863  |#else
                            21837 ; 864  |    pStfmTuneDefault->sd_ctl_ShadowInitialization2_dw = 0xC506e544; // set it to 50us de-emphasis
                            21838 
                            21847 
                            21848 ; 865  |#endif
                            21849 ; 866  |}   //VERSION_TA2
                            21850 
P:0100 3B0200         2  57221680         move    #2,n3
P:0101 56F41B 000052  3  57521672         clr     b	                #>$52,a
P:0103 46F400 B80008  3  57821706         move    #$B80008,y0
P:0105 47F400 00009F  3  58121705         move    #>$9F,y1
P:0107 44F400 02190B  3  58421718         move    #$2190B,x0
P:0109 45F400 000014  3  58721717         move    #>$14,x1
P:010B 51F400 044F01  3  59021673         move    #282369,b0
P:010D 515B00         2  59221674         move    b0,x:(r3)+
P:010E 555300         2  59421675         move    b1,x:(r3)-
P:010F 044B16         4  59821682         lua     (r3)+n3,r6
P:0110 3B0400         2  60021691         move    #4,n3
P:0111 57F400 00001C  3  60321683         move    #>$1C,b
P:0113 51F400 5EBCF0  3  60621684         move    #$5EBCF0,b0
P:0115 515E00         2  60821685         move    b0,x:(r6)+
P:0116 55561B         2  61021694         clr     b	                b1,x:(r6)-
P:0117 044B16         4  61421693         lua     (r3)+n3,r6
P:0118 3B0600         2  61621702         move    #6,n3
P:0119 51F400 0001B6  3  61921695         move    #438,b0
P:011B 515E00         2  62121696         move    b0,x:(r6)+
P:011C 555600         2  62321697         move    b1,x:(r6)-
P:011D 044B16         4  62721704         lua     (r3)+n3,r6
P:011E 3B0A00         2  62921714         move    #10,n3
P:011F 57F400 5BF052  3  63221729         move    #$5BF052,b
P:0121 465E00         2  63421707         move    y0,x:(r6)+
P:0122 475600         2  63621708         move    y1,x:(r6)-
P:0123 044B16         4  64021716         lua     (r3)+n3,r6
P:0124 3B0C00         2  64221725         move    #12,n3
P:0125 46F400 00D106  3  64521740         move    #$D106,y0
P:0127 47F400 000068  3  64821739         move    #>$68,y1
P:0129 445E00         2  65021719         move    x0,x:(r6)+
P:012A 455600         2  65221720         move    x1,x:(r6)-
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
P:012B 044B16         4  65621727         lua     (r3)+n3,r6
P:012C 3B0E00         2  65821736         move    #14,n3
P:012D 44F400 002000  3  66121785         move    #$2000,x0
P:012F 45F400 000010  3  66421784         move    #>$10,x1
P:0131 575E1B         2  66621750         clr     b	                b,x:(r6)+
P:0132 565600         2  66821731         move    a,x:(r6)-
P:0133 044B16         4  67221738         lua     (r3)+n3,r6
P:0134 3B1000         2  67421747         move    #16,n3
P:0135 51F400 003ECB  3  67721751         move    #16075,b0
P:0137 465E00         2  67921741         move    y0,x:(r6)+
P:0138 475600         2  68121742         move    y1,x:(r6)-
P:0139 044B16         4  68521749         lua     (r3)+n3,r6
P:013A 3B1200         2  68721758         move    #18,n3
P:013B 46F400 080009  3  69021773         move    #$80009,y0
P:013D 47F400 000005  3  69321772         move    #>5,y1
P:013F 515E00         2  69521752         move    b0,x:(r6)+
P:0140 55561B         2  69721761         clr     b	                b1,x:(r6)-
P:0141 044B16         4  70121760         lua     (r3)+n3,r6
P:0142 3B1400         2  70321769         move    #20,n3
P:0143 51F400 30222D  3  70621762         move    #3154477,b0
P:0145 515E00         2  70821763         move    b0,x:(r6)+
P:0146 555600         2  71021764         move    b1,x:(r6)-
P:0147 044B16         4  71421771         lua     (r3)+n3,r6
P:0148 3B1800         2  71621781         move    #24,n3
P:0149 57F400 00007F  3  71921795         move    #>$7F,b
P:014B 465E00         2  72121774         move    y0,x:(r6)+
P:014C 475600         2  72321775         move    y1,x:(r6)-
P:014D 044B16         4  72721783         lua     (r3)+n3,r6
P:014E 3B1A00         2  72921792         move    #26,n3
P:014F 46F400 06E544  3  73221844         move    #$6E544,y0
P:0151 47F400 0000C5  3  73521843         move    #>$C5,y1
P:0153 445E00         2  73721786         move    x0,x:(r6)+
P:0154 455600         2  73921787         move    x1,x:(r6)-
P:0155 044B16         4  74321794         lua     (r3)+n3,r6
P:0156 3B1E00         2  74521803         move    #30,n3
P:0157 515E00         2  74721796         move    b0,x:(r6)+
P:0158 55561B         2  74921806         clr     b	                b1,x:(r6)-
P:0159 044B16         4  75321805         lua     (r3)+n3,r6
P:015A 3B2000         2  75521814         move    #$20,n3
P:015B 51F400 2C8702  3  75821807         move    #2918146,b0
P:015D 515E00         2  76021808         move    b0,x:(r6)+
P:015E 55561B         2  76221817         clr     b	                b1,x:(r6)-
P:015F 044B16         4  76621816         lua     (r3)+n3,r6
P:0160 3B2200         2  76821825         move    #34,n3
P:0161 51F400 140050  3  77121818         move    #1310800,b0
P:0163 515E00         2  77321819         move    b0,x:(r6)+
P:0164 55561B         2  77521828         clr     b	                b1,x:(r6)-
P:0165 044B16         4  77921827         lua     (r3)+n3,r6
P:0166 3B0800         2  78121840         move    #8,n3
P:0167 51F400 014210  3  78421829         move    #82448,b0
P:0169 515E00         2  78621830         move    b0,x:(r6)+
P:016A 555600         2  78821831         move    b1,x:(r6)-
P:016B 044B16         4  79221842         lua     (r3)+n3,r6
P:016C 000000         2  79421842         nop             ; (inserted)
P:016D 465E00         2  79621845         move    y0,x:(r6)+
P:016E 475600         2  79821846         move    y1,x:(r6)-
                            21852 L22:
                            21853 
                            21854 ; 867  |
                            21855 ; 868  |}   //STFM1000RegValsReset()
                            21856 
P:016F 00000C         4  80221858         rts
                            21861 
                            21862 ; 869  |
                            21863 ; 870  |#ifdef FUNCLET
                            21864 ; 871  |    #pragma asm
P:002A                      21865         org p,".ptextstfm1000":
                            21866 ; 873  |    #pragma endasm
                            21867 ; 874  |#endif
                            21868 ; 875  |
                            21869 ; 876  |
                            21870 ; 877  |
                            21871 ; 878  |
                            21872 ; 879  |////////////////////////////////////////////////////////////////////////////////
                            21873 ; 880  |//!
                            21874 ; 881  |//! \brief      STFM tuner power-up
                            21875 ; 882  |//! \fntype     Function
                            21876 ; 883  |//!
                            21877 ; 884  |//! Function will perform the following steps:
                            21878 ; 885  |//!     Opens a timer device
                            21879 ; 886  |//!     Sets tuner power on
                            21880 ; 887  |//!     Initializes DRI interface from tuner (ddi_dri_PowerUp())
                            21881 ; 888  |//!
                            21882 ; 889  |//! \param[in]  pTunerObject     Pointer to Tuner Object.
                            21883 ; 890  |//!
                            21884 ; 891  |//! \return     SUCCESS/ERROR.
                            21885 ; 892  |//!
                            21886 ; 893  |////////////////////////////////////////////////////////////////////////////////
                            21887 ; 894  |// not a funclet currently.
                            21888 ; 895  |#if 0 //def FUNCLET
                            21889 ; 896  |    #pragma asm
                            21890 ; 897  |        org p,".stfm1000_SYS":
                            21891 ; 898  |        FSTFM1000TunerPowerUp:
                            21892 ; 899  |
                            21893 ; 900  |        nolist
                            21894 ; 901  |        include "sysmacro.asm"
                            21895 ; 902  |        include "resource.inc"
                            21896 ; 903  |        list
                            21897 ; 904  |
                            21898 ; 905  |        ;If using funclet, function will be executed via funclet kernel
                            21899 ; 906  |        CallFunclet2 RSRC_FUNCLET_STFM1000_POWER_UP
                            21900 ; 907  |
                            21901 ; 908  |        org p,"SYSFUNCLET_STFM1000_POWER_UP_P":
                            21902 ; 909  |        dc      RSRC_FUNCLET_STFM1000_POWER_UP
                            21903 ; 910  |    #pragma endasm
                            21904 ; 911  |_reentrant INT STFM1000TunerPowerUp_Funclet(void)
                            21905 ; 912  |#else
                            21906 ; 913  |_reentrant INT STFM1000TunerPowerUp(void)
                            21907 ; 914  |#endif
                            21908 ; 915  |{
                            21909 
                            21914 FSTFM1000TunerPowerUp:
                            21920 
                            21921 ; 916  |    INT RetCode = SUCCESS;
                            21922 ; 917  |
                            21923 ; 918  |    // set tuner power on
                            21924 ; 919  |    RetCode = STFM1000RegsPowerUp1();
                            21925 
P:002A 055F7C         2  10521915         movec   ssh,y:(r7)+
P:002B 0BF080 rrrrrr  6  11121927         jsr     FSTFM1000RegsPowerUp1
                            21930 
                            21931 ; 920  |    if (SUCCESS != RetCode)
                            21932 
P:002D 21C603         2  11321934         tst     a	                a,y0
P:002E 0AF0A2 rrrrrr  6  11921935         jne     L31
                            21936 
                            21937 ; 921  |    {
                            21938 ; 922  |        //SystemHalt();
                            21939 ; 923  |        return RetCode;
                            21940 ; 924  |    }
                            21941 ; 925  |    RetCode = STFM1000RegsPowerUp2();
                            21942 
P:0030 0BF080 rrrrrr  6  12521944         jsr     FSTFM1000RegsPowerUp2
                            21948 
                            21949 ; 926  |    if (SUCCESS != RetCode)
                            21950 ; 927  |    {
                            21951 ; 928  |        //SystemHalt();
                            21952 ; 929  |        return RetCode;
                            21953 ; 930  |    }
                            21954 ; 931  |
                            21955 ; 932  |
                            21956 ; 933  |#if 0
                            21957 ; 934  |    /* Run through bring-up sequence */
                            21958 ; 935  |    RetCode = STFM1000BringUp();
                            21959 ; 936  |    if (SUCCESS != RetCode)
                            21960 ; 937  |    {
                            21961 ; 938  |        //SystemHalt();
                            21962 ; 939  |        return RetCode;
                            21963 ; 940  |    }
                            21964 ; 941  |#endif
                            21965 ; 942  |    return RetCode;
                            21966 
P:0032 21C600         2  12721946         move    a,y0
                            21968 L31:
                            21971 
                            21972 ; 943  |}
                            21973 
P:0033 05FF7C         4  13121975         movec   y:-(r7),ssh
P:0034 20CE00         2  13321968         move    y0,a
P:0035 00000C         4  13721979         rts
                            21982 
                            21983 ; 944  |////////////////////////////////////////////////////////////////////////////////
                            21984 ; 945  |//!
                            21985 ; 946  |//! \brief      STFM register initialization for power-up
                            21986 ; 947  |//! \fntype     Function
                            21987 ; 948  |//!
                            21988 ; 949  |//! \param[in]  None
                            21989 ; 950  |//!
                            21990 ; 951  |//! \return     SUCCESS/ERROR.
                            21991 ; 952  |//!
                            21992 ; 953  |////////////////////////////////////////////////////////////////////////////////
                            21993 ; 954  |#ifdef FUNCLET
                            21994 ; 955  |    #pragma asm
                            21995         FSTFM1000RegsPowerUp1:
                            21996 
                            22001 
                            22002         ;If using funclet, function will be executed via funclet kernel
                            22003         CallFunclet2 RSRC_FUNCLET_STFM1000_REG_POWER_UP1
P:0036 0D0082         4  14122003     jsr       $82
P:0037 000431               22003     DC       RSRC_FUNCLET_STFM1000_REG_POWER_UP1  ; 1 word
                            22004 
P:0000                      22005         org p,"SYSFUNCLET_STFM1000_REG_POWER_UP1_P":
P:0000 000431               22006         dc      RSRC_FUNCLET_STFM1000_REG_POWER_UP1
                            22007 ; 968  |    #pragma endasm
                            22008 ; 969  |_reentrant INT STFM1000RegsPowerUp1_Funclet(void)
                            22009 ; 970  |#else
                            22010 ; 971  |_reentrant INT STFM1000RegsPowerUp1(void)
                            22011 ; 972  |#endif
                            22012 ; 973  |{
                            22013 
                            22018 FSTFM1000RegsPowerUp1_Funclet:
                            22028 
                            22029 ; 974  |    STFM1000Tune_t * pStfmTuneData = &StfmTuneData;
                            22030 
                            22036 
                            22037 ; 975  |    STFM1000Tune_t _X * pStfmTuneDefault = &StfmTuneDefault; // moved to X feb '06
                            22038 
                            22051 
                            22052 ; 976  |    INT RetCodes[40]; // Allows storing upto 29 register write results
                            22053 ; 977  |    DWORD dwShadowTemp;
                            22054 ; 978  |    int iIndex = 1;
                            22055 ; 979  |
                            22056 ; 980  |    RetCodes[0] = SUCCESS;
                            22057 
                            22063 
                            22064 ; 981  |
                            22065 ; 982  |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22066 ; 983  |        REF_REG_ADDR,
                            22067 ; 984  |        WHOLEREG_MASK,
                            22068 ; 985  |        &pStfmTuneData->sd_ctl_ShadowRef_dw,
                            22069 ; 986  |        0x00200000);
                            22070 
P:0001 055F7C         2    222019         movec   ssh,y:(r7)+
P:0002 3F2B1B         2    422059         clr     b	                #43,n7
P:0003 3E1200         2    622072         move    #18,n6
P:0004 63F400 rrrrrr  3    922040         move    #FStfmTuneDefault,r3
P:0006 66F400 rrrrrr  3   1222032         move    #FStfmTuneData,r6
P:0008 56F400 0000FF  3   1522079         move    #>$FF,a
P:000A 044E10         4   1922076         lua     (r6)+n6,r0
P:000B 44F400 000028  3   2222082         move    #>40,x0
P:000D 204F00         2   2422024         move    (r7)+n7
P:000E 77F400 FFFFFE  3   2722041         move    #-2,n7
P:0010 50F400 FFFFFF  3   3022080         move    #$FFFFFF,a0
P:0012 6B6F00         4   3422043         move    r3,y:(r7+n7)
P:0013 77F400 FFFFD5  3   3722060         move    #-43,n7
P:0015 000000         2   3922060         nop             ; (inserted)
P:0016 5F6F00         4   4322062         move    b,y:(r7+n7)
P:0017 77F400 FFFFFD  3   4622073         move    #-3,n7
P:0019 51F400 200000  3   4922081         move    #$200000,b0
P:001B 6E6F00         4   5322075         move    r6,y:(r7+n7)
P:001C 0BF080 rrrrrr  6   5922083         jsr     FSTFM1000WriteRegister
                            22087 
                            22088 ; 987  |
                            22089 ; 988  |    /* Wait at least 1 msec */
                            22090 ; 989  |    STFM1000delay_ms(1);
                            22091 
P:001E 77F400 FFFFD6  3   6222084         move    #-42,n7
P:0020 000000         2   6422084         nop             ; (inserted)
P:0021 5E6F00         4   6822086         move    a,y:(r7+n7)
P:0022 56F400 000001  3   7122093         move    #>1,a
P:0024 0BF080 rrrrrr  6   7722094         jsr     FSTFM1000delay_ms
                            22095 
                            22096 ; 990  |
                            22097 ; 991  |    /* Write to all Steely Dan control registers across I2C link
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                            22098 ; 992  |       Start off by accepting all B2_x register writes,
                            22099 ; 993  |              else some registers won't "accept" data */
                            22100 ; 994  |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22101 ; 995  |        DATAPATH_REG_ADDR,
                            22102 ; 996  |        WHOLEREG_MASK,
                            22103 ; 997  |        &pStfmTuneData->sd_ctl_ShadowDataPath_dw,
                            22104 ; 998  |        pStfmTuneDefault->sd_ctl_ShadowDataPath_dw);
                            22105 
P:0026 3B2200         2   7922107         move    #34,n3
P:0027 77F400 FFFFFD  3   8222108         move    #-3,n7
P:0029 237E00         2   8422111         move    n3,n6
P:002A 6EEF00         4   8822110         move    y:(r7+n7),r6
P:002B 77F400 FFFFFE  3   9122114         move    #-2,n7
P:002D 044E10         4   9522113         lua     (r6)+n6,r0
P:002E 6BEF00         4   9922116         move    y:(r7+n7),r3
P:002F 56F400 0000FF  3  10222123         move    #>$FF,a
P:0031 044B16         4  10622118         lua     (r3)+n3,r6
P:0032 44F400 00005C  3  10922125         move    #>92,x0
P:0034 50F400 FFFFFF  3  11222124         move    #$FFFFFF,a0
P:0036 205E00         2  11422120         move    (r6)+
P:0037 57D600         2  11622121         move    x:(r6)-,b
P:0038 51E600         2  11822122         move    x:(r6),b0
P:0039 0BF080 rrrrrr  6  12422126         jsr     FSTFM1000WriteRegister
                            22131 
                            22132 ; 999  |
                            22133 ; 1000 |    // Now we can write to all other registers
                            22134 ; 1001 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22135 ; 1002 |        TUNE1_REG_ADDR,
                            22136 ; 1003 |        WHOLEREG_MASK,
                            22137 ; 1004 |        &pStfmTuneData->sd_ctl_ShadowTune1_dw,
                            22138 ; 1005 |        pStfmTuneDefault->sd_ctl_ShadowTune1_dw);
                            22139 
P:003B 77F400 FFFFD7  3  12722127         move    #-41,n7
P:003D 240000         2  12922153         move    #0,x0
P:003E 5E6F00         4  13322129         move    a,y:(r7+n7)
P:003F 77F400 FFFFFD  3  13622141         move    #-3,n7
P:0041 56F400 0000FF  3  13922151         move    #>$FF,a
P:0043 68EF00         4  14322143         move    y:(r7+n7),r0
P:0044 77F400 FFFFFE  3  14622144         move    #-2,n7
P:0046 50F400 FFFFFF  3  14922152         move    #$FFFFFF,a0
P:0048 6BEF00         4  15322146         move    y:(r7+n7),r3
P:0049 000000         2  15522146         nop             ; (inserted)
P:004A 205B00         2  15722148         move    (r3)+
P:004B 57D300         2  15922149         move    x:(r3)-,b
P:004C 51E300         2  16122150         move    x:(r3),b0
P:004D 0BF080 rrrrrr  6  16722154         jsr     FSTFM1000WriteRegister
                            22159 
                            22160 ; 1006 |
                            22161 ; 1007 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22162 ; 1008 |        SDNOMINAL_REG_ADDR,
                            22163 ; 1009 |        WHOLEREG_MASK,
                            22164 ; 1010 |        &pStfmTuneData->sd_ctl_ShadowSdnominal_dw,
                            22165 ; 1011 |        pStfmTuneDefault->sd_ctl_ShadowSdnominal_dw);
                            22166 
P:004F 3B0200         2  16922168         move    #2,n3
P:0050 77F400 FFFFD8  3  17222155         move    #-40,n7
P:0052 237E00         2  17422172         move    n3,n6
P:0053 44F400 000004  3  17722184         move    #>4,x0
P:0055 5E6F00         4  18122157         move    a,y:(r7+n7)
P:0056 77F400 FFFFFD  3  18422169         move    #-3,n7
P:0058 56F400 0000FF  3  18722185         move    #>$FF,a
P:005A 6EEF00         4  19122171         move    y:(r7+n7),r6
P:005B 77F400 FFFFFE  3  19422175         move    #-2,n7
P:005D 044E10         4  19822174         lua     (r6)+n6,r0
P:005E 6BEF00         4  20222177         move    y:(r7+n7),r3
P:005F 50F400 FFFFFF  3  20522186         move    #$FFFFFF,a0
P:0061 044B16         4  20922179         lua     (r3)+n3,r6
P:0062 000000         2  21122179         nop             ; (inserted)
P:0063 205E00         2  21322181         move    (r6)+
P:0064 57D600         2  21522182         move    x:(r6)-,b
P:0065 51E600         2  21722183         move    x:(r6),b0
P:0066 0BF080 rrrrrr  6  22322187         jsr     FSTFM1000WriteRegister
                            22201 
                            22202 ; 1012 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22203 ; 1013 |        PILOTTRACKING_REG_ADDR,
                            22204 ; 1014 |        WHOLEREG_MASK,
                            22205 ; 1015 |        &pStfmTuneData->sd_ctl_ShadowPilotTracking_dw,
                            22206 ; 1016 |        pStfmTuneDefault->sd_ctl_ShadowPilotTracking_dw);
                            22207 
P:0068 3E0400         2  22522189         move    #4,n6
P:0069 77F400 FFFFD5  3  22822190         move    #-43,n7
P:006B 57F400 000004  3  23122188         move    #>4,b
P:006D 044F16         4  23522192         lua     (r7)+n7,r6
P:006E 045FA0         2  23722197         movec   m0,n7
P:006F 46F400 000001  3  24022195         move    #>1,y0
P:0071 3B0458         2  24222196         add     y0,b	                #4,n3
P:0072 44F400 000008  3  24522227         move    #>8,x0
P:0074 5E6E00         4  24922194         move    a,y:(r6+n6)
P:0075 237E00         2  25122213         move    n3,n6
P:0076 56F400 0000FF  3  25422225         move    #>$FF,a
P:0078 5D6F00         4  25822199         move    b1,y:(r7+n7)
P:0079 77F400 FFFFFD  3  26122210         move    #-3,n7
P:007B 50F400 FFFFFF  3  26422226         move    #$FFFFFF,a0
P:007D 6EEF00         4  26822212         move    y:(r7+n7),r6
P:007E 77F400 FFFFFE  3  27122216         move    #-2,n7
P:0080 044E10         4  27522215         lua     (r6)+n6,r0
P:0081 6BEF00         4  27922218         move    y:(r7+n7),r3
P:0082 000000         2  28122218         nop             ; (inserted)
P:0083 044B16         4  28522220         lua     (r3)+n3,r6
P:0084 000000         2  28722220         nop             ; (inserted)
P:0085 205E00         2  28922222         move    (r6)+
P:0086 57D600         2  29122223         move    x:(r6)-,b
P:0087 51E600         2  29322224         move    x:(r6),b0
P:0088 0BF080 rrrrrr  6  29922228         jsr     FSTFM1000WriteRegister
                            22247 
                            22248 ; 1017 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22249 ; 1018 |        INITIALIZATION1_REG_ADDR,
                            22250 ; 1019 |        WHOLEREG_MASK,
                            22251 ; 1020 |        &pStfmTuneData->sd_ctl_ShadowInitialization1_dw,
                            22252 ; 1021 |        pStfmTuneDefault->sd_ctl_ShadowInitialization1_dw);
                            22253 
P:008A 3B0600         2  30122255         move    #6,n3
P:008B 045FA0         2  30322229         movec   m0,n7
P:008C 44F400 000001  3  30622240         move    #>1,x0
P:008E 5FEF00         4  31022231         move    y:(r7+n7),b
P:008F 21FE48         2  31222241         add     x0,b	                b,n6
P:0090 77F400 FFFFD5  3  31522235         move    #-43,n7
P:0092 44F400 000010  3  31822273         move    #>16,x0
P:0094 044F16         4  32222237         lua     (r7)+n7,r6
P:0095 045FA0         2  32422242         movec   m0,n7
P:0096 5E6E00         4  32822239         move    a,y:(r6+n6)
P:0097 237E00         2  33022259         move    n3,n6
P:0098 56F400 0000FF  3  33322271         move    #>$FF,a
P:009A 5D6F00         4  33722244         move    b1,y:(r7+n7)
P:009B 77F400 FFFFFD  3  34022256         move    #-3,n7
P:009D 50F400 FFFFFF  3  34322272         move    #$FFFFFF,a0
P:009F 6EEF00         4  34722258         move    y:(r7+n7),r6
P:00A0 77F400 FFFFFE  3  35022262         move    #-2,n7
P:00A2 044E10         4  35422261         lua     (r6)+n6,r0
P:00A3 6BEF00         4  35822264         move    y:(r7+n7),r3
P:00A4 000000         2  36022264         nop             ; (inserted)
P:00A5 044B16         4  36422266         lua     (r3)+n3,r6
P:00A6 000000         2  36622266         nop             ; (inserted)
P:00A7 205E00         2  36822268         move    (r6)+
P:00A8 57D600         2  37022269         move    x:(r6)-,b
P:00A9 51E600         2  37222270         move    x:(r6),b0
P:00AA 0BF080 rrrrrr  6  37822274         jsr     FSTFM1000WriteRegister
                            22293 
                            22294 ; 1022 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22295 ; 1023 |        INITIALIZATION2_REG_ADDR,
                            22296 ; 1024 |        WHOLEREG_MASK,
                            22297 ; 1025 |        &pStfmTuneData->sd_ctl_ShadowInitialization2_dw,
                            22298 ; 1026 |        pStfmTuneDefault->sd_ctl_ShadowInitialization2_dw);
                            22299 
P:00AC 3B0800         2  38022301         move    #8,n3
P:00AD 045FA0         2  38222275         movec   m0,n7
P:00AE 44F400 000014  3  38522319         move    #>20,x0
P:00B0 5FEF00         4  38922277         move    y:(r7+n7),b
P:00B1 21FE00         2  39122278         move    b,n6
P:00B2 77F400 FFFFD5  3  39422281         move    #-43,n7
P:00B4 000000         2  39622281         nop             ; (inserted)
P:00B5 044F16         4  40022283         lua     (r7)+n7,r6
P:00B6 045FA0         2  40222288         movec   m0,n7
P:00B7 5E6E00         4  40622285         move    a,y:(r6+n6)
P:00B8 56F400 000001  3  40922286         move    #>1,a
P:00BA 237E18         2  41122287         add     a,b	                n3,n6
P:00BB 56F400 0000FF  3  41422317         move    #>$FF,a
P:00BD 5D6F00         4  41822290         move    b1,y:(r7+n7)
P:00BE 77F400 FFFFFD  3  42122302         move    #-3,n7
P:00C0 50F400 FFFFFF  3  42422318         move    #$FFFFFF,a0
P:00C2 6EEF00         4  42822304         move    y:(r7+n7),r6
P:00C3 77F400 FFFFFE  3  43122308         move    #-2,n7
P:00C5 044E10         4  43522307         lua     (r6)+n6,r0
P:00C6 6BEF00         4  43922310         move    y:(r7+n7),r3
P:00C7 000000         2  44122310         nop             ; (inserted)
P:00C8 044B16         4  44522312         lua     (r3)+n3,r6
P:00C9 000000         2  44722312         nop             ; (inserted)
P:00CA 205E00         2  44922314         move    (r6)+
P:00CB 57D600         2  45122315         move    x:(r6)-,b
P:00CC 51E600         2  45322316         move    x:(r6),b0
P:00CD 0BF080 rrrrrr  6  45922320         jsr     FSTFM1000WriteRegister
                            22339 
                            22340 ; 1027 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22341 ; 1028 |        INITIALIZATION3_REG_ADDR,
                            22342 ; 1029 |        WHOLEREG_MASK,
                            22343 ; 1030 |        &pStfmTuneData->sd_ctl_ShadowInitialization3_dw,
                            22344 ; 1031 |        pStfmTuneDefault->sd_ctl_ShadowInitialization3_dw);
                            22345 
P:00CF 3B0A00         2  46122347         move    #10,n3
P:00D0 045FA0         2  46322321         movec   m0,n7
P:00D1 46F400 000001  3  46622332         move    #>1,y0
P:00D3 44F400 000018  3  46922365         move    #>24,x0
P:00D5 5FEF00         4  47322323         move    y:(r7+n7),b
P:00D6 21FE58         2  47522333         add     y0,b	                b,n6
P:00D7 77F400 FFFFD5  3  47822327         move    #-43,n7
P:00D9 000000         2  48022327         nop             ; (inserted)
P:00DA 044F16         4  48422329         lua     (r7)+n7,r6
P:00DB 045FA0         2  48622334         movec   m0,n7
P:00DC 5E6E00         4  49022331         move    a,y:(r6+n6)
P:00DD 237E00         2  49222351         move    n3,n6
P:00DE 56F400 0000FF  3  49522363         move    #>$FF,a
P:00E0 5D6F00         4  49922336         move    b1,y:(r7+n7)
P:00E1 77F400 FFFFFD  3  50222348         move    #-3,n7
P:00E3 50F400 FFFFFF  3  50522364         move    #$FFFFFF,a0
P:00E5 6EEF00         4  50922350         move    y:(r7+n7),r6
P:00E6 77F400 FFFFFE  3  51222354         move    #-2,n7
P:00E8 044E10         4  51622353         lua     (r6)+n6,r0
P:00E9 6BEF00         4  52022356         move    y:(r7+n7),r3
P:00EA 000000         2  52222356         nop             ; (inserted)
P:00EB 044B16         4  52622358         lua     (r3)+n3,r6
P:00EC 000000         2  52822358         nop             ; (inserted)
P:00ED 205E00         2  53022360         move    (r6)+
P:00EE 57D600         2  53222361         move    x:(r6)-,b
P:00EF 51E600         2  53422362         move    x:(r6),b0
P:00F0 0BF080 rrrrrr  6  54022366         jsr     FSTFM1000WriteRegister
                            22385 
                            22386 ; 1032 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22387 ; 1033 |        INITIALIZATION4_REG_ADDR,
                            22388 ; 1034 |        WHOLEREG_MASK,
                            22389 ; 1035 |        &pStfmTuneData->sd_ctl_ShadowInitialization4_dw,
                            22390 ; 1036 |        pStfmTuneDefault->sd_ctl_ShadowInitialization4_dw);
                            22391 
P:00F2 3B0C00         2  54222393         move    #12,n3
P:00F3 045FA0         2  54422367         movec   m0,n7
P:00F4 44F400 000001  3  54722378         move    #>1,x0
P:00F6 5FEF00         4  55122369         move    y:(r7+n7),b
P:00F7 21FE48         2  55322379         add     x0,b	                b,n6
P:00F8 77F400 FFFFD5  3  55622373         move    #-43,n7
P:00FA 44F400 00001C  3  55922411         move    #>28,x0
P:00FC 044F16         4  56322375         lua     (r7)+n7,r6
P:00FD 045FA0         2  56522380         movec   m0,n7
P:00FE 5E6E00         4  56922377         move    a,y:(r6+n6)
P:00FF 237E00         2  57122397         move    n3,n6
P:0100 56F400 0000FF  3  57422409         move    #>$FF,a
P:0102 5D6F00         4  57822382         move    b1,y:(r7+n7)
P:0103 77F400 FFFFFD  3  58122394         move    #-3,n7
P:0105 50F400 FFFFFF  3  58422410         move    #$FFFFFF,a0
P:0107 6EEF00         4  58822396         move    y:(r7+n7),r6
P:0108 77F400 FFFFFE  3  59122400         move    #-2,n7
P:010A 044E10         4  59522399         lua     (r6)+n6,r0
P:010B 6BEF00         4  59922402         move    y:(r7+n7),r3
P:010C 000000         2  60122402         nop             ; (inserted)
P:010D 044B16         4  60522404         lua     (r3)+n3,r6
P:010E 000000         2  60722404         nop             ; (inserted)
P:010F 205E00         2  60922406         move    (r6)+
P:0110 57D600         2  61122407         move    x:(r6)-,b
P:0111 51E600         2  61322408         move    x:(r6),b0
P:0112 0BF080 rrrrrr  6  61922412         jsr     FSTFM1000WriteRegister
                            22431 
                            22432 ; 1037 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22433 ; 1038 |        INITIALIZATION5_REG_ADDR,
                            22434 ; 1039 |        WHOLEREG_MASK,
                            22435 ; 1040 |        &pStfmTuneData->sd_ctl_ShadowInitialization5_dw,
                            22436 ; 1041 |        pStfmTuneDefault->sd_ctl_ShadowInitialization5_dw);
                            22437 
P:0114 3B0E00         2  62122439         move    #14,n3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0115 045FA0         2  62322413         movec   m0,n7
P:0116 44F400 000020  3  62622457         move    #>$20,x0
P:0118 5FEF00         4  63022415         move    y:(r7+n7),b
P:0119 21FE00         2  63222416         move    b,n6
P:011A 77F400 FFFFD5  3  63522419         move    #-43,n7
P:011C 000000         2  63722419         nop             ; (inserted)
P:011D 044F16         4  64122421         lua     (r7)+n7,r6
P:011E 045FA0         2  64322426         movec   m0,n7
P:011F 5E6E00         4  64722423         move    a,y:(r6+n6)
P:0120 56F400 000001  3  65022424         move    #>1,a
P:0122 237E18         2  65222425         add     a,b	                n3,n6
P:0123 56F400 0000FF  3  65522455         move    #>$FF,a
P:0125 5D6F00         4  65922428         move    b1,y:(r7+n7)
P:0126 77F400 FFFFFD  3  66222440         move    #-3,n7
P:0128 50F400 FFFFFF  3  66522456         move    #$FFFFFF,a0
P:012A 6EEF00         4  66922442         move    y:(r7+n7),r6
P:012B 77F400 FFFFFE  3  67222446         move    #-2,n7
P:012D 044E10         4  67622445         lua     (r6)+n6,r0
P:012E 6BEF00         4  68022448         move    y:(r7+n7),r3
P:012F 000000         2  68222448         nop             ; (inserted)
P:0130 044B16         4  68622450         lua     (r3)+n3,r6
P:0131 000000         2  68822450         nop             ; (inserted)
P:0132 205E00         2  69022452         move    (r6)+
P:0133 57D600         2  69222453         move    x:(r6)-,b
P:0134 51E600         2  69422454         move    x:(r6),b0
P:0135 0BF080 rrrrrr  6  70022458         jsr     FSTFM1000WriteRegister
                            22477 
                            22478 ; 1042 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22479 ; 1043 |        INITIALIZATION6_REG_ADDR,
                            22480 ; 1044 |        WHOLEREG_MASK,
                            22481 ; 1045 |        &pStfmTuneData->sd_ctl_ShadowInitialization6_dw,
                            22482 ; 1046 |        pStfmTuneDefault->sd_ctl_ShadowInitialization6_dw);
                            22483 
P:0137 3B1000         2  70222485         move    #16,n3
P:0138 045FA0         2  70422459         movec   m0,n7
P:0139 46F400 000001  3  70722470         move    #>1,y0
P:013B 44F400 000024  3  71022503         move    #>36,x0
P:013D 5FEF00         4  71422461         move    y:(r7+n7),b
P:013E 21FE58         2  71622471         add     y0,b	                b,n6
P:013F 77F400 FFFFD5  3  71922465         move    #-43,n7
P:0141 000000         2  72122465         nop             ; (inserted)
P:0142 044F16         4  72522467         lua     (r7)+n7,r6
P:0143 045FA0         2  72722472         movec   m0,n7
P:0144 5E6E00         4  73122469         move    a,y:(r6+n6)
P:0145 237E00         2  73322489         move    n3,n6
P:0146 56F400 0000FF  3  73622501         move    #>$FF,a
P:0148 5D6F00         4  74022474         move    b1,y:(r7+n7)
P:0149 77F400 FFFFFD  3  74322486         move    #-3,n7
P:014B 50F400 FFFFFF  3  74622502         move    #$FFFFFF,a0
P:014D 6EEF00         4  75022488         move    y:(r7+n7),r6
P:014E 77F400 FFFFFE  3  75322492         move    #-2,n7
P:0150 044E10         4  75722491         lua     (r6)+n6,r0
P:0151 6BEF00         4  76122494         move    y:(r7+n7),r3
P:0152 000000         2  76322494         nop             ; (inserted)
P:0153 044B16         4  76722496         lua     (r3)+n3,r6
P:0154 000000         2  76922496         nop             ; (inserted)
P:0155 205E00         2  77122498         move    (r6)+
P:0156 57D600         2  77322499         move    x:(r6)-,b
P:0157 51E600         2  77522500         move    x:(r6),b0
P:0158 0BF080 rrrrrr  6  78122504         jsr     FSTFM1000WriteRegister
                            22523 
                            22524 ; 1047 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22525 ; 1048 |        AGC_CONTROL1_REG_ADDR,
                            22526 ; 1049 |        WHOLEREG_MASK,
                            22527 ; 1050 |        &pStfmTuneData->sd_ctl_ShadowAgcControl1_dw,
                            22528 ; 1051 |        pStfmTuneDefault->sd_ctl_ShadowAgcControl1_dw);
                            22529 
P:015A 3B1E00         2  78322531         move    #30,n3
P:015B 045FA0         2  78522505         movec   m0,n7
P:015C 44F400 000001  3  78822516         move    #>1,x0
P:015E 5FEF00         4  79222507         move    y:(r7+n7),b
P:015F 21FE48         2  79422517         add     x0,b	                b,n6
P:0160 77F400 FFFFD5  3  79722511         move    #-43,n7
P:0162 44F400 000044  3  80022549         move    #>68,x0
P:0164 044F16         4  80422513         lua     (r7)+n7,r6
P:0165 045FA0         2  80622518         movec   m0,n7
P:0166 5E6E00         4  81022515         move    a,y:(r6+n6)
P:0167 237E00         2  81222535         move    n3,n6
P:0168 56F400 0000FF  3  81522547         move    #>$FF,a
P:016A 5D6F00         4  81922520         move    b1,y:(r7+n7)
P:016B 77F400 FFFFFD  3  82222532         move    #-3,n7
P:016D 50F400 FFFFFF  3  82522548         move    #$FFFFFF,a0
P:016F 6EEF00         4  82922534         move    y:(r7+n7),r6
P:0170 77F400 FFFFFE  3  83222538         move    #-2,n7
P:0172 044E10         4  83622537         lua     (r6)+n6,r0
P:0173 6BEF00         4  84022540         move    y:(r7+n7),r3
P:0174 000000         2  84222540         nop             ; (inserted)
P:0175 044B16         4  84622542         lua     (r3)+n3,r6
P:0176 000000         2  84822542         nop             ; (inserted)
P:0177 205E00         2  85022544         move    (r6)+
P:0178 57D600         2  85222545         move    x:(r6)-,b
P:0179 51E600         2  85422546         move    x:(r6),b0
P:017A 0BF080 rrrrrr  6  86022550         jsr     FSTFM1000WriteRegister
                            22569 
                            22570 ; 1052 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22571 ; 1053 |        AGC_CONTROL2_REG_ADDR,
                            22572 ; 1054 |        WHOLEREG_MASK,
                            22573 ; 1055 |        &pStfmTuneData->sd_ctl_ShadowAgcControl2_dw,
                            22574 ; 1056 |        pStfmTuneDefault->sd_ctl_ShadowAgcControl2_dw);
                            22575 
P:017C 3B2000         2  86222577         move    #$20,n3
P:017D 045FA0         2  86422551         movec   m0,n7
P:017E 44F400 000048  3  86722600         move    #>72,x0
P:0180 5FEF00         4  87122553         move    y:(r7+n7),b
P:0181 21FE00         2  87322554         move    b,n6
P:0182 77F400 FFFFD5  3  87622557         move    #-43,n7
P:0184 000000         2  87822557         nop             ; (inserted)
P:0185 044F16         4  88222559         lua     (r7)+n7,r6
P:0186 045FA0         2  88422564         movec   m0,n7
P:0187 5E6E00         4  88822561         move    a,y:(r6+n6)
P:0188 56F400 000001  3  89122562         move    #>1,a
P:018A 237E18         2  89322563         add     a,b	                n3,n6
P:018B 56F400 0000FF  3  89622598         move    #>$FF,a
P:018D 5D6F00         4  90022566         move    b1,y:(r7+n7)
P:018E 77F400 FFFFFD  3  90322578         move    #-3,n7
P:0190 50F400 FFFFFF  3  90622599         move    #$FFFFFF,a0
P:0192 6EEF00         4  91022580         move    y:(r7+n7),r6
P:0193 77F400 FFFFFE  3  91322586         move    #-2,n7
P:0195 044E10         4  91722583         lua     (r6)+n6,r0
P:0196 6BEF00         4  92122588         move    y:(r7+n7),r3
P:0197 000000         2  92322588         nop             ; (inserted)
P:0198 044B16         4  92722590         lua     (r3)+n3,r6
P:0199 000000         2  92922590         nop             ; (inserted)
P:019A 205E00         2  93122595         move    (r6)+
P:019B 57D600         2  93322596         move    x:(r6)-,b
P:019C 51E600         2  93522597         move    x:(r6),b0
P:019D 0BF080 rrrrrr  6  94122601         jsr     FSTFM1000WriteRegister
                            22620 
                            22621 ; 1057 |    // Did any register's initialization fail?
                            22622 ; 1058 |    for(  iIndex -= 1; iIndex > 0; --iIndex)
                            22623 
P:019F 045FA0         2  94322603         movec   m0,n7
P:01A0 46F400 000001  3  94622614         move    #>1,y0
P:01A2 5FEF00         4  95022605         move    y:(r7+n7),b
P:01A3 21FD58         2  95222615         add     y0,b	                b,n5
P:01A4 77F400 FFFFD5  3  95522609         move    #-43,n7
P:01A6 21BE00         2  95722616         move    b1,n6
P:01A7 044F15         4  96122611         lua     (r7)+n7,r5
P:01A8 22B600         2  96322617         move    r5,r6
P:01A9 5E6D00         4  96722613         move    a,y:(r5+n5)
P:01AA 204E00         2  96922619         move    (r6)+n6
P:01AB 0AF080 rrrrrr  6  97522625         jmp     L45
                            22626 
                            22627 ; 1059 |    {
                            22628 ; 1060 |        if (SUCCESS != RetCodes[iIndex])
                            22629 
P:01AD 5EE600         2  97722631 L44:    move    y:(r6),a
P:01AE 200003         2  97922632         tst     a
P:01AF 0AF0A2 rrrrrr  6  98522633         jne     L46
                            22635 L45:
P:01B1 20565C         2  98722636         sub     y0,b	                (r6)-
P:01B2 0AF0A7 rrrrrr  6  99322637         jgt     L44
                            22638 
                            22639 ; 1061 |        {
                            22640 ; 1062 |            //SystemHalt();
                            22641 ; 1063 |            break;
                            22642 ; 1064 |        }
                            22643 ; 1065 |    }
                            22644 ; 1066 |    return RetCodes[iIndex];
                            22645 
                            22647 L46:
                            22651 
                            22652 ; 1067 |
                            22653 ; 1068 |}
                            22654 
P:01B4 21BE00         2  99522647         move    b1,n6
P:01B5 77F400 FFFFD4  3  99822656         move    #-44,n7
P:01B7 22B600         2 100022648         move    r5,r6
P:01B8 05EF7C         4 100422658         movec   y:(r7+n7),ssh
P:01B9 5EEE00         4 100822650         move    y:(r6+n6),a
P:01BA 204F00         2 101022660         move    (r7)+n7
P:01BB 00000C         4 101422662         rts
                            22665 
                            22666 ; 1069 |#ifdef FUNCLET
                            22667 ; 1070 |    #pragma asm
P:0038                      22668         org p,".ptextstfm1000":
                            22669 ; 1072 |    #pragma endasm
                            22670 ; 1073 |#endif
                            22671 ; 1074 |
                            22672 ; 1075 |////////////////////////////////////////////////////////////////////////////////
                            22673 ; 1076 |//!
                            22674 ; 1077 |//! \brief      STFM register initialization for power-up
                            22675 ; 1078 |//! \fntype     Function
                            22676 ; 1079 |//!
                            22677 ; 1080 |//! \param[in]  None
                            22678 ; 1081 |//!
                            22679 ; 1082 |//! \return     SUCCESS/ERROR.
                            22680 ; 1083 |//!
                            22681 ; 1084 |////////////////////////////////////////////////////////////////////////////////
                            22682 ; 1085 |#ifdef FUNCLET
                            22683 ; 1086 |    #pragma asm
                            22684         FSTFM1000RegsPowerUp2:
                            22685 
                            22690 
                            22691         ;If using funclet, function will be executed via funclet kernel
                            22692         CallFunclet2 RSRC_FUNCLET_STFM1000_REG_POWER_UP2
P:0038 0D0082         4  14522692     jsr       $82
P:0039 000432               22692     DC       RSRC_FUNCLET_STFM1000_REG_POWER_UP2  ; 1 word
                            22693 
P:0000                      22694         org p,"SYSFUNCLET_STFM1000_REG_POWER_UP2_P":
P:0000 000432               22695         dc      RSRC_FUNCLET_STFM1000_REG_POWER_UP2
                            22696 ; 1099 |    #pragma endasm
                            22697 ; 1100 |_reentrant INT STFM1000RegsPowerUp2_Funclet(void)
                            22698 ; 1101 |#else
                            22699 ; 1102 |_reentrant INT STFM1000RegsPowerUp2(void)
                            22700 ; 1103 |#endif
                            22701 ; 1104 |{
                            22702 
                            22707 FSTFM1000RegsPowerUp2_Funclet:
                            22717 
                            22718 ; 1105 |    STFM1000Tune_t * pStfmTuneData = &StfmTuneData;
                            22719 
                            22725 
                            22726 ; 1106 |    STFM1000Tune_t _X * pStfmTuneDefault = &StfmTuneDefault; // moved to X feb '06
                            22727 
                            22738 
                            22739 ; 1107 |    INT RetCodes[40]; // Allows storing upto 29 register write results
                            22740 ; 1108 |    DWORD dwShadowTemp;
                            22741 ; 1109 |    int iIndex = 1;
                            22742 ; 1110 |
                            22743 ; 1111 |    RetCodes[0] = SUCCESS;
                            22744 
                            22750 
                            22751 ; 1112 |
                            22752 ; 1113 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22753 ; 1114 |        CLK1_REG_ADDR,
                            22754 ; 1115 |        WHOLEREG_MASK,
                            22755 ; 1116 |        &pStfmTuneData->sd_ctl_ShadowClk1_dw,
                            22756 ; 1117 |        0x10000000);
                            22757 
P:0001 055F7C         2    222708         movec   ssh,y:(r7)+
P:0002 3F301B         2    422746         clr     b	                #48,n7
P:0003 3E1800         2    622759         move    #24,n6
P:0004 62F400 rrrrrr  3    922729         move    #FStfmTuneDefault,r2
P:0006 66F400 rrrrrr  3   1222721         move    #FStfmTuneData,r6
P:0008 56F400 0000FF  3   1522773         move    #>$FF,a
P:000A 44F400 000034  3   1822775         move    #>52,x0
P:000C 204F00         2   2022713         move    (r7)+n7
P:000D 77F400 FFFFFB  3   2322730         move    #-5,n7
P:000F 50F400 FFFFFF  3   2622774         move    #$FFFFFF,a0
P:0011 6A6F00         4   3022732         move    r2,y:(r7+n7)
P:0012 77F400 FFFFD2  3   3322747         move    #-46,n7
P:0014 000000         2   3522747         nop             ; (inserted)
P:0015 5F6F00         4   3922749         move    b,y:(r7+n7)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0016 77F400 FFFFFA  3   4222760         move    #-6,n7
P:0018 57F400 000010  3   4522776         move    #>$10,b
P:001A 6E6F00         4   4922762         move    r6,y:(r7+n7)
P:001B 77F400 FFFFFC  3   5222763         move    #-4,n7
P:001D 204E00         2   5422766         move    (r6)+n6
P:001E 22D000         2   5622772         move    r6,r0
P:001F 7E6F00         4   6022765         move    n6,y:(r7+n7)
P:0020 77F400 FFFFFD  3   6322769         move    #-3,n7
P:0022 000000         2   6522769         nop             ; (inserted)
P:0023 6E6F00         4   6922771         move    r6,y:(r7+n7)
P:0024 0BF080 rrrrrr  6   7522777         jsr     FSTFM1000WriteRegister
                            22781 
                            22782 ; 1118 |
                            22783 ; 1119 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22784 ; 1120 |        CLK1_REG_ADDR,
                            22785 ; 1121 |        WHOLEREG_MASK,
                            22786 ; 1122 |        &pStfmTuneData->sd_ctl_ShadowClk1_dw,
                            22787 ; 1123 |        0x20000000);
                            22788 
P:0026 77F400 FFFFD3  3   7822778         move    #-45,n7
P:0028 57F400 000020  3   8122796         move    #>$20,b
P:002A 44F400 000034  3   8422795         move    #>52,x0
P:002C 5E6F00         4   8822780         move    a,y:(r7+n7)
P:002D 77F400 FFFFFD  3   9122790         move    #-3,n7
P:002F 56F400 0000FF  3   9422793         move    #>$FF,a
P:0031 68EF00         4   9822792         move    y:(r7+n7),r0
P:0032 50F400 FFFFFF  3  10122794         move    #$FFFFFF,a0
P:0034 0BF080 rrrrrr  6  10722797         jsr     FSTFM1000WriteRegister
                            22803 
                            22804 ; 1124 |
                            22805 ; 1125 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22806 ; 1126 |        CLK1_REG_ADDR,
                            22807 ; 1127 |        WHOLEREG_MASK,
                            22808 ; 1128 |        &pStfmTuneData->sd_ctl_ShadowClk1_dw,
                            22809 ; 1129 |        0x00000000);
                            22810 
P:0036 77F41B FFFFD4  3  11022812         clr     b	                #-44,n7
P:0038 44F400 000034  3  11322818         move    #>52,x0
P:003A 5E6F00         4  11722800         move    a,y:(r7+n7)
P:003B 77F400 FFFFFD  3  12022813         move    #-3,n7
P:003D 56F400 0000FF  3  12322816         move    #>$FF,a
P:003F 68EF00         4  12722815         move    y:(r7+n7),r0
P:0040 50F400 FFFFFF  3  13022817         move    #$FFFFFF,a0
P:0042 0BF080 rrrrrr  6  13622819         jsr     FSTFM1000WriteRegister
                            22823 
                            22824 ; 1130 |
                            22825 ; 1131 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22826 ; 1132 |        CLK2_REG_ADDR,
                            22827 ; 1133 |        WHOLEREG_MASK,
                            22828 ; 1134 |        &pStfmTuneData->sd_ctl_ShadowClk2_dw,
                            22829 ; 1135 |        pStfmTuneDefault->sd_ctl_ShadowClk2_dw);
                            22830 
P:0044 3A1A00         2  13822832         move    #26,n2
P:0045 77F400 FFFFD5  3  14122820         move    #-43,n7
P:0047 235E00         2  14322836         move    n2,n6
P:0048 44F400 000038  3  14622850         move    #>$38,x0
P:004A 5E6F00         4  15022822         move    a,y:(r7+n7)
P:004B 77F400 FFFFFA  3  15322833         move    #-6,n7
P:004D 56F400 0000FF  3  15622848         move    #>$FF,a
P:004F 6EEF00         4  16022835         move    y:(r7+n7),r6
P:0050 77F400 FFFFFB  3  16322839         move    #-5,n7
P:0052 044E10         4  16722838         lua     (r6)+n6,r0
P:0053 6AEF00         4  17122841         move    y:(r7+n7),r2
P:0054 50F400 FFFFFF  3  17422849         move    #$FFFFFF,a0
P:0056 044A16         4  17822843         lua     (r2)+n2,r6
P:0057 000000         2  18022843         nop             ; (inserted)
P:0058 205E00         2  18222845         move    (r6)+
P:0059 57D600         2  18422846         move    x:(r6)-,b
P:005A 51E600         2  18622847         move    x:(r6),b0
P:005B 0BF080 rrrrrr  6  19222851         jsr     FSTFM1000WriteRegister
                            22865 
                            22866 ; 1136 |
                            22867 ; 1137 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22868 ; 1138 |        REF_REG_ADDR,
                            22869 ; 1139 |        WHOLEREG_MASK,
                            22870 ; 1140 |        &pStfmTuneData->sd_ctl_ShadowRef_dw,
                            22871 ; 1141 |        pStfmTuneDefault->sd_ctl_ShadowRef_dw);
                            22872 
P:005D 3E0400         2  19422853         move    #4,n6
P:005E 77F400 FFFFD2  3  19722854         move    #-46,n7
P:0060 57F400 000004  3  20022852         move    #>4,b
P:0062 044F16         4  20422856         lua     (r7)+n7,r6
P:0063 77F400 FFFFFE  3  20722861         move    #-2,n7
P:0065 46F400 000001  3  21022859         move    #>1,y0
P:0067 3D1258         2  21222860         add     y0,b	                #18,n5
P:0068 44F400 000028  3  21522892         move    #>40,x0
P:006A 5E6E00         4  21922858         move    a,y:(r6+n6)
P:006B 23BE00         2  22122878         move    n5,n6
P:006C 56F400 0000FF  3  22422890         move    #>$FF,a
P:006E 5D6F00         4  22822863         move    b1,y:(r7+n7)
P:006F 77F400 FFFFFA  3  23122875         move    #-6,n7
P:0071 50F400 FFFFFF  3  23422891         move    #$FFFFFF,a0
P:0073 6EEF00         4  23822877         move    y:(r7+n7),r6
P:0074 77F400 FFFFFB  3  24122881         move    #-5,n7
P:0076 044E10         4  24522880         lua     (r6)+n6,r0
P:0077 6DEF00         4  24922883         move    y:(r7+n7),r5
P:0078 000000         2  25122883         nop             ; (inserted)
P:0079 044D16         4  25522885         lua     (r5)+n5,r6
P:007A 000000         2  25722885         nop             ; (inserted)
P:007B 205E00         2  25922887         move    (r6)+
P:007C 57D600         2  26122888         move    x:(r6)-,b
P:007D 51E600         2  26322889         move    x:(r6),b0
P:007E 0BF080 rrrrrr  6  26922893         jsr     FSTFM1000WriteRegister
                            22912 
                            22913 ; 1142 |
                            22914 ; 1143 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22915 ; 1144 |        CLK1_REG_ADDR,
                            22916 ; 1145 |        WHOLEREG_MASK,
                            22917 ; 1146 |        &pStfmTuneData->sd_ctl_ShadowClk1_dw,
                            22918 ; 1147 |        0x30000000);
                            22919 
P:0080 77F400 FFFFFE  3  27222894         move    #-2,n7
P:0082 44F400 000001  3  27522905         move    #>1,x0
P:0084 5FEF00         4  27922896         move    y:(r7+n7),b
P:0085 21FE48         2  28122906         add     x0,b	                b,n6
P:0086 77F400 FFFFD2  3  28422900         move    #-46,n7
P:0088 44F400 000034  3  28722926         move    #>52,x0
P:008A 044F16         4  29122902         lua     (r7)+n7,r6
P:008B 77F400 FFFFFE  3  29422907         move    #-2,n7
P:008D 5E6E00         4  29822904         move    a,y:(r6+n6)
P:008E 56F400 0000FF  3  30122924         move    #>$FF,a
P:0090 5D6F00         4  30522909         move    b1,y:(r7+n7)
P:0091 77F400 FFFFFD  3  30822921         move    #-3,n7
P:0093 50F400 FFFFFF  3  31122925         move    #$FFFFFF,a0
P:0095 68EF00         4  31522923         move    y:(r7+n7),r0
P:0096 57F400 000030  3  31822927         move    #>$30,b
P:0098 0BF080 rrrrrr  6  32422928         jsr     FSTFM1000WriteRegister
                            22947 
                            22948 ; 1148 |
                            22949 ; 1149 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22950 ; 1150 |        CLK1_REG_ADDR,
                            22951 ; 1151 |        WHOLEREG_MASK,
                            22952 ; 1152 |        &pStfmTuneData->sd_ctl_ShadowClk1_dw,
                            22953 ; 1153 |        0x30002000);
                            22954 
P:009A 77F400 FFFFFE  3  32722929         move    #-2,n7
P:009C 44F400 000034  3  33022961         move    #>52,x0
P:009E 5FEF00         4  33422931         move    y:(r7+n7),b
P:009F 21FE00         2  33622932         move    b,n6
P:00A0 77F400 FFFFD2  3  33922935         move    #-46,n7
P:00A2 000000         2  34122935         nop             ; (inserted)
P:00A3 044F16         4  34522937         lua     (r7)+n7,r6
P:00A4 77F400 FFFFFE  3  34822942         move    #-2,n7
P:00A6 5E6E00         4  35222939         move    a,y:(r6+n6)
P:00A7 56F400 000001  3  35522940         move    #>1,a
P:00A9 56F418 0000FF  3  35822941         add     a,b	                #>$FF,a
P:00AB 50F400 FFFFFF  3  36122960         move    #$FFFFFF,a0
P:00AD 5D6F00         4  36522944         move    b1,y:(r7+n7)
P:00AE 77F400 FFFFFD  3  36822956         move    #-3,n7
P:00B0 57F400 000030  3  37122962         move    #>$30,b
P:00B2 68EF00         4  37522958         move    y:(r7+n7),r0
P:00B3 51F400 002000  3  37822963         move    #$2000,b0
P:00B5 0BF080 rrrrrr  6  38422964         jsr     FSTFM1000WriteRegister
                            22983 
                            22984 ; 1154 |
                            22985 ; 1155 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            22986 ; 1156 |        CLK1_REG_ADDR,
                            22987 ; 1157 |        WHOLEREG_MASK,
                            22988 ; 1158 |        &pStfmTuneData->sd_ctl_ShadowClk1_dw,
                            22989 ; 1159 |        pStfmTuneDefault->sd_ctl_ShadowClk1_dw);
                            22990 
P:00B7 77F400 FFFFFE  3  38722965         move    #-2,n7
P:00B9 46F400 000001  3  39022976         move    #>1,y0
P:00BB 44F400 000034  3  39323009         move    #>52,x0
P:00BD 5FEF00         4  39722967         move    y:(r7+n7),b
P:00BE 21FE58         2  39922977         add     y0,b	                b,n6
P:00BF 77F400 FFFFD2  3  40222971         move    #-46,n7
P:00C1 000000         2  40422971         nop             ; (inserted)
P:00C2 044F16         4  40822973         lua     (r7)+n7,r6
P:00C3 77F400 FFFFFE  3  41122978         move    #-2,n7
P:00C5 5E6E00         4  41522975         move    a,y:(r6+n6)
P:00C6 56F400 0000FF  3  41823004         move    #>$FF,a
P:00C8 5D6F00         4  42222980         move    b1,y:(r7+n7)
P:00C9 77F400 FFFFFC  3  42522992         move    #-4,n7
P:00CB 50F400 FFFFFF  3  42823005         move    #$FFFFFF,a0
P:00CD 7DEF00         4  43222994         move    y:(r7+n7),n5
P:00CE 77F400 FFFFFB  3  43522995         move    #-5,n7
P:00D0 000000         2  43722995         nop             ; (inserted)
P:00D1 6DEF00         4  44122997         move    y:(r7+n7),r5
P:00D2 77F400 FFFFFD  3  44423006         move    #-3,n7
P:00D4 044D16         4  44822999         lua     (r5)+n5,r6
P:00D5 68EF00         4  45223008         move    y:(r7+n7),r0
P:00D6 205E00         2  45423001         move    (r6)+
P:00D7 57D600         2  45623002         move    x:(r6)-,b
P:00D8 51E600         2  45823003         move    x:(r6),b0
P:00D9 0BF080 rrrrrr  6  46423010         jsr     FSTFM1000WriteRegister
                            23029 
                            23030 ; 1160 |
                            23031 ; 1161 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            23032 ; 1162 |        LNA_REG_ADDR,
                            23033 ; 1163 |        WHOLEREG_MASK,
                            23034 ; 1164 |        &pStfmTuneData->sd_ctl_ShadowLna_dw,
                            23035 ; 1165 |        pStfmTuneDefault->sd_ctl_ShadowLna_dw);
                            23036 
P:00DB 3B1400         2  46623038         move    #20,n3
P:00DC 77F400 FFFFFE  3  46923011         move    #-2,n7
P:00DE 44F400 000001  3  47223022         move    #>1,x0
P:00E0 5FEF00         4  47623013         move    y:(r7+n7),b
P:00E1 21FE48         2  47823023         add     x0,b	                b,n6
P:00E2 77F400 FFFFD2  3  48123017         move    #-46,n7
P:00E4 44F400 00002C  3  48423056         move    #>44,x0
P:00E6 044F16         4  48823019         lua     (r7)+n7,r6
P:00E7 77F400 FFFFFC  3  49123024         move    #-4,n7
P:00E9 5E6E00         4  49523021         move    a,y:(r6+n6)
P:00EA 237E00         2  49723042         move    n3,n6
P:00EB 56F400 0000FF  3  50023054         move    #>$FF,a
P:00ED 5D6F00         4  50423026         move    b1,y:(r7+n7)
P:00EE 77F400 FFFFFA  3  50723039         move    #-6,n7
P:00F0 50F400 FFFFFF  3  51023055         move    #$FFFFFF,a0
P:00F2 6EEF00         4  51423041         move    y:(r7+n7),r6
P:00F3 77F400 FFFFFB  3  51723045         move    #-5,n7
P:00F5 044E10         4  52123044         lua     (r6)+n6,r0
P:00F6 6BEF00         4  52523047         move    y:(r7+n7),r3
P:00F7 000000         2  52723047         nop             ; (inserted)
P:00F8 044B16         4  53123049         lua     (r3)+n3,r6
P:00F9 000000         2  53323049         nop             ; (inserted)
P:00FA 205E00         2  53523051         move    (r6)+
P:00FB 57D600         2  53723052         move    x:(r6)-,b
P:00FC 51E600         2  53923053         move    x:(r6),b0
P:00FD 0BF080 rrrrrr  6  54523057         jsr     FSTFM1000WriteRegister
                            23076 
                            23077 ; 1166 |
                            23078 ; 1167 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            23079 ; 1168 |        MIXFILT_REG_ADDR,
                            23080 ; 1169 |        WHOLEREG_MASK,
                            23081 ; 1170 |        &pStfmTuneData->sd_ctl_ShadowMixFilt_dw,
                            23082 ; 1171 |        0x00008000);
                            23083 
P:00FF 77F400 FFFFFC  3  54823058         move    #-4,n7
P:0101 44F400 000030  3  55123095         move    #>$30,x0
P:0103 5FEF00         4  55523060         move    y:(r7+n7),b
P:0104 21FE00         2  55723061         move    b,n6
P:0105 77F400 FFFFD2  3  56023064         move    #-46,n7
P:0107 000000         2  56223064         nop             ; (inserted)
P:0108 044F16         4  56623066         lua     (r7)+n7,r6
P:0109 77F400 FFFFFC  3  56923071         move    #-4,n7
P:010B 5E6E00         4  57323068         move    a,y:(r6+n6)
P:010C 56F400 000001  3  57623069         move    #>1,a
P:010E 3E1618         2  57823070         add     a,b	                #22,n6
P:010F 5D6F1B         4  58223100         clr     b	                b1,y:(r7+n7)
P:0110 77F400 FFFFFA  3  58523086         move    #-6,n7
P:0112 56F400 0000FF  3  58823093         move    #>$FF,a
P:0114 6EEF00         4  59223088         move    y:(r7+n7),r6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0115 77F400 FFFFFD  3  59523089         move    #-3,n7
P:0117 51F400 008000  3  59823101         move    #$8000,b0
P:0119 50F400 FFFFFF  3  60123094         move    #$FFFFFF,a0
P:011B 204E00         2  60323092         move    (r6)+n6
P:011C 22D000         2  60523099         move    r6,r0
P:011D 7E6F00         4  60923091         move    n6,y:(r7+n7)
P:011E 77F400 FFFFFE  3  61223096         move    #-2,n7
P:0120 000000         2  61423096         nop             ; (inserted)
P:0121 6E6F00         4  61823098         move    r6,y:(r7+n7)
P:0122 0BF080 rrrrrr  6  62423102         jsr     FSTFM1000WriteRegister
                            23127 
                            23128 ; 1172 |
                            23129 ; 1173 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            23130 ; 1174 |        MIXFILT_REG_ADDR,
                            23131 ; 1175 |        WHOLEREG_MASK,
                            23132 ; 1176 |        &pStfmTuneData->sd_ctl_ShadowMixFilt_dw,
                            23133 ; 1177 |        0x00000000);
                            23134 
P:0124 77F400 FFFFFC  3  62723103         move    #-4,n7
P:0126 46F400 000001  3  63023114         move    #>1,y0
P:0128 44F400 000030  3  63323123         move    #>$30,x0
P:012A 5FEF00         4  63723105         move    y:(r7+n7),b
P:012B 21FE58         2  63923115         add     y0,b	                b,n6
P:012C 77F400 FFFFD2  3  64223109         move    #-46,n7
P:012E 000000         2  64423109         nop             ; (inserted)
P:012F 044F16         4  64823111         lua     (r7)+n7,r6
P:0130 045FA0         2  65023116         movec   m0,n7
P:0131 5E6E00         4  65423113         move    a,y:(r6+n6)
P:0132 5D6F1B         4  65823136         clr     b	                b1,y:(r7+n7)
P:0133 77F400 FFFFFE  3  66123124         move    #-2,n7
P:0135 56F400 0000FF  3  66423121         move    #>$FF,a
P:0137 68EF00         4  66823126         move    y:(r7+n7),r0
P:0138 50F400 FFFFFF  3  67123122         move    #$FFFFFF,a0
P:013A 0BF080 rrrrrr  6  67723137         jsr     FSTFM1000WriteRegister
                            23156 
                            23157 ; 1178 |
                            23158 ; 1179 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            23159 ; 1180 |        MIXFILT_REG_ADDR,
                            23160 ; 1181 |        WHOLEREG_MASK,
                            23161 ; 1182 |        &pStfmTuneData->sd_ctl_ShadowMixFilt_dw,
                            23162 ; 1183 |        pStfmTuneDefault->sd_ctl_ShadowMixFilt_dw);    // 0x00007205
                            23163 
P:013C 045FA0         2  67923138         movec   m0,n7
P:013D 44F400 000001  3  68223149         move    #>1,x0
P:013F 5FEF00         4  68623140         move    y:(r7+n7),b
P:0140 21FE48         2  68823150         add     x0,b	                b,n6
P:0141 77F400 FFFFD2  3  69123144         move    #-46,n7
P:0143 44F400 000030  3  69423182         move    #>$30,x0
P:0145 044F16         4  69823146         lua     (r7)+n7,r6
P:0146 045FA0         2  70023151         movec   m0,n7
P:0147 5E6E00         4  70423148         move    a,y:(r6+n6)
P:0148 56F400 0000FF  3  70723177         move    #>$FF,a
P:014A 5D6F00         4  71123153         move    b1,y:(r7+n7)
P:014B 77F400 FFFFFD  3  71423165         move    #-3,n7
P:014D 50F400 FFFFFF  3  71723178         move    #$FFFFFF,a0
P:014F 7CEF00         4  72123167         move    y:(r7+n7),n4
P:0150 77F400 FFFFFB  3  72423168         move    #-5,n7
P:0152 000000         2  72623168         nop             ; (inserted)
P:0153 6CEF00         4  73023170         move    y:(r7+n7),r4
P:0154 77F400 FFFFFE  3  73323179         move    #-2,n7
P:0156 044C16         4  73723172         lua     (r4)+n4,r6
P:0157 68EF00         4  74123181         move    y:(r7+n7),r0
P:0158 205E00         2  74323174         move    (r6)+
P:0159 57D600         2  74523175         move    x:(r6)-,b
P:015A 51E600         2  74723176         move    x:(r6),b0
P:015B 0BF080 rrrrrr  6  75323183         jsr     FSTFM1000WriteRegister
                            23202 
                            23203 ; 1184 |
                            23204 ; 1185 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            23205 ; 1186 |        ADC_REG_ADDR,
                            23206 ; 1187 |        WHOLEREG_MASK,
                            23207 ; 1188 |        &pStfmTuneData->sd_ctl_ShadowAdc_dw,
                            23208 ; 1189 |        pStfmTuneDefault->sd_ctl_ShadowAdc_dw);     // 0x00033282
                            23209 
P:015D 3D1C00         2  75523211         move    #28,n5
P:015E 045FA0         2  75723184         movec   m0,n7
P:015F 44F400 00003C  3  76023234         move    #>$3C,x0
P:0161 5FEF00         4  76423186         move    y:(r7+n7),b
P:0162 21FE00         2  76623187         move    b,n6
P:0163 77F400 FFFFD2  3  76923190         move    #-46,n7
P:0165 000000         2  77123190         nop             ; (inserted)
P:0166 044F16         4  77523192         lua     (r7)+n7,r6
P:0167 77F400 FFFFFC  3  77823197         move    #-4,n7
P:0169 5E6E00         4  78223194         move    a,y:(r6+n6)
P:016A 56F400 000001  3  78523195         move    #>1,a
P:016C 23BE18         2  78723196         add     a,b	                n5,n6
P:016D 56F400 0000FF  3  79023232         move    #>$FF,a
P:016F 5D6F00         4  79423199         move    b1,y:(r7+n7)
P:0170 77F400 FFFFFA  3  79723212         move    #-6,n7
P:0172 50F400 FFFFFF  3  80023233         move    #$FFFFFF,a0
P:0174 6EEF00         4  80423214         move    y:(r7+n7),r6
P:0175 77F400 FFFFFB  3  80723220         move    #-5,n7
P:0177 044E10         4  81123217         lua     (r6)+n6,r0
P:0178 6DEF00         4  81523222         move    y:(r7+n7),r5
P:0179 000000         2  81723222         nop             ; (inserted)
P:017A 044D16         4  82123224         lua     (r5)+n5,r6
P:017B 000000         2  82323224         nop             ; (inserted)
P:017C 205E00         2  82523229         move    (r6)+
P:017D 57D600         2  82723230         move    x:(r6)-,b
P:017E 51E600         2  82923231         move    x:(r6),b0
P:017F 0BF080 rrrrrr  6  83523235         jsr     FSTFM1000WriteRegister
                            23255 
                            23256 ; 1190 |
                            23257 ; 1191 |    /* Following is a RO register, however writing to it does clear bits */
                            23258 ; 1192 |    RetCodes[iIndex++] = STFM1000WriteRegister(
                            23259 ; 1193 |        ATTENTION_REG_ADDR,
                            23260 ; 1194 |        WHOLEREG_MASK,
                            23261 ; 1195 |        &dwShadowTemp,
                            23262 ; 1196 |        0x0000003F);
                            23263 
P:0181 77F400 FFFFFC  3  83823237         move    #-4,n7
P:0183 46F400 000001  3  84123248         move    #>1,y0
P:0185 44F400 000078  3  84423272         move    #>$78,x0
P:0187 5FEF00         4  84823239         move    y:(r7+n7),b
P:0188 21FE58         2  85023249         add     y0,b	                b,n6
P:0189 77F400 FFFFD2  3  85323243         move    #-46,n7
P:018B 000000         2  85523243         nop             ; (inserted)
P:018C 044F16         4  85923245         lua     (r7)+n7,r6
P:018D 77F400 FFFFFA  3  86223250         move    #-6,n7
P:018F 5E6E00         4  86623247         move    a,y:(r6+n6)
P:0190 5D6F1B         4  87023268         clr     b	                b1,y:(r7+n7)
P:0191 77F400 FFFFD0  3  87323265         move    #-48,n7
P:0193 56F400 0000FF  3  87623270         move    #>$FF,a
P:0195 044F10         4  88023267         lua     (r7)+n7,r0
P:0196 293F00         2  88223269         move    #$3F,b0
P:0197 50F400 FFFFFF  3  88523271         move    #$FFFFFF,a0
P:0199 0BF080 rrrrrr  6  89123273         jsr     FSTFM1000WriteRegister
                            23290 
                            23291 ; 1197 |
                            23292 ; 1198 |    // Did any register's initialization fail?
                            23293 ; 1199 |    for(  iIndex -= 1; iIndex > 0; --iIndex)
                            23294 
P:019B 77F400 FFFFFA  3  89423274         move    #-6,n7
P:019D 46F400 000001  3  89723285         move    #>1,y0
P:019F 5FEF00         4  90123276         move    y:(r7+n7),b
P:01A0 21FC58         2  90323286         add     y0,b	                b,n4
P:01A1 77F400 FFFFD2  3  90623280         move    #-46,n7
P:01A3 000000         2  90823280         nop             ; (inserted)
P:01A4 044F14         4  91223282         lua     (r7)+n7,r4
P:01A5 000000         2  91423282         nop             ; (inserted)
P:01A6 5E6C00         4  91823284         move    a,y:(r4+n4)
P:01A7 21BC00         2  92023287         move    b1,n4
P:01A8 000000         2  92223287         nop             ; (inserted)
P:01A9 044C16         4  92623289         lua     (r4)+n4,r6
P:01AA 0AF080 rrrrrr  6  93223296         jmp     L60
                            23297 
                            23298 ; 1200 |    {
                            23299 ; 1201 |        if (SUCCESS != RetCodes[iIndex])
                            23300 
P:01AC 5EE600         2  93423302 L59:    move    y:(r6),a
P:01AD 200003         2  93623303         tst     a
P:01AE 0AF0A2 rrrrrr  6  94223304         jne     L61
                            23306 L60:
P:01B0 20565C         2  94423307         sub     y0,b	                (r6)-
P:01B1 0AF0A7 rrrrrr  6  95023308         jgt     L59
                            23309 
                            23310 ; 1202 |        {
                            23311 ; 1203 |            //SystemHalt();
                            23312 ; 1204 |            break;
                            23313 ; 1205 |        }
                            23314 ; 1206 |    }
                            23315 ; 1207 |    return RetCodes[iIndex];
                            23316 
                            23318 L61:
                            23322 
                            23323 ; 1208 |}
                            23324 
P:01B3 21BE00         2  95223318         move    b1,n6
P:01B4 77F400 FFFFCF  3  95523326         move    #-49,n7
P:01B6 229600         2  95723319         move    r4,r6
P:01B7 05EF7C         4  96123328         movec   y:(r7+n7),ssh
P:01B8 5EEE00         4  96523321         move    y:(r6+n6),a
P:01B9 204F00         2  96723330         move    (r7)+n7
P:01BA 00000C         4  97123332         rts
                            23335 
                            23336 ; 1209 |#ifdef FUNCLET
                            23337 ; 1210 |    #pragma asm
P:003A                      23338         org p,".ptextstfm1000":
                            23339 ; 1212 |    #pragma endasm
                            23340 ; 1213 |#endif
                            23341 ; 1214 |
                            23342 ; 1215 |////////////////////////////////////////////////////////////////////////////////
                            23343 ; 1216 |//
                            23344 ; 1217 |//>  Name:          TunerDriverIncrementUp
                            23345 ; 1218 |//
                            23346 ; 1219 |//   Type:          Function
                            23347 ; 1220 |//
                            23348 ; 1221 |//   Description:   Change FM frequency up one FM_TUNER_GRID and tune to it
                            23349 ; 1222 |//
                            23350 ; 1223 |//   Inputs:        none
                            23351 ; 1224 |//
                            23352 ; 1225 |//   Outputs:       Error status
                            23353 ; 1226 |//
                            23354 ; 1227 |//   Notes:         none
                            23355 ; 1228 |//<
                            23356 ; 1229 |////////////////////////////////////////////////////////////////////////////////
                            23357 ; 1230 |#ifdef FUNCLET
                            23358 ; 1231 |    #pragma asm
P:0002                      23359         org p,".stfm1000_SYS":
                            23360         FTunerDriverIncrementUp:
                            23361 
                            23366 
                            23367         ;If using funclet, function will be executed via funclet kernel
                            23368         CallFunclet2 RSRC_FUNCLET_TUNER_DRIVER_INC_UP
P:0002 0D0082         4    823368     jsr       $82
P:0003 00041D               23368     DC       RSRC_FUNCLET_TUNER_DRIVER_INC_UP  ; 1 word
                            23369 
P:0000                      23370         org p,"SYSFUNCLET_TUNER_DRIVER_INC_UP_P":
P:0000 00041D               23371         dc      RSRC_FUNCLET_TUNER_DRIVER_INC_UP
                            23372 ; 1245 |    #pragma endasm
                            23373 ; 1246 |_reentrant INT TunerDriverIncrementUp_Funclet(void)
                            23374 ; 1247 |#else
                            23375 ; 1248 |_reentrant INT TunerDriverIncrementUp(void)
                            23376 ; 1249 |#endif
                            23377 ; 1250 |{
                            23378 
                            23383 FTunerDriverIncrementUp_Funclet:
                            23387 
                            23388 ; 1251 |        if (s_wCurrentFMFrequency < FM_BAND_LIMIT_HIGH_FREQ)
                            23389 
P:0001 055F7C         2    223384         movec   ssh,y:(r7)+
P:0002 57F400 01A5E0  3    523392         move    #108000,b
P:0004 5EF000 rrrrrr  3    823391         move    y:Fs_wCurrentFMFrequency,a
P:0006 2A0000         2   1023393         move    #0,a2
P:0007 200005         2   1223394         cmp     b,a
P:0008 0AF0A1 rrrrrr  6   1823395         jge     L62
                            23396 
                            23397 ; 1252 |    {
                            23398 ; 1253 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            23399 ; 1254 |        s_wCurrentFMFrequency = 50 * (INT) ((s_wDisplayFMFrequency+50)/50);
                            23400 ; 1255 |#else
                            23401 ; 1256 |#ifdef SD_USE_100KHZ_TUNING_GRID
                            23402 ; 1257 |
                            23403 ; 1258 |        s_wCurrentFMFrequency = FM_TUNER_GRID * (INT) ((s_wCurrentFMFrequency+FM_TUNER_GRID)/FM_TUNER_GRID);
                            23404 
P:000A 57F400 000064  3   2123406         move    #>100,b
P:000C 200010         2   2323407         add     b,a
P:000D 0BF080 rrrrrr  6   2923408         jsr     Rdiv_uiuiui
                            23414 
                            23415 ; 1259 |#else
                            23416 ; 1260 |        s_wCurrentFMFrequency = (s_wCurrentFMFrequency+FM_TUNER_GRID);
                            23417 ; 1261 |#endif
                            23418 ; 1262 |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                            23419 ; 1263 |    }
                            23420 
P:000F 21A700         2   3123410         move    b1,y1
P:0010 210600         2   3323409         move    a0,y0
P:0011 2000B8         2   3523411         mpy     y0,y1,b
P:0012 20002A         2   3723412         asr     b
P:0013 597000 rrrrrr  3   4023413         move    b0,y:Fs_wCurrentFMFrequency
P:0015 0AF080 rrrrrr  6   4623422         jmp     L63
                            23423 
                            23424 ; 1264 |    else
                            23425 ; 1265 |        {
                            23426 ; 1266 |        s_wCurrentFMFrequency = FM_BAND_LIMIT_LOW_FREQ;
                            23427 
                            23429 L62:
                            23431 
                            23432 ; 1267 |        }
                            23433 ; 1268 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            23434 ; 1269 |    s_wDisplayFMFrequency = s_wCurrentFMFrequency;
                            23435 ; 1270 |#endif
                            23436 ; 1271 |    return (TunerDriverTuneToFrequency(s_wCurrentFMFrequency));
                            23437 
P:0017 50F400 0155CC  3   4923429         move    #87500,a0
P:0019 587000 rrrrrr  3   5223430         move    a0,y:Fs_wCurrentFMFrequency
P:001B 5EF000 rrrrrr  3   5523439 L63:    move    y:Fs_wCurrentFMFrequency,a
P:001D 218E00         2   5723440         move    a1,a
P:001E 0BF080 rrrrrr  6   6323441         jsr     FTunerDriverTuneToFrequency
                            23442 
                            23443 ; 1272 |}
                            23444 
P:0020 05FF7C         4   6723446         movec   y:-(r7),ssh
P:0021 000000         2   6923446         nop             ; (inserted)
P:0022 00000C         4   7323450         rts
                            23452 
                            23453 ; 1273 |#ifdef FUNCLET
                            23454 ; 1274 |    #pragma asm
P:003A                      23455         org p,".ptextstfm1000":
                            23456 ; 1276 |    #pragma endasm
                            23457 ; 1277 |#endif
                            23458 ; 1278 |
                            23459 ; 1279 |
                            23460 ; 1280 |////////////////////////////////////////////////////////////////////////////////
                            23461 ; 1281 |//
                            23462 ; 1282 |//>  Name:          TunerDriverIncrementDown
                            23463 ; 1283 |//
                            23464 ; 1284 |//   Type:          Function
                            23465 ; 1285 |//
                            23466 ; 1286 |//   Description:   Change FM frequency down one FM_TUNER_GRID and tune to it
                            23467 ; 1287 |//
                            23468 ; 1288 |//   Inputs:        none
                            23469 ; 1289 |//
                            23470 ; 1290 |//   Outputs:       Error status
                            23471 ; 1291 |//
                            23472 ; 1292 |//   Notes:         none
                            23473 ; 1293 |//<
                            23474 ; 1294 |////////////////////////////////////////////////////////////////////////////////
                            23475 ; 1295 |#ifdef FUNCLET
                            23476 ; 1296 |    #pragma asm
P:0004                      23477         org p,".stfm1000_SYS":
                            23478         FTunerDriverIncrementDown:
                            23479 
                            23484 
                            23485         ;If using funclet, function will be executed via funclet kernel
                            23486         CallFunclet2 RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN
P:0004 0D0082         4   1223486     jsr       $82
P:0005 00041E               23486     DC       RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN  ; 1 word
                            23487 
P:0000                      23488         org p,"SYSFUNCLET_TUNER_DRIVER_INC_DOWN_P":
P:0000 00041E               23489         dc      RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN
                            23490 ; 1310 |    #pragma endasm
                            23491 ; 1311 |_reentrant INT TunerDriverIncrementDown_Funclet(void)
                            23492 ; 1312 |#else
                            23493 ; 1313 |_reentrant INT TunerDriverIncrementDown(void)
                            23494 ; 1314 |#endif
                            23495 ; 1315 |{
                            23496 
                            23501 FTunerDriverIncrementDown_Funclet:
                            23505 
                            23506 ; 1316 |
                            23507 ; 1317 |        if (s_wCurrentFMFrequency > FM_BAND_LIMIT_LOW_FREQ)
                            23508 
P:0001 055F7C         2    223502         movec   ssh,y:(r7)+
P:0002 57F400 0155CC  3    523511         move    #87500,b
P:0004 5EF000 rrrrrr  3    823510         move    y:Fs_wCurrentFMFrequency,a
P:0006 2A0000         2   1023512         move    #0,a2
P:0007 200005         2   1223513         cmp     b,a
P:0008 0AF0AF rrrrrr  6   1823514         jle     L64
                            23515 
                            23516 ; 1318 |    {
                            23517 ; 1319 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            23518 ; 1320 |        s_wCurrentFMFrequency = 50 * (INT) ((s_wDisplayFMFrequency-50)/50);
                            23519 ; 1321 |#else
                            23520 ; 1322 |#ifdef SD_USE_100KHZ_TUNING_GRID
                            23521 ; 1323 |
                            23522 ; 1324 |        s_wCurrentFMFrequency = FM_TUNER_GRID * (INT) ((s_wCurrentFMFrequency-FM_TUNER_GRID)/FM_TUNER_GRID);
                            23523 
P:000A 57F400 000064  3   2123525         move    #>100,b
P:000C 200014         2   2323526         sub     b,a
P:000D 0BF080 rrrrrr  6   2923527         jsr     Rdiv_uiuiui
                            23533 
                            23534 ; 1325 |#else
                            23535 ; 1326 |        s_wCurrentFMFrequency = (s_wCurrentFMFrequency-FM_TUNER_GRID);
                            23536 ; 1327 |
                            23537 ; 1328 |#endif
                            23538 ; 1329 |#endif
                            23539 ; 1330 |        }
                            23540 
P:000F 21A700         2   3123529         move    b1,y1
P:0010 210600         2   3323528         move    a0,y0
P:0011 2000B8         2   3523530         mpy     y0,y1,b
P:0012 20002A         2   3723531         asr     b
P:0013 597000 rrrrrr  3   4023532         move    b0,y:Fs_wCurrentFMFrequency
P:0015 0AF080 rrrrrr  6   4623542         jmp     L65
                            23543 
                            23544 ; 1331 |    else
                            23545 ; 1332 |        {
                            23546 ; 1333 |                s_wCurrentFMFrequency = FM_BAND_LIMIT_HIGH_FREQ;
                            23547 
                            23549 L64:
                            23551 
                            23552 ; 1334 |        }
                            23553 ; 1335 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            23554 ; 1336 |    s_wDisplayFMFrequency = s_wCurrentFMFrequency;
                            23555 ; 1337 |#endif
                            23556 ; 1338 |    return (TunerDriverTuneToFrequency(s_wCurrentFMFrequency));
                            23557 
P:0017 50F400 01A5E0  3   4923549         move    #108000,a0
P:0019 587000 rrrrrr  3   5223550         move    a0,y:Fs_wCurrentFMFrequency
P:001B 5EF000 rrrrrr  3   5523559 L65:    move    y:Fs_wCurrentFMFrequency,a
P:001D 218E00         2   5723560         move    a1,a
P:001E 0BF080 rrrrrr  6   6323561         jsr     FTunerDriverTuneToFrequency
                            23562 
                            23563 ; 1339 |
                            23564 ; 1340 |}
                            23565 
P:0020 05FF7C         4   6723567         movec   y:-(r7),ssh
P:0021 000000         2   6923567         nop             ; (inserted)
P:0022 00000C         4   7323571         rts
                            23573 
                            23574 ; 1341 |#ifdef FUNCLET
                            23575 ; 1342 |    #pragma asm
P:003A                      23576         org p,".ptextstfm1000":
                            23577 ; 1344 |    #pragma endasm
                            23578 ; 1345 |#endif
                            23579 ; 1346 |
                            23580 ; 1347 |////////////////////////////////////////////////////////////////////////////////
                            23581 ; 1348 |//
                            23582 ; 1349 |//>  Name:          TunerDriverSetTunerStandby
                            23583 ; 1350 |//
                            23584 ; 1351 |//   Type:          Function
                            23585 ; 1352 |//
                            23586 ; 1353 |//   Description:   Set tuner as standby or power-on state
                            23587 ; 1354 |//
                            23588 ; 1355 |//   Inputs:        bStandby: TRUE - Standby/FALSE - power-on
                            23589 ; 1356 |//
                            23590 ; 1357 |//   Outputs:       return iTuningStatus
                            23591 ; 1358 |//
                            23592 ; 1359 |//   Notes:         none
                            23593 ; 1360 |//<
                            23594 ; 1361 |////////////////////////////////////////////////////////////////////////////////
                            23595 ; 1362 |
                            23596 ; 1363 |#ifdef FUNCLET
                            23597 ; 1364 |    #pragma asm
P:0006                      23598         org p,".stfm1000_SYS":
                            23599         FTunerDriverSetTunerStandby:
                            23600 
                            23605 
                            23606         ;If using funclet, function will be executed via funclet kernel
                            23607         CallFunclet2 RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY
P:0006 0D0082         4   1623607     jsr       $82
P:0007 00041F               23607     DC       RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY  ; 1 word
                            23608 
P:0000                      23609         org p,"SYSFUNCLET_TUNER_DRIVER_SET_STANDBY_P":
P:0000 00041F               23610         dc      RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY
                            23611 ; 1378 |    #pragma endasm
                            23612 ; 1379 |_reentrant INT TunerDriverSetTunerStandby_Funclet(BOOL bStandby )
                            23613 ; 1380 |#else
                            23614 ; 1381 |_reentrant INT TunerDriverSetTunerStandby(BOOL bStandby )
                            23615 ; 1382 |#endif
                            23616 ; 1383 |{
                            23617 
                            23622 FTunerDriverSetTunerStandby_Funclet:
                            23630 
                            23631 ; 1384 |    INT iReturn;
                            23632 ; 1385 |    // Reset this two parameters
                            23633 ; 1386 |    s_eOptimizeChannelState = OPTIMIZE_CHANNEL_STATE_COMPLETE;
                            23634 
                            23638 
                            23639 ; 1387 |    s_eMonitorSignalQualityState =  MONITOR_SIGNAL_QUALITY_STATE_COMPLETE;
                            23640 
                            23643 
                            23644 ; 1388 |
                            23645 ; 1389 |    if (bStandby)
                            23646 
P:0001 055F7C         2    223623         movec   ssh,y:(r7)+
P:0002 290400         2    423636         move    #4,b0
P:0003 2A0000         2    623648         move    #0,a2
P:0004 597003 rrrrrr  3    923649         tst     a	                b0,y:Fs_eOptimizeChannelState
P:0006 597000 rrrrrr  3   1223642         move    b0,y:Fs_eMonitorSignalQualityState
P:0008 0AF0AA rrrrrr  6   1823650         jeq     L85
                            23651 
                            23652 ; 1390 |        {
                            23653 ; 1391 |        // DRI off
                            23654 ; 1392 |        iReturn = STFM1000DriOff();
                            23655 
P:000A 44F413 00005C  3   2123658         clr     a	                #>92,x0
P:000C 000008         2   2323659         inc     a
P:000D 60F41B rrrrrr  3   2623660         clr     b	                #FStfmTuneData+34,r0
P:000F 0BF080 rrrrrr  6   3223662         jsr     FSTFM1000WriteRegister
                            23666 
                            23667 ; 1393 |        if( 0 !=  iReturn)
                            23668 
P:0011 21CD03         2   3423670         tst     a	                a,b1
P:0012 0AF0A2 rrrrrr  6   4023671         jne     L91
                            23672 
                            23673 ; 1394 |        {
                            23674 ; 1395 |            return iReturn;
                            23675 ; 1396 |        }
                            23676 ; 1397 |        // Take down
                            23677 ; 1398 |        iReturn = STFM1000TakeDown();
                            23678 
P:0014 0BF080 rrrrrr  6   4623680         jsr     FSTFM1000TakeDown
                            23684 
                            23685 ; 1399 |        if( 0 !=  iReturn)
                            23686 
P:0016 21CD03         2   4823688         tst     a	                a,b1
P:0017 0AF0A2 rrrrrr  6   5423689         jne     L91
                            23690 
                            23691 ; 1400 |        {
                            23692 ; 1401 |            return iReturn;
                            23693 ; 1402 |        }
                            23694 ; 1403 |
                            23695 ; 1404 |        iReturn = STFM1000TunerLowPowerMode();
                            23696 
P:0019 0BF080 rrrrrr  6   6023698         jsr     FSTFM1000TunerLowPowerMode
                            23702 
                            23703 ; 1405 |        if( 0 !=  iReturn)
                            23704 
P:001B 21CD03         2   6223706         tst     a	                a,b1
P:001C 0AF0A2 rrrrrr  6   6823707         jne     L91
                            23708 
                            23709 ; 1406 |        {
                            23710 ; 1407 |            return iReturn;
                            23711 ; 1408 |        }
                            23712 ; 1409 |        //STFM1000I2CClose();
                            23713 ; 1410 |        g_wFMTunerError.m_bPOWERED_OFF = TRUE;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                            23714 
                            23717 
                            23718 ; 1411 |
                            23719 ; 1412 |        }
                            23720 
P:001E 0A706E rrrrrr  6   7423716         bset    #14,y:Fg_wFMTunerError
P:0020 0AF080 rrrrrr  6   8023722         jmp     L94
                            23723 
                            23724 ; 1413 |        else
                            23725 ; 1414 |        {
                            23726 ; 1415 |        // Update the init I2C
                            23727 ; 1416 |        iReturn = STFM1000I2CInit(0, 0);
                            23728 
                            23730 L85:
P:0022 2E001B         2   8223731         clr     b	                #0,a
P:0023 0BF080 rrrrrr  6   8823733         jsr     FSTFM1000I2CInit
                            23736 
                            23737 ; 1417 |        // Things realy bad
                            23738 ; 1418 |        if( 0 !=  iReturn)
                            23739 
P:0025 21CD03         2   9023741         tst     a	                a,b1
P:0026 0AF0A2 rrrrrr  6   9623742         jne     L91
                            23743 
                            23744 ; 1419 |        {
                            23745 ; 1420 |            //SystemHalt();
                            23746 ; 1421 |            return iReturn;
                            23747 ; 1422 |        }
                            23748 ; 1423 |        iReturn = STFM1000TunerPowerUp();
                            23749 
P:0028 0BF080 rrrrrr  6  10223751         jsr     FSTFM1000TunerPowerUp
                            23755 
                            23756 ; 1424 |        if( 0 !=  iReturn)
                            23757 
P:002A 21CD03         2  10423759         tst     a	                a,b1
P:002B 0AF0A2 rrrrrr  6  11023760         jne     L91
                            23761 
                            23762 ; 1425 |        {
                            23763 ; 1426 |            return iReturn;
                            23764 ; 1427 |        }
                            23765 ; 1428 |        iReturn = STFM1000BringUp();
                            23766 
P:002D 0BF080 rrrrrr  6  11623768         jsr     FSTFM1000BringUp
                            23772 
                            23773 ; 1429 |        if( 0 !=  iReturn)
                            23774 
P:002F 21CD03         2  11823776         tst     a	                a,b1
P:0030 0AF0A2 rrrrrr  6  12423777         jne     L91
                            23778 
                            23779 ; 1430 |        {
                            23780 ; 1431 |            return iReturn;
                            23781 ; 1432 |        }
                            23782 ; 1433 |        if (bIsFirstTimeEnterFMMode == TRUE)
                            23783 
P:0032 57F000 rrrrrr  3  12723785         move    x:FbIsFirstTimeEnterFMMode,b
P:0034 46F400 000001  3  13023787         move    #>1,y0
P:0036 2B0000         2  13223788         move    #0,b2
P:0037 20005D         2  13423789         cmp     y0,b
P:0038 0AF0A2 rrrrrr  6  14023790         jne     L93
                            23791 
                            23792 ; 1434 |        {
                            23793 ; 1435 |            iReturn = STFM1000FindRSSIThresHold();
                            23794 
P:003A 0BF080 rrrrrr  6  14623796         jsr     FSTFM1000FindRSSIThresHold
                            23799 
                            23800 ; 1436 |            if( 0 !=  iReturn)
                            23801 
P:003C 21CD03         2  14823803         tst     a	                a,b1
P:003D 0AF0AA rrrrrr  6  15423804         jeq     L92
                            23805 
                            23806 ; 1437 |            {
                            23807 ; 1438 |                return iReturn;
                            23808 
                            23810 L91:
P:003F 21AE00         2  15623810         move    b1,a
P:0040 0AF080 rrrrrr  6  16223813         jmp     L95
                            23814 
                            23815 ; 1439 |            }
                            23816 ; 1440 |            bIsFirstTimeEnterFMMode = FALSE;
                            23817 
                            23819 L92:
                            23822 
                            23823 ; 1441 |        }
                            23824 ; 1442 |        STFM1000DriOff();
                            23825 
P:0042 2E0000         2  16423819         move    #0,a
P:0043 547000 rrrrrr  3  16723821         move    a1,x:FbIsFirstTimeEnterFMMode
P:0045 44F41B 00005C  3  17023827 L93:    clr     b	                #>92,x0
P:0047 60F413 rrrrrr  3  17323829         clr     a	                #FStfmTuneData+34,r0
P:0049 000008         2  17523830         inc     a
P:004A 0BF080 rrrrrr  6  18123832         jsr     FSTFM1000WriteRegister
                            23833 
                            23834 ; 1443 |        g_wFMTunerError.m_bPOWERED_OFF = FALSE;
                            23835 
                            23838 
                            23839 ; 1444 |        // Restore the frequency from settings.dat
                            23840 ; 1445 |        s_wCurrentFMFrequency = g_wCurrentFrequency;
                            23841 
                            23845 
                            23846 ; 1446 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            23847 ; 1447 |        s_wDisplayFMFrequency = s_wCurrentFMFrequency;
                            23848 ; 1448 |#endif
                            23849 ; 1449 |        }
                            23850 ; 1450 |    return TUNER_SUCCESS;
                            23851 
P:004C 0A704E rrrrrr  6  18723837         bclr    #14,y:Fg_wFMTunerError
P:004E 4EF000 rrrrrr  3  19023843         move    y:Fg_wCurrentFrequency,y0
P:0050 4E7000 rrrrrr  3  19323844         move    y0,y:Fs_wCurrentFMFrequency
                            23853 L94:
                            23854 
                            23855 ; 1451 |}
                            23856 
P:0052 2E0000         2  19523853         move    #0,a
                            23858 L95:
P:0053 05FF7C         4  19923858         movec   y:-(r7),ssh
P:0054 000000         2  20123858         nop             ; (inserted)
P:0055 00000C         4  20523862         rts
                            23864 
                            23865 ; 1452 |_reentrant INT STFM1000TunerLowPowerMode(void)
                            23866 ; 1453 |{
                            23867 
                            23872 FSTFM1000TunerLowPowerMode:
                            23881 
                            23882 ; 1454 |    STFM1000Tune_t * pStfmTuneData = &StfmTuneData;
                            23883 
                            23889 
                            23890 ; 1455 |    INT RetCodes;
                            23891 ; 1456 |#if 0
                            23892 ; 1457 |    RetCodes = STFM1000WriteRegister(
                            23893 ; 1458 |        INITIALIZATION6_REG_ADDR,
                            23894 ; 1459 |        WHOLEREG_MASK,
                            23895 ; 1460 |        &pStfmTuneData->sd_ctl_ShadowDataPath_dw,
                            23896 ; 1461 |        0x0000fecb);
                            23897 ; 1462 |    if (SUCCESS != RetCodes)
                            23898 ; 1463 |    {
                            23899 ; 1464 |        //SystemHalt();
                            23900 ; 1465 |        return RetCodes;
                            23901 ; 1466 |    }
                            23902 ; 1467 |#endif
                            23903 ; 1468 |    RetCodes = STFM1000WriteRegister(
                            23904 ; 1469 |        DATAPATH_REG_ADDR,
                            23905 ; 1470 |        WHOLEREG_MASK,
                            23906 ; 1471 |        &pStfmTuneData->sd_ctl_ShadowDataPath_dw,
                            23907 ; 1472 |        0x00010210);
                            23908 
P:0056 055F7C         2  20723873         movec   ssh,y:(r7)+
P:0057 382200         2  20923910         move    #34,n0
P:0058 60F400 rrrrrr  3  21223885         move    #FStfmTuneData,r0
P:005A 77F400 FFFFFE  3  21523911         move    #-2,n7
P:005C 56F400 0000FF  3  21823917         move    #>$FF,a
P:005E 44F400 00005C  3  22123921         move    #>92,x0
P:0060 205F1B         2  22323919         clr     b	                (r7)+
P:0061 50F400 FFFFFF  3  22623918         move    #$FFFFFF,a0
P:0063 205F00         2  22823877         move    (r7)+
P:0064 51F400 010210  3  23123920         move    #66064,b0
P:0066 686F00         4  23523913         move    r0,y:(r7+n7)
P:0067 204800         2  23723914         move    (r0)+n0
P:0068 0BF080 rrrrrr  6  24323922         jsr     FSTFM1000WriteRegister
                            23925 
                            23926 ; 1473 |    if (SUCCESS != RetCodes)
                            23927 
P:006A 21CF03         2  24523929         tst     a	                a,b
P:006B 0AF0A2 rrrrrr  6  25123930         jne     L155
                            23931 
                            23932 ; 1474 |    {
                            23933 ; 1475 |        //SystemHalt();
                            23934 ; 1476 |        return RetCodes;
                            23935 ; 1477 |    }
                            23936 ; 1478 |    // Set all the control registers to default
                            23937 ; 1479 |    RetCodes = STFM1000WriteRegister(
                            23938 ; 1480 |        TUNE1_REG_ADDR,
                            23939 ; 1481 |        WHOLEREG_MASK,
                            23940 ; 1482 |        &pStfmTuneData->sd_ctl_ShadowTune1_dw,
                            23941 ; 1483 |        0x00000000);
                            23942 
P:006D 77F400 FFFFFE  3  25423944         move    #-2,n7
P:006F 240000         2  25623951         move    #0,x0
P:0070 68EF00         4  26023946         move    y:(r7+n7),r0
P:0071 56F41B 0000FF  3  26323949         clr     b	                #>$FF,a
P:0073 50F400 FFFFFF  3  26623948         move    #$FFFFFF,a0
P:0075 0BF080 rrrrrr  6  27223952         jsr     FSTFM1000WriteRegister
                            23955 
                            23956 ; 1484 |    if (SUCCESS != RetCodes)
                            23957 
P:0077 21CF03         2  27423959         tst     a	                a,b
P:0078 0AF0A2 rrrrrr  6  28023960         jne     L155
                            23961 
                            23962 ; 1485 |    {
                            23963 ; 1486 |        //SystemHalt();
                            23964 ; 1487 |            return RetCodes;
                            23965 ; 1488 |
                            23966 ; 1489 |    }
                            23967 ; 1490 |
                            23968 ; 1491 |
                            23969 ; 1492 |    RetCodes = STFM1000WriteRegister(
                            23970 ; 1493 |        SDNOMINAL_REG_ADDR,
                            23971 ; 1494 |        WHOLEREG_MASK,
                            23972 ; 1495 |        &pStfmTuneData->sd_ctl_ShadowSdnominal_dw,
                            23973 ; 1496 |        0x00000000);
                            23974 
P:007A 38021B         2  28223985         clr     b	                #2,n0
P:007B 77F400 FFFFFE  3  28523977         move    #-2,n7
P:007D 56F400 0000FF  3  28823982         move    #>$FF,a
P:007F 68EF00         4  29223979         move    y:(r7+n7),r0
P:0080 44F400 000004  3  29523984         move    #>4,x0
P:0082 50F400 FFFFFF  3  29823983         move    #$FFFFFF,a0
P:0084 204800         2  30023981         move    (r0)+n0
P:0085 0BF080 rrrrrr  6  30623987         jsr     FSTFM1000WriteRegister
                            23990 
                            23991 ; 1497 |    if (SUCCESS != RetCodes)
                            23992 
P:0087 21CF03         2  30823994         tst     a	                a,b
P:0088 0AF0A2 rrrrrr  6  31423995         jne     L155
                            23996 
                            23997 ; 1498 |    {
                            23998 ; 1499 |        //SystemHalt();
                            23999 ; 1500 |        return RetCodes;
                            24000 ; 1501 |
                            24001 ; 1502 |    }
                            24002 ; 1503 |
                            24003 ; 1504 |    RetCodes = STFM1000WriteRegister(
                            24004 ; 1505 |        PILOTTRACKING_REG_ADDR,
                            24005 ; 1506 |        WHOLEREG_MASK,
                            24006 ; 1507 |        &pStfmTuneData->sd_ctl_ShadowPilotTracking_dw,
                            24007 ; 1508 |        0x00000000);
                            24008 
P:008A 38041B         2  31624018         clr     b	                #4,n0
P:008B 77F400 FFFFFE  3  31924011         move    #-2,n7
P:008D 56F400 0000FF  3  32224016         move    #>$FF,a
P:008F 68EF00         4  32624013         move    y:(r7+n7),r0
P:0090 44F400 000008  3  32924020         move    #>8,x0
P:0092 50F400 FFFFFF  3  33224017         move    #$FFFFFF,a0
P:0094 204800         2  33424015         move    (r0)+n0
P:0095 0BF080 rrrrrr  6  34024021         jsr     FSTFM1000WriteRegister
                            24024 
                            24025 ; 1509 |    if (SUCCESS != RetCodes)
                            24026 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0097 21CF03         2  34224028         tst     a	                a,b
P:0098 0AF0A2 rrrrrr  6  34824029         jne     L155
                            24030 
                            24031 ; 1510 |    {
                            24032 ; 1511 |        //SystemHalt();
                            24033 ; 1512 |        return RetCodes;
                            24034 ; 1513 |
                            24035 ; 1514 |    }
                            24036 ; 1515 |
                            24037 ; 1516 |    RetCodes = STFM1000WriteRegister(
                            24038 ; 1517 |        INITIALIZATION1_REG_ADDR,
                            24039 ; 1518 |        WHOLEREG_MASK,
                            24040 ; 1519 |        &pStfmTuneData->sd_ctl_ShadowInitialization1_dw,
                            24041 ; 1520 |        0x00000000);
                            24042 
P:009A 38061B         2  35024053         clr     b	                #6,n0
P:009B 77F400 FFFFFE  3  35324045         move    #-2,n7
P:009D 56F400 0000FF  3  35624050         move    #>$FF,a
P:009F 68EF00         4  36024047         move    y:(r7+n7),r0
P:00A0 44F400 000010  3  36324052         move    #>16,x0
P:00A2 50F400 FFFFFF  3  36624051         move    #$FFFFFF,a0
P:00A4 204800         2  36824049         move    (r0)+n0
P:00A5 0BF080 rrrrrr  6  37424055         jsr     FSTFM1000WriteRegister
                            24058 
                            24059 ; 1521 |    if (SUCCESS != RetCodes)
                            24060 
P:00A7 21CF03         2  37624062         tst     a	                a,b
P:00A8 0AF0A2 rrrrrr  6  38224063         jne     L155
                            24064 
                            24065 ; 1522 |    {
                            24066 ; 1523 |        //SystemHalt();
                            24067 ; 1524 |        return RetCodes;
                            24068 ; 1525 |
                            24069 ; 1526 |    }
                            24070 ; 1527 |
                            24071 ; 1528 |    RetCodes = STFM1000WriteRegister(
                            24072 ; 1529 |        INITIALIZATION2_REG_ADDR,
                            24073 ; 1530 |        WHOLEREG_MASK,
                            24074 ; 1531 |        &pStfmTuneData->sd_ctl_ShadowInitialization2_dw,
                            24075 ; 1532 |        0x00000000);
                            24076 
P:00AA 38081B         2  38424086         clr     b	                #8,n0
P:00AB 77F400 FFFFFE  3  38724079         move    #-2,n7
P:00AD 56F400 0000FF  3  39024084         move    #>$FF,a
P:00AF 68EF00         4  39424081         move    y:(r7+n7),r0
P:00B0 44F400 000014  3  39724088         move    #>20,x0
P:00B2 50F400 FFFFFF  3  40024085         move    #$FFFFFF,a0
P:00B4 204800         2  40224083         move    (r0)+n0
P:00B5 0BF080 rrrrrr  6  40824089         jsr     FSTFM1000WriteRegister
                            24092 
                            24093 ; 1533 |    if (SUCCESS != RetCodes)
                            24094 
P:00B7 21CF03         2  41024096         tst     a	                a,b
P:00B8 0AF0A2 rrrrrr  6  41624097         jne     L155
                            24098 
                            24099 ; 1534 |    {
                            24100 ; 1535 |        //SystemHalt();
                            24101 ; 1536 |        return RetCodes;
                            24102 ; 1537 |
                            24103 ; 1538 |    }
                            24104 ; 1539 |
                            24105 ; 1540 |    RetCodes = STFM1000WriteRegister(
                            24106 ; 1541 |        INITIALIZATION3_REG_ADDR,
                            24107 ; 1542 |        WHOLEREG_MASK,
                            24108 ; 1543 |        &pStfmTuneData->sd_ctl_ShadowInitialization3_dw,
                            24109 ; 1544 |        0x00000000);
                            24110 
P:00BA 380A1B         2  41824120         clr     b	                #10,n0
P:00BB 77F400 FFFFFE  3  42124113         move    #-2,n7
P:00BD 56F400 0000FF  3  42424118         move    #>$FF,a
P:00BF 68EF00         4  42824115         move    y:(r7+n7),r0
P:00C0 44F400 000018  3  43124122         move    #>24,x0
P:00C2 50F400 FFFFFF  3  43424119         move    #$FFFFFF,a0
P:00C4 204800         2  43624117         move    (r0)+n0
P:00C5 0BF080 rrrrrr  6  44224123         jsr     FSTFM1000WriteRegister
                            24126 
                            24127 ; 1545 |    if (SUCCESS != RetCodes)
                            24128 
P:00C7 21CF03         2  44424130         tst     a	                a,b
P:00C8 0AF0A2 rrrrrr  6  45024131         jne     L155
                            24132 
                            24133 ; 1546 |    {
                            24134 ; 1547 |        //SystemHalt();
                            24135 ; 1548 |        return RetCodes;
                            24136 ; 1549 |
                            24137 ; 1550 |    }
                            24138 ; 1551 |
                            24139 ; 1552 |    RetCodes = STFM1000WriteRegister(
                            24140 ; 1553 |        INITIALIZATION4_REG_ADDR,
                            24141 ; 1554 |        WHOLEREG_MASK,
                            24142 ; 1555 |        &pStfmTuneData->sd_ctl_ShadowInitialization4_dw,
                            24143 ; 1556 |        0x00000000);
                            24144 
P:00CA 380C1B         2  45224154         clr     b	                #12,n0
P:00CB 77F400 FFFFFE  3  45524147         move    #-2,n7
P:00CD 56F400 0000FF  3  45824152         move    #>$FF,a
P:00CF 68EF00         4  46224149         move    y:(r7+n7),r0
P:00D0 44F400 00001C  3  46524156         move    #>28,x0
P:00D2 50F400 FFFFFF  3  46824153         move    #$FFFFFF,a0
P:00D4 204800         2  47024151         move    (r0)+n0
P:00D5 0BF080 rrrrrr  6  47624157         jsr     FSTFM1000WriteRegister
                            24160 
                            24161 ; 1557 |    if (SUCCESS != RetCodes)
                            24162 
P:00D7 21CF03         2  47824164         tst     a	                a,b
P:00D8 0AF0A2 rrrrrr  6  48424165         jne     L155
                            24166 
                            24167 ; 1558 |    {
                            24168 ; 1559 |        //SystemHalt();
                            24169 ; 1560 |        return RetCodes;
                            24170 ; 1561 |
                            24171 ; 1562 |    }
                            24172 ; 1563 |
                            24173 ; 1564 |    RetCodes = STFM1000WriteRegister(
                            24174 ; 1565 |        INITIALIZATION5_REG_ADDR,
                            24175 ; 1566 |        WHOLEREG_MASK,
                            24176 ; 1567 |        &pStfmTuneData->sd_ctl_ShadowInitialization5_dw,
                            24177 ; 1568 |        0x00000000);
                            24178 
P:00DA 380E1B         2  48624188         clr     b	                #14,n0
P:00DB 77F400 FFFFFE  3  48924181         move    #-2,n7
P:00DD 56F400 0000FF  3  49224186         move    #>$FF,a
P:00DF 68EF00         4  49624183         move    y:(r7+n7),r0
P:00E0 44F400 000020  3  49924190         move    #>$20,x0
P:00E2 50F400 FFFFFF  3  50224187         move    #$FFFFFF,a0
P:00E4 204800         2  50424185         move    (r0)+n0
P:00E5 0BF080 rrrrrr  6  51024191         jsr     FSTFM1000WriteRegister
                            24194 
                            24195 ; 1569 |    if (SUCCESS != RetCodes)
                            24196 
P:00E7 21CF03         2  51224198         tst     a	                a,b
P:00E8 0AF0A2 rrrrrr  6  51824199         jne     L155
                            24200 
                            24201 ; 1570 |    {
                            24202 ; 1571 |        //SystemHalt();
                            24203 ; 1572 |        return RetCodes;
                            24204 ; 1573 |
                            24205 ; 1574 |    }
                            24206 ; 1575 |
                            24207 ; 1576 |    if (VERSION_TB2 == StfmTuneDefault.STFM1000_Version) //Different power down state for TB2
                            24208 
P:00EA 57F013 rrrrrr  3  52124213         clr     a	                x:FStfmTuneDefault+60,b
P:00EC 2B0000         2  52324215         move    #0,b2
P:00ED 281200         2  52524214         move    #18,a0
P:00EE 51F000 rrrrrr  3  52824211         move    x:FStfmTuneDefault+59,b0
P:00F0 20000D         2  53024216         cmp     a,b
P:00F1 0AF0A2 rrrrrr  6  53624217         jne     L136
                            24218 
                            24219 ; 1577 |    {
                            24220 ; 1578 |        RetCodes = STFM1000WriteRegister(
                            24221 ; 1579 |            INITIALIZATION6_REG_ADDR,
                            24222 ; 1580 |            WHOLEREG_MASK,
                            24223 ; 1581 |            &pStfmTuneData->sd_ctl_ShadowInitialization6_dw,
                            24224 ; 1582 |            0x00017E00);//0x00007E00);
                            24225 
                            24238 
                            24239 ; 1583 |    }
                            24240 
P:00F3 38101B         2  53824236         clr     b	                #16,n0
P:00F4 77F400 FFFFFE  3  54124228         move    #-2,n7
P:00F6 56F400 0000FF  3  54424233         move    #>$FF,a
P:00F8 68EF00         4  54824230         move    y:(r7+n7),r0
P:00F9 44F400 000024  3  55124235         move    #>36,x0
P:00FB 51F400 017E00  3  55424237         move    #$17E00,b0
P:00FD 50F400 FFFFFF  3  55724234         move    #$FFFFFF,a0
P:00FF 204800         2  55924232         move    (r0)+n0
P:0100 0AF080 rrrrrr  6  56524242         jmp     L137
                            24243 
                            24244 ; 1584 |    else
                            24245 ; 1585 |    {
                            24246 ; 1586 |        RetCodes = STFM1000WriteRegister(
                            24247 ; 1587 |            INITIALIZATION6_REG_ADDR,
                            24248 ; 1588 |            WHOLEREG_MASK,
                            24249 ; 1589 |            &pStfmTuneData->sd_ctl_ShadowInitialization6_dw,
                            24250 ; 1590 |            0x0000FC00);// 0x0000C000);STMP00012489
                            24251 
                            24253 L136:
                            24264 
                            24265 ; 1591 |    }
                            24266 
P:0102 38101B         2  56724262         clr     b	                #16,n0
P:0103 77F400 FFFFFE  3  57024254         move    #-2,n7
P:0105 56F400 0000FF  3  57324259         move    #>$FF,a
P:0107 68EF00         4  57724256         move    y:(r7+n7),r0
P:0108 44F400 000024  3  58024261         move    #>36,x0
P:010A 51F400 00FC00  3  58324263         move    #$FC00,b0
P:010C 50F400 FFFFFF  3  58624260         move    #$FFFFFF,a0
P:010E 204800         2  58824258         move    (r0)+n0
                            24268 L137:
P:010F 0BF080 rrrrrr  6  59424270         jsr     FSTFM1000WriteRegister
                            24274 
                            24275 ; 1592 |    if (SUCCESS != RetCodes)
                            24276 
P:0111 21CF00         2  59624272         move    a,b
P:0112 20000B         2  59824278         tst     b
P:0113 0AF0A2 rrrrrr  6  60424279         jne     L155
                            24280 
                            24281 ; 1593 |    {
                            24282 ; 1594 |        //SystemHalt();
                            24283 ; 1595 |        return RetCodes;
                            24284 ; 1596 |
                            24285 ; 1597 |    }
                            24286 ; 1598 |
                            24287 ; 1599 |
                            24288 ; 1600 |
                            24289 ; 1601 |    RetCodes = STFM1000WriteRegister(
                            24290 ; 1602 |        REF_REG_ADDR,
                            24291 ; 1603 |        WHOLEREG_MASK,
                            24292 ; 1604 |        &pStfmTuneData->sd_ctl_ShadowRef_dw,
                            24293 ; 1605 |        0x00000000);
                            24294 
P:0115 38121B         2  60624304         clr     b	                #18,n0
P:0116 77F400 FFFFFE  3  60924297         move    #-2,n7
P:0118 56F400 0000FF  3  61224302         move    #>$FF,a
P:011A 68EF00         4  61624299         move    y:(r7+n7),r0
P:011B 44F400 000028  3  61924306         move    #>40,x0
P:011D 50F400 FFFFFF  3  62224303         move    #$FFFFFF,a0
P:011F 204800         2  62424301         move    (r0)+n0
P:0120 0BF080 rrrrrr  6  63024307         jsr     FSTFM1000WriteRegister
                            24310 
                            24311 ; 1606 |    if (SUCCESS != RetCodes)
                            24312 
P:0122 21CF03         2  63224314         tst     a	                a,b
P:0123 0AF0A2 rrrrrr  6  63824315         jne     L155
                            24316 
                            24317 ; 1607 |    {
                            24318 ; 1608 |        //SystemHalt();
                            24319 ; 1609 |        return RetCodes;
                            24320 ; 1610 |
                            24321 ; 1611 |    }
                            24322 ; 1612 |
                            24323 ; 1613 |    RetCodes = STFM1000WriteRegister(
                            24324 ; 1614 |        LNA_REG_ADDR,
                            24325 ; 1615 |        WHOLEREG_MASK,
                            24326 ; 1616 |        &pStfmTuneData->sd_ctl_ShadowLna_dw,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24327 ; 1617 |        0x00000000);
                            24328 
P:0125 38141B         2  64024338         clr     b	                #20,n0
P:0126 77F400 FFFFFE  3  64324331         move    #-2,n7
P:0128 56F400 0000FF  3  64624336         move    #>$FF,a
P:012A 68EF00         4  65024333         move    y:(r7+n7),r0
P:012B 44F400 00002C  3  65324340         move    #>44,x0
P:012D 50F400 FFFFFF  3  65624337         move    #$FFFFFF,a0
P:012F 204800         2  65824335         move    (r0)+n0
P:0130 0BF080 rrrrrr  6  66424341         jsr     FSTFM1000WriteRegister
                            24344 
                            24345 ; 1618 |    if (SUCCESS != RetCodes)
                            24346 
P:0132 21CF03         2  66624348         tst     a	                a,b
P:0133 0AF0A2 rrrrrr  6  67224349         jne     L155
                            24350 
                            24351 ; 1619 |    {
                            24352 ; 1620 |        //SystemHalt();
                            24353 ; 1621 |        return RetCodes;
                            24354 ; 1622 |
                            24355 ; 1623 |    }
                            24356 ; 1624 |
                            24357 ; 1625 |    RetCodes = STFM1000WriteRegister(
                            24358 ; 1626 |        MIXFILT_REG_ADDR,
                            24359 ; 1627 |        WHOLEREG_MASK,
                            24360 ; 1628 |        &pStfmTuneData->sd_ctl_ShadowMixFilt_dw,
                            24361 ; 1629 |        0x00000000);
                            24362 
P:0135 38161B         2  67424372         clr     b	                #22,n0
P:0136 77F400 FFFFFE  3  67724365         move    #-2,n7
P:0138 56F400 0000FF  3  68024370         move    #>$FF,a
P:013A 68EF00         4  68424367         move    y:(r7+n7),r0
P:013B 44F400 000030  3  68724374         move    #>$30,x0
P:013D 50F400 FFFFFF  3  69024371         move    #$FFFFFF,a0
P:013F 204800         2  69224369         move    (r0)+n0
P:0140 0BF080 rrrrrr  6  69824375         jsr     FSTFM1000WriteRegister
                            24378 
                            24379 ; 1630 |    if (SUCCESS != RetCodes)
                            24380 
P:0142 21CF03         2  70024382         tst     a	                a,b
P:0143 0AF0A2 rrrrrr  6  70624383         jne     L155
                            24384 
                            24385 ; 1631 |    {
                            24386 ; 1632 |        //SystemHalt();
                            24387 ; 1633 |        return RetCodes;
                            24388 ; 1634 |
                            24389 ; 1635 |    }
                            24390 ; 1636 |
                            24391 ; 1637 |    RetCodes = STFM1000WriteRegister(
                            24392 ; 1638 |        CLK1_REG_ADDR,
                            24393 ; 1639 |        WHOLEREG_MASK,
                            24394 ; 1640 |        &pStfmTuneData->sd_ctl_ShadowClk1_dw,
                            24395 ; 1641 |        0x20000000);
                            24396 
P:0145 3E1800         2  70824398         move    #24,n6
P:0146 77F400 FFFFFE  3  71124399         move    #-2,n7
P:0148 56F400 0000FF  3  71424404         move    #>$FF,a
P:014A 6EEF00         4  71824401         move    y:(r7+n7),r6
P:014B 57F400 000020  3  72124411         move    #>$20,b
P:014D 044E1E         4  72524403         lua     (r6)+n6,n6
P:014E 23D000         2  72724410         move    n6,r0
P:014F 44F400 000034  3  73024406         move    #>52,x0
P:0151 50F400 FFFFFF  3  73324405         move    #$FFFFFF,a0
P:0153 211F00         2  73524407         move    a0,n7
P:0154 000000         2  73724407         nop             ; (inserted)
P:0155 7E6F00         4  74124409         move    n6,y:(r7+n7)
P:0156 0BF080 rrrrrr  6  74724412         jsr     FSTFM1000WriteRegister
                            24416 
                            24417 ; 1642 |    if (SUCCESS != RetCodes)
                            24418 
P:0158 21CF03         2  74924420         tst     a	                a,b
P:0159 0AF0A2 rrrrrr  6  75524421         jne     L155
                            24422 
                            24423 ; 1643 |    {
                            24424 ; 1644 |        //SystemHalt();
                            24425 ; 1645 |        return RetCodes;        
                            24426 ; 1646 |        
                            24427 ; 1647 |    }
                            24428 ; 1648 | 
                            24429 ; 1649 |    RetCodes = STFM1000WriteRegister(
                            24430 ; 1650 |        CLK1_REG_ADDR,
                            24431 ; 1651 |        WHOLEREG_MASK,
                            24432 ; 1652 |        &pStfmTuneData->sd_ctl_ShadowClk1_dw,
                            24433 ; 1653 |        0x00000003);  //0x03400000);   // Set bit 22, 24, and 25 to reduce the off-state current by 200uA. sdk2.610 release value was 0x0.
                            24434 
P:015B 56F41B 0000FF  3  75824442         clr     b	                #>$FF,a
P:015D 44F400 000034  3  76124441         move    #>52,x0
P:015F 290300         2  76324443         move    #3,b0
P:0160 50F400 FFFFFF  3  76624437         move    #$FFFFFF,a0
P:0162 211F00         2  76824438         move    a0,n7
P:0163 000000         2  77024438         nop             ; (inserted)
P:0164 68EF00         4  77424440         move    y:(r7+n7),r0
P:0165 0BF080 rrrrrr  6  78024444         jsr     FSTFM1000WriteRegister
                            24448 
                            24449 ; 1654 |    if (SUCCESS != RetCodes)
                            24450 
P:0167 21CF03         2  78224452         tst     a	                a,b
P:0168 0AF0A2 rrrrrr  6  78824453         jne     L155
                            24454 
                            24455 ; 1655 |    {
                            24456 ; 1656 |        //SystemHalt();
                            24457 ; 1657 |        return RetCodes;
                            24458 ; 1658 |
                            24459 ; 1659 |    }
                            24460 ; 1660 |
                            24461 ; 1661 |    RetCodes = STFM1000WriteRegister(
                            24462 ; 1662 |        CLK2_REG_ADDR,
                            24463 ; 1663 |        WHOLEREG_MASK,
                            24464 ; 1664 |        &pStfmTuneData->sd_ctl_ShadowClk2_dw,
                            24465 ; 1665 |        0x00000000);
                            24466 
P:016A 381A1B         2  79024476         clr     b	                #26,n0
P:016B 77F400 FFFFFE  3  79324469         move    #-2,n7
P:016D 56F400 0000FF  3  79624474         move    #>$FF,a
P:016F 68EF00         4  80024471         move    y:(r7+n7),r0
P:0170 44F400 000038  3  80324478         move    #>$38,x0
P:0172 50F400 FFFFFF  3  80624475         move    #$FFFFFF,a0
P:0174 204800         2  80824473         move    (r0)+n0
P:0175 0BF080 rrrrrr  6  81424479         jsr     FSTFM1000WriteRegister
                            24482 
                            24483 ; 1666 |    if (SUCCESS != RetCodes)
                            24484 
P:0177 21CF03         2  81624486         tst     a	                a,b
P:0178 0AF0A2 rrrrrr  6  82224487         jne     L155
                            24488 
                            24489 ; 1667 |    {
                            24490 ; 1668 |        //SystemHalt();
                            24491 ; 1669 |        return RetCodes;
                            24492 ; 1670 |
                            24493 ; 1671 |    }
                            24494 ; 1672 |
                            24495 ; 1673 |    RetCodes = STFM1000WriteRegister(
                            24496 ; 1674 |        ADC_REG_ADDR,
                            24497 ; 1675 |        WHOLEREG_MASK,
                            24498 ; 1676 |        &pStfmTuneData->sd_ctl_ShadowAdc_dw,
                            24499 ; 1677 |        0x00000000);
                            24500 
P:017A 381C1B         2  82424510         clr     b	                #28,n0
P:017B 77F400 FFFFFE  3  82724503         move    #-2,n7
P:017D 56F400 0000FF  3  83024508         move    #>$FF,a
P:017F 68EF00         4  83424505         move    y:(r7+n7),r0
P:0180 44F400 00003C  3  83724512         move    #>$3C,x0
P:0182 50F400 FFFFFF  3  84024509         move    #$FFFFFF,a0
P:0184 204800         2  84224507         move    (r0)+n0
P:0185 0BF080 rrrrrr  6  84824513         jsr     FSTFM1000WriteRegister
                            24516 
                            24517 ; 1678 |    if (SUCCESS != RetCodes)
                            24518 
P:0187 21CF03         2  85024520         tst     a	                a,b
P:0188 0AF0A2 rrrrrr  6  85624521         jne     L155
                            24522 
                            24523 ; 1679 |    {
                            24524 ; 1680 |        //SystemHalt();
                            24525 ; 1681 |        return RetCodes;
                            24526 ; 1682 |
                            24527 ; 1683 |    }
                            24528 ; 1684 |    RetCodes = STFM1000WriteRegister(
                            24529 ; 1685 |        AGC_CONTROL1_REG_ADDR,
                            24530 ; 1686 |        WHOLEREG_MASK,
                            24531 ; 1687 |        &pStfmTuneData->sd_ctl_ShadowAgcControl1_dw,
                            24532 ; 1688 |        0x00000000);
                            24533 
P:018A 381E1B         2  85824543         clr     b	                #30,n0
P:018B 77F400 FFFFFE  3  86124536         move    #-2,n7
P:018D 56F400 0000FF  3  86424541         move    #>$FF,a
P:018F 68EF00         4  86824538         move    y:(r7+n7),r0
P:0190 44F400 000044  3  87124545         move    #>68,x0
P:0192 50F400 FFFFFF  3  87424542         move    #$FFFFFF,a0
P:0194 204800         2  87624540         move    (r0)+n0
P:0195 0BF080 rrrrrr  6  88224546         jsr     FSTFM1000WriteRegister
                            24549 
                            24550 ; 1689 |    if (SUCCESS != RetCodes)
                            24551 
P:0197 21CF03         2  88424553         tst     a	                a,b
P:0198 0AF0A2 rrrrrr  6  89024554         jne     L155
                            24555 
                            24556 ; 1690 |    {
                            24557 ; 1691 |        //SystemHalt();
                            24558 ; 1692 |        return RetCodes;
                            24559 ; 1693 |
                            24560 ; 1694 |    }
                            24561 ; 1695 |
                            24562 ; 1696 |    RetCodes = STFM1000WriteRegister(
                            24563 ; 1697 |        AGC_CONTROL2_REG_ADDR,
                            24564 ; 1698 |        WHOLEREG_MASK,
                            24565 ; 1699 |        &pStfmTuneData->sd_ctl_ShadowAgcControl2_dw,
                            24566 ; 1700 |        0x00000000);
                            24567 
P:019A 38201B         2  89224581         clr     b	                #$20,n0
P:019B 77F400 FFFFFE  3  89524570         move    #-2,n7
P:019D 56F400 0000FF  3  89824578         move    #>$FF,a
P:019F 68EF00         4  90224572         move    y:(r7+n7),r0
P:01A0 44F400 000048  3  90524580         move    #>72,x0
P:01A2 50F400 FFFFFF  3  90824579         move    #$FFFFFF,a0
P:01A4 204800         2  91024574         move    (r0)+n0
P:01A5 0BF080 rrrrrr  6  91624582         jsr     FSTFM1000WriteRegister
                            24586 
                            24587 ; 1701 |    if (SUCCESS != RetCodes)
                            24588 ; 1702 |    {
                            24589 ; 1703 |        //SystemHalt();
                            24590 ; 1704 |        return RetCodes;
                            24591 ; 1705 |
                            24592 ; 1706 |    }
                            24593 ; 1707 |
                            24594 ; 1708 |
                            24595 ; 1709 |#if 0
                            24596 ; 1710 |
                            24597 ; 1711 |    RetCodes = STFM1000WriteRegister(
                            24598 ; 1712 |        REF_REG_ADDR,
                            24599 ; 1713 |        WHOLEREG_MASK,
                            24600 ; 1714 |        &pStfmTuneData->sd_ctl_ShadowRef_dw,
                            24601 ; 1715 |        0x00000000);
                            24602 ; 1716 |    if (SUCCESS != RetCodes)
                            24603 ; 1717 |    {
                            24604 ; 1718 |        //SystemHalt();
                            24605 ; 1719 |          return RetCodes;
                            24606 ; 1720 |
                            24607 ; 1721 |    }
                            24608 ; 1722 |
                            24609 ; 1723 |
                            24610 ; 1724 |    RetCodes = STFM1000WriteRegister(
                            24611 ; 1725 |        LNA_REG_ADDR,
                            24612 ; 1726 |        WHOLEREG_MASK,
                            24613 ; 1727 |        &pStfmTuneData->sd_ctl_ShadowLna_dw,
                            24614 ; 1728 |        0x00000000);
                            24615 ; 1729 |    if (SUCCESS != RetCodes)
                            24616 ; 1730 |    {
                            24617 ; 1731 |        //SystemHalt();
                            24618 ; 1732 |        return RetCodes;
                            24619 ; 1733 |
                            24620 ; 1734 |    }
                            24621 ; 1735 |
                            24622 ; 1736 |    RetCodes = STFM1000WriteRegister(
                            24623 ; 1737 |        MIXFILT_REG_ADDR,
                            24624 ; 1738 |        WHOLEREG_MASK,
                            24625 ; 1739 |        &pStfmTuneData->sd_ctl_ShadowMixFilt_dw,
                            24626 ; 1740 |        0x00000000);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24627 ; 1741 |    if (SUCCESS != RetCodes)
                            24628 ; 1742 |    {
                            24629 ; 1743 |        //SystemHalt();
                            24630 ; 1744 |            return RetCodes;
                            24631 ; 1745 |
                            24632 ; 1746 |    }
                            24633 ; 1747 |
                            24634 ; 1748 |    RetCodes = STFM1000WriteRegister(
                            24635 ; 1749 |        CLK1_REG_ADDR,
                            24636 ; 1750 |        WHOLEREG_MASK,
                            24637 ; 1751 |        &pStfmTuneData->sd_ctl_ShadowClk1_dw,
                            24638 ; 1752 |        0x00000003);
                            24639 ; 1753 |    if (SUCCESS != RetCodes)
                            24640 ; 1754 |    {
                            24641 ; 1755 |        //SystemHalt();
                            24642 ; 1756 |        return RetCodes;
                            24643 ; 1757 |
                            24644 ; 1758 |    }
                            24645 ; 1759 |
                            24646 ; 1760 |    RetCodes = STFM1000WriteRegister(
                            24647 ; 1761 |        CLK2_REG_ADDR,
                            24648 ; 1762 |        WHOLEREG_MASK,
                            24649 ; 1763 |        &pStfmTuneData->sd_ctl_ShadowClk2_dw,
                            24650 ; 1764 |        0x00000000);
                            24651 ; 1765 |    if (SUCCESS != RetCodes)
                            24652 ; 1766 |    {
                            24653 ; 1767 |        //SystemHalt();
                            24654 ; 1768 |        return RetCodes;
                            24655 ; 1769 |
                            24656 ; 1770 |    }
                            24657 ; 1771 |
                            24658 ; 1772 |    RetCodes = STFM1000WriteRegister(
                            24659 ; 1773 |        ADC_REG_ADDR,
                            24660 ; 1774 |        WHOLEREG_MASK,
                            24661 ; 1775 |        &pStfmTuneData->sd_ctl_ShadowAdc_dw,
                            24662 ; 1776 |        0x00000000);
                            24663 ; 1777 |
                            24664 ; 1778 |    if (SUCCESS != RetCodes)
                            24665 ; 1779 |    {
                            24666 ; 1780 |        //SystemHalt();
                            24667 ; 1781 |        return RetCodes;
                            24668 ; 1782 |
                            24669 ; 1783 |    }
                            24670 ; 1784 |#endif
                            24671 ; 1785 |    return RetCodes;
                            24672 
P:01A7 21CF00         2  91824584         move    a,b
                            24674 L155:
                            24677 
                            24678 ; 1786 |
                            24679 ; 1787 |}
                            24680 
P:01A8 21AE00         2  92024674         move    b1,a
P:01A9 205700         2  92224682         move    (r7)-
P:01AA 205700         2  92424683         move    (r7)-
P:01AB 05FF7C         4  92824685         movec   y:-(r7),ssh
P:01AC 000000         2  93024685         nop             ; (inserted)
P:01AD 00000C         4  93424689         rts
                            24692 
                            24693 ; 1788 |_reentrant INT STFM1000TakeDown(void)
                            24694 ; 1789 |{
                            24695 
                            24700 FSTFM1000TakeDown:
                            24706 
                            24707 ; 1790 |
                            24708 ; 1791 |    INT RetCode = SUCCESS;
                            24709 ; 1792 |
                            24710 ; 1793 |    // Stop data processing
                            24711 ; 1794 |    RetCode = STFM1000DataPathOff();
                            24712 
P:01AE 055F7C         2  93624701         movec   ssh,y:(r7)+
P:01AF 0BF080 rrrrrr  6  94224714         jsr     FSTFM1000DataPathOff
                            24716 
                            24717 ; 1795 |    if (SUCCESS != RetCode)
                            24718 ; 1796 |    {
                            24719 ; 1797 |        //SystemHalt();
                            24720 ; 1798 |        return RetCode;
                            24721 ; 1799 |    }
                            24722 ; 1800 |
                            24723 ; 1801 |    return RetCode;
                            24724 ; 1802 |}
                            24725 
P:01B1 05FF7C         4  94624727         movec   y:-(r7),ssh
P:01B2 000000         2  94824727         nop             ; (inserted)
P:01B3 00000C         4  95224731         rts
                            24734 
                            24735 ; 1803 |
                            24736 ; 1804 |// DP_OFF()
                            24737 ; 1805 |
                            24738 ; 1806 |
                            24739 ; 1807 |////////////////////////////////////////////////////////////////////////////////
                            24740 ; 1808 |//! \internal
                            24741 ; 1809 |//! \brief      This function is called by power-up sequence
                            24742 ; 1810 |//! \fntype     Function
                            24743 ; 1811 |//!
                            24744 ; 1812 |//! Function will perform the following steps:
                            24745 ; 1813 |//!     Tunr on datapath
                            24746 ; 1814 |//!     Initialize
                            24747 ; 1815 |//!     Initializes DRI interface from tuner (ddi_dri_PowerUp())
                            24748 ; 1816 |//!
                            24749 ; 1817 |//! \param[in]  pTunerObject     Pointer to Tuner Object.
                            24750 ; 1818 |//!
                            24751 ; 1819 |//! \return     SUCCESS/ERROR.
                            24752 ; 1820 |//!
                            24753 ; 1821 |////////////////////////////////////////////////////////////////////////////////
                            24754 ; 1822 |_reentrant INT STFM1000BringUp(void)
                            24755 ; 1823 |{
                            24756 
                            24761 FSTFM1000BringUp:
                            24767 
                            24768 ; 1824 |
                            24769 ; 1825 |    INT RetCode = SUCCESS;
                            24770 ; 1826 |
                            24771 ; 1827 |    // Turn on STFM registers
                            24772 ; 1828 |    RetCode = STFM1000DataPathOn();
                            24773 
P:01B4 055F7C         2  95424762         movec   ssh,y:(r7)+
P:01B5 0BF080 rrrrrr  6  96024775         jsr     FSTFM1000DataPathOn
                            24777 
                            24778 ; 1829 |    if (SUCCESS != RetCode)
                            24779 ; 1830 |    {
                            24780 ; 1831 |        //SystemHalt();
                            24781 ; 1832 |         return RetCode;
                            24782 ; 1833 |    }
                            24783 ; 1834 |    // Enable DRI stream
                            24784 ; 1835 |    //RetCode = STFM1000DriOn();
                            24785 ; 1836 |    if (SUCCESS != RetCode)
                            24786 ; 1837 |    {
                            24787 ; 1838 |        //SystemHalt();
                            24788 ; 1839 |        return RetCode;
                            24789 ; 1840 |    }
                            24790 ; 1841 |    return RetCode;
                            24791 ; 1842 |}
                            24792 
P:01B7 05FF7C         4  96424794         movec   y:-(r7),ssh
P:01B8 000000         2  96624794         nop             ; (inserted)
P:01B9 00000C         4  97024798         rts
                            24801 
                            24802 ; 1843 |// DP_ON()
                            24803 ; 1844 |// ****************************************
                            24804 ; 1845 |//! STFM Data Path On
                            24805 ; 1846 |// ****************************************
                            24806 ; 1847 |// * Turn on data path on chip  (tspec_v09u.pdf::SD_DP_On)
                            24807 ; 1848 |_reentrant INT STFM1000DataPathOn(void)
                            24808 ; 1849 |{
                            24809 
                            24814 FSTFM1000DataPathOn:
                            24825 
                            24826 ; 1850 |    INT RetCode = SUCCESS;
                            24827 ; 1851 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            24828 
                            24832 
                            24833 ; 1852 |
                            24834 ; 1853 |
                            24835 ; 1854 |    RetCode = STFM1000WriteRegister(
                            24836 ; 1855 |        DATAPATH_REG_ADDR,
                            24837 ; 1856 |        DP_EN_REG_MASK,
                            24838 ; 1857 |        &pDrst->sd_ctl_ShadowDataPath_dw,
                            24839 ; 1858 |        1);
                            24840 
P:01BA 055F7C         2  97224815         movec   ssh,y:(r7)+
P:01BB 3E2200         2  97424842         move    #34,n6
P:01BC 66F400 rrrrrr  3  97724830         move    #FStfmTuneData,r6
P:01BE 77F400 FFFFFE  3  98024843         move    #-2,n7
P:01C0 044E1E         4  98424846         lua     (r6)+n6,n6
P:01C1 23D000         2  98624855         move    n6,r0
P:01C2 44F400 00005C  3  98924849         move    #>92,x0
P:01C4 205F1B         2  99124850         clr     b	                (r7)+
P:01C5 000009         2  99324851         inc     b
P:01C6 205F00         2  99524819         move    (r7)+
P:01C7 212E00         2  99724856         move    b0,a
P:01C8 6E6F00         4 100124845         move    r6,y:(r7+n7)
P:01C9 045FA0         2 100324852         movec   m0,n7
P:01CA 000000         2 100524852         nop             ; (inserted)
P:01CB 7E6F00         4 100924854         move    n6,y:(r7+n7)
P:01CC 0BF080 rrrrrr  6 101524857         jsr     FSTFM1000WriteRegister
                            24860 
                            24861 ; 1859 |    if (SUCCESS != RetCode)
                            24862 
P:01CE 21C503         2 101724864         tst     a	                a,x1
P:01CF 0AF0A2 rrrrrr  6 102324865         jne     L186
                            24866 
                            24867 ; 1860 |    {
                            24868 ; 1861 |        //SystemHalt();
                            24869 ; 1862 |        return RetCode;
                            24870 ; 1863 |    }
                            24871 ; 1864 |
                            24872 ; 1865 |    STFM1000delay_ms(3); // wait 3 ms to settle
                            24873 
P:01D1 56F400 000003  3 102624875         move    #>3,a
P:01D3 0BF080 rrrrrr  6 103224876         jsr     FSTFM1000delay_ms
                            24878 
                            24879 ; 1866 |
                            24880 ; 1867 |    RetCode = STFM1000WriteRegister(
                            24881 ; 1868 |        DATAPATH_REG_ADDR,
                            24882 ; 1869 |        DB_ACCEPT_REG_MASK,
                            24883 ; 1870 |        &pDrst->sd_ctl_ShadowDataPath_dw,
                            24884 ; 1871 |        1);
                            24885 
P:01D5 045FA0         2 103424890         movec   m0,n7
P:01D6 44F413 00005C  3 103724888         clr     a	                #>92,x0
P:01D8 68EF00         4 104124892         move    y:(r7+n7),r0
P:01D9 50F41B 010000  3 104424893         clr     b	                #$10000,a0
P:01DB 000009         2 104624894         inc     b
P:01DC 0BF080 rrrrrr  6 105224895         jsr     FSTFM1000WriteRegister
                            24898 
                            24899 ; 1872 |    if (SUCCESS != RetCode)
                            24900 
P:01DE 21C503         2 105424902         tst     a	                a,x1
P:01DF 0AF0A2 rrrrrr  6 106024903         jne     L186
                            24904 
                            24905 ; 1873 |    {
                            24906 ; 1874 |        //SystemHalt();
                            24907 ; 1875 |          return RetCode;
                            24908 ; 1876 |    }
                            24909 ; 1877 |
                            24910 ; 1878 |    RetCode = STFM1000WriteRegister(
                            24911 ; 1879 |        AGC_CONTROL1_REG_ADDR,
                            24912 ; 1880 |        B2_BYPASS_AGC_CTL_REG_MASK,
                            24913 ; 1881 |        &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            24914 ; 1882 |        0);
                            24915 
P:01E1 77F41B FFFFFE  3 106324926         clr     b	                #-2,n7
P:01E3 381E13         2 106524928         clr     a	                #30,n0
P:01E4 68EF00         4 106924920         move    y:(r7+n7),r0
P:01E5 44F400 000044  3 107224927         move    #>68,x0
P:01E7 50F400 004000  3 107524929         move    #$4000,a0
P:01E9 204800         2 107724922         move    (r0)+n0
P:01EA 0BF080 rrrrrr  6 108324930         jsr     FSTFM1000WriteRegister
                            24934 
                            24935 ; 1883 |    if (SUCCESS != RetCode)
                            24936 
P:01EC 21C503         2 108524938         tst     a	                a,x1
P:01ED 0AF0A2 rrrrrr  6 109124939         jne     L186
                            24940 
                            24941 ; 1884 |    {
                            24942 ; 1885 |        //SystemHalt();
                            24943 ; 1886 |        return RetCode;
                            24944 ; 1887 |    }
                            24945 ; 1888 |
                            24946 ; 1889 |    RetCode = STFM1000WriteRegister(
                            24947 ; 1890 |        DATAPATH_REG_ADDR,
                            24948 ; 1891 |        DB_ACCEPT_REG_MASK,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24949 ; 1892 |        &pDrst->sd_ctl_ShadowDataPath_dw,
                            24950 ; 1893 |        0);
                            24951 
P:01EF 045FA0         2 109324957         movec   m0,n7
P:01F0 44F41B 00005C  3 109624953         clr     b	                #>92,x0
P:01F2 68EF13         4 110024955         clr     a	                y:(r7+n7),r0
P:01F3 50F400 010000  3 110324956         move    #$10000,a0
P:01F5 0BF080 rrrrrr  6 110924960         jsr     FSTFM1000WriteRegister
                            24964 
                            24965 ; 1894 |    if (SUCCESS != RetCode)
                            24966 ; 1895 |    {
                            24967 ; 1896 |        //SystemHalt();
                            24968 ; 1897 |          return RetCode;
                            24969 ; 1898 |    }
                            24970 ; 1899 |
                            24971 ; 1900 |    return RetCode;
                            24972 
P:01F7 21C500         2 111124962         move    a,x1
                            24974 L186:
                            24977 
                            24978 ; 1901 |}
                            24979 
P:01F8 205761         2 111324974         tfr     x1,a	                (r7)-
P:01F9 205700         2 111524982         move    (r7)-
P:01FA 05FF7C         4 111924984         movec   y:-(r7),ssh
P:01FB 000000         2 112124984         nop             ; (inserted)
P:01FC 00000C         4 112524988         rts
                            24991 
                            24992 ; 1902 |#ifdef FUNCLET
                            24993 ; 1903 |    #pragma asm
P:003A                      24994         org p,".ptextstfm1000":
                            24995 ; 1905 |    #pragma endasm
                            24996 ; 1906 |#endif
                            24997 ; 1907 |
                            24998 ; 1908 |#ifdef FUNCLET
                            24999 ; 1909 |    #pragma asm
                            25000         FSTFM1000FindRSSIThresHold:
                            25001 
                            25006 
                            25007         ;If using funclet, function will be executed via funclet kernel
                            25008         CallFunclet2 RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD
P:003A 0D0082         4  14925008     jsr       $82
P:003B 000433               25008     DC       RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD  ; 1 word
                            25009 
P:0000                      25010         org p,"SYSFUNCLET_STFM1000_FIND_RSSI_THRESHOLD_P":
P:0000 000433               25011         dc      RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD
                            25012 ; 1922 |    #pragma endasm
                            25013 ; 1923 |_reentrant INT STFM1000FindRSSIThresHold_Funclet( void)
                            25014 ; 1924 |#else
                            25015 ; 1925 |_reentrant INT STFM1000FindRSSIThresHold(void)
                            25016 ; 1926 |#endif
                            25017 ; 1927 |{
                            25018 
                            25023 FSTFM1000FindRSSIThresHold_Funclet:
                            25035 
                            25036 ; 1928 |    INT iReturn = TUNER_SUCCESS;
                            25037 ; 1929 |
                            25038 ; 1930 |    INT iTempFreq = g_wCurrentFrequency;
                            25039 
                            25048 
                            25049 ; 1931 |    INT iTemp1 = 100;
                            25050 
                            25057 
                            25058 ; 1932 |    INT iTestFrequency;
                            25059 ; 1933 |    BOOL bIsAStation;
                            25060 ; 1934 |    // Scanning from 87.5MHz to 88.4 to find the lowest RSSI and use it as
                            25061 ; 1935 |    // noise level, then plus 10 as the default RSSI settings
                            25062 ; 1936 |
                            25063 ; 1937 |    for (iTestFrequency = FM_BAND_LIMIT_LOW_FREQ; iTestFrequency < (FM_BAND_LIMIT_LOW_FREQ + 1000); iTestFrequency += FM_TUNER_GRID)
                            25064 
P:0001 055F7C         2    225024         movec   ssh,y:(r7)+
P:0002 3F0500         2    425027         move    #5,n7
P:0003 56F400 0155CC  3    725066         move    #87500,a
P:0005 59F000 rrrrrr  3   1025041         move    y:Fg_wCurrentFrequency,b0
P:0007 204F00         2   1225029         move    (r7)+n7
P:0008 77F400 FFFFFC  3   1525042         move    #-4,n7
P:000A 000000         2   1725042         nop             ; (inserted)
P:000B 596F00         4   2125044         move    b0,y:(r7+n7)
P:000C 57F400 000064  3   2425052         move    #>100,b
                            25068 L201:
                            25073 
                            25074 ; 1938 |    {
                            25075 ; 1939 |        iReturn = STFM1000TunerQuicksetStation(iTestFrequency);
                            25076 
P:000E 77F400 FFFFFD  3   2725068         move    #-3,n7
P:0010 000000         2   2925068         nop             ; (inserted)
P:0011 5D6F00         4   3325070         move    b1,y:(r7+n7)
P:0012 77F400 FFFFFE  3   3625078         move    #-2,n7
P:0014 000000         2   3825078         nop             ; (inserted)
P:0015 5C6F00         4   4225080         move    a1,y:(r7+n7)
P:0016 0BF080 rrrrrr  6   4825083         jsr     FSTFM1000TunerQuicksetStation
                            25088 
                            25089 ; 1940 |        if(iReturn != SUCCESS)
                            25090 
P:0018 045FA0         2   5025084         movec   m0,n7
P:0019 200003         2   5225092         tst     a
P:001A 5E6F00         4   5625086         move    a,y:(r7+n7)
P:001B 0AF0A2 rrrrrr  6   6225093         jne     L205
                            25094 
                            25095 ; 1941 |        {
                            25096 ; 1942 |            return iReturn;
                            25097 ; 1943 |        }
                            25098 ; 1944 |        // Wait 20 ms for tuner settle before checking the station
                            25099 ; 1945 |        STFM1000delay_ms(20);
                            25100 
P:001D 56F400 000014  3   6525102         move    #>20,a
P:001F 0BF080 rrrrrr  6   7125103         jsr     FSTFM1000delay_ms
                            25104 
                            25105 ; 1946 |        iReturn = STFM1000TunerQueryIsStation(&bIsAStation);
                            25106 
P:0021 77F400 FFFFFB  3   7425108         move    #-5,n7
P:0023 000000         2   7625108         nop             ; (inserted)
P:0024 044F10         4   8025110         lua     (r7)+n7,r0
P:0025 0BF080 rrrrrr  6   8625111         jsr     FSTFM1000TunerQueryIsStation
                            25115 
                            25116 ; 1947 |        if(iReturn != SUCCESS)
                            25117 
P:0027 045FA0         2   8825112         movec   m0,n7
P:0028 200003         2   9025119         tst     a
P:0029 5E6F00         4   9425114         move    a,y:(r7+n7)
P:002A 77F400 FFFFFD  3   9725120         move    #-3,n7
P:002C 000000         2   9925120         nop             ; (inserted)
P:002D 5FEF00         4  10325122         move    y:(r7+n7),b
P:002E 77F400 FFFFFE  3  10625125         move    #-2,n7
P:0030 000000         2  10825125         nop             ; (inserted)
P:0031 5EEF00         4  11225127         move    y:(r7+n7),a
P:0032 0AF0A2 rrrrrr  6  11825130         jne     L205
                            25131 
                            25132 ; 1948 |        {
                            25133 ; 1949 |            return iReturn;
                            25134 ; 1950 |        }
                            25135 ; 1951 |
                            25136 ; 1952 |        if(iTemp1 > s_iFMSignalStrengthRSSI)
                            25137 
P:0034 4EF000 rrrrrr  3  12125139         move    y:Fs_iFMSignalStrengthRSSI,y0
P:0036 20005D         2  12325140         cmp     y0,b
P:0037 0AF0AF rrrrrr  6  12925141         jle     L202
                            25142 
                            25143 ; 1953 |        {
                            25144 ; 1954 |            iTemp1 = s_iFMSignalStrengthRSSI;
                            25145 
                            25148 
                            25149 ; 1955 |        }
                            25150 
P:0039 5FF000 rrrrrr  3  13225147         move    y:Fs_iFMSignalStrengthRSSI,b
                            25152 L202:
P:003B 47F400 000064  3  13525154         move    #>100,y1
P:003D 45F470 0159B4  3  13825155         add     y1,a	                #88500,x1
P:003F 200065         2  14025157         cmp     x1,a
P:0040 0AF0A9 rrrrrr  6  14625158         jlt     L201
                            25159 
                            25160 ; 1956 |    }
                            25161 ; 1957 |    s_iFMSignalStrengthRSSI = iTemp1 + RSSI_THRESHOLD_OFFSET;
                            25162 
                            25168 
                            25169 ; 1958 |    if(s_iFMSignalStrengthRSSI > 25)
                            25170 
P:0042 46F400 000007  3  14925164         move    #>7,y0
P:0044 44F458 000019  3  15225165         add     y0,b	                #>25,x0
P:0046 5D7000 rrrrrr  3  15525167         move    b1,y:Fs_iFMSignalStrengthRSSI
P:0048 5FF000 rrrrrr  3  15825172         move    y:Fs_iFMSignalStrengthRSSI,b
P:004A 20004D         2  16025174         cmp     x0,b
P:004B 0AF0AF rrrrrr  6  16625175         jle     L203
                            25176 
                            25177 ; 1959 |    {
                            25178 ; 1960 |        StfmTuneData.sd_ctl_TuneRssiTh_w = s_iFMSignalStrengthRSSI;
                            25179 
                            25183 
                            25184 ; 1961 |    }
                            25185 ; 1962 |
                            25186 ; 1963 |    g_wCurrentFrequency = iTempFreq;
                            25187 
P:004D 4CF000 rrrrrr  3  16925181         move    y:Fs_iFMSignalStrengthRSSI,x0
P:004F 4C7000 rrrrrr  3  17225182         move    x0,y:FStfmTuneData+36
                            25189 L203:
                            25194 
                            25195 ; 1964 |    return iReturn;
                            25196 
P:0051 77F400 FFFFFC  3  17525189         move    #-4,n7
P:0053 000000         2  17725189         nop             ; (inserted)
P:0054 58EF00         4  18125191         move    y:(r7+n7),a0
P:0055 587000 rrrrrr  3  18425193         move    a0,y:Fg_wCurrentFrequency
                            25198 L205:
                            25203 
                            25204 ; 1965 |}
                            25205 
P:0057 045FA0         2  18625198         movec   m0,n7
P:0058 000000         2  18825198         nop             ; (inserted)
P:0059 5EEF00         4  19225200         move    y:(r7+n7),a
P:005A 77F400 FFFFFA  3  19525207         move    #-6,n7
P:005C 000000         2  19725207         nop             ; (inserted)
P:005D 05EF7C         4  20125209         movec   y:(r7+n7),ssh
P:005E 204F00         2  20325211         move    (r7)+n7
P:005F 00000C         4  20725213         rts
                            25217 
                            25218 ; 1966 |#ifdef FUNCLET
                            25219 ; 1967 |    #pragma asm
P:003C                      25220         org p,".ptextstfm1000":
                            25221 ; 1969 |    #pragma endasm
                            25222 ; 1970 |#endif
                            25223 ; 1971 |
                            25224 ; 1972 |// ****************************************
                            25225 ; 1973 |//! STFM Data Path Off
                            25226 ; 1974 |// ****************************************
                            25227 ; 1975 |#ifdef FUNCLET
                            25228 ; 1976 |    #pragma asm
                            25229         FSTFM1000DataPathOff:
                            25230 
                            25235 
                            25236         ;If using funclet, function will be executed via funclet kernel
                            25237         CallFunclet2 RSRC_FUNCLET_STFM1000_DATA_PATH_OFF
P:003C 0D0082         4  15325237     jsr       $82
P:003D 000434               25237     DC       RSRC_FUNCLET_STFM1000_DATA_PATH_OFF  ; 1 word
                            25238 
P:0000                      25239         org p,"SYSFUNCLET_STFM1000_DATA_PATH_OFF_P":
P:0000 000434               25240         dc      RSRC_FUNCLET_STFM1000_DATA_PATH_OFF
                            25241 ; 1989 |    #pragma endasm
                            25242 ; 1990 |_reentrant INT STFM1000DataPathOff_Funclet( void)
                            25243 ; 1991 |#else
                            25244 ; 1992 |_reentrant INT STFM1000DataPathOff(void)
                            25245 ; 1993 |#endif
                            25246 ; 1994 |{
                            25247 
                            25252 FSTFM1000DataPathOff_Funclet:
                            25263 
                            25264 ; 1995 |    INT RetCode = SUCCESS;
                            25265 ; 1996 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            25266 
                            25270 
                            25271 ; 1997 |
                            25272 ; 1998 |    // * Turns off Data Path on tuner (tspec_v09u.pdf::SD_DP_Off)
                            25273 ; 1999 |
                            25274 ; 2000 |    RetCode = STFM1000WriteRegister(
                            25275 ; 2001 |        DATAPATH_REG_ADDR,
                            25276 ; 2002 |        DB_ACCEPT_REG_MASK,
                            25277 ; 2003 |        &pDrst->sd_ctl_ShadowDataPath_dw,
                            25278 ; 2004 |        1);
                            25279 
P:0001 055F7C         2    225253         movec   ssh,y:(r7)+
P:0002 3A2200         2    425281         move    #34,n2
P:0003 77F400 FFFFFE  3    725282         move    #-2,n7
P:0005 44F400 00005C  3   1025288         move    #>92,x0
P:0007 205F13         2   1225289         clr     a	                (r7)+
P:0008 62F41B rrrrrr  3   1525295         clr     b	                #FStfmTuneData,r2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
P:000A 205F00         2   1725257         move    (r7)+
P:000B 044A1A         4   2125285         lua     (r2)+n2,n2
P:000C 235000         2   2325294         move    n2,r0
P:000D 50F400 010000  3   2625290         move    #$10000,a0
P:000F 000009         2   2825296         inc     b
P:0010 6A6F00         4   3225284         move    r2,y:(r7+n7)
P:0011 045FA0         2   3425291         movec   m0,n7
P:0012 000000         2   3625291         nop             ; (inserted)
P:0013 7A6F00         4   4025293         move    n2,y:(r7+n7)
P:0014 0BF080 rrrrrr  6   4625297         jsr     FSTFM1000WriteRegister
                            25300 
                            25301 ; 2005 |    if (SUCCESS != RetCode)
                            25302 
P:0016 21C603         2   4825304         tst     a	                a,y0
P:0017 0AF0A2 rrrrrr  6   5425305         jne     L229
                            25306 
                            25307 ; 2006 |    {
                            25308 ; 2007 |        //SystemHalt();
                            25309 ; 2008 |         return RetCode;
                            25310 ; 2009 |    }
                            25311 ; 2010 |
                            25312 ; 2011 |    RetCode = STFM1000WriteRegister(
                            25313 ; 2012 |        DATAPATH_REG_ADDR,
                            25314 ; 2013 |        DP_EN_REG_MASK,
                            25315 ; 2014 |        &pDrst->sd_ctl_ShadowDataPath_dw,
                            25316 ; 2015 |        0);
                            25317 
P:0019 045FA0         2   5625320         movec   m0,n7
P:001A 56F41B 000001  3   5925323         clr     b	                #>1,a
P:001C 68EF00         4   6325322         move    y:(r7+n7),r0
P:001D 44F400 00005C  3   6625319         move    #>92,x0
P:001F 0BF080 rrrrrr  6   7225325         jsr     FSTFM1000WriteRegister
                            25329 
                            25330 ; 2016 |    if (SUCCESS != RetCode)
                            25331 
P:0021 21C603         2   7425333         tst     a	                a,y0
P:0022 0AF0A2 rrrrrr  6   8025334         jne     L229
                            25335 
                            25336 ; 2017 |    {
                            25337 ; 2018 |        //SystemHalt();
                            25338 ; 2019 |        return RetCode;
                            25339 ; 2020 |    }
                            25340 ; 2021 |
                            25341 ; 2022 |    RetCode = STFM1000WriteRegister(
                            25342 ; 2023 |        AGC_CONTROL1_REG_ADDR,
                            25343 ; 2024 |        B2_BYPASS_AGC_CTL_REG_MASK,
                            25344 ; 2025 |        &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            25345 ; 2026 |        1);
                            25346 
P:0024 77F41B FFFFFE  3   8325355         clr     b	                #-2,n7
P:0026 44F400 000044  3   8625354         move    #>68,x0
P:0028 68EF00         4   9025351         move    y:(r7+n7),r0
P:0029 000009         2   9225356         inc     b
P:002A 381E13         2   9425357         clr     a	                #30,n0
P:002B 50F400 004000  3   9725358         move    #$4000,a0
P:002D 204800         2   9925353         move    (r0)+n0
P:002E 0BF080 rrrrrr  6  10525359         jsr     FSTFM1000WriteRegister
                            25363 
                            25364 ; 2027 |    if (SUCCESS != RetCode)
                            25365 
P:0030 21C603         2  10725367         tst     a	                a,y0
P:0031 0AF0A2 rrrrrr  6  11325368         jne     L229
                            25369 
                            25370 ; 2028 |    {
                            25371 ; 2029 |        //SystemHalt();
                            25372 ; 2030 |        return RetCode;
                            25373 ; 2031 |    }
                            25374 ; 2032 |
                            25375 ; 2033 |    RetCode = STFM1000WriteRegister(
                            25376 ; 2034 |        PILOTTRACKING_REG_ADDR,
                            25377 ; 2035 |        B2_PILOTTRACKING_ENABLE_REG_MASK,
                            25378 ; 2036 |        &pDrst->sd_ctl_ShadowPilotTracking_dw,
                            25379 ; 2037 |        0);
                            25380 
P:0033 77F41B FFFFFE  3  11625391         clr     b	                #-2,n7
P:0035 380413         2  11825393         clr     a	                #4,n0
P:0036 68EF00         4  12225385         move    y:(r7+n7),r0
P:0037 44F400 000008  3  12525392         move    #>8,x0
P:0039 50F400 008000  3  12825394         move    #$8000,a0
P:003B 204800         2  13025387         move    (r0)+n0
P:003C 0BF080 rrrrrr  6  13625395         jsr     FSTFM1000WriteRegister
                            25399 
                            25400 ; 2038 |    if (SUCCESS != RetCode)
                            25401 
P:003E 21C603         2  13825403         tst     a	                a,y0
P:003F 0AF0A2 rrrrrr  6  14425404         jne     L229
                            25405 
                            25406 ; 2039 |    {
                            25407 ; 2040 |        //SystemHalt();
                            25408 ; 2041 |        return RetCode;
                            25409 ; 2042 |    }
                            25410 ; 2043 |
                            25411 ; 2044 |    RetCode = STFM1000WriteRegister(
                            25412 ; 2045 |        DATAPATH_REG_ADDR,
                            25413 ; 2046 |        DB_ACCEPT_REG_MASK,
                            25414 ; 2047 |        &pDrst->sd_ctl_ShadowDataPath_dw,
                            25415 ; 2048 |        0);
                            25416 
P:0041 045FA0         2  14625421         movec   m0,n7
P:0042 44F413 00005C  3  14925419         clr     a	                #>92,x0
P:0044 68EF00         4  15325423         move    y:(r7+n7),r0
P:0045 50F41B 010000  3  15625424         clr     b	                #$10000,a0
P:0047 0BF080 rrrrrr  6  16225425         jsr     FSTFM1000WriteRegister
                            25429 
                            25430 ; 2049 |    if (SUCCESS != RetCode)
                            25431 ; 2050 |    {
                            25432 ; 2051 |        //SystemHalt();
                            25433 ; 2052 |         return RetCode;
                            25434 ; 2053 |    }
                            25435 ; 2054 |
                            25436 ; 2055 |    return RetCode;
                            25437 
P:0049 21C600         2  16425427         move    a,y0
                            25439 L229:
                            25442 
                            25443 ; 2056 |}
                            25444 
P:004A 205751         2  16625439         tfr     y0,a	                (r7)-
P:004B 205700         2  16825447         move    (r7)-
P:004C 05FF7C         4  17225449         movec   y:-(r7),ssh
P:004D 000000         2  17425449         nop             ; (inserted)
P:004E 00000C         4  17825453         rts
                            25456 
                            25457 ; 2057 |#ifdef FUNCLET
                            25458 ; 2058 |    #pragma asm
P:003E                      25459         org p,".ptextstfm1000":
                            25460 ; 2060 |    #pragma endasm
                            25461 ; 2061 |#endif
                            25462 ; 2062 |
                            25463 ; 2063 |////////////////////////////////////////////////////////////////////////////////
                            25464 ; 2064 |//
                            25465 ; 2065 |//>  Name:          TunerDriverSetPresetStations
                            25466 ; 2066 |//
                            25467 ; 2067 |//   Type:          Function
                            25468 ; 2068 |//
                            25469 ; 2069 |//   Description:   Replace the lastest preset station with the current tuned station
                            25470 ; 2070 |//
                            25471 ; 2071 |//   Inputs:        iPresetStation
                            25472 ; 2072 |//
                            25473 ; 2073 |//   Outputs:       Error status
                            25474 ; 2074 |//
                            25475 ; 2075 |//   Notes:         none
                            25476 ; 2076 |//<
                            25477 ; 2077 |////////////////////////////////////////////////////////////////////////////////
                            25478 ; 2078 |#ifdef FUNCLET
                            25479 ; 2079 |    #pragma asm
P:0008                      25480         org p,".stfm1000_SYS":
                            25481         FTunerDriverSetPresetStations:
                            25482 
                            25487 
                            25488         ;If using funclet, function will be executed via funclet kernel
                            25489         CallFunclet2 RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET
P:0008 0D0082         4   2025489     jsr       $82
P:0009 000420               25489     DC       RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET  ; 1 word
                            25490 
P:0000                      25491         org p,"SYSFUNCLET_TUNER_DRIVER_REPLACE_PRESET_P":
P:0000 000420               25492         dc      RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET
                            25493 ; 2093 |    #pragma endasm
                            25494 ; 2094 |_reentrant INT TunerDriverSetPresetStations_Funclet( INT iPresetStation)
                            25495 ; 2095 |#else
                            25496 ; 2096 |_reentrant INT TunerDriverSetPresetStations( INT iPresetStation)
                            25497 ; 2097 |#endif
                            25498 ; 2098 |{
                            25499 
                            25504 FTunerDriverSetPresetStations_Funclet:
                            25512 
                            25513 ; 2099 |        INT iTuningStatus = TUNER_SUCCESS;
                            25514 ; 2100 |
                            25515 ; 2101 |        if ((iPresetStation-1<NUMBER_OF_PRESETS)&&(iPresetStation>0))
                            25516 
P:0001 055F7C         2    225505         movec   ssh,y:(r7)+
P:0002 218F00         2    425518         move    a1,b
P:0003 46F400 000001  3    725519         move    #>1,y0
P:0005 44F45C 00000A  3   1025520         sub     y0,b	                #>10,x0
P:0007 20004D         2   1225522         cmp     x0,b
P:0008 0AF0A1 rrrrrr  6   1825523         jge     L234
P:000A 200003         2   2025524         tst     a
P:000B 0AF0AF rrrrrr  6   2625525         jle     L234
                            25526 
                            25527 ; 2102 |        {
                            25528 ; 2103 |                g_astPresetStations[iPresetStation-1].Frequency = g_wCurrentFrequency;
                            25529 
                            25540 
                            25541 ; 2104 |                g_astPresetStations[iPresetStation-1].Level = 1;
                            25542 
                            25547 
                            25548 ; 2105 |                g_wCurrentPreset = iPresetStation;
                            25549 
                            25552 
                            25553 ; 2106 |        SysPostMessage(2,MENU_TUNER_TUNED);
                            25554 
P:000D 65F400 rrrrrr  3   2925544         move    #Fg_astPresetStations-1,r5
P:000F 4FF000 rrrrrr  3   3225531         move    y:Fg_wCurrentFrequency,y1
P:0011 218F00         2   3425532         move    a1,b
P:0012 66F43B rrrrrr  3   3725533         lsl     b	                #Fg_astPresetStations-2,r6
P:0014 21BE00         2   3925534         move    b1,n6
P:0015 21BD00         2   4125535         move    b1,n5
P:0016 45F400 06000A  3   4425556         move    #393226,x1
P:0018 290200         2   4625559         move    #2,b0
P:0019 204E00         2   4825538         move    (r6)+n6
P:001A 4F6600         2   5025539         move    y1,y:(r6)
P:001B 4E6D00         4   5425546         move    y0,y:(r5+n5)
P:001C 5C7000 rrrrrr  3   5725551         move    a1,y:Fg_wCurrentPreset
P:001E 4D5F00         2   5925557         move    x1,y:(r7)+
P:001F 595F00         2   6125560         move    b0,y:(r7)+
P:0020 0BF080 rrrrrr  6   6725562         jsr     FSysPostMessage
                            25568 
                            25569 ; 2107 |        }
                            25570 
P:0022 205700         2   6925563         move    (r7)-
P:0023 205700         2   7125565         move    (r7)-
P:0024 0AF080 rrrrrr  6   7725572         jmp     L235
                            25573 
                            25574 ; 2108 |        else
                            25575 ; 2109 |                g_wFMTunerError.m_bPRESET_RANGE_ERROR=TRUE;
                            25576 
                            25578 L234:
                            25579 
                            25580 ; 2110 |        return iTuningStatus;
                            25581 
P:0026 0A706B rrrrrr  6   8325578         bset    #11,y:Fg_wFMTunerError
                            25583 L235:
                            25584 
                            25585 ; 2111 |}
                            25586 
P:0028 05FF7C         4   8725588         movec   y:-(r7),ssh
P:0029 2E0000         2   8925583         move    #0,a
P:002A 00000C         4   9325592         rts
                            25594 
                            25595 ; 2112 |#ifdef FUNCLET
                            25596 ; 2113 |    #pragma asm
P:003E                      25597         org p,".ptextstfm1000":
                            25598 ; 2115 |    #pragma endasm
                            25599 ; 2116 |#endif
                            25600 ; 2117 |
                            25601 ; 2118 |////////////////////////////////////////////////////////////////////////////////
                            25602 ; 2119 |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                            25603 ; 2120 |//>  Name:          TunerDriverErasePresetStations
                            25604 ; 2121 |//
                            25605 ; 2122 |//   Type:          Function
                            25606 ; 2123 |//
                            25607 ; 2124 |//   Description:   Erase a preset station
                            25608 ; 2125 |//
                            25609 ; 2126 |//   Inputs:        iPresetStation
                            25610 ; 2127 |//
                            25611 ; 2128 |//   Outputs:       Error status
                            25612 ; 2129 |//
                            25613 ; 2130 |//   Notes:         none
                            25614 ; 2131 |//<
                            25615 ; 2132 |////////////////////////////////////////////////////////////////////////////////
                            25616 ; 2133 |#ifdef FUNCLET
                            25617 ; 2134 |    #pragma asm
P:000A                      25618         org p,".stfm1000_SYS":
                            25619         FTunerDriverErasePresetStations:
                            25620 
                            25625 
                            25626         ;If using funclet, function will be executed via funclet kernel
                            25627         CallFunclet2 RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET
P:000A 0D0082         4   2425627     jsr       $82
P:000B 000421               25627     DC       RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET  ; 1 word
                            25628 
P:0000                      25629         org p,"SYSFUNCLET_TUNER_DRIVER_ERASE_PRESET_P":
P:0000 000421               25630         dc      RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET
                            25631 ; 2148 |    #pragma endasm
                            25632 ; 2149 |_reentrant INT TunerDriverErasePresetStations_Funclet( INT iPresetStation)
                            25633 ; 2150 |#else
                            25634 ; 2151 |_reentrant INT TunerDriverErasePresetStations( INT iPresetStation)
                            25635 ; 2152 |#endif
                            25636 ; 2153 |{
                            25637 
                            25642 FTunerDriverErasePresetStations_Funclet:
                            25650 
                            25651 ; 2154 |        INT iTuningStatus = TUNER_SUCCESS;
                            25652 ; 2155 |
                            25653 ; 2156 |        if ((iPresetStation-1<NUMBER_OF_PRESETS)&&(iPresetStation>0))
                            25654 
P:0001 055F7C         2    225643         movec   ssh,y:(r7)+
P:0002 218F00         2    425656         move    a1,b
P:0003 47F400 000001  3    725657         move    #>1,y1
P:0005 45F47C 00000A  3   1025658         sub     y1,b	                #>10,x1
P:0007 20006D         2   1225660         cmp     x1,b
P:0008 0AF0A1 rrrrrr  6   1825661         jge     L240
P:000A 2F0003         2   2025663         tst     a	                #0,b
P:000B 0AF0AF rrrrrr  6   2625664         jle     L240
                            25665 
                            25666 ; 2157 |        {
                            25667 ; 2158 |                g_astPresetStations[iPresetStation-1].Frequency = 0;
                            25668 
                            25678 
                            25679 ; 2159 |                g_astPresetStations[iPresetStation-1].Level = 0;
                            25680 
                            25685 
                            25686 ; 2160 |                g_wCurrentPreset = 0;
                            25687 
                            25690 
                            25691 ; 2161 |        SysPostMessage(2,MENU_TUNER_TUNED);
                            25692 
P:000D 66F433 rrrrrr  3   2925670         lsl     a	                #Fg_astPresetStations-2,r6
P:000F 65F400 rrrrrr  3   3225682         move    #Fg_astPresetStations-1,r5
P:0011 219D00         2   3425672         move    a1,n5
P:0012 23BE00         2   3625674         move    n5,n6
P:0013 000000         2   3825674         nop             ; (inserted)
P:0014 204E00         2   4025676         move    (r6)+n6
P:0015 5F6600         2   4225677         move    b,y:(r6)
P:0016 5F6D00         4   4625684         move    b,y:(r5+n5)
P:0017 5F7000 rrrrrr  3   4925689         move    b,y:Fg_wCurrentPreset
P:0019 51F400 06000A  3   5225694         move    #393226,b0
P:001B 595F00         2   5425695         move    b0,y:(r7)+
P:001C 290200         2   5625697         move    #2,b0
P:001D 595F00         2   5825698         move    b0,y:(r7)+
P:001E 0BF080 rrrrrr  6   6425700         jsr     FSysPostMessage
                            25705 
                            25706 ; 2162 |        }
                            25707 
P:0020 205700         2   6625701         move    (r7)-
P:0021 205700         2   6825703         move    (r7)-
P:0022 0AF080 rrrrrr  6   7425709         jmp     L241
                            25710 
                            25711 ; 2163 |        else
                            25712 ; 2164 |                g_wFMTunerError.m_bPRESET_RANGE_ERROR=TRUE;
                            25713 
                            25715 L240:
                            25716 
                            25717 ; 2165 |        return iTuningStatus;
                            25718 
P:0024 0A706B rrrrrr  6   8025715         bset    #11,y:Fg_wFMTunerError
                            25720 L241:
                            25721 
                            25722 ; 2166 |}
                            25723 
P:0026 05FF7C         4   8425725         movec   y:-(r7),ssh
P:0027 2E0000         2   8625720         move    #0,a
P:0028 00000C         4   9025729         rts
                            25731 
                            25732 ; 2167 |#ifdef FUNCLET
                            25733 ; 2168 |    #pragma asm
P:003E                      25734         org p,".ptextstfm1000":
                            25735 ; 2170 |    #pragma endasm
                            25736 ; 2171 |#endif
                            25737 ; 2172 |
                            25738 ; 2173 |////////////////////////////////////////////////////////////////////////////////
                            25739 ; 2174 |//
                            25740 ; 2175 |//>  Name:          TunerDriverSetToPresetStations
                            25741 ; 2176 |//
                            25742 ; 2177 |//   Type:          Function
                            25743 ; 2178 |//
                            25744 ; 2179 |//   Description:   Tune to a preset station
                            25745 ; 2180 |//
                            25746 ; 2181 |//   Inputs:        iPresetStation: A preset station number
                            25747 ; 2182 |//
                            25748 ; 2183 |//   Outputs:       return iTuningStatus
                            25749 ; 2184 |//
                            25750 ; 2185 |//   Notes:         none
                            25751 ; 2186 |//<
                            25752 ; 2187 |////////////////////////////////////////////////////////////////////////////////
                            25753 ; 2188 |#ifdef FUNCLET
                            25754 ; 2189 |    #pragma asm
P:000C                      25755         org p,".stfm1000_SYS":
                            25756         FTunerDriverSetToPresetStations:
                            25757 
                            25762 
                            25763         ;If using funclet, function will be executed via funclet kernel
                            25764         CallFunclet2 RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET
P:000C 0D0082         4   2825764     jsr       $82
P:000D 000422               25764     DC       RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET  ; 1 word
                            25765 
P:0000                      25766         org p,"SYSFUNCLET_TUNER_DRIVER_TUNE_TO_PRESET_P":
P:0000 000422               25767         dc      RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET
                            25768 ; 2203 |    #pragma endasm
                            25769 ; 2204 |_reentrant INT TunerDriverSetToPresetStations_Funclet(INT iPresetStation)
                            25770 ; 2205 |#else
                            25771 ; 2206 |_reentrant INT TunerDriverSetToPresetStations(INT iPresetStation)
                            25772 ; 2207 |#endif
                            25773 ; 2208 |{
                            25774 
                            25779 FTunerDriverSetToPresetStations_Funclet:
                            25787 
                            25788 ; 2209 |        WORD wPresetFreq;
                            25789 ; 2210 |        if (iPresetStation >  NUMBER_OF_PRESETS)
                            25790 
P:0001 055F7C         2    225780         movec   ssh,y:(r7)+
P:0002 45F400 00000A  3    525792         move    #>10,x1
P:0004 200065         2    725793         cmp     x1,a
P:0005 0AF0AF rrrrrr  6   1325794         jle     L242
                            25795 
                            25796 ; 2211 |        {
                            25797 ; 2212 |                iPresetStation = NUMBER_OF_PRESETS;
                            25798 
                            25801 
                            25802 ; 2213 |                g_wFMTunerError.m_bPRESET_RANGE_ERROR = TRUE;
                            25803 
                            25806 
                            25807 ; 2214 |        }
                            25808 
P:0007 0A706B rrrrrr  6   1925805         bset    #11,y:Fg_wFMTunerError
P:0009 20AE00         2   2125800         move    x1,a
P:000A 0AF080 rrrrrr  6   2725810         jmp     L243
                            25811 
                            25812 ; 2215 |        else
                            25813 ; 2216 |    {
                            25814 ; 2217 |                g_wFMTunerError.m_bPRESET_RANGE_ERROR = FALSE;
                            25815 
                            25817 L242:
                            25818 
                            25819 ; 2218 |    }
                            25820 ; 2219 |        wPresetFreq = g_astPresetStations[iPresetStation-1].Frequency;
                            25821 
P:000C 0A704B rrrrrr  6   3325817         bclr    #11,y:Fg_wFMTunerError
                            25823 L243:
                            25831 
                            25832 ; 2220 |        if ((wPresetFreq < FM_BAND_LIMIT_LOW_FREQ) || (wPresetFreq > FM_BAND_LIMIT_HIGH_FREQ))
                            25833 
P:000E 218F00         2   3525823         move    a1,b
P:000F 66F43B rrrrrr  3   3825824         lsl     b	                #Fg_astPresetStations-2,r6
P:0011 21BE00         2   4025825         move    b1,n6
P:0012 47F400 0155CC  3   4325835         move    #87500,y1
P:0014 5FEE00         4   4725828         move    y:(r6+n6),b
P:0015 2B0000         2   4925836         move    #0,b2
P:0016 21A67D         2   5125837         cmp     y1,b	                b1,y0
P:0017 0AF0A9 rrrrrr  6   5725838         jlt     L244
P:0019 45F400 01A5E0  3   6025839         move    #108000,x1
P:001B 20006D         2   6225840         cmp     x1,b
P:001C 0AF0AF rrrrrr  6   6825841         jle     L245
                            25842 
                            25843 ; 2221 |        {
                            25844 ; 2222 |                wPresetFreq = FM_BAND_LIMIT_LOW_FREQ;
                            25845 
                            25847 L244:
                            25848 
                            25849 ; 2223 |                g_wFMTunerError.m_bUNUSED_PRESET = TRUE;
                            25850 
                            25853 
                            25854 ; 2224 |        }
                            25855 
P:001E 0A706A rrrrrr  6   7425852         bset    #10,y:Fg_wFMTunerError
P:0020 20E600         2   7625847         move    y1,y0
P:0021 0AF080 rrrrrr  6   8225857         jmp     L246
                            25858 
                            25859 ; 2225 |        else
                            25860 ; 2226 |    {
                            25861 ; 2227 |                g_wFMTunerError.m_bUNUSED_PRESET = FALSE;
                            25862 
                            25864 L245:
                            25865 
                            25866 ; 2228 |    }
                            25867 ; 2229 |        g_wCurrentPreset = iPresetStation;
                            25868 
P:0023 0A704A rrrrrr  6   8825864         bclr    #10,y:Fg_wFMTunerError
                            25870 L246:
                            25871 
                            25872 ; 2230 |        return  TunerDriverTuneToFrequency(wPresetFreq);
                            25873 
P:0025 5C7051 rrrrrr  3   9125875         tfr     y0,a	                a1,y:Fg_wCurrentPreset
P:0027 0BF080 rrrrrr  6   9725877         jsr     FTunerDriverTuneToFrequency
                            25879 
                            25880 ; 2231 |}
                            25881 
P:0029 05FF7C         4  10125883         movec   y:-(r7),ssh
P:002A 000000         2  10325883         nop             ; (inserted)
P:002B 00000C         4  10725887         rts
                            25889 
                            25890 ; 2232 |#ifdef FUNCLET
                            25891 ; 2233 |    #pragma asm
P:003E                      25892         org p,".ptextstfm1000":
                            25893 ; 2235 |    #pragma endasm
                            25894 ; 2236 |#endif
                            25895 ; 2237 |
                            25896 ; 2238 |////////////////////////////////////////////////////////////////////////////////
                            25897 ; 2239 |//
                            25898 ; 2240 |//>  Name:          TunerDriverSearchDown
                            25899 ; 2241 |//
                            25900 ; 2242 |//   Type:          Function
                            25901 ; 2243 |//
                            25902 ; 2244 |//   Description:   Search down to find a station
                            25903 ; 2245 |//
                            25904 ; 2246 |//   Inputs:        none
                            25905 ; 2247 |//
                            25906 ; 2248 |//   Outputs:       Error status
                            25907 ; 2249 |//
                            25908 ; 2250 |//   Notes:         none
                            25909 ; 2251 |//<
                            25910 ; 2252 |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                            25911 ; 2253 |#ifdef FUNCLET
                            25912 ; 2254 |    #pragma asm
P:000E                      25913         org p,".stfm1000_SYS":
                            25914         FTunerDriverSearchDown:
                            25915 
                            25920 
                            25921         ;If using funclet, function will be executed via funclet kernel
                            25922         CallFunclet2 RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN
P:000E 0D0082         4   3225922     jsr       $82
P:000F 000423               25922     DC       RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN  ; 1 word
                            25923 
P:0000                      25924         org p,"SYSFUNCLET_TUNER_DRIVER_SEARCH_DOWN_P":
P:0000 000423               25925         dc      RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN
                            25926 ; 2268 |    #pragma endasm
                            25927 ; 2269 |_reentrant INT TunerDriverSearchDown_Funclet(void)
                            25928 ; 2270 |#else
                            25929 ; 2271 |_reentrant INT TunerDriverSearchDown(void)
                            25930 ; 2272 |#endif
                            25931 ; 2273 |{
                            25932 
                            25937 FTunerDriverSearchDown_Funclet:
                            25941 
                            25942 ; 2274 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            25943 ; 2275 |    // step the search base to 100KHz
                            25944 ; 2276 |        s_wCurrentFMFrequency = 100* (int) ((s_wCurrentFMFrequency)/100);
                            25945 ; 2277 |#endif
                            25946 ; 2278 |
                            25947 ; 2279 |        // Remember the origin of the searching
                            25948 ; 2280 |    s_wBeginSearchFMFrequency = s_wCurrentFMFrequency;
                            25949 
                            25953 
                            25954 ; 2281 |    s_bTunerSearchHitBandLimit = FALSE;
                            25955 
                            25959 
                            25960 ; 2282 |
                            25961 ; 2283 |    // fake out the tuner search
                            25962 ; 2284 |    if(s_iFMTunerSearchStatus != NOT_SEARCHING)
                            25963 
P:0001 055F7C         2    225938         movec   ssh,y:(r7)+
P:0002 4DF013 rrrrrr  3    525957         clr     a	                y:Fs_wCurrentFMFrequency,x1
P:0004 4D7000 rrrrrr  3    825952         move    x1,y:Fs_wBeginSearchFMFrequency
P:0006 5FF000 rrrrrr  3   1125965         move    y:Fs_iFMTunerSearchStatus,b
P:0008 54700B rrrrrr  3   1425966         tst     b	                a1,x:Fs_bTunerSearchHitBandLimit
P:000A 0AF0AA rrrrrr  6   2025967         jeq     L247
                            25968 
                            25969 ; 2285 |    {
                            25970 ; 2286 |        return TUNER_SUCCESS;
                            25971 
P:000C 218E00         2   2225973         move    a1,a
P:000D 0AF080 rrrrrr  6   2825974         jmp     L252
                            25975 
                            25976 ; 2287 |    }
                            25977 ; 2288 |    TunerTuningInit();
                            25978 
P:000F 0BF080 rrrrrr  6   3425980 L247:   jsr     FTunerTuningInit
                            25981 
                            25982 ; 2289 |#ifdef FM_USA_REGION
                            25983 ; 2290 |    // Skip the first even station if we start from 108MHz -stmp9292
                            25984 ; 2291 |    if(s_wBeginSearchFMFrequency == FM_BAND_LIMIT_HIGH_FREQ)
                            25985 ; 2292 |    {
                            25986 ; 2293 |        s_bSearchFromTopBand = TRUE;
                            25987 ; 2294 |    }
                            25988 ; 2295 |#endif
                            25989 ; 2296 |    // if frequency is at the bottom of the band
                            25990 ; 2297 |        if ((s_wCurrentFMFrequency <= FM_BAND_LIMIT_LOW_FREQ)&&(g_bSearchEndAtBandLimit==FALSE))
                            25991 
P:0011 5FF000 rrrrrr  3   3725993         move    y:Fs_wCurrentFMFrequency,b
P:0013 46F400 0155CC  3   4025994         move    #87500,y0
P:0015 2B0000         2   4225995         move    #0,b2
P:0016 20005D         2   4425996         cmp     y0,b
P:0017 0AF0A7 rrrrrr  6   5025997         jgt     L249
P:0019 56F000 rrrrrr  3   5325998         move    x:Fg_bSearchEndAtBandLimit,a
P:001B 2A0000         2   5525999         move    #0,a2
P:001C 200003         2   5726000         tst     a
P:001D 0AF0A2 rrrrrr  6   6326001         jne     L249
                            26002 
                            26003 ; 2298 |        {
                            26004 ; 2299 |                s_wCurrentFMFrequency = FM_SEARCH_HIGH_LIMIT;
                            26005 
                            26009 
                            26010 ; 2300 |        s_bTunerSearchHitBandLimit=TRUE;
                            26011 
                            26015 
                            26016 ; 2301 |
                            26017 ; 2302 |        }
                            26018 ; 2303 |
                            26019 ; 2304 |    g_wFMTunerError.m_bSEARCHING_UP = FALSE;
                            26020 
P:001F 56F400 01A644  3   6626007         move    #108100,a
P:0021 44F400 000001  3   6926013         move    #>1,x0
P:0023 5C7000 rrrrrr  3   7226008         move    a1,y:Fs_wCurrentFMFrequency
P:0025 447000 rrrrrr  3   7526014         move    x0,x:Fs_bTunerSearchHitBandLimit
                            26022 L249:
                            26023 
                            26024 ; 2305 |        g_wFMTunerError.m_bSEARCHING_DOWN = TRUE;
                            26025 
                            26028 
                            26029 ; 2306 |        s_iFMTunerSearchStatus = SEARCHING_DOWN;
                            26030 
                            26034 
                            26035 ; 2307 |     // Turn off DRI before change station
                            26036 ; 2308 |    STFM1000DriOff();
                            26037 
P:0027 60F400 rrrrrr  3   7826040         move    #FStfmTuneData+34,r0
P:0029 0A7041 rrrrrr  6   8426022         bclr    #1,y:Fg_wFMTunerError
P:002B 51F400 FFFFFF  3   8726032         move    #-1,b0
P:002D 0A7062 rrrrrr  6   9326027         bset    #2,y:Fg_wFMTunerError
P:002F 59701B rrrrrr  3   9626039         clr     b	                b0,y:Fs_iFMTunerSearchStatus
P:0031 44F413 00005C  3   9926041         clr     a	                #>92,x0
P:0033 000008         2  10126042         inc     a
P:0034 0BF080 rrrrrr  6  10726044         jsr     FSTFM1000WriteRegister
                            26045 
                            26046 ; 2309 |
                            26047 ; 2310 |    //STFM1000DataPathOff();
                            26048 ; 2311 |        if (s_wCurrentFMFrequency > FM_BAND_LIMIT_LOW_FREQ)
                            26049 
P:0036 5FF000 rrrrrr  3  11026051         move    y:Fs_wCurrentFMFrequency,b
P:0038 46F400 0155CC  3  11326052         move    #87500,y0
P:003A 2B0000         2  11526053         move    #0,b2
P:003B 20005D         2  11726054         cmp     y0,b
P:003C 0AF0AF rrrrrr  6  12326055         jle     L250
                            26056 
                            26057 ; 2312 |        {
                            26058 ; 2313 |                STFM1000QuickTune((s_wCurrentFMFrequency -= FM_FREQ_STEP));
                            26059 
                            26064 
                            26065 ; 2314 |        }
                            26066 ; 2315 |        else
                            26067 ; 2316 |    {
                            26068 ; 2317 |                STFM1000QuickTune(s_wCurrentFMFrequency);
                            26069 
P:003E 46F400 000064  3  12626061         move    #>100,y0
P:0040 20005C         2  12826062         sub     y0,b
P:0041 5D7000 rrrrrr  3  13126063         move    b1,y:Fs_wCurrentFMFrequency
P:0043 5EF000 rrrrrr  3  13426071 L250:   move    y:Fs_wCurrentFMFrequency,a
P:0045 0BF080 rrrrrr  6  14026072         jsr     FSTFM1000QuickTune
                            26073 
                            26074 ; 2318 |    }
                            26075 ; 2319 |
                            26076 ; 2320 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            26077 ; 2321 |    s_wDisplayFMFrequency = s_wCurrentFMFrequency;
                            26078 ; 2322 |#endif
                            26079 ; 2323 |    return E_TUNER_BUSY;
                            26080 
                            26083 
                            26084 ; 2324 |
                            26085 ; 2325 |}
                            26086 
P:0047 56F400 FFFFFC  3  14326082         move    #>-4,a
                            26088 L252:
P:0049 05FF7C         4  14726088         movec   y:-(r7),ssh
P:004A 000000         2  14926088         nop             ; (inserted)
P:004B 00000C         4  15326092         rts
                            26094 
                            26095 ; 2326 |#ifdef FUNCLET
                            26096 ; 2327 |    #pragma asm
P:003E                      26097         org p,".ptextstfm1000":
                            26098 ; 2329 |    #pragma endasm
                            26099 ; 2330 |#endif
                            26100 ; 2331 |
                            26101 ; 2332 |
                            26102 ; 2333 |
                            26103 ; 2334 |
                            26104 ; 2335 |#ifdef DEBUG_MONITOR_SIGNAL_QUALITY
                            26105 ; 2336 |void LogDebugFunction(WORD wFunctionIndex)
                            26106 ; 2337 |{
                            26107 ; 2338 |#if 0
                            26108 ; 2339 |
                            26109 ; 2340 |            wMonitorQualityIndex %= STFM1000_MONITOR_SIGNAL_LOG_MAX;
                            26110 ; 2341 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].stLogFirstWord.wIsPolitPreset = StfmTuneData.sd_ctl_PilotPresent_b;
                            26111 ; 2342 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].stLogFirstWord.wMonitorQualityCurrentState = s_eMonitorSignalQualityState;
                            26112 ; 2343 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].stLogFirstWord.wOptimizedChannelCurrentState = s_eOptimizeChannelState;
                            26113 ; 2344 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].stLogFirstWord.wFunctionIndex = wFunctionIndex;
                            26114 ; 2345 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].stLogFirstWord.wWeakSignal = bIsWeakSignal;
                            26115 ; 2346 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].wAgcOut = s_wAgcOut;
                            26116 ; 2347 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].wLnaRms = s_wLnaRms;
                            26117 ; 2348 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].wLnaTh = s_wTrackTableIndex;//s_wLnaTh;
                            26118 ; 2349 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].wRssiValue = s_iFMSignalStrengthRSSI;
                            26119 ; 2350 |            wMonitorQualityIndex++;
                            26120 ; 2351 |#else
                            26121 ; 2352 |
                            26122 ; 2353 |            wMonitorQualityIndex %= STFM1000_MONITOR_SIGNAL_LOG_MAX;
                            26123 ; 2354 |
                            26124 ; 2355 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].wRssiValue = s_iFMSignalStrengthRSSI;
                            26125 ; 2356 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].wMpxAdc = s_wMpxAdc;
                            26126 ; 2357 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].bIsStation = StfmTuneData.sd_ctl_ShadowTune1_dw;//s_wLnaTh;
                            26127 ; 2358 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].wFreq = s_wCurrentFMFrequency;//s_wLnaTh;
                            26128 ; 2359 |            stSTFM100MonitorQualityLogArrary[wMonitorQualityIndex].wModulo = StfmTuneData.sd_ctl_ShadowSdnominal_dw;
                            26129 ; 2360 |            wMonitorQualityIndex++;
                            26130 ; 2361 |#endif
                            26131 ; 2362 |
                            26132 ; 2363 |}
                            26133 ; 2364 |#endif
                            26134 ; 2365 |
                            26135 ; 2366 |
                            26136 ; 2367 |// ****************************************
                            26137 ; 2368 |//! OPTIMIZE CHANNEL
                            26138 ; 2369 |// ****************************************
                            26139 ; 2370 |#ifdef FUNCLET
                            26140 ; 2371 |    #pragma asm
P:0010                      26141         org p,".stfm1000_SYS":
                            26142         FSTFM1000OptimizeChannel:
                            26143 
                            26148 
                            26149         ;If using funclet, function will be executed via funclet kernel
                            26150         CallFunclet2 RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL
P:0010 0D0082         4   3626150     jsr       $82
P:0011 000425               26150     DC       RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL  ; 1 word
                            26151 
P:0000                      26152         org p,"SYSFUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL_P":
P:0000 000425               26153         dc      RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL
                            26154 ; 2385 |    #pragma endasm
                            26155 ; 2386 |_reentrant INT STFM1000OptimizeChannel_Funclet(void)
                            26156 ; 2387 |#else
                            26157 ; 2388 |_reentrant INT STFM1000OptimizeChannel(void)
                            26158 ; 2389 |#endif
                            26159 ; 2390 |{
                            26160 
                            26165 FSTFM1000OptimizeChannel_Funclet:
                            26175 
                            26176 ; 2391 |    INT iRetCode = SUCCESS;
                            26177 
                            26183 
                            26184 ; 2392 |    BOOL bPilotPresent = FALSE;
                            26185 
                            26192 
                            26193 ; 2393 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            26194 
                            26199 
                            26200 ; 2394 |
                            26201 ; 2395 |    switch(s_eOptimizeChannelState)
                            26202 
P:0001 055F7C         2    226166         movec   ssh,y:(r7)+
P:0002 3F0513         2    426180         clr     a	                #5,n7
P:0003 64F400 rrrrrr  3    726196         move    #FStfmTuneData,r4
P:0005 229600         2    926197         move    r4,r6
P:0006 270000         2   1126179         move    #0,y1
P:0007 204F00         2   1326171         move    (r7)+n7
P:0008 77F400 FFFFFD  3   1626187         move    #-3,n7
P:000A 000000         2   1826187         nop             ; (inserted)
P:000B 4F6F00         4   2226189         move    y1,y:(r7+n7)
P:000C 5FF000 rrrrrr  3   2526204         move    y:Fs_eOptimizeChannelState,b
P:000E 65F40B rrrrrr  3   2826205         tst     b       #L314,r5
P:0010 0AF0AB rrrrrr  6   3426206         jmi     L313
P:0012 46F400 000003  3   3726207         move    #>3,y0
P:0014 21FD5D         2   3926208         cmp     y0,b    b,n5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0015 0AF0A7 rrrrrr  6   4526209         jgt     L313
P:0017 07ED95         8   5326210         movem   p:(r5+n5),r5
P:0018 000000         2   5526210         nop             ; (inserted)
P:0019 0AE580         4   5926212         jmp     (r5)
                            26213 
P:001A rrrrrr               26214 L314:   dc      L309    ; case 0:
P:001B rrrrrr               26215         dc      L297    ; case 1:
P:001C rrrrrr               26216         dc      L299    ; case 2:
P:001D rrrrrr               26217         dc      L302    ; case 3:
                            26218 
                            26219 
                            26220 ; 2396 |    {
                            26221 ; 2397 |        case OPTIMIZE_CHANNEL_STATE_START:
                            26222 ; 2398 |            iRetCode = STFM1000OptimizeChannelStart();
                            26223 ; 2399 |            break;
                            26224 ; 2400 |        case OPTIMIZE_CHANNEL_STATE_PROCESSING_1:
                            26225 
                            26227 L297:
                            26232 
                            26233 ; 2401 |            STFM1000GetNearChannelOffset();
                            26234 
P:001E 77F413 FFFFFE  3   6226243         clr     a	                #-2,n7
P:0020 57F400 000068  3   6526242         move    #>104,b
P:0022 287F00         2   6726244         move    #$7F,a0
P:0023 6E6F00         4   7126229         move    r6,y:(r7+n7)
P:0024 045FA0         2   7326236         movec   m0,n7
P:0025 000000         2   7526236         nop             ; (inserted)
P:0026 6C6F00         4   7926238         move    r4,y:(r7+n7)
P:0027 77F400 FFFFFB  3   8226239         move    #-5,n7
P:0029 000000         2   8426239         nop             ; (inserted)
P:002A 044F10         4   8826241         lua     (r7)+n7,r0
P:002B 0BF080 rrrrrr  6   9426245         jsr     FSTFM1000ReadSubRegister
                            26260 
                            26261 ; 2402 |            if ( pDrst->sd_ctl_ShadowSignalQuality_w < pDrst->sd_ctl_AdjChanTh_w)
                            26262 
P:002D 3D3800         2   9626254         move    #$38,n5
P:002E 3E2600         2   9826271         move    #38,n6
P:002F 77F400 FFFFFB  3  10126247         move    #-5,n7
P:0031 205F00         2  10326248         move    (r7)+
P:0032 5FEF00         4  10726250         move    y:(r7+n7),b
P:0033 205700         2  10926251         move    (r7)-
P:0034 59EF00         4  11326253         move    y:(r7+n7),b0
P:0035 045FA0         2  11526255         movec   m0,n7
P:0036 000000         2  11726255         nop             ; (inserted)
P:0037 6DEF00         4  12126257         move    y:(r7+n7),r5
P:0038 77F400 FFFFFE  3  12426264         move    #-2,n7
P:003A 596D00         4  12826259         move    b0,y:(r5+n5)
P:003B 6DEF00         4  13226266         move    y:(r7+n7),r5
P:003C 22B600         2  13426272         move    r5,r6
P:003D 5FED00         4  13826268         move    y:(r5+n5),b
P:003E 5EEE00         4  14226274         move    y:(r6+n6),a
P:003F 2B0000         2  14426278         move    #0,b2
P:0040 2A0000         2  14626277         move    #0,a2
P:0041 20000D         2  14826279         cmp     a,b
P:0042 0AF0A1 rrrrrr  6  15426280         jge     L298
                            26281 
                            26282 ; 2403 |            {
                            26283 ; 2404 |                iRetCode = STFM1000SetNearChannelOffset(5);
                            26284 
P:0044 380A1B         2  15626292         clr     b	                #10,n0
P:0045 60F400 rrrrrr  3  15926286         move    #FStfmTuneData,r0
P:0047 56F400 00001C  3  16226290         move    #>$1C,a
P:0049 44F400 000018  3  16526291         move    #>24,x0
P:004B 290500         2  16726293         move    #5,b0
P:004C 204800         2  16926289         move    (r0)+n0
P:004D 0BF080 rrrrrr  6  17526294         jsr     FSTFM1000WriteRegister
                            26296 
                            26297 ; 2405 |
                            26298 ; 2406 |                g_iTunerProcessIntervalMs = 10;
                            26299 
                            26303 
                            26304 ; 2407 |                s_eOptimizeChannelState = OPTIMIZE_CHANNEL_STATE_PROCESSING_2;
                            26305 
                            26309 
                            26310 ; 2408 |                iRetCode = E_TUNER_BUSY;
                            26311 
P:004F 57F400 000002  3  17826307         move    #>2,b
P:0051 45F400 00000A  3  18126301         move    #>10,x1
P:0053 5F7000 rrrrrr  3  18426308         move    b,y:Fs_eOptimizeChannelState
P:0055 457000 rrrrrr  3  18726302         move    x1,x:Fg_iTunerProcessIntervalMs
P:0057 0AF080 rrrrrr  6  19326313         jmp     L308
                            26314 
                            26315 ; 2409 |            }
                            26316 ; 2410 |            else
                            26317 ; 2411 |            {
                            26318 ; 2412 |                iRetCode = STFM1000SetNearChannelFilter(0);
                            26319 
                            26321 L298:
P:0059 380613         2  19526325         clr     a	                #6,n0
P:005A 60F400 rrrrrr  3  19826321         move    #FStfmTuneData,r0
P:005C 44F400 000010  3  20126327         move    #>16,x0
P:005E 280C1B         2  20326328         clr     b	                #12,a0
P:005F 204800         2  20526324         move    (r0)+n0
P:0060 0BF080 rrrrrr  6  21126329         jsr     FSTFM1000WriteRegister
                            26330 
                            26331 ; 2413 |                iRetCode = STFM1000LookForPilot(&bPilotPresent);
                            26332 
P:0062 77F400 FFFFFD  3  21426334         move    #-3,n7
P:0064 000000         2  21626334         nop             ; (inserted)
P:0065 044F10         4  22026336         lua     (r7)+n7,r0
P:0066 0BF080 rrrrrr  6  22626337         jsr     FSTFM1000LookForPilot
                            26338 
                            26339 ; 2414 |                if(bPilotPresent)
                            26340 
P:0068 77F400 FFFFFD  3  22926342         move    #-3,n7
P:006A 000000         2  23126342         nop             ; (inserted)
P:006B 5FEF00         4  23526344         move    y:(r7+n7),b
P:006C 2B0000         2  23726345         move    #0,b2
P:006D 20000B         2  23926346         tst     b
P:006E 0AF0AA rrrrrr  6  24526347         jeq     L304
                            26348 
                            26349 ; 2415 |                {
                            26350 ; 2416 |                    s_wTrackTableIndex = 0;
                            26351 
                            26355 
                            26356 ; 2417 |
                            26357 ; 2418 |                    iRetCode = STFM1000GearShiftPtGear(STFM1000TrackTable[s_wTrackTableIndex].dw_bits);
                            26358 
P:0070 2E0000         2  24726353         move    #0,a
P:0071 5C7000 rrrrrr  3  25026354         move    a1,y:Fs_wTrackTableIndex
P:0073 5FF000 rrrrrr  3  25326360         move    y:FSTFM1000TrackTable+3,b
P:0075 59F000 rrrrrr  3  25626361         move    y:FSTFM1000TrackTable+2,b0
P:0077 0AF080 rrrrrr  6  26226362         jmp     L306
                            26363 
                            26364 ; 2419 |
                            26365 ; 2420 |                    g_iTunerProcessIntervalMs = STFM1000TrackTable[s_wTrackTableIndex].dw_msec_delay;
                            26366 ; 2421 |                    s_eOptimizeChannelState = OPTIMIZE_CHANNEL_STATE_PROCESSING_3;
                            26367 ; 2422 |                    iRetCode =  E_TUNER_BUSY;
                            26368 ; 2423 |                }
                            26369 ; 2424 |                else
                            26370 ; 2425 |                {
                            26371 ; 2426 |                    iRetCode = STFM1000OptimizeChannelEnd();
                            26372 ; 2427 |                }
                            26373 ; 2428 |
                            26374 ; 2429 |            }
                            26375 ; 2430 |            break;
                            26376 ; 2431 |       case OPTIMIZE_CHANNEL_STATE_PROCESSING_2:
                            26377 
                            26379 L299:
                            26386 
                            26387 ; 2432 |            STFM1000GetNearChannelOffset();
                            26388 
P:0079 77F413 FFFFFE  3  26526396         clr     a	                #-2,n7
P:007B 57F400 000068  3  26826398         move    #>104,b
P:007D 287F00         2  27026397         move    #$7F,a0
P:007E 6E6F00         4  27426383         move    r6,y:(r7+n7)
P:007F 045FA0         2  27626390         movec   m0,n7
P:0080 000000         2  27826390         nop             ; (inserted)
P:0081 6C6F00         4  28226392         move    r4,y:(r7+n7)
P:0082 77F400 FFFFFB  3  28526393         move    #-5,n7
P:0084 000000         2  28726393         nop             ; (inserted)
P:0085 044F10         4  29126395         lua     (r7)+n7,r0
P:0086 0BF080 rrrrrr  6  29726399         jsr     FSTFM1000ReadSubRegister
                            26413 
                            26414 ; 2433 |
                            26415 ; 2434 |            if ( pDrst->sd_ctl_ShadowSignalQuality_w < pDrst->sd_ctl_AdjChanTh_w)
                            26416 
P:0088 3D3800         2  29926407         move    #$38,n5
P:0089 3E2600         2  30126425         move    #38,n6
P:008A 77F400 FFFFFB  3  30426400         move    #-5,n7
P:008C 205F00         2  30626401         move    (r7)+
P:008D 5FEF00         4  31026403         move    y:(r7+n7),b
P:008E 205700         2  31226404         move    (r7)-
P:008F 59EF00         4  31626406         move    y:(r7+n7),b0
P:0090 045FA0         2  31826408         movec   m0,n7
P:0091 000000         2  32026408         nop             ; (inserted)
P:0092 6DEF00         4  32426410         move    y:(r7+n7),r5
P:0093 77F400 FFFFFE  3  32726418         move    #-2,n7
P:0095 596D00         4  33126412         move    b0,y:(r5+n5)
P:0096 6DEF00         4  33526420         move    y:(r7+n7),r5
P:0097 22B600         2  33726426         move    r5,r6
P:0098 5FED00         4  34126422         move    y:(r5+n5),b
P:0099 5EEE00         4  34526428         move    y:(r6+n6),a
P:009A 2B0000         2  34726432         move    #0,b2
P:009B 2A0000         2  34926431         move    #0,a2
P:009C 20000D         2  35126433         cmp     a,b
P:009D 0AF0A1 rrrrrr  6  35726434         jge     L300
                            26435 
                            26436 ; 2435 |            {
                            26437 ; 2436 |                iRetCode = STFM1000SetNearChannelFilter(2);
                            26438 
                            26446 
                            26447 ; 2437 |            }
                            26448 
P:009F 38061B         2  35926444         clr     b	                #6,n0
P:00A0 60F400 rrrrrr  3  36226440         move    #FStfmTuneData,r0
P:00A2 290200         2  36426445         move    #2,b0
P:00A3 204800         2  36626443         move    (r0)+n0
P:00A4 0AF080 rrrrrr  6  37226450         jmp     L301
                            26451 
                            26452 ; 2438 |            else
                            26453 ; 2439 |            {
                            26454 ; 2440 |                iRetCode = STFM1000SetNearChannelFilter(0);
                            26455 
                            26457 L300:
                            26462 
                            26463 ; 2441 |            }
                            26464 
P:00A6 38061B         2  37426461         clr     b	                #6,n0
P:00A7 60F400 rrrrrr  3  37726457         move    #FStfmTuneData,r0
P:00A9 000000         2  37926457         nop             ; (inserted)
P:00AA 204800         2  38126460         move    (r0)+n0
                            26466 L301:
P:00AB 44F413 000010  3  38426468         clr     a	                #>16,x0
P:00AD 280C00         2  38626469         move    #12,a0
P:00AE 0BF080 rrrrrr  6  39226471         jsr     FSTFM1000WriteRegister
                            26472 
                            26473 ; 2442 |
                            26474 ; 2443 |            iRetCode = STFM1000LookForPilot(&bPilotPresent);
                            26475 
P:00B0 77F400 FFFFFD  3  39526477         move    #-3,n7
P:00B2 000000         2  39726477         nop             ; (inserted)
P:00B3 044F10         4  40126479         lua     (r7)+n7,r0
P:00B4 0BF080 rrrrrr  6  40726480         jsr     FSTFM1000LookForPilot
                            26481 
                            26482 ; 2444 |            if(bPilotPresent)
                            26483 
P:00B6 77F400 FFFFFD  3  41026485         move    #-3,n7
P:00B8 000000         2  41226485         nop             ; (inserted)
P:00B9 5FEF00         4  41626487         move    y:(r7+n7),b
P:00BA 2B0000         2  41826488         move    #0,b2
P:00BB 20000B         2  42026489         tst     b
P:00BC 0AF0AA rrrrrr  6  42626490         jeq     L304
                            26491 
                            26492 ; 2445 |            {
                            26493 ; 2446 |                s_wTrackTableIndex = 0;
                            26494 ; 2447 |                iRetCode = STFM1000GearShiftPtGear(STFM1000TrackTable[s_wTrackTableIndex].dw_bits);
                            26495 ; 2448 |
                            26496 ; 2449 |                g_iTunerProcessIntervalMs = STFM1000TrackTable[s_wTrackTableIndex].dw_msec_delay;
                            26497 
P:00BE 0AF080 rrrrrr  6  43226499         jmp     L305
                            26500 
                            26501 ; 2450 |                s_eOptimizeChannelState = OPTIMIZE_CHANNEL_STATE_PROCESSING_3;
                            26502 ; 2451 |                iRetCode =  E_TUNER_BUSY;
                            26503 ; 2452 |            }
                            26504 ; 2453 |            else
                            26505 ; 2454 |            {
                            26506 ; 2455 |                iRetCode = STFM1000OptimizeChannelEnd();
                            26507 ; 2456 |            }
                            26508 ; 2457 |            break;
                            26509 ; 2458 |        case OPTIMIZE_CHANNEL_STATE_PROCESSING_3:
                            26510 ; 2459 |            s_wTrackTableIndex++;
                            26511 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                            26513 L302:
                            26519 
                            26520 ; 2460 |            if ( /*(0 != STFM1000TrackTable[s_wTrackTableIndex].dw_msec_delay)
                            26521 ; 2461 |                 || */(0 != STFM1000TrackTable[s_wTrackTableIndex].dw_bits) )
                            26522 
P:00C0 5FF000 rrrrrr  3  43526515         move    y:Fs_wTrackTableIndex,b
P:00C2 46F400 000001  3  43826516         move    #>1,y0
P:00C4 66F458 rrrrrr  3  44126517         add     y0,b	                #FSTFM1000TrackTable+2,r6
P:00C6 5D703B rrrrrr  3  44426524         lsl     b	                b1,y:Fs_wTrackTableIndex
P:00C8 20003B         2  44626525         lsl     b
P:00C9 21BE00         2  44826526         move    b1,n6
P:00CA 000000         2  45026526         nop             ; (inserted)
P:00CB 204E00         2  45226529         move    (r6)+n6
P:00CC 205E00         2  45426530         move    (r6)+
P:00CD 5FD600         2  45626531         move    y:(r6)-,b
P:00CE 2B0000         2  45826533         move    #0,b2
P:00CF 59E600         2  46026532         move    y:(r6),b0
P:00D0 20000B         2  46226534         tst     b
P:00D1 0AF0AA rrrrrr  6  46826535         jeq     L313
                            26536 
                            26537 ; 2462 |            {
                            26538 ; 2463 |                iRetCode = STFM1000GearShiftPtGear(STFM1000TrackTable[s_wTrackTableIndex].dw_bits);
                            26539 
P:00D3 60F400 rrrrrr  3  47126541         move    #FStfmTuneData+4,r0
P:00D5 44F413 000008  3  47426542         clr     a	                #>8,x0
P:00D7 50F400 00FFFF  3  47726543         move    #$FFFF,a0
P:00D9 0BF080 rrrrrr  6  48326545         jsr     FSTFM1000WriteRegister
                            26547 
                            26548 ; 2464 |
                            26549 ; 2465 |                if(STFM1000TrackTable[s_wTrackTableIndex].dw_msec_delay == 0)
                            26550 
P:00DB 66F400 rrrrrr  3  48626555         move    #FSTFM1000TrackTable,r6
P:00DD 4EF000 rrrrrr  3  48926552         move    y:Fs_wTrackTableIndex,y0
P:00DF 0116E8         2  49126553         mpy     y0,#22,b
P:00E0 213E00         2  49326554         move    b0,n6
P:00E1 000000         2  49526554         nop             ; (inserted)
P:00E2 204E00         2  49726557         move    (r6)+n6
P:00E3 205E00         2  49926558         move    (r6)+
P:00E4 5ED600         2  50126559         move    y:(r6)-,a
P:00E5 2A0000         2  50326561         move    #0,a2
P:00E6 58E600         2  50526560         move    y:(r6),a0
P:00E7 200003         2  50726562         tst     a
P:00E8 0AF0A2 rrrrrr  6  51326563         jne     L307
                            26564 
                            26565 ; 2466 |                {
                            26566 ; 2467 |                   iRetCode = STFM1000OptimizeChannelEnd();
                            26567 
P:00EA 0BF080 rrrrrr  6  51926569 L304:   jsr     FSTFM1000OptimizeChannelEnd
                            26571 
                            26572 ; 2468 |                }
                            26573 
P:00EC 0AF080 rrrrrr  6  52526575         jmp     L313
                            26577 L305:
P:00EE 270000         2  52726577         move    #0,y1
P:00EF 4F7000 rrrrrr  3  53026578         move    y1,y:Fs_wTrackTableIndex
P:00F1 5FF000 rrrrrr  3  53326580         move    y:FSTFM1000TrackTable+3,b
P:00F3 59F000 rrrrrr  3  53626581         move    y:FSTFM1000TrackTable+2,b0
                            26582 L306:
P:00F5 60F400 rrrrrr  3  53926584         move    #FStfmTuneData+4,r0
P:00F7 44F413 000008  3  54226582         clr     a	                #>8,x0
P:00F9 50F400 00FFFF  3  54526583         move    #$FFFF,a0
P:00FB 0BF080 rrrrrr  6  55126586         jsr     FSTFM1000WriteRegister
                            26588 
                            26589 ; 2469 |                else
                            26590 ; 2470 |                {
                            26591 ; 2471 |                    g_iTunerProcessIntervalMs = STFM1000TrackTable[s_wTrackTableIndex].dw_msec_delay;
                            26592 
                            26594 L307:
                            26603 
                            26604 ; 2472 |                    s_eOptimizeChannelState = OPTIMIZE_CHANNEL_STATE_PROCESSING_3;
                            26605 
                            26609 
                            26610 ; 2473 |                    iRetCode =  E_TUNER_BUSY;
                            26611 
P:00FD 66F400 rrrrrr  3  55426597         move    #FSTFM1000TrackTable,r6
P:00FF 4EF000 rrrrrr  3  55726594         move    y:Fs_wTrackTableIndex,y0
P:0101 0116E8         2  55926595         mpy     y0,#22,b
P:0102 213E00         2  56126596         move    b0,n6
P:0103 57F400 000003  3  56426607         move    #>3,b
P:0105 204E00         2  56626599         move    (r6)+n6
P:0106 4CDE00         2  56826600         move    y:(r6)+,x0
P:0107 4DD600         2  57026601         move    y:(r6)-,x1
P:0108 447000 rrrrrr  3  57326602         move    x0,x:Fg_iTunerProcessIntervalMs
P:010A 5F7000 rrrrrr  3  57626608         move    b,y:Fs_eOptimizeChannelState
                            26613 L308:
                            26615 
                            26616 ; 2474 |                }
                            26617 ; 2475 |            }
                            26618 ; 2476 |            break;
                            26619 
P:010C 56F400 FFFFFC  3  57926613         move    #>-4,a
P:010E 0AF080 rrrrrr  6  58526621         jmp     L313
P:0110 0BF080 rrrrrr  6  59126623 L309:   jsr     FSTFM1000OptimizeChannelStart
                            26624 
                            26625 ; 2477 |        default:
                            26626 ; 2478 |            break;
                            26627 ; 2479 |     }
                            26628 
                            26630 L313:
                            26631 
                            26632 ; 2480 |    return iRetCode;
                            26633 ; 2481 |}
                            26634 
P:0112 77F400 FFFFFA  3  59426636         move    #-6,n7
P:0114 000000         2  59626636         nop             ; (inserted)
P:0115 05EF7C         4  60026638         movec   y:(r7+n7),ssh
P:0116 204F00         2  60226640         move    (r7)+n7
P:0117 00000C         4  60626642         rts
                            26645 
                            26646 ; 2482 |_reentrant INT STFM1000OptimizeChannelStart(void)
                            26647 ; 2483 |{
                            26648 
                            26653 FSTFM1000OptimizeChannelStart:
                            26661 
                            26662 ; 2484 |    INT RetCode = SUCCESS;
                            26663 ; 2485 |    BOOL bPilotPresent = FALSE;
                            26664 ; 2486 |
                            26665 ; 2487 |    RetCode = STFM1000WriteRegister(
                            26666 ; 2488 |        DATAPATH_REG_ADDR,
                            26667 ; 2489 |        DB_ACCEPT_REG_MASK,
                            26668 ; 2490 |        &StfmTuneData.sd_ctl_ShadowDataPath_dw,
                            26669 ; 2491 |        1);
                            26670 
P:0118 055F7C         2  60826654         movec   ssh,y:(r7)+
P:0119 44F41B 00005C  3  61126672         clr     b	                #>92,x0
P:011B 000009         2  61326673         inc     b
P:011C 60F413 rrrrrr  3  61626675         clr     a	                #FStfmTuneData+34,r0
P:011E 50F400 010000  3  61926676         move    #$10000,a0
P:0120 0BF080 rrrrrr  6  62526678         jsr     FSTFM1000WriteRegister
                            26681 
                            26682 ; 2492 |
                            26683 ; 2493 |    if (SUCCESS != RetCode)
                            26684 
P:0122 21C603         2  62726686         tst     a	                a,y0
P:0123 0AF0A2 rrrrrr  6  63326687         jne     L323
                            26688 
                            26689 ; 2494 |    {
                            26690 ; 2495 |        //SystemHalt();
                            26691 ; 2496 |        return RetCode;
                            26692 ; 2497 |    }
                            26693 ; 2498 |
                            26694 ; 2499 |    RetCode = STFM1000WriteRegister(
                            26695 ; 2500 |        PILOTTRACKING_REG_ADDR,
                            26696 ; 2501 |        WHOLEREG_MASK,
                            26697 ; 2502 |        &StfmTuneData.sd_ctl_ShadowPilotTracking_dw,
                            26698 ; 2503 |        0x81B6);
                            26699 
P:0125 60F400 rrrrrr  3  63626706         move    #FStfmTuneData+4,r0
P:0127 56F41B 0000FF  3  63926703         clr     b	                #>$FF,a
P:0129 44F400 000008  3  64226705         move    #>8,x0
P:012B 50F400 FFFFFF  3  64526702         move    #$FFFFFF,a0
P:012D 51F400 0081B6  3  64826704         move    #33206,b0
P:012F 0BF080 rrrrrr  6  65426707         jsr     FSTFM1000WriteRegister
                            26711 
                            26712 ; 2504 |
                            26713 ; 2505 |    if (SUCCESS != RetCode)
                            26714 
P:0131 21C603         2  65626716         tst     a	                a,y0
P:0132 0AF0AA rrrrrr  6  66226717         jeq     L324
                            26718 
                            26719 ; 2506 |    {
                            26720 ; 2507 |        //SystemHalt();
                            26721 ; 2508 |        return RetCode;
                            26722 
                            26724 L323:
P:0134 20CE00         2  66426724         move    y0,a
P:0135 0AF080 rrrrrr  6  67026727         jmp     L325
                            26728 
                            26729 ; 2509 |    }
                            26730 ; 2510 |
                            26731 ; 2511 |    // call SetChannelFilter
                            26732 ; 2512 |    STFM1000SetNearChannelOffset(1);
                            26733 
                            26735 L324:
P:0137 380A1B         2  67226741         clr     b	                #10,n0
P:0138 60F400 rrrrrr  3  67526735         move    #FStfmTuneData,r0
P:013A 56F400 00001C  3  67826740         move    #>$1C,a
P:013C 44F400 000018  3  68126739         move    #>24,x0
P:013E 000009         2  68326742         inc     b
P:013F 204800         2  68526738         move    (r0)+n0
P:0140 0BF080 rrrrrr  6  69126743         jsr     FSTFM1000WriteRegister
                            26745 
                            26746 ; 2513 |    g_iTunerProcessIntervalMs = 10;
                            26747 
                            26751 
                            26752 ; 2514 |    s_eOptimizeChannelState = OPTIMIZE_CHANNEL_STATE_PROCESSING_1;
                            26753 
                            26757 
                            26758 ; 2515 |    return E_TUNER_BUSY;
                            26759 
                            26762 
                            26763 ; 2516 |}
                            26764 
P:0142 57F400 000001  3  69426755         move    #>1,b
P:0144 56F400 FFFFFC  3  69726761         move    #>-4,a
P:0146 45F400 00000A  3  70026749         move    #>10,x1
P:0148 5F7000 rrrrrr  3  70326756         move    b,y:Fs_eOptimizeChannelState
P:014A 457000 rrrrrr  3  70626750         move    x1,x:Fg_iTunerProcessIntervalMs
                            26766 L325:
P:014C 05FF7C         4  71026766         movec   y:-(r7),ssh
P:014D 000000         2  71226766         nop             ; (inserted)
P:014E 00000C         4  71626770         rts
                            26772 
                            26773 ; 2517 |_reentrant INT STFM1000OptimizeChannelEnd(void)
                            26774 ; 2518 |{
                            26775 
                            26780 FSTFM1000OptimizeChannelEnd:
                            26788 
                            26789 ; 2519 |    INT RetCode = SUCCESS;
                            26790 ; 2520 |
                            26791 ; 2521 |    RetCode = STFM1000WriteRegister(
                            26792 ; 2522 |        DATAPATH_REG_ADDR,
                            26793 ; 2523 |        DB_ACCEPT_REG_MASK,
                            26794 ; 2524 |        &StfmTuneData.sd_ctl_ShadowDataPath_dw,
                            26795 ; 2525 |        0);
                            26796 
P:014F 055F7C         2  71826781         movec   ssh,y:(r7)+
P:0150 60F400 rrrrrr  3  72126802         move    #FStfmTuneData+34,r0
P:0152 205F1B         2  72326799         clr     b	                (r7)+
P:0153 44F413 00005C  3  72626800         clr     a	                #>92,x0
P:0155 50F400 010000  3  72926801         move    #$10000,a0
P:0157 0BF080 rrrrrr  6  73526803         jsr     FSTFM1000WriteRegister
                            26808 
                            26809 ; 2526 |
                            26810 ; 2527 |    if (SUCCESS != RetCode)
                            26811 
P:0159 045FA0         2  73726804         movec   m0,n7
P:015A 200003         2  73926813         tst     a
P:015B 5E6F00         4  74326806         move    a,y:(r7+n7)
P:015C 0AF0A2 rrrrrr  6  74926814         jne     L339
                            26815 
                            26816 ; 2528 |    {
                            26817 ; 2529 |        //SystemHalt();
                            26818 ; 2530 |        return RetCode;
                            26819 ; 2531 |    }
                            26820 ; 2532 |    s_eOptimizeChannelState = OPTIMIZE_CHANNEL_STATE_COMPLETE;
                            26821 
                            26825 
                            26826 ; 2533 |    RetCode = STFM1000DriOn();
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                            26827 
P:015E 60F400 rrrrrr  3  75226829         move    #FStfmTuneData,r0
P:0160 44F41B 000004  3  75526833         clr     b	                #>4,x0
P:0162 000009         2  75726834         inc     b
P:0163 382213         2  75926835         clr     a	                #34,n0
P:0164 4C7000 rrrrrr  3  76226824         move    x0,y:Fs_eOptimizeChannelState
P:0166 000008         2  76426836         inc     a
P:0167 204800         2  76626832         move    (r0)+n0
P:0168 44F400 00005C  3  76926837         move    #>92,x0
P:016A 0BF080 rrrrrr  6  77526838         jsr     FSTFM1000WriteRegister
                            26842 
                            26843 ; 2534 |    if (SUCCESS != RetCode)
                            26844 
P:016C 045FA0         2  77726839         movec   m0,n7
P:016D 200003         2  77926846         tst     a
P:016E 5E6F00         4  78326841         move    a,y:(r7+n7)
P:016F 0AF0A2 rrrrrr  6  78926847         jne     L339
                            26848 
                            26849 ; 2535 |    {
                            26850 ; 2536 |        //SystemHalt();
                            26851 ; 2537 |        return RetCode;
                            26852 ; 2538 |    }
                            26853 ; 2539 |    SysPostMessage(2,MENU_TUNER_TUNED);
                            26854 
P:0171 290200         2  79126859         move    #2,b0
P:0172 47F400 06000A  3  79426856         move    #393226,y1
P:0174 4F5F00         2  79626857         move    y1,y:(r7)+
P:0175 595F00         2  79826860         move    b0,y:(r7)+
P:0176 0BF080 rrrrrr  6  80426862         jsr     FSysPostMessage
                            26867 
                            26868 ; 2540 |    //g_wFMTunerError.m_bTUNER_BUSY = FALSE;
                            26869 ; 2541 |
                            26870 ; 2542 |    return RetCode;
                            26871 
P:0178 205700         2  80626863         move    (r7)-
P:0179 205700         2  80826865         move    (r7)-
                            26873 L339:
                            26878 
                            26879 ; 2543 |}
                            26880 
P:017A 045FA0         2  81026873         movec   m0,n7
P:017B 000000         2  81226873         nop             ; (inserted)
P:017C 5EEF00         4  81626875         move    y:(r7+n7),a
P:017D 204F00         2  81826882         move    (r7)+n7
P:017E 05FF7C         4  82226884         movec   y:-(r7),ssh
P:017F 000000         2  82426884         nop             ; (inserted)
P:0180 00000C         4  82826888         rts
                            26891 
                            26892 ; 2544 |#ifdef FUNCLET
                            26893 ; 2545 |    #pragma asm
P:003E                      26894         org p,".ptextstfm1000":
                            26895 ; 2547 |    #pragma endasm
                            26896 ; 2548 |#endif
                            26897 ; 2549 |
                            26898 ; 2550 |
                            26899 ; 2551 |
                            26900 ; 2552 |
                            26901 ; 2553 |
                            26902 ; 2554 |
                            26903 ; 2555 |////////////////////////////////////////////////////////////////////////////////
                            26904 ; 2556 |//
                            26905 ; 2557 |//>  Name:          TunerDriverScanStations
                            26906 ; 2558 |//
                            26907 ; 2559 |//   Type:          Function
                            26908 ; 2560 |//
                            26909 ; 2561 |//   Description:   Scan thw whole Fm bandwidth to find  NUMBER_OF_PRESETS strongest
                            26910 ; 2562 |//                  stations as preset stations
                            26911 ; 2563 |//
                            26912 ; 2564 |//   Inputs:        none
                            26913 ; 2565 |//
                            26914 ; 2566 |//   Outputs:       Error status
                            26915 ; 2567 |//
                            26916 ; 2568 |//   Notes:         none
                            26917 ; 2569 |//<
                            26918 ; 2570 |////////////////////////////////////////////////////////////////////////////////
                            26919 ; 2571 |#ifdef FUNCLET
                            26920 ; 2572 |    #pragma asm
P:0012                      26921         org p,".stfm1000_SYS":
                            26922         FTunerDriverScanStations:
                            26923 
                            26928 
                            26929         ;If using funclet, function will be executed via funclet kernel
                            26930         CallFunclet2 RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION
P:0012 0D0082         4   4026930     jsr       $82
P:0013 00042B               26930     DC       RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION  ; 1 word
                            26931 
P:0000                      26932         org p,"SYSFUNCLET_TUNER_DRIVER_SCAN_STATION_P":
P:0000 00042B               26933         dc      RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION
                            26934 ; 2586 |    #pragma endasm
                            26935 ; 2587 |_reentrant INT TunerDriverScanStations_Funclet(void)
                            26936 ; 2588 |#else
                            26937 ; 2589 |_reentrant INT TunerDriverScanStations(void)
                            26938 ; 2590 |#endif
                            26939 ; 2591 |{
                            26940 
                            26945 FTunerDriverScanStations_Funclet:
                            26951 
                            26952 ; 2592 |        INT     i;
                            26953 ; 2593 |
                            26954 ; 2594 |/* initialize the preset structure */
                            26955 ; 2595 |        for (i=0; i<NUMBER_OF_PRESETS; i++)
                            26956 
P:0001 055F7C         2    226946         movec   ssh,y:(r7)+
P:0002 62F400 rrrrrr  3    526961         move    #Fg_astPresetStations,r2
P:0004 66F400 rrrrrr  3    826962         move    #Fg_astPresetStations+1,r6
P:0006 26001B         2   1026959         clr     b	                #0,y0
P:0007 45F400 000001  3   1326963         move    #>1,x1
P:0009 060A80 rrrrrr  6   1926964         do      #10,L341
                            26966 
                            26967 ; 2596 |        {
                            26968 ; 2597 |                g_astPresetStations[i].Frequency = 0;
                            26969 
                            26978 
                            26979 ; 2598 |                g_astPresetStations[i].Level = 0;
                            26980 
P:000B 21AE00         2   2126971         move    b1,a
P:000C 200033         2   2326972         lsl     a
P:000D 219A68         2   2526984         add     x1,b	                a1,n2
P:000E 219E00         2   2726974         move    a1,n6
P:000F 044A15         4   3126975         lua     (r2)+n2,r5
P:0010 000000         2   3326975         nop             ; (inserted)
P:0011 4E6500         2   3526977         move    y0,y:(r5)
P:0012 4E6E00         4   3926982         move    y0,y:(r6+n6)
                        (20)26985 L341:
                            26987 
                            26988 ; 2599 |        }
                            26989 ; 2600 |/* set the searching */
                            26990 ; 2601 |// initialize the g_wFMTunerError
                            26991 ; 2602 |    g_wFMTunerError.m_bTUNER_BUSY= TRUE;
                            26992 
                            26995 
                            26996 ; 2603 |        g_wFMTunerError.m_bSEARCHING_UP=FALSE;
                            26997 
                            27000 
                            27001 ; 2604 |        g_wFMTunerError.m_bSEARCHING_DOWN=FALSE;
                            27002 
                            27005 
                            27006 ; 2605 |        g_wFMTunerError.m_bSCANNING_STATION = TRUE;
                            27007 
                            27010 
                            27011 ; 2606 |        g_wFMTunerError.m_bBAND_LIMIT_HIGH_ERROR=FALSE;
                            27012 
                            27015 
                            27016 ; 2607 |        g_wFMTunerError.m_bBAND_LIMIT_LOW_ERROR=FALSE;
                            27017 
                            27020 
                            27021 ; 2608 |        g_wFMTunerError.m_bUNUSED_PRESET=FALSE;
                            27022 
                            27025 
                            27026 ; 2609 |        g_wFMTunerError.m_bPRESET_RANGE_ERROR=FALSE;
                            27027 
                            27030 
                            27031 ; 2610 |    // Avoid to handle any message
                            27032 ; 2611 |        g_wFMTunerError.m_bPOWERED_OFF = TRUE;
                            27033 
                            27036 
                            27037 ; 2612 |    s_iFMPresetCount = 0;
                            27038 
                            27041 
                            27042 ; 2613 |        g_wFMTunerError.m_bSCANNING_STATION = TRUE;
                            27043 
                            27046 
                            27047 ; 2614 |        s_wCurrentFMFrequency = FM_BAND_LIMIT_LOW_FREQ-FM_TUNER_GRID;
                            27048 
                            27052 
                            27053 ; 2615 |    //g_bSearchEndAtBandLimit = TRUE;
                            27054 ; 2616 |    /*******************************************************
                            27055 ; 2617 |     * Using TunerDriverSearchUp function
                            27056 ; 2618 |     * If find a station, update display
                            27057 ; 2619 |     * In the TunerGetStatus function
                            27058 ; 2620 |     * If it scanning, scanning the entire bandwidth
                            27059 ; 2621 |     * If find more than NUMBER_OF_PRESETS,
                            27060 ; 2622 |     * Update the weeker station with the stronger station
                            27061 ; 2623 |     * until search the entire bandwidth
                            27062 ; 2624 |     *******************************************************/
                            27063 ; 2625 |        return TunerDriverSearchUp();
                            27064 
P:0013 0A7060 rrrrrr  6   4526994         bset    #0,y:Fg_wFMTunerError
P:0015 50F400 015568  3   4827050         move    #87400,a0
P:0017 0A7041 rrrrrr  6   5426999         bclr    #1,y:Fg_wFMTunerError
P:0019 0A7042 rrrrrr  6   6027004         bclr    #2,y:Fg_wFMTunerError
P:001B 0A7064 rrrrrr  6   6627009         bset    #4,y:Fg_wFMTunerError
P:001D 0A7048 rrrrrr  6   7227014         bclr    #8,y:Fg_wFMTunerError
P:001F 0A7049 rrrrrr  6   7827019         bclr    #9,y:Fg_wFMTunerError
P:0021 0A704A rrrrrr  6   8427024         bclr    #10,y:Fg_wFMTunerError
P:0023 0A704B rrrrrr  6   9027029         bclr    #11,y:Fg_wFMTunerError
P:0025 0A706E rrrrrr  6   9627035         bset    #14,y:Fg_wFMTunerError
P:0027 4E7000 rrrrrr  3   9927040         move    y0,y:Fs_iFMPresetCount
P:0029 0A7064 rrrrrr  6  10527045         bset    #4,y:Fg_wFMTunerError
P:002B 587000 rrrrrr  3  10827051         move    a0,y:Fs_wCurrentFMFrequency
P:002D 0BF080 rrrrrr  6  11427066         jsr     FTunerDriverSearchUp
                            27068 
                            27069 ; 2626 |}
                            27070 
P:002F 05FF7C         4  11827072         movec   y:-(r7),ssh
P:0030 000000         2  12027072         nop             ; (inserted)
P:0031 00000C         4  12427076         rts
                            27078 
                            27079 ; 2627 |#ifdef FUNCLET
                            27080 ; 2628 |    #pragma asm
P:003E                      27081         org p,".ptextstfm1000":
                            27082 ; 2630 |    #pragma endasm
                            27083 ; 2631 |#endif
                            27084 ; 2632 |
                            27085 ; 2633 |
                            27086 ; 2634 |////////////////////////////////////////////////////////////////////////////////
                            27087 ; 2635 |//
                            27088 ; 2636 |//>  Name:          TunerDriverSetMonoStereoMode
                            27089 ; 2637 |//
                            27090 ; 2638 |//   Type:          Function
                            27091 ; 2639 |//
                            27092 ; 2640 |//   Description:   Set tuner stereo/mono mode
                            27093 ; 2641 |//
                            27094 ; 2642 |//   Inputs:        iMode: TUNER_MODE_STEREO or TUNER_MODE_MONO
                            27095 ; 2643 |//
                            27096 ; 2644 |//   Outputs:       return iTuningStatus
                            27097 ; 2645 |//
                            27098 ; 2646 |//   Notes:         none
                            27099 ; 2647 |//<
                            27100 ; 2648 |////////////////////////////////////////////////////////////////////////////////
                            27101 ; 2649 |#ifdef FUNCLET
                            27102 ; 2650 |    #pragma asm
P:0014                      27103         org p,".stfm1000_SYS":
                            27104         FTunerDriverSetMonoStereoMode:
                            27105 
                            27110 
                            27111         ;If using funclet, function will be executed via funclet kernel
                            27112         CallFunclet2 RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE
P:0014 0D0082         4   4427112     jsr       $82
P:0015 00042C               27112     DC       RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE  ; 1 word
                            27113 
P:0000                      27114         org p,"SYSFUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE_P":
P:0000 00042C               27115         dc      RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE
                            27116 ; 2664 |    #pragma endasm
                            27117 ; 2665 |_reentrant INT TunerDriverSetMonoStereoMode_Funclet(INT iMode )
                            27118 ; 2666 |#else
                            27119 ; 2667 |_reentrant INT TunerDriverSetMonoStereoMode(INT iMode )
                            27120 ; 2668 |#endif
                            27121 ; 2669 |{
                            27122 
                            27127 FTunerDriverSetMonoStereoMode_Funclet:
                            27132 
                            27133 ; 2670 |    INT iTuningStatus=TUNER_SUCCESS;
                            27134 
                            27145 
                            27146 ; 2671 |    if(iMode == TUNER_MODE_STEREO)
                            27147 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0001 218F13         2    227143         clr     a	                a1,b
P:0002 4EF000 rrrrrr  3    527140         move    y:Fg_STFM1000_CustomerForceMono,y0
P:0004 44F400 000001  3    827149         move    #>1,x0
P:0006 4DF04D rrrrrr  3   1127150         cmp     x0,b	                y:Fg_sd_audio_pCoefForcedMono_u1,x1
P:0008 0AF0A2 rrrrrr  6   1727151         jne     L342
                            27152 
                            27153 ; 2672 |        {
                            27154 ; 2673 |        /* enable "forced mono" in black box */
                            27155 ; 2674 |#ifndef MIN_FILTER
                            27156 ; 2675 |        g_sd_audio_pCoefForcedMono_u1 = 0;
                            27157 
                            27160 
                            27161 ; 2676 |#else
                            27162 ; 2677 |        sd_audio_pCoefForcedMono_u1 = 0;
                            27163 ; 2678 |#endif
                            27164 ; 2679 |        // Set stereo bit
                            27165 ; 2680 |        g_STFM1000_CustomerForceMono = FALSE;  // STMP00013255
                            27166 
                            27169 
                            27170 ; 2681 |        }
                            27171 
P:000A 250000         2   1927159         move    #0,x1
P:000B 260000         2   2127168         move    #0,y0
P:000C 0AF080 rrrrrr  6   2727173         jmp     L345
                            27174 
                            27175 ; 2682 |    else if (iMode == TUNER_MODE_MONO)
                            27176 
P:000E 20000B         2   2927178 L342:   tst     b
P:000F 0AF0A2 rrrrrr  6   3527179         jne     L343
                            27180 
                            27181 ; 2683 |        {
                            27182 ; 2684 |        /* enable "forced mono" in black box */
                            27183 ; 2685 |#ifndef MIN_FILTER
                            27184 ; 2686 |        g_sd_audio_pCoefForcedMono_u1 = 1;
                            27185 
                            27188 
                            27189 ; 2687 |#else
                            27190 ; 2688 |        sd_audio_pCoefForcedMono_u1 = 1;
                            27191 ; 2689 |#endif
                            27192 ; 2690 |        // Set Mono bit
                            27193 ; 2691 |        g_STFM1000_CustomerForceMono = TRUE;  // STMP00013255
                            27194 
                            27197 
                            27198 ; 2692 |        }
                            27199 
P:0011 208500         2   3727187         move    x0,x1
P:0012 208600         2   3927196         move    x0,y0
P:0013 0AF080 rrrrrr  6   4527201         jmp     L345
                            27202 
                            27203 ; 2693 |    else
                            27204 ; 2694 |        iTuningStatus = E_TUNER_PARAMETER_IN_ERROR;
                            27205 
                            27207 L343:
                            27208 
                            27209 ; 2695 |    return iTuningStatus;
                            27210 
P:0015 56F400 FFFFFE  3   4827207         move    #>-2,a
                            27212 L345:
                            27214 
                            27215 ; 2696 |}
                            27216 
P:0017 4D7000 rrrrrr  3   5127212         move    x1,y:Fg_sd_audio_pCoefForcedMono_u1
P:0019 4E7000 rrrrrr  3   5427213         move    y0,y:Fg_STFM1000_CustomerForceMono
P:001B 00000C         4   5827218         rts
                            27222 
                            27223 ; 2697 |#ifdef FUNCLET
                            27224 ; 2698 |    #pragma asm
P:003E                      27225         org p,".ptextstfm1000":
                            27226 ; 2700 |    #pragma endasm
                            27227 ; 2701 |#endif
                            27228 ; 2702 |
                            27229 ; 2703 |////////////////////////////////////////////////////////////////////////////////
                            27230 ; 2704 |//
                            27231 ; 2705 |//>  Name:          TunerDriverSetSensitivity
                            27232 ; 2706 |//
                            27233 ; 2707 |//   Type:          Function
                            27234 ; 2708 |//
                            27235 ; 2709 |//   Description:   Set tuner sensitivity, i.e.RSSI after decoded, the value is 0-70
                            27236 ; 2710 |//
                            27237 ; 2711 |//   Inputs:        iSensitivity: sensitivity level from 0-100
                            27238 ; 2712 |//
                            27239 ; 2713 |//   Outputs:       return iTuningStatus
                            27240 ; 2714 |//
                            27241 ; 2715 |//   Notes:         Func not in 3.120. Does nothing anyway. maybe remove it to save ram? any callers?
                            27242 ; 2716 |//<
                            27243 ; 2717 |////////////////////////////////////////////////////////////////////////////////
                            27244 ; 2718 |#if 0    //This function is moved into tunermodule.c
                            27245 ; 2719 |_reentrant INT TunerDriverSetSensitivity(INT iSensitivity )
                            27246 ; 2720 |{
                            27247 ; 2721 |    //s_iFMTunerSensitivity =  (iSensitivity*70)/100;
                            27248 ; 2722 |    //StfmTuneData.sd_ctl_TuneRssiTh_w = s_iFMTunerSensitivity;
                            27249 ; 2723 |    return TUNER_SUCCESS;
                            27250 ; 2724 |}
                            27251 ; 2725 |#endif
                            27252 ; 2726 |
                            27253 ; 2727 |////////////////////////////////////////////////////////////////////////////////
                            27254 ; 2728 |//
                            27255 ; 2729 |//>  Name:          TunerDriverGetTunerstate
                            27256 ; 2730 |//
                            27257 ; 2731 |//   Type:          Function
                            27258 ; 2732 |//
                            27259 ; 2733 |//   Description:   Get tuner status such as frequency, signal strength, stereo/mono
                            27260 ; 2734 |//
                            27261 ; 2735 |//   Inputs:        none
                            27262 ; 2736 |//
                            27263 ; 2737 |//   Outputs:       return iTuningStatus
                            27264 ; 2738 |//
                            27265 ; 2739 |//   Notes:         This function is called every 100ms when staying in a station
                            27266 ; 2740 |//                  to pass the RSSI raw data to c-filter, and the monitor signal quality
                            27267 ; 2741 |//                  should be down every 1 second
                            27268 ; 2742 |//<
                            27269 ; 2743 |////////////////////////////////////////////////////////////////////////////////
                            27270 ; 2744 |extern WORD     _X g_wTunedFrequency;   //
                            27271 ; 2745 |extern BOOL     g_bStereoBroadcast;
                            27272 ; 2746 |
                            27273 ; 2747 |_reentrant INT TunerDriverGetTunerstate( void )
                            27274 ; 2748 |{
                            27275 
                            27280 FTunerDriverGetTunerstate:
                            27293 
                            27294 ; 2749 |    INT iTuningStatus = SUCCESS;
                            27295 ; 2750 |    BOOL bIsStation;
                            27296 ; 2751 |    BOOL bNeedDisplay = FALSE;
                            27297 
                            27306 
                            27307 ; 2752 |
                            27308 ; 2753 |    // Frequency
                            27309 ; 2754 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            27310 ; 2755 |    g_wCurrentFrequency = s_wDisplayFMFrequency;
                            27311 ; 2756 |#else
                            27312 ; 2757 |    g_wCurrentFrequency = s_wCurrentFMFrequency;
                            27313 
                            27317 
                            27318 ; 2758 |#endif
                            27319 ; 2759 |
                            27320 ; 2760 |#ifdef DEBUG_MONITOR_SIGNAL_QUALITY
                            27321 ; 2761 |     wLogTimeDelta = SysGetCurrentTime() - wLogTimeDelta;
                            27322 ; 2762 |     wLogIndex %= STFM1000_MONITOR_SIGNAL_LOG_MAX;
                            27323 ; 2763 |     wTimeLogArray[wLogIndex] = wLogTimeDelta;
                            27324 ; 2764 |     wLogIndex++;
                            27325 ; 2765 |     wLogTimeDelta = SysGetCurrentTime();;
                            27326 ; 2766 |#endif
                            27327 ; 2767 |    // Update RSSI
                            27328 ; 2768 |    iTuningStatus = STFM1000TunerQueryIsStation(&bIsStation);
                            27329 
P:003E 055F7C         2  15527281         movec   ssh,y:(r7)+
P:003F 3F0300         2  15727284         move    #3,n7
P:0040 280000         2  15927299         move    #0,a0
P:0041 204F00         2  16127286         move    (r7)+n7
P:0042 77F400 FFFFFE  3  16427301         move    #-2,n7
P:0044 000000         2  16627301         nop             ; (inserted)
P:0045 586F00         4  17027303         move    a0,y:(r7+n7)
P:0046 77F400 FFFFFD  3  17327331         move    #-3,n7
P:0048 5CF000 rrrrrr  3  17627315         move    y:Fs_wCurrentFMFrequency,a1
P:004A 044F10         4  18027333         lua     (r7)+n7,r0
P:004B 5C7000 rrrrrr  3  18327316         move    a1,y:Fg_wCurrentFrequency
P:004D 0BF080 rrrrrr  6  18927334         jsr     FSTFM1000TunerQueryIsStation
                            27339 
                            27340 ; 2769 |    if (SUCCESS != iTuningStatus)
                            27341 
P:004F 045FA0         2  19127335         movec   m0,n7
P:0050 200003         2  19327343         tst     a
P:0051 5E6F00         4  19727337         move    a,y:(r7+n7)
P:0052 0AF0A2 rrrrrr  6  20327344         jne     L371
                            27345 
                            27346 ; 2770 |    {
                            27347 ; 2771 |        //SystemHalt();
                            27348 ; 2772 |        return iTuningStatus;
                            27349 ; 2773 |    }
                            27350 ; 2774 |    // Mask the high 8 bit since the RSSI is in the lower 16-bit
                            27351 ; 2775 |    g_wRawRSSIData &= 0x0000FFFF;
                            27352 
                            27358 
                            27359 ; 2776 |#ifndef MIN_FILTER
                            27360 ; 2777 |    // Call the function to calc the c-filter coefficiencts
                            27361 ; 2778 |    sw_stereocontrol_xcall((unsigned short)g_wRawRSSIData);
                            27362 
P:0054 5EF000 rrrrrr  3  20627354         move    y:Fg_wRawRSSIData,a
P:0056 45F400 00FFFF  3  20927355         move    #$FFFF,x1
P:0058 200066         2  21127356         and     x1,a
P:0059 5C7000 rrrrrr  3  21427357         move    a1,y:Fg_wRawRSSIData
P:005B 5EF000 rrrrrr  3  21727364         move    y:Fg_wRawRSSIData,a
P:005D 0BF080 rrrrrr  6  22327365         jsr     Fsw_stereocontrol_xcall
                            27366 
                            27367 ; 2779 |    sw_stereocontrol_bwsweep();
                            27368 
P:005F 0BF080 rrrrrr  6  22927370         jsr     Fsw_stereocontrol_bwsweep
                            27371 
                            27372 ; 2780 |    // Update this from a global in C-filter
                            27373 ; 2781 |    // Mono/stereo
                            27374 ; 2782 |        g_bTunedStereoStation = (!g_sd_audio_pCoefForcedMono_u1 );
                            27375 
P:0061 5FF000 rrrrrr  3  23227377         move    y:Fg_sd_audio_pCoefForcedMono_u1,b
P:0063 26000B         2  23427378         tst     b	                #0,y0
P:0064 0AF0A2 rrrrrr  6  24027380         jne     L372
P:0066 0AC660         4  24427381         bset    #0,y0
                            27382 L372:
                            27383 
                            27384 ; 2783 |#else
                            27385 ; 2784 |    g_bTunedStereoStation = (!sd_audio_pCoefForcedMono_u1);
                            27386 ; 2785 |#endif
                            27387 ; 2786 |    // If the channel optimized is not settled, don't need to monitor the signal quality
                            27388 ; 2787 |    if(s_eOptimizeChannelState != OPTIMIZE_CHANNEL_STATE_COMPLETE)
                            27389 
P:0067 467000 rrrrrr  3  24727382         move    y0,x:Fg_bTunedStereoStation
P:0069 5FF000 rrrrrr  3  25027391         move    y:Fs_eOptimizeChannelState,b
P:006B 46F400 000004  3  25327392         move    #>4,y0
P:006D 20005D         2  25527393         cmp     y0,b
P:006E 0AF0AA rrrrrr  6  26127394         jeq     L364
                            27395 
                            27396 ; 2788 |    {
                            27397 ; 2789 |        wCountForTriggerMonitorQuality = 0;
                            27398 
                            27402 
                            27403 ; 2790 |    }
                            27404 ; 2791 |
                            27405 ; 2792 |    if(wCountForTriggerMonitorQuality++ >= 10)
                            27406 
P:0070 2F0000         2  26327400         move    #0,b
P:0071 5D7000 rrrrrr  3  26627401         move    b1,y:FwCountForTriggerMonitorQuality
P:0073 5EF000 rrrrrr  3  26927408 L364:   move    y:FwCountForTriggerMonitorQuality,a
P:0075 46F400 000001  3  27227410         move    #>1,y0
P:0077 218F00         2  27427409         move    a1,b
P:0078 2B0050         2  27627411         add     y0,a	                #0,b2
P:0079 46F400 00000A  3  27927413         move    #>10,y0
P:007B 5C705D rrrrrr  3  28227415         cmp     y0,b	                a1,y:FwCountForTriggerMonitorQuality
P:007D 0AF0A9 rrrrrr  6  28827416         jlt     L365
                            27417 
                            27418 ; 2793 |    {
                            27419 ; 2794 |        wCountForTriggerMonitorQuality = 0;
                            27420 
                            27424 
                            27425 ; 2795 |        //We have a pending state, restart
                            27426 ; 2796 |        //if (s_eMonitorSignalQualityState != MONITOR_SIGNAL_QUALITY_STATE_COMPLETE)
                            27427 ; 2797 |
                            27428 ; 2798 |        s_eMonitorSignalQualityState = MONITOR_SIGNAL_QUALITY_STATE_START;
                            27429 
                            27432 
                            27433 ; 2799 |
                            27434 ; 2800 |        // Do we need to check if there is a station then do the signal quality monitor
                            27435 ; 2801 |        // If the frequency change, then  bIsWeakSignal = FALSE;
                            27436 ; 2802 |        //
                            27437 ; 2803 |        // We like to keep the return value, it could be E_TUNER_BUSY
                            27438 ; 2804 |#ifdef STFM1000_ENABLE_MONITOR_SIGNAL_QUALITY
                            27439 ; 2805 |        iTuningStatus = STFM1000TunerMonitorQuality();
                            27440 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
P:007F 2F0000         2  29027422         move    #0,b
P:0080 5D7000 rrrrrr  3  29327423         move    b1,y:FwCountForTriggerMonitorQuality
P:0082 5D7000 rrrrrr  3  29627431         move    b1,y:Fs_eMonitorSignalQualityState
P:0084 0BF080 rrrrrr  6  30227442         jsr     FSTFM1000TunerMonitorQuality
                            27446 
                            27447 ; 2806 |#endif
                            27448 ; 2807 |
                            27449 ; 2808 |    }
                            27450 ; 2809 |    // Don't disable the timer if the optimized channel and monitor signal quality are not done
                            27451 ; 2810 |    // since it would take longer than 100ms
                            27452 ; 2811 |    if((s_eMonitorSignalQualityState != MONITOR_SIGNAL_QUALITY_STATE_COMPLETE) ||
                            27453 ; 2812 |       (s_eOptimizeChannelState != OPTIMIZE_CHANNEL_STATE_COMPLETE))
                            27454 
P:0086 045FA0         2  30427443         movec   m0,n7
P:0087 000000         2  30627443         nop             ; (inserted)
P:0088 5E6F00         4  31027445         move    a,y:(r7+n7)
P:0089 5FF000 rrrrrr  3  31327456 L365:   move    y:Fs_eMonitorSignalQualityState,b
P:008B 46F400 000004  3  31627457         move    #>4,y0
P:008D 20005D         2  31827458         cmp     y0,b
P:008E 0AF0A2 rrrrrr  6  32427459         jne     L366
P:0090 5EF000 rrrrrr  3  32727460         move    y:Fs_eOptimizeChannelState,a
P:0092 200055         2  32927461         cmp     y0,a
P:0093 0AF0AA rrrrrr  6  33527462         jeq     L367
                            27463 
                            27464 ; 2813 |    {
                            27465 ; 2814 |        iTuningStatus = E_TUNER_BUSY;
                            27466 
                            27468 L366:
                            27476 
                            27477 ; 2815 |    }
                            27478 ; 2816 |
                            27479 ; 2817 |    if( g_bStereoBroadcast != g_bTunedStereoStation )
                            27480 
P:0095 045FA0         2  33727471         movec   m0,n7
P:0096 50F400 FFFFFC  3  34027468         move    #-4,a0
P:0098 586F00         4  34427473         move    a0,y:(r7+n7)
                            27482 L367:
P:0099 57F000 rrrrrr  3  34727483         move    x:Fg_bTunedStereoStation,b
P:009B 5EF000 rrrrrr  3  35027482         move    y:Fg_bStereoBroadcast,a
P:009D 2B0000         2  35227484         move    #0,b2
P:009E 2A0000         2  35427485         move    #0,a2
P:009F 200005         2  35627486         cmp     b,a
P:00A0 0AF0AA rrrrrr  6  36227487         jeq     L368
                            27488 
                            27489 ; 2818 |    {
                            27490 ; 2819 |        g_bStereoBroadcast = g_bTunedStereoStation;
                            27491 
                            27494 
                            27495 ; 2820 |        bNeedDisplay = TRUE;
                            27496 
                            27506 
                            27507 ; 2821 |    }
                            27508 ; 2822 |
                            27509 ; 2823 |    if (g_wTunedFrequency != FM_TUNER_GRID*((g_wCurrentFrequency+FM_TUNER_GRID/2)/FM_TUNER_GRID))
                            27510 
P:00A2 77F400 FFFFFE  3  36527501         move    #-2,n7
P:00A4 5D7000 rrrrrr  3  36827493         move    b1,y:Fg_bStereoBroadcast
P:00A6 46F400 000001  3  37127498         move    #>1,y0
P:00A8 4E6F00         4  37527503         move    y0,y:(r7+n7)
P:00A9 45F000 rrrrrr  3  37827512 L368:   move    x:Fg_wTunedFrequency,x1
P:00AB 5EF000 rrrrrr  3  38127513         move    y:Fg_wCurrentFrequency,a
P:00AD 47F400 000032  3  38427514         move    #>50,y1
P:00AF 57F470 000064  3  38727515         add     y1,a	                #>100,b
P:00B1 0BF080 rrrrrr  6  39327517         jsr     Rdiv_uiuiui
P:00B3 21A400         2  39527518         move    b1,x0
P:00B4 210600         2  39727519         move    a0,y0
P:00B5 2000D8         2  39927520         mpy     y0,x0,b
P:00B6 20002A         2  40127521         asr     b
P:00B7 212F61         2  40327523         tfr     x1,a	                b0,b
P:00B8 2B0000         2  40527524         move    #0,b2
P:00B9 2A0000         2  40727525         move    #0,a2
P:00BA 200005         2  40927526         cmp     b,a
P:00BB 0AF0AA rrrrrr  6  41527527         jeq     L369
                            27528 
                            27529 ; 2824 |    {
                            27530 ; 2825 |        g_wTunedFrequency = FM_TUNER_GRID*((g_wCurrentFrequency+FM_TUNER_GRID/2)/FM_TUNER_GRID);
                            27531 
                            27534 
                            27535 ; 2826 |        bNeedDisplay = TRUE;
                            27536 
                            27546 
                            27547 ; 2827 |    }
                            27548 ; 2828 |
                            27549 ; 2829 |    if( bNeedDisplay == TRUE )
                            27550 
P:00BD 77F400 FFFFFE  3  41827541         move    #-2,n7
P:00BF 557000 rrrrrr  3  42127533         move    b1,x:Fg_wTunedFrequency
P:00C1 45F400 000001  3  42427538         move    #>1,x1
P:00C3 4D6F00         4  42827543         move    x1,y:(r7+n7)
                            27552 L369:
P:00C4 77F400 FFFFFE  3  43127552         move    #-2,n7
P:00C6 45F400 000001  3  43427555         move    #>1,x1
P:00C8 5FEF00         4  43827554         move    y:(r7+n7),b
P:00C9 2B0000         2  44027556         move    #0,b2
P:00CA 20006D         2  44227557         cmp     x1,b
P:00CB 0AF0A2 rrrrrr  6  44827560         jne     L371
                            27561 
                            27562 ; 2830 |    {
                            27563 ; 2831 |        SysPostMessage( 3, MENU_TUNER_REFRESH_DISPLAY, 1<<DISPLAY_FMTUNER_FREQUENCY );
                            27564 
P:00CD 292000         2  45027566         move    #$20,b0
P:00CE 45F400 060014  3  45327570         move    #393236,x1
P:00D0 595F00         2  45527568         move    b0,y:(r7)+
P:00D1 290300         2  45727573         move    #3,b0
P:00D2 4D5F00         2  45927571         move    x1,y:(r7)+
P:00D3 595F00         2  46127574         move    b0,y:(r7)+
P:00D4 0BF080 rrrrrr  6  46727576         jsr     FSysPostMessage
                            27581 
                            27582 ; 2832 |    }
                            27583 ; 2833 |
                            27584 ; 2834 |        return iTuningStatus;
                            27585 
P:00D6 3F0300         2  46927577         move    #3,n7
P:00D7 000000         2  47127577         nop             ; (inserted)
P:00D8 204700         2  47327579         move    (r7)-n7
                            27587 L371:
                            27592 
                            27593 ; 2835 |}
                            27594 
P:00D9 045FA0         2  47527587         movec   m0,n7
P:00DA 000000         2  47727587         nop             ; (inserted)
P:00DB 5EEF00         4  48127589         move    y:(r7+n7),a
P:00DC 77F400 FFFFFC  3  48427596         move    #-4,n7
P:00DE 000000         2  48627596         nop             ; (inserted)
P:00DF 05EF7C         4  49027598         movec   y:(r7+n7),ssh
P:00E0 204F00         2  49227600         move    (r7)+n7
P:00E1 00000C         4  49627602         rts
                            27605 
                            27606 ; 2836 |////////////////////////////////////////////////////////////////////////////////
                            27607 ; 2837 |//
                            27608 ; 2838 |//>  Name:          bIsTunerModulePowered
                            27609 ; 2839 |//
                            27610 ; 2840 |//   Type:          Function
                            27611 ; 2841 |//
                            27612 ; 2842 |//   Description:   Check if tuning is on or off
                            27613 ; 2843 |//
                            27614 ; 2844 |//   Inputs:        none
                            27615 ; 2845 |//
                            27616 ; 2846 |//   Outputs:       TRUE: power-on/FALSE: power-off
                            27617 ; 2847 |//
                            27618 ; 2848 |//    Notes: HJ deleted this from 3.120. still here in 2.620
                            27619 ; 2849 |//<
                            27620 ; 2850 |////////////////////////////////////////////////////////////////////////////////
                            27621 ; 2851 |#if 0    // This function is moved into  tunermodule.c
                            27622 ; 2852 |_reentrant BOOL bIsTunerModulePowered(void)
                            27623 ; 2853 |{
                            27624 ; 2854 |    return ( !(g_wFMTunerError.m_bPOWERED_OFF));
                            27625 ; 2855 |}
                            27626 ; 2856 |#endif
                            27627 ; 2857 |
                            27628 ; 2858 |////////////////////////////////////////////////////////////////////////////////
                            27629 ; 2859 |//
                            27630 ; 2860 |
                            27631 ; 2861 |//>  Name:          STFM1000ContinueSearching
                            27632 ; 2862 |//
                            27633 ; 2863 |//   Type:          Function
                            27634 ; 2864 |//
                            27635 ; 2865 |//   Description:   Search until complete
                            27636 ; 2866 |//
                            27637 ; 2867 |//   Inputs:        none
                            27638 ; 2868 |//
                            27639 ; 2869 |//   Outputs:       Busy or SUCCESS
                            27640 ; 2870 |//
                            27641 ; 2871 |//   Notes:         none
                            27642 ; 2872 |//<
                            27643 ; 2873 |////////////////////////////////////////////////////////////////////////////////
                            27644 ; 2874 |#ifdef FUNCLET
                            27645 ; 2875 |    #pragma asm
                            27646         FSTFM1000ContinueSearching:
                            27647 
                            27652 
                            27653         ;If using funclet, function will be executed via funclet kernel
                            27654         CallFunclet2 RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING
P:00E2 0D0082         4  50027654     jsr       $82
P:00E3 000435               27654     DC       RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING  ; 1 word
                            27655 
P:0000                      27656         org p,"SYSFUNCLET_STFM1000_CONTINUE_SEARCHING_P":
P:0000 000435               27657         dc      RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING
                            27658 ; 2888 |    #pragma endasm
                            27659 ; 2889 |_reentrant INT STFM1000ContinueSearching_Funclet(void)
                            27660 ; 2890 |#else
                            27661 ; 2891 |_reentrant INT STFM1000ContinueSearching( void )
                            27662 ; 2892 |#endif
                            27663 ; 2893 |{
                            27664 
                            27669 FSTFM1000ContinueSearching_Funclet:
                            27683 
                            27684 ; 2894 |#define RSSI_READ_COUNT 5
                            27685 ; 2895 |        INT iTuningStatus;
                            27686 ; 2896 |#ifdef SD_USE_200KHZ_TUNING_GRID
                            27687 ; 2897 |    WORD wFreqModulo = 0;
                            27688 ; 2898 |#endif
                            27689 ; 2899 |    INT iRssiTemp = 0;
                            27690 ; 2900 |    WORD wLoopCount = RSSI_READ_COUNT;
                            27691 
                            27696 
                            27697 ; 2901 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            27698 ; 2902 |    INT iMpxAdcTemp = 0;
                            27699 ; 2903 |#endif
                            27700 ; 2904 |    BOOL bIsStation = FALSE;
                            27701 
                            27709 
                            27710 ; 2905 |    INT iTemp = 0;
                            27711 ; 2906 |
                            27712 ; 2907 |        if (((s_wCurrentFMFrequency >=s_wBeginSearchFMFrequency)&&(s_bTunerSearchHitBandLimit==TRUE)&&(s_iFMTunerSearchStatus>0))||
                            27713 ; 2908 |                ((s_wCurrentFMFrequency <=s_wBeginSearchFMFrequency)&&(s_bTunerSearchHitBandLimit==TRUE)&&(s_iFMTunerSearchStatus<0)))
                            27714 
P:0001 055F7C         2    227670         movec   ssh,y:(r7)+
P:0002 3F0300         2    427673         move    #3,n7
P:0003 250000         2    627703         move    #0,x1
P:0004 44F400 000005  3    927693         move    #>5,x0
P:0006 204F00         2   1127675         move    (r7)+n7
P:0007 77F400 FFFFFD  3   1427704         move    #-3,n7
P:0009 000000         2   1627704         nop             ; (inserted)
P:000A 4D6F00         4   2027706         move    x1,y:(r7+n7)
P:000B 5FF000 rrrrrr  3   2327716         move    y:Fs_wCurrentFMFrequency,b
P:000D 5EF000 rrrrrr  3   2627717         move    y:Fs_wBeginSearchFMFrequency,a
P:000F 2B0000         2   2827720         move    #0,b2
P:0010 2A0000         2   3027719         move    #0,a2
P:0011 21A70D         2   3227721         cmp     a,b	                b1,y1
P:0012 0AF0A9 rrrrrr  6   3827722         jlt     L408
P:0014 57F000 rrrrrr  3   4127723         move    x:Fs_bTunerSearchHitBandLimit,b
P:0016 46F400 000001  3   4427724         move    #>1,y0
P:0018 2B0000         2   4627725         move    #0,b2
P:0019 20005D         2   4827726         cmp     y0,b
P:001A 0AF0A2 rrrrrr  6   5427727         jne     L408
P:001C 5FF000 rrrrrr  3   5727728         move    y:Fs_iFMTunerSearchStatus,b
P:001E 20000B         2   5927729         tst     b
P:001F 0AF0A7 rrrrrr  6   6527730         jgt     L409
P:0021 2A0079         2   6727731 L408:   tfr     y1,b	                #0,a2
P:0022 2B0000         2   6927733         move    #0,b2
P:0023 20000D         2   7127734         cmp     a,b
P:0024 0AF0A7 rrrrrr  6   7727735         jgt     L412
P:0026 57F000 rrrrrr  3   8027736         move    x:Fs_bTunerSearchHitBandLimit,b
P:0028 47F400 000001  3   8327737         move    #>1,y1
P:002A 2B0000         2   8527738         move    #0,b2
P:002B 20007D         2   8727739         cmp     y1,b
P:002C 0AF0A2 rrrrrr  6   9327740         jne     L412
P:002E 5FF000 rrrrrr  3   9627741         move    y:Fs_iFMTunerSearchStatus,b
P:0030 20000B         2   9827742         tst     b
P:0031 0AF0A1 rrrrrr  6  10427743         jge     L412
                            27744 
                            27745 ; 2909 |        {
                            27746 ; 2910 |
                            27747 ; 2911 |                iTuningStatus = STFM1000TunerSearchEnded(s_wBeginSearchFMFrequency);
                            27748 
P:0033 0BF080 rrrrrr  6  11027750 L409:   jsr     FSTFM1000TunerSearchEnded
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                            27753 
                            27754 ; 2912 |        }
                            27755 
P:0035 0AF080 rrrrrr  6  11627757         jmp     L423
                            27758 L412:
                            27765 
                            27766 ; 2913 |        else
                            27767 ; 2914 |        {
                            27768 ; 2915 |        STFM1000TunerQueryIsStation(&bIsStation);
                            27769 
P:0037 77F400 FFFFFE  3  11927760         move    #-2,n7
P:0039 000000         2  12127760         nop             ; (inserted)
P:003A 4C6F00         4  12527762         move    x0,y:(r7+n7)
P:003B 77F400 FFFFFD  3  12827771         move    #-3,n7
P:003D 000000         2  13027771         nop             ; (inserted)
P:003E 044F12         4  13427773         lua     (r7)+n7,r2
P:003F 225000         2  13627774         move    r2,r0
P:0040 0BF080 rrrrrr  6  14227775         jsr     FSTFM1000TunerQueryIsStation
                            27777 
                            27778 ; 2916 |#ifdef SD_USE_200KHZ_TUNING_GRID
                            27779 ; 2917 |        wFreqModulo = s_wCurrentFMFrequency % 200;
                            27780 ; 2918 |        if(bIsStation)
                            27781 ; 2919 |        {
                            27782 ; 2920 |            if(wFreqModulo != 0)
                            27783 ; 2921 |            {
                            27784 ; 2922 |                return(STFM1000TunerSearchEnded(s_wCurrentFMFrequency));
                            27785 ; 2923 |            }
                            27786 ; 2924 |        }
                            27787 ; 2925 |        iTuningStatus = STFM1000NextSearchFrequency();
                            27788 ; 2926 |#else
                            27789 ; 2927 |
                            27790 ; 2928 |        iRssiTemp = s_iFMSignalStrengthRSSI;
                            27791 
                            27795 
                            27796 ; 2929 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            27797 ; 2930 |        iMpxAdcTemp = s_iFMSignalStrengthMpxDc;
                            27798 ; 2931 |#endif
                            27799 ; 2932 |        if(bIsStation)
                            27800 
P:0042 77F400 FFFFFD  3  14527802         move    #-3,n7
P:0044 5EF000 rrrrrr  3  14827793         move    y:Fs_iFMSignalStrengthRSSI,a
P:0046 5FEF00         4  15227804         move    y:(r7+n7),b
P:0047 2B0000         2  15427805         move    #0,b2
P:0048 20000B         2  15627806         tst     b
P:0049 0AF0AA rrrrrr  6  16227807         jeq     L415
                            27808 
                            27809 ; 2933 |        {
                            27810 ; 2934 |            while((--wLoopCount > 0))
                            27811 
P:004B 0AF080 rrrrrr  6  16827813         jmp     L414
                            27814 L413:
                            27822 
                            27823 ; 2935 |            {
                            27824 ; 2936 |                STFM1000TunerQueryIsStation(&bIsStation);
                            27825 
P:004D 045FA0         2  17027814         movec   m0,n7
P:004E 000000         2  17227814         nop             ; (inserted)
P:004F 5C6F00         4  17627816         move    a1,y:(r7+n7)
P:0050 77F400 FFFFFD  3  17927819         move    #-3,n7
P:0052 000000         2  18127819         nop             ; (inserted)
P:0053 044F10         4  18527821         lua     (r7)+n7,r0
P:0054 0BF080 rrrrrr  6  19127827         jsr     FSTFM1000TunerQueryIsStation
                            27828 
                            27829 ; 2937 |                iRssiTemp += s_iFMSignalStrengthRSSI;
                            27830 
P:0056 045FA0         2  19327833         movec   m0,n7
P:0057 4DF000 rrrrrr  3  19627832         move    y:Fs_iFMSignalStrengthRSSI,x1
P:0059 5EEF00         4  20027835         move    y:(r7+n7),a
P:005A 200060         2  20227836         add     x1,a
                            27840 L414:
P:005B 77F400 FFFFFE  3  20527840         move    #-2,n7
P:005D 45F400 000001  3  20827843         move    #>1,x1
P:005F 5FEF00         4  21227842         move    y:(r7+n7),b
P:0060 20006C         2  21427844         sub     x1,b
P:0061 2B0000         2  21627848         move    #0,b2
P:0062 5D6F0B         4  22027849         tst     b	                b1,y:(r7+n7)
P:0063 0AF0A7 rrrrrr  6  22627852         jgt     L413
                            27853 
                            27854 ; 2938 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            27855 ; 2939 |                iMpxAdcTemp = (iMpxAdcTemp + s_iFMSignalStrengthMpxDc)/2;
                            27856 ; 2940 |#endif
                            27857 ; 2941 |            }
                            27858 ; 2942 |            iRssiTemp /= RSSI_READ_COUNT;
                            27859 
P:0065 44F400 000005  3  22927861         move    #>5,x0
P:0067 0BF080 rrrrrr  6  23527862         jsr     Rdiv_iii
                            27863 
                            27864 ; 2943 |        }
                            27865 ; 2944 |        s_iFMSignalStrengthRSSI = iRssiTemp;
                            27866 
                            27868 L415:
                            27869 
                            27870 ; 2945 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            27871 ; 2946 |        s_iFMSignalStrengthMpxDc = iMpxAdcTemp;
                            27872 ; 2947 |#endif
                            27873 ; 2948 |
                            27874 ; 2949 |        // First time do a search
                            27875 ; 2950 |        if(bIsFirstTimeToNewStation)
                            27876 
P:0069 5C7000 rrrrrr  3  23827868         move    a1,y:Fs_iFMSignalStrengthRSSI
P:006B 5EF000 rrrrrr  3  24127878         move    y:FbIsFirstTimeToNewStation,a
P:006D 2A0000         2  24327880         move    #0,a2
P:006E 200003         2  24527881         tst     a
P:006F 0AF0AA rrrrrr  6  25127882         jeq     L416
                            27883 
                            27884 ; 2951 |        {
                            27885 ; 2952 |            if(bIsStation)
                            27886 
P:0071 77F400 FFFFFD  3  25427888         move    #-3,n7
P:0073 000000         2  25627888         nop             ; (inserted)
P:0074 5FEF00         4  26027890         move    y:(r7+n7),b
P:0075 2B0000         2  26227891         move    #0,b2
P:0076 20000B         2  26427892         tst     b
P:0077 0AF0AA rrrrrr  6  27027893         jeq     L419
                            27894 
                            27895 ; 2953 |            {
                            27896 ; 2954 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            27897 ; 2955 |                if(s_wCurrentFMFrequency > g_astSearchStations.Frequency)
                            27898 ; 2956 |                {
                            27899 ; 2957 |                    iTemp = s_wCurrentFMFrequency - g_astSearchStations.Frequency;
                            27900 ; 2958 |                }
                            27901 ; 2959 |                else
                            27902 ; 2960 |                {
                            27903 ; 2961 |                    iTemp = g_astSearchStations.Frequency - s_wCurrentFMFrequency;
                            27904 ; 2962 |                }
                            27905 ; 2963 |                g_astSearchStations.Frequency = s_wCurrentFMFrequency;
                            27906 ; 2964 |                g_astSearchStations.Level = s_iFMSignalStrengthRSSI;
                            27907 ; 2965 |
                            27908 ; 2966 |                g_astSearchStations.MpxAdc = s_iFMSignalStrengthMpxDc;
                            27909 ; 2967 |
                            27910 ; 2968 |                if(iTemp != 100)
                            27911 ; 2969 |                {
                            27912 ; 2970 |                    bIsFirstTimeToNewStation = FALSE;
                            27913 ; 2971 |                }
                            27914 ; 2972 |#else
                            27915 ; 2973 |                bIsFirstTimeToNewStation = FALSE;
                            27916 ; 2974 |                g_astSearchStations.Frequency = s_wCurrentFMFrequency;
                            27917 
P:0079 0AF080 rrrrrr  6  27627919         jmp     L417
                            27920 
                            27921 ; 2975 |                g_astSearchStations.Level = s_iFMSignalStrengthRSSI;
                            27922 ; 2976 |#endif
                            27923 ; 2977 |            }
                            27924 ; 2978 |            iTuningStatus = STFM1000NextSearchFrequency();
                            27925 ; 2979 |        }
                            27926 ; 2980 |        else
                            27927 ; 2981 |        {
                            27928 ; 2982 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            27929 ; 2983 |            if(bIsStation)
                            27930 ; 2984 |            {
                            27931 ; 2985 |
                            27932 ; 2986 |                if((s_iFMSignalStrengthRSSI) > (g_astSearchStations.Level))
                            27933 ; 2987 |                {
                            27934 ; 2988 |                    iTuningStatus = STFM1000TunerSearchEnded(s_wCurrentFMFrequency);
                            27935 ; 2989 |                    g_astSearchStations.Frequency = s_wCurrentFMFrequency;
                            27936 ; 2990 |                    g_astSearchStations.Level = s_iFMSignalStrengthRSSI;
                            27937 ; 2991 |                    g_astSearchStations.MpxAdc = s_iFMSignalStrengthMpxDc;
                            27938 ; 2992 |
                            27939 ; 2993 |                }
                            27940 ; 2994 |                // Back to the one previous found
                            27941 ; 2995 |                else
                            27942 ; 2996 |                {
                            27943 ; 2997 |                    iTuningStatus = STFM1000TunerSearchEnded(g_astSearchStations.Frequency);
                            27944 ; 2998 |                    s_iFMSignalStrengthRSSI = g_astSearchStations.Level;
                            27945 ; 2999 |                }
                            27946 ; 3000 |            }
                            27947 ; 3001 |            // Back to the one prevoius found
                            27948 ; 3002 |            else
                            27949 ; 3003 |            {
                            27950 ; 3004 |               iTuningStatus = STFM1000TunerSearchEnded(g_astSearchStations.Frequency);
                            27951 ; 3005 |               s_iFMSignalStrengthRSSI = g_astSearchStations.Level;
                            27952 ; 3006 |            }
                            27953 ; 3007 |
                            27954 ; 3008 |            if(g_astSearchStations.MpxAdc > 300)
                            27955 ; 3009 |            {
                            27956 ; 3010 |                s_wDisplayFMFrequency = s_wCurrentFMFrequency + 50;
                            27957 ; 3011 |            }
                            27958 ; 3012 |            else if(g_astSearchStations.MpxAdc < -300)
                            27959 ; 3013 |            {
                            27960 ; 3014 |                s_wDisplayFMFrequency = s_wCurrentFMFrequency - 50;
                            27961 ; 3015 |            }
                            27962 ; 3016 |            else
                            27963 ; 3017 |            {
                            27964 ; 3018 |                s_wDisplayFMFrequency = s_wCurrentFMFrequency;
                            27965 ; 3019 |            }
                            27966 ; 3020 |#else
                            27967 ; 3021 |            if(bIsStation)
                            27968 
P:007B 77F400 FFFFFD  3  27927970 L416:   move    #-3,n7
P:007D 000000         2  28127970         nop             ; (inserted)
P:007E 5EEF00         4  28527972         move    y:(r7+n7),a
P:007F 2A0000         2  28727973         move    #0,a2
P:0080 200003         2  28927974         tst     a
P:0081 0AF0AA rrrrrr  6  29527975         jeq     L421
                            27976 
                            27977 ; 3022 |            {
                            27978 ; 3023 |                if((g_astSearchStations.Level > s_iFMSignalStrengthRSSI))
                            27979 
P:0083 5EF000 rrrrrr  3  29827981         move    y:Fg_astSearchStations+1,a
P:0085 5FF000 rrrrrr  3  30127982         move    y:Fs_iFMSignalStrengthRSSI,b
P:0087 200005         2  30327983         cmp     b,a
P:0088 0AF0AF rrrrrr  6  30927984         jle     L418
                            27985 
                            27986 ; 3024 |                {
                            27987 ; 3025 |                    iTuningStatus = STFM1000TunerSearchEnded(g_astSearchStations.Frequency);
                            27988 
P:008A 0AF080 rrrrrr  6  31527990         jmp     L421
                            27992 L417:
                            27994 
                            27995 ; 3026 |                    s_iFMSignalStrengthRSSI = g_astSearchStations.Level;
                            27996 ; 3027 |                }
                            27997 ; 3028 |                else
                            27998 ; 3029 |                {
                            27999 ; 3030 |                    g_astSearchStations.Frequency = s_wCurrentFMFrequency;
                            28000 
P:008C 260000         2  31727992         move    #0,y0
P:008D 4E7000 rrrrrr  3  32027993         move    y0,y:FbIsFirstTimeToNewStation
                            28002 L418:
                            28004 
                            28005 ; 3031 |                    g_astSearchStations.Level = s_iFMSignalStrengthRSSI;
                            28006 
                            28010 
                            28011 ; 3032 |                    iTuningStatus = STFM1000NextSearchFrequency();   // not sure if it's a station
                            28012 
P:008F 4EF000 rrrrrr  3  32328002         move    y:Fs_wCurrentFMFrequency,y0
P:0091 4E7000 rrrrrr  3  32628003         move    y0,y:Fg_astSearchStations
P:0093 4CF000 rrrrrr  3  32928008         move    y:Fs_iFMSignalStrengthRSSI,x0
P:0095 4C7000 rrrrrr  3  33228009         move    x0,y:Fg_astSearchStations+1
P:0097 0BF080 rrrrrr  6  33828014 L419:   jsr     FSTFM1000NextSearchFrequency
                            28016 
                            28017 ; 3033 |                }
                            28018 ; 3034 |            }
                            28019 
P:0099 0AF080 rrrrrr  6  34428021         jmp     L423
                            28022 
                            28023 ; 3035 |            // Back to the one prevoius found
                            28024 ; 3036 |            else
                            28025 ; 3037 |            {
                            28026 ; 3038 |               iTuningStatus = STFM1000TunerSearchEnded(g_astSearchStations.Frequency);
                            28027 
                            28029 L421:
P:009B 5EF000 rrrrrr  3  34728029         move    y:Fg_astSearchStations,a
P:009D 0BF080 rrrrrr  6  35328031         jsr     FSTFM1000TunerSearchEnded
                            28033 
                            28034 ; 3039 |               s_iFMSignalStrengthRSSI = g_astSearchStations.Level;
                            28035 
                            28039 
                            28040 ; 3040 |            }
                            28041 ; 3041 |
                            28042 ; 3042 |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                            28043 ; 3043 |
                            28044 ; 3044 |         }
                            28045 ; 3045 |#endif
                            28046 ; 3046 |        }
                            28047 
P:009F 5DF000 rrrrrr  3  35628037         move    y:Fg_astSearchStations+1,b1
P:00A1 5D7000 rrrrrr  3  35928038         move    b1,y:Fs_iFMSignalStrengthRSSI
                            28049 L423:
                            28050 
                            28051 ; 3047 |        return iTuningStatus;
                            28052 ; 3048 |}
                            28053 
P:00A3 77F400 FFFFFC  3  36228055         move    #-4,n7
P:00A5 000000         2  36428055         nop             ; (inserted)
P:00A6 05EF7C         4  36828057         movec   y:(r7+n7),ssh
P:00A7 204F00         2  37028059         move    (r7)+n7
P:00A8 00000C         4  37428061         rts
                            28065 
                            28066 ; 3049 |
                            28067 ; 3050 |#ifdef FUNCLET
                            28068 ; 3051 |    #pragma asm
P:00E4                      28069         org p,".ptextstfm1000":
                            28070 ; 3053 |    #pragma endasm
                            28071 ; 3054 |#endif
                            28072 ; 3055 |
                            28073 ; 3056 |////////////////////////////////////////////////////////////////////////////////
                            28074 ; 3057 |//
                            28075 ; 3058 |//>  Name:          STFM1000NextSearchFrequency
                            28076 ; 3059 |//
                            28077 ; 3060 |//   Type:          Function
                            28078 ; 3061 |//
                            28079 ; 3062 |//   Description:   Tune to next frequency
                            28080 ; 3063 |//
                            28081 ; 3064 |//   Inputs:        None
                            28082 ; 3065 |//
                            28083 ; 3066 |//   Outputs:       Busy or SUCCESS
                            28084 ; 3067 |//
                            28085 ; 3068 |//   Notes:         none
                            28086 ; 3069 |//<
                            28087 ; 3070 |////////////////////////////////////////////////////////////////////////////////
                            28088 ; 3071 |_reentrant INT STFM1000NextSearchFrequency( void )
                            28089 ; 3072 |{
                            28090 
                            28095 FSTFM1000NextSearchFrequency:
                            28099 
                            28100 ; 3073 |
                            28101 ; 3074 |        //if ((s_wCurrentFMFrequency > FM_BAND_LIMIT_LOW_FREQ) && (s_wCurrentFMFrequency < FM_BAND_LIMIT_HIGH_FREQ))
                            28102 ; 3075 |        if ((s_wCurrentFMFrequency >= FM_BAND_LIMIT_LOW_FREQ) && (s_wCurrentFMFrequency <= FM_BAND_LIMIT_HIGH_FREQ))
                            28103 
P:00E4 055F7C         2  50228096         movec   ssh,y:(r7)+
P:00E5 4EF000 rrrrrr  3  50528105         move    y:Fs_wCurrentFMFrequency,y0
P:00E7 45F459 0155CC  3  50828106         tfr     y0,b	                #87500,x1
P:00E9 2B0000         2  51028108         move    #0,b2
P:00EA 20006D         2  51228109         cmp     x1,b
P:00EB 0AF0A9 rrrrrr  6  51828110         jlt     L434
P:00ED 56F400 01A5E0  3  52128111         move    #108000,a
P:00EF 20C90D         2  52328112         cmp     a,b	                y0,b0
P:00F0 0AF0A7 rrrrrr  6  52928114         jgt     L434
                            28115 
                            28116 ; 3076 |    {
                            28117 ; 3077 |        s_wCurrentFMFrequency+=FM_FREQ_STEP*s_iFMTunerSearchStatus;
                            28118 
                            28126 
                            28127 ; 3078 |
                            28128 ; 3079 |                STFM1000TunerQuicksetStation(s_wCurrentFMFrequency);
                            28129 
P:00F2 4CF03A rrrrrr  3  53228122         asl     b	                y:Fs_iFMTunerSearchStatus,x0
P:00F4 46F400 000064  3  53528121         move    #>100,y0
P:00F6 2000DA         2  53728123         mac     x0,y0,b
P:00F7 20002A         2  53928124         asr     b
P:00F8 597000 rrrrrr  3  54228125         move    b0,y:Fs_wCurrentFMFrequency
P:00FA 0AF080 rrrrrr  6  54828131         jmp     L440
                            28132 
                            28133 ; 3080 |    }
                            28134 ; 3081 |        else
                            28135 ; 3082 |        {
                            28136 ; 3083 |
                            28137 ; 3084 |                if (g_bSearchEndAtBandLimit==TRUE)
                            28138 
P:00FC 56F000 rrrrrr  3  55128140 L434:   move    x:Fg_bSearchEndAtBandLimit,a
P:00FE 46F400 000001  3  55428141         move    #>1,y0
P:0100 2A0000         2  55628142         move    #0,a2
P:0101 200055         2  55828143         cmp     y0,a
P:0102 0AF0A2 rrrrrr  6  56428144         jne     L437
                            28145 
                            28146 ; 3085 |                {
                            28147 ; 3086 |                        if(s_iFMTunerSearchStatus > 0)
                            28148 
P:0104 5FF000 rrrrrr  3  56728150         move    y:Fs_iFMTunerSearchStatus,b
P:0106 20000B         2  56928151         tst     b
P:0107 0AF0AF rrrrrr  6  57528152         jle     L435
                            28153 
                            28154 ; 3087 |            {
                            28155 ; 3088 |                                g_wFMTunerError.m_bBAND_LIMIT_HIGH_ERROR = TRUE;
                            28156 
                            28159 
                            28160 ; 3089 |            }
                            28161 
P:0109 0A7068 rrrrrr  6  58128158         bset    #8,y:Fg_wFMTunerError
P:010B 0AF080 rrrrrr  6  58728163         jmp     L436
                            28164 
                            28165 ; 3090 |                        else
                            28166 ; 3091 |            {
                            28167 ; 3092 |                                g_wFMTunerError.m_bBAND_LIMIT_LOW_ERROR = TRUE;
                            28168 
                            28170 L435:
                            28171 
                            28172 ; 3093 |            }
                            28173 ; 3094 |                        STFM1000TunerSearchEnded(s_wCurrentFMFrequency);
                            28174 
P:010D 0A7069 rrrrrr  6  59328170         bset    #9,y:Fg_wFMTunerError
P:010F 5EF000 rrrrrr  3  59628176 L436:   move    y:Fs_wCurrentFMFrequency,a
P:0111 0BF080 rrrrrr  6  60228177         jsr     FSTFM1000TunerSearchEnded
                            28178 
                            28179 ; 3095 |                }
                            28180 
P:0113 0AF080 rrrrrr  6  60828182         jmp     L441
                            28183 
                            28184 ; 3096 |                else
                            28185 ; 3097 |                {
                            28186 ; 3098 |                        s_bTunerSearchHitBandLimit=TRUE;
                            28187 
                            28189 L437:
                            28190 
                            28191 ; 3099 |                        if(s_iFMTunerSearchStatus>0)
                            28192 
P:0115 5FF000 rrrrrr  3  61128194         move    y:Fs_iFMTunerSearchStatus,b
P:0117 46700B rrrrrr  3  61428195         tst     b	                y0,x:Fs_bTunerSearchHitBandLimit
P:0119 0AF0AF rrrrrr  6  62028196         jle     L438
                            28197 
                            28198 ; 3100 |            {
                            28199 ; 3101 |                                //s_wCurrentFMFrequency = FM_BAND_LIMIT_LOW_FREQ + FM_FREQ_STEP;
                            28200 ; 3102 |                                s_wCurrentFMFrequency = FM_BAND_LIMIT_LOW_FREQ;
                            28201 
                            28204 
                            28205 ; 3103 |            }
                            28206 
P:011B 4D7000 rrrrrr  3  62328203         move    x1,y:Fs_wCurrentFMFrequency
P:011D 0AF080 rrrrrr  6  62928208         jmp     L440
                            28209 
                            28210 ; 3104 |                        else
                            28211 ; 3105 |            {
                            28212 ; 3106 |                                //s_wCurrentFMFrequency = FM_BAND_LIMIT_HIGH_FREQ - FM_FREQ_STEP;
                            28213 ; 3107 |                                s_wCurrentFMFrequency = FM_BAND_LIMIT_HIGH_FREQ;
                            28214 
                            28216 L438:
                            28218 
                            28219 ; 3108 |            }
                            28220 ; 3109 |
                            28221 ; 3110 |                        STFM1000TunerQuicksetStation(s_wCurrentFMFrequency);
                            28222 
P:011F 47F400 01A5E0  3  63228216         move    #108000,y1
P:0121 4F7000 rrrrrr  3  63528217         move    y1,y:Fs_wCurrentFMFrequency
P:0123 5EF000 rrrrrr  3  63828224 L440:   move    y:Fs_wCurrentFMFrequency,a
P:0125 0BF080 rrrrrr  6  64428225         jsr     FSTFM1000TunerQuicksetStation
                            28226 
                            28227 ; 3111 |                }
                            28228 ; 3112 |        }
                            28229 ; 3113 |
                            28230 ; 3114 |        return E_TUNER_BUSY;
                            28231 
                            28233 L441:
                            28234 
                            28235 ; 3115 |}
                            28236 
P:0127 05FF7C         4  64828238         movec   y:-(r7),ssh
P:0128 56F400 FFFFFC  3  65128233         move    #>-4,a
P:012A 00000C         4  65528242         rts
                            28244 
                            28245 ; 3116 |
                            28246 ; 3117 |
                            28247 ; 3118 |////////////////////////////////////////////////////////////////////////////////
                            28248 ; 3119 |//
                            28249 ; 3120 |//>  Name:          STFM1000EndAutoScanning
                            28250 ; 3121 |//
                            28251 ; 3122 |//   Type:          Function
                            28252 ; 3123 |//
                            28253 ; 3124 |//   Description:   Scan complete
                            28254 ; 3125 |//
                            28255 ; 3126 |//   Inputs:        None
                            28256 ; 3127 |//
                            28257 ; 3128 |//   Outputs:       Busy or SUCCESS
                            28258 ; 3129 |//
                            28259 ; 3130 |//   Notes:         none
                            28260 ; 3131 |//<
                            28261 ; 3132 |////////////////////////////////////////////////////////////////////////////////
                            28262 ; 3133 |_reentrant INT STFM1000EndAutoScanning( void )
                            28263 ; 3134 |{
                            28264 
                            28269 FSTFM1000EndAutoScanning:
                            28275 
                            28276 ; 3135 |        WORD wPresetFrequency;
                            28277 ; 3136 |        if ((wPresetFrequency = g_astPresetStations[0].Frequency)==0)
                            28278 
P:012B 055F7C         2  65728270         movec   ssh,y:(r7)+
P:012C 5FF000 rrrrrr  3  66028280         move    y:Fg_astPresetStations,b
P:012E 2B0000         2  66228282         move    #0,b2
P:012F 20000B         2  66428283         tst     b
P:0130 0AF0A2 rrrrrr  6  67028284         jne     L442
                            28285 
                            28286 ; 3137 |    {
                            28287 ; 3138 |                wPresetFrequency = FM_BAND_LIMIT_LOW_FREQ;
                            28288 
                            28291 
                            28292 ; 3139 |    }
                            28293 ; 3140 |        g_wFMTunerError.m_bSCANNING_STATION = FALSE;     // end preset scanning
                            28294 
P:0132 57F400 0155CC  3  67328290         move    #87500,b
                            28296 L442:
                            28297 
                            28298 ; 3141 |        g_wCurrentPreset = 1;
                            28299 
                            28303 
                            28304 ; 3142 |    // So can hanle other messages
                            28305 ; 3143 |        g_wFMTunerError.m_bPOWERED_OFF = FALSE;
                            28306 
                            28309 
                            28310 ; 3144 |
                            28311 ; 3145 |        return TunerDriverTuneToFrequency(wPresetFrequency);
                            28312 
P:0134 0A7044 rrrrrr  6  67928296         bclr    #4,y:Fg_wFMTunerError
P:0136 21AE00         2  68128314         move    b1,a
P:0137 47F400 000001  3  68428301         move    #>1,y1
P:0139 4F7000 rrrrrr  3  68728302         move    y1,y:Fg_wCurrentPreset
P:013B 0A704E rrrrrr  6  69328308         bclr    #14,y:Fg_wFMTunerError
P:013D 0BF080 rrrrrr  6  69928315         jsr     FTunerDriverTuneToFrequency
                            28317 
                            28318 ; 3146 |}
                            28319 
P:013F 05FF7C         4  70328321         movec   y:-(r7),ssh
P:0140 000000         2  70528321         nop             ; (inserted)
P:0141 00000C         4  70928325         rts
                            28327 
                            28328 ; 3147 |////////////////////////////////////////////////////////////////////////////////
                            28329 ; 3148 |//!
                            28330 ; 3149 |//! \brief      STFM tuner tuner lock sequence
                            28331 ; 3150 |//! \fntype     Function
                            28332 ; 3151 |//!
                            28333 ; 3152 |//! Function will perform the following steps:
                            28334 ; 3153 |//!     TBD when Generic Level implemented [get rssi into Settings Table
                            28335 ; 3154 |//!         (then NotifyApi())]
                            28336 ; 3155 |//!     get stereo status (then NotifyApi())
                            28337 ; 3156 |//!     SD_DP_On (Turn on data path on chip)
                            28338 ; 3157 |//!     DRI_On (Start DRI flow)
                            28339 ; 3158 |//!     Start DRI stream reception (ddi_dri_StartStream())
                            28340 ; 3159 |//!     unmutes tuner audio output
                            28341 ; 3160 |//!     enables tuner alert source (interrupt) - not relevant here since alert
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                            28342 ; 3161 |//!          carried by data flow which is turning on.
                            28343 ; 3162 |//!     Optimize Station (details TBD from STFM1000 HW group following empirical
                            28344 ; 3163 |//!          research).
                            28345 ; 3164 |//!
                            28346 ; 3165 |//! \param[in]  pTunerObject     Pointer to Tuner Object.
                            28347 ; 3166 |//!
                            28348 ; 3167 |//! \return     SUCCESS/ERROR.
                            28349 ; 3168 |//!
                            28350 ; 3169 |////////////////////////////////////////////////////////////////////////////////
                            28351 ; 3170 |_reentrant INT STFM1000TunerLockStation(void)
                            28352 ; 3171 |{
                            28353 
                            28358 FSTFM1000TunerLockStation:
                            28366 
                            28367 ; 3172 |    INT RetCode = SUCCESS;
                            28368 ; 3173 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            28369 ; 3174 |    // * get stereo status (then NotifyApi())
                            28370 ; 3175 |    //! Note on setting stereo status:  The stereo / mono status is determined
                            28371 ; 3176 |    //! in the filter function when it's processing the signal.  This variable
                            28372 ; 3177 |    //! must be set from within the filter.  TBD
                            28373 ; 3178 |#if 0
                            28374 ; 3179 |    // * Turn on data path on chip
                            28375 ; 3180 |    RetCode = STFM1000DataPathOn();
                            28376 ; 3181 |//    if (SUCCESS != RetCode)
                            28377 ; 3182 |//    {
                            28378 ; 3183 |//        SystemHalt();
                            28379 ; 3184 |//        return RetCode;
                            28380 ; 3185 |//    }
                            28381 ; 3186 |#endif
                            28382 ; 3187 |    // * Optimize Station
                            28383 ; 3188 |    RetCode = STFM1000OptimizeChannel();
                            28384 
P:0142 055F7C         2  71128359         movec   ssh,y:(r7)+
P:0143 0BF080 rrrrrr  6  71728386         jsr     FSTFM1000OptimizeChannel
                            28387 
                            28388 ; 3189 |//    if (SUCCESS != RetCode)
                            28389 ; 3190 |//    {
                            28390 ; 3191 |//        SystemHalt();
                            28391 ; 3192 |//        return RetCode;
                            28392 ; 3193 |//    }
                            28393 ; 3194 |#if 0
                            28394 ; 3195 |    // * Starts DRI transmission from tuner (tspec_v09u.pdf::DRI_on)
                            28395 ; 3196 |    RetCode = STFM1000DriOn();
                            28396 ; 3197 |    if (SUCCESS != RetCode)
                            28397 ; 3198 |    {
                            28398 ; 3199 |        //SystemHalt();
                            28399 ; 3200 |        return RetCode;
                            28400 ; 3201 |    }
                            28401 ; 3202 |#endif
                            28402 ; 3203 |    return E_TUNER_BUSY;
                            28403 
                            28406 
                            28407 ; 3204 |}
                            28408 
P:0145 05FF7C         4  72128410         movec   y:-(r7),ssh
P:0146 56F400 FFFFFC  3  72428405         move    #>-4,a
P:0148 00000C         4  72828414         rts
                            28416 
                            28417 ; 3205 |
                            28418 ; 3206 |////////////////////////////////////////////////////////////////////////////////
                            28419 ; 3207 |//!
                            28420 ; 3208 |//! \brief      Tune to a  new frequency value
                            28421 ; 3209 |//! \fntype     Function
                            28422 ; 3210 |//!
                            28423 ; 3211 |//! Function will perform the following steps:
                            28424 ; 3212 |//!     Determine the front end frequency to tune to
                            28425 ; 3213 |//!     Reconfigure TUNE1 & SDMNOMINAL registers to tune to new frequency
                            28426 ; 3214 |//!
                            28427 ; 3215 |//! \param[in]  wTuneFreqIn     new tuning frequency to set (in KHz)
                            28428 ; 3216 |//!
                            28429 ; 3217 |//! \return     SUCCESS/ERROR
                            28430 ; 3218 |//!
                            28431 ; 3219 |////////////////////////////////////////////////////////////////////////////////
                            28432 ; 3220 |_reentrant INT STFM1000QuickTune(WORD wTuneFreqIn)
                            28433 ; 3221 |{
                            28434 
                            28439 FSTFM1000QuickTune:
                            28468 
                            28469 ; 3222 |#define TCA   7240   // 72.4*100
                            28470 ; 3223 |#define TCB   7      // 0.07*100
                            28471 ; 3224 |#define CORNER_FREQUENCY 1034  // 7240/7
                            28472 ; 3225 |    WORD wTuneCap;
                            28473 ; 3226 |    INT RetCode;
                            28474 ; 3227 |    DWORD dwControlSelect;
                            28475 ; 3228 |    WORD wTuneFreq100kHzTemp;
                            28476 ; 3229 |#ifndef STFM1000_PLL_TABLE
                            28477 ; 3230 |    // Following variables used only to construct tables
                            28478 ; 3231 |    LONG ndiv;           // N Divider in PLL
                            28479 ; 3232 |    LONG incr;           // Increment in PLL
                            28480 ; 3233 |    LONG cicosr;         // CIC oversampling ratio
                            28481 ; 3234 |    LONG sdnominal;      // value to serve pilot/interpolator loop in SD
                            28482 ; 3235 |    LONG temp;        // used in tuning table construction
                            28483 ; 3236 |#ifdef OPTIMIZED_TUNE1_SDNOMINAL_CAL
                            28484 ; 3237 |    Fract_type FractTemp;
                            28485 ; 3238 |#endif
                            28486 ; 3239 |#endif
                            28487 ; 3240 |
                            28488 ; 3241 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            28489 
                            28495 
                            28496 ; 3242 |    WORD wTuneFreq100kHz = wTuneFreqIn / 100;
                            28497 
P:0149 055F7C         2  73028440         movec   ssh,y:(r7)+
P:014A 3F0E00         2  73228443         move    #14,n7
P:014B 66F400 rrrrrr  3  73528491         move    #FStfmTuneData,r6
P:014D 57F400 000064  3  73828499         move    #>100,b
P:014F 204F00         2  74028445         move    (r7)+n7
P:0150 0BF080 rrrrrr  6  74628500         jsr     Rdiv_uiuiui
                            28505 
                            28506 ; 3243 |
                            28507 ; 3244 |    // We assume that mix_reg is as defined in the steely dan memory map (and
                            28508 ; 3245 |    // then right-justified)
                            28509 ; 3246 |    // NOTE:  This is the default value to which mix_reg was initialized.
                            28510 ; 3247 |    // If it later will change dynamically, read it from the SD register now.
                            28511 ; 3248 |    WORD mix_reg = TUNE1_B2_MIX_REG;
                            28512 ; 3249 |    //s_wCurrentFMFrequency = wTuneFreqIn;
                            28513 ; 3250 |       // reset the value
                            28514 ; 3251 |    wSd_ctl_Confidence_u16 = 3;
                            28515 
                            28520 
                            28521 ; 3252 |
                            28522 ; 3253 |    wTuneFreq100kHzTemp = wTuneFreq100kHz;
                            28523 ; 3254 |    if (0 == mix_reg)
                            28524 ; 3255 |    // Need change sd_ctl_IfFreq_i back to INT if confirmed from Aarom
                            28525 ; 3256 |    //???????????????????????
                            28526 ; 3257 |    //??????????????????????
                            28527 ; 3258 |        pDrst->sd_ctl_IfFreq_i = -2;
                            28528 ; 3259 |    else if (1 == mix_reg)
                            28529 ; 3260 |        pDrst->sd_ctl_IfFreq_i = -1;
                            28530 
                            28535 
                            28536 ; 3261 |    else if (2 == mix_reg)
                            28537 ; 3262 |        pDrst->sd_ctl_IfFreq_i = 0;
                            28538 ; 3263 |    else if (3 == mix_reg)
                            28539 ; 3264 |        pDrst->sd_ctl_IfFreq_i = 1;
                            28540 ; 3265 |    else if (4 == mix_reg)
                            28541 ; 3266 |        pDrst->sd_ctl_IfFreq_i = 2;
                            28542 ; 3267 |
                            28543 ; 3268 |
                            28544 ; 3269 |    switch(wTuneFreq100kHz)
                            28545 
P:0152 3E2F00         2  74828532         move    #47,n6
P:0153 77F400 FFFFF4  3  75128547         move    #-12,n7
P:0155 210F00         2  75328501         move    a0,b
P:0156 46F400 000003  3  75628517         move    #>3,y0
P:0158 47F400 FFFFFF  3  75928533         move    #>-1,y1
P:015A 2B0000         2  76128551         move    #0,b2
P:015B 56F400 000383  3  76428550         move    #899,a
P:015D 4E7000 rrrrrr  3  76728518         move    y0,y:FwSd_ctl_Confidence_u16
P:015F 56F40D 000384  3  77028552         cmp     a,b     #900,a
P:0161 4F6E00         4  77428534         move    y1,y:(r6+n6)
P:0162 5D6F00         4  77828549         move    b1,y:(r7+n7)
P:0163 0AF0AA rrrrrr  6  78428553         jeq     L611
P:0165 56F40D 000393  3  78728554         cmp     a,b     #915,a
P:0167 0AF0AA rrrrrr  6  79328555         jeq     L612
P:0169 56F40D 0003A2  3  79628556         cmp     a,b     #930,a
P:016B 0AF0AA rrrrrr  6  80228557         jeq     L614
P:016D 56F40D 0003B1  3  80528558         cmp     a,b     #945,a
P:016F 0AF0AA rrrrrr  6  81128559         jeq     L615
P:0171 56F40D 0003BF  3  81428560         cmp     a,b     #959,a
P:0173 0AF0AA rrrrrr  6  82028561         jeq     L616
P:0175 56F40D 0003C0  3  82328562         cmp     a,b     #960,a
P:0177 0AF0AA rrrrrr  6  82928563         jeq     L617
P:0179 56F40D 0003CF  3  83228564         cmp     a,b     #975,a
P:017B 0AF0AA rrrrrr  6  83828565         jeq     L618
P:017D 56F40D 0003DE  3  84128566         cmp     a,b     #990,a
P:017F 0AF0AA rrrrrr  6  84728567         jeq     L619
P:0181 56F40D 0003ED  3  85028568         cmp     a,b     #1005,a
P:0183 0AF0AA rrrrrr  6  85628569         jeq     L620
P:0185 56F40D 0003FB  3  85928570         cmp     a,b     #1019,a
P:0187 0AF0AA rrrrrr  6  86528571         jeq     L621
P:0189 56F40D 0003FC  3  86828572         cmp     a,b     #1020,a
P:018B 0AF0AA rrrrrr  6  87428573         jeq     L622
P:018D 56F40D 00040B  3  87728574         cmp     a,b     #1035,a
P:018F 0AF0AA rrrrrr  6  88328575         jeq     L623
P:0191 56F40D 00041A  3  88628576         cmp     a,b     #1050,a
P:0193 0AF0AA rrrrrr  6  89228577         jeq     L625
P:0195 56F40D 000429  3  89528578         cmp     a,b     #1065,a
P:0197 0AF0AA rrrrrr  6  90128579         jeq     L626
P:0199 56F40D 000437  3  90428580         cmp     a,b     #1079,a
P:019B 0AF0AA rrrrrr  6  91028581         jeq     L627
P:019D 56F40D 000438  3  91328582         cmp     a,b     #1080,a
P:019F 0AF0AA rrrrrr  6  91928583         jeq     L628
P:01A1 56F40D 000375  3  92228584         cmp     a,b     #885,a
P:01A3 0AF0AA rrrrrr  6  92828585         jeq     L629
P:01A5 20000D         2  93028586         cmp     a,b
P:01A6 0AF0A2 rrrrrr  6  93628587         jne     L633
                            28588 
                            28589 ; 3270 |    {
                            28590 ; 3271 |
                            28591 ; 3272 |#ifdef FM_JAPAN_REGION
                            28592 ; 3273 |// **************************************************
                            28593 ; 3274 |// Japan Band Alternate Tunings to avoid RF spurs
                            28594 ; 3275 |// **************************************************
                            28595 ; 3276 |    case 840:         // change ZIF to 0Hz
                            28596 ; 3277 |        pDrst->sd_ctl_Tune1Data_dw = 0x84680;
                            28597 ; 3278 |        pDrst->sd_ctl_SdnominalData_dw = 0x1C11F704;
                            28598 ; 3279 |        break;
                            28599 ; 3280 |
                            28600 ; 3281 |    case 885:           // change ZIF to +0kHz
                            28601 ; 3282 |        pDrst->sd_ctl_Tune1Data_dw = 0x84AB0;
                            28602 ; 3283 |        pDrst->sd_ctl_SdnominalData_dw = 0x1BF9B021;
                            28603 ; 3284 |        break;
                            28604 ; 3285 |
                            28605 ; 3286 |    case 899:           // change ZIF to +100kHz
                            28606 ; 3287 |        pDrst->sd_ctl_Tune1Data_dw = 0xC4CC0;
                            28607 ; 3288 |        pDrst->sd_ctl_SdnominalData_dw = 0x1BB369A9;
                            28608 ; 3289 |        break;
                            28609 ; 3290 |
                            28610 ; 3291 |// **************************************************
                            28611 ; 3292 |// End - Japan Band Alternate Tunings to avoid RF spurs
                            28612 ; 3293 |// **************************************************
                            28613 ; 3294 |
                            28614 ; 3295 |#else  // must be US Band
                            28615 ; 3296 |// **************************************************
                            28616 ; 3297 |// US Band Alternate Tunings to avoid RF spurs
                            28617 ; 3298 |// **************************************************
                            28618 ; 3299 |
                            28619 ; 3300 |    case 885:           // change ZIF to +0kHz
                            28620 ; 3301 |        pDrst->sd_ctl_Tune1Data_dw = 0x84AB0;
                            28621 
                            28630 
                            28631 ; 3302 |        pDrst->sd_ctl_SdnominalData_dw = 0x1BF9B021;
                            28632 
                            28641 
                            28642 ; 3303 |        break;
                            28643 
P:01A8 3E311B         2  93828626         clr     b	                #$31,n6
P:01A9 46F400 F9B021  3  94128638         move    #$F9B021,y0
P:01AB 044E15         4  94528625         lua     (r6)+n6,r5
P:01AC 3E3300         2  94728634         move    #51,n6
P:01AD 47F400 00001B  3  95028637         move    #>$1B,y1
P:01AF 51F400 084AB0  3  95328627         move    #543408,b0
P:01B1 595D00         2  95528628         move    b0,y:(r5)+
P:01B2 5D5500         2  95728629         move    b1,y:(r5)-
P:01B3 044E15         4  96128636         lua     (r6)+n6,r5
P:01B4 000000         2  96328636         nop             ; (inserted)
P:01B5 4E5D00         2  96528639         move    y0,y:(r5)+
P:01B6 4F5500         2  96728640         move    y1,y:(r5)-
P:01B7 0AF080 rrrrrr  6  97328645         jmp     L646
                            28646 
                            28647 ; 3304 |
                            28648 ; 3305 |    case 899:           // change ZIF to +100kHz
                            28649 ; 3306 |        pDrst->sd_ctl_Tune1Data_dw = 0xC4CC0;
                            28650 
                            28652 L611:
                            28657 
                            28658 ; 3307 |        pDrst->sd_ctl_SdnominalData_dw = 0x1BB369A9;
                            28659 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
P:01B9 3E311B         2  97528655         clr     b	                #$31,n6
P:01BA 51F400 0C4CC0  3  97828656         move    #806080,b0
P:01BC 044E15         4  98228654         lua     (r6)+n6,r5
P:01BD 0AF080 rrrrrr  6  98828661         jmp     L613
                            28662 
                            28663 ; 3308 |        break;
                            28664 ; 3309 |
                            28665 ; 3310 |    case 900:           // change ZIF to 0kHz
                            28666 ; 3311 |        pDrst->sd_ctl_Tune1Data_dw = 0x84CC0;
                            28667 
                            28669 L612:
                            28674 
                            28675 ; 3312 |        pDrst->sd_ctl_SdnominalData_dw = 0x1BB369A9;
                            28676 
P:01BF 3E311B         2  99028672         clr     b	                #$31,n6
P:01C0 51F400 084CC0  3  99328673         move    #543936,b0
P:01C2 044E15         4  99728671         lua     (r6)+n6,r5
                            28678 L613:
                            28690 
                            28691 ; 3313 |        break;
                            28692 
P:01C3 3E3300         2  99928683         move    #51,n6
P:01C4 46F400 B369A9  3 100228687         move    #$B369A9,y0
P:01C6 47F400 00001B  3 100528686         move    #>$1B,y1
P:01C8 595D00         2 100728680         move    b0,y:(r5)+
P:01C9 5D5500         2 100928681         move    b1,y:(r5)-
P:01CA 044E15         4 101328685         lua     (r6)+n6,r5
P:01CB 000000         2 101528685         nop             ; (inserted)
P:01CC 4E5D00         2 101728688         move    y0,y:(r5)+
P:01CD 4F5500         2 101928689         move    y1,y:(r5)-
P:01CE 0AF080 rrrrrr  6 102528694         jmp     L646
                            28695 
                            28696 ; 3314 |
                            28697 ; 3315 |    case 915:           // change ZIF to +0kHz
                            28698 ; 3316 |        pDrst->sd_ctl_Tune1Data_dw = 0x84CD0;
                            28699 
                            28701 L614:
                            28708 
                            28709 ; 3317 |        pDrst->sd_ctl_SdnominalData_dw = 0x1C299A5B;
                            28710 
                            28720 
                            28721 ; 3318 |        break;
                            28722 
P:01D0 3E311B         2 102728704         clr     b	                #$31,n6
P:01D1 56F400 00001C  3 103028715         move    #>$1C,a
P:01D3 044E15         4 103428703         lua     (r6)+n6,r5
P:01D4 3E3300         2 103628712         move    #51,n6
P:01D5 51F400 084CD0  3 103928705         move    #543952,b0
P:01D7 595D00         2 104128706         move    b0,y:(r5)+
P:01D8 5D5500         2 104328707         move    b1,y:(r5)-
P:01D9 044E15         4 104728714         lua     (r6)+n6,r5
P:01DA 57F400 299A5B  3 105028716         move    #$299A5B,b
P:01DC 5F5D00         2 105228717         move    b,y:(r5)+
P:01DD 5E5500         2 105428718         move    a,y:(r5)-
P:01DE 0AF080 rrrrrr  6 106028724         jmp     L646
                            28725 
                            28726 ; 3319 |
                            28727 ; 3320 |    case 930:           // change ZIF to +0kHz
                            28728 ; 3321 |        pDrst->sd_ctl_Tune1Data_dw = 0x84ee0;
                            28729 
                            28731 L615:
                            28738 
                            28739 ; 3322 |        pDrst->sd_ctl_SdnominalData_dw = 0x1be3e6aa;
                            28740 
                            28749 
                            28750 ; 3323 |        break;
                            28751 
P:01E0 3E311B         2 106228734         clr     b	                #$31,n6
P:01E1 46F400 E3E6AA  3 106528746         move    #$E3E6AA,y0
P:01E3 044E15         4 106928733         lua     (r6)+n6,r5
P:01E4 3E3300         2 107128742         move    #51,n6
P:01E5 47F400 00001B  3 107428745         move    #>$1B,y1
P:01E7 51F400 084EE0  3 107728735         move    #544480,b0
P:01E9 595D00         2 107928736         move    b0,y:(r5)+
P:01EA 5D5500         2 108128737         move    b1,y:(r5)-
P:01EB 044E15         4 108528744         lua     (r6)+n6,r5
P:01EC 000000         2 108728744         nop             ; (inserted)
P:01ED 4E5D00         2 108928747         move    y0,y:(r5)+
P:01EE 4F5500         2 109128748         move    y1,y:(r5)-
P:01EF 0AF080 rrrrrr  6 109728753         jmp     L646
                            28754 
                            28755 ; 3324 |
                            28756 ; 3325 |    case 945:           // change ZIF to +0kHz
                            28757 ; 3326 |        pDrst->sd_ctl_Tune1Data_dw = 0x84ef0;
                            28758 
                            28760 L616:
                            28767 
                            28768 ; 3327 |        pDrst->sd_ctl_SdnominalData_dw = 0x1c570f8b;
                            28769 
                            28778 
                            28779 ; 3328 |        break;
                            28780 
P:01F1 3E311B         2 109928763         clr     b	                #$31,n6
P:01F2 56F400 00001C  3 110228774         move    #>$1C,a
P:01F4 044E15         4 110628762         lua     (r6)+n6,r5
P:01F5 3E3300         2 110828771         move    #51,n6
P:01F6 51F400 084EF0  3 111128764         move    #544496,b0
P:01F8 595D00         2 111328765         move    b0,y:(r5)+
P:01F9 5D5500         2 111528766         move    b1,y:(r5)-
P:01FA 044E15         4 111928773         lua     (r6)+n6,r5
P:01FB 57F400 570F8B  3 112228775         move    #$570F8B,b
P:01FD 5F5D00         2 112428776         move    b,y:(r5)+
P:01FE 5E5500         2 112628777         move    a,y:(r5)-
P:01FF 0AF080 rrrrrr  6 113228782         jmp     L646
                            28783 
                            28784 ; 3329 |
                            28785 ; 3330 |    case 959:           // change ZIF to +100kHz
                            28786 ; 3331 |        pDrst->sd_ctl_Tune1Data_dw = 0xC5100;
                            28787 
                            28789 L617:
                            28796 
                            28797 ; 3332 |        pDrst->sd_ctl_SdnominalData_dw = 0x1C11F704;
                            28798 
P:0201 3E311B         2 113428792         clr     b	                #$31,n6
P:0202 51F400 0C5100  3 113728793         move    #$C5100,b0
P:0204 044E15         4 114128791         lua     (r6)+n6,r5
P:0205 000000         2 114328791         nop             ; (inserted)
P:0206 595D00         2 114528794         move    b0,y:(r5)+
P:0207 5D5500         2 114728795         move    b1,y:(r5)-
P:0208 0AF080 rrrrrr  6 115328800         jmp     L632
                            28801 
                            28802 ; 3333 |        break;
                            28803 ; 3334 |
                            28804 ; 3335 |    case 960:         // change ZIF to 0Hz
                            28805 ; 3336 |        pDrst->sd_ctl_Tune1Data_dw = 0x85100;
                            28806 
                            28808 L618:
                            28815 
                            28816 ; 3337 |        pDrst->sd_ctl_SdnominalData_dw = 0x1C11F704;
                            28817 
P:020A 3E311B         2 115528811         clr     b	                #$31,n6
P:020B 51F400 085100  3 115828812         move    #$85100,b0
P:020D 044E15         4 116228810         lua     (r6)+n6,r5
P:020E 000000         2 116428810         nop             ; (inserted)
P:020F 595D00         2 116628813         move    b0,y:(r5)+
P:0210 5D5500         2 116828814         move    b1,y:(r5)-
P:0211 0AF080 rrrrrr  6 117428819         jmp     L632
                            28820 
                            28821 ; 3338 |        break;
                            28822 ; 3339 |
                            28823 ; 3340 |    case 975:           // change ZIF to +0kHz
                            28824 ; 3341 |        pDrst->sd_ctl_Tune1Data_dw = 0x85310;
                            28825 
                            28827 L619:
                            28834 
                            28835 ; 3342 |        pDrst->sd_ctl_SdnominalData_dw = 0x1bd03d57;
                            28836 
                            28845 
                            28846 ; 3343 |        break;
                            28847 
P:0213 3E311B         2 117628830         clr     b	                #$31,n6
P:0214 46F400 D03D57  3 117928842         move    #$D03D57,y0
P:0216 044E15         4 118328829         lua     (r6)+n6,r5
P:0217 3E3300         2 118528838         move    #51,n6
P:0218 47F400 00001B  3 118828841         move    #>$1B,y1
P:021A 51F400 085310  3 119128831         move    #545552,b0
P:021C 595D00         2 119328832         move    b0,y:(r5)+
P:021D 5D5500         2 119528833         move    b1,y:(r5)-
P:021E 044E15         4 119928840         lua     (r6)+n6,r5
P:021F 000000         2 120128840         nop             ; (inserted)
P:0220 4E5D00         2 120328843         move    y0,y:(r5)+
P:0221 4F5500         2 120528844         move    y1,y:(r5)-
P:0222 0AF080 rrrrrr  6 121128849         jmp     L646
                            28850 
                            28851 ; 3344 |
                            28852 ; 3345 |    case 990:           // change ZIF to +0kHz
                            28853 ; 3346 |        pDrst->sd_ctl_Tune1Data_dw = 0x85320;
                            28854 
                            28856 L620:
                            28863 
                            28864 ; 3347 |        pDrst->sd_ctl_SdnominalData_dw = 0x1c3dc822;
                            28865 
                            28874 
                            28875 ; 3348 |        break;
                            28876 
P:0224 3E311B         2 121328859         clr     b	                #$31,n6
P:0225 56F400 00001C  3 121628870         move    #>$1C,a
P:0227 044E15         4 122028858         lua     (r6)+n6,r5
P:0228 3E3300         2 122228867         move    #51,n6
P:0229 51F400 085320  3 122528860         move    #545568,b0
P:022B 595D00         2 122728861         move    b0,y:(r5)+
P:022C 5D5500         2 122928862         move    b1,y:(r5)-
P:022D 044E15         4 123328869         lua     (r6)+n6,r5
P:022E 57F400 3DC822  3 123628871         move    #$3DC822,b
P:0230 5F5D00         2 123828872         move    b,y:(r5)+
P:0231 5E5500         2 124028873         move    a,y:(r5)-
P:0232 0AF080 rrrrrr  6 124628878         jmp     L646
                            28879 
                            28880 ; 3349 |
                            28881 ; 3350 |    case 1005:          // change ZIF to +0kHz
                            28882 ; 3351 |        pDrst->sd_ctl_Tune1Data_dw = 0x85530;
                            28883 
                            28885 L621:
                            28892 
                            28893 ; 3352 |        pDrst->sd_ctl_SdnominalData_dw = 0x1bfc93ff;
                            28894 
                            28903 
                            28904 ; 3353 |        break;
                            28905 
P:0234 3E311B         2 124828888         clr     b	                #$31,n6
P:0235 46F400 FC93FF  3 125128900         move    #$FC93FF,y0
P:0237 044E15         4 125528887         lua     (r6)+n6,r5
P:0238 3E3300         2 125728896         move    #51,n6
P:0239 47F400 00001B  3 126028899         move    #>$1B,y1
P:023B 51F400 085530  3 126328889         move    #546096,b0
P:023D 595D00         2 126528890         move    b0,y:(r5)+
P:023E 5D5500         2 126728891         move    b1,y:(r5)-
P:023F 044E15         4 127128898         lua     (r6)+n6,r5
P:0240 000000         2 127328898         nop             ; (inserted)
P:0241 4E5D00         2 127528901         move    y0,y:(r5)+
P:0242 4F5500         2 127728902         move    y1,y:(r5)-
P:0243 0AF080 rrrrrr  6 128328907         jmp     L646
                            28908 
                            28909 ; 3354 |
                            28910 ; 3355 |    case 1019:       // change ZIF to +100kHz
                            28911 ; 3356 |        pDrst->sd_ctl_Tune1Data_dw = 0xC5740;
                            28912 
                            28914 L622:
                            28919 
                            28920 ; 3357 |        pDrst->sd_ctl_SdnominalData_dw = 0x1BBE683C;
                            28921 
P:0245 3E311B         2 128528917         clr     b	                #$31,n6
P:0246 51F400 0C5740  3 128828918         move    #808768,b0
P:0248 044E15         4 129228916         lua     (r6)+n6,r5
P:0249 0AF080 rrrrrr  6 129828923         jmp     L624
                            28924 
                            28925 ; 3358 |        break;
                            28926 ; 3359 |
                            28927 ; 3360 |    case 1020:       // change ZIF to +0kHz
                            28928 ; 3361 |        pDrst->sd_ctl_Tune1Data_dw = 0x85740;
                            28929 
                            28931 L623:
                            28936 
                            28937 ; 3362 |        pDrst->sd_ctl_SdnominalData_dw = 0x1bbe683c;
                            28938 
P:024B 3E311B         2 130028934         clr     b	                #$31,n6
P:024C 51F400 085740  3 130328935         move    #546624,b0
P:024E 044E15         4 130728933         lua     (r6)+n6,r5
                            28940 L624:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                            28952 
                            28953 ; 3363 |        break;
                            28954 
P:024F 3E3300         2 130928945         move    #51,n6
P:0250 46F400 BE683C  3 131228949         move    #$BE683C,y0
P:0252 47F400 00001B  3 131528948         move    #>$1B,y1
P:0254 595D00         2 131728942         move    b0,y:(r5)+
P:0255 5D5500         2 131928943         move    b1,y:(r5)-
P:0256 044E15         4 132328947         lua     (r6)+n6,r5
P:0257 000000         2 132528947         nop             ; (inserted)
P:0258 4E5D00         2 132728950         move    y0,y:(r5)+
P:0259 4F5500         2 132928951         move    y1,y:(r5)-
P:025A 0AF080 rrrrrr  6 133528956         jmp     L646
                            28957 
                            28958 ; 3364 |
                            28959 ; 3365 |    case 1035:          // change ZIF to +0kHz
                            28960 ; 3366 |        pDrst->sd_ctl_Tune1Data_dw = 0x85750;
                            28961 
                            28963 L625:
                            28970 
                            28971 ; 3367 |        pDrst->sd_ctl_SdnominalData_dw = 0x1c26dab6;
                            28972 
                            28981 
                            28982 ; 3368 |        break;
                            28983 
P:025C 3E311B         2 133728966         clr     b	                #$31,n6
P:025D 56F400 00001C  3 134028977         move    #>$1C,a
P:025F 044E15         4 134428965         lua     (r6)+n6,r5
P:0260 3E3300         2 134628974         move    #51,n6
P:0261 51F400 085750  3 134928967         move    #546640,b0
P:0263 595D00         2 135128968         move    b0,y:(r5)+
P:0264 5D5500         2 135328969         move    b1,y:(r5)-
P:0265 044E15         4 135728976         lua     (r6)+n6,r5
P:0266 57F400 26DAB6  3 136028978         move    #$26DAB6,b
P:0268 5F5D00         2 136228979         move    b,y:(r5)+
P:0269 5E5500         2 136428980         move    a,y:(r5)-
P:026A 0AF080 rrrrrr  6 137028985         jmp     L646
                            28986 
                            28987 ; 3369 |
                            28988 ; 3370 |    case 1050:          // change ZIF to +0kHz
                            28989 ; 3371 |        pDrst->sd_ctl_Tune1Data_dw = 0x85960;
                            28990 
                            28992 L626:
                            28999 
                            29000 ; 3372 |        pDrst->sd_ctl_SdnominalData_dw = 0x1be922b4;
                            29001 
                            29010 
                            29011 ; 3373 |        break;
                            29012 
P:026C 3E311B         2 137228995         clr     b	                #$31,n6
P:026D 46F400 E922B4  3 137529007         move    #$E922B4,y0
P:026F 044E15         4 137928994         lua     (r6)+n6,r5
P:0270 3E3300         2 138129003         move    #51,n6
P:0271 47F400 00001B  3 138429006         move    #>$1B,y1
P:0273 51F400 085960  3 138728996         move    #547168,b0
P:0275 595D00         2 138928997         move    b0,y:(r5)+
P:0276 5D5500         2 139128998         move    b1,y:(r5)-
P:0277 044E15         4 139529005         lua     (r6)+n6,r5
P:0278 000000         2 139729005         nop             ; (inserted)
P:0279 4E5D00         2 139929008         move    y0,y:(r5)+
P:027A 4F5500         2 140129009         move    y1,y:(r5)-
P:027B 0AF080 rrrrrr  6 140729014         jmp     L646
                            29015 
                            29016 ; 3374 |
                            29017 ; 3375 |    case 1065:          // change ZIF to +0kHz
                            29018 ; 3376 |        pDrst->sd_ctl_Tune1Data_dw = 0x85970;
                            29019 
                            29021 L627:
                            29028 
                            29029 ; 3377 |        pDrst->sd_ctl_SdnominalData_dw = 0x1c4f357c;
                            29030 
                            29039 
                            29040 ; 3378 |        break;
                            29041 
P:027D 3E311B         2 140929024         clr     b	                #$31,n6
P:027E 56F400 00001C  3 141229035         move    #>$1C,a
P:0280 044E15         4 141629023         lua     (r6)+n6,r5
P:0281 3E3300         2 141829032         move    #51,n6
P:0282 51F400 085970  3 142129025         move    #547184,b0
P:0284 595D00         2 142329026         move    b0,y:(r5)+
P:0285 5D5500         2 142529027         move    b1,y:(r5)-
P:0286 044E15         4 142929034         lua     (r6)+n6,r5
P:0287 57F400 4F357C  3 143229036         move    #$4F357C,b
P:0289 5F5D00         2 143429037         move    b,y:(r5)+
P:028A 5E5500         2 143629038         move    a,y:(r5)-
P:028B 0AF080 rrrrrr  6 144229043         jmp     L646
                            29044 
                            29045 ; 3379 |
                            29046 ; 3380 |    case 1079:  // change ZIF to +100kHz
                            29047 ; 3381 |        pDrst->sd_ctl_Tune1Data_dw = 0xC5B80;
                            29048 
                            29050 L628:
                            29057 
                            29058 ; 3382 |        pDrst->sd_ctl_SdnominalData_dw = 0x1C11F704;
                            29059 
P:028D 3E311B         2 144429053         clr     b	                #$31,n6
P:028E 51F400 0C5B80  3 144729054         move    #809856,b0
P:0290 044E15         4 145129052         lua     (r6)+n6,r5
P:0291 000000         2 145329052         nop             ; (inserted)
P:0292 595D00         2 145529055         move    b0,y:(r5)+
P:0293 5D5500         2 145729056         move    b1,y:(r5)-
P:0294 0AF080 rrrrrr  6 146329061         jmp     L632
                            29062 
                            29063 ; 3383 |        break;
                            29064 ; 3384 |
                            29065 ; 3385 |    case 1080:  // change ZIF to 0Hz
                            29066 ; 3386 |        pDrst->sd_ctl_Tune1Data_dw = 0x85B80;
                            29067 
                            29069 L629:
                            29076 
                            29077 ; 3387 |        pDrst->sd_ctl_SdnominalData_dw = 0x1C11F704;
                            29078 
P:0296 3E311B         2 146529072         clr     b	                #$31,n6
P:0297 51F400 085B80  3 146829073         move    #547712,b0
P:0299 044E15         4 147229071         lua     (r6)+n6,r5
P:029A 000000         2 147429071         nop             ; (inserted)
P:029B 595D00         2 147629074         move    b0,y:(r5)+
P:029C 5D5500         2 147829075         move    b1,y:(r5)-
                            29080 L632:
                            29087 
                            29088 ; 3388 |        break;
                            29089 
P:029D 3E3300         2 148029080         move    #51,n6
P:029E 46F400 11F704  3 148329084         move    #$11F704,y0
P:02A0 044E15         4 148729082         lua     (r6)+n6,r5
P:02A1 47F400 00001C  3 149029083         move    #>$1C,y1
P:02A3 4E5D00         2 149229085         move    y0,y:(r5)+
P:02A4 4F5500         2 149429086         move    y1,y:(r5)-
P:02A5 0AF080 rrrrrr  6 150029091         jmp     L646
                            29092 
                            29093 ; 3389 |// **************************************************
                            29094 ; 3390 |// End - US Band Alternate Tunings to avoid RF spurs
                            29095 ; 3391 |// **************************************************
                            29096 ; 3392 |#endif  // end #ifdef FM_JAPAN_REGION
                            29097 ; 3393 |
                            29098 ; 3394 |    default:
                            29099 ; 3395 |#ifndef STFM1000_PLL_TABLE
                            29100 ; 3396 |        wTuneFreq100kHz = wTuneFreq100kHz + pDrst->sd_ctl_IfFreq_i;
                            29101 
                            29103 L633:
                            29109 
                            29110 ; 3397 |#ifndef OPTIMIZED_TUNE1_SDNOMINAL_CAL
                            29111 ; 3398 |        // Don't try to optimize the calculation, the compile could
                            29112 ; 3399 |        // do something to give your incorrect results
                            29113 ; 3400 |        ndiv = (LONG)((wTuneFreq100kHz+14)/15) - 48;
                            29114 
P:02A7 21A671         2 150229103         tfr     y1,a	                b1,y0
P:02A8 77F450 FFFFF5  3 150529105         add     y0,a	                #-11,n7
P:02AA 218500         2 150729106         move    a1,x1
P:02AB 56F400 00000E  3 151029119         move    #>14,a
P:02AD 4D6F00         4 151429118         move    x1,y:(r7+n7)
P:02AE 57F460 00000F  3 151729120         add     x1,a	                #>15,b
P:02B0 0BF080 rrrrrr  6 152329124         jsr     Rdiv_uiuiui
                            29138 
                            29139 ; 3401 |        incr = (LONG)(wTuneFreq100kHz/15);
                            29140 
P:02B2 2C0000         2 152529125         move    #0,a1
P:02B3 2A0000         2 152729126         move    #0,a2
P:02B4 270000         2 152929127         move    #0,y1
P:02B5 46F400 000030  3 153229128         move    #>$30,y0
P:02B7 77F434 FFFFF6  3 153529129         sub     y,a	                #-10,n7
P:02B9 205F00         2 153729131         move    (r7)+
P:02BA 5C6F00         4 154129133         move    a1,y:(r7+n7)
P:02BB 205700         2 154329134         move    (r7)-
P:02BC 586F00         4 154729136         move    a0,y:(r7+n7)
P:02BD 77F400 FFFFF5  3 155029142         move    #-11,n7
P:02BF 000000         2 155229142         nop             ; (inserted)
P:02C0 5EEF00         4 155629144         move    y:(r7+n7),a
P:02C1 0BF080 rrrrrr  6 156229145         jsr     Rdiv_uiuiui
                            29149 
                            29150 ; 3402 |        incr = wTuneFreq100kHz - incr*15;
                            29151 
                            29189 
                            29190 ; 3403 |        cicosr = (LONG)(wTuneFreq100kHz*2/3.0/16.0 + 0.5);
                            29191 
P:02C3 270000         2 156429155         move    #0,y1
P:02C4 250000         2 156629147         move    #0,x1
P:02C5 210400         2 156829146         move    a0,x0
P:02C6 59EF00         4 157229153         move    y:(r7+n7),b0
P:02C7 77F400 FFFFF8  3 157529156         move    #-8,n7
P:02C9 205F00         2 157729157         move    (r7)+
P:02CA 212600         2 157929154         move    b0,y0
P:02CB 4F6F00         4 158329159         move    y1,y:(r7+n7)
P:02CC 205700         2 158529160         move    (r7)-
P:02CD 4E6F00         4 158929162         move    y0,y:(r7+n7)
P:02CE 205F00         2 159129173         move    (r7)+
P:02CF 46F400 00000F  3 159429163         move    #>15,y0
P:02D1 0040F8         2 159629164         ori     #$40,mr
P:02D2 000000         2 159829164         nop             ; (inserted)
P:02D3 2000D8         2 160029166         mpy     y0,x0,b
P:02D4 2128EA         2 160229167         mac     x1,y0,b b0,a0
P:02D5 2000CA         2 160429168         mac     x0,y1,b
P:02D6 212CFA         2 160629169         mac     y1,x1,b b0,a1
P:02D7 00BFB8         2 160829170         andi    #$BF,mr
P:02D8 212A00         2 161029171         move    b0,a2
P:02D9 5FEF22         4 161429172         asr     a	                y:(r7+n7),b
P:02DA 205700         2 161629176         move    (r7)-
P:02DB 59EF00         4 162029178         move    y:(r7+n7),b0
P:02DC 77F400 FFFFFA  3 162329180         move    #-6,n7
P:02DE 205F1C         2 162529179         sub     a,b	                (r7)+
P:02DF 5D6F00         4 162929183         move    b1,y:(r7+n7)
P:02E0 205700         2 163129184         move    (r7)-
P:02E1 596F00         4 163529186         move    b0,y:(r7+n7)
P:02E2 77F400 FFFFF5  3 163829193         move    #-11,n7
P:02E4 000000         2 164029193         nop             ; (inserted)
P:02E5 5EEF00         4 164429195         move    y:(r7+n7),a
P:02E6 200033         2 164629196         lsl     a
P:02E7 0BF080 rrrrrr  6 165229197         jsr     Rfpcuf12
P:02E9 256000         2 165429198         move    #<$60,x1
P:02EA 44F400 000081  3 165729199         move    #>$81,x0
P:02EC 0BF080 rrrrrr  6 166329200         jsr     Rfpdivf2
P:02EE 254000         2 166529201         move    #<$40,x1
P:02EF 44F400 000084  3 166829202         move    #>$84,x0
P:02F1 0BF080 rrrrrr  6 167429203         jsr     Rfpdivf2
P:02F3 254000         2 167629204         move    #<$40,x1
P:02F4 44F400 00007F  3 167929205         move    #>$7F,x0
P:02F6 0BF080 rrrrrr  6 168529206         jsr     Rfpaddf2
P:02F8 0BF080 rrrrrr  6 169129207         jsr     Rfpcfi22
                            29211 
                            29212 ; 3404 |        sdnominal =
                            29213 ; 3405 |            (LONG)(wTuneFreq100kHz*100.0e3/1.5/(LONG)cicosr/2.0/2.0*2.0*8.0*256.0/228.0e3*65536);
                            29214 
P:02FA 210600         2 169329208         move    a0,y0
P:02FB 218700         2 169529209         move    a1,y1
P:02FC 5EEF00         4 169929216         move    y:(r7+n7),a
P:02FD 0BF080 rrrrrr  6 170529217         jsr     Rfpcuf12
P:02FF 45F400 61A800  3 170829221         move    #$61A800,x1
P:0301 44F400 000090  3 171129222         move    #>$90,x0
P:0303 0BF080 rrrrrr  6 171729223         jsr     Rfpmulf2
P:0305 256000         2 171929224         move    #<$60,x1
P:0306 44F400 000080  3 172229225         move    #>$80,x0
P:0308 0BF080 rrrrrr  6 172829226         jsr     Rfpdivf2
P:030A 77F400 FFFFFC  3 173129231         move    #-4,n7
P:030C 21E400         2 173329227         move    b,x0
P:030D 21C571         2 173529229         tfr     y1,a	                a,x1
P:030E 205F00         2 173729232         move    (r7)+
P:030F 20C800         2 173929230         move    y0,a0
P:0310 5C6F00         4 174329234         move    a1,y:(r7+n7)
P:0311 205700         2 174529235         move    (r7)-
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0312 586F00         4 174929237         move    a0,y:(r7+n7)
P:0313 0BF080 rrrrrr  6 175529238         jsr     Rfpcif22
P:0315 77F400 FFFFFE  3 175829241         move    #-2,n7
P:0317 205F00         2 176029242         move    (r7)+
P:0318 4D6F00         4 176429244         move    x1,y:(r7+n7)
P:0319 205700         2 176629245         move    (r7)-
P:031A 4C6F00         4 177029247         move    x0,y:(r7+n7)
P:031B 205F00         2 177229250         move    (r7)+
P:031C 16EF00         4 177629249         move    a,x1	                y:(r7+n7),a
P:031D 205700         2 177829253         move    (r7)-
P:031E 1BEF00         4 178229248         move    b,x0	                y:(r7+n7),b
P:031F 0BF080 rrrrrr  6 178829256         jsr     Rfpdivf2
P:0321 254000         2 179029257         move    #<$40,x1
P:0322 44F400 000081  3 179329258         move    #>$81,x0
P:0324 20A700         2 179529260         move    x1,y1
P:0325 208600         2 179729259         move    x0,y0
P:0326 0BF080 rrrrrr  6 180329261         jsr     Rfpdivf2
P:0328 20C400         2 180529262         move    y0,x0
P:0329 20E500         2 180729263         move    y1,x1
P:032A 0BF080 rrrrrr  6 181329264         jsr     Rfpdivf2
P:032C 20C400         2 181529265         move    y0,x0
P:032D 20E500         2 181729266         move    y1,x1
P:032E 0BF080 rrrrrr  6 182329267         jsr     Rfpmulf2
P:0330 254000         2 182529268         move    #<$40,x1
P:0331 44F400 000083  3 182829269         move    #>$83,x0
P:0333 0BF080 rrrrrr  6 183429270         jsr     Rfpmulf2
P:0335 254000         2 183629271         move    #<$40,x1
P:0336 44F400 000088  3 183929272         move    #>$88,x0
P:0338 0BF080 rrrrrr  6 184529273         jsr     Rfpmulf2
P:033A 45F400 6F5400  3 184829274         move    #$6F5400,x1
P:033C 44F400 000091  3 185129275         move    #>$91,x0
P:033E 0BF080 rrrrrr  6 185729276         jsr     Rfpdivf2
P:0340 254000         2 185929277         move    #<$40,x1
P:0341 44F400 000090  3 186229278         move    #>$90,x0
P:0343 0BF080 rrrrrr  6 186829279         jsr     Rfpmulf2
P:0345 0BF080 rrrrrr  6 187429280         jsr     Rfpcfi22
                            29282 
                            29283 ; 3406 |#else
                            29284 ; 3407 |        //      ndiv = (DWORD)((wTuneFreq100kHz + 14) / 15) - 48;
                            29285 ; 3408 |        FractTemp.I = 2048 * (wTuneFreq100kHz + 14) + 1;    // scale for rounding
                            29286 ; 3409 |        FractTemp.F = FractTemp.F * OneFifteenth;       // Multiply as _fract values
                            29287 ; 3410 |        ndiv = FractTemp.I >> 11;                       // unscale for rounding
                            29288 ; 3411 |        ndiv = ndiv - 48;
                            29289 ; 3412 |
                            29290 ; 3413 |        //      incr = wTuneFreq100kHz - (DWORD)(wTuneFreq100kHz / 15) * 15;
                            29291 ; 3414 |        FractTemp.I = (2048 * wTuneFreq100kHz) + 1; // scale for rounding
                            29292 ; 3415 |        FractTemp.F = FractTemp.F * OneFifteenth;   // Multiply as _fract values
                            29293 ; 3416 |        temp = FractTemp.I >> 11;                   // unscale for rounding
                            29294 ; 3417 |        temp = temp * 15;
                            29295 ; 3418 |        incr = wTuneFreq100kHz - temp;
                            29296 ; 3419 |
                            29297 ; 3420 |        //      cicosr = (DWORD)(wTuneFreq100kHz * 2 / 3.0 / 16.0 + 0.5);   // cicosr in range [32,45]
                            29298 ; 3421 |        FractTemp.I = 1024 * wTuneFreq100kHz;
                            29299 ; 3422 |        FractTemp.F = FractTemp.F * OneTwelfth;         // Multiply as _fract values
                            29300 ; 3423 |        cicosr = FractTemp.I;
                            29301 ; 3424 |        cicosr = cicosr + 1024;                         // Round to nearest 0.5
                            29302 ; 3425 |        cicosr = cicosr >> 11;                          // Unscale for rounding
                            29303 ; 3426 |
                            29304 ; 3427 |        // sdnominal = (DWORD)(wTuneFreq100kHz * 100.0e3 / 1.5 /(DWORD)cicosr2 / 2.0 / 2.0 * 2.0 * 8.0 * 256.0 / 228.0e3 * 65536);
                            29305 ; 3428 |        sdnominal = wTuneFreq100kHz * FractCicosr[cicosr - 32]; // Array is pre-scaled for rounding
                            29306 ; 3429 |        sdnominal = sdnominal >> 12;                            // unscale for rounding
                            29307 ; 3430 |#endif
                            29308 ; 3431 |        temp = 0x00000000;                                    // clear
                            29309 ; 3432 |        temp = temp | ((cicosr<<9)  & TUNE1_CICOSR_REG_MASK);  // bits[14:9] 0x00007E00
                            29310 
P:0347 77F400 FFFFFC  3 187729312         move    #-4,n7
P:0349 205F00         2 187929313         move    (r7)+
P:034A 5FEF00         4 188329315         move    y:(r7+n7),b
P:034B 205700         2 188529316         move    (r7)-
P:034C 59EF00         4 188929318         move    y:(r7+n7),b0
P:034D 20003A         2 189129321         asl     b
P:034E 20003A         2 189329321         asl     b
P:034F 20003A         2 189529321         asl     b
P:0350 20003A         2 189729321         asl     b
P:0351 20003A         2 189929321         asl     b
P:0352 20003A         2 190129321         asl     b
P:0353 20003A         2 190329321         asl     b
P:0354 20003A         2 190529321         asl     b
P:0355 20003A         2 190729321         asl     b
                            29323 L684:
                            29346 
                            29347 ; 3433 |        temp = temp | ((ndiv<<4)    & TUNE1_PLL_DIV_REG_MASK); // bits[8:4]  0x000001F0
                            29348 
P:0356 21A600         2 190929330         move    b1,y0
P:0357 44F400 007E00  3 191229329         move    #$7E00,x0
P:0359 212D00         2 191429331         move    b0,b1
P:035A 25004E         2 191629332         and     x0,b	                #0,x1
P:035B 21A900         2 191829333         move    b1,b0
P:035C 20CD00         2 192029334         move    y0,b1
P:035D 205F6E         2 192229335         and     x1,b	                (r7)+
P:035E 212600         2 192429336         move    b0,y0
P:035F 21AF00         2 192629337         move    b1,b
P:0360 20C900         2 192829338         move    y0,b0
P:0361 5D6F00         4 193229341         move    b1,y:(r7+n7)
P:0362 205700         2 193429342         move    (r7)-
P:0363 596F00         4 193829344         move    b0,y:(r7+n7)
P:0364 77F400 FFFFF6  3 194129350         move    #-10,n7
P:0366 205F00         2 194329351         move    (r7)+
P:0367 5FEF00         4 194729353         move    y:(r7+n7),b
P:0368 205700         2 194929354         move    (r7)-
P:0369 59EF00         4 195329356         move    y:(r7+n7),b0
P:036A 20003A         2 195529359         asl     b
P:036B 20003A         2 195729359         asl     b
P:036C 20003A         2 195929359         asl     b
P:036D 20003A         2 196129359         asl     b
                            29361 L685:
                            29404 
                            29405 ; 3434 |        temp = temp | ((incr)       & 0x0000000F);              // bits[3:0]  0x0000000F
                            29406 
                            29449 
                            29450 ; 3435 |        pDrst->sd_ctl_Tune1Data_dw = ((temp) & 0x000000007FFF) | 0x40000;//(TableTune1_u32[FeFreq_u32] & 0x00007FFF); // Bits [14:0]
                            29451 
                            29482 
                            29483 ; 3436 |        pDrst->sd_ctl_SdnominalData_dw = sdnominal;
                            29484 
                            29492 
                            29493 ; 3437 |
                            29494 ; 3438 |
                            29495 ; 3439 |#else
                            29496 ; 3440 |        // Form table index based on what Front End must actually tune...
                            29497 ; 3441 |        pDrst->sd_ctl_FeFreq_w = wTuneFreq100kHz + pDrst->sd_ctl_IfFreq_i;
                            29498 ; 3442 |        // Freq of Front End = Freq user wants to tune + IF
                            29499 ; 3443 |        // where IF = f(mix_reg), as defined in memory map
                            29500 ; 3444 |
                            29501 ; 3445 |        // Check that freq index is within range of tuning table
                            29502 ; 3446 |        if (FREQUENCY_100KHZ_MIN > pDrst->sd_ctl_FeFreq_w)
                            29503 ; 3447 |        {
                            29504 ; 3448 |            //SystemHalt();
                            29505 ; 3449 |            pDrst->sd_ctl_FeFreq_w = FREQUENCY_100KHZ_MIN;
                            29506 ; 3450 |        }
                            29507 ; 3451 |        if (FREQUENCY_100KHZ_MIN + FREQUENCY_100KHZ_RANGE <
                            29508 ; 3452 |                                    pDrst->sd_ctl_FeFreq_w)
                            29509 ; 3453 |        {
                            29510 ; 3454 |            //SystemHalt();
                            29511 ; 3455 |            pDrst->sd_ctl_FeFreq_w = FREQUENCY_100KHZ_MIN +
                            29512 ; 3456 |                                        FREQUENCY_100KHZ_RANGE;
                            29513 ; 3457 |        }
                            29514 ; 3458 |
                            29515 ; 3459 |        // Just tune lower two bytes - assume MIX_REG already set in initialization
                            29516 ; 3460 |        pDrst->sd_ctl_Tune1Data_dw =
                            29517 ; 3461 |           ((DWORD)(sdc_ctl_TableTune1_w[pDrst->sd_ctl_FeFreq_w - FREQUENCY_100KHZ_MIN])
                            29518 ; 3462 |           & 0x00007FFF); // Bits [14:0]
                            29519 ; 3463 |
                            29520 ; 3464 |        pDrst->sd_ctl_SdnominalData_dw =
                            29521 ; 3465 |        sdc_ctl_TableSdnom_dw[pDrst->sd_ctl_FeFreq_w - FREQUENCY_100KHZ_MIN];
                            29522 ; 3466 |        // Bits [31:0]
                            29523 ; 3467 |#endif
                            29524 ; 3468 |
                            29525 ; 3469 |    }
                            29526 ; 3470 |
                            29527 ; 3471 |// **** Fix for TB2 stopping off-station during seek
                            29528 ; 3472 |    if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            29529 
P:036E 3E3100         2 196329476         move    #$31,n6
P:036F 77F400 FFFFFC  3 196629378         move    #-4,n7
P:0371 044E15         4 197029478         lua     (r6)+n6,r5
P:0372 250000         2 197229366         move    #0,x1
P:0373 21A600         2 197429368         move    b1,y0
P:0374 44F400 0001FF  3 197729367         move    #$1FF,x0
P:0376 205F00         2 197929379         move    (r7)+
P:0377 212D00         2 198129369         move    b0,b1
P:0378 3E334E         2 198329370         and     x0,b	                #51,n6
P:0379 21A900         2 198529371         move    b1,b0
P:037A 20CD00         2 198729372         move    y0,b1
P:037B 21266E         2 198929373         and     x1,b	                b0,y0
P:037C 21AF00         2 199129375         move    b1,b
P:037D 20C900         2 199329376         move    y0,b0
P:037E 21A700         2 199529377         move    b1,y1
P:037F 5FEF00         4 199929381         move    y:(r7+n7),b
P:0380 205700         2 200129382         move    (r7)-
P:0381 21A500         2 200329385         move    b1,x1
P:0382 59EF00         4 200729384         move    y:(r7+n7),b0
P:0383 205F00         2 200929397         move    (r7)+
P:0384 212D00         2 201129386         move    b0,b1
P:0385 46F45A 00000F  3 201429387         or      y0,b	                #>15,y0
P:0387 21A900         2 201629388         move    b1,b0
P:0388 20AD00         2 201829389         move    x1,b1
P:0389 27007A         2 202029390         or      y1,b	                #0,y1
P:038A 212500         2 202229391         move    b0,x1
P:038B 21AF00         2 202429392         move    b1,b
P:038C 20A900         2 202629393         move    x1,b0
P:038D 5D6F00         4 203029399         move    b1,y:(r7+n7)
P:038E 250000         2 203229453         move    #0,x1
P:038F 205700         2 203429400         move    (r7)-
P:0390 596F00         4 203829402         move    b0,y:(r7+n7)
P:0391 77F400 FFFFFA  3 204129408         move    #-6,n7
P:0393 205F00         2 204329409         move    (r7)+
P:0394 5FEF00         4 204729411         move    y:(r7+n7),b
P:0395 205700         2 204929412         move    (r7)-
P:0396 21A400         2 205129417         move    b1,x0
P:0397 59EF00         4 205529414         move    y:(r7+n7),b0
P:0398 77F400 FFFFFC  3 205829431         move    #-4,n7
P:039A 212D00         2 206029418         move    b0,b1
P:039B 205F5E         2 206229419         and     y0,b	                (r7)+
P:039C 21A900         2 206429420         move    b1,b0
P:039D 208D00         2 206629421         move    x0,b1
P:039E 21247E         2 206829422         and     y1,b	                b0,x0
P:039F 21AF00         2 207029424         move    b1,b
P:03A0 208900         2 207229425         move    x0,b0
P:03A1 21A700         2 207429430         move    b1,y1
P:03A2 212600         2 207629429         move    b0,y0
P:03A3 5FEF00         4 208029434         move    y:(r7+n7),b
P:03A4 205700         2 208229435         move    (r7)-
P:03A5 21A400         2 208429438         move    b1,x0
P:03A6 59EF00         4 208829437         move    y:(r7+n7),b0
P:03A7 212D00         2 209029439         move    b0,b1
P:03A8 20005A         2 209229440         or      y0,b
P:03A9 21A900         2 209429441         move    b1,b0
P:03AA 208D00         2 209629442         move    x0,b1
P:03AB 27007A         2 209829443         or      y1,b	                #0,y1
P:03AC 212400         2 210029444         move    b0,x0
P:03AD 21AF00         2 210229445         move    b1,b
P:03AE 208900         2 210429446         move    x0,b0
P:03AF 21A600         2 210629455         move    b1,y0
P:03B0 44F400 007FFF  3 210929454         move    #$7FFF,x0
P:03B2 212D00         2 211129456         move    b0,b1
P:03B3 20004E         2 211329457         and     x0,b
P:03B4 21A900         2 211529458         move    b1,b0
P:03B5 20CD00         2 211729459         move    y0,b1
P:03B6 21266E         2 211929460         and     x1,b	                b0,y0
P:03B7 21AF00         2 212129462         move    b1,b
P:03B8 20C900         2 212329463         move    y0,b0
P:03B9 21A500         2 212529467         move    b1,x1
P:03BA 260400         2 212729466         move    #<4,y0
P:03BB 212D00         2 212929468         move    b0,b1
P:03BC 20005A         2 213129469         or      y0,b
P:03BD 21A900         2 213329470         move    b1,b0
P:03BE 20AD00         2 213529471         move    x1,b1
P:03BF 21257A         2 213729472         or      y1,b	                b0,x1
P:03C0 21AF00         2 213929474         move    b1,b
P:03C1 20A900         2 214129475         move    x1,b0
P:03C2 595D00         2 214329480         move    b0,y:(r5)+
P:03C3 5D5500         2 214529481         move    b1,y:(r5)-
P:03C4 044E15         4 214929488         lua     (r6)+n6,r5
P:03C5 000000         2 215129488         nop             ; (inserted)
P:03C6 585D00         2 215329490         move    a0,y:(r5)+
P:03C7 5C5500         2 215529491         move    a1,y:(r5)-
                            29531 L646:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
P:03C8 57F013 rrrrrr  3 215829533         clr     a	                x:FStfmTuneDefault+60,b
P:03CA 2B0000         2 216029535         move    #0,b2
P:03CB 280200         2 216229534         move    #2,a0
P:03CC 51F000 rrrrrr  3 216529532         move    x:FStfmTuneDefault+59,b0
P:03CE 20000D         2 216729536         cmp     a,b
P:03CF 0AF0A2 rrrrrr  6 217329538         jne     L647
                            29539 
                            29540 ; 3473 |
                            29541 ; 3474 |        {
                            29542 ; 3475 |
                            29543 ; 3476 |        RetCode = STFM1000WriteRegister(
                            29544 ; 3477 |
                            29545 ; 3478 |            AGC_CONTROL1_REG_ADDR,
                            29546 ; 3479 |
                            29547 ; 3480 |            B2_AGCREF_REG_MASK,
                            29548 ; 3481 |
                            29549 ; 3482 |            &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            29550 ; 3483 |
                            29551 ; 3484 |            7);
                            29552 
                            29563 
                            29564 ; 3485 |
                            29565 ; 3486 |         } // end if TA2
                            29566 
P:03D1 3E1E1B         2 217529561         clr     b	                #30,n6
P:03D2 77F400 FFFFF3  3 217829555         move    #-13,n7
P:03D4 044E10         4 218229558         lua     (r6)+n6,r0
P:03D5 290700         2 218429562         move    #7,b0
P:03D6 6E6F00         4 218829557         move    r6,y:(r7+n7)
P:03D7 0AF080 rrrrrr  6 219429568         jmp     L648
                            29569 
                            29570 ; 3487 |
                            29571 ; 3488 |     else  // must be version TB2
                            29572 ; 3489 |
                            29573 ; 3490 |        {
                            29574 ; 3491 |
                            29575 ; 3492 |        RetCode = STFM1000WriteRegister(
                            29576 ; 3493 |
                            29577 ; 3494 |            AGC_CONTROL1_REG_ADDR,
                            29578 ; 3495 |
                            29579 ; 3496 |            0x00003F00,          // mask for B2_DB_WB_REF_REG
                            29580 ; 3497 |
                            29581 ; 3498 |            &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            29582 ; 3499 |
                            29583 ; 3500 |            34);
                            29584 
                            29586 L647:
                            29598 
                            29599 ; 3501 |
                            29600 ; 3502 |        } // end version TB2
                            29601 
P:03D9 3E1E1B         2 219629596         clr     b	                #30,n6
P:03DA 77F400 FFFFF3  3 219929590         move    #-13,n7
P:03DC 044E10         4 220329593         lua     (r6)+n6,r0
P:03DD 292200         2 220529597         move    #34,b0
P:03DE 6E6F00         4 220929592         move    r6,y:(r7+n7)
                            29603 L648:
P:03DF 44F413 000044  3 221229605         clr     a	                #>68,x0
P:03E1 50F400 003F00  3 221529606         move    #$3F00,a0
P:03E3 0BF080 rrrrrr  6 222129608         jsr     FSTFM1000WriteRegister
                            29609 
                            29610 ; 3503 |
                            29611 ; 3504 |    // **** End of Fix for TB2 stopping off-station during seek
                            29612 ; 3505 |
                            29613 ; 3506 |    // Write control data to Steely Dan
                            29614 ; 3507 |    RetCode = STFM1000WriteRegister(
                            29615 ; 3508 |        TUNE1_REG_ADDR,
                            29616 ; 3509 |        //TUNE1_B2_MIX_REG_MASK|TUNE1_CICOSR_REG_MASK | TUNE1_PLL_DIV_REG_MASK,
                            29617 ; 3510 |        WHOLEREG_MASK,
                            29618 ; 3511 |        &pDrst->sd_ctl_ShadowTune1_dw,
                            29619 ; 3512 |        pDrst->sd_ctl_Tune1Data_dw);
                            29620 
P:03E5 3E3100         2 222329628         move    #$31,n6
P:03E6 77F400 FFFFF3  3 222629622         move    #-13,n7
P:03E8 240000         2 222829641         move    #0,x0
P:03E9 6EEF00         4 223229624         move    y:(r7+n7),r6
P:03EA 77F400 FFFFF5  3 223529633         move    #-11,n7
P:03EC 22D000         2 223729625         move    r6,r0
P:03ED 56F400 0000FF  3 224029639         move    #>$FF,a
P:03EF 204E00         2 224229630         move    (r6)+n6
P:03F0 50F400 FFFFFF  3 224529640         move    #$FFFFFF,a0
P:03F2 6E6F00         4 224929635         move    r6,y:(r7+n7)
P:03F3 205E00         2 225129636         move    (r6)+
P:03F4 5FD600         2 225329637         move    y:(r6)-,b
P:03F5 59E600         2 225529638         move    y:(r6),b0
P:03F6 0BF080 rrrrrr  6 226129642         jsr     FSTFM1000WriteRegister
                            29643 
                            29644 ; 3513 |
                            29645 ; 3514 |    RetCode |= STFM1000WriteRegister(
                            29646 ; 3515 |        SDNOMINAL_REG_ADDR,
                            29647 ; 3516 |        WHOLEREG_MASK,
                            29648 ; 3517 |        &pDrst->sd_ctl_ShadowSdnominal_dw,
                            29649 ; 3518 |        pDrst->sd_ctl_SdnominalData_dw);
                            29650 
P:03F8 3E0200         2 226329652         move    #2,n6
P:03F9 77F400 FFFFF3  3 226629653         move    #-13,n7
P:03FB 56F400 0000FF  3 226929669         move    #>$FF,a
P:03FD 6EEF00         4 227329655         move    y:(r7+n7),r6
P:03FE 44F400 000004  3 227629668         move    #>4,x0
P:0400 044E10         4 228029657         lua     (r6)+n6,r0
P:0401 3E3300         2 228229660         move    #51,n6
P:0402 50F400 FFFFFF  3 228529670         move    #$FFFFFF,a0
P:0404 204E00         2 228729662         move    (r6)+n6
P:0405 205E00         2 228929665         move    (r6)+
P:0406 5FD600         2 229129666         move    y:(r6)-,b
P:0407 59E600         2 229329667         move    y:(r6),b0
P:0408 0BF080 rrrrrr  6 229929671         jsr     FSTFM1000WriteRegister
                            29672 
                            29673 ; 3519 |
                            29674 ; 3520 |// **** Following fix for seek-not-stopping on alternate tunings
                            29675 ; 3521 |    /* enable double-buffered writes */
                            29676 ; 3522 |    RetCode = STFM1000WriteRegister(
                            29677 ; 3523 |            DATAPATH_REG_ADDR,
                            29678 ; 3524 |            DB_ACCEPT_REG_MASK,
                            29679 ; 3525 |            &pDrst->sd_ctl_ShadowDataPath_dw,
                            29680 ; 3526 |            1);
                            29681 
P:040A 3E221B         2 230129693         clr     b	                #34,n6
P:040B 44F400 00005C  3 230429697         move    #>92,x0
P:040D 000009         2 230629694         inc     b
P:040E 77F413 FFFFF3  3 230929695         clr     a	                #-13,n7
P:0410 50F400 010000  3 231229696         move    #$10000,a0
P:0412 6EEF00         4 231629686         move    y:(r7+n7),r6
P:0413 77F400 FFFFF6  3 231929689         move    #-10,n7
P:0415 044E1E         4 232329688         lua     (r6)+n6,n6
P:0416 23D000         2 232529692         move    n6,r0
P:0417 7E6F00         4 232929691         move    n6,y:(r7+n7)
P:0418 0BF080 rrrrrr  6 233529698         jsr     FSTFM1000WriteRegister
                            29699 
                            29700 ; 3527 |
                            29701 ; 3528 |    /* disable double-buffered writes */
                            29702 ; 3529 |    RetCode = STFM1000WriteRegister(
                            29703 ; 3530 |            DATAPATH_REG_ADDR,
                            29704 ; 3531 |            DB_ACCEPT_REG_MASK,
                            29705 ; 3532 |            &pDrst->sd_ctl_ShadowDataPath_dw,
                            29706 ; 3533 |            0);
                            29707 
P:041A 77F41B FFFFF6  3 233829713         clr     b	                #-10,n7
P:041C 44F413 00005C  3 234129714         clr     a	                #>92,x0
P:041E 68EF00         4 234529711         move    y:(r7+n7),r0
P:041F 50F400 010000  3 234829715         move    #$10000,a0
P:0421 0BF080 rrrrrr  6 235429716         jsr     FSTFM1000WriteRegister
                            29720 
                            29721 ; 3534 |// **** End of fix for seek-not-stopping on alternate tunings
                            29722 ; 3535 |
                            29723 ; 3536 |    // If bit[3:0] == 0
                            29724 ; 3537 |    if((pDrst->sd_ctl_Tune1Data_dw & 0x00000000000F) == 0)
                            29725 
P:0423 77F400 FFFFF7  3 235729717         move    #-9,n7
P:0425 270000         2 235929734         move    #0,y1
P:0426 46F400 00000F  3 236229735         move    #>15,y0
P:0428 5E6F00         4 236629719         move    a,y:(r7+n7)
P:0429 77F400 FFFFF5  3 236929727         move    #-11,n7
P:042B 000000         2 237129727         nop             ; (inserted)
P:042C 6EEF00         4 237529729         move    y:(r7+n7),r6
P:042D 000000         2 237729729         nop             ; (inserted)
P:042E 205E00         2 237929731         move    (r6)+
P:042F 5FD600         2 238129732         move    y:(r6)-,b
P:0430 59E600         2 238329733         move    y:(r6),b0
P:0431 21A400         2 238529736         move    b1,x0
P:0432 212D00         2 238729737         move    b0,b1
P:0433 2B005E         2 238929738         and     y0,b	                #0,b2
P:0434 21A900         2 239129739         move    b1,b0
P:0435 208D00         2 239329740         move    x0,b1
P:0436 20007E         2 239529741         and     y1,b
P:0437 20000B         2 239729743         tst     b
P:0438 0AF0A2 rrrrrr  6 240329744         jne     L649
                            29745 
                            29746 ; 3538 |    {
                            29747 ; 3539 |        RetCode |= STFM1000WriteRegister(
                            29748 ; 3540 |            CLK1_REG_ADDR,
                            29749 ; 3541 |            ENABLE_TAPDELAYFIX_REG_MASK,
                            29750 ; 3542 |            &pDrst->sd_ctl_ShadowClk1_dw,
                            29751 ; 3543 |            0);
                            29752 
P:043A 77F41B FFFFF3  3 240629760         clr     b	                #-13,n7
P:043C 3E1813         2 240829761         clr     a	                #24,n6
P:043D 6EEF00         4 241229757         move    y:(r7+n7),r6
P:043E 44F400 000034  3 241529763         move    #>52,x0
P:0440 044E10         4 241929759         lua     (r6)+n6,r0
P:0441 282000         2 242129762         move    #$20,a0
P:0442 0BF080 rrrrrr  6 242729764         jsr     FSTFM1000WriteRegister
                            29770 
                            29771 ; 3544 |    }
                            29772 
P:0444 77F400 FFFFF7  3 243029765         move    #-9,n7
P:0446 21C600         2 243229768         move    a,y0
P:0447 5DEF00         4 243629767         move    y:(r7+n7),b1
P:0448 20005A         2 243829769         or      y0,b
P:0449 0AF080 rrrrrr  6 244429774         jmp     L650
                            29775 L649:
                            29778 
                            29779 ; 3545 |    else
                            29780 ; 3546 |    {
                            29781 ; 3547 |        RetCode |= STFM1000WriteRegister(
                            29782 ; 3548 |            CLK1_REG_ADDR,
                            29783 ; 3549 |            ENABLE_TAPDELAYFIX_REG_MASK,
                            29784 ; 3550 |            &pDrst->sd_ctl_ShadowClk1_dw,
                            29785 ; 3551 |            1);
                            29786 
P:044B 3E181B         2 244629794         clr     b	                #24,n6
P:044C 77F400 FFFFF2  3 244929775         move    #-14,n7
P:044E 44F400 000034  3 245229798         move    #>52,x0
P:0450 000009         2 245429795         inc     b
P:0451 5C6F13         4 245829796         clr     a	                a1,y:(r7+n7)
P:0452 77F400 FFFFF3  3 246129789         move    #-13,n7
P:0454 282000         2 246329797         move    #$20,a0
P:0455 6EEF00         4 246729791         move    y:(r7+n7),r6
P:0456 000000         2 246929791         nop             ; (inserted)
P:0457 044E10         4 247329793         lua     (r6)+n6,r0
P:0458 0BF080 rrrrrr  6 247929799         jsr     FSTFM1000WriteRegister
                            29805 
                            29806 ; 3552 |    }
                            29807 
P:045A 77F400 FFFFF2  3 248229801         move    #-14,n7
P:045C 21C700         2 248429800         move    a,y1
P:045D 5DEF00         4 248829803         move    y:(r7+n7),b1
P:045E 20007A         2 249029804         or      y1,b
                            29809 L650:
                            29812 
                            29813 ; 3553 |
                            29814 ; 3554 |    // We like to keep the tune cap always positive value
                            29815 ; 3555 |    if(wTuneFreq100kHzTemp > CORNER_FREQUENCY)
                            29816 
P:045F 77F400 FFFFF4  3 249329819         move    #-12,n7
P:0461 21A700         2 249529811         move    b1,y1
P:0462 46F400 00040A  3 249829818         move    #1034,y0
P:0464 5FEF00         4 250229821         move    y:(r7+n7),b
P:0465 2B0000         2 250429823         move    #0,b2
P:0466 21A55D         2 250629824         cmp     y0,b	                b1,x1
P:0467 0AF0AF rrrrrr  6 251229827         jle     L651
                            29828 
                            29829 ; 3556 |    {
                            29830 ; 3557 |        wTuneCap = (WORD)(((TCB* wTuneFreq100kHzTemp - TCA)/100) & 0x00001F);
                            29831 
P:0469 46F400 000007  3 251529833         move    #>7,y0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
P:046B 57F4E0 000064  3 251829834         mpy     x1,y0,a	                #>100,b
P:046D 46F422 001C48  3 252129835         asr     a	                #7240,y0
P:046F 210E00         2 252329837         move    a0,a
P:0470 200054         2 252529838         sub     y0,a
P:0471 0BF080 rrrrrr  6 253129840         jsr     Rdiv_uiuiui
                            29845 
                            29846 ; 3558 |    }
                            29847 
P:0473 210E00         2 253329842         move    a0,a
P:0474 46F400 00001F  3 253629841         move    #>$1F,y0
P:0476 200056         2 253829843         and     y0,a
P:0477 0AF080 rrrrrr  6 254429849         jmp     L652
                            29850 
                            29851 ; 3559 |    else
                            29852 ; 3560 |    {
                            29853 ; 3561 |        wTuneCap = (WORD)(((TCA - TCB* wTuneFreq100kHzTemp)/100) & 0x00001F);
                            29854 
                            29856 L651:
P:0479 50F400 001C48  3 254729857         move    #7240,a0
P:047B 44F432 000007  3 255029858         asl     a	                #>7,x0
P:047D 57F4A6 000064  3 255329859         mac     -x1,x0,a	                #>100,b
P:047F 200022         2 255529860         asr     a
P:0480 210E00         2 255729862         move    a0,a
P:0481 0BF080 rrrrrr  6 256329864         jsr     Rdiv_uiuiui
                            29869 
                            29870 ; 3562 |    }
                            29871 ; 3563 |
                            29872 ; 3564 |    if(wTuneCap < 4)
                            29873 
P:0483 210E00         2 256529865         move    a0,a
P:0484 44F400 00001F  3 256829866         move    #>$1F,x0
P:0486 200046         2 257029867         and     x0,a
                            29875 L652:
                            29878 
                            29879 ; 3565 |    {
                            29880 ; 3566 |        wTuneCap = 4;
                            29881 
                            29884 
                            29885 ; 3567 |    }
                            29886 
                            29896 
                            29897 ; 3568 |    RetCode |= STFM1000WriteRegister(
                            29898 ; 3569 |            LNA_REG_ADDR,
                            29899 ; 3570 |            ANTENNA_TUNECAP_REG_MASK,
                            29900 ; 3571 |            &pDrst->sd_ctl_ShadowLna_dw,
                            29901 ; 3572 |            wTuneCap);
                            29902 
P:0487 77F400 FFFFF4  3 257329888         move    #-12,n7
P:0489 2A0000         2 257529876         move    #0,a2
P:048A 2B0000         2 257729918         move    #0,b2
P:048B 2D0000         2 257929911         move    #0,b1
P:048C 46F400 000004  3 258229875         move    #>4,y0
P:048E 3E1455         2 258429877         cmp     y0,a	                #20,n6
P:048F 44F400 00002C  3 258729917         move    #>44,x0
P:0491 4D6F00         4 259129890         move    x1,y:(r7+n7)
P:0492 77F400 FFFFF2  3 259429893         move    #-14,n7
P:0494 029050         2 259629883         tlt     y0,a
P:0495 4F6F00         4 260029895         move    y1,y:(r7+n7)
P:0496 77F400 FFFFF3  3 260329905         move    #-13,n7
P:0498 218913         2 260529915         clr     a	                a1,b0
P:0499 6EEF00         4 260929907         move    y:(r7+n7),r6
P:049A 50F400 1F0000  3 261229916         move    #$1F0000,a0
P:049C 044E10         4 261629909         lua     (r6)+n6,r0
P:049D 0BF080 rrrrrr  6 262229919         jsr     FSTFM1000WriteRegister
                            29926 
                            29927 ; 3573 |    // Add new update
                            29928 ; 3574 |    RetCode |= STFM1000WriteRegister(
                            29929 ; 3575 |            INITIALIZATION2_REG_ADDR,
                            29930 ; 3576 |            DRI_CLK_EN_REG_MASK,
                            29931 ; 3577 |            &pDrst->sd_ctl_ShadowInitialization2_dw,
                            29932 ; 3578 |            0x00000000);
                            29933 
P:049F 3E0800         2 262429935         move    #8,n6
P:04A0 77F400 FFFFF2  3 262729920         move    #-14,n7
P:04A2 12F400 000080  3 263029923         move    a,x0	                #>$80,a
P:04A4 5DEF00         4 263429922         move    y:(r7+n7),b1
P:04A5 44F44A 000014  3 263729924         or      x0,b	                #>20,x0
P:04A7 5D6F1B         4 264129949         clr     b	                b1,y:(r7+n7)
P:04A8 77F400 FFFFF3  3 264429936         move    #-13,n7
P:04AA 000000         2 264629936         nop             ; (inserted)
P:04AB 6EEF00         4 265029938         move    y:(r7+n7),r6
P:04AC 77F400 FFFFF7  3 265329944         move    #-9,n7
P:04AE 204E00         2 265529940         move    (r6)+n6
P:04AF 22D000         2 265729947         move    r6,r0
P:04B0 6E6F00         4 266129946         move    r6,y:(r7+n7)
P:04B1 0BF080 rrrrrr  6 266729950         jsr     FSTFM1000WriteRegister
                            29958 
                            29959 ; 3579 |
                            29960 ; 3580 |    switch(wTuneFreq100kHzTemp)
                            29961 
P:04B3 77F400 FFFFF2  3 267029953         move    #-14,n7
P:04B5 19B400 00030B  3 267329952         move    a,y1	                #779,a
P:04B7 5DEF00         4 267729955         move    y:(r7+n7),b1
P:04B8 77F47A FFFFF4  3 268029956         or      y1,b	                #-12,n7
P:04BA 21A700         2 268229957         move    b1,y1
P:04BB 5FEF00         4 268629965         move    y:(r7+n7),b
P:04BC 2B0000         2 268829967         move    #0,b2
P:04BD 56F40D 00030C  3 269129968         cmp     a,b     #780,a
P:04BF 0AF0AA rrrrrr  6 269729969         jeq     L681
P:04C1 56F40D 00030D  3 270029970         cmp     a,b     #781,a
P:04C3 0AF0AA rrrrrr  6 270629971         jeq     L681
P:04C5 56F40D 00030E  3 270929972         cmp     a,b     #782,a
P:04C7 0AF0AA rrrrrr  6 271529973         jeq     L681
P:04C9 56F40D 000346  3 271829974         cmp     a,b     #838,a
P:04CB 0AF0AA rrrrrr  6 272429975         jeq     L681
P:04CD 56F40D 000347  3 272729976         cmp     a,b     #839,a
P:04CF 0AF0AA rrrrrr  6 273329977         jeq     L681
P:04D1 56F40D 000348  3 273629978         cmp     a,b     #840,a
P:04D3 0AF0AA rrrrrr  6 274229979         jeq     L681
P:04D5 56F40D 000349  3 274529980         cmp     a,b     #841,a
P:04D7 0AF0AA rrrrrr  6 275129981         jeq     L681
P:04D9 56F40D 00034A  3 275429982         cmp     a,b     #842,a
P:04DB 0AF0AA rrrrrr  6 276029983         jeq     L681
P:04DD 56F40D 000382  3 276329984         cmp     a,b     #898,a
P:04DF 0AF0AA rrrrrr  6 276929985         jeq     L681
P:04E1 56F40D 000383  3 277229986         cmp     a,b     #899,a
P:04E3 0AF0AA rrrrrr  6 277829987         jeq     L681
P:04E5 56F40D 000384  3 278129988         cmp     a,b     #900,a
P:04E7 0AF0AA rrrrrr  6 278729989         jeq     L681
P:04E9 56F40D 000385  3 279029990         cmp     a,b     #901,a
P:04EB 0AF0AA rrrrrr  6 279629991         jeq     L681
P:04ED 56F40D 000386  3 279929992         cmp     a,b     #902,a
P:04EF 0AF0AA rrrrrr  6 280529993         jeq     L681
P:04F1 56F40D 0003BE  3 280829994         cmp     a,b     #958,a
P:04F3 0AF0AA rrrrrr  6 281429995         jeq     L681
P:04F5 56F40D 0003BF  3 281729996         cmp     a,b     #959,a
P:04F7 0AF0AA rrrrrr  6 282329997         jeq     L681
P:04F9 56F40D 0003C0  3 282629998         cmp     a,b     #960,a
P:04FB 0AF0AA rrrrrr  6 283229999         jeq     L681
P:04FD 56F40D 0003C1  3 283530000         cmp     a,b     #961,a
P:04FF 0AF0AA rrrrrr  6 284130001         jeq     L681
P:0501 56F40D 0003C2  3 284430002         cmp     a,b     #962,a
P:0503 0AF0AA rrrrrr  6 285030003         jeq     L681
P:0505 56F40D 0003FA  3 285330004         cmp     a,b     #1018,a
P:0507 0AF0AA rrrrrr  6 285930005         jeq     L681
P:0509 56F40D 0003FB  3 286230006         cmp     a,b     #1019,a
P:050B 0AF0AA rrrrrr  6 286830007         jeq     L681
P:050D 56F40D 0003FC  3 287130008         cmp     a,b     #1020,a
P:050F 0AF0AA rrrrrr  6 287730009         jeq     L681
P:0511 56F40D 0003FD  3 288030010         cmp     a,b     #1021,a
P:0513 0AF0AA rrrrrr  6 288630011         jeq     L681
P:0515 56F40D 0003FE  3 288930012         cmp     a,b     #1022,a
P:0517 0AF0AA rrrrrr  6 289530013         jeq     L681
P:0519 56F40D 000436  3 289830014         cmp     a,b     #1078,a
P:051B 0AF0AA rrrrrr  6 290430015         jeq     L681
P:051D 56F40D 000437  3 290730016         cmp     a,b     #1079,a
P:051F 0AF0AA rrrrrr  6 291330017         jeq     L681
P:0521 56F40D 000438  3 291630018         cmp     a,b     #1080,a
P:0523 0AF0AA rrrrrr  6 292230019         jeq     L681
P:0525 56F40D 00030A  3 292530020         cmp     a,b     #778,a
P:0527 0AF0AA rrrrrr  6 293130021         jeq     L681
P:0529 20000D         2 293330022         cmp     a,b
P:052A 0AF0A2 rrrrrr  6 293930023         jne     L682
                            30024 
                            30025 ; 3581 |    {
                            30026 ; 3582 |        case 778:
                            30027 ; 3583 |        case 779:
                            30028 ; 3584 |        case 780:
                            30029 ; 3585 |        case 781:
                            30030 ; 3586 |        case 782:
                            30031 ; 3587 |        case 838:
                            30032 ; 3588 |        case 839:
                            30033 ; 3589 |        case 840:
                            30034 ; 3590 |        case 841:
                            30035 ; 3591 |        case 842:
                            30036 ; 3592 |        case 898:
                            30037 ; 3593 |        case 899:
                            30038 ; 3594 |        case 900:
                            30039 ; 3595 |        case 901:
                            30040 ; 3596 |        case 902:
                            30041 ; 3597 |        case 958:
                            30042 ; 3598 |        case 959:
                            30043 ; 3599 |        case 960:
                            30044 ; 3600 |        case 961:
                            30045 ; 3601 |        case 962:
                            30046 ; 3602 |        case 1018:
                            30047 ; 3603 |        case 1019:
                            30048 ; 3604 |        case 1020:
                            30049 ; 3605 |        case 1021:
                            30050 ; 3606 |        case 1022:
                            30051 ; 3607 |        case 1078:
                            30052 ; 3608 |        case 1079:
                            30053 ; 3609 |        case 1080:
                            30054 ; 3610 |            dwControlSelect = 5;
                            30055 
                            30057 L681:
                            30061 
                            30062 ; 3611 |            break;
                            30063 
P:052C 2F0000         2 294130057         move    #0,b
P:052D 290500         2 294330058         move    #5,b0
P:052E 0AF080 rrrrrr  6 294930065         jmp     L683
                            30066 
                            30067 ; 3612 |        default:
                            30068 ; 3613 |        dwControlSelect = 4;
                            30069 
                            30071 L682:
                            30073 
                            30074 ; 3614 |    }
                            30075 
P:0530 2F0000         2 295130071         move    #0,b
P:0531 290400         2 295330072         move    #4,b0
                            30077 L683:
                            30080 
                            30081 ; 3615 |    RetCode |= STFM1000WriteRegister(
                            30082 ; 3616 |        DATAPATH_REG_ADDR,
                            30083 ; 3617 |        DRI_CLK_DIV_REG_MASK,
                            30084 ; 3618 |        &pDrst->sd_ctl_ShadowDataPath_dw,
                            30085 ; 3619 |        dwControlSelect);
                            30086 
P:0532 77F413 FFFFF2  3 295630091         clr     a	                #-14,n7
P:0534 44F400 00005C  3 295930093         move    #>92,x0
P:0536 287C00         2 296130092         move    #$7C,a0
P:0537 4F6F00         4 296530079         move    y1,y:(r7+n7)
P:0538 77F400 FFFFF6  3 296830088         move    #-10,n7
P:053A 000000         2 297030088         nop             ; (inserted)
P:053B 68EF00         4 297430090         move    y:(r7+n7),r0
P:053C 0BF080 rrrrrr  6 298030094         jsr     FSTFM1000WriteRegister
                            30102 
                            30103 ; 3620 |
                            30104 ; 3621 |    RetCode |= STFM1000WriteRegister(
                            30105 ; 3622 |            INITIALIZATION2_REG_ADDR,
                            30106 ; 3623 |            DRI_CLK_EN_REG_MASK,
                            30107 ; 3624 |            &pDrst->sd_ctl_ShadowInitialization2_dw,
                            30108 ; 3625 |            0x00000001);
                            30109 
P:053E 77F400 FFFFF2  3 298330097         move    #-14,n7
P:0540 16F400 000080  3 298630096         move    a,x1	                #>$80,a
P:0542 5DEF00         4 299030099         move    y:(r7+n7),b1
P:0543 44F46A 000014  3 299330100         or      x1,b	                #>20,x0
P:0545 5D6F1B         4 299730115         clr     b	                b1,y:(r7+n7)
P:0546 77F400 FFFFF7  3 300030112         move    #-9,n7
P:0548 000009         2 300230116         inc     b
P:0549 68EF00         4 300630114         move    y:(r7+n7),r0
P:054A 0BF080 rrrrrr  6 301230118         jsr     FSTFM1000WriteRegister
                            30125 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                            30126 ; 3626 |    return (RetCode);
                            30127 
                            30130 
                            30131 ; 3627 |}
                            30132 
P:054C 77F400 FFFFF2  3 301530120         move    #-14,n7
P:054E 21C600         2 301730119         move    a,y0
P:054F 5FEF00         4 302130122         move    y:(r7+n7),b
P:0550 77F45A FFFFF1  3 302430123         or      y0,b	                #-15,n7
P:0552 21AE00         2 302630124         move    b1,a
P:0553 05EF7C         4 303030136         movec   y:(r7+n7),ssh
P:0554 218E00         2 303230129         move    a1,a
P:0555 204F00         2 303430138         move    (r7)+n7
P:0556 00000C         4 303830140         rts
                            30142 
                            30143 ; 3628 |
                            30144 ; 3629 |
                            30145 ; 3630 |
                            30146 ; 3631 |////////////////////////////////////////////////////////////////////////////////
                            30147 ; 3632 |//!
                            30148 ; 3633 |//! \brief      Set tuner to a new frequency
                            30149 ; 3634 |//! \fntype     Function
                            30150 ; 3635 |//!
                            30151 ; 3636 |//! Function will perform the following steps:
                            30152 ; 3637 |//!     Calls QucikTune() function to set the new tuning frequency
                            30153 ; 3638 |//!
                            30154 ; 3639 |//! \param[in]  wNewFrequency   New frequency to set (in KHz)
                            30155 ; 3640 |//!
                            30156 ; 3641 |//! \return     SUCCESS.
                            30157 ; 3642 |//!
                            30158 ; 3643 |////////////////////////////////////////////////////////////////////////////////
                            30159 ; 3644 |//  STFM1000TunerQuicksetStation(
                            30160 ; 3645 |
                            30161 ; 3646 |_reentrant INT STFM1000TunerQuicksetStation(WORD wNewFrequency)
                            30162 ; 3647 |{
                            30163 
                            30168 FSTFM1000TunerQuicksetStation:
                            30176 
                            30177 ; 3648 |    INT RetCode = SUCCESS;
                            30178 ; 3649 |    s_wCurrentFMFrequency = wNewFrequency;
                            30179 
                            30182 
                            30183 ; 3650 |#if 0
                            30184 ; 3651 |    // Turn off DRI before change station
                            30185 ; 3652 |    //STFM1000DriOff();
                            30186 ; 3653 |    /* Take Down procedure call */
                            30187 ; 3654 |    RetCode = STFM1000TakeDown();
                            30188 ; 3655 |    if (SUCCESS != RetCode)
                            30189 ; 3656 |    {
                            30190 ; 3657 |        //SystemHalt();
                            30191 ; 3658 |         return RetCode;
                            30192 ; 3659 |    }
                            30193 ; 3660 |#endif
                            30194 ; 3661 |    RetCode = STFM1000QuickTune(wNewFrequency);
                            30195 
P:0557 055F7C         2 304030169         movec   ssh,y:(r7)+
P:0558 5C7000 rrrrrr  3 304330181         move    a1,y:Fs_wCurrentFMFrequency
P:055A 0BF080 rrrrrr  6 304930197         jsr     FSTFM1000QuickTune
                            30200 
                            30201 ; 3662 |    if (SUCCESS != RetCode)
                            30202 ; 3663 |    {
                            30203 ; 3664 |        //SystemHalt();
                            30204 ; 3665 |        return RetCode;
                            30205 ; 3666 |    }
                            30206 ; 3667 |#if 0
                            30207 ; 3668 |    /* BringUp procedure call */
                            30208 ; 3669 |    RetCode = STFM1000BringUp();
                            30209 ; 3670 |    if (SUCCESS != RetCode)
                            30210 ; 3671 |    {
                            30211 ; 3672 |        //SystemHalt();
                            30212 ; 3673 |        return RetCode;
                            30213 ; 3674 |    }
                            30214 ; 3675 |#endif
                            30215 ; 3676 |    return RetCode;
                            30216 ; 3677 |}
                            30217 
P:055C 05FF7C         4 305330219         movec   y:-(r7),ssh
P:055D 000000         2 305530219         nop             ; (inserted)
P:055E 00000C         4 305930223         rts
                            30226 
                            30227 ; 3678 |// ****************************************
                            30228 ; 3679 |//! LOOK FOR PILOT TONE ON CHIP
                            30229 ; 3680 |// ****************************************
                            30230 ; 3681 |
                            30231 ; 3682 |// * Look for Pilot Tone on chip  (tspec_v09x.pdf::SD_LookForPilot)
                            30232 ; 3683 |
                            30233 ; 3684 |/*
                            30234 ; 3685 |#ifdef FUNCLET
                            30235 ; 3686 |    #pragma asm
                            30236 ; 3687 |        org p,".stfm1000_SYS":
                            30237 ; 3688 |        FSTFM1000LookForPilot:
                            30238 ; 3689 |
                            30239 ; 3690 |        nolist
                            30240 ; 3691 |        include "sysmacro.asm"
                            30241 ; 3692 |        include "resource.inc"
                            30242 ; 3693 |        list
                            30243 ; 3694 |
                            30244 ; 3695 |        ;If using funclet, function will be executed via funclet kernel
                            30245 ; 3696 |        CallFunclet2 RSRC_FUNCLET_STFM1000_LOOK_FOR_PILOT
                            30246 ; 3697 |
                            30247 ; 3698 |        org p,"SYSFUNCLET_STFM1000_LOOK_FOR_PILOT_P":
                            30248 ; 3699 |        dc      RSRC_FUNCLET_STFM1000_LOOK_FOR_PILOT
                            30249 ; 3700 |    #pragma endasm
                            30250 ; 3701 |_reentrant INT STFM1000LookForPilot_Funclet(BOOL * bPilotPresent)
                            30251 ; 3702 |#else
                            30252 ; 3703 |*/
                            30253 ; 3704 |#if 0   // move it to second codebank
                            30254 ; 3705 |_reentrant INT STFM1000LookForPilot(BOOL * bPilotPresent)
                            30255 ; 3706 |//#endif
                            30256 ; 3707 |{
                            30257 ; 3708 |    INT iCount;
                            30258 ; 3709 |    DWORD dwPiloTest;
                            30259 ; 3710 |    DWORD dwPiloTestLowerLimit = 0x1E;                          //TB2  +30 (0x1E)
                            30260 ; 3711 |    DWORD dwPiloTestUpperLimit = 0x7F;  //TB2
                            30261 ; 3712 |    DWORD dwPiloTestMask = PILOTEST_REG_TB2_MASK;   //VERSION_TA2
                            30262 ; 3713 |
                            30263 ; 3714 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            30264 ; 3715 |    INT RetCode = SUCCESS;
                            30265 ; 3716 |
                            30266 ; 3717 |    if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            30267 ; 3718 |    {
                            30268 ; 3719 |        dwPiloTestMask = PILOTEST_REG_TA2_MASK;
                            30269 ; 3720 |        // Range changed to [-75, -30] on 11/03/2006
                            30270 ; 3721 |        dwPiloTestLowerLimit = 0xE2;     // TA2  -30(0xE2)
                            30271 ; 3722 |        dwPiloTestUpperLimit = 0xB5;     // TA2  -75(0xB5)
                            30272 ; 3723 |
                            30273 ; 3724 |        /* Let's check the pilot for 3 times, and
                            30274 ; 3725 |           declare pilot present if value is within range all 3 times, */
                            30275 ; 3726 |        for (iCount=3; iCount>0; --iCount)
                            30276 ; 3727 |        {
                            30277 ; 3728 |            // get pilot level
                            30278 ; 3729 |
                            30279 ; 3730 |            RetCode = STFM1000ReadSubRegister(
                            30280 ; 3731 |                PILOTCORRECTION_REG_ADDR,
                            30281 ; 3732 |                dwPiloTestMask,
                            30282 ; 3733 |                &dwPiloTest);
                            30283 ; 3734 |
                            30284 ; 3735 |            if (SUCCESS != RetCode)
                            30285 ; 3736 |            {
                            30286 ; 3737 |                 //SystemHalt();
                            30287 ; 3738 |                 return RetCode;
                            30288 ; 3739 |            }
                            30289 ; 3740 |
                            30290 ; 3741 |            if (g_STFM1000_CustomerForceMono == TRUE)   // STMP00013255
                            30291 ; 3742 |            {
                            30292 ; 3743 |                dwPiloTest = 0;
                            30293 ; 3744 |            }
                            30294 ; 3745 |
                            30295 ; 3746 |            // compare pilot level to threshold
                            30296 ; 3747 |            // (value is positive so "ABS()" not needed)
                            30297 ; 3748 |            // -75<= dwPilotTest<-30
                            30298 ; 3749 |            if ((dwPiloTestUpperLimit < dwPiloTest) && (dwPiloTest < dwPiloTestLowerLimit))
                            30299 ; 3750 |            {
                            30300 ; 3751 |                continue;
                            30301 ; 3752 |            }
                            30302 ; 3753 |            else
                            30303 ; 3754 |            {
                            30304 ; 3755 |                // turn off pilot tracking on chip
                            30305 ; 3756 |                RetCode = STFM1000WriteRegister(
                            30306 ; 3757 |                    PILOTTRACKING_REG_ADDR,
                            30307 ; 3758 |                    B2_PILOTTRACKING_ENABLE_REG_MASK,
                            30308 ; 3759 |                    &pDrst->sd_ctl_ShadowPilotTracking_dw,
                            30309 ; 3760 |                    0);
                            30310 ; 3761 |
                            30311 ; 3762 |                if (SUCCESS != RetCode)
                            30312 ; 3763 |                {
                            30313 ; 3764 |                     return RetCode;
                            30314 ; 3765 |                }
                            30315 ; 3766 |
                            30316 ; 3767 |                *bPilotPresent = FALSE; // result to the calling function
                            30317 ; 3768 |                g_sd_audio_pCoefForcedMono_u1 = TRUE;
                            30318 ; 3769 |                break;
                            30319 ; 3770 |            } // pilot level below threshold
                            30320 ; 3771 |        }
                            30321 ; 3772 |        /* Pilot check passed every time in the preceding loop ? */
                            30322 ; 3773 |        if (iCount <= 0)
                            30323 ; 3774 |        {
                            30324 ; 3775 |            *bPilotPresent = TRUE; // result to the calling function
                            30325 ; 3776 |        }
                            30326 ; 3777 |
                            30327 ; 3778 |    }
                            30328 ; 3779 |    else //TB2
                            30329 ; 3780 |    {
                            30330 ; 3781 |        /* Let's check the pilot for 3 times, and
                            30331 ; 3782 |           declare pilot present if value is within range all 3 times, */
                            30332 ; 3783 |        for (iCount=3; iCount>0; --iCount)
                            30333 ; 3784 |        {
                            30334 ; 3785 |            // get pilot level
                            30335 ; 3786 |
                            30336 ; 3787 |            RetCode = STFM1000ReadSubRegister(
                            30337 ; 3788 |                PILOTCORRECTION_REG_ADDR,
                            30338 ; 3789 |                dwPiloTestMask,
                            30339 ; 3790 |                &dwPiloTest);
                            30340 ; 3791 |
                            30341 ; 3792 |            if (SUCCESS != RetCode)
                            30342 ; 3793 |            {
                            30343 ; 3794 |                 //SystemHalt();
                            30344 ; 3795 |                 return RetCode;
                            30345 ; 3796 |            }
                            30346 ; 3797 |
                            30347 ; 3798 |            if (g_STFM1000_CustomerForceMono == TRUE)
                            30348 ; 3799 |            {
                            30349 ; 3800 |                dwPiloTest = 0;
                            30350 ; 3801 |            }
                            30351 ; 3802 |
                            30352 ; 3803 |            // compare pilot level to threshold
                            30353 ; 3804 |            // (value is positive so "ABS()" not needed)
                            30354 ; 3805 |            // 30<=dwPilotTest<127
                            30355 ; 3806 |            if ((dwPiloTestLowerLimit < dwPiloTest) &&
                            30356 ; 3807 |                 (dwPiloTest < dwPiloTestUpperLimit))
                            30357 ; 3808 |            {
                            30358 ; 3809 |                continue;
                            30359 ; 3810 |            }
                            30360 ; 3811 |            else
                            30361 ; 3812 |            {
                            30362 ; 3813 |                 // turn off pilot tracking on chip
                            30363 ; 3814 |                RetCode = STFM1000WriteRegister(
                            30364 ; 3815 |                    PILOTTRACKING_REG_ADDR,
                            30365 ; 3816 |                    B2_PILOTTRACKING_ENABLE_REG_MASK,
                            30366 ; 3817 |                    &pDrst->sd_ctl_ShadowPilotTracking_dw,
                            30367 ; 3818 |                    0);
                            30368 ; 3819 |
                            30369 ; 3820 |                if (SUCCESS != RetCode)
                            30370 ; 3821 |                {
                            30371 ; 3822 |                     //SystemHalt();
                            30372 ; 3823 |                     return RetCode;
                            30373 ; 3824 |                }
                            30374 ; 3825 |
                            30375 ; 3826 |                *bPilotPresent = FALSE; // result to the calling function
                            30376 ; 3827 |
                            30377 ; 3828 |                /* enable "forced mono" in black box */
                            30378 ; 3829 |                g_sd_audio_pCoefForcedMono_u1 = TRUE;
                            30379 ; 3830 |                break;
                            30380 ; 3831 |
                            30381 ; 3832 |            } // if ((dwPiloTestLowerLimit < dwPiloTest) ...
                            30382 ; 3833 |        }
                            30383 ; 3834 |        /* Pilot check passed every time in the preceding loop ? */
                            30384 ; 3835 |        if (iCount <= 0)
                            30385 ; 3836 |        {
                            30386 ; 3837 |            *bPilotPresent = TRUE; // result to the calling function
                            30387 ; 3838 |        }
                            30388 ; 3839 |    }
                            30389 ; 3840 |    pDrst->sd_ctl_PilotPresent_b = *bPilotPresent;
                            30390 ; 3841 |    return RetCode;
                            30391 ; 3842 |}
                            30392 ; 3843 |#endif // move it to second codebank
                            30393 ; 3844 |#ifdef FUNCLET
                            30394 ; 3845 |    #pragma asm
P:055F                      30395         org p,".ptextstfm1000":
                            30396 ; 3847 |    #pragma endasm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                            30397 ; 3848 |#endif
                            30398 ; 3849 |
                            30399 ; 3850 |
                            30400 ; 3851 |
                            30401 ; 3852 |#ifdef FUNCLET
                            30402 ; 3853 |    #pragma asm
P:055F                      30403         org p,".ptextstfm1000":
                            30404 ; 3855 |    #pragma endasm
                            30405 ; 3856 |#endif
                            30406 ; 3857 |
                            30407 ; 3858 |////////////////////////////////////////////////////////////////////////////////
                            30408 ; 3859 |//!
                            30409 ; 3860 |//! \brief      STFM tuner station query
                            30410 ; 3861 |//! \fntype     Function
                            30411 ; 3862 |//!
                            30412 ; 3863 |//! Function will perform the following steps:
                            30413 ; 3864 |//!             Wiats 10 msec for SD circuits to settle
                            30414 ; 3865 |//!             Checks RSSI & TONEDATA to decide if this is a valid station
                            30415 ; 3866 |//!
                            30416 ; 3867 |//! \param[in]  pTunerObject     Pointer to Tuner Object.
                            30417 ; 3868 |//!             pbIsStation      Fn updates TRUE if this is a valid station
                            30418 ; 3869 |//!                                         FLASE if not a valid station
                            30419 ; 3870 |//! \return     SUCCESS/ERROR.
                            30420 ; 3871 |//!
                            30421 ; 3872 |////////////////////////////////////////////////////////////////////////////////
                            30422 ; 3873 |_reentrant INT STFM1000TunerQueryIsStation(BOOL * pbIsStation)
                            30423 ; 3874 |{
                            30424 
                            30431 FSTFM1000TunerQueryIsStation:
                            30457 
                            30458 ; 3875 |
                            30459 ; 3876 |    DWORD dwShadowToneReg;
                            30460 ; 3877 |    WORD wRssiMantissa, wRssiExponent;
                            30461 ; 3878 |    WORD wPrssi;
                            30462 ; 3879 |    INT  iRssiLog;
                            30463 ; 3880 |    INT  iMpxDc;
                            30464 ; 3881 |    DWORD dwRssiDecoded;
                            30465 ; 3882 |    DWORD dwTemp;
                            30466 ; 3883 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            30467 
                            30481 
                            30482 ; 3884 |    INT RetCode = SUCCESS;
                            30483 ; 3885 |
                            30484 ; 3886 |#if 0
                            30485 ; 3887 |    // We don't need to do it since we relase control for 10ms before it
                            30486 ; 3888 |    // Wait 10.0 msec for SD circuits to settle
                            30487 ; 3889 |    STFM1000delay_ms(50);
                            30488 ; 3890 |#endif
                            30489 ; 3891 |    // Get Rssi register readings from STFM1000
                            30490 ; 3892 |    RetCode = STFM1000ReadRegisterToShadow(RSSI_TONE_REG_ADDR,
                            30491 ; 3893 |                                            &dwShadowToneReg);
                            30492 
P:055F 055F7C         2 306130432         movec   ssh,y:(r7)+
P:0560 3F0800         2 306330435         move    #8,n7
P:0561 61F400 rrrrrr  3 306630474         move    #FStfmTuneData,r1
P:0563 56F400 000070  3 306930498         move    #>$70,a
P:0565 204F00         2 307130437         move    (r7)+n7
P:0566 77F400 FFFFFC  3 307430469         move    #-4,n7
P:0568 000000         2 307630469         nop             ; (inserted)
P:0569 686F00         4 308030471         move    r0,y:(r7+n7)
P:056A 77F400 FFFFFD  3 308330475         move    #-3,n7
P:056C 000000         2 308530475         nop             ; (inserted)
P:056D 696F00         4 308930477         move    r1,y:(r7+n7)
P:056E 77F400 FFFFFA  3 309230494         move    #-6,n7
P:0570 000000         2 309430494         nop             ; (inserted)
P:0571 044F12         4 309830496         lua     (r7)+n7,r2
P:0572 225000         2 310030497         move    r2,r0
P:0573 0BF080 rrrrrr  6 310630499         jsr     FSTFM1000ReadRegisterToShadow
                            30501 
                            30502 ; 3894 |    if (SUCCESS != RetCode)
                            30503 
P:0575 77F403 FFFFFE  3 310930508         tst     a	                #-2,n7
P:0577 000000         2 311130508         nop             ; (inserted)
P:0578 5E6F00         4 311530507         move    a,y:(r7+n7)
P:0579 0AF0A2 rrrrrr  6 312130511         jne     L721
                            30512 
                            30513 ; 3895 |    {
                            30514 ; 3896 |        //SystemHalt();
                            30515 ; 3897 |        return RetCode;
                            30516 ; 3898 |    }
                            30517 ; 3899 |    g_wRawRSSIData = (WORD)(dwShadowToneReg & 0x00000000FFFF);
                            30518 
                            30536 
                            30537 ; 3900 |    // parse out signal strength reading sub-registers
                            30538 ; 3901 |    // 32-bit Temp variable used below becos, actual variables are 16-bit
                            30539 ; 3902 |    // and the ReadShadowRegister API requires a integer pointer.
                            30540 ; 3903 |    STFM1000ReadShadowRegister(RSSI_DCEST_REG_MASK, &dwShadowToneReg,
                            30541 ; 3904 |            &dwTemp);
                            30542 
P:057B 77F400 FFFFFA  3 312430520         move    #-6,n7
P:057D 270000         2 312630527         move    #0,y1
P:057E 46F400 00FFFF  3 312930528         move    #$FFFF,y0
P:0580 205F00         2 313130521         move    (r7)+
P:0581 5FEF00         4 313530523         move    y:(r7+n7),b
P:0582 205700         2 313730524         move    (r7)-
P:0583 21A500         2 313930529         move    b1,x1
P:0584 59EF00         4 314330526         move    y:(r7+n7),b0
P:0585 212D00         2 314530530         move    b0,b1
P:0586 77F45E FFFFF8  3 314830531         and     y0,b	                #-8,n7
P:0588 21A900         2 315030532         move    b1,b0
P:0589 044F1A         4 315430546         lua     (r7)+n7,n2
P:058A 235400         2 315630547         move    n2,r4
P:058B 20AD00         2 315830533         move    x1,b1
P:058C 77F47E FFFFFA  3 316130534         and     y1,b	                #-6,n7
P:058E 597013 rrrrrr  3 316430548         clr     a	                b0,y:Fg_wRawRSSIData
P:0590 044F10         4 316830552         lua     (r7)+n7,r0
P:0591 20C800         2 317030549         move    y0,a0
P:0592 0BF080 rrrrrr  6 317630553         jsr     FSTFM1000ReadShadowRegister
                            30554 
                            30555 ; 3905 |    pDrst->sd_ctl_ShadowRssiDcEst_w = dwTemp & 0xffff;
                            30556 
                            30581 
                            30582 ; 3906 |
                            30583 ; 3907 |    STFM1000ReadShadowRegister(TONEDATA_REG_MASK, &dwShadowToneReg,
                            30584 ; 3908 |            &dwTemp);
                            30585 
P:0594 77F400 FFFFF8  3 317930558         move    #-8,n7
P:0596 270000         2 318130565         move    #0,y1
P:0597 46F400 00FFFF  3 318430566         move    #$FFFF,y0
P:0599 205F00         2 318630559         move    (r7)+
P:059A 5EEF00         4 319030561         move    y:(r7+n7),a
P:059B 205700         2 319230562         move    (r7)-
P:059C 218400         2 319430567         move    a1,x0
P:059D 58EF00         4 319830564         move    y:(r7+n7),a0
P:059E 77F400 FFFFFD  3 320130574         move    #-3,n7
P:05A0 210C00         2 320330568         move    a0,a1
P:05A1 6EEF00         4 320730576         move    y:(r7+n7),r6
P:05A2 3E3556         2 320930569         and     y0,a	                #53,n6
P:05A3 20DF00         2 321130577         move    y0,n7
P:05A4 218800         2 321330570         move    a1,a0
P:05A5 7E6F00         4 321730579         move    n6,y:(r7+n7)
P:05A6 77F400 FFFFF8  3 322030587         move    #-8,n7
P:05A8 208C00         2 322230571         move    x0,a1
P:05A9 044F14         4 322630589         lua     (r7)+n7,r4
P:05AA 77F400 FFFFFA  3 322930592         move    #-6,n7
P:05AC 586E76         4 323330572         and     y1,a	                a0,y:(r6+n6)
P:05AD 044F10         4 323730594         lua     (r7)+n7,r0
P:05AE 56F400 00000F  3 324030590         move    #>$F,a
P:05B0 50F400 FF0000  3 324330591         move    #$FF0000,a0
P:05B2 0BF080 rrrrrr  6 324930595         jsr     FSTFM1000ReadShadowRegister
                            30596 
                            30597 ; 3909 |    pDrst->sd_ctl_ShadowToneData_w = dwTemp & 0x000fff;
                            30598 
                            30624 
                            30625 ; 3910 |
                            30626 ; 3911 |    // Decode floating point RssiDcEst
                            30627 ; 3912 |    wRssiMantissa = (pDrst->sd_ctl_ShadowRssiDcEst_w & 0xFFE0)>>5;// 11 msb
                            30628 
P:05B4 3E3700         2 325130615         move    #55,n6
P:05B5 77F400 FFFFF8  3 325430600         move    #-8,n7
P:05B7 270000         2 325630607         move    #0,y1
P:05B8 46F400 000FFF  3 325930608         move    #$FFF,y0
P:05BA 205F00         2 326130601         move    (r7)+
P:05BB 5EEF00         4 326530603         move    y:(r7+n7),a
P:05BC 205700         2 326730604         move    (r7)-
P:05BD 218400         2 326930609         move    a1,x0
P:05BE 58EF00         4 327330606         move    y:(r7+n7),a0
P:05BF 210C00         2 327530610         move    a0,a1
P:05C0 77F456 FFFFFD  3 327830611         and     y0,a	                #-3,n7
P:05C2 218800         2 328030612         move    a1,a0
P:05C3 6EEF00         4 328430618         move    y:(r7+n7),r6
P:05C4 045FA0         2 328630630         movec   m0,n7
P:05C5 044E15         4 329030620         lua     (r6)+n6,r5
P:05C6 208C00         2 329230613         move    x0,a1
P:05C7 586E00         4 329630623         move    a0,y:(r6+n6)
P:05C8 7EEF76         4 330030614         and     y1,a	                y:(r7+n7),n6
P:05C9 47F400 00FFE0  3 330330635         move    #$FFE0,y1
P:05CB 5FEE00         4 330730634         move    y:(r6+n6),b
P:05CC 21AC00         2 330930636         move    b1,a1
P:05CD 200076         2 331130637         and     y1,a
P:05CE 200023         2 331330640         lsr     a
P:05CF 200023         2 331530640         lsr     a
P:05D0 200023         2 331730640         lsr     a
P:05D1 200023         2 331930640         lsr     a
P:05D2 200023         2 332130640         lsr     a
                            30642 L723:
                            30645 
                            30646 ; 3913 |    wRssiExponent = (pDrst->sd_ctl_ShadowRssiDcEst_w & 0x001F);   // 5 lsb
                            30647 
                            30652 
                            30653 ; 3914 |    dwRssiDecoded = wRssiMantissa << wRssiExponent;
                            30654 
P:05D3 45F400 00001F  3 332430649         move    #>$1F,x1
P:05D5 2B006E         2 332630650         and     x1,b	                #0,b2
P:05D6 20000B         2 332830657         tst     b
P:05D7 0AF0AA rrrrrr  6 333430658         jeq     L724
P:05D9 06CD20         4 333830659         rep     b1     
P:05DA 200033         2 334030661         lsl     a
                            30663 L724:
                            30669 
                            30670 ; 3915 |
                            30671 ; 3916 |    // Convert Rssi to 10log(Rssi)
                            30672 ; 3917 |    for (wPrssi = 20; wPrssi >0; --wPrssi)
                            30673 
P:05DB 250000         2 334230667         move    #0,x1
P:05DC 218400         2 334430666         move    a1,x0
P:05DD 2C1400         2 334630675         move    #20,a1
P:05DE 5C6F00         4 335030677         move    a1,y:(r7+n7)
P:05DF 061480 rrrrrr  6 335630680         do      #20,L722
                            30682 
                            30683 ; 3918 |    {
                            30684 ; 3919 |        if (dwRssiDecoded >= (1 << wPrssi))
                            30685 
P:05E1 045FA0         2 335830688         movec   m0,n7
P:05E2 2D0100         2 336030687         move    #1,b1
P:05E3 5EEF00         4 336430690         move    y:(r7+n7),a
P:05E4 2A0000         2 336630691         move    #0,a2
P:05E5 200003         2 336830692         tst     a
P:05E6 0AF0AA rrrrrr  6 337430693         jeq     L725
P:05E8 06CC20         4 337830694         rep     a1     
P:05E9 20003B         2 338030696         lsl     b
                            30698 L725:
P:05EA 2E0000         2 338230701         move    #0,a
P:05EB 21A869         2 338430703         tfr     x1,b	                b1,a0
P:05EC 2B0000         2 338630705         move    #0,b2
P:05ED 208900         2 338830704         move    x0,b0
P:05EE 20000D         2 339030706         cmp     a,b
P:05EF 0AF0A9 rrrrrr  6 339630707         jlt     L726
P:05F1 00008C         2 339830708         enddo
P:05F2 0AF080 rrrrrr  6 340430710         jmp     L713
                            30711 L726:
P:05F4 46F400 000001  3 340730713         move    #>1,y0
P:05F6 5FEF00         4 341130714         move    y:(r7+n7),b
P:05F7 20005C         2 341330715         sub     y0,b
P:05F8 5D6F00         4 341730718         move    b1,y:(r7+n7)
                        (61)30721 L722:
                            30723 
                            30724 ; 3920 |        {
                            30725 ; 3921 |            break;
                            30726 ; 3922 |        }
                            30727 ; 3923 |    }
                            30728 ; 3924 |    iRssiLog = (3*dwRssiDecoded >> wPrssi) + (3*wPrssi - 3);
                            30729 
                            30731 L713:
P:05F9 045FA0         2 341930742         movec   m0,n7
P:05FA 270000         2 342130731         move    #0,y1
P:05FB 46F400 000003  3 342430732         move    #>3,y0
P:05FD 0040F8         2 342630733         ori     #$40,mr
P:05FE 000000         2 342830733         nop             ; (inserted)
P:05FF 2000D8         2 343030735         mpy     y0,x0,b
P:0600 2128EA         2 343230736         mac     x1,y0,b b0,a0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0601 2000CA         2 343430737         mac     x0,y1,b
P:0602 00BFB8         2 343630738         andi    #$BF,mr
P:0603 212C00         2 343830739         move    b0,a1
P:0604 21AA00         2 344030740         move    b1,a2
P:0605 5FEF22         4 344430741         asr     a	                y:(r7+n7),b
P:0606 2B0000         2 344630746         move    #0,b2
P:0607 2A000B         2 344830747         tst     b	                #0,a2
P:0608 0AF0AA rrrrrr  6 345430748         jeq     L727
P:060A 06CD20         4 345830749         rep     b1     
P:060B 200022         2 346030751         asr     a
                            30753 L727:
                            30772 
                            30773 ; 3925 |    // clamp to positive
                            30774 ; 3926 |    if (iRssiLog < 0)
                            30775 
P:060C 45F400 000003  3 346330757         move    #>3,x1
P:060E 4CEF00         4 346730758         move    y:(r7+n7),x0
P:060F 2187A8         2 346930759         mpy     x0,x1,b	                a1,y1
P:0610 21062A         2 347130760         asr     b	                a0,y0
P:0611 212F00         2 347330764         move    b0,b
P:0612 20006C         2 347530765         sub     x1,b
P:0613 21A913         2 347730767         clr     a	                b1,b0
P:0614 212800         2 347930768         move    b0,a0
P:0615 200030         2 348130769         add     y,a
P:0616 210F00         2 348330770         move    a0,b
P:0617 210E00         2 348530777         move    a0,a
P:0618 200003         2 348730778         tst     a
P:0619 0AF0A1 rrrrrr  6 349330779         jge     L714
                            30780 
                            30781 ; 3927 |    {
                            30782 ; 3928 |        iRssiLog = 0;
                            30783 
                            30786 
                            30787 ; 3929 |    }
                            30788 ; 3930 |    // Compensate for errors in truncation/approximation by adding 1
                            30789 ; 3931 |    iRssiLog += 1;
                            30790 
P:061B 2F0000         2 349530785         move    #0,b
                            30792 L714:
                            30797 
                            30798 ; 3932 |
                            30799 ; 3933 |    // Save the value for sending across to UI later
                            30800 ; 3934 |    pDrst->sd_ctl_ShadowRssiDcEstLog_w = (WORD)iRssiLog;
                            30801 
                            30806 
                            30807 ; 3935 |    s_iFMSignalStrengthRSSI = iRssiLog;
                            30808 
                            30811 
                            30812 ; 3936 |
                            30813 ; 3937 |    // Determine absolute value of iMpxDc
                            30814 ; 3938 |    /* TONE_DATA_REG is 12 bit signed, sign extend if needed */
                            30815 ; 3939 |    if (pDrst->sd_ctl_ShadowToneData_w & 0x000800)
                            30816 
P:061C 44F400 000001  3 349830792         move    #>1,x0
P:061E 3E3648         2 350030793         add     x0,b	                #54,n6
P:061F 21A600         2 350230794         move    b1,y0
P:0620 4E6E00         4 350630805         move    y0,y:(r6+n6)
P:0621 4E7000 rrrrrr  3 350930810         move    y0,y:Fs_iFMSignalStrengthRSSI
P:0623 5FE500         2 351130818         move    y:(r5),b
P:0624 0ACD0B rrrrrr  6 351730819         jclr    #11,b1,L715
                            30820 
                            30821 ; 3940 |    {
                            30822 ; 3941 |        /* negative, so sign extend to 24 bits int */
                            30823 ; 3942 |        iMpxDc = pDrst->sd_ctl_ShadowToneData_w | 0xfff000;
                            30824 
                            30828 
                            30829 ; 3943 |    }
                            30830 ; 3944 |    else
                            30831 ; 3945 |    {
                            30832 ; 3946 |        iMpxDc = pDrst->sd_ctl_ShadowToneData_w;
                            30833 
P:0626 47F400 FFF000  3 352030826         move    #$FFF000,y1
P:0628 20007A         2 352230827         or      y1,b
                            30835 L715:
                            30836 
                            30837 ; 3947 |    }
                            30838 ; 3948 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            30839 ; 3949 |    s_iFMSignalStrengthMpxDc = iMpxDc;
                            30840 ; 3950 |#endif
                            30841 ; 3951 |    iMpxDc = (iMpxDc < 0) ? (0 - iMpxDc) : (iMpxDc);
                            30842 
P:0629 21AF00         2 352430835         move    b1,b
P:062A 21E70B         2 352630845         tst     b	                b,y1
P:062B 0AF0A1 rrrrrr  6 353230846         jge     L717
                            30850 
                            30851 ; 3952 |#ifdef DEBUG_MONITOR_SIGNAL_QUALITY
                            30852 ; 3953 |    //s_wMpxAdc = iMpxDc;
                            30853 ; 3954 |#endif
                            30854 ; 3955 |    // Check if both values over their thresholds; if so, it's valid.
                            30855 ; 3956 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            30856 ; 3957 |    if (iRssiLog > pDrst->sd_ctl_TuneRssiTh_w)
                            30857 ; 3958 |#else
                            30858 ; 3959 |    if ((iRssiLog > pDrst->sd_ctl_TuneRssiTh_w) &&
                            30859 ; 3960 |       (iMpxDc < pDrst->sd_ctl_TuneMpxDcTh_w))
                            30860 
P:062D 2F0000         2 353430847         move    #0,b
P:062E 20007C         2 353630848         sub     y1,b
P:062F 21A700         2 353830849         move    b1,y1
P:0630 3E2451         2 354030862 L717:   tfr     y0,a	                #36,n6
P:0631 2A0000         2 354230867         move    #0,a2
P:0632 5FEE00         4 354630865         move    y:(r6+n6),b
P:0633 2B0000         2 354830866         move    #0,b2
P:0634 200005         2 355030868         cmp     b,a
P:0635 0AF0AF rrrrrr  6 355630869         jle     L719
P:0637 3E2579         2 355830870         tfr     y1,b	                #37,n6
P:0638 2B0000         2 356030875         move    #0,b2
P:0639 5EEE00         4 356430873         move    y:(r6+n6),a
P:063A 2A0000         2 356630874         move    #0,a2
P:063B 20000D         2 356830876         cmp     a,b
P:063C 0AF0A1 rrrrrr  6 357430877         jge     L719
                            30878 
                            30879 ; 3961 |#endif
                            30880 ; 3962 |    {
                            30881 ; 3963 |        *pbIsStation = TRUE;
                            30882 
                            30891 
                            30892 ; 3964 |    }
                            30893 
P:063E 77F400 FFFFFC  3 357730884         move    #-4,n7
P:0640 290100         2 357930887         move    #1,b0
P:0641 6EEF00         4 358330886         move    y:(r7+n7),r6
P:0642 000000         2 358530886         nop             ; (inserted)
P:0643 596600         2 358730888         move    b0,y:(r6)
P:0644 0AF080 rrrrrr  6 359330895         jmp     L721
                            30896 
                            30897 ; 3965 |    else
                            30898 ; 3966 |    {
                            30899 ; 3967 |        *pbIsStation = FALSE;
                            30900 
                            30902 L719:
                            30912 
                            30913 ; 3968 |    }
                            30914 ; 3969 |
                            30915 ; 3970 |    return RetCode;
                            30916 
P:0646 77F41B FFFFFC  3 359630908         clr     b	                #-4,n7
P:0648 000000         2 359830908         nop             ; (inserted)
P:0649 6EEF00         4 360230907         move    y:(r7+n7),r6
P:064A 000000         2 360430907         nop             ; (inserted)
P:064B 5F6600         2 360630909         move    b,y:(r6)
                            30918 L721:
                            30923 
                            30924 ; 3971 |}
                            30925 
P:064C 77F400 FFFFFE  3 360930918         move    #-2,n7
P:064E 000000         2 361130918         nop             ; (inserted)
P:064F 5EEF00         4 361530920         move    y:(r7+n7),a
P:0650 77F400 FFFFF7  3 361830927         move    #-9,n7
P:0652 000000         2 362030927         nop             ; (inserted)
P:0653 05EF7C         4 362430929         movec   y:(r7+n7),ssh
P:0654 204F00         2 362630931         move    (r7)+n7
P:0655 00000C         4 363030933         rts
                            30941 
                            30942 ; 3972 |
                            30943 ; 3973 |////////////////////////////////////////////////////////////////////////////////
                            30944 ; 3974 |//!
                            30945 ; 3975 |//! \brief      Read a 4-byte STFM register via I2C interface into shadow
                            30946 ; 3976 |//! \fntype     function
                            30947 ; 3977 |//!
                            30948 ; 3978 |//! Function will perform the following steps:
                            30949 ; 3979 |//!     - Sends out address byte over the I2C interface
                            30950 ; 3980 |//!     - Read back 4-byte register contents
                            30951 ; 3981 |//!     - Updates shadow
                            30952 ; 3982 |//!
                            30953 ; 3983 |//! \param[in]  wAddr     register address to read from
                            30954 ; 3984 |//!             pShadow     pointer to shadow register
                            30955 ; 3985 |//!
                            30956 ; 3986 |//! \return     SUCCESS/ERROR.
                            30957 ; 3987 |//!
                            30958 ; 3988 |////////////////////////////////////////////////////////////////////////////////
                            30959 ; 3989 |_reentrant INT STFM1000ReadRegisterToShadow(WORD wAddr, DWORD *pShadow)
                            30960 ; 3990 |{
                            30961 
                            30968 FSTFM1000ReadRegisterToShadow:
                            30982 
                            30983 ; 3991 |    WORD wTriesCount = 0;
                            30984 
                            31000 
                            31001 ; 3992 |    INT  RetCode;
                            31002 ; 3993 | // Now begin writing the address and relevant data bytes
                            31003 ; 3994 |    do{
                            31004 
P:0656 055F7C         2 363230969         movec   ssh,y:(r7)+
P:0657 3F041B         2 363430996         clr     b	                #4,n7
P:0658 000000         2 363630996         nop             ; (inserted)
P:0659 204F00         2 363830974         move    (r7)+n7
P:065A 77F400 FFFFFD  3 364130986         move    #-3,n7
P:065C 000000         2 364330986         nop             ; (inserted)
P:065D 686F00         4 364730988         move    r0,y:(r7+n7)
P:065E 77F400 FFFFFC  3 365030991         move    #-4,n7
P:0660 000000         2 365230991         nop             ; (inserted)
P:0661 5C6F00         4 365630993         move    a1,y:(r7+n7)
                            31006 L728:
                            31011 
                            31012 ; 3995 |
                            31013 ; 3996 |       RetCode = STFM1000I2CReadRegister((wAddr-4),     // Register addr
                            31014 ; 3997 |                                          0x00000000,    // dummy write value
                            31015 ; 3998 |                                          pShadow // Data to set the register
                            31016 ; 3999 |                                         );
                            31017 
P:0662 77F400 FFFFFE  3 365931006         move    #-2,n7
P:0664 2E0000         2 366131029         move    #0,a
P:0665 46F400 000004  3 366431022         move    #>4,y0
P:0667 5D6F00         4 366831008         move    b1,y:(r7+n7)
P:0668 77F400 FFFFFC  3 367131019         move    #-4,n7
P:066A 000000         2 367331019         nop             ; (inserted)
P:066B 5FEF00         4 367731021         move    y:(r7+n7),b
P:066C 77F45C FFFFFD  3 368031023         sub     y0,b	                #-3,n7
P:066E 000000         2 368231023         nop             ; (inserted)
P:066F 68EF00         4 368631026         move    y:(r7+n7),r0
P:0670 0BF080 rrrrrr  6 369231030         jsr     FSTFM1000I2CReadRegister
                            31035 
                            31036 ; 4000 |       if(0 != RetCode)
                            31037 
P:0672 21C703         2 369431039         tst     a	                a,y1
P:0673 0AF0AA rrrrrr  6 370031040         jeq     L729
                            31041 
                            31042 ; 4001 |       {
                            31043 ; 4002 |           RetCode = STFM1000I2CInit(0,0);
                            31044 
P:0675 2E001B         2 370231047         clr     b	                #0,a
P:0676 0BF080 rrrrrr  6 370831048         jsr     FSTFM1000I2CInit
                            31052 
                            31053 ; 4003 |       }
                            31054 ; 4004 |       else
                            31055 ; 4005 |       {
                            31056 ; 4006 |            break;
                            31057 ; 4007 |       }
                            31058 ; 4008 |
                            31059 ; 4009 |    }while(++wTriesCount < MAX_I2C_READ_TRIES);
                            31060 
P:0678 77F400 FFFFFE  3 371131062         move    #-2,n7
P:067A 15B400 000001  3 371431050         move    a,y1	                #>1,x1
P:067C 46F400 000006  3 371731072         move    #>6,y0
P:067E 5EEF00         4 372131064         move    y:(r7+n7),a
P:067F 200060         2 372331066         add     x1,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0680 218F00         2 372531069         move    a1,b
P:0681 2B0000         2 372731073         move    #0,b2
P:0682 20005D         2 372931074         cmp     y0,b
P:0683 0AF0A9 rrrrrr  6 373531075         jlt     L728
                            31076 L729:
                            31081 
                            31082 ; 4010 |
                            31083 ; 4011 |    STFM1000ReadDataReAlignment(pShadow);
                            31084 
P:0685 045FA0         2 373731076         movec   m0,n7
P:0686 000000         2 373931076         nop             ; (inserted)
P:0687 4F6F00         4 374331078         move    y1,y:(r7+n7)
P:0688 77F400 FFFFFD  3 374631086         move    #-3,n7
P:068A 000000         2 374831086         nop             ; (inserted)
P:068B 68EF00         4 375231088         move    y:(r7+n7),r0
P:068C 0BF080 rrrrrr  6 375831089         jsr     FSTFM1000ReadDataReAlignment
                            31094 
                            31095 ; 4012 |    // Something really bad
                            31096 ; 4013 |    if(0 != RetCode)
                            31097 ; 4014 |    {
                            31098 ; 4015 |        // SystemHalt();
                            31099 ; 4016 |    }
                            31100 ; 4017 |    return RetCode;
                            31101 
                            31108 
                            31109 ; 4018 |}  // end STFM1000ReadRegisterToShadow()
                            31110 
P:068E 045FA0         2 376031103         movec   m0,n7
P:068F 000000         2 376231103         nop             ; (inserted)
P:0690 5EEF00         4 376631105         move    y:(r7+n7),a
P:0691 77F400 FFFFFB  3 376931112         move    #-5,n7
P:0693 000000         2 377131112         nop             ; (inserted)
P:0694 05EF7C         4 377531114         movec   y:(r7+n7),ssh
P:0695 204F00         2 377731116         move    (r7)+n7
P:0696 00000C         4 378131118         rts
                            31122 
                            31123 ; 4019 |
                            31124 ; 4020 |////////////////////////////////////////////////////////////////////////////////
                            31125 ; 4021 |//!
                            31126 ; 4022 |//! \brief      Extract a register field (based on mask) from shadow
                            31127 ; 4023 |//! \fntype     function
                            31128 ; 4024 |//!
                            31129 ; 4025 |//! Function will perform the following steps:
                            31130 ; 4026 |//!     - Extract from shadow the required bit-field
                            31131 ; 4027 |//!     - Put the data into value pointed by pData
                            31132 ; 4028 |//!
                            31133 ; 4029 |//! \param[in]  dwMask     Bit-positions to place the data
                            31134 ; 4030 |//!             pShadow     pointer to shadow register
                            31135 ; 4031 |//!             pData       Pointer to data (this fn will update)
                            31136 ; 4032 |//!
                            31137 ; 4033 |//! \return     SUCCESS/ERROR.
                            31138 ; 4034 |//!
                            31139 ; 4035 |////////////////////////////////////////////////////////////////////////////////
                            31140 ; 4036 |_reentrant void STFM1000ReadShadowRegister(DWORD dwMask, DWORD *pShadow,DWORD *pData)
                            31141 ; 4037 |{
                            31142 
                            31147 FSTFM1000ReadShadowRegister:
                            31160 
                            31161 ; 4038 |    DWORD dwShift, dwMaskCopy, dwNewData = *pShadow;
                            31162 
                            31170 
                            31171 ; 4039 |
                            31172 ; 4040 |    // Determine from mask the shift required to "place" the new data
                            31173 ; 4041 |    dwMaskCopy = dwMask;
                            31174 
                            31180 
                            31181 ; 4042 |    dwShift = 0;
                            31182 
                            31186 
                            31187 ; 4043 |    while ((dwMaskCopy & 0x00000001) == 0)  // Determine how many trailing zeros
                            31188 
P:0697 218700         2 378331165         move    a1,y1
P:0698 210679         2 378531176         tfr     y1,b	                a0,y0
P:0699 4CD813         2 378731184         clr     a	                y:(r0)+,x0
P:069A 20C900         2 378931178         move    y0,b0
P:069B 4DD000         2 379131169         move    y:(r0)-,x1
P:069C 0AF080 rrrrrr  6 379731190         jmp     L731
                            31191 
                            31192 ; 4044 |    {
                            31193 ; 4045 |        dwMaskCopy = dwMaskCopy >> 1;
                            31194 
                            31196 L730:
                            31198 
                            31199 ; 4046 |        dwShift++;
                            31200 
P:069E 2B0000         2 379931196         move    #0,b2
P:069F 20002A         2 380131197         asr     b
P:06A0 000008         2 380331202         inc     a
P:06A1 0AC900 rrrrrr  6 380931204 L731:   jclr    #0,b0,L730
                            31205 
                            31206 ; 4047 |    }
                            31207 ; 4048 |
                            31208 ; 4049 |    *pData = (dwNewData & dwMask) >> dwShift;
                            31209 
P:06A3 2A0069         2 381131211         tfr     x1,b	                #0,a2
P:06A4 208900         2 381331212         move    x0,b0
P:06A5 21A500         2 381531213         move    b1,x1
P:06A6 212D00         2 381731214         move    b0,b1
P:06A7 2B005E         2 381931215         and     y0,b	                #0,b2
P:06A8 21A900         2 382131216         move    b1,b0
P:06A9 20AD00         2 382331217         move    x1,b1
P:06AA 20007E         2 382531218         and     y1,b
P:06AB 200003         2 382731225         tst     a
P:06AC 0AF0AA rrrrrr  6 383331226         jeq     L732
P:06AE 06C820         4 383731227         rep     a0     
P:06AF 20002A         2 383931229         asr     b
                            31231 L732:
                            31235 
                            31236 ; 4050 |}  // end STFM1000ReadShadowRegister()
                            31237 
P:06B0 595C00         2 384131233         move    b0,y:(r4)+
P:06B1 5D5400         2 384331234         move    b1,y:(r4)-
P:06B2 00000C         4 384731239         rts
                            31245 
                            31246 ; 4051 |
                            31247 ; 4052 |
                            31248 ; 4053 |////////////////////////////////////////////////////////////////////////////////
                            31249 ; 4054 |//!
                            31250 ; 4055 |//! \brief      Read masked I2C sub-register into buffer
                            31251 ; 4056 |//! \fntype     function
                            31252 ; 4057 |//!
                            31253 ; 4058 |//! Function will perform the following steps:
                            31254 ; 4059 |//!     - Extract from shadow the required bit-field
                            31255 ; 4060 |//!     - Put the data into value pointed by pData
                            31256 ; 4061 |//!
                            31257 ; 4062 |//! \param[in]  wAddr     register address to read from
                            31258 ; 4063 |//!             dwMask     Bit-positions to extract the data
                            31259 ; 4064 |//!             pData       Pointer to data (this fn will update)
                            31260 ; 4065 |//!
                            31261 ; 4066 |//! \return     SUCCESS/ERROR.
                            31262 ; 4067 |//!
                            31263 ; 4068 |////////////////////////////////////////////////////////////////////////////////
                            31264 ; 4069 |_reentrant INT STFM1000ReadSubRegister(WORD wAddr, DWORD dwMask,
                            31265 ; 4070 |    DWORD *pData)
                            31266 ; 4071 |{
                            31267 
                            31272 FSTFM1000ReadSubRegister:
                            31289 
                            31290 ; 4072 |    DWORD dwTempShadow;
                            31291 ; 4073 |    INT RetCode = SUCCESS;
                            31292 
                            31308 
                            31309 ; 4074 |    // read 4-byte register into temporary buffer
                            31310 ; 4075 |    RetCode = STFM1000ReadRegisterToShadow(wAddr, &dwTempShadow);
                            31311 
P:06B3 055F7C         2 384931273         movec   ssh,y:(r7)+
P:06B4 3F0600         2 385131276         move    #6,n7
P:06B5 000000         2 385331276         nop             ; (inserted)
P:06B6 204F00         2 385531278         move    (r7)+n7
P:06B7 77F400 FFFFFE  3 385831294         move    #-2,n7
P:06B9 000000         2 386031294         nop             ; (inserted)
P:06BA 686F00         4 386431296         move    r0,y:(r7+n7)
P:06BB 77F400 FFFFFC  3 386731299         move    #-4,n7
P:06BD 205F00         2 386931300         move    (r7)+
P:06BE 5C6F00         4 387331302         move    a1,y:(r7+n7)
P:06BF 205700         2 387531303         move    (r7)-
P:06C0 586F00         4 387931305         move    a0,y:(r7+n7)
P:06C1 77F400 FFFFFA  3 388231313         move    #-6,n7
P:06C3 21AE00         2 388431317         move    b1,a
P:06C4 044F1E         4 388831315         lua     (r7)+n7,n6
P:06C5 23D000         2 389031316         move    n6,r0
P:06C6 0BF080 rrrrrr  6 389631318         jsr     FSTFM1000ReadRegisterToShadow
                            31323 
                            31324 ; 4076 |
                            31325 ; 4077 |    if (SUCCESS != RetCode)
                            31326 
P:06C8 045FA0         2 389831328         movec   m0,n7
P:06C9 200003         2 390031331         tst     a
P:06CA 5E6F00         4 390431330         move    a,y:(r7+n7)
P:06CB 0AF0A2 rrrrrr  6 391031334         jne     L737
                            31335 
                            31336 ; 4078 |    {
                            31337 ; 4079 |        //SystemHalt();
                            31338 ; 4080 |         return RetCode;
                            31339 ; 4081 |    }
                            31340 ; 4082 |
                            31341 ; 4083 |    // get masked sub-register out of temporary buffer
                            31342 ; 4084 |    STFM1000ReadShadowRegister(dwMask, &dwTempShadow, pData);
                            31343 
P:06CD 77F400 FFFFFE  3 391331345         move    #-2,n7
P:06CF 000000         2 391531345         nop             ; (inserted)
P:06D0 6CEF00         4 391931347         move    y:(r7+n7),r4
P:06D1 77F400 FFFFFC  3 392231348         move    #-4,n7
P:06D3 205F00         2 392431349         move    (r7)+
P:06D4 5EEF00         4 392831351         move    y:(r7+n7),a
P:06D5 205700         2 393031352         move    (r7)-
P:06D6 58EF00         4 393431354         move    y:(r7+n7),a0
P:06D7 77F400 FFFFFA  3 393731355         move    #-6,n7
P:06D9 000000         2 393931355         nop             ; (inserted)
P:06DA 044F10         4 394331357         lua     (r7)+n7,r0
P:06DB 0BF080 rrrrrr  6 394931358         jsr     FSTFM1000ReadShadowRegister
                            31365 
                            31366 ; 4085 |
                            31367 ; 4086 |    return RetCode;
                            31368 
                            31370 L737:
                            31375 
                            31376 ; 4087 |}
                            31377 
P:06DD 045FA0         2 395131370         movec   m0,n7
P:06DE 000000         2 395331370         nop             ; (inserted)
P:06DF 5EEF00         4 395731372         move    y:(r7+n7),a
P:06E0 77F400 FFFFF9  3 396031379         move    #-7,n7
P:06E2 000000         2 396231379         nop             ; (inserted)
P:06E3 05EF7C         4 396631381         movec   y:(r7+n7),ssh
P:06E4 204F00         2 396831383         move    (r7)+n7
P:06E5 00000C         4 397231385         rts
                            31388 
                            31389 ; 4088 |
                            31390 ; 4089 |////////////////////////////////////////////////////////////////////////////////
                            31391 ; 4090 |//!
                            31392 ; 4091 |//! \brief      Write an STFM register via I2C interface
                            31393 ; 4092 |//! \fntype     function
                            31394 ; 4093 |//!
                            31395 ; 4094 |//! Function will perform the following steps:
                            31396 ; 4095 |//!     - shift the data into correct bit-field based on mask
                            31397 ; 4096 |//!     - form new data by placing this shifted data with that from shadow
                            31398 ; 4097 |//!     - Write into STFM register and update the shadow.
                            31399 ; 4098 |//!     - DOES NOT update shadow on failure.
                            31400 ; 4099 |//!
                            31401 ; 4100 |//! \param[in]  wAddr     register address to write to
                            31402 ; 4101 |//!             dwMask     Bit-positions to place the data
                            31403 ; 4102 |//!             pShadow     pointer to shadow register
                            31404 ; 4103 |//!             dwdata     New data to write into STFM register
                            31405 ; 4104 |//!
                            31406 ; 4105 |//! \return     SUCCESS/ERROR.
                            31407 ; 4106 |//!
                            31408 ; 4107 |////////////////////////////////////////////////////////////////////////////////
                            31409 ; 4108 |_reentrant INT STFM1000WriteRegister(WORD wAddr, DWORD dwMask, DWORD *pdwShadow, DWORD dwData)
                            31410 ; 4109 |{
                            31411 
                            31416 FSTFM1000WriteRegister:
                            31445 
                            31446 ; 4110 |    DWORD dwShift, dwMaskCopy, dwPlacedData, dwDataNoChange, dwNewData;
                            31447 ; 4111 |    DWORD dwEventMask;
                            31448 ; 4112 |    WORD  wTriesCount = 0;
                            31449 
                            31469 
                            31470 ; 4113 |    INT RetCode = SUCCESS;
                            31471 ; 4114 |
                            31472 ; 4115 |    // Determine from mask the shift required to "place" the new data
                            31473 ; 4116 |    dwMaskCopy = dwMask;
                            31474 
                            31479 
                            31480 ; 4117 |    dwShift = 0;
                            31481 
                            31486 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                            31487 ; 4118 |    while (0==(dwMaskCopy&0x00000001))  // Determine how many trailing zeros
                            31488 
P:06E6 055F7C         2 397431417         movec   ssh,y:(r7)+
P:06E7 3F0700         2 397631420         move    #7,n7
P:06E8 210600         2 397831451         move    a0,y0
P:06E9 218700         2 398031452         move    a1,y1
P:06EA 204F00         2 398231422         move    (r7)+n7
P:06EB 77F400 FFFFFB  3 398531455         move    #-5,n7
P:06ED 280000         2 398731460         move    #0,a0
P:06EE 20E500         2 398931477         move    y1,x1
P:06EF 4C6F00         4 399331457         move    x0,y:(r7+n7)
P:06F0 77F400 FFFFFD  3 399631462         move    #-3,n7
P:06F2 20C400         2 399831476         move    y0,x0
P:06F3 586F13         4 400231483         clr     a	                a0,y:(r7+n7)
P:06F4 77F400 FFFFFE  3 400531485         move    #-2,n7
P:06F6 0AF080 rrrrrr  6 401131490         jmp     L744
                            31491 
                            31492 ; 4119 |    {
                            31493 ; 4120 |        dwMaskCopy = dwMaskCopy >> 1;
                            31494 
                            31496 L743:
                            31505 
                            31506 ; 4121 |        dwShift++;
                            31507 
P:06F8 77F400 FFFFFE  3 401431509         move    #-2,n7
P:06FA 2A0000         2 401631499         move    #0,a2
P:06FB 205F22         2 401831500         asr     a	                (r7)+
P:06FC 210400         2 402031501         move    a0,x0
P:06FD 218500         2 402231502         move    a1,x1
P:06FE 5EEF00         4 402631512         move    y:(r7+n7),a
P:06FF 205700         2 402831513         move    (r7)-
P:0700 58EF00         4 403231515         move    y:(r7+n7),a0
P:0701 000008         2 403431516         inc     a
                            31519 L744:
P:0702 205F00         2 403631519         move    (r7)+
P:0703 5C6F00         4 404031521         move    a1,y:(r7+n7)
P:0704 205700         2 404231522         move    (r7)-
P:0705 586F61         4 404631528         tfr     x1,a	                a0,y:(r7+n7)
P:0706 208800         2 404831529         move    x0,a0
P:0707 0AC800 rrrrrr  6 405431530         jclr    #0,a0,L743
                            31533 
                            31534 ; 4122 |    }
                            31535 ; 4123 |
                            31536 ; 4124 |    // shift data into place and mask it
                            31537 ; 4125 |    dwPlacedData = (dwData<< dwShift) & dwMask;
                            31538 
P:0709 77F400 FFFFFE  3 405731540         move    #-2,n7
P:070B 205F00         2 405931541         move    (r7)+
P:070C 5EEF00         4 406331543         move    y:(r7+n7),a
P:070D 2A0000         2 406531547         move    #0,a2
P:070E 205700         2 406731544         move    (r7)-
P:070F 58EF00         4 407131546         move    y:(r7+n7),a0
P:0710 200003         2 407331548         tst     a
P:0711 0AF0AA rrrrrr  6 407931549         jeq     L748
P:0713 06C820         4 408331550         rep     a0     
P:0714 20003A         2 408531552         asl     b
                            31554 L748:
                            31566 
                            31567 ; 4126 |
                            31568 ; 4127 |    // Apply anti-mask to shadow reg for data that we're NOT changing
                            31569 ; 4128 |    dwDataNoChange = *pdwShadow&(~dwMask);
                            31570 
                            31599 
                            31600 ; 4129 |    // data_no_change has zeros over mask position now
                            31601 ; 4130 |
                            31602 ; 4131 |    // Form new control data - this data should represent the entire 32-bit
                            31603 ; 4132 |    // control word, however we will only transmit those bytes of the control
                            31604 ; 4133 |    // word to which the mask applies
                            31605 ; 4134 |    dwNewData = dwDataNoChange | dwPlacedData;
                            31606 
                            31632 
                            31633 ; 4135 |
                            31634 ; 4136 |    STFM1000WriteDataReAlignment(&dwNewData);
                            31635 
P:0715 21A400         2 408731559         move    b1,x0
P:0716 212D00         2 408931560         move    b0,b1
P:0717 77F45E FFFFFC  3 409231561         and     y0,b	                #-4,n7
P:0719 21A900         2 409431562         move    b1,b0
P:071A 208D00         2 409631563         move    x0,b1
P:071B 686F7E         4 410031564         and     y1,b	                r0,y:(r7+n7)
P:071C 4CD871         2 410231579         tfr     y1,a	                y:(r0)+,x0
P:071D 20C800         2 410431580         move    y0,a0
P:071E 4DD036         2 410631581         neg     a	                y:(r0)-,x1
P:071F 00000A         2 410831582         dec     a
P:0720 210600         2 411031588         move    a0,y0
P:0721 218761         2 411231590         tfr     x1,a	                a1,y1
P:0722 208800         2 411431591         move    x0,a0
P:0723 218500         2 411631592         move    a1,x1
P:0724 210C00         2 411831593         move    a0,a1
P:0725 212456         2 412031594         and     y0,a	                b0,x0
P:0726 218800         2 412231595         move    a1,a0
P:0727 20AC00         2 412431596         move    x1,a1
P:0728 205F76         2 412631597         and     y1,a	                (r7)+
P:0729 21A500         2 412831609         move    b1,x1
P:072A 218600         2 413031610         move    a1,y0
P:072B 210C00         2 413231611         move    a0,a1
P:072C 77F442 FFFFFE  3 413531612         or      x0,a	                #-2,n7
P:072E 218800         2 413731613         move    a1,a0
P:072F 20CC00         2 413931614         move    y0,a1
P:0730 200062         2 414131615         or      x1,a
P:0731 5C6F00         4 414531621         move    a1,y:(r7+n7)
P:0732 205700         2 414731622         move    (r7)-
P:0733 586F00         4 415131624         move    a0,y:(r7+n7)
P:0734 77F400 FFFFF9  3 415431625         move    #-7,n7
P:0736 205F00         2 415631626         move    (r7)+
P:0737 5C6F00         4 416031628         move    a1,y:(r7+n7)
P:0738 205700         2 416231629         move    (r7)-
P:0739 044F10         4 416631637         lua     (r7)+n7,r0
P:073A 586F00         4 417031631         move    a0,y:(r7+n7)
P:073B 0BF080 rrrrrr  6 417631638         jsr     FSTFM1000WriteDataReAlignment
                            31641 
                            31642 ; 4137 |    // Now begin writing the address and relevant data bytes
                            31643 ; 4138 |    do{
                            31644 
P:073D 77F400 FFFFFD  3 417931646         move    #-3,n7
P:073F 000000         2 418131646         nop             ; (inserted)
P:0740 5FEF00         4 418531648         move    y:(r7+n7),b
                            31651 L745:
                            31656 
                            31657 ; 4139 |
                            31658 ; 4140 |        RetCode = STFM1000I2CWriteRegister(wAddr,     // Register addr
                            31659 ; 4141 |                                           dwNewData // Data to set the register
                            31660 ; 4142 |                                           );
                            31661 
P:0741 77F400 FFFFFD  3 418831651         move    #-3,n7
P:0743 000000         2 419031651         nop             ; (inserted)
P:0744 5D6F00         4 419431653         move    b1,y:(r7+n7)
P:0745 77F400 FFFFF9  3 419731663         move    #-7,n7
P:0747 205F00         2 419931664         move    (r7)+
P:0748 5EEF00         4 420331666         move    y:(r7+n7),a
P:0749 205700         2 420531667         move    (r7)-
P:074A 58EF00         4 420931669         move    y:(r7+n7),a0
P:074B 77F400 FFFFFB  3 421231670         move    #-5,n7
P:074D 000000         2 421431670         nop             ; (inserted)
P:074E 5FEF00         4 421831672         move    y:(r7+n7),b
P:074F 0BF080 rrrrrr  6 422431675         jsr     FSTFM1000I2CWriteRegister
                            31680 
                            31681 ; 4143 |       if(0 != RetCode)
                            31682 
P:0751 21C603         2 422631684         tst     a	                a,y0
P:0752 0AF0AA rrrrrr  6 423231685         jeq     L746
                            31686 
                            31687 ; 4144 |       {
                            31688 ; 4145 |           RetCode = STFM1000I2CInit(0,0);
                            31689 
P:0754 2E001B         2 423431692         clr     b	                #0,a
P:0755 0BF080 rrrrrr  6 424031693         jsr     FSTFM1000I2CInit
                            31697 
                            31698 ; 4146 |       }
                            31699 ; 4147 |       else
                            31700 ; 4148 |       {
                            31701 ; 4149 |            break;
                            31702 ; 4150 |       }
                            31703 ; 4151 |    }while(++wTriesCount < MAX_I2C_WRITE_TRIES);
                            31704 
P:0757 77F400 FFFFFD  3 424331706         move    #-3,n7
P:0759 10B400 000006  3 424631695         move    a,y0	                #>6,x0
P:075B 5FEF00         4 425031708         move    y:(r7+n7),b
P:075C 56F400 000001  3 425331709         move    #>1,a
P:075E 200018         2 425531710         add     a,b
P:075F 2B0000         2 425731714         move    #0,b2
P:0760 20004D         2 425931715         cmp     x0,b
P:0761 0AF0A9 rrrrrr  6 426531716         jlt     L745
                            31717 
                            31718 ; 4152 |
                            31719 ; 4153 |    // Something really bad
                            31720 ; 4154 |    if(0 != RetCode)
                            31721 ; 4155 |    {
                            31722 ; 4156 |        //SystemHalt();
                            31723 ; 4157 |    }
                            31724 ; 4158 |
                            31725 ; 4159 |    if (RetCode == SUCCESS)
                            31726 
                            31728 L746:
P:0763 20CE00         2 426731728         move    y0,a
P:0764 200003         2 426931729         tst     a
P:0765 0AF0A2 rrrrrr  6 427531732         jne     L747
                            31733 
                            31734 ; 4160 |    {
                            31735 ; 4161 |        // Save the unlignment data, not alognment data
                            31736 ; 4162 |        *pdwShadow = dwDataNoChange | dwPlacedData;
                            31737 
                            31754 
                            31755 ; 4163 |    }
                            31756 ; 4164 |    else
                            31757 ; 4165 |    {
                            31758 ; 4166 |        //SystemHalt();
                            31759 ; 4167 |    }
                            31760 
P:0767 77F400 FFFFFE  3 427831739         move    #-2,n7
P:0769 205F00         2 428031740         move    (r7)+
P:076A 4DEF00         4 428431742         move    y:(r7+n7),x1
P:076B 205700         2 428631743         move    (r7)-
P:076C 4CEF00         4 429031745         move    y:(r7+n7),x0
P:076D 77F400 FFFFFC  3 429331746         move    #-4,n7
P:076F 000000         2 429531746         nop             ; (inserted)
P:0770 6EEF00         4 429931748         move    y:(r7+n7),r6
P:0771 000000         2 430131748         nop             ; (inserted)
P:0772 4C5E00         2 430331750         move    x0,y:(r6)+
P:0773 4D5600         2 430531751         move    x1,y:(r6)-
                            31762 L747:
                            31763 
                            31764 ; 4168 |
                            31765 ; 4169 |    return RetCode;
                            31766 ; 4170 |}  // end STFM1000WriteRegister()
                            31767 
P:0774 77F400 FFFFF8  3 430831769         move    #-8,n7
P:0776 000000         2 431031769         nop             ; (inserted)
P:0777 05EF7C         4 431431771         movec   y:(r7+n7),ssh
P:0778 204F00         2 431631773         move    (r7)+n7
P:0779 00000C         4 432031775         rts
                            31781 
                            31782 ; 4171 |
                            31783 ; 4172 |////////////////////////////////////////////////////////////////////////////////
                            31784 ; 4173 |//
                            31785 ; 4174 |//>  Name:          STFM1000WriteDataReAlignment
                            31786 ; 4175 |//
                            31787 ; 4176 |//   Type:          Function
                            31788 ; 4177 |//
                            31789 ; 4178 |//   Description:   The I2C sends the highest byte first which will go to the LSB
                            31790 ; 4179 |//                  [7:0] first, so we have to swap the data before write, but we not
                            31791 ; 4180 |//                  real care the highest 2-byte of the pdwNewData since the I2C driver
                            31792 ; 4181 |//                  will ignore them
                            31793 ; 4182 |//
                            31794 ; 4183 |//   Inputs:        pdwNewData
                            31795 ; 4184 |//
                            31796 ; 4185 |//   Outputs:       None
                            31797 ; 4186 |//
                            31798 ; 4187 |//   Notes:         none
                            31799 ; 4188 |//<
                            31800 ; 4189 |////////////////////////////////////////////////////////////////////////////////
                            31801 ; 4190 |_reentrant void STFM1000WriteDataReAlignment(DWORD* pdwNewData)
                            31802 ; 4191 |{
                            31803 
                            31808 FSTFM1000WriteDataReAlignment:
                            31816 
                            31817 ; 4192 |    DWORD dwTemp = ((*pdwNewData)>>24) & (0x0000000000ff);   // bit[32:24] ->bit[7:0]
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                            31818 
                            31836 
                            31837 ; 4193 |    dwTemp |=  (((*pdwNewData)>>8) & (0x00000000ff00));       // bit[23:16] ->bit[15:8]
                            31838 
P:077A 77F400 FFFFFE  3 432331840         move    #-2,n7
P:077C 270000         2 432531827         move    #0,y1
P:077D 46F400 0000FF  3 432831828         move    #>$FF,y0
P:077F 205800         2 433031820         move    (r0)+
P:0780 5FD000         2 433231821         move    y:(r0)-,b
P:0781 59E000         2 433431822         move    y:(r0),b0
P:0782 205F01         2 433631823         tfr     b,a	                (r7)+
P:0783 2A0000         2 433831824         move    #0,a2
P:0784 218800         2 434031825         move    a1,a0
P:0785 214C00         2 434231826         move    a2,a1
P:0786 218500         2 434431829         move    a1,x1
P:0787 210C00         2 434631830         move    a0,a1
P:0788 205F56         2 434831831         and     y0,a	                (r7)+
P:0789 205F00         2 435031841         move    (r7)+
P:078A 218800         2 435231832         move    a1,a0
P:078B 5D6F00         4 435631843         move    b1,y:(r7+n7)
P:078C 20AC00         2 435831833         move    x1,a1
P:078D 205700         2 436031844         move    (r7)-
P:078E 596F76         4 436431834         and     y1,a	                b0,y:(r7+n7)
P:078F 20002A         2 436631849         asr     b
P:0790 20002A         2 436831849         asr     b
P:0791 20002A         2 437031849         asr     b
P:0792 20002A         2 437231849         asr     b
P:0793 20002A         2 437431849         asr     b
P:0794 20002A         2 437631849         asr     b
P:0795 20002A         2 437831849         asr     b
P:0796 20002A         2 438031849         asr     b
                            31851 L749:
                            31869 
                            31870 ; 4194 |    dwTemp |=  (((*pdwNewData)<<8) & (0x000000ff0000));       // bit[15:8] ->bit[23:16]
                            31871 
P:0797 21A400         2 438231855         move    b1,x0
P:0798 46F400 00FF00  3 438531854         move    #$FF00,y0
P:079A 212D00         2 438731856         move    b0,b1
P:079B 27005E         2 438931857         and     y0,b	                #0,y1
P:079C 21A900         2 439131858         move    b1,b0
P:079D 208D00         2 439331859         move    x0,b1
P:079E 212600         2 439531861         move    b0,y0
P:079F 21847E         2 439731860         and     y1,b	                a1,x0
P:07A0 210C00         2 439931864         move    a0,a1
P:07A1 21A700         2 440131862         move    b1,y1
P:07A2 205F52         2 440331865         or      y0,a	                (r7)+
P:07A3 218800         2 440531866         move    a1,a0
P:07A4 5FEF00         4 440931875         move    y:(r7+n7),b
P:07A5 208C00         2 441131867         move    x0,a1
P:07A6 205700         2 441331876         move    (r7)-
P:07A7 59EF72         4 441731868         or      y1,a	                y:(r7+n7),b0
P:07A8 20003A         2 441931881         asl     b
P:07A9 20003A         2 442131881         asl     b
P:07AA 20003A         2 442331881         asl     b
P:07AB 20003A         2 442531881         asl     b
P:07AC 20003A         2 442731881         asl     b
P:07AD 20003A         2 442931881         asl     b
P:07AE 20003A         2 443131881         asl     b
P:07AF 20003A         2 443331881         asl     b
                            31883 L750:
                            31901 
                            31902 ; 4195 |    dwTemp |=  (((*pdwNewData)<<24) & (0x0000ff000000));       // bit[7:0] ->bit[31:24]
                            31903 
                            31928 
                            31929 ; 4196 |    *pdwNewData = dwTemp;
                            31930 
                            31934 
                            31935 ; 4197 |}
                            31936 
P:07B0 24FF00         2 443531886         move    #<$FF,x0
P:07B1 21A700         2 443731887         move    b1,y1
P:07B2 205F00         2 443931905         move    (r7)+
P:07B3 212D00         2 444131888         move    b0,b1
P:07B4 25004E         2 444331889         and     x0,b	                #0,x1
P:07B5 21A900         2 444531890         move    b1,b0
P:07B6 218400         2 444731895         move    a1,x0
P:07B7 20ED00         2 444931891         move    y1,b1
P:07B8 210C00         2 445131896         move    a0,a1
P:07B9 21266E         2 445331892         and     x1,b	                b0,y0
P:07BA 21A700         2 445531894         move    b1,y1
P:07BB 5FEF00         4 445931907         move    y:(r7+n7),b
P:07BC 205752         2 446131897         or      y0,a	                (r7)-
P:07BD 59EF00         4 446531910         move    y:(r7+n7),b0
P:07BE 218800         2 446731898         move    a1,a0
P:07BF 204F00         2 446931938         move    (r7)+n7
P:07C0 212F00         2 447131911         move    b0,b
P:07C1 208C00         2 447331899         move    x0,a1
P:07C2 21A600         2 447531914         move    b1,y0
P:07C3 240072         2 447731900         or      y1,a	                #0,x0
P:07C4 212D00         2 447931915         move    b0,b1
P:07C5 45F44E 0000FF  3 448231916         and     x0,b	                #>$FF,x1
P:07C7 21A900         2 448431917         move    b1,b0
P:07C8 20CD00         2 448631918         move    y0,b1
P:07C9 21266E         2 448831919         and     x1,b	                b0,y0
P:07CA 218500         2 449031922         move    a1,x1
P:07CB 210C00         2 449231923         move    a0,a1
P:07CC 21A752         2 449431924         or      y0,a	                b1,y1
P:07CD 218800         2 449631925         move    a1,a0
P:07CE 20AC00         2 449831926         move    x1,a1
P:07CF 585872         2 450031927         or      y1,a	                a0,y:(r0)+
P:07D0 5C5000         2 450231933         move    a1,y:(r0)-
P:07D1 00000C         4 450631940         rts
                            31944 
                            31945 ; 4198 |
                            31946 ; 4199 |////////////////////////////////////////////////////////////////////////////////
                            31947 ; 4200 |//
                            31948 ; 4201 |//>  Name:          STFM1000ReadDataReAlignment
                            31949 ; 4202 |//
                            31950 ; 4203 |//   Type:          Function
                            31951 ; 4204 |//
                            31952 ; 4205 |//   Description:   The I2C receive the lowest byte of Steely Dan register first which will go to the MSB
                            31953 ; 4206 |//                  bit[31:24] so we have to swap the data after read, but we not
                            31954 ; 4207 |//                  real care the highest 2-byte of the pdwNewData
                            31955 ; 4208 |//
                            31956 ; 4209 |//   Inputs:        pdwNewData
                            31957 ; 4210 |//
                            31958 ; 4211 |//   Outputs:       None
                            31959 ; 4212 |//
                            31960 ; 4213 |//   Notes:         none
                            31961 ; 4214 |//<
                            31962 ; 4215 |////////////////////////////////////////////////////////////////////////////////
                            31963 ; 4216 |_reentrant void STFM1000ReadDataReAlignment(DWORD* pdwNewData)
                            31964 ; 4217 |{
                            31965 
                            31970 FSTFM1000ReadDataReAlignment:
                            31978 
                            31979 ; 4218 |    DWORD dwTemp = ((*pdwNewData)>>24) & (0x0000000000ff);   // bit[31:24] ->bit[7:0]
                            31980 
                            31998 
                            31999 ; 4219 |    dwTemp |=  (((*pdwNewData)>>8) & (0x00000000ff00));       // bit[23:16] ->bit[15:8]
                            32000 
P:07D2 77F400 FFFFFE  3 450932002         move    #-2,n7
P:07D4 270000         2 451131989         move    #0,y1
P:07D5 46F400 0000FF  3 451431990         move    #>$FF,y0
P:07D7 205800         2 451631982         move    (r0)+
P:07D8 5FD000         2 451831983         move    y:(r0)-,b
P:07D9 59E000         2 452031984         move    y:(r0),b0
P:07DA 205F01         2 452231985         tfr     b,a	                (r7)+
P:07DB 2A0000         2 452431986         move    #0,a2
P:07DC 218800         2 452631987         move    a1,a0
P:07DD 214C00         2 452831988         move    a2,a1
P:07DE 218500         2 453031991         move    a1,x1
P:07DF 210C00         2 453231992         move    a0,a1
P:07E0 205F56         2 453431993         and     y0,a	                (r7)+
P:07E1 205F00         2 453632003         move    (r7)+
P:07E2 218800         2 453831994         move    a1,a0
P:07E3 5D6F00         4 454232005         move    b1,y:(r7+n7)
P:07E4 20AC00         2 454431995         move    x1,a1
P:07E5 205700         2 454632006         move    (r7)-
P:07E6 596F76         4 455031996         and     y1,a	                b0,y:(r7+n7)
P:07E7 20002A         2 455232011         asr     b
P:07E8 20002A         2 455432011         asr     b
P:07E9 20002A         2 455632011         asr     b
P:07EA 20002A         2 455832011         asr     b
P:07EB 20002A         2 456032011         asr     b
P:07EC 20002A         2 456232011         asr     b
P:07ED 20002A         2 456432011         asr     b
P:07EE 20002A         2 456632011         asr     b
                            32013 L751:
                            32031 
                            32032 ; 4220 |    dwTemp |=  (((*pdwNewData)<<8) & (0x000000ff0000));       // bit[15:8] ->bit[23:16]
                            32033 
P:07EF 21A400         2 456832017         move    b1,x0
P:07F0 46F400 00FF00  3 457132016         move    #$FF00,y0
P:07F2 212D00         2 457332018         move    b0,b1
P:07F3 27005E         2 457532019         and     y0,b	                #0,y1
P:07F4 21A900         2 457732020         move    b1,b0
P:07F5 208D00         2 457932021         move    x0,b1
P:07F6 212600         2 458132023         move    b0,y0
P:07F7 21847E         2 458332022         and     y1,b	                a1,x0
P:07F8 210C00         2 458532026         move    a0,a1
P:07F9 21A700         2 458732024         move    b1,y1
P:07FA 205F52         2 458932027         or      y0,a	                (r7)+
P:07FB 218800         2 459132028         move    a1,a0
P:07FC 5FEF00         4 459532037         move    y:(r7+n7),b
P:07FD 208C00         2 459732029         move    x0,a1
P:07FE 205700         2 459932038         move    (r7)-
P:07FF 59EF72         4 460332030         or      y1,a	                y:(r7+n7),b0
P:0800 20003A         2 460532043         asl     b
P:0801 20003A         2 460732043         asl     b
P:0802 20003A         2 460932043         asl     b
P:0803 20003A         2 461132043         asl     b
P:0804 20003A         2 461332043         asl     b
P:0805 20003A         2 461532043         asl     b
P:0806 20003A         2 461732043         asl     b
P:0807 20003A         2 461932043         asl     b
                            32045 L752:
                            32063 
                            32064 ; 4221 |    dwTemp |=  (((*pdwNewData)<<24) & (0x0000ff000000));       // bit[7:0] ->bit[31:24]
                            32065 
                            32090 
                            32091 ; 4222 |    *pdwNewData = dwTemp;
                            32092 
                            32096 
                            32097 ; 4223 |}
                            32098 
P:0808 24FF00         2 462132048         move    #<$FF,x0
P:0809 21A700         2 462332049         move    b1,y1
P:080A 205F00         2 462532067         move    (r7)+
P:080B 212D00         2 462732050         move    b0,b1
P:080C 25004E         2 462932051         and     x0,b	                #0,x1
P:080D 21A900         2 463132052         move    b1,b0
P:080E 218400         2 463332057         move    a1,x0
P:080F 20ED00         2 463532053         move    y1,b1
P:0810 210C00         2 463732058         move    a0,a1
P:0811 21266E         2 463932054         and     x1,b	                b0,y0
P:0812 21A700         2 464132056         move    b1,y1
P:0813 5FEF00         4 464532069         move    y:(r7+n7),b
P:0814 205752         2 464732059         or      y0,a	                (r7)-
P:0815 59EF00         4 465132072         move    y:(r7+n7),b0
P:0816 218800         2 465332060         move    a1,a0
P:0817 204F00         2 465532100         move    (r7)+n7
P:0818 212F00         2 465732073         move    b0,b
P:0819 208C00         2 465932061         move    x0,a1
P:081A 21A600         2 466132076         move    b1,y0
P:081B 240072         2 466332062         or      y1,a	                #0,x0
P:081C 212D00         2 466532077         move    b0,b1
P:081D 45F44E 0000FF  3 466832078         and     x0,b	                #>$FF,x1
P:081F 21A900         2 467032079         move    b1,b0
P:0820 20CD00         2 467232080         move    y0,b1
P:0821 21266E         2 467432081         and     x1,b	                b0,y0
P:0822 218500         2 467632084         move    a1,x1
P:0823 210C00         2 467832085         move    a0,a1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0824 21A752         2 468032086         or      y0,a	                b1,y1
P:0825 218800         2 468232087         move    a1,a0
P:0826 20AC00         2 468432088         move    x1,a1
P:0827 585872         2 468632089         or      y1,a	                a0,y:(r0)+
P:0828 5C5000         2 468832095         move    a1,y:(r0)-
P:0829 00000C         4 469232102         rts
                            32106 
                            32107 ; 4224 |
                            32108 ; 4225 |////////////////////////////////////////////////////////////////////////////////
                            32109 ; 4226 |//
                            32110 ; 4227 |//>  Name:          STFM1000delay_ms
                            32111 ; 4228 |//
                            32112 ; 4229 |//   Type:          Function
                            32113 ; 4230 |//
                            32114 ; 4231 |//   Description:   Delay for wDelay ms
                            32115 ; 4232 |//
                            32116 ; 4233 |//   Inputs:        wDelay ms
                            32117 ; 4234 |//
                            32118 ; 4235 |//   Outputs:       None
                            32119 ; 4236 |//
                            32120 ; 4237 |//   Notes:         none
                            32121 ; 4238 |//<
                            32122 ; 4239 |////////////////////////////////////////////////////////////////////////////////
                            32123 ; 4240 |_reentrant void STFM1000delay_ms(WORD wDelay)
                            32124 ; 4241 |{
                            32125 
                            32130 FSTFM1000delay_ms:
                            32140 
                            32141 ; 4242 |
                            32142 ; 4243 |    WORD wTargetTime;
                            32143 
                            32150 
                            32151 ; 4244 |    // Calculate the target time
                            32152 ; 4245 |    wTargetTime = SysGetCurrentTime() + wDelay;
                            32153 
P:082A 055F7C         2 469432131         movec   ssh,y:(r7)+
P:082B 045FA0         2 469632145         movec   m0,n7
P:082C 205F00         2 469832134         move    (r7)+
P:082D 5C6F00         4 470232147         move    a1,y:(r7+n7)
P:082E 0BF080 rrrrrr  6 470832155         jsr     SysGetCurrentTime
                            32167 
                            32168 ; 4246 |
                            32169 ; 4247 |    // Do the wait thang
                            32170 ; 4248 |    while(1)
                            32171 ; 4249 |    {
                            32172 ; 4250 |        if(SysGetCurrentTime()> wTargetTime )
                            32173 
P:0830 045FA0         2 471032156         movec   m0,n7
P:0831 2D0000         2 471232159         move    #0,b1
P:0832 2B0000         2 471432160         move    #0,b2
P:0833 59EF00         4 471832158         move    y:(r7+n7),b0
P:0834 200018         2 472032164         add     a,b
P:0835 596F00         4 472432165         move    b0,y:(r7+n7)
P:0836 0BF080 rrrrrr  6 473032175 L753:   jsr     SysGetCurrentTime
P:0838 045FA0         2 473232176         movec   m0,n7
P:0839 2D0000         2 473432179         move    #0,b1
P:083A 2B0000         2 473632180         move    #0,b2
P:083B 59EF00         4 474032178         move    y:(r7+n7),b0
P:083C 200005         2 474232181         cmp     b,a
P:083D 0AF0AF rrrrrr  6 474832182         jle     L753
                            32183 
                            32184 ; 4251 |        {
                            32185 ; 4252 |            break;
                            32186 ; 4253 |        }
                            32187 ; 4254 |    }
                            32188 ; 4255 |
                            32189 ; 4256 |}
                            32190 
P:083F 204F00         2 475032192         move    (r7)+n7
P:0840 05FF7C         4 475432194         movec   y:-(r7),ssh
P:0841 000000         2 475632194         nop             ; (inserted)
P:0842 00000C         4 476032198         rts
                            32201 
                            32202 ; 4257 |
                            32203 ; 4258 |////////////////////////////////////////////////////////////////////////////////
                            32204 ; 4259 |//
                            32205 ; 4260 |//>  Name:          STFM1000I2CWriteRegister
                            32206 ; 4261 |//
                            32207 ; 4262 |//   Type:          Function
                            32208 ; 4263 |//
                            32209 ; 4264 |//   Description:   Write 4 bytes to I2C device address / sub address
                            32210 ; 4265 |//
                            32211 ; 4266 |//
                            32212 ; 4267 |//
                            32213 ; 4268 |//   Inputs:    INT I2C_Sub_Addr        Register to write on STFM1000
                            32214 ; 4269 |//              DWORD DataOut          4 bytes of data
                            32215 ; 4270 |//
                            32216 ; 4271 |//   Outputs:     0 = No error
                            32217 ; 4272 |//               -1 = Timeout error
                            32218 ; 4273 |//               -2 = ACKF - no ACK received
                            32219 ; 4274 |//
                            32220 ; 4275 |//   Notes:
                            32221 ; 4276 |//
                            32222 ; 4277 |//           First write sends 1 byte of data, second write sends the remaining NumBytes.
                            32223 ; 4278 |//           Use NumBytes = ONE_BYTE for the "dummy write" needed to receive data
                            32224 ; 4279 |//
                            32225 ; 4280 |//
                            32226 ; 4281 |//  How to set the data you want:
                            32227 ; 4282 |//
                            32228 ; 4283 |//  If you are write 4-byte to a register, if the value you are going to set is
                            32229 ; 4284 |//  0x00010203. To be aware, the MSB is sent first in HW_I2CDAT register. For example,
                            32230 ; 4285 |//  the slave address for Steely Dan is 0xC0, and we like to set 0x00000004 register.
                            32231 ; 4286 |//  So the first word for the write command will be 0xC0 04 plus  1-byte data going to
                            32232 ; 4287 |//  set to the register, if you like to set the register as 0x00 01 02 03 of bits[0:31],
                            32233 ; 4288 |//  so have to set HW_I2CDAT register as 0xC0 04 00, then 0x01 02 03.
                            32234 ; 4289 |//
                            32235 ; 4290 |////////////////////////////////////////////////////////////////////////////////
                            32236 ; 4291 |_reentrant INT STFM1000I2CWriteRegister(WORD I2C_Sub_Addr, DWORD DataOut)
                            32237 ; 4292 |{
                            32238 
                            32316 FSTFM1000I2CWriteRegister:
                            32329 
                            32330 ; 4293 |    DWORD_type MyData;
                            32331 ; 4294 |    i2cdata_type i2cdata;
                            32332 ; 4295 |    INT cnt;
                            32333 
                            32338 
                            32339 ; 4296 |    MyData.D = DataOut;
                            32340 
                            32349 
                            32350 ; 4297 |
                            32351 ; 4298 |    for(cnt = 0; (0 != HW_I2CCSR.B.BUSY); cnt++)    // Delay time 1 cnt
                            32352 
P:0843 3F0300         2 476232317         move    #3,n7
P:0844 21A700         2 476432335         move    b1,y1
P:0845 44F400 000001  3 476732358         move    #>1,x0
P:0847 204F00         2 476932319         move    (r7)+n7
P:0848 77F400 FFFFFE  3 477232342         move    #-2,n7
P:084A 57F400 002000  3 477532357         move    #$2000,b
P:084C 205F00         2 477732343         move    (r7)+
P:084D 5C6F00         4 478132345         move    a1,y:(r7+n7)
P:084E 205700         2 478332346         move    (r7)-
P:084F 586F13         4 478732354         clr     a	                a0,y:(r7+n7)
P:0850 0AF080 rrrrrr  6 479332359         jmp     L771
                            32360 
                            32361 ; 4299 |    {
                            32362 ; 4300 |        if (TIMEOUT_COUNT <= cnt) return(TIMEOUT_ERROR);
                            32363 
P:0852 20000D         2 479532365 L770:   cmp     a,b
P:0853 0AF0AF rrrrrr  6 480132366         jle     L773
P:0855 200040         2 480332368         add     x0,a
P:0856 0AA7A2 rrrrrr  6 480932369 L771:   jset    #2,x:<<$FFE7,L770
                            32370 
                            32371 ; 4301 |    }
                            32372 ; 4302 |
                            32373 ; 4303 |    i2cdata.B.BYTE0 = STFM1000_I2C_ADDR;
                            32374 
                            32384 
                            32385 ; 4304 |    i2cdata.B.BYTE1 = I2C_Sub_Addr;
                            32386 
                            32401 
                            32402 ; 4305 |    i2cdata.B.BYTE2 = MyData.U.W0;  // First byte to write (in LSB of word)
                            32403 
                            32418 
                            32419 ; 4306 |    HW_I2CDAT.U = i2cdata.U;
                            32420 
                            32423 
                            32424 ; 4307 |
                            32425 ; 4308 |    HW_I2CCSR.B.TREQ = 1;       // Master transaction request - generate start condition
                            32426 
                            32429 
                            32430 ; 4309 |    HW_I2CCSR.B.TREQ = 0;       // and transmit Slave Device Write addres
                            32431 
                            32434 
                            32435 ; 4310 |
                            32436 ; 4311 |    for(cnt = 0; (1 != HW_I2CCSR.B.TUFL); cnt++)    // Delay time aprox 0.184ms @100Khz I2c Clock and 36Mhz system clock
                            32437 
P:0858 77F400 FFFFFD  3 481232376         move    #-3,n7
P:085A 46F400 00FFFF  3 481532379         move    #$FFFF,y0
P:085C 5FEF00         4 481932378         move    y:(r7+n7),b
P:085D 44F45E FF00FF  3 482232380         and     y0,b	                #$FF00FF,x0
P:085F 26C000         2 482432381         move    #<$C0,y0
P:0860 46F45A FFFF00  3 482732382         or      y0,b	                #$FFFF00,y0
P:0862 5D6F79         4 483132388         tfr     y1,b	                b1,y:(r7+n7)
P:0863 5EEF00         4 483532389         move    y:(r7+n7),a
P:0864 44F446 0000FF  3 483832391         and     x0,a	                #>$FF,x0
P:0866 20004E         2 484032393         and     x0,b
P:0867 21A400         2 484232394         move    b1,x0
P:0868 0110D8         2 484432395         mpy     x0,#16,b
P:0869 212400         2 484632396         move    b0,x0
P:086A 200042         2 484832397         or      x0,a
P:086B 5C6F00         4 485232398         move    a1,y:(r7+n7)
P:086C 045FA0         2 485432405         movec   m0,n7
P:086D 000000         2 485632405         nop             ; (inserted)
P:086E 5EEF00         4 486032407         move    y:(r7+n7),a
P:086F 77F400 FFFFFD  3 486332408         move    #-3,n7
P:0871 000000         2 486532408         nop             ; (inserted)
P:0872 5FEF00         4 486932410         move    y:(r7+n7),b
P:0873 46F45E 0000FF  3 487232412         and     y0,b	                #>$FF,y0
P:0875 200056         2 487432414         and     y0,a
P:0876 218600         2 487632415         move    a1,y0
P:0877 20005A         2 487832416         or      y0,b
P:0878 5D6F00         4 488232417         move    b1,y:(r7+n7)
P:0879 08EFE6         6 488832422         movep   y:(r7+n7),x:<<$FFE6
P:087A 2F0000         2 489032439         move    #0,b
P:087B 0AA72B         4 489432428         bset    #11,x:<<$FFE7
P:087C 0AA70B         4 489832433         bclr    #11,x:<<$FFE7
P:087D 0AF080 rrrrrr  6 490432443         jmp     L775
                            32444 
                            32445 ; 4312 |    {
                            32446 ; 4313 |        if (TIMEOUT_COUNT <= cnt) return(TIMEOUT_ERROR);
                            32447 
P:087F 56F400 002000  3 490732449 L772:   move    #$2000,a
P:0881 200005         2 490932450         cmp     b,a
P:0882 0AF0A7 rrrrrr  6 491532451         jgt     L774
P:0884 56F400 FFFFFF  3 491832452 L773:   move    #>-1,a
P:0886 0AF080 rrrrrr  6 492432453         jmp     L783
                            32454 L774:
P:0888 45F400 000001  3 492732456         move    #>1,x1
P:088A 200068         2 492932457         add     x1,b
P:088B 0BA72D         4 493332458 L775:   btst    #13,x:<<$FFE7
P:088C 46F413 000001  3 493632459         clr     a	                #>1,y0
P:088E 200037         2 493832460         rol     a
P:088F 200055         2 494032462         cmp     y0,a
P:0890 0AF0A2 rrrrrr  6 494632463         jne     L772
                            32464 
                            32465 ; 4314 |    }
                            32466 ; 4315 |
                            32467 ; 4316 |    for(cnt = 0; (0 != HW_I2CCSR.B.ACKF); cnt++)
                            32468 
P:0892 56F41B 002000  3 494932470         clr     b	                #$2000,a
P:0894 0AF080 rrrrrr  6 495532472         jmp     L777
                            32473 
                            32474 ; 4317 |    {
                            32475 ; 4318 |        if (TIMEOUT_COUNT <= cnt) return(ACKF_ERROR);
                            32476 
P:0896 200005         2 495732478 L776:   cmp     b,a
P:0897 0AF0AF rrrrrr  6 496332479         jle     L779
P:0899 200058         2 496532481         add     y0,b
P:089A 0AA7AE rrrrrr  6 497132482 L777:   jset    #14,x:<<$FFE7,L776
                            32483 
                            32484 ; 4319 |    }
                            32485 ; 4320 |
                            32486 ; 4321 |    HW_I2CCSR.B.WL = THREE_BYTES;   // Word Length 1, 2, or 3 bytes
                            32487 
                            32495 
                            32496 ; 4322 |    HW_I2CCSR.B.LWORD = 1;          // Send the stop command
                            32497 
                            32500 
                            32501 ; 4323 |
                            32502 ; 4324 |    HW_I2CDAT.U = MyData.U.W1;      // Send last 3 bytes
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                            32503 
                            32508 
                            32509 ; 4325 |
                            32510 ; 4326 |    HW_I2CCSR.B.TUFLCL = 1;         // Clear the Receiver Overflow bit
                            32511 
                            32514 
                            32515 ; 4327 |    HW_I2CCSR.B.TUFLCL = 0;
                            32516 
                            32519 
                            32520 ; 4328 |
                            32521 ; 4329 |    for(cnt = 0; (0 != HW_I2CCSR.B.ACKF); cnt++)
                            32522 
P:089C 084F27         2 497332489         movep   x:<<$FFE7,b
P:089D 46F400 FFF9FF  3 497632490         move    #$FFF9FF,y0
P:089F 77F45E FFFFFE  3 497932491         and     y0,b	                #-2,n7
P:08A1 46F400 000200  3 498232492         move    #$200,y0
P:08A3 20005A         2 498432493         or      y0,b
P:08A4 08CD27         4 498832494         movep   b1,x:<<$FFE7
P:08A5 0AA731         4 499232499         bset    #17,x:<<$FFE7
P:08A6 2F0000         2 499432524         move    #0,b
P:08A7 08EFE6         6 500032507         movep   y:(r7+n7),x:<<$FFE6
P:08A8 0AA734         4 500432513         bset    #20,x:<<$FFE7
P:08A9 0AA714         4 500832518         bclr    #20,x:<<$FFE7
P:08AA 0AF080 rrrrrr  6 501432525         jmp     L781
                            32526 
                            32527 ; 4330 |    {
                            32528 ; 4331 |        if (TIMEOUT_COUNT <= cnt) return(ACKF_ERROR);
                            32529 
P:08AC 56F400 002000  3 501732531 L778:   move    #$2000,a
P:08AE 200005         2 501932532         cmp     b,a
P:08AF 0AF0A7 rrrrrr  6 502532533         jgt     L780
P:08B1 56F400 FFFFFE  3 502832534 L779:   move    #>-2,a
P:08B3 0AF080 rrrrrr  6 503432535         jmp     L783
                            32536 L780:
P:08B5 47F400 000001  3 503732538         move    #>1,y1
P:08B7 200078         2 503932539         add     y1,b
P:08B8 0AA7AE rrrrrr  6 504532540 L781:   jset    #14,x:<<$FFE7,L778
                            32541 
                            32542 ; 4332 |    }
                            32543 ; 4333 |    return(0);
                            32544 
                            32547 
                            32548 ; 4334 |
                            32549 ; 4335 |}
                            32550 
P:08BA 2E0000         2 504732546         move    #0,a
                            32552 L783:
P:08BB 3F0300         2 504932552         move    #3,n7
P:08BC 000000         2 505132552         nop             ; (inserted)
P:08BD 204700         2 505332554         move    (r7)-n7
P:08BE 00000C         4 505732556         rts
                            32559 
                            32560 ; 4336 |////////////////////////////////////////////////////////////////////////////////
                            32561 ; 4337 |//
                            32562 ; 4338 |//>  Name:          STFM1000I2CReadRegister
                            32563 ; 4339 |//
                            32564 ; 4340 |//   Type:          Function
                            32565 ; 4341 |//
                            32566 ; 4342 |//   Description:   Read a 4-byte register
                            32567 ; 4343 |//                  first word has first 3 byte
                            32568 ; 4344 |//                  second word has remaining byte
                            32569 ; 4345 |//                  Uses delay to wait for RDR.
                            32570 ; 4346 |//                  The delay time is aprox 0.370ms @100Khz I2c Clock and 36Mhz system clock
                            32571 ; 4347 |//                  This routind also calls I2C_Write_Master_Sync which uses delay to wait for TUFL.
                            32572 ; 4348 |//                  The delay time is aprox 0.184ms @100Khz I2c Clock and 36Mhz system clock
                            32573 ; 4349 |//                  ==> Total delay waiting for status bits is aprox 0.55ms
                            32574 ; 4350 |//
                            32575 ; 4351 |//
                            32576 ; 4352 |//   Inputs:    int I2C_Sub_Addr       STMP1000 register address that is 4 less than the values to be read
                            32577 ; 4353 |//              DWORD DataOut          4 bytes data for dummy write from "shadow register" @ I2C_Sub_Addr
                            32578 ; 4354 |//              DWORD * DataIn         4 bytes data read
                            32579 ; 4355 |//
                            32580 ; 4356 |//   Outputs:
                            32581 ; 4357 |//
                            32582 ; 4358 |//   Notes:
                            32583 ; 4359 |//           A "dummy" write is first made to setup the I2C_Sub_Addr. This value is 4 less than
                            32584 ; 4360 |//           the value of the STFM1000 register to be read. e.g. If I2C_Sub_Addr=0 then the register
                            32585 ; 4361 |//           at location 4 is read. This is because the STMP3500 must write 3 bytes on the initial write
                            32586 ; 4362 |//           and a minimum of 1 byte on the final write. Because the STFM1000 "auto increments" the
                            32587 ; 4363 |//           address, the address of the start of the read is 4. The user must insure tha the correct
                            32588 ; 4364 |//           data is written for the "dummy" write. It is recommended that a "shadow register" be
                            32589 ; 4365 |//           used that contains the correct data to be written.
                            32590 ; 4366 |//           Then the first read gets 3 bytes of data, second read sends the remaining 1 byte.
                            32591 ; 4367 |//
                            32592 ; 4368 |//           If last byte is zero then the 4 bytes are re-read.
                            32593 ; 4369 |//           This appears to be a defect in the STMP3500 SOC as an I2C analyzer looking at
                            32594 ; 4370 |//           the I2C bus shows the correct data is sent by the STFM1000 device
                            32595 ; 4371 |//           Rereading the data improves the error rate since
                            32596 ; 4372 |//           all observed errors were due to the last byte being zero.
                            32597 ; 4373 |//
                            32598 ; 4374 |////////////////////////////////////////////////////////////////////////////////
                            32599 ; 4375 |
                            32600 ; 4376 |_reentrant INT STFM1000I2CReadRegister(WORD I2C_Sub_Addr, DWORD DataOut, DWORD * DataIn)
                            32601 ; 4377 |{
                            32602 
                            32607 FSTFM1000I2CReadRegister:
                            32629 
                            32630 ; 4378 |    DWORD_type MyData;
                            32631 ; 4379 |    INT cnt;
                            32632 ; 4380 |    INT iRtnCode;
                            32633 ; 4381 |    i2cdata_type i2cdata;
                            32634 ; 4382 |    INT nReads = 3;              // number of words within I2C transaction
                            32635 
                            32651 
                            32652 ; 4383 |    DWORD Timer = 0;
                            32653 
                            32669 
                            32670 ; 4384 |    INT JunkWord;
                            32671 ; 4385 |
                            32672 ; 4386 |        //  Perform DummyWrite
                            32673 ; 4387 |        iRtnCode = STFM1000I2CWriteRegister(I2C_Sub_Addr, DataOut);
                            32674 
P:08BF 055F7C         2 505932608         movec   ssh,y:(r7)+
P:08C0 3F0700         2 506132611         move    #7,n7
P:08C1 260000         2 506332656         move    #0,y0
P:08C2 47F400 000003  3 506632642         move    #>3,y1
P:08C4 204F00         2 506832613         move    (r7)+n7
P:08C5 77F400 FFFFFC  3 507132637         move    #-4,n7
P:08C7 000000         2 507332637         nop             ; (inserted)
P:08C8 686F00         4 507732639         move    r0,y:(r7+n7)
P:08C9 77F400 FFFFFD  3 508032644         move    #-3,n7
P:08CB 000000         2 508232644         nop             ; (inserted)
P:08CC 4F6F00         4 508632646         move    y1,y:(r7+n7)
P:08CD 77F400 FFFFFE  3 508932658         move    #-2,n7
P:08CF 270000         2 509132655         move    #0,y1
P:08D0 205F00         2 509332659         move    (r7)+
P:08D1 4F6F00         4 509732661         move    y1,y:(r7+n7)
P:08D2 205700         2 509932662         move    (r7)-
P:08D3 4E6F00         4 510332664         move    y0,y:(r7+n7)
P:08D4 0BF080 rrrrrr  6 510932676         jsr     FSTFM1000I2CWriteRegister
                            32680 
                            32681 ; 4388 |        if(0 != iRtnCode) return iRtnCode;
                            32682 
P:08D6 200003         2 511132684         tst     a
P:08D7 0AF0A2 rrrrrr  6 511732685         jne     L831
                            32686 
                            32687 ; 4389 |
                            32688 ; 4390 |        for(cnt = 0; (0 != HW_I2CCSR.B.BUSY); cnt++)
                            32689 
P:08D9 56F41B 002000  3 512032691         clr     b	                #$2000,a
P:08DB 47F400 000001  3 512332695         move    #>1,y1
P:08DD 0AF080 rrrrrr  6 512932696         jmp     L811
                            32697 
                            32698 ; 4391 |        {
                            32699 ; 4392 |            if (TIMEOUT_COUNT <= cnt) return(TIMEOUT_ERROR);
                            32700 
P:08DF 200005         2 513132702 L810:   cmp     b,a
P:08E0 0AF0AF rrrrrr  6 513732703         jle     L818
P:08E2 200078         2 513932705         add     y1,b
P:08E3 0AA7A2 rrrrrr  6 514532706 L811:   jset    #2,x:<<$FFE7,L810
                            32707 
                            32708 ; 4393 |        }
                            32709 ; 4394 |
                            32710 ; 4395 |        for(cnt = 0; (0 != HW_I2CCSR.B.ACKF); cnt++)
                            32711 
P:08E5 2F0000         2 514732713         move    #0,b
P:08E6 0AF080 rrrrrr  6 515332714         jmp     L813
                            32715 
                            32716 ; 4396 |        {
                            32717 ; 4397 |            if (TIMEOUT_COUNT <= cnt) return(ACKF_ERROR);
                            32718 
P:08E8 200005         2 515532720 L812:   cmp     b,a
P:08E9 0AF0AF rrrrrr  6 516132721         jle     L825
P:08EB 200078         2 516332723         add     y1,b
P:08EC 0AA7AE rrrrrr  6 516932724 L813:   jset    #14,x:<<$FFE7,L812
                            32725 
                            32726 ; 4398 |        }
                            32727 ; 4399 |
                            32728 ; 4400 |// Need to add a delay after writing address and data because STOP/START sequence is too
                            32729 ; 4401 |// short otherwise and the STFM1000 device does not recognize the STOP/START, but sees data
                            32730 ; 4402 |// one clock too soon, and it then pulls the data line low to ACK, but this destroys the
                            32731 ; 4403 |// one that STMP3500 is trying to write. The one indicates that the command is a read.
                            32732 ; 4404 |// Then the STFM1000 is waiting to read data and the STMP3500 is also waiting for a read.
                            32733 ; 4405 |// This deadlock is removed if a wait is added between the read and write commands.
                            32734 ; 4406 |// Sometimes the delay is 3X or 4X longer, but his is OK in the I2C protocol.
                            32735 ; 4407 |
                            32736 ; 4408 |///       HW_GP1DOR.B.B12 = 1;   // DEBUG ONLY
                            32737 ; 4409 |        SetDclkCount((DWORD) 0);   // Init the DCLK count register for time measurement
                            32738 
P:08EE 2E0000         2 517132740         move    #0,a
P:08EF 0BF080 rrrrrr  6 517732741         jsr     FSetDclkCount
                            32743 
                            32744 ; 4410 |//        Timer = GetDclkCount(); // Assume DCLK = 1/f and f=24Mhz to generate a 42us delay
                            32745 ; 4411 |        while(Timer < 2000)    // min 42us, can be longer if an interrupt happens, but that is OK
                            32746 
P:08F1 0AF080 rrrrrr  6 518332748         jmp     L815
                            32749 
                            32750 ; 4412 |        {
                            32751 ; 4413 |           Timer = GetDclkCount(); // Assume DCLK = 1/f and f=24Mhz to generate a 42us delay
                            32752 
P:08F3 0BF080 rrrrrr  6 518932754 L814:   jsr     FGetDclkCount
P:08F5 77F400 FFFFFE  3 519232755         move    #-2,n7
P:08F7 205F00         2 519432756         move    (r7)+
P:08F8 5C6F00         4 519832758         move    a1,y:(r7+n7)
P:08F9 205700         2 520032759         move    (r7)-
P:08FA 586F00         4 520432761         move    a0,y:(r7+n7)
                            32763 L815:
P:08FB 77F400 FFFFFE  3 520732763         move    #-2,n7
P:08FD 205F13         2 520932770         clr     a	                (r7)+
P:08FE 50F400 0007D0  3 521232771         move    #2000,a0
P:0900 5FEF00         4 521632766         move    y:(r7+n7),b
P:0901 2B0000         2 521832772         move    #0,b2
P:0902 205700         2 522032767         move    (r7)-
P:0903 59EF00         4 522432769         move    y:(r7+n7),b0
P:0904 20000D         2 522632773         cmp     a,b
P:0905 0AF0A9 rrrrrr  6 523232776         jlt     L814
                            32777 
                            32778 ; 4414 |        }
                            32779 ; 4415 |///        HW_GP1DOR.B.B12 = 0;   // DEBUG ONLY
                            32780 ; 4416 |
                            32781 ; 4417 |        // Start read from address I2C_Sub_Addr + 4
                            32782 ; 4418 |        HW_I2CCSR.B.WL = THREE_BYTES;      // Word Length 24 bits or 3 bytes
                            32783 
                            32791 
                            32792 ; 4419 |        i2cdata.U = 0;
                            32793 
                            32798 
                            32799 ; 4420 |        i2cdata.B.BYTE0 = STFM1000_I2C_ADDR + READMODE;
                            32800 
                            32808 
                            32809 ; 4421 |        HW_I2CDAT.U = i2cdata.U;
                            32810 
                            32813 
                            32814 ; 4422 |
                            32815 ; 4423 |    // Unlike write transactions, the WL bits only affect number of bytes read during the
                            32816 ; 4424 |    // last read (HW_I2CCSR.B.LWORD set).  All other reads are always 3 bytes at a time.
                            32817 ; 4425 |
                            32818 ; 4426 |        HW_I2CCSR.B.TREQ = 1;       // Generate the Repeated Start
                            32819 
                            32822 
                            32823 ; 4427 |        HW_I2CCSR.B.TREQ = 0;
                            32824 
                            32827 
                            32828 ; 4428 |    // Nov 2006: GR
                            32829 ; 4429 |    // Hardware has a problem that sometimes zeros the last byte read during a transaction
                            32830 ; 4430 |    // that has HW_I2CCSR.B.LWORD set.  To avoid this problem, reading continues past the
                            32831 ; 4431 |    // bytes needed so that none of the bytes we keep can be affected by the hardware bug.
                            32832 ; 4432 |    while (nReads > 0)
                            32833 
P:0907 084F27         2 523432785         movep   x:<<$FFE7,b
P:0908 45F400 FFF9FF  3 523732786         move    #$FFF9FF,x1
P:090A 46F46E 00FFFF  3 524032787         and     x1,b	                #$FFFF,y0
P:090C 45F400 000200  3 524332788         move    #$200,x1
P:090E 212E6A         2 524532789         or      x1,b	                b0,a
P:090F 77F456 FFFFF9  3 524832804         and     y0,a	                #-7,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0911 08CD27         4 525232790         movep   b1,x:<<$FFE7
P:0912 26C100         2 525432805         move    #<$C1,y0
P:0913 596F52         4 525832806         or      y0,a	                b0,y:(r7+n7)
P:0914 5C6F00         4 526232807         move    a1,y:(r7+n7)
P:0915 08EFE6         6 526832812         movep   y:(r7+n7),x:<<$FFE6
P:0916 0AA72B         4 527232821         bset    #11,x:<<$FFE7
P:0917 0AA70B         4 527632826         bclr    #11,x:<<$FFE7
P:0918 0AF080 rrrrrr  6 528232835         jmp     L828
                            32836 
                            32837 ; 4433 |    {
                            32838 ; 4434 |        // Wait for Receive Data Register bit to be set
                            32839 ; 4435 |        // Indicating that the word is ready
                            32840 ; 4436 |
                            32841 ; 4437 |        for(cnt = 0; (1 != HW_I2CCSR.B.RDR); cnt++)
                            32842 
                            32844 L816:
P:091A 2F0000         2 528432847         move    #0,b
P:091B 0AF080 rrrrrr  6 529032850         jmp     L820
                            32851 
                            32852 ; 4438 |        {
                            32853 ; 4439 |            //SysWaitOnEvent(0,0,0);       // let kernel spin once
                            32854 ; 4440 |            if (TIMEOUT_COUNT <= cnt) return(TIMEOUT_ERROR);
                            32855 
P:091D 56F400 002000  3 529332857 L817:   move    #$2000,a
P:091F 200005         2 529532858         cmp     b,a
P:0920 0AF0A7 rrrrrr  6 530132859         jgt     L819
P:0922 56F400 FFFFFF  3 530432860 L818:   move    #>-1,a
P:0924 0AF080 rrrrrr  6 531032861         jmp     L831
                            32862 L819:
P:0926 46F400 000001  3 531332864         move    #>1,y0
P:0928 200058         2 531532865         add     y0,b
P:0929 0BA726         4 531932866 L820:   btst    #6,x:<<$FFE7
P:092A 46F413 000001  3 532232867         clr     a	                #>1,y0
P:092C 200037         2 532432868         rol     a
P:092D 200055         2 532632870         cmp     y0,a
P:092E 0AF0A2 rrrrrr  6 533232871         jne     L817
                            32872 
                            32873 ; 4441 |        }
                            32874 ; 4442 |
                            32875 ; 4443 |          if (nReads == 2)
                            32876 
P:0930 44F479 000002  3 533532878         tfr     y1,b	                #>2,x0
P:0932 20004D         2 533732880         cmp     x0,b
P:0933 0AF0A2 rrrrrr  6 534332881         jne     L821
                            32882 
                            32883 ; 4444 |              MyData.U.W0 = HW_I2CDAT.U;          // First word, keep first 3 bytes
                            32884 
                            32889 
                            32890 ; 4445 |          if (nReads == 1)
                            32891 
P:0935 77F400 FFFFFB  3 534632886         move    #-5,n7
P:0937 000000         2 534832886         nop             ; (inserted)
P:0938 086FE6         6 535432888         movep   x:<<$FFE6,y:(r7+n7)
P:0939 20EE00         2 535632893 L821:   move    y1,a
P:093A 200055         2 535832894         cmp     y0,a
P:093B 0AF0A2 rrrrrr  6 536432895         jne     L822
                            32896 
                            32897 ; 4446 |          {
                            32898 ; 4447 |                MyData.U.W1 = HW_I2CDAT.U;          // Second word, really need only LS byte
                            32899 
                            32904 
                            32905 ; 4448 |                HW_I2CCSR.B.LWORD = 1;          // Send the stop command  (only needed once in this function). Stop since this is a repeated start read.
                            32906 
                            32909 
                            32910 ; 4449 |                HW_I2CCSR.B.WL = ONE_BYTE;      // Word Length one byte
                            32911 
                            32917 
                            32918 ; 4450 |          }
                            32919 ; 4451 |          if (nReads == 0)
                            32920 
P:093D 77F400 FFFFFA  3 536732901         move    #-6,n7
P:093F 46F400 FFF9FF  3 537032914         move    #$FFF9FF,y0
P:0941 086FE6         6 537632903         movep   x:<<$FFE6,y:(r7+n7)
P:0942 0AA731         4 538032908         bset    #17,x:<<$FFE7
P:0943 084F27         2 538232913         movep   x:<<$FFE7,b
P:0944 20005E         2 538432915         and     y0,b
P:0945 08CD27         4 538832916         movep   b1,x:<<$FFE7
P:0946 20EF00         2 539032922 L822:   move    y1,b
P:0947 20000B         2 539232923         tst     b
P:0948 0AF0A2 rrrrrr  6 539832924         jne     L823
                            32925 
                            32926 ; 4452 |                JunkWord = HW_I2CDAT.U; //Read the extra word, throw it away
                            32927 
                            32931 
                            32932 ; 4453 |
                            32933 ; 4454 |        for(cnt = 0; (0 != HW_I2CCSR.B.ACKF); cnt++)
                            32934 
P:094A 084D26         2 540032929         movep   x:<<$FFE6,b1
                            32936 L823:
P:094B 2F0000         2 540232936         move    #0,b
P:094C 0AF080 rrrrrr  6 540832938         jmp     L827
                            32939 
                            32940 ; 4455 |        {
                            32941 ; 4456 |            if (TIMEOUT_COUNT <= cnt) return(ACKF_ERROR);
                            32942 
P:094E 56F400 002000  3 541132944 L824:   move    #$2000,a
P:0950 200005         2 541332945         cmp     b,a
P:0951 0AF0A7 rrrrrr  6 541932946         jgt     L826
P:0953 56F400 FFFFFE  3 542232947 L825:   move    #>-2,a
P:0955 0AF080 rrrrrr  6 542832948         jmp     L831
                            32949 L826:
P:0957 45F400 000001  3 543132951         move    #>1,x1
P:0959 200068         2 543332952         add     x1,b
P:095A 0AA7AE rrrrrr  6 543932953 L827:   jset    #14,x:<<$FFE7,L824
                            32954 
                            32955 ; 4457 |        }
                            32956 ; 4458 |
                            32957 ; 4459 |        HW_I2CCSR.B.ROFLCL = 1;         // clear the Reciever Overflow bit
                            32958 
                            32961 
                            32962 ; 4460 |        HW_I2CCSR.B.ROFLCL = 0;  
                            32963 
                            32966 
                            32967 ; 4461 |          nReads--;
                            32968 
P:095C 0AA733         4 544332960         bset    #19,x:<<$FFE7
P:095D 0AA713         4 544732965         bclr    #19,x:<<$FFE7
P:095E 46F479 000001  3 545032970         tfr     y1,b	                #>1,y0
P:0960 77F45C FFFFFD  3 545332972         sub     y0,b	                #-3,n7
P:0962 000000         2 545532972         nop             ; (inserted)
P:0963 5D6F00         4 545932980         move    b1,y:(r7+n7)
                            32984 L828:
P:0964 77F413 FFFFFD  3 546232988         clr     a	                #-3,n7
P:0966 000000         2 546432988         nop             ; (inserted)
P:0967 5FEF00         4 546832986         move    y:(r7+n7),b
P:0968 21E70B         2 547032989         tst     b	                b,y1
P:0969 0AF0A7 rrrrrr  6 547632992         jgt     L816
                            32993 
                            32994 ; 4462 |    }   // end nReads loop
                            32995 ; 4463 |
                            32996 ; 4464 |    *DataIn = (MyData.D>>16) & 0x0000ffffffff;  // Put in same format as input
                            32997 
P:096B 77F400 FFFFFA  3 547932999         move    #-6,n7
P:096D 205F00         2 548133000         move    (r7)+
P:096E 5FEF00         4 548533002         move    y:(r7+n7),b
P:096F 2B0000         2 548733006         move    #0,b2
P:0970 205700         2 548933003         move    (r7)-
P:0971 59EF00         4 549333005         move    y:(r7+n7),b0
P:0972 0610A0         4 549733007         rep     #16     
P:0973 20002A         2 549933009         asr     b
                            33011 L832:
                            33030 
                            33031 ; 4465 |    
                            33032 ; 4466 |    return(0);
                            33033 ; 4467 |        
                            33034 ; 4468 |}
                            33035 
P:0974 21A500         2 550133015         move    b1,x1
P:0975 46F400 FFFFFF  3 550433014         move    #$FFFFFF,y0
P:0977 47F400 0000FF  3 550733013         move    #>$FF,y1
P:0979 212D00         2 550933016         move    b0,b1
P:097A 77F45E FFFFFC  3 551233017         and     y0,b	                #-4,n7
P:097C 21A900         2 551433018         move    b1,b0
P:097D 20AD00         2 551633019         move    x1,b1
P:097E 6EEF7E         4 552033020         and     y1,b	                y:(r7+n7),r6
P:097F 000000         2 552233020         nop             ; (inserted)
P:0980 595E00         2 552433026         move    b0,y:(r6)+
P:0981 5D5600         2 552633027         move    b1,y:(r6)-
                            33037 L831:
P:0982 77F400 FFFFF8  3 552933037         move    #-8,n7
P:0984 000000         2 553133037         nop             ; (inserted)
P:0985 05EF7C         4 553533039         movec   y:(r7+n7),ssh
P:0986 204F00         2 553733041         move    (r7)+n7
P:0987 00000C         4 554133043         rts
                            33046 
                            33047 ; 4469 | 
                            33048 ; 4470 |// MLP: 6/29/06
                            33049 ; 4471 |// These 2 DclkCount function are moved here from PlayList2_static.c
                            33050 ; 4472 |// The playlist2 code does not use them and STFM needs them.
                            33051 ; 4473 |#if (defined USE_PLAYLIST2) || (defined USE_PLAYLIST5)
                            33052 ; 4474 |static DWORD GetDclkCount(void)
                            33053 ; 4475 |{
                            33054 ; 4476 |    return((((DWORD)(HW_DCLKCNTU.I))<<24) | ((DWORD)(HW_DCLKCNTL.I)));
                            33055 ; 4477 |}
                            33056 ; 4478 |#endif
                            33057 ; 4479 |#ifdef USE_PLAYLIST3
                            33058 ; 4480 |DWORD GetDclkCount(void)
                            33059 ; 4481 |{
                            33060 
                            33079 FGetDclkCount:
                            33080 
                            33081 ; 4482 |    return((((DWORD)(HW_DCLKCNTU.I))<<24) | ((DWORD)(HW_DCLKCNTL.I)));
                            33082 
                            33097 
                            33098 ; 4483 |}
                            33099 
P:0988 084E2B         2 554333084         movep   x:<<$FFEB,a
P:0989 08442A         2 554533088         movep   x:<<$FFEA,x0
P:098A 218800         2 554733085         move    a1,a0
P:098B 214C00         2 554933086         move    a2,a1
P:098C 210E00         2 555133087         move    a0,a
P:098D 218600         2 555333090         move    a1,y0
P:098E 210C00         2 555533091         move    a0,a1
P:098F 250042         2 555733092         or      x0,a	                #0,x1
P:0990 218800         2 555933093         move    a1,a0
P:0991 20CC00         2 556133094         move    y0,a1
P:0992 2A0062         2 556333095         or      x1,a	                #0,a2
P:0993 00000C         4 556733101         rts
                            33103 
                            33104 ; 4484 |#endif
                            33105 ; 4485 |
                            33106 ; 4486 |void SetDclkCount(DWORD dwCount)
                            33107 ; 4487 |{
                            33108 
                            33113 FSetDclkCount:
                            33116 
                            33117 ; 4488 |    // TODO:  protect this from interrupts
                            33118 ; 4489 |    HW_DCLKCNTU.I = (WORD)(dwCount >> 24);
                            33119 
                            33127 
                            33128 ; 4490 |    HW_DCLKCNTL.I = (WORD)(dwCount);
                            33129 
                            33132 
                            33133 ; 4491 |}
                            33134 
P:0994 200009         2 556933121         tfr     a,b
P:0995 2B0000         2 557133122         move    #0,b2
P:0996 21A900         2 557333123         move    b1,b0
P:0997 08C92B         4 557733125         movep   b0,x:<<$FFEB
P:0998 216D00         2 557933124         move    b2,b1
P:0999 08C82A         4 558333131         movep   a0,x:<<$FFEA
P:099A 00000C         4 558733136         rts
                            33138 
                            33139 ; 4492 |
                            33140 ; 4493 |////////////////////////////////////////////////////////////////////////////////
                            33141 ; 4494 |//
                            33142 ; 4495 |//>  Name:          I2C_Init
                            33143 ; 4496 |//
                            33144 ; 4497 |//   Type:          Function
                            33145 ; 4498 |//
                            33146 ; 4499 |//   Description:   Initialize I2C hardware registers for use by STFM1000 I2C
                            33147 ; 4500 |//
                            33148 ; 4501 |//
                            33149 ; 4502 |//   Inputs:     mode   1 = Fast (400Kbps) 0 = Slow (100Kbps)
                            33150 ; 4503 |//               int ClockDiv   If ClockDiv is zero then the speed is computed according
                            33151 ; 4504 |//                              to SysGetSpeed() and the mode bit
                            33152 ; 4505 |//
                            33153 ; 4506 |//   Outputs:    -1 Unexpected register value upon reset
                            33154 ; 4507 |//                               -2 Unable to enable RIE
                            33155 ; 4508 |//                               -3 Time waitinf for BUSY to clear
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
                            33156 ; 4509 |//
                            33157 ; 4510 |//   Notes:      table of ClockDiv vs Processor Speed
                            33158 ; 4511 |//                  I2C Clock = DCLK /(ClockDiv * 1 + 3)     Fast Mode
                            33159 ; 4512 |//                  I2C Clock = DCLK /(ClockDiv * 4 + 12)    Slow Mode
                            33160 ; 4513 |//
                            33161 ; 4514 |//    !!! The STMP3500 data sheet uses factors *2 and *8 instead of *1 and *4 as above !!!
                            33162 ; 4515 |//
                            33163 ; 4516 |//        The measured clock frequencies are a little below the desired frequencies.
                            33164 ; 4517 |//        i.e. 100Khz clock was measured at 97Khx and 400Khz clock was measured at 370Khz.
                            33165 ; 4518 |//
                            33166 ; 4519 |//              Excessive error rate observed at 400Kbps.
                            33167 ; 4520 |//              It has been recommended that the values of the pull-up resistors need to be
                            33168 ; 4521 |//              changed to run in Fast mode.
                            33169 ; 4522 |//
                            33170 ; 4523 |//
                            33171 ; 4524 |//  SPEED_IDLE      equ     0
                            33172 ; 4525 |//  SPEED_MP3       equ     1
                            33173 ; 4526 |//  SPEED_ADPCM     equ     2
                            33174 ; 4527 |//  SPEED_MIXER     equ     3
                            33175 ; 4528 |//  SPEED_ADCBASE   equ     4
                            33176 ; 4529 |//  SPEED_MAX       equ     5
                            33177 ; 4530 |//  SPEED_WMA       equ     6
                            33178 ; 4531 |//  SPEED_MP3ENCODE     equ         7
                            33179 ; 4532 |//  SPEED_PEAK      equ     8
                            33180 ; 4533 |//  SPEED_LAST      equ     SPEED_PEAK
                            33181 ; 4534 |////////////////////////////////////////////////////////////////////////////////
                            33182 ; 4535 |#ifdef FUNCLET
                            33183 ; 4536 |    #pragma asm
P:0016                      33184         org p,".stfm1000_SYS":
                            33185         FSTFM1000I2CInit:
                            33186 
                            33191 
                            33192         ;If using funclet, function will be executed via funclet kernel
                            33193         CallFunclet2 RSRC_FUNCLET_STFM1000_I2C_INIT
P:0016 0D0082         4   4833193     jsr       $82
P:0017 00042A               33193     DC       RSRC_FUNCLET_STFM1000_I2C_INIT  ; 1 word
                            33194 
P:0000                      33195         org p,"SYSFUNCLET_STFM1000_I2C_INIT_P":
P:0000 00042A               33196         dc      RSRC_FUNCLET_STFM1000_I2C_INIT
                            33197 ; 4550 |    #pragma endasm
                            33198 ; 4551 |_reentrant INT STFM1000I2CInit_Funclet(WORD mode, WORD ClockDiv)
                            33199 ; 4552 |#else
                            33200 ; 4553 |_reentrant INT STFM1000I2CInit(WORD mode, WORD ClockDiv)
                            33201 ; 4554 |#endif
                            33202 ; 4555 |{
                            33203 
                            33270 FSTFM1000I2CInit_Funclet:
                            33290 
                            33291 ; 4556 |    int Speed;
                            33292 ; 4557 |    int cnt;
                            33293 ; 4558 |    int iI2CWord3;
                            33294 ; 4559 |    int RtnCode = 0;
                            33295 
                            33306 
                            33307 ; 4560 |    int temp = 0;
                            33308 
                            33312 
                            33313 ; 4561 |
                            33314 ; 4562 |    HW_I2CCSR.B.RIE = 0;                // Disable I2C IRQ
                            33315 
                            33318 
                            33319 ; 4563 |
                            33320 ; 4564 |    HW_GP0ENR.B.B16 = 0;        // enable output
                            33321 
                            33324 
                            33325 ; 4565 |    HW_GP0ENR.B.B17 = 0;        // enable output
                            33326 
                            33329 
                            33330 ; 4566 |
                            33331 ; 4567 |    HW_GP0PWR.B.B16 = 1;        // power on
                            33332 
                            33335 
                            33336 ; 4568 |    HW_GP0PWR.B.B17 = 1;        // power on
                            33337 
                            33340 
                            33341 ; 4569 |
                            33342 ; 4570 |#if 1
                            33343 ; 4571 |    for(cnt = 0; (0 != HW_I2CCSR.B.BUSY); cnt++)    // Delay time 1 cnt
                            33344 
P:0001 055F7C         2    233271         movec   ssh,y:(r7)+
P:0002 3F0300         2    433274         move    #3,n7
P:0003 240000         2    633346         move    #0,x0
P:0004 250000         2    833302         move    #0,x1
P:0005 270000         2   1033310         move    #0,y1
P:0006 0AA701         4   1433317         bclr    #1,x:<<$FFE7
P:0007 46F400 000001  3   1733348         move    #>1,y0
P:0009 204F00         2   1933276         move    (r7)+n7
P:000A 77F400 FFFFFD  3   2233297         move    #-3,n7
P:000C 0A7010 00F400  6   2833323         bclr    #16,x:$F400
P:000E 5C6F00         4   3233299         move    a1,y:(r7+n7)
P:000F 0A7011 00F400  6   3833328         bclr    #17,x:$F400
P:0011 0A7030 00F409  6   4433334         bset    #16,x:$F409
P:0013 0A7031 00F409  6   5033339         bset    #17,x:$F409
P:0015 0AF080 rrrrrr  6   5633349         jmp     L865
                            33350 
                            33351 ; 4572 |    {
                            33352 ; 4573 |        if (TIMEOUT_COUNT <= cnt)
                            33353 
P:0017 56F400 002000  3   5933355 L863:   move    #$2000,a
P:0019 200045         2   6133356         cmp     x0,a
P:001A 0AF0A7 rrrrrr  6   6733357         jgt     L864
                            33358 
                            33359 ; 4574 |        {
                            33360 ; 4575 |            HW_I2CCSR.I = 0;    // Reset I2C device
                            33361 
                            33364 
                            33365 ; 4576 |            HW_I2CCSR.B.TREQ = 1;
                            33366 
                            33369 
                            33370 ; 4577 |            HW_I2CCSR.B.TREQ = 0;
                            33371 
                            33374 
                            33375 ; 4578 |            HW_I2CCSR.B.I2C_EN = 1;
                            33376 
                            33379 
                            33380 ; 4579 |            HW_I2CCSR.B.ACKF = 0;
                            33381 
                            33384 
                            33385 ; 4580 |            break;  // no timeout, break anyway
                            33386 
P:001C 08F4A7 000000  4   7133363         movep   #0,x:<<$FFE7
P:001E 0AA72B         4   7533368         bset    #11,x:<<$FFE7
P:001F 0AA70B         4   7933373         bclr    #11,x:<<$FFE7
P:0020 0AA720         4   8333378         bset    #0,x:<<$FFE7
P:0021 0AA70E         4   8733383         bclr    #14,x:<<$FFE7
P:0022 0AF080 rrrrrr  6   9333388         jmp     L866
                            33389 
                            33390 ; 4581 |        }
                            33391 
                            33393 L864:
P:0024 208E00         2   9533395         move    x0,a
P:0025 200050         2   9733396         add     y0,a
P:0026 218400         2   9933399         move    a1,x0
P:0027 0AA7A2 rrrrrr  6  10533402 L865:   jset    #2,x:<<$FFE7,L863
                            33403 
                            33404 ; 4582 |    }
                            33405 ; 4583 |#else
                            33406 ; 4584 |    for(cnt = 0; (0 != HW_I2CCSR.B.BUSY); cnt++)    // Delay time 1 cnt
                            33407 ; 4585 |    {
                            33408 ; 4586 |        if (TIMEOUT_COUNT <= cnt)   RtnCode = -3;     //return(TIMEOUT_ERROR);
                            33409 ; 4587 |    }
                            33410 ; 4588 |#endif
                            33411 ; 4589 |
                            33412 ; 4590 |    for(cnt = 0; cnt < 100; cnt++) { _nop(); }  // Short delay
                            33413 
                            33415 L866:
P:0029 0664A0         4  10933415         rep     #100     
P:002A 000000         2  11133418         nop
                            33421 L891:
                            33423 
                            33424 ; 4591 |
                            33425 ; 4592 |    HW_I2CCSR.I = 0;    // Reset I2C device
                            33426 
                            33429 
                            33430 ; 4593 |
                            33431 ; 4594 |    iI2CWord3 = HW_I2CCSR.I;    // verify that reset worked
                            33432 
                            33436 
                            33437 ; 4595 |
                            33438 ; 4596 |    if ( 0 != (RESET_HW_I2CCSR_MASK & iI2CWord3) )
                            33439 
P:002B 08F4A7 000000  4  11533428         movep   #0,x:<<$FFE7
P:002D 084E27         2  11733434         movep   x:<<$FFE7,a
P:002E 0ACC4F         4  12133441         bclr    #15,a1
P:002F 2A0000         2  12333444         move    #0,a2
P:0030 0ACC50         4  12733442         bclr    #16,a1
P:0031 200003         2  12933445         tst     a
P:0032 0AF0AA rrrrrr  6  13533446         jeq     L868
                            33447 
                            33448 ; 4597 |    {
                            33449 ; 4598 |         RtnCode = -1;                  // Continue anyway - test may not be that good
                            33450 
                            33453 
                            33454 ; 4599 |    }
                            33455 
P:0034 45F400 FFFFFF  3  13833452         move    #>-1,x1
                            33457 L868:
                            33467 
                            33468 ; 4600 |
                            33469 ; 4601 |    HW_I2CCSR.B.I2C_EN = 1;             // Enable I2C device
                            33470 
                            33473 
                            33474 ; 4602 |
                            33475 ; 4603 |    if (0 == ClockDiv)         // lookup Clock Div based on System Clock Speed
                            33476 
P:0036 045FA0         2  14033457         movec   m0,n7
P:0037 2B0000         2  14233478         move    #0,b2
P:0038 0AA720         4  14633472         bset    #0,x:<<$FFE7
P:0039 4F6F00         4  15033459         move    y1,y:(r7+n7)
P:003A 77F40B FFFFFE  3  15333479         tst     b	                #-2,n7
P:003C 000000         2  15533479         nop             ; (inserted)
P:003D 4D6F00         4  15933464         move    x1,y:(r7+n7)
P:003E 0AF0A2 rrrrrr  6  16533480         jne     L888
                            33481 
                            33482 ; 4604 |    {
                            33483 ; 4605 |        Speed = SysGetSpeed();
                            33484 
P:0040 0BF080 rrrrrr  6  17133486         jsr     FSysGetSpeed
                            33490 
                            33491 ; 4606 |        switch(Speed)
                            33492 
P:0042 65F403 rrrrrr  3  17433494         tst     a       #L892,r5
P:0044 0AF0AB rrrrrr  6  18033495         jmi     L879
P:0046 46F400 00000C  3  18333496         move    #>12,y0
P:0048 21DD55         2  18533497         cmp     y0,a    a,n5
P:0049 0AF0A7 rrrrrr  6  19133498         jgt     L879
P:004B 07ED95         8  19933499         movem   p:(r5+n5),r5
P:004C 000000         2  20133499         nop             ; (inserted)
P:004D 0AE580         4  20533501         jmp     (r5)
                            33502 
P:004E rrrrrr               33503 L892:   dc      L869    ; case 0:
P:004F rrrrrr               33504         dc      L879    ; default:
P:0050 rrrrrr               33505         dc      L879    ; default:
P:0051 rrrrrr               33506         dc      L870    ; case 3:
P:0052 rrrrrr               33507         dc      L871    ; case 4:
P:0053 rrrrrr               33508         dc      L879    ; default:
P:0054 rrrrrr               33509         dc      L875    ; case 6:
P:0055 rrrrrr               33510         dc      L875    ; case 7:
P:0056 rrrrrr               33511         dc      L872    ; case 8:
P:0057 rrrrrr               33512         dc      L875    ; case 9:
P:0058 rrrrrr               33513         dc      L876    ; case 10:
P:0059 rrrrrr               33514         dc      L877    ; case 11:
P:005A rrrrrr               33515         dc      L878    ; case 12:
                            33516 
                            33517 
                            33518 ; 4607 |        {
                            33519 ; 4608 |            case SPEED_IDLE:      ClockDiv = I2C_IDLE_SPEED;          break;
                            33520 
                            33522 L869:
P:005B 57F400 00003D  3  20833522         move    #>$3D,b
P:005D 0AF080 rrrrrr  6  21433524         jmp     L888
                            33525 
                            33526 ; 4609 |            case SPEED_FM:        ClockDiv = I2C_FM_SPEED;            break;
                            33527 
P:005F 57F400 000093  3  21733529 L870:   move    #>147,b
P:0061 0AF080 rrrrrr  6  22333530         jmp     L888
                            33531 
                            33532 ; 4610 |            case SPEED_FM_EQ:     ClockDiv = I2C_FM_EQ_SPEED;         break;
                            33533 
P:0063 57F400 0000B8  3  22633535 L871:   move    #>184,b
P:0065 0AF080 rrrrrr  6  23233536         jmp     L888
                            33537 
                            33538 ; 4611 |            case SPEED_MP3:       ClockDiv = I2C_MP3_SPEED;           break;
                            33539 ; 4612 |            case SPEED_ADPCM:     ClockDiv = I2C_ADPCM_SPEED;         break;
                            33540 ; 4613 |            case SPEED_MIXER:     ClockDiv = I2C_MIXER_SPEED;         break;
                            33541 
P:0067 57F400 00000A  3  23533543 L872:   move    #>10,b
P:0069 0AF080 rrrrrr  6  24133544         jmp     L888
                            33545 
                            33546 ; 4614 |            case SPEED_ADCBASE:   ClockDiv = I2C_ADCBASE_SPEED;       break;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                            33547 
P:006B 57F400 0000DE  3  24433549 L875:   move    #>222,b
P:006D 0AF080 rrrrrr  6  25033550         jmp     L888
                            33551 
                            33552 ; 4615 |            case SPEED_MAX:       ClockDiv = I2C_MAX_SPEED;           break;
                            33553 
P:006F 57F400 000129  3  25333555 L876:   move    #297,b
P:0071 0AF080 rrrrrr  6  25933556         jmp     L888
                            33557 
                            33558 ; 4616 |            case SPEED_WMA:       ClockDiv = I2C_WMA_SPEED;           break;
                            33559 
P:0073 57F400 000174  3  26233561 L877:   move    #372,b
P:0075 0AF080 rrrrrr  6  26833562         jmp     L888
                            33563 
                            33564 ; 4617 |            case SPEED_MP3ENCODE: ClockDiv = I2C_MP3ENCODE_SPEED;     break;
                            33565 
P:0077 57F400 00018A  3  27133567 L878:   move    #394,b
P:0079 0AF080 rrrrrr  6  27733568         jmp     L888
                            33569 
                            33570 ; 4618 |            case SPEED_PEAK:
                            33571 ; 4619 |            default:                      ClockDiv = I2C_PEAK_SPEED;          break;
                            33572 
                            33574 L879:
                            33575 
                            33576 ; 4620 |         }
                            33577 ; 4621 |    }
                            33578 ; 4622 |
                            33579 ; 4623 |    //HW_I2CDIV.I = (ClockDiv<<1) & 0x0001FE;   // Clock Divider Register (e.g. 0x78) Write Only
                            33580 ; 4624 |    HW_I2CDIV.B.FACT = ClockDiv;                // Cannot be read, we need to set bit[8:1]
                            33581 
P:007B 57F400 0001D5  3  28033574         move    #469,b
                            33583 L888:
                            33593 
                            33594 ; 4625 |
                            33595 ; 4626 |    HW_I2CCSR.B.MODE = mode;    // Operating Mode Bit  1=Fast
                            33596 
P:007D 084E25         2  28233583         movep   x:<<$FFE5,a
P:007E 47F400 FFFE01  3  28533584         move    #$FFFE01,y1
P:0080 77F476 FFFFFD  3  28833585         and     y1,a	                #-3,n7
P:0082 47F400 0000FF  3  29133586         move    #>$FF,y1
P:0084 4EEF7E         4  29533587         and     y1,b	                y:(r7+n7),y0
P:0085 21A700         2  29733588         move    b1,y1
P:0086 0117C8         2  29933589         mpy     y1,#23,b
P:0087 212700         2  30133590         move    b0,y1
P:0088 200072         2  30333591         or      y1,a
P:0089 08CC25         4  30733592         movep   a1,x:<<$FFE5
P:008A 0AC600 rrrrrr  6  31333601         jclr    #0,y0,L894
P:008C 0AA725         4  31733602         bset    #5,x:<<$FFE7
P:008D 0AF080 rrrrrr  6  32333603         jmp     L893
                            33604 L894:
                            33605 
                            33606 ; 4627 |
                            33607 ; 4628 |    if (1 == HW_I2CCSR.B.ROFL)  // Clear Receiver Overflow
                            33608 
P:008F 0AA705         4  32733604         bclr    #5,x:<<$FFE7
                            33610 L893:
P:0090 0BA72C         4  33133613         btst    #12,x:<<$FFE7
P:0091 46F41B 000001  3  33433614         clr     b	                #>1,y0
P:0093 20003F         2  33633615         rol     b
P:0094 20005D         2  33833618         cmp     y0,b
P:0095 0AF0A2 rrrrrr  6  34433620         jne     L889
                            33621 
                            33622 ; 4629 |    {
                            33623 ; 4630 |        temp = HW_I2CDAT.U;
                            33624 
                            33629 
                            33630 ; 4631 |        HW_I2CCSR.B.ROFLCL = 1;
                            33631 
                            33634 
                            33635 ; 4632 |        HW_I2CCSR.B.ROFLCL = 0;
                            33636 
                            33639 
                            33640 ; 4633 |//      if ( 1 == HW_I2CCSR.B.ROFL) SystemHalt(); //debug only
                            33641 ; 4634 |    }
                            33642 ; 4635 |
                            33643 ; 4636 |    if (1 == HW_I2CCSR.B.TUFL)  // Clear Transmitter Undererflow
                            33644 
P:0097 045FA0         2  34633626         movec   m0,n7
P:0098 000000         2  34833626         nop             ; (inserted)
P:0099 086FE6         6  35433628         movep   x:<<$FFE6,y:(r7+n7)
P:009A 0AA733         4  35833633         bset    #19,x:<<$FFE7
P:009B 0AA713         4  36233638         bclr    #19,x:<<$FFE7
                            33646 L889:
P:009C 2E0000         2  36433647         move    #0,a
P:009D 0BA72D         4  36833646         btst    #13,x:<<$FFE7
P:009E 200037         2  37033648         rol     a
P:009F 200055         2  37233650         cmp     y0,a
P:00A0 0AF0A2 rrrrrr  6  37833651         jne     L890
                            33652 
                            33653 ; 4637 |    {
                            33654 ; 4638 |        HW_I2CDAT.U = temp;
                            33655 
                            33660 
                            33661 ; 4639 |        HW_I2CCSR.B.TUFLCL = 1;
                            33662 
                            33665 
                            33666 ; 4640 |        HW_I2CCSR.B.TUFLCL = 0;
                            33667 
                            33670 
                            33671 ; 4641 |//      if (1 == HW_I2CCSR.B.TUFL) SystemHalt(); //debug only
                            33672 ; 4642 |    }
                            33673 ; 4643 |
                            33674 ; 4644 |//  Only forISR version of code         HW_I2CCSR.B.RIE = 1;            // Enable I2C IRQ
                            33675 ; 4645 |
                            33676 ; 4646 |//  Only forISR version of code         if( 0 == HW_I2CCSR.B.RIE) RtnCode = -2; //SystemHalt(); //Debug only
                            33677 ; 4647 |
                            33678 ; 4648 |    return(RtnCode);
                            33679 
P:00A2 045FA0         2  38033657         movec   m0,n7
P:00A3 000000         2  38233657         nop             ; (inserted)
P:00A4 08EFE6         6  38833659         movep   y:(r7+n7),x:<<$FFE6
P:00A5 0AA734         4  39233664         bset    #20,x:<<$FFE7
P:00A6 0AA714         4  39633669         bclr    #20,x:<<$FFE7
                            33681 L890:
                            33686 
                            33687 ; 4649 |}
                            33688 
P:00A7 77F400 FFFFFE  3  39933681         move    #-2,n7
P:00A9 000000         2  40133681         nop             ; (inserted)
P:00AA 5EEF00         4  40533683         move    y:(r7+n7),a
P:00AB 77F400 FFFFFC  3  40833690         move    #-4,n7
P:00AD 000000         2  41033690         nop             ; (inserted)
P:00AE 05EF7C         4  41433692         movec   y:(r7+n7),ssh
P:00AF 204F00         2  41633694         move    (r7)+n7
P:00B0 00000C         4  42033696         rts
                            33700 
                            33701 ; 4650 |#ifdef FUNCLET
                            33702 ; 4651 |    #pragma asm
P:099B                      33703         org p,".ptextstfm1000":
                            33704 ; 4653 |    #pragma endasm
                            33705 ; 4654 |#endif
                            33706 ; 4655 |
                            33707 ; 4656 |
                            33708 ; 4657 |_reentrant void STFM1000I2CClose(void)
                            33709 ; 4658 |{
                            33710 
                            33715 FSTFM1000I2CClose:
                            33716 
                            33717 ; 4659 |    HW_I2CCSR.B.I2C_EN = 0;             // Disable I2C device
                            33718 
                            33721 
                            33722 ; 4660 |    HW_GP0PWR.B.B16 = 0;        // power down
                            33723 
                            33726 
                            33727 ; 4661 |    HW_GP0PWR.B.B17 = 0;        // power down
                            33728 
                            33731 
                            33732 ; 4662 |
                            33733 ; 4663 |}
                            33734 
P:099B 0AA700         4 559133720         bclr    #0,x:<<$FFE7
P:099C 0A7010 00F409  6 559733725         bclr    #16,x:$F409
P:099E 0A7011 00F409  6 560333730         bclr    #17,x:$F409
P:09A0 00000C         4 560733736         rts
                            33738 
                            33739 ; 4664 |/*
                            33740 ; 4665 |#ifdef FUNCLET
                            33741 ; 4666 |    #pragma asm
                            33742 ; 4667 |        org p,".stfm1000_SYS":
                            33743 ; 4668 |        FSTFM1000SetLnaBias:
                            33744 ; 4669 |
                            33745 ; 4670 |        nolist
                            33746 ; 4671 |        include "sysmacro.asm"
                            33747 ; 4672 |        include "resource.inc"
                            33748 ; 4673 |        list
                            33749 ; 4674 |
                            33750 ; 4675 |        ;If using funclet, function will be executed via funclet kernel
                            33751 ; 4676 |        CallFunclet2 RSRC_FUNCLET_STFM1000_SET_LNA_BIAS
                            33752 ; 4677 |
                            33753 ; 4678 |        org p,"SYSFUNCLET_STFM1000_SET_LNA_BIAS_P":
                            33754 ; 4679 |        dc      RSRC_FUNCLET_STFM1000_SET_LNA_BIAS
                            33755 ; 4680 |    #pragma endasm
                            33756 ; 4681 |_reentrant INT STFM1000SetLnaBias_Funclet(INT iRssiLog)
                            33757 ; 4682 |#else
                            33758 ; 4683 |*/
                            33759 ; 4684 |#if 0  //move to second codebank
                            33760 ; 4685 |_reentrant INT STFM1000SetLnaBias(INT iRssiLog)
                            33761 ; 4686 |//#endif
                            33762 ; 4687 |{
                            33763 ; 4688 |
                            33764 ; 4689 |    DWORD dwShadowAgcStatReg;
                            33765 ; 4690 |    DWORD dwBias1Temp;
                            33766 ; 4691 |    DWORD dwAgcOut;
                            33767 ; 4692 |    DWORD dwLnaRms,dwLnaAmp1ImproveDist;
                            33768 ; 4693 |    INT RetCode = SUCCESS;
                            33769 ; 4694 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            33770 ; 4695 |
                            33771 ; 4696 |
                            33772 ; 4697 |     /* read AGC_STAT register */
                            33773 ; 4698 |    RetCode = STFM1000ReadRegisterToShadow(AGC_STAT_REG_ADDR,
                            33774 ; 4699 |                                            &dwShadowAgcStatReg);
                            33775 ; 4700 |    if (SUCCESS != RetCode)
                            33776 ; 4701 |    {
                            33777 ; 4702 |        return RetCode;
                            33778 ; 4703 |    }
                            33779 ; 4704 |    /* extract AgcOut */
                            33780 ; 4705 |    STFM1000ReadShadowRegister(AGCOUT_STAT_REG_MASK, &dwShadowAgcStatReg,
                            33781 ; 4706 |            &dwAgcOut);
                            33782 ; 4707 |    // Bit[1] of ShadowLna
                            33783 ; 4708 |    dwBias1Up = (0 != (pDrst->sd_ctl_ShadowLna_dw & 0x00000002)) ? (1):(0);
                            33784 ; 4709 |    // Bit[0] of ShadowLna
                            33785 ; 4710 |    dwBias1Down = (0 != (pDrst->sd_ctl_ShadowLna_dw & 0x00000001)) ? (1):(0);
                            33786 ; 4711 |    /* extract LnaRms */
                            33787 ; 4712 |    STFM1000ReadShadowRegister(LNA_RMS_REG_MASK, &dwShadowAgcStatReg,
                            33788 ; 4713 |            &dwLnaRms);
                            33789 ; 4714 |
                            33790 ; 4715 |    // Bit[23] of ShadowRef
                            33791 ; 4716 |    dwLnaAmp1ImproveDist = (0 != (pDrst->sd_ctl_ShadowRef_dw & 0x00800000)) ? (1):(0);  // bit 23
                            33792 ; 4717 |
                            33793 ; 4718 |    if (31 == dwAgcOut)
                            33794 ; 4719 |    {
                            33795 ; 4720 |
                            33796 ; 4721 |        if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            33797 ; 4722 |            {
                            33798 ; 4723 |            RetCode = STFM1000WriteRegister(
                            33799 ; 4724 |                AGC_CONTROL1_REG_ADDR,
                            33800 ; 4725 |                B2_AGCREF_REG_MASK,
                            33801 ; 4726 |                &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            33802 ; 4727 |                10);
                            33803 ; 4728 |            if (SUCCESS != RetCode)
                            33804 ; 4729 |                {
                            33805 ; 4730 |                //SystemHalt();
                            33806 ; 4731 |                return RetCode;
                            33807 ; 4732 |                }
                            33808 ; 4733 |            } // end if TA2
                            33809 ; 4734 |         else  // must be version TB2
                            33810 ; 4735 |            {
                            33811 ; 4736 |            RetCode = STFM1000WriteRegister(
                            33812 ; 4737 |                AGC_CONTROL1_REG_ADDR,
                            33813 ; 4738 |                0x00003F00,          // mask for B2_DB_WB_REF_REG
                            33814 ; 4739 |                &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            33815 ; 4740 |                42);
                            33816 ; 4741 |            if (SUCCESS != RetCode)
                            33817 ; 4742 |                {
                            33818 ; 4743 |                //SystemHalt();
                            33819 ; 4744 |                return RetCode;
                            33820 ; 4745 |                }
                            33821 ; 4746 |            } // end version TB2
                            33822 ; 4747 |
                            33823 ; 4748 |        if(18 >= iRssiLog)
                            33824 ; 4749 |        {
                            33825 ; 4750 |            if(dwLnaRms==0)
                            33826 ; 4751 |            {
                            33827 ; 4752 |                if(dwBias1Down)
                            33828 ; 4753 |                {
                            33829 ; 4754 |                    dwBias1Down = 0;
                            33830 ; 4755 |                }
                            33831 ; 4756 |                else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 124

M:ADDR CODE           CYCLES LINE SOURCELINE
                            33832 ; 4757 |                {
                            33833 ; 4758 |                    dwBias1Up = 1;
                            33834 ; 4759 |                    dwLnaAmp1ImproveDist = 0;
                            33835 ; 4760 |                }
                            33836 ; 4761 |            }
                            33837 ; 4762 |        }
                            33838 ; 4763 |        if(28 <= iRssiLog)  // was 24
                            33839 ; 4764 |        {
                            33840 ; 4765 |            if(dwBias1Up)
                            33841 ; 4766 |            {
                            33842 ; 4767 |                dwBias1Up = 0;
                            33843 ; 4768 |                dwLnaAmp1ImproveDist = 1;
                            33844 ; 4769 |            }
                            33845 ; 4770 |            else
                            33846 ; 4771 |            {
                            33847 ; 4772 |                if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            33848 ; 4773 |                    {
                            33849 ; 4774 |                    RetCode = STFM1000WriteRegister(
                            33850 ; 4775 |                        AGC_CONTROL1_REG_ADDR,
                            33851 ; 4776 |                        B2_AGCREF_REG_MASK,
                            33852 ; 4777 |                        &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            33853 ; 4778 |                        7);
                            33854 ; 4779 |                    if (SUCCESS != RetCode)
                            33855 ; 4780 |                        {
                            33856 ; 4781 |                        //SystemHalt();
                            33857 ; 4782 |                        return RetCode;
                            33858 ; 4783 |                        }
                            33859 ; 4784 |                     } // end if TA2
                            33860 ; 4785 |                 else  // must be version TB2
                            33861 ; 4786 |                    {
                            33862 ; 4787 |                    RetCode = STFM1000WriteRegister(
                            33863 ; 4788 |                        AGC_CONTROL1_REG_ADDR,
                            33864 ; 4789 |                        0x00003F00,          // mask for B2_DB_WB_REF_REG
                            33865 ; 4790 |                        &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            33866 ; 4791 |                        34);
                            33867 ; 4792 |                    if (SUCCESS != RetCode)
                            33868 ; 4793 |                        {
                            33869 ; 4794 |                        //SystemHalt();
                            33870 ; 4795 |                        return RetCode;
                            33871 ; 4796 |                        }
                            33872 ; 4797 |                    } // end version TB2
                            33873 ; 4798 |
                            33874 ; 4799 |                dwBias1Down = 1;
                            33875 ; 4800 |            }
                            33876 ; 4801 |
                            33877 ; 4802 |        }
                            33878 ; 4803 |    }
                            33879 ; 4804 |    else  // (31 != dwAgcOut)
                            33880 ; 4805 |    {
                            33881 ; 4806 |        if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            33882 ; 4807 |            {
                            33883 ; 4808 |            RetCode = STFM1000WriteRegister(
                            33884 ; 4809 |                AGC_CONTROL1_REG_ADDR,
                            33885 ; 4810 |                B2_AGCREF_REG_MASK,
                            33886 ; 4811 |                &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            33887 ; 4812 |                7);
                            33888 ; 4813 |            if (SUCCESS != RetCode)
                            33889 ; 4814 |                {
                            33890 ; 4815 |                //SystemHalt();
                            33891 ; 4816 |                return RetCode;
                            33892 ; 4817 |                }
                            33893 ; 4818 |             }  // end if TA2
                            33894 ; 4819 |         else  // must be version TB2
                            33895 ; 4820 |            {
                            33896 ; 4821 |            RetCode = STFM1000WriteRegister(
                            33897 ; 4822 |                AGC_CONTROL1_REG_ADDR,
                            33898 ; 4823 |                0x00003F00,          // mask for B2_DB_WB_REF_REG
                            33899 ; 4824 |                &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            33900 ; 4825 |                34);
                            33901 ; 4826 |            if (SUCCESS != RetCode)
                            33902 ; 4827 |                {
                            33903 ; 4828 |                //SystemHalt();
                            33904 ; 4829 |                return RetCode;
                            33905 ; 4830 |                }
                            33906 ; 4831 |            } // end version TB2
                            33907 ; 4832 |
                            33908 ; 4833 |        dwBias1Up = 0;
                            33909 ; 4834 |        dwBias1Down = 1;
                            33910 ; 4835 |        dwLnaAmp1ImproveDist = 1;
                            33911 ; 4836 |    }
                            33912 ; 4837 |    if (VERSION_TB2 == StfmTuneDefault.STFM1000_Version)
                            33913 ; 4838 |    {
                            33914 ; 4839 |        RetCode = STFM1000WriteRegister(
                            33915 ; 4840 |            REF_REG_ADDR,
                            33916 ; 4841 |            LNA_AMP1_IMPROVE_DISTORTION,
                            33917 ; 4842 |            &pDrst->sd_ctl_ShadowRef_dw,
                            33918 ; 4843 |            dwLnaAmp1ImproveDist);
                            33919 ; 4844 |
                            33920 ; 4845 |        if (SUCCESS != RetCode)
                            33921 ; 4846 |        {
                            33922 ; 4847 |            return RetCode;
                            33923 ; 4848 |        }
                            33924 ; 4849 |    }
                            33925 ; 4850 |    dwBias1Temp = ((dwBias1Up<<1) | dwBias1Down) & (0x00000003);
                            33926 ; 4851 |    RetCode = STFM1000WriteRegister(
                            33927 ; 4852 |        LNA_REG_ADDR,
                            33928 ; 4853 |        (IBIAS1_UP_MASK | IBIAS1_DN_MASK),
                            33929 ; 4854 |        &pDrst->sd_ctl_ShadowLna_dw,
                            33930 ; 4855 |        dwBias1Temp);
                            33931 ; 4856 |
                            33932 ; 4857 |    if (SUCCESS != RetCode)
                            33933 ; 4858 |    {
                            33934 ; 4859 |        return RetCode;
                            33935 ; 4860 |    }
                            33936 ; 4861 |    return RetCode;
                            33937 ; 4862 |}
                            33938 ; 4863 |#endif   //move to second codebank
                            33939 ; 4864 |#ifdef FUNCLET
                            33940 ; 4865 |    #pragma asm
P:09A1                      33941         org p,".ptextstfm1000":
                            33942 ; 4867 |    #pragma endasm
                            33943 ; 4868 |#endif
                            33944 ; 4869 |// **************************************************************************
                            33945 ; 4870 |// ************ Global variables ********************************************
                            33946 ; 4871 |// **************************************************************************
                            33947 ; 4872 |
                            33948 ; 4873 |extern int _Y g_sd_audio_LprB0_i16;      // -3dB cutoff = 17 kHz
                            33949 ; 4874 |extern int _Y g_sd_audio_LprB1_i16;      // -3dB cutoff = 17 kHz
                            33950 ; 4875 |extern int _Y g_sd_audio_LprA1_i16;      // -3dB cutoff = 17 kHz
                            33951 ; 4876 |extern int _Y g_sd_audio_LprA2_i16;      // -3dB cutoff = 17 kHz
                            33952 ; 4877 |
                            33953 ; 4878 |extern int _Y g_sd_audio_pCoefForcedMono_u1;
                            33954 ; 4879 |extern int _Y g_sd_audio_pCoefBypassBlend_u1;
                            33955 ; 4880 |extern int _Y g_sd_audio_pCoefBypassSoftmute_u1;
                            33956 ; 4881 |extern int _Y g_sd_audio_pCoefBypassBwCtl_u1;
                            33957 ; 4882 |
                            33958 ; 4883 |extern _fract gLPR_Mult_fract;
                            33959 ; 4884 |extern _fract gLMR_Mult_fract;
                            33960 ; 4885 |
                            33961 ; 4886 |extern _fract LPR_Data_fract;
                            33962 ; 4887 |extern _fract LMR_Data_fract;
                            33963 ; 4888 |extern _fract _circ _Y  LPR_XYData[5];       // LRP data to be filtered
                            33964 ; 4889 |extern _fract _circ _Y  LMR_XYData[5];       // LMR data to be filtered
                            33965 ; 4890 |
                            33966 ; 4891 |extern _fract _circ _Y *_Y LPR_PtrXUpdate;    // Address to store X(t) and start of XYData
                            33967 ; 4892 |extern _fract _circ _Y *_Y LPR_PtrYUpdate;    // Address to store Y which becomes Y(t-1) for next loop
                            33968 ; 4893 |
                            33969 ; 4894 |extern _fract _circ _Y *_Y LMR_PtrXUpdate;    // Address to store X(t) and start of XYData
                            33970 ; 4895 |extern _fract _circ _Y *_Y LMR_PtrYUpdate;    // Address to store Y which becomes Y(t-1) for next loop
                            33971 ; 4896 |
                            33972 ; 4897 |// Semaphore to indicate that global coefficients in variables g_sd_audio_* is ready to be copied to IIRFiltCoeff[]
                            33973 ; 4898 |extern int IIRFiltCoeffSemaphore;
                            33974 ; 4899 |
                            33975 ; 4900 |/* IIRFilterCoeff array is in Q23 format */
                            33976 ; 4901 |extern  int _circ _X IIRFiltCoeff[10];
                            33977 ; 4902 |
                            33978 ; 4903 |//extern  int gCOEF_SCALE; //change it to a Macro
                            33979 ; 4904 |
                            33980 ; 4905 |extern  sw_stereocontrol_t sw_stereocontrol;
                            33981 ; 4906 |
                            33982 ; 4907 |/////////////////////////////////////////////////////////////////////////////////
                            33983 ; 4908 |// Name:           sw_stereocontrol_bwsweep
                            33984 ; 4909 |//
                            33985 ; 4910 |//  Type:           Function
                            33986 ; 4911 |//  Description:    This function contain Signal quality indicator and
                            33987 ; 4912 |//                  week signal processingfunctionality.it updates above
                            33988 ; 4913 |//                                      IIR coefficients for stereo path.
                            33989 ; 4914 |//
                            33990 ; 4915 |//                  Semaphore IIRFiltCoeffSemaphore is set/cleared to indicate that coefficients
                            33991 ; 4916 |//                  are not valid/valid
                            33992 ; 4917 |//
                            33993 ; 4918 |//  Inputs:         none
                            33994 ; 4919 |//
                            33995 ; 4920 |//
                            33996 ; 4921 |//  Outputs:
                            33997 ; 4922 |//
                            33998 ; 4923 |//
                            33999 ; 4924 |//
                            34000 ; 4925 |//
                            34001 ; 4926 |//
                            34002 ; 4927 |//
                            34003 ; 4928 |//  Notes:
                            34004 ; 4929 |/////////////////////////////////////////////////////////////////////////////////
                            34005 ; 4930 |#if 0
                            34006 ; 4931 |_reentrant void sw_stereocontrol_bwsweep(void)
                            34007 ; 4932 |#else
                            34008 ; 4933 |
                            34009 ; 4934 |//sd_audio_B0M_i16,sd_audio_B0B_i16,sd_audio_B0S_u16 ;
                            34010 ; 4935 |//sd_audio_B1M_i16,sd_audio_B1B_i16,sd_audio_B1S_u16 ;
                            34011 ; 4936 |//sd_audio_A1M_i16,sd_audio_A1B_i16,sd_audio_A1S_u16;
                            34012 ; 4937 |//sd_audio_A2M_i16,sd_audio_A2B_i16,sd_audio_A2S_u16;
                            34013 ; 4938 |struct _sd_audio_data{
                            34014 ; 4939 |   signed short sd_audio_M_i16;
                            34015 ; 4940 |   signed short sd_audio_B_i16;
                            34016 ; 4941 |   unsigned short sd_audio_S_u16;
                            34017 ; 4942 |};
                            34018 ; 4943 |
                            34019 ; 4944 |#ifdef PLAYER
                            34020 ; 4945 | struct _sd_audio_data const_sd_audio_data[8][4] = {
                            34021 ; 4946 |#else
                            34022 ; 4947 | struct _sd_audio_data _X  const_sd_audio_data[8][4] = {
                            34023 ; 4948 |#endif
                            34024 
                            34025 
Y:0034                      34026         org     y,".ydatastfm1000",init:
                            34027 Fconst_sd_audio_data:
Y:0034 0060A4 FFDC40        34028         dc      $0060a4,$ffdc40,$000002,$00609a,$ffdc4a,$000002,$007b9e,$ffc2b1
       000002 00609A              
       FFDC4A 000002              
       007B9E FFC2B1              
Y:003C 000002 004BB6        34029         dc      $000002,$004bb6,$ffd069,$000004,$0060a4,$ffdc40,$000002,$00609a
       FFD069 000004              
       0060A4 FFDC40              
       000002 00609A              
Y:0044 FFDC4A 000002        34030         dc      $ffdc4a,$000002,$007b9e,$ffc2b1,$000002,$00641f,$ffcaa3,$000002
       007B9E FFC2B1              
       000002 00641F              
       FFCAA3 000002              
Y:004C 004773 FFEE8A        34031         dc      $004773,$ffee8a,$000002,$00481d,$ffee0b,$000002,$007b9e,$ffc2b1
       000002 00481D              
       FFEE0B 000002              
       007B9E FFC2B1              
Y:0054 000002 00785F        34032         dc      $000002,$00785f,$ffcf3f,$000001,$004773,$ffee8a,$000002,$00481d
       FFCF3F 000001              
       004773 FFEE8A              
       000002 00481D              
Y:005C FFEE0B 000002        34033         dc      $ffee0b,$000002,$007b9e,$ffc2b1,$000002,$00382b,$fff7ec,$000001
       007B9E FFC2B1              
       000002 00382B              
       FFF7EC 000001              
Y:0064 006F11 FFEE66        34034         dc      $006f11,$ffee66,$000001,$006f2e,$ffee18,$000001,$007b9e,$ffc2b1
       000001 006F2E              
       FFEE18 000001              
       007B9E FFC2B1              
Y:006C 000002 FFFF4B        34035         dc      $000002,$ffff4b,$0016f3,$000001,$006f11,$ffee66,$000001,$006f2e
       0016F3 000001              
       006F11 FFEE66              
       000001 006F2E              
Y:0074 FFEE18 000001        34036         dc      $ffee18,$000001,$007b9e,$ffc2b1,$000002,$ffc625,$0030df,$000001
       007B9E FFC2B1              
       000002 FFC625              
       0030DF 000001              
Y:007C 005656 FFF75F        34037         dc      $005656,$fff75f,$000001,$005649,$fff763,$000001,$007b9e,$ffc2b1
       000001 005649              
       FFF763 000001              
       007B9E FFC2B1              
Y:0084 000002 FF8601        34038         dc      $000002,$ff8601,$004824,$000001,$005656,$fff75f,$000001,$005649
       004824 000001              
       005656 FFF75F              
       000001 005649              
Y:008C FFF763 000001        34039         dc      $fff763,$000001,$007b9e,$ffc2b1,$000002,$ff9fa8,$002db2,$000002
       007B9E FFC2B1              
       000002 FF9FA8              
       002DB2 000002              
                            34048 
                            34049 ; 4949 |{{24740, -9152,  2},  {24730, -9142, 2},   {31646,-15695, 2},     {19382,-12183, 4}},    //if(sw_stereocontrol.temp2_reg > 18000)
                            34050 ; 4950 |{{24740, -9152, 2},   {24730,-9142, 2},    {31646, -15695, 2},    {25631, -13661, 2}},   //(sw_stereocontrol.temp2_reg > 16000)
                            34051 ; 4951 |{{18291, -4470, 2},   {18461, -4597, 2},   { 31646, -15695, 2},   {30815, -12481, 1}},  //(sw_stereocontrol.temp2_reg > 14000)
                            34052 ; 4952 |{{18291,-4470, 2},    {18461, -4597, 2},   { 31646, -15695, 2},   {14379, -2068, 1}},    //(sw_stereocontrol.temp2_reg > 12000)
                            34053 ; 4953 |{{28433,-4506,1},     {28462,-4584,1},     {31646,-15695,2},      {-181,5875,1}},        //(sw_stereocontrol.temp2_reg > 10000)
                            34054 ; 4954 |{{28433, -4506,1},    {28462, -4584,1},    {31646,-15695, 2},     {-14811,12511,1}},       //(sw_stereocontrol.temp2_reg > 8000)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 125

M:ADDR CODE           CYCLES LINE SOURCELINE
                            34055 ; 4955 |{{22102,-2209, 1},    {22089,-2205, 1},    {31646,-15695, 2},     {-31231,18468, 1}},      // (sw_stereocontrol.temp2_reg > 6000)
                            34056 ; 4956 |{{22102, -2209,1},    {22089,-2205,1},     {31646, -15695, 2},    { -24664,11698, 2}}     //esle
                            34057 ; 4957 |};
                            34058 ; 4958 |
                            34059 ; 4959 |_reentrant void sw_stereocontrol_bwsweep(void)
                            34060 ; 4960 |{
                            34061 
P:09A1                      34062         org     p,".ptextstfm1000":
                            34067 Fsw_stereocontrol_bwsweep:
                            34076 
                            34077 ; 4961 |  // ****************** Bandwidth Sweep Algorithm ************************
                            34078 ; 4962 |  // *** Calculate 2nd order filter coefficients as function of desired BW
                            34079 ; 4963 |  // We do this by constructing piece-wise linear filter coef's as f(BW),
                            34080 ; 4964 |  // which is why we break the calc's into different BW regions below.
                            34081 ; 4965 |  // coef(BW) = S*(M*BW + B)
                            34082 ; 4966 |  // For more info, see sw_audio/ws_filter.m checked into CVS
                            34083 ; 4967 |
                            34084 ; 4968 |  // #### TBD - shift frequency by2048 and then use a switch/case statement to simplify the code below
                            34085 ; 4969 |     unsigned long temp;
                            34086 ; 4970 |     int index= 0;
                            34087 ; 4971 |    if (sw_stereocontrol.sd_audio_pCoefBypassBwCtl_u1 == 0)      // if ==1, then we just go with default coef set
                            34088 
P:09A1 3F0500         2 560934068         move    #5,n7
P:09A2 5EF000 rrrrrr  3 561234090         move    y:Fsw_stereocontrol+8,a
P:09A4 204F03         2 561434091         tst     a	                (r7)+n7
P:09A5 0AF0A2 rrrrrr  6 562034092         jne     L931
                            34093 
                            34094 ; 4972 |    {
                            34095 ; 4973 |        sw_stereocontrol.temp2_reg = (signed short)sw_stereocontrol.sd_audio_LprBw_u16;
                            34096 
                            34100 
                            34101 ; 4974 |
                            34102 ; 4975 |        if(sw_stereocontrol.temp2_reg > 18000)        {index = 0;}
                            34103 
P:09A7 58F000 rrrrrr  3 562334098         move    y:Fsw_stereocontrol+26,a0
P:09A9 46F400 004650  3 562634106         move    #18000,y0
P:09AB 587000 rrrrrr  3 562934099         move    a0,y:Fsw_stereocontrol+45
P:09AD 5FF000 rrrrrr  3 563234105         move    y:Fsw_stereocontrol+45,b
P:09AF 20005D         2 563434107         cmp     y0,b
P:09B0 0AF0AF rrrrrr  6 564034108         jle     L917
P:09B2 240000         2 564234109         move    #0,x0
P:09B3 0AF080 rrrrrr  6 564834111         jmp     L930
                            34112 
                            34113 ; 4976 |        else if(sw_stereocontrol.temp2_reg > 16000) {index = 1; }
                            34114 
P:09B5 47F400 003E80  3 565134116 L917:   move    #16000,y1
P:09B7 20007D         2 565334117         cmp     y1,b
P:09B8 0AF0AF rrrrrr  6 565934118         jle     L918
P:09BA 44F400 000001  3 566234119         move    #>1,x0
P:09BC 0AF080 rrrrrr  6 566834120         jmp     L930
                            34121 
                            34122 ; 4977 |        else if(sw_stereocontrol.temp2_reg > 14000) { index = 2;}
                            34123 
P:09BE 45F400 0036B0  3 567134125 L918:   move    #14000,x1
P:09C0 20006D         2 567334126         cmp     x1,b
P:09C1 0AF0AF rrrrrr  6 567934127         jle     L919
P:09C3 44F400 000002  3 568234128         move    #>2,x0
P:09C5 0AF080 rrrrrr  6 568834129         jmp     L930
                            34130 
                            34131 ; 4978 |        else if(sw_stereocontrol.temp2_reg > 12000) {index = 3;}
                            34132 
P:09C7 46F400 002EE0  3 569134134 L919:   move    #12000,y0
P:09C9 20005D         2 569334135         cmp     y0,b
P:09CA 0AF0AF rrrrrr  6 569934136         jle     L920
P:09CC 44F400 000003  3 570234137         move    #>3,x0
P:09CE 0AF080 rrrrrr  6 570834138         jmp     L930
                            34139 
                            34140 ; 4979 |        else if(sw_stereocontrol.temp2_reg > 10000) { index = 4;}
                            34141 
P:09D0 47F400 002710  3 571134143 L920:   move    #10000,y1
P:09D2 20007D         2 571334144         cmp     y1,b
P:09D3 0AF0AF rrrrrr  6 571934145         jle     L921
P:09D5 44F400 000004  3 572234146         move    #>4,x0
P:09D7 0AF080 rrrrrr  6 572834147         jmp     L930
                            34148 
                            34149 ; 4980 |        else if(sw_stereocontrol.temp2_reg > 8000)   {index = 5;}
                            34150 
P:09D9 45F400 001F40  3 573134152 L921:   move    #8000,x1
P:09DB 20006D         2 573334153         cmp     x1,b
P:09DC 0AF0AF rrrrrr  6 573934154         jle     L922
P:09DE 44F400 000005  3 574234155         move    #>5,x0
P:09E0 0AF080 rrrrrr  6 574834156         jmp     L930
                            34157 
                            34158 ; 4981 |        else if(sw_stereocontrol.temp2_reg > 6000)   { index = 6;}
                            34159 
P:09E2 46F400 001770  3 575134161 L922:   move    #6000,y0
P:09E4 20005D         2 575334162         cmp     y0,b
P:09E5 0AF0AF rrrrrr  6 575934163         jle     L923
P:09E7 44F400 000006  3 576234164         move    #>6,x0
P:09E9 0AF080 rrrrrr  6 576834165         jmp     L930
                            34166 
                            34167 ; 4982 |        else                                                           {index = 7;}
                            34168 
                            34170 L923:
                            34171 
                            34172 ; 4983 |        sw_stereocontrol.sd_audio_B0M_i16 = const_sd_audio_data[index][0].sd_audio_M_i16;
                            34173 
P:09EB 44F400 000007  3 577134170         move    #>7,x0
                            34175 L930:
                            34184 
                            34185 ; 4984 |        sw_stereocontrol.sd_audio_B0B_i16 =  const_sd_audio_data[index][0].sd_audio_B_i16;
                            34186 
                            34192 
                            34193 ; 4985 |        sw_stereocontrol.sd_audio_B0S_u16 = const_sd_audio_data[index][0].sd_audio_S_u16;
                            34194 
                            34200 
                            34201 ; 4986 |
                            34202 ; 4987 |        sw_stereocontrol.sd_audio_B1M_i16 = const_sd_audio_data[index][1].sd_audio_M_i16;
                            34203 
                            34209 
                            34210 ; 4988 |        sw_stereocontrol.sd_audio_B1B_i16 =  const_sd_audio_data[index][1].sd_audio_B_i16;
                            34211 
                            34217 
                            34218 ; 4989 |        sw_stereocontrol.sd_audio_B1S_u16 = const_sd_audio_data[index][1].sd_audio_S_u16;
                            34219 
                            34225 
                            34226 ; 4990 |
                            34227 ; 4991 |        sw_stereocontrol.sd_audio_A1M_i16 = const_sd_audio_data[index][2].sd_audio_M_i16;
                            34228 
                            34234 
                            34235 ; 4992 |        sw_stereocontrol.sd_audio_A1B_i16 =  const_sd_audio_data[index][2].sd_audio_B_i16;
                            34236 
                            34242 
                            34243 ; 4993 |        sw_stereocontrol.sd_audio_A1S_u16 = const_sd_audio_data[index][2].sd_audio_S_u16;
                            34244 
                            34250 
                            34251 ; 4994 |
                            34252 ; 4995 |        sw_stereocontrol.sd_audio_A2M_i16 = const_sd_audio_data[index][3].sd_audio_M_i16;
                            34253 
                            34259 
                            34260 ; 4996 |        sw_stereocontrol.sd_audio_A2B_i16 =  const_sd_audio_data[index][3].sd_audio_B_i16;
                            34261 
                            34267 
                            34268 ; 4997 |        sw_stereocontrol.sd_audio_A2S_u16 = const_sd_audio_data[index][3].sd_audio_S_u16;
                            34269 
                            34275 
                            34276 ; 4998 |
                            34277 ; 4999 |        // The piece-wise linear eq's are based on a scaled version (32768/22050) of BW
                            34278 ; 5000 |        // These coef's are scaled for use in an IIR equation as follows:
                            34279 ; 5001 |        // y[n] = 2*(b0/2*x[n] + b1*x[n-1] + b0/2*x[n-2] + -a1*y[n-1] + -a2/2*y[n-2])
                            34280 ; 5002 |        temp = (((long)sw_stereocontrol.temp2_reg << 1)*(long)24348);      // Note 32768/22050 <-> 2*(16384/22050) <-> 2*((16384/22050)*32768) >> 15
                            34281 
                            34302 
                            34303 ; 5003 |                sw_stereocontrol.sd_audio_AdjBw_u16 = temp  >> 15 ;
                            34304 
P:09ED 47F400 00000C  3 577434175         move    #>12,y1
P:09EF 66F4C8 rrrrrr  3 577734176         mpy     x0,y1,b	                #Fconst_sd_audio_data,r6
P:09F1 27002A         2 577934177         asr     b	                #0,y1
P:09F2 213D00         2 578134178         move    b0,n5
P:09F3 23BE00         2 578334180         move    n5,n6
P:09F4 000000         2 578534180         nop             ; (inserted)
P:09F5 4EEE00         4 578934182         move    y:(r6+n6),y0
P:09F6 66F400 rrrrrr  3 579234188         move    #Fconst_sd_audio_data+1,r6
P:09F8 4E7000 rrrrrr  3 579534183         move    y0,y:Fsw_stereocontrol+31
P:09FA 4EEE00         4 579934190         move    y:(r6+n6),y0
P:09FB 66F400 rrrrrr  3 580234196         move    #Fconst_sd_audio_data+2,r6
P:09FD 4E7000 rrrrrr  3 580534191         move    y0,y:Fsw_stereocontrol+29
P:09FF 6EEE00         4 580934198         move    y:(r6+n6),r6
P:0A00 6E7000 rrrrrr  3 581234199         move    r6,y:Fsw_stereocontrol+30
P:0A02 66F400 rrrrrr  3 581534205         move    #Fconst_sd_audio_data+3,r6
P:0A04 000000         2 581734205         nop             ; (inserted)
P:0A05 4EEE00         4 582134207         move    y:(r6+n6),y0
P:0A06 66F400 rrrrrr  3 582434213         move    #Fconst_sd_audio_data+4,r6
P:0A08 4E7000 rrrrrr  3 582734208         move    y0,y:Fsw_stereocontrol+34
P:0A0A 4EEE00         4 583134215         move    y:(r6+n6),y0
P:0A0B 66F400 rrrrrr  3 583434221         move    #Fconst_sd_audio_data+5,r6
P:0A0D 4E7000 rrrrrr  3 583734216         move    y0,y:Fsw_stereocontrol+32
P:0A0F 6EEE00         4 584134223         move    y:(r6+n6),r6
P:0A10 6E7000 rrrrrr  3 584434224         move    r6,y:Fsw_stereocontrol+33
P:0A12 66F400 rrrrrr  3 584734230         move    #Fconst_sd_audio_data+6,r6
P:0A14 000000         2 584934230         nop             ; (inserted)
P:0A15 4EEE00         4 585334232         move    y:(r6+n6),y0
P:0A16 66F400 rrrrrr  3 585634238         move    #Fconst_sd_audio_data+7,r6
P:0A18 4E7000 rrrrrr  3 585934233         move    y0,y:Fsw_stereocontrol+37
P:0A1A 4EEE00         4 586334240         move    y:(r6+n6),y0
P:0A1B 66F400 rrrrrr  3 586634246         move    #Fconst_sd_audio_data+8,r6
P:0A1D 4E7000 rrrrrr  3 586934241         move    y0,y:Fsw_stereocontrol+35
P:0A1F 6EEE00         4 587334248         move    y:(r6+n6),r6
P:0A20 6E7000 rrrrrr  3 587634249         move    r6,y:Fsw_stereocontrol+36
P:0A22 66F400 rrrrrr  3 587934255         move    #Fconst_sd_audio_data+9,r6
P:0A24 000000         2 588134255         nop             ; (inserted)
P:0A25 4EEE00         4 588534257         move    y:(r6+n6),y0
P:0A26 66F400 rrrrrr  3 588834263         move    #Fconst_sd_audio_data+10,r6
P:0A28 4E7000 rrrrrr  3 589134258         move    y0,y:Fsw_stereocontrol+40
P:0A2A 4EEE00         4 589534265         move    y:(r6+n6),y0
P:0A2B 66F400 rrrrrr  3 589834271         move    #Fconst_sd_audio_data+11,r6
P:0A2D 4E7000 rrrrrr  3 590134266         move    y0,y:Fsw_stereocontrol+38
P:0A2F 6EEE00         4 590534273         move    y:(r6+n6),r6
P:0A30 46F400 005F1C  3 590834288         move    #24348,y0
P:0A32 6E7000 rrrrrr  3 591134274         move    r6,y:Fsw_stereocontrol+39
P:0A34 5FF000 rrrrrr  3 591434283         move    y:Fsw_stereocontrol+45,b
P:0A36 21A900         2 591634284         move    b1,b0
P:0A37 216D00         2 591834285         move    b2,b1
P:0A38 20003A         2 592034286         asl     b
P:0A39 212400         2 592234289         move    b0,x0
P:0A3A 21A500         2 592434290         move    b1,x1
P:0A3B 0040F8         2 592634291         ori     #$40,mr
P:0A3C 000000         2 592834291         nop             ; (inserted)
P:0A3D 2000D0         2 593034293         mpy     y0,x0,a
P:0A3E 2109E2         2 593234294         mac     x1,y0,a a0,b0
P:0A3F 2000C2         2 593434295         mac     x0,y1,a
P:0A40 210DF2         2 593634296         mac     y1,x1,a a0,b1
P:0A41 00BFB8         2 593834297         andi    #$BF,mr
P:0A42 210B00         2 594034298         move    a0,b2
P:0A43 20002A         2 594234299         asr     b
P:0A44 2B0000         2 594434306         move    #0,b2
P:0A45 060FA0         4 594834307         rep     #15     
P:0A46 20002A         2 595034309         asr     b
                            34311 L936:
                            34316 
                            34317 ; 5004 |                temp =  (long)sw_stereocontrol.sd_audio_B0M_i16*(long)sw_stereocontrol.sd_audio_AdjBw_u16;
                            34318 
                            34337 
                            34338 ; 5005 |        sw_stereocontrol.temp3_reg = temp >> 15;                         // temp = mx
                            34339 
P:0A47 270000         2 595234324         move    #0,y1
P:0A48 212400         2 595434314         move    b0,x0
P:0A49 4C7000 rrrrrr  3 595734315         move    x0,y:Fsw_stereocontrol+41
P:0A4B 208600         2 595934323         move    x0,y0
P:0A4C 5FF000 rrrrrr  3 596234320         move    y:Fsw_stereocontrol+31,b
P:0A4E 21A900         2 596434321         move    b1,b0
P:0A4F 216D00         2 596634322         move    b2,b1
P:0A50 212400         2 596834325         move    b0,x0
P:0A51 21A500         2 597034326         move    b1,x1
P:0A52 0040F8         2 597234327         ori     #$40,mr
P:0A53 000000         2 597434327         nop             ; (inserted)
P:0A54 2000D0         2 597634329         mpy     y0,x0,a
P:0A55 2109E2         2 597834330         mac     x1,y0,a a0,b0
P:0A56 2000C2         2 598034331         mac     x0,y1,a
P:0A57 210DF2         2 598234332         mac     y1,x1,a a0,b1
P:0A58 00BFB8         2 598434333         andi    #$BF,mr
P:0A59 210B00         2 598634334         move    a0,b2
P:0A5A 20002A         2 598834335         asr     b
P:0A5B 2B0000         2 599034341         move    #0,b2
P:0A5C 060FA0         4 599434342         rep     #15     
P:0A5D 20002A         2 599634344         asr     b
                            34346 L937:
                            34350 
                            34351 ; 5006 |                temp =  (long)sw_stereocontrol.sd_audio_B0S_u16*((long)sw_stereocontrol.temp3_reg +(long) sw_stereocontrol.sd_audio_B0B_i16);
                            34352 
                            34376 
                            34377 ; 5007 |        sw_stereocontrol.sd_audio_LprB0_i16 = temp >> 1;                                 // y = S*(mx + b)
                            34378 
                            34385 
                            34386 ; 5008 |        g_sd_audio_LprB0_i16 = (temp >> 1) * gCOEF_SCALE;                // y = S*(mx + b)
                            34387 
                            34413 
                            34414 ; 5009 |        temp = ((long)sw_stereocontrol.sd_audio_B1M_i16*(long)sw_stereocontrol.sd_audio_AdjBw_u16);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 126

M:ADDR CODE           CYCLES LINE SOURCELINE
                            34415 
                            34433 
                            34434 ; 5010 |        sw_stereocontrol.temp3_reg = temp >> 15;                         // temp = mx
                            34435 
P:0A5E 77F400 FFFFFB  3 599934394         move    #-5,n7
P:0A60 250000         2 600134355         move    #0,x1
P:0A61 597000 rrrrrr  3 600434349         move    b0,y:Fsw_stereocontrol+46
P:0A63 212E00         2 600634356         move    b0,a
P:0A64 205F00         2 600834395         move    (r7)+
P:0A65 218800         2 601034357         move    a1,a0
P:0A66 5FF000 rrrrrr  3 601334359         move    y:Fsw_stereocontrol+29,b
P:0A68 214C00         2 601534358         move    a2,a1
P:0A69 21A900         2 601734360         move    b1,b0
P:0A6A 216D00         2 601934361         move    b2,b1
P:0A6B 4CF018 rrrrrr  3 602234362         add     a,b	                y:Fsw_stereocontrol+30,x0
P:0A6D 212600         2 602434363         move    b0,y0
P:0A6E 21A700         2 602634364         move    b1,y1
P:0A6F 0040F8         2 602834365         ori     #$40,mr
P:0A70 000000         2 603034365         nop             ; (inserted)
P:0A71 2000D0         2 603234367         mpy     y0,x0,a
P:0A72 2109E2         2 603434368         mac     x1,y0,a a0,b0
P:0A73 2000C2         2 603634369         mac     x0,y1,a
P:0A74 210DF2         2 603834370         mac     y1,x1,a a0,b1
P:0A75 00BFB8         2 604034371         andi    #$BF,mr
P:0A76 210B00         2 604234372         move    a0,b2
P:0A77 27002A         2 604434373         asr     b	                #0,y1
P:0A78 200001         2 604634374         tfr     b,a
P:0A79 2A0000         2 604834380         move    #0,a2
P:0A7A 200022         2 605034381         asr     a
P:0A7B 218509         2 605234383         tfr     a,b	                a1,x1
P:0A7C 597000 rrrrrr  3 605534384         move    b0,y:Fsw_stereocontrol+11
P:0A7E 4CF000 rrrrrr  3 605834389         move    y:FgCOEF_SCALE,x0
P:0A80 4F6F00         4 606234397         move    y1,y:(r7+n7)
P:0A81 208600         2 606434390         move    x0,y0
P:0A82 205700         2 606634398         move    (r7)-
P:0A83 210400         2 606834392         move    a0,x0
P:0A84 4E6F00         4 607234400         move    y0,y:(r7+n7)
P:0A85 0040F8         2 607434401         ori     #$40,mr
P:0A86 77F400 FFFFFD  3 607734410         move    #-3,n7
P:0A88 2000D0         2 607934403         mpy     y0,x0,a
P:0A89 2109E2         2 608134404         mac     x1,y0,a a0,b0
P:0A8A 2000C2         2 608334405         mac     x0,y1,a
P:0A8B 00BFB8         2 608534406         andi    #$BF,mr
P:0A8C 210D00         2 608734407         move    a0,b1
P:0A8D 218B00         2 608934408         move    a1,b2
P:0A8E 20002A         2 609134409         asr     b
P:0A8F 596F00         4 609534412         move    b0,y:(r7+n7)
P:0A90 5FF000 rrrrrr  3 609834417         move    y:Fsw_stereocontrol+34,b
P:0A92 4EF000 rrrrrr  3 610134420         move    y:Fsw_stereocontrol+41,y0
P:0A94 21A900         2 610334418         move    b1,b0
P:0A95 216D00         2 610534419         move    b2,b1
P:0A96 212400         2 610734421         move    b0,x0
P:0A97 21A500         2 610934422         move    b1,x1
P:0A98 0040F8         2 611134423         ori     #$40,mr
P:0A99 000000         2 611334423         nop             ; (inserted)
P:0A9A 2000D0         2 611534425         mpy     y0,x0,a
P:0A9B 2109E2         2 611734426         mac     x1,y0,a a0,b0
P:0A9C 2000C2         2 611934427         mac     x0,y1,a
P:0A9D 210DF2         2 612134428         mac     y1,x1,a a0,b1
P:0A9E 00BFB8         2 612334429         andi    #$BF,mr
P:0A9F 210B00         2 612534430         move    a0,b2
P:0AA0 20002A         2 612734431         asr     b
P:0AA1 2B0000         2 612934437         move    #0,b2
P:0AA2 060FA0         4 613334438         rep     #15     
P:0AA3 20002A         2 613534440         asr     b
                            34442 L938:
                            34446 
                            34447 ; 5011 |        temp = (long)sw_stereocontrol.sd_audio_B1S_u16*((long)sw_stereocontrol.temp3_reg +(long) sw_stereocontrol.sd_audio_B1B_i16);
                            34448 
                            34473 
                            34474 ; 5012 |        sw_stereocontrol.sd_audio_LprB1_i16 =temp ;                                      // y = S*(mx + b)
                            34475 
                            34480 
                            34481 ; 5013 |        g_sd_audio_LprB1_i16 =temp * gCOEF_SCALE ;                               // y = S*(mx + b)
                            34482 
                            34504 
                            34505 ; 5014 |        temp = ((long)sw_stereocontrol.sd_audio_A1M_i16*(long)sw_stereocontrol.sd_audio_AdjBw_u16);
                            34506 
                            34526 
                            34527 ; 5015 |        sw_stereocontrol.temp3_reg = temp >> 15;                         // temp = mx
                            34528 
P:0AA4 77F400 FFFFFB  3 613834484         move    #-5,n7
P:0AA6 250000         2 614034451         move    #0,x1
P:0AA7 597000 rrrrrr  3 614334445         move    b0,y:Fsw_stereocontrol+46
P:0AA9 212E00         2 614534452         move    b0,a
P:0AAA 205F00         2 614734485         move    (r7)+
P:0AAB 218800         2 614934453         move    a1,a0
P:0AAC 5FF000 rrrrrr  3 615234455         move    y:Fsw_stereocontrol+32,b
P:0AAE 214C00         2 615434454         move    a2,a1
P:0AAF 21A900         2 615634456         move    b1,b0
P:0AB0 216D00         2 615834457         move    b2,b1
P:0AB1 4CF018 rrrrrr  3 616134458         add     a,b	                y:Fsw_stereocontrol+33,x0
P:0AB3 212600         2 616334459         move    b0,y0
P:0AB4 21A700         2 616534460         move    b1,y1
P:0AB5 0040F8         2 616734461         ori     #$40,mr
P:0AB6 000000         2 616934461         nop             ; (inserted)
P:0AB7 2000D0         2 617134463         mpy     y0,x0,a
P:0AB8 2109E2         2 617334464         mac     x1,y0,a a0,b0
P:0AB9 2000C2         2 617534465         mac     x0,y1,a
P:0ABA 210DF2         2 617734466         mac     y1,x1,a a0,b1
P:0ABB 00BFB8         2 617934467         andi    #$BF,mr
P:0ABC 210B00         2 618134468         move    a0,b2
P:0ABD 20002A         2 618334469         asr     b
P:0ABE 212400         2 618534470         move    b0,x0
P:0ABF 21A500         2 618734471         move    b1,x1
P:0AC0 20AF00         2 618934477         move    x1,b
P:0AC1 208900         2 619134478         move    x0,b0
P:0AC2 597000 rrrrrr  3 619434479         move    b0,y:Fsw_stereocontrol+12
P:0AC4 4FEF00         4 619834487         move    y:(r7+n7),y1
P:0AC5 205700         2 620034488         move    (r7)-
P:0AC6 4EEF00         4 620434490         move    y:(r7+n7),y0
P:0AC7 0040F8         2 620634491         ori     #$40,mr
P:0AC8 77F400 FFFFFE  3 620934501         move    #-2,n7
P:0ACA 2000D8         2 621134493         mpy     y0,x0,b
P:0ACB 2128EA         2 621334494         mac     x1,y0,b b0,a0
P:0ACC 2000CA         2 621534495         mac     x0,y1,b
P:0ACD 00BFB8         2 621734496         andi    #$BF,mr
P:0ACE 212C00         2 621934497         move    b0,a1
P:0ACF 21AA00         2 622134498         move    b1,a2
P:0AD0 270022         2 622334499         asr     a	                #0,y1
P:0AD1 210E00         2 622534500         move    a0,a
P:0AD2 5C6F00         4 622934503         move    a1,y:(r7+n7)
P:0AD3 5FF000 rrrrrr  3 623234508         move    y:Fsw_stereocontrol+37,b
P:0AD5 4EF000 rrrrrr  3 623534511         move    y:Fsw_stereocontrol+41,y0
P:0AD7 21A900         2 623734509         move    b1,b0
P:0AD8 216D00         2 623934510         move    b2,b1
P:0AD9 212400         2 624134513         move    b0,x0
P:0ADA 21A500         2 624334514         move    b1,x1
P:0ADB 0040F8         2 624534515         ori     #$40,mr
P:0ADC 000000         2 624734515         nop             ; (inserted)
P:0ADD 2000D0         2 624934517         mpy     y0,x0,a
P:0ADE 2109E2         2 625134518         mac     x1,y0,a a0,b0
P:0ADF 2000C2         2 625334519         mac     x0,y1,a
P:0AE0 210DF2         2 625534520         mac     y1,x1,a a0,b1
P:0AE1 00BFB8         2 625734521         andi    #$BF,mr
P:0AE2 210B00         2 625934522         move    a0,b2
P:0AE3 20002A         2 626134523         asr     b
P:0AE4 2B0000         2 626334530         move    #0,b2
P:0AE5 060FA0         4 626734531         rep     #15     
P:0AE6 20002A         2 626934533         asr     b
                            34535 L939:
                            34539 
                            34540 ; 5016 |        temp = (long)sw_stereocontrol.sd_audio_A1S_u16*((long)sw_stereocontrol.temp3_reg + (long)sw_stereocontrol.sd_audio_A1B_i16);
                            34541 
                            34564 
                            34565 ; 5017 |        sw_stereocontrol.sd_audio_LprA1_i16 = -(temp);                                   // y = S*(mx + b) -- negative coef so IIR is all MACs
                            34566 
                            34573 
                            34574 ; 5018 |        g_sd_audio_LprA1_i16 = (-(temp)) * gCOEF_SCALE;                          // y = S*(mx + b) -- negative coef so IIR is all MACs
                            34575 
                            34596 
                            34597 ; 5019 |        temp = ((long)sw_stereocontrol.sd_audio_A2M_i16*(long)sw_stereocontrol.sd_audio_AdjBw_u16);
                            34598 
                            34617 
                            34618 ; 5020 |        sw_stereocontrol.temp3_reg = temp >> 15;                         // temp = mx
                            34619 
P:0AE7 77F400 FFFFFB  3 627234577         move    #-5,n7
P:0AE9 250000         2 627434544         move    #0,x1
P:0AEA 597000 rrrrrr  3 627734538         move    b0,y:Fsw_stereocontrol+46
P:0AEC 212E00         2 627934545         move    b0,a
P:0AED 205F00         2 628134578         move    (r7)+
P:0AEE 218800         2 628334546         move    a1,a0
P:0AEF 5FF000 rrrrrr  3 628634548         move    y:Fsw_stereocontrol+35,b
P:0AF1 214C00         2 628834547         move    a2,a1
P:0AF2 21A900         2 629034549         move    b1,b0
P:0AF3 216D00         2 629234550         move    b2,b1
P:0AF4 4CF018 rrrrrr  3 629534551         add     a,b	                y:Fsw_stereocontrol+36,x0
P:0AF6 212600         2 629734552         move    b0,y0
P:0AF7 21A700         2 629934553         move    b1,y1
P:0AF8 0040F8         2 630134554         ori     #$40,mr
P:0AF9 000000         2 630334554         nop             ; (inserted)
P:0AFA 2000D0         2 630534556         mpy     y0,x0,a
P:0AFB 2109E2         2 630734557         mac     x1,y0,a a0,b0
P:0AFC 2000C2         2 630934558         mac     x0,y1,a
P:0AFD 210DF2         2 631134559         mac     y1,x1,a a0,b1
P:0AFE 00BFB8         2 631334560         andi    #$BF,mr
P:0AFF 210B00         2 631534561         move    a0,b2
P:0B00 20002A         2 631734562         asr     b
P:0B01 20003E         2 631934568         neg     b
P:0B02 597000 rrrrrr  3 632234572         move    b0,y:Fsw_stereocontrol+13
P:0B04 212400         2 632434570         move    b0,x0
P:0B05 21A500         2 632634571         move    b1,x1
P:0B06 4FEF00         4 633034580         move    y:(r7+n7),y1
P:0B07 205700         2 633234581         move    (r7)-
P:0B08 4EEF00         4 633634583         move    y:(r7+n7),y0
P:0B09 0040F8         2 633834584         ori     #$40,mr
P:0B0A 045FA0         2 634034593         movec   m0,n7
P:0B0B 2000D0         2 634234586         mpy     y0,x0,a
P:0B0C 2109E2         2 634434587         mac     x1,y0,a a0,b0
P:0B0D 2000C2         2 634634588         mac     x0,y1,a
P:0B0E 00BFB8         2 634834589         andi    #$BF,mr
P:0B0F 210D00         2 635034590         move    a0,b1
P:0B10 218B00         2 635234591         move    a1,b2
P:0B11 27002A         2 635434592         asr     b	                #0,y1
P:0B12 596F00         4 635834595         move    b0,y:(r7+n7)
P:0B13 5FF000 rrrrrr  3 636134600         move    y:Fsw_stereocontrol+40,b
P:0B15 4EF000 rrrrrr  3 636434603         move    y:Fsw_stereocontrol+41,y0
P:0B17 21A900         2 636634601         move    b1,b0
P:0B18 216D00         2 636834602         move    b2,b1
P:0B19 212400         2 637034605         move    b0,x0
P:0B1A 21A500         2 637234606         move    b1,x1
P:0B1B 0040F8         2 637434607         ori     #$40,mr
P:0B1C 000000         2 637634607         nop             ; (inserted)
P:0B1D 2000D0         2 637834609         mpy     y0,x0,a
P:0B1E 2109E2         2 638034610         mac     x1,y0,a a0,b0
P:0B1F 2000C2         2 638234611         mac     x0,y1,a
P:0B20 210DF2         2 638434612         mac     y1,x1,a a0,b1
P:0B21 00BFB8         2 638634613         andi    #$BF,mr
P:0B22 210B00         2 638834614         move    a0,b2
P:0B23 20002A         2 639034615         asr     b
P:0B24 2B0000         2 639234621         move    #0,b2
P:0B25 060FA0         4 639634622         rep     #15     
P:0B26 20002A         2 639834624         asr     b
                            34626 L940:
                            34630 
                            34631 ; 5021 |        temp = (long)sw_stereocontrol.sd_audio_A2S_u16*((long)sw_stereocontrol.temp3_reg + (long)sw_stereocontrol.sd_audio_A2B_i16);
                            34632 
                            34655 
                            34656 ; 5022 |        sw_stereocontrol.sd_audio_LprA2_i16 = -(temp >> 1);                      // y = S*(mx + b) -- negative coef so IIR is all MACs
                            34657 
                            34666 
                            34667 ; 5023 |        g_sd_audio_LprA2_i16 = (-(temp >> 1 )) * gCOEF_SCALE;            // y = S*(mx + b) -- negative coef so IIR is all MACs
                            34668 
                            34685 
                            34686 ; 5024 |        // *** end LPR channel -- LPR coefficients now ready for Stereo Path next time
                            34687 ; 5025 |
                            34688 ; 5026 |    }  // end if (sd_audio_pCoef_BypassBwCtl == 0)
                            34689 
P:0B27 250000         2 640034635         move    #0,x1
P:0B28 597000 rrrrrr  3 640334629         move    b0,y:Fsw_stereocontrol+46
P:0B2A 212E00         2 640534636         move    b0,a
P:0B2B 205F00         2 640734671         move    (r7)+
P:0B2C 218800         2 640934637         move    a1,a0
P:0B2D 5FF000 rrrrrr  3 641234639         move    y:Fsw_stereocontrol+38,b
P:0B2F 214C00         2 641434638         move    a2,a1
P:0B30 21A900         2 641634640         move    b1,b0
P:0B31 216D00         2 641834641         move    b2,b1
P:0B32 4CF018 rrrrrr  3 642134642         add     a,b	                y:Fsw_stereocontrol+39,x0
P:0B34 212600         2 642334643         move    b0,y0
P:0B35 21A700         2 642534644         move    b1,y1
P:0B36 0040F8         2 642734645         ori     #$40,mr
P:0B37 000000         2 642934645         nop             ; (inserted)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 127

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0B38 77F4D0 FFFFFB  3 643234647         mpy     y0,x0,a	                #-5,n7
P:0B3A 2109E2         2 643434648         mac     x1,y0,a a0,b0
P:0B3B 2000C2         2 643634649         mac     x0,y1,a
P:0B3C 210DF2         2 643834650         mac     y1,x1,a a0,b1
P:0B3D 00BFB8         2 644034651         andi    #$BF,mr
P:0B3E 210B00         2 644234652         move    a0,b2
P:0B3F 20002A         2 644434653         asr     b
P:0B40 2B0000         2 644634659         move    #0,b2
P:0B41 20002A         2 644834660         asr     b
P:0B42 20003E         2 645034662         neg     b
P:0B43 597000 rrrrrr  3 645334665         move    b0,y:Fsw_stereocontrol+14
P:0B45 212400         2 645534663         move    b0,x0
P:0B46 21A500         2 645734664         move    b1,x1
P:0B47 4FEF00         4 646134673         move    y:(r7+n7),y1
P:0B48 205700         2 646334674         move    (r7)-
P:0B49 4EEF00         4 646734676         move    y:(r7+n7),y0
P:0B4A 0040F8         2 646934677         ori     #$40,mr
P:0B4B 000000         2 647134677         nop             ; (inserted)
P:0B4C 2000D0         2 647334679         mpy     y0,x0,a
P:0B4D 2109E2         2 647534680         mac     x1,y0,a a0,b0
P:0B4E 2000C2         2 647734681         mac     x0,y1,a
P:0B4F 00BFB8         2 647934682         andi    #$BF,mr
P:0B50 210D00         2 648134683         move    a0,b1
P:0B51 218B00         2 648334684         move    a1,b2
P:0B52 0AF080 rrrrrr  6 648934691         jmp     L932
                            34692 
                            34693 ; 5027 |    else
                            34694 ; 5028 |    {
                            34695 ; 5029 |        sw_stereocontrol.sd_audio_LprB0_i16 = DEFAULT_B0;   // -3dB cutoff = 17 kHz
                            34696 
                            34698 L931:
                            34700 
                            34701 ; 5030 |        sw_stereocontrol.sd_audio_LprB1_i16 = DEFAULT_B1;   // -3dB cutoff = 17 kHz
                            34702 
                            34706 
                            34707 ; 5031 |        sw_stereocontrol.sd_audio_LprA1_i16 = DEFAULT_A1;   // -3dB cutoff = 17 kHz
                            34708 
                            34712 
                            34713 ; 5032 |        sw_stereocontrol.sd_audio_LprA2_i16 = DEFAULT_A2;   // -3dB cutoff = 17 kHz
                            34714 
                            34718 
                            34719 ; 5033 |
                            34720 ; 5034 |        g_sd_audio_LprB0_i16 = DEFAULT_B0 * gCOEF_SCALE;   // -3dB cutoff = 17 kHz
                            34721 
                            34729 
                            34730 ; 5035 |        g_sd_audio_LprB1_i16 = DEFAULT_B1 * gCOEF_SCALE;   // -3dB cutoff = 17 kHz
                            34731 
                            34738 
                            34739 ; 5036 |        g_sd_audio_LprA1_i16 = DEFAULT_A1 * gCOEF_SCALE;   // -3dB cutoff = 17 kHz
                            34740 
                            34748 
                            34749 ; 5037 |        g_sd_audio_LprA2_i16 = DEFAULT_A2 * gCOEF_SCALE;   // -3dB cutoff = 17 kHz
                            34750 
                            34754 
                            34755 ; 5038 |    }
                            34756 
P:0B54 51F400 FFC131  3 649234710         move    #-16079,b0
P:0B56 55F400 FFEA45  3 649534716         move    #-5563,b1
P:0B58 47F400 0024BB  3 649834698         move    #9403,y1
P:0B5A 45F400 00497C  3 650134704         move    #18812,x1
P:0B5C 4F7000 rrrrrr  3 650434699         move    y1,y:Fsw_stereocontrol+11
P:0B5E 4D7000 rrrrrr  3 650734705         move    x1,y:Fsw_stereocontrol+12
P:0B60 597000 rrrrrr  3 651034711         move    b0,y:Fsw_stereocontrol+13
P:0B62 5D7000 rrrrrr  3 651334717         move    b1,y:Fsw_stereocontrol+14
P:0B64 4EF000 rrrrrr  3 651634723         move    y:FgCOEF_SCALE,y0
P:0B66 77F4B0 FFFFFD  3 651934724         mpy     y0,y1,a	                #-3,n7
P:0B68 212722         2 652134725         asr     a	                b0,y1
P:0B69 586FE0         4 652534733         mpy     y0,x1,a	                a0,y:(r7+n7)
P:0B6A 77F422 FFFFFE  3 652834734         asr     a	                #-2,n7
P:0B6C 2000B8         2 653034743         mpy     y0,y1,b
P:0B6D 586F2A         4 653434744         asr     b	                a0,y:(r7+n7)
P:0B6E 045FA0         2 653634745         movec   m0,n7
P:0B6F 21A700         2 653834752         move    b1,y1
P:0B70 596FB8         4 654234753         mpy     y0,y1,b	                b0,y:(r7+n7)
                            34758 L932:
                            34762 
                            34763 ; 5039 |
                            34764 ; 5040 |
                            34765 ; 5041 |     // Stereo Matrix part previously it was in stereopath.c file
                            34766 ; 5042 |     // All values sacled by 0.5 to pre-adjust for factor of 2 in "matrix" computations
                            34767 ; 5043 |     //gLPR_Mult_fract  = 1.0;
                            34768 ; 5044 |     //gLMR_Mult_fract  = 1.0;
                            34769 ; 5045 |
                            34770 ; 5046 |    gLPR_Mult_fract  = _int2fract((sw_stereocontrol.sd_audio_LprGa_u16 * gCOEF_SCALE));   // SoftMute applied to LPR
                            34771 
                            34778 
                            34779 ; 5047 |    gLMR_Mult_fract  = _int2fract((sw_stereocontrol.sd_audio_LmrGa_u16 * gCOEF_SCALE));   // SoftMute applied to LMR
                            34780 
                            34787 
                            34788 ; 5048 |
                            34789 ; 5049 |        if (g_sd_audio_pCoefForcedMono_u1)
                            34790 
P:0B71 4EF02A rrrrrr  3 654534760         asr     b	                y:Fsw_stereocontrol+9,y0
P:0B73 4CF000 rrrrrr  3 654834774         move    y:FgCOEF_SCALE,x0
P:0B75 4FF0D0 rrrrrr  3 655134775         mpy     y0,x0,a	                y:FgCOEF_SCALE,y1
P:0B77 4DF022 rrrrrr  3 655434776         asr     a	                y:Fsw_stereocontrol+10,x1
P:0B79 2106F0         2 655634784         mpy     x1,y1,a	                a0,y0
P:0B7A 212F22         2 655834785         asr     a	                b0,b
P:0B7B 210700         2 656034786         move    a0,y1
P:0B7C 5EF000 rrrrrr  3 656334792         move    y:Fg_sd_audio_pCoefForcedMono_u1,a
P:0B7E 200003         2 656534793         tst     a
P:0B7F 0AF0AA rrrrrr  6 657134794         jeq     L933
                            34795 
                            34796 ; 5050 |    {
                            34797 ; 5051 |        gLMR_Mult_fract = 0.0;                      // Forced Mono
                            34798 
                            34801 
                            34802 ; 5052 |    }
                            34803 ; 5053 |    if (g_sd_audio_pCoefBypassBlend_u1)
                            34804 
P:0B81 270000         2 657334800         move    #0,y1
P:0B82 5EF000 rrrrrr  3 657634806 L933:   move    y:Fg_sd_audio_pCoefBypassBlend_u1,a
P:0B84 200003         2 657834807         tst     a
P:0B85 0AF0AA rrrrrr  6 658434808         jeq     L934
                            34809 
                            34810 ; 5054 |    {
                            34811 ; 5055 |        gLMR_Mult_fract =  0.99;                    // No Blend
                            34812 
                            34815 
                            34816 ; 5056 |    }
                            34817 ; 5057 |
                            34818 ; 5058 |    if (g_sd_audio_pCoefBypassSoftmute_u1)
                            34819 
P:0B87 47F400 7EB852  3 658734814         move    #$7EB852,y1
P:0B89 5EF000 rrrrrr  3 659034821 L934:   move    y:Fg_sd_audio_pCoefBypassSoftmute_u1,a
P:0B8B 200003         2 659234822         tst     a
P:0B8C 0AF0AA rrrrrr  6 659834823         jeq     L935
                            34824 
                            34825 ; 5059 |    {
                            34826 ; 5060 |        gLPR_Mult_fract =  0.99;
                            34827 
                            34830 
                            34831 ; 5061 |    }
                            34832 ; 5062 |    //*****************************************************************
                            34833 ; 5063 |   //  * Stmp00011112 We like to increase the gain by 1.6 time which can be achieved by
                            34834 ; 5064 |  //   * 0.8 * 2
                            34835 ; 5065 |  //   * The 2-times change is in sw_stereopath_xcall_asm.asm
                            34836 ; 5066 |   //  *****************************************************************
                            34837 ; 5067 |    gLMR_Mult_fract *=  0.8;
                            34838 
P:0B8E 46F400 7EB852  3 660134829         move    #$7EB852,y0
                            34840 L935:
                            34843 
                            34844 ; 5068 |    gLPR_Mult_fract *=  0.8;
                            34845 
                            34848 
                            34849 ; 5069 |   //****************************************************************
                            34850 ; 5070 |    IIRFiltCoeffSemaphore = 1;  // Filter coefficients are now valid!
                            34851 
                            34870 
                            34871 ; 5071 |}
                            34872 
P:0B90 44F400 666666  3 660434840         move    #$666666,x0
P:0B92 77F4C1 FFFFFD  3 660734841         mpyr    y1,x0,a	                #-3,n7
P:0B94 15F4D1 000001  3 661034847         mpyr    y0,x0,a	                #>1,y1	                a,x1
P:0B96 4F7000 rrrrrr  3 661334854         move    y1,y:FIIRFiltCoeffSemaphore
P:0B98 4EEF00         4 661734857         move    y:(r7+n7),y0
P:0B99 77F400 FFFFFE  3 662034859         move    #-2,n7
P:0B9B 4E7000 rrrrrr  3 662334858         move    y0,y:Fg_sd_audio_LprB0_i16
P:0B9D 4CEF00         4 662734861         move    y:(r7+n7),x0
P:0B9E 045FA0         2 662934863         movec   m0,n7
P:0B9F 4C7000 rrrrrr  3 663234862         move    x0,y:Fg_sd_audio_LprB1_i16
P:0BA1 4FEF00         4 663634865         move    y:(r7+n7),y1
P:0BA2 3F0500         2 663834874         move    #5,n7
P:0BA3 4F7000 rrrrrr  3 664134866         move    y1,y:Fg_sd_audio_LprA1_i16
P:0BA5 204700         2 664334876         move    (r7)-n7
P:0BA6 5D7000 rrrrrr  3 664634867         move    b1,y:Fg_sd_audio_LprA2_i16
P:0BA8 5E7000 rrrrrr  3 664934868         move    a,y:FgLPR_Mult_fract
P:0BAA 4D7000 rrrrrr  3 665234869         move    x1,y:FgLMR_Mult_fract
P:0BAC 00000C         4 665634878         rts
                            34880 
                            34881 ; 5072 |
                            34882 ; 5073 |#endif
                            34883 ; 5074 |#pragma asm
P:0000                      34884      org p,".pSTFM1000_NO_OVERLAY_P":
                            34885 ; 5076 |#pragma endasm
                            34886 ; 5077 |
                            34887 ; 5078 |//Move from funclet
                            34888 ; 5079 |_reentrant INT STFM1000SetLnaBias(INT iRssiLog)
                            34889 ; 5080 |{
                            34890 
                            34895 FSTFM1000SetLnaBias:
                            34916 
                            34917 ; 5081 |
                            34918 ; 5082 |    DWORD dwShadowAgcStatReg;
                            34919 ; 5083 |    DWORD dwBias1Temp;
                            34920 ; 5084 |    DWORD dwAgcOut;
                            34921 ; 5085 |    DWORD dwLnaRms,dwLnaAmp1ImproveDist;
                            34922 ; 5086 |    INT RetCode = SUCCESS;
                            34923 ; 5087 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            34924 
                            34936 
                            34937 ; 5088 |
                            34938 ; 5089 |
                            34939 ; 5090 |     /* read AGC_STAT register */
                            34940 ; 5091 |    RetCode = STFM1000ReadRegisterToShadow(AGC_STAT_REG_ADDR,
                            34941 ; 5092 |                                            &dwShadowAgcStatReg);
                            34942 
P:0000 055F7C         2    234896         movec   ssh,y:(r7)+
P:0001 3F0C00         2    434899         move    #12,n7
P:0002 63F400 rrrrrr  3    734931         move    #FStfmTuneData,r3
P:0004 204F00         2    934901         move    (r7)+n7
P:0005 77F400 FFFFFA  3   1234926         move    #-6,n7
P:0007 000000         2   1434926         nop             ; (inserted)
P:0008 5C6F00         4   1834928         move    a1,y:(r7+n7)
P:0009 77F400 FFFFFB  3   2134932         move    #-5,n7
P:000B 56F400 000064  3   2434948         move    #>100,a
P:000D 6B6F00         4   2834934         move    r3,y:(r7+n7)
P:000E 77F400 FFFFF8  3   3134944         move    #-8,n7
P:0010 000000         2   3334944         nop             ; (inserted)
P:0011 044F1C         4   3734946         lua     (r7)+n7,n4
P:0012 239000         2   3934947         move    n4,r0
P:0013 0BF080 rrrrrr  6   4534949         jsr     FSTFM1000ReadRegisterToShadow
                            34952 
                            34953 ; 5093 |    if (SUCCESS != RetCode)
                            34954 
P:0015 21CF03         2   4734956         tst     a	                a,b
P:0016 0AF0A2 rrrrrr  6   5334957         jne     L1023
                            34958 
                            34959 ; 5094 |    {
                            34960 ; 5095 |        return RetCode;
                            34961 ; 5096 |    }
                            34962 ; 5097 |    /* extract AgcOut */
                            34963 ; 5098 |    STFM1000ReadShadowRegister(AGCOUT_STAT_REG_MASK, &dwShadowAgcStatReg,
                            34964 ; 5099 |            &dwAgcOut);
                            34965 
P:0018 77F400 FFFFF6  3   5634967         move    #-10,n7
P:001A 56F400 00001F  3   5934973         move    #>$1F,a
P:001C 044F14         4   6334969         lua     (r7)+n7,r4
P:001D 77F400 FFFFF8  3   6634970         move    #-8,n7
P:001F 000000         2   6834970         nop             ; (inserted)
P:0020 044F10         4   7234972         lua     (r7)+n7,r0
P:0021 0BF080 rrrrrr  6   7834974         jsr     FSTFM1000ReadShadowRegister
                            34976 
                            34977 ; 5100 |    // Bit[1] of ShadowLna
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 128

M:ADDR CODE           CYCLES LINE SOURCELINE
                            34978 ; 5101 |    dwBias1Up = (0 != (pDrst->sd_ctl_ShadowLna_dw & 0x00000002)) ? (1):(0);
                            34979 
P:0023 3C1400         2   8034981         move    #20,n4
P:0024 77F400 FFFFFB  3   8334982         move    #-5,n7
P:0026 2D0100         2   8534993         move    #1,b1
P:0027 6CEF00         4   8934984         move    y:(r7+n7),r4
P:0028 000000         2   9134984         nop             ; (inserted)
P:0029 044C16         4   9534986         lua     (r4)+n4,r6
P:002A 000000         2   9734986         nop             ; (inserted)
P:002B 205E00         2   9934990         move    (r6)+
P:002C 5ED600         2  10134991         move    y:(r6)-,a
P:002D 58E600         2  10334992         move    y:(r6),a0
P:002E 0AC821 rrrrrr  6  10934994         jset    #1,a0,L1025
P:0030 2D0000         2  11134995         move    #0,b1
                            34996 L1025:
                            35000 
                            35001 ; 5102 |    // Bit[0] of ShadowLna
                            35002 ; 5103 |    dwBias1Down = (0 != (pDrst->sd_ctl_ShadowLna_dw & 0x00000001)) ? (1):(0);
                            35003 
P:0031 21A900         2  11334996         move    b1,b0
P:0032 2D0000         2  11534997         move    #0,b1
P:0033 5D7000 rrrrrr  3  11834998         move    b1,y:FdwBias1Up+1
P:0035 597000 rrrrrr  3  12134999         move    b0,y:FdwBias1Up
P:0037 0AC800 rrrrrr  6  12735005         jclr    #0,a0,L1026
P:0039 56F400 000001  3  13035006         move    #>1,a
P:003B 0AF080 rrrrrr  6  13635007         jmp     L1027
P:003D 200013         2  13835008 L1026:  clr     a   
                            35009 L1027:
                            35021 
                            35022 ; 5104 |    /* extract LnaRms */
                            35023 ; 5105 |    STFM1000ReadShadowRegister(LNA_RMS_REG_MASK, &dwShadowAgcStatReg,
                            35024 ; 5106 |            &dwLnaRms);
                            35025 
P:003E 77F400 FFFFFC  3  14135009         move    #-4,n7
P:0040 218800         2  14335017         move    a1,a0
P:0041 6E6F00         4  14735011         move    r6,y:(r7+n7)
P:0042 77F400 FFFFFB  3  15035012         move    #-5,n7
P:0044 214C00         2  15235018         move    a2,a1
P:0045 6C6F00         4  15635014         move    r4,y:(r7+n7)
P:0046 77F400 FFFFF4  3  15935027         move    #-12,n7
P:0048 5C7000 rrrrrr  3  16235019         move    a1,y:FdwBias1Down+1
P:004A 044F14         4  16635029         lua     (r7)+n7,r4
P:004B 77F400 FFFFF8  3  16935030         move    #-8,n7
P:004D 587013 rrrrrr  3  17235033         clr     a	                a0,y:FdwBias1Down
P:004F 044F10         4  17635032         lua     (r7)+n7,r0
P:0050 50F400 001F00  3  17935034         move    #$1F00,a0
P:0052 0BF080 rrrrrr  6  18535035         jsr     FSTFM1000ReadShadowRegister
                            35036 
                            35037 ; 5107 |
                            35038 ; 5108 |    // Bit[23] of ShadowRef
                            35039 ; 5109 |    dwLnaAmp1ImproveDist = (0 != (pDrst->sd_ctl_ShadowRef_dw & 0x00800000)) ? (1):(0);  // bit 23
                            35040 
P:0054 3E1200         2  18735042         move    #18,n6
P:0055 77F400 FFFFFB  3  19035043         move    #-5,n7
P:0057 280100         2  19235050         move    #1,a0
P:0058 6EEF00         4  19635045         move    y:(r7+n7),r6
P:0059 22D000         2  19835046         move    r6,r0
P:005A 204E00         2  20035047         move    (r6)+n6
P:005B 0A66F7 rrrrrr  6  20635051         jset    #23,y:(r6),L1029
P:005D 280000         2  20835052         move    #0,a0
                            35053 L1029:
                            35065 
                            35066 ; 5110 |
                            35067 ; 5111 |    if (31 == dwAgcOut)
                            35068 
P:005E 77F400 FFFFFD  3  21135053         move    #-3,n7
P:0060 2C0000         2  21335056         move    #0,a1
P:0061 6E6F00         4  21735055         move    r6,y:(r7+n7)
P:0062 77F400 FFFFFE  3  22035057         move    #-2,n7
P:0064 205F00         2  22235058         move    (r7)+
P:0065 5C6F00         4  22635060         move    a1,y:(r7+n7)
P:0066 205700         2  22835061         move    (r7)-
P:0067 586F13         4  23235077         clr     a	                a0,y:(r7+n7)
P:0068 77F400 FFFFF6  3  23535070         move    #-10,n7
P:006A 281F00         2  23735078         move    #$1F,a0
P:006B 205F00         2  23935071         move    (r7)+
P:006C 5FEF00         4  24335073         move    y:(r7+n7),b
P:006D 2B0000         2  24535079         move    #0,b2
P:006E 205700         2  24735074         move    (r7)-
P:006F 59EF00         4  25135076         move    y:(r7+n7),b0
P:0070 20000D         2  25335080         cmp     a,b
P:0071 0AF0A2 rrrrrr  6  25935081         jne     L1012
                            35082 
                            35083 ; 5112 |    {
                            35084 ; 5113 |
                            35085 ; 5114 |        if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            35086 
P:0073 57F013 rrrrrr  3  26235090         clr     a	                x:FStfmTuneDefault+60,b
P:0075 2B0000         2  26435092         move    #0,b2
P:0076 280200         2  26635091         move    #2,a0
P:0077 51F000 rrrrrr  3  26935089         move    x:FStfmTuneDefault+59,b0
P:0079 20000D         2  27135093         cmp     a,b
P:007A 0AF0A2 rrrrrr  6  27735094         jne     L1003
                            35095 
                            35096 ; 5115 |            {
                            35097 ; 5116 |            RetCode = STFM1000WriteRegister(
                            35098 ; 5117 |                AGC_CONTROL1_REG_ADDR,
                            35099 ; 5118 |                B2_AGCREF_REG_MASK,
                            35100 ; 5119 |                &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            35101 ; 5120 |                10);
                            35102 
                            35113 
                            35114 ; 5121 |            if (SUCCESS != RetCode)
                            35115 
P:007C 381E1B         2  27935111         clr     b	                #30,n0
P:007D 77F400 FFFFFB  3  28235105         move    #-5,n7
P:007F 290A00         2  28435112         move    #10,b0
P:0080 686F00         4  28835107         move    r0,y:(r7+n7)
P:0081 204800         2  29035108         move    (r0)+n0
P:0082 0AF080 rrrrrr  6  29635117         jmp     L1004
                            35118 
                            35119 ; 5122 |                {
                            35120 ; 5123 |                //SystemHalt();
                            35121 ; 5124 |                return RetCode;
                            35122 ; 5125 |                }
                            35123 ; 5126 |            } // end if TA2
                            35124 ; 5127 |         else  // must be version TB2
                            35125 ; 5128 |            {
                            35126 ; 5129 |            RetCode = STFM1000WriteRegister(
                            35127 ; 5130 |                AGC_CONTROL1_REG_ADDR,
                            35128 ; 5131 |                0x00003F00,          // mask for B2_DB_WB_REF_REG
                            35129 ; 5132 |                &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            35130 ; 5133 |                42);
                            35131 
                            35133 L1003:
                            35145 
                            35146 ; 5134 |            if (SUCCESS != RetCode)
                            35147 
P:0084 381E1B         2  29835143         clr     b	                #30,n0
P:0085 77F400 FFFFFB  3  30135137         move    #-5,n7
P:0087 292A00         2  30335144         move    #42,b0
P:0088 686F00         4  30735139         move    r0,y:(r7+n7)
P:0089 204800         2  30935140         move    (r0)+n0
                            35149 L1004:
P:008A 44F413 000044  3  31235152         clr     a	                #>68,x0
P:008C 50F400 003F00  3  31535153         move    #$3F00,a0
P:008E 0BF080 rrrrrr  6  32135154         jsr     FSTFM1000WriteRegister
P:0090 21CF00         2  32335156         move    a,b
P:0091 20000B         2  32535159         tst     b
P:0092 0AF0A2 rrrrrr  6  33135160         jne     L1023
                            35161 
                            35162 ; 5135 |                {
                            35163 ; 5136 |                //SystemHalt();
                            35164 ; 5137 |                return RetCode;
                            35165 ; 5138 |                }
                            35166 ; 5139 |            } // end version TB2
                            35167 ; 5140 |
                            35168 ; 5141 |        if(18 >= iRssiLog)
                            35169 
P:0094 77F400 FFFFFA  3  33435171         move    #-6,n7
P:0096 57F400 000012  3  33735174         move    #>18,b
P:0098 4CEF00         4  34135173         move    y:(r7+n7),x0
P:0099 20004D         2  34335175         cmp     x0,b
P:009A 0AF0A9 rrrrrr  6  34935179         jlt     L1008
                            35180 
                            35181 ; 5142 |        {
                            35182 ; 5143 |            if(dwLnaRms==0)
                            35183 
P:009C 77F400 FFFFF4  3  35235185         move    #-12,n7
P:009E 205F00         2  35435186         move    (r7)+
P:009F 5EEF00         4  35835188         move    y:(r7+n7),a
P:00A0 2A0000         2  36035192         move    #0,a2
P:00A1 205700         2  36235189         move    (r7)-
P:00A2 58EF00         4  36635191         move    y:(r7+n7),a0
P:00A3 200003         2  36835193         tst     a
P:00A4 0AF0A2 rrrrrr  6  37435194         jne     L1008
                            35195 
                            35196 ; 5144 |            {
                            35197 ; 5145 |                if(dwBias1Down)
                            35198 
P:00A6 5FF000 rrrrrr  3  37735200         move    y:FdwBias1Down+1,b
P:00A8 2B0000         2  37935202         move    #0,b2
P:00A9 59F000 rrrrrr  3  38235201         move    y:FdwBias1Down,b0
P:00AB 20000B         2  38435203         tst     b
P:00AC 0AF0AA rrrrrr  6  39035204         jeq     L1005
                            35205 
                            35206 ; 5146 |                {
                            35207 ; 5147 |                    dwBias1Down = 0;
                            35208 
                            35214 
                            35215 ; 5148 |                }
                            35216 
P:00AE 2E0000         2  39235210         move    #0,a
P:00AF 5E701B rrrrrr  3  39535211         clr     b	                a,y:FdwBias1Down+1
P:00B1 5F7000 rrrrrr  3  39835213         move    b,y:FdwBias1Down
P:00B3 0AF080 rrrrrr  6  40435218         jmp     L1008
                            35219 
                            35220 ; 5149 |                else
                            35221 ; 5150 |                {
                            35222 ; 5151 |                    dwBias1Up = 1;
                            35223 
                            35225 L1005:
                            35229 
                            35230 ; 5152 |                    dwLnaAmp1ImproveDist = 0;
                            35231 
                            35246 
                            35247 ; 5153 |                }
                            35248 ; 5154 |            }
                            35249 ; 5155 |        }
                            35250 ; 5156 |        if(28 <= iRssiLog)  // was 24
                            35251 
P:00B5 77F400 FFFFFE  3  40735237         move    #-2,n7
P:00B7 270000         2  40935233         move    #0,y1
P:00B8 260000         2  41135234         move    #0,y0
P:00B9 205F1B         2  41335225         clr     b	                (r7)+
P:00BA 000009         2  41535226         inc     b
P:00BB 5D7000 rrrrrr  3  41835227         move    b1,y:FdwBias1Up+1
P:00BD 597000 rrrrrr  3  42135228         move    b0,y:FdwBias1Up
P:00BF 4F6F00         4  42535240         move    y1,y:(r7+n7)
P:00C0 205700         2  42735241         move    (r7)-
P:00C1 4E6F00         4  43135243         move    y0,y:(r7+n7)
P:00C2 57F400 00001C  3  43435253 L1008:  move    #>28,b
P:00C4 20004D         2  43635254         cmp     x0,b
P:00C5 0AF0A7 rrrrrr  6  44235255         jgt     L1017
                            35256 
                            35257 ; 5157 |        {
                            35258 ; 5158 |            if(dwBias1Up)
                            35259 
P:00C7 5FF000 rrrrrr  3  44535261         move    y:FdwBias1Up+1,b
P:00C9 2B0000         2  44735263         move    #0,b2
P:00CA 59F000 rrrrrr  3  45035262         move    y:FdwBias1Up,b0
P:00CC 20000B         2  45235264         tst     b
P:00CD 0AF0AA rrrrrr  6  45835265         jeq     L1009
                            35266 
                            35267 ; 5159 |            {
                            35268 ; 5160 |                dwBias1Up = 0;
                            35269 
                            35274 
                            35275 ; 5161 |                dwLnaAmp1ImproveDist = 1;
                            35276 
P:00CF 2F0000         2  46035271         move    #0,b
P:00D0 5D7000 rrrrrr  3  46335272         move    b1,y:FdwBias1Up+1
P:00D2 597000 rrrrrr  3  46635273         move    b0,y:FdwBias1Up
P:00D4 0AF080 rrrrrr  6  47235278         jmp     L1015
                            35279 
                            35280 ; 5162 |            }
                            35281 ; 5163 |            else
                            35282 ; 5164 |            {
                            35283 ; 5165 |                if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            35284 
                            35286 L1009:
P:00D6 57F013 rrrrrr  3  47535288         clr     a	                x:FStfmTuneDefault+60,b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 129

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00D8 2B0000         2  47735290         move    #0,b2
P:00D9 280200         2  47935289         move    #2,a0
P:00DA 51F000 rrrrrr  3  48235287         move    x:FStfmTuneDefault+59,b0
P:00DC 20000D         2  48435291         cmp     a,b
P:00DD 0AF0A2 rrrrrr  6  49035292         jne     L1010
                            35293 
                            35294 ; 5166 |                    {
                            35295 ; 5167 |                    RetCode = STFM1000WriteRegister(
                            35296 ; 5168 |                        AGC_CONTROL1_REG_ADDR,
                            35297 ; 5169 |                        B2_AGCREF_REG_MASK,
                            35298 ; 5170 |                        &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            35299 ; 5171 |                        7);
                            35300 
                            35313 
                            35314 ; 5172 |                    if (SUCCESS != RetCode)
                            35315 
P:00DF 381E1B         2  49235311         clr     b	                #30,n0
P:00E0 77F400 FFFFFB  3  49535303         move    #-5,n7
P:00E2 290700         2  49735312         move    #7,b0
P:00E3 68EF00         4  50135305         move    y:(r7+n7),r0
P:00E4 000000         2  50335305         nop             ; (inserted)
P:00E5 204800         2  50535307         move    (r0)+n0
P:00E6 0AF080 rrrrrr  6  51135317         jmp     L1011
                            35318 
                            35319 ; 5173 |                        {
                            35320 ; 5174 |                        //SystemHalt();
                            35321 ; 5175 |                        return RetCode;
                            35322 ; 5176 |                        }
                            35323 ; 5177 |                     } // end if TA2
                            35324 ; 5178 |                 else  // must be version TB2
                            35325 ; 5179 |                    {
                            35326 ; 5180 |                    RetCode = STFM1000WriteRegister(
                            35327 ; 5181 |                        AGC_CONTROL1_REG_ADDR,
                            35328 ; 5182 |                        0x00003F00,          // mask for B2_DB_WB_REF_REG
                            35329 ; 5183 |                        &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            35330 ; 5184 |                        34);
                            35331 
                            35333 L1010:
                            35346 
                            35347 ; 5185 |                    if (SUCCESS != RetCode)
                            35348 
P:00E8 381E1B         2  51335344         clr     b	                #30,n0
P:00E9 77F400 FFFFFB  3  51635336         move    #-5,n7
P:00EB 292200         2  51835345         move    #34,b0
P:00EC 68EF00         4  52235338         move    y:(r7+n7),r0
P:00ED 000000         2  52435338         nop             ; (inserted)
P:00EE 204800         2  52635340         move    (r0)+n0
                            35350 L1011:
P:00EF 44F413 000044  3  52935353         clr     a	                #>68,x0
P:00F1 50F400 003F00  3  53235354         move    #$3F00,a0
P:00F3 0BF080 rrrrrr  6  53835355         jsr     FSTFM1000WriteRegister
P:00F5 21CF00         2  54035357         move    a,b
P:00F6 20000B         2  54235360         tst     b
P:00F7 0AF0A2 rrrrrr  6  54835361         jne     L1023
                            35362 
                            35363 ; 5186 |                        {
                            35364 ; 5187 |                        //SystemHalt();
                            35365 ; 5188 |                        return RetCode;
                            35366 ; 5189 |                        }
                            35367 ; 5190 |                    } // end version TB2
                            35368 ; 5191 |
                            35369 ; 5192 |                dwBias1Down = 1;
                            35370 
                            35376 
                            35377 ; 5193 |            }
                            35378 ; 5194 |
                            35379 ; 5195 |        }
                            35380 ; 5196 |    }
                            35381 
P:00F9 270000         2  55035372         move    #0,y1
P:00FA 46F400 000001  3  55335373         move    #>1,y0
P:00FC 4F7000 rrrrrr  3  55635374         move    y1,y:FdwBias1Down+1
P:00FE 4E7000 rrrrrr  3  55935375         move    y0,y:FdwBias1Down
P:0100 0AF080 rrrrrr  6  56535383         jmp     L1017
                            35384 
                            35385 ; 5197 |    else  // (31 != dwAgcOut)
                            35386 ; 5198 |    {
                            35387 ; 5199 |        if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            35388 
                            35390 L1012:
P:0102 57F013 rrrrrr  3  56835395         clr     a	                x:FStfmTuneDefault+60,b
P:0104 2B0000         2  57035397         move    #0,b2
P:0105 280200         2  57235396         move    #2,a0
P:0106 51F000 rrrrrr  3  57535393         move    x:FStfmTuneDefault+59,b0
P:0108 20000D         2  57735398         cmp     a,b
P:0109 0AF0A2 rrrrrr  6  58335399         jne     L1013
                            35400 
                            35401 ; 5200 |            {
                            35402 ; 5201 |            RetCode = STFM1000WriteRegister(
                            35403 ; 5202 |                AGC_CONTROL1_REG_ADDR,
                            35404 ; 5203 |                B2_AGCREF_REG_MASK,
                            35405 ; 5204 |                &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            35406 ; 5205 |                7);
                            35407 
                            35415 
                            35416 ; 5206 |            if (SUCCESS != RetCode)
                            35417 
P:010B 381E1B         2  58535413         clr     b	                #30,n0
P:010C 290700         2  58735414         move    #7,b0
P:010D 204800         2  58935411         move    (r0)+n0
P:010E 0AF080 rrrrrr  6  59535419         jmp     L1014
                            35420 
                            35421 ; 5207 |                {
                            35422 ; 5208 |                //SystemHalt();
                            35423 ; 5209 |                return RetCode;
                            35424 ; 5210 |                }
                            35425 ; 5211 |             }  // end if TA2
                            35426 ; 5212 |         else  // must be version TB2
                            35427 ; 5213 |            {
                            35428 ; 5214 |            RetCode = STFM1000WriteRegister(
                            35429 ; 5215 |                AGC_CONTROL1_REG_ADDR,
                            35430 ; 5216 |                0x00003F00,          // mask for B2_DB_WB_REF_REG
                            35431 ; 5217 |                &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            35432 ; 5218 |                34);
                            35433 
                            35435 L1013:
                            35443 
                            35444 ; 5219 |            if (SUCCESS != RetCode)
                            35445 
P:0110 381E1B         2  59735441         clr     b	                #30,n0
P:0111 292200         2  59935442         move    #34,b0
P:0112 204800         2  60135439         move    (r0)+n0
                            35447 L1014:
P:0113 44F413 000044  3  60435450         clr     a	                #>68,x0
P:0115 50F400 003F00  3  60735451         move    #$3F00,a0
P:0117 0BF080 rrrrrr  6  61335452         jsr     FSTFM1000WriteRegister
P:0119 21CF00         2  61535454         move    a,b
P:011A 20000B         2  61735457         tst     b
P:011B 0AF0A2 rrrrrr  6  62335458         jne     L1023
                            35459 
                            35460 ; 5220 |                {
                            35461 ; 5221 |                //SystemHalt();
                            35462 ; 5222 |                return RetCode;
                            35463 ; 5223 |                }
                            35464 ; 5224 |            } // end version TB2
                            35465 ; 5225 |
                            35466 ; 5226 |        dwBias1Up = 0;
                            35467 
                            35473 
                            35474 ; 5227 |        dwBias1Down = 1;
                            35475 
                            35480 
                            35481 ; 5228 |        dwLnaAmp1ImproveDist = 1;
                            35482 
P:011D 2F0000         2  62535469         move    #0,b
P:011E 5D7000 rrrrrr  3  62835471         move    b1,y:FdwBias1Up+1
P:0120 597000 rrrrrr  3  63135472         move    b0,y:FdwBias1Up
P:0122 000009         2  63335477         inc     b
P:0123 5D7000 rrrrrr  3  63635478         move    b1,y:FdwBias1Down+1
P:0125 597000 rrrrrr  3  63935479         move    b0,y:FdwBias1Down
                            35484 L1015:
                            35497 
                            35498 ; 5229 |    }
                            35499 ; 5230 |    if (VERSION_TB2 == StfmTuneDefault.STFM1000_Version)
                            35500 
P:0127 77F400 FFFFFE  3  64235488         move    #-2,n7
P:0129 205F13         2  64435484         clr     a	                (r7)+
P:012A 000008         2  64635485         inc     a
P:012B 5C6F00         4  65035491         move    a1,y:(r7+n7)
P:012C 205700         2  65235492         move    (r7)-
P:012D 586F00         4  65635494         move    a0,y:(r7+n7)
                            35502 L1017:
P:012E 56F01B rrrrrr  3  65935504         clr     b	                x:FStfmTuneDefault+60,a
P:0130 2A0000         2  66135506         move    #0,a2
P:0131 291200         2  66335505         move    #18,b0
P:0132 50F000 rrrrrr  3  66635503         move    x:FStfmTuneDefault+59,a0
P:0134 200005         2  66835507         cmp     b,a
P:0135 0AF0A2 rrrrrr  6  67435508         jne     L1018
                            35509 
                            35510 ; 5231 |    {
                            35511 ; 5232 |        RetCode = STFM1000WriteRegister(
                            35512 ; 5233 |            REF_REG_ADDR,
                            35513 ; 5234 |            LNA_AMP1_IMPROVE_DISTORTION,
                            35514 ; 5235 |            &pDrst->sd_ctl_ShadowRef_dw,
                            35515 ; 5236 |            dwLnaAmp1ImproveDist);
                            35516 
P:0137 77F400 FFFFFE  3  67735518         move    #-2,n7
P:0139 44F400 000028  3  68035530         move    #>40,x0
P:013B 205F13         2  68235525         clr     a	                (r7)+
P:013C 50F400 800000  3  68535526         move    #$800000,a0
P:013E 5FEF00         4  68935521         move    y:(r7+n7),b
P:013F 205700         2  69135522         move    (r7)-
P:0140 59EF00         4  69535524         move    y:(r7+n7),b0
P:0141 77F400 FFFFFD  3  69835527         move    #-3,n7
P:0143 000000         2  70035527         nop             ; (inserted)
P:0144 68EF00         4  70435529         move    y:(r7+n7),r0
P:0145 0BF080 rrrrrr  6  71035531         jsr     FSTFM1000WriteRegister
                            35537 
                            35538 ; 5237 |
                            35539 ; 5238 |        if (SUCCESS != RetCode)
                            35540 
P:0147 21CF03         2  71235542         tst     a	                a,b
P:0148 0AF0A2 rrrrrr  6  71835543         jne     L1023
                            35544 
                            35545 ; 5239 |        {
                            35546 ; 5240 |            return RetCode;
                            35547 ; 5241 |        }
                            35548 ; 5242 |    }
                            35549 ; 5243 |    dwBias1Temp = ((dwBias1Up<<1) | dwBias1Down) & (0x00000003);
                            35550 
                            35552 L1018:
                            35572 
                            35573 ; 5244 |    RetCode = STFM1000WriteRegister(
                            35574 ; 5245 |        LNA_REG_ADDR,
                            35575 ; 5246 |        (IBIAS1_UP_MASK | IBIAS1_DN_MASK),
                            35576 ; 5247 |        &pDrst->sd_ctl_ShadowLna_dw,
                            35577 ; 5248 |        dwBias1Temp);
                            35578 
P:014A 5FF000 rrrrrr  3  72135552         move    y:FdwBias1Up+1,b
P:014C 59F000 rrrrrr  3  72435553         move    y:FdwBias1Up,b0
P:014E 4EF03A rrrrrr  3  72735555         asl     b	                y:FdwBias1Down,y0
P:0150 21A400         2  72935558         move    b1,x0
P:0151 212D00         2  73135559         move    b0,b1
P:0152 4FF05A rrrrrr  3  73435560         or      y0,b	                y:FdwBias1Down+1,y1
P:0154 21A900         2  73635561         move    b1,b0
P:0155 208D00         2  73835562         move    x0,b1
P:0156 46F47A 000003  3  74135563         or      y1,b	                #>3,y0
P:0158 21A400         2  74335566         move    b1,x0
P:0159 212D00         2  74535567         move    b0,b1
P:015A 27005E         2  74735568         and     y0,b	                #0,y1
P:015B 21A900         2  74935569         move    b1,b0
P:015C 208D00         2  75135570         move    x0,b1
P:015D 77F47E FFFFFC  3  75435571         and     y1,b	                #-4,n7
P:015F 44F400 00002C  3  75735583         move    #>44,x0
P:0161 68EF00         4  76135586         move    y:(r7+n7),r0
P:0162 2B0071         2  76335580         tfr     y1,a	                #0,b2
P:0163 20C800         2  76535582         move    y0,a0
P:0164 0BF080 rrrrrr  6  77135588         jsr     FSTFM1000WriteRegister
                            35592 
                            35593 ; 5249 |
                            35594 ; 5250 |    if (SUCCESS != RetCode)
                            35595 ; 5251 |    {
                            35596 ; 5252 |        return RetCode;
                            35597 ; 5253 |    }
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 130

M:ADDR CODE           CYCLES LINE SOURCELINE
                            35598 ; 5254 |    return RetCode;
                            35599 
P:0166 21CF00         2  77335590         move    a,b
                            35601 L1023:
                            35604 
                            35605 ; 5255 |}
                            35606 
P:0167 77F400 FFFFF3  3  77635608         move    #-13,n7
P:0169 21AE00         2  77835601         move    b1,a
P:016A 05EF7C         4  78235610         movec   y:(r7+n7),ssh
P:016B 204F00         2  78435612         move    (r7)+n7
P:016C 00000C         4  78835614         rts
                            35617 
                            35618 ; 5256 |//move from funclet
                            35619 ; 5257 |//Move from funclet
                            35620 ; 5258 |_reentrant INT STFM1000LookForPilot(BOOL * bPilotPresent)
                            35621 ; 5259 |{
                            35622 
                            35627 FSTFM1000LookForPilot:
                            35648 
                            35649 ; 5260 |    INT iCount;
                            35650 ; 5261 |    DWORD dwPiloTest;
                            35651 ; 5262 |    DWORD dwPiloTestLowerLimit = 0x1E;                          //TB2  +30 (0x1E)
                            35652 ; 5263 |    DWORD dwPiloTestUpperLimit = 0x7F;  //TB2
                            35653 ; 5264 |    DWORD dwPiloTestMask = PILOTEST_REG_TB2_MASK;   //VERSION_TA2
                            35654 ; 5265 |
                            35655 ; 5266 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            35656 
                            35670 
                            35671 ; 5267 |    INT RetCode = SUCCESS;
                            35672 ; 5268 |
                            35673 ; 5269 |    if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            35674 
P:016D 055F7C         2  79035628         movec   ssh,y:(r7)+
P:016E 3F0513         2  79235678         clr     a	                #5,n7
P:016F 57F000 rrrrrr  3  79535676         move    x:FStfmTuneDefault+60,b
P:0171 280200         2  79735679         move    #2,a0
P:0172 204F00         2  79935633         move    (r7)+n7
P:0173 77F400 FFFFFD  3  80235658         move    #-3,n7
P:0175 2B0000         2  80435680         move    #0,b2
P:0176 51F000 rrrrrr  3  80735677         move    x:FStfmTuneDefault+59,b0
P:0178 61F40D rrrrrr  3  81035681         cmp     a,b	                #FStfmTuneData,r1
P:017A 686F00         4  81435660         move    r0,y:(r7+n7)
P:017B 77F400 FFFFFE  3  81735664         move    #-2,n7
P:017D 000000         2  81935664         nop             ; (inserted)
P:017E 696F00         4  82335666         move    r1,y:(r7+n7)
P:017F 0AF0A2 rrrrrr  6  82935682         jne     L1076
                            35683 
                            35684 ; 5270 |    {
                            35685 ; 5271 |        dwPiloTestMask = PILOTEST_REG_TA2_MASK;
                            35686 ; 5272 |        // Range changed to [-75, -30] on 11/03/2006
                            35687 ; 5273 |        dwPiloTestLowerLimit = 0xE2;     // TA2  -30(0xE2)
                            35688 ; 5274 |        dwPiloTestUpperLimit = 0xB5;     // TA2  -75(0xB5)
                            35689 ; 5275 |
                            35690 ; 5276 |        /* Let's check the pilot for 3 times, and
                            35691 ; 5277 |           declare pilot present if value is within range all 3 times, */
                            35692 ; 5278 |        for (iCount=3; iCount>0; --iCount)
                            35693 
P:0181 57F400 000003  3  83235695         move    #>3,b
P:0183 47F400 000001  3  83535697         move    #>1,y1
                            35698 L1074:
                            35703 
                            35704 ; 5279 |        {
                            35705 ; 5280 |            // get pilot level
                            35706 ; 5281 |
                            35707 ; 5282 |            RetCode = STFM1000ReadSubRegister(
                            35708 ; 5283 |                PILOTCORRECTION_REG_ADDR,
                            35709 ; 5284 |                dwPiloTestMask,
                            35710 ; 5285 |                &dwPiloTest);
                            35711 
P:0185 045FA0         2  83735698         movec   m0,n7
P:0186 56F400 0000FF  3  84035717         move    #>$FF,a
P:0188 5D6F00         4  84435700         move    b1,y:(r7+n7)
P:0189 77F400 FFFFFB  3  84735713         move    #-5,n7
P:018B 57F400 000074  3  85035716         move    #>116,b
P:018D 044F10         4  85435715         lua     (r7)+n7,r0
P:018E 0BF080 rrrrrr  6  86035718         jsr     FSTFM1000ReadSubRegister
                            35721 
                            35722 ; 5286 |
                            35723 ; 5287 |            if (SUCCESS != RetCode)
                            35724 
P:0190 11F403 000001  3  86335726         tst     a	                a,x0	                #>1,y1
P:0192 0AF0A2 rrrrrr  6  86935728         jne     L1088
                            35729 
                            35730 ; 5288 |            {
                            35731 ; 5289 |                 //SystemHalt();
                            35732 ; 5290 |                 return RetCode;
                            35733 ; 5291 |            }
                            35734 ; 5292 |
                            35735 ; 5293 |            if (g_STFM1000_CustomerForceMono == TRUE)   // STMP00013255
                            35736 
P:0194 5FF000 rrrrrr  3  87235738         move    y:Fg_STFM1000_CustomerForceMono,b
P:0196 2B0000         2  87435739         move    #0,b2
P:0197 20007D         2  87635740         cmp     y1,b
P:0198 0AF0A2 rrrrrr  6  88235741         jne     L1075
                            35742 
                            35743 ; 5294 |            {
                            35744 ; 5295 |                dwPiloTest = 0;
                            35745 
                            35755 
                            35756 ; 5296 |            }
                            35757 ; 5297 |
                            35758 ; 5298 |            // compare pilot level to threshold
                            35759 ; 5299 |            // (value is positive so "ABS()" not needed)
                            35760 ; 5300 |            // -75<= dwPilotTest<-30
                            35761 ; 5301 |            if ((dwPiloTestUpperLimit < dwPiloTest) && (dwPiloTest < dwPiloTestLowerLimit))
                            35762 
P:019A 77F400 FFFFFB  3  88535748         move    #-5,n7
P:019C 205F1B         2  88735747         clr     b	                (r7)+
P:019D 5D6F00         4  89135751         move    b1,y:(r7+n7)
P:019E 205700         2  89335752         move    (r7)-
P:019F 596F00         4  89735754         move    b0,y:(r7+n7)
                            35764 L1075:
P:01A0 77F400 FFFFFB  3  90035764         move    #-5,n7
P:01A2 205F1B         2  90235771         clr     b	                (r7)+
P:01A3 29B500         2  90435772         move    #181,b0
P:01A4 5EEF00         4  90835767         move    y:(r7+n7),a
P:01A5 2A0000         2  91035773         move    #0,a2
P:01A6 205700         2  91235768         move    (r7)-
P:01A7 58EF00         4  91635770         move    y:(r7+n7),a0
P:01A8 20000D         2  91835774         cmp     a,b
P:01A9 0AF0A1 rrrrrr  6  92435775         jge     L1081
P:01AB 2F0000         2  92635776         move    #0,b
P:01AC 29E200         2  92835777         move    #226,b0
P:01AD 200005         2  93035778         cmp     b,a
P:01AE 0AF0A1 rrrrrr  6  93635779         jge     L1081
P:01B0 045FA0         2  93835781         movec   m0,n7
P:01B1 000000         2  94035781         nop             ; (inserted)
P:01B2 5FEF00         4  94435783         move    y:(r7+n7),b
P:01B3 20007C         2  94635784         sub     y1,b
P:01B4 0AF0A7 rrrrrr  6  95235787         jgt     L1074
                            35788 
                            35789 ; 5302 |            {
                            35790 ; 5303 |                continue;
                            35791 ; 5304 |            }
                            35792 ; 5305 |            else
                            35793 ; 5306 |            {
                            35794 ; 5307 |                // turn off pilot tracking on chip
                            35795 ; 5308 |                RetCode = STFM1000WriteRegister(
                            35796 ; 5309 |                    PILOTTRACKING_REG_ADDR,
                            35797 ; 5310 |                    B2_PILOTTRACKING_ENABLE_REG_MASK,
                            35798 ; 5311 |                    &pDrst->sd_ctl_ShadowPilotTracking_dw,
                            35799 ; 5312 |                    0);
                            35800 ; 5313 |
                            35801 ; 5314 |                if (SUCCESS != RetCode)
                            35802 ; 5315 |                {
                            35803 ; 5316 |                     return RetCode;
                            35804 ; 5317 |                }
                            35805 ; 5318 |
                            35806 ; 5319 |                *bPilotPresent = FALSE; // result to the calling function
                            35807 ; 5320 |                g_sd_audio_pCoefForcedMono_u1 = TRUE;
                            35808 ; 5321 |                break;
                            35809 ; 5322 |            } // pilot level below threshold
                            35810 ; 5323 |        }
                            35811 ; 5324 |        /* Pilot check passed every time in the preceding loop ? */
                            35812 ; 5325 |        if (iCount <= 0)
                            35813 
P:01B6 0AF080 rrrrrr  6  95835815         jmp     L1084
                            35816 
                            35817 ; 5326 |        {
                            35818 ; 5327 |            *bPilotPresent = TRUE; // result to the calling function
                            35819 ; 5328 |        }
                            35820 ; 5329 |
                            35821 ; 5330 |    }
                            35822 ; 5331 |    else //TB2
                            35823 ; 5332 |    {
                            35824 ; 5333 |        /* Let's check the pilot for 3 times, and
                            35825 ; 5334 |           declare pilot present if value is within range all 3 times, */
                            35826 ; 5335 |        for (iCount=3; iCount>0; --iCount)
                            35827 
P:01B8 57F400 000003  3  96135829 L1076:  move    #>3,b
                            35830 L1077:
                            35835 
                            35836 ; 5336 |        {
                            35837 ; 5337 |            // get pilot level
                            35838 ; 5338 |
                            35839 ; 5339 |            RetCode = STFM1000ReadSubRegister(
                            35840 ; 5340 |                PILOTCORRECTION_REG_ADDR,
                            35841 ; 5341 |                dwPiloTestMask,
                            35842 ; 5342 |                &dwPiloTest);
                            35843 
P:01BA 045FA0         2  96335830         movec   m0,n7
P:01BB 56F400 0000FE  3  96635849         move    #>$FE,a
P:01BD 5D6F00         4  97035832         move    b1,y:(r7+n7)
P:01BE 77F400 FFFFFB  3  97335845         move    #-5,n7
P:01C0 57F400 000074  3  97635848         move    #>116,b
P:01C2 044F10         4  98035847         lua     (r7)+n7,r0
P:01C3 0BF080 rrrrrr  6  98635850         jsr     FSTFM1000ReadSubRegister
                            35854 
                            35855 ; 5343 |
                            35856 ; 5344 |            if (SUCCESS != RetCode)
                            35857 
P:01C5 21C403         2  98835859         tst     a	                a,x0
P:01C6 0AF0A2 rrrrrr  6  99435860         jne     L1088
                            35861 
                            35862 ; 5345 |            {
                            35863 ; 5346 |                 //SystemHalt();
                            35864 ; 5347 |                 return RetCode;
                            35865 ; 5348 |            }
                            35866 ; 5349 |
                            35867 ; 5350 |            if (g_STFM1000_CustomerForceMono == TRUE)
                            35868 
P:01C8 5EF000 rrrrrr  3  99735870         move    y:Fg_STFM1000_CustomerForceMono,a
P:01CA 46F400 000001  3 100035871         move    #>1,y0
P:01CC 2A0000         2 100235872         move    #0,a2
P:01CD 200055         2 100435873         cmp     y0,a
P:01CE 0AF0A2 rrrrrr  6 101035874         jne     L1078
                            35875 
                            35876 ; 5351 |            {
                            35877 ; 5352 |                dwPiloTest = 0;
                            35878 
                            35888 
                            35889 ; 5353 |            }
                            35890 ; 5354 |
                            35891 ; 5355 |            // compare pilot level to threshold
                            35892 ; 5356 |            // (value is positive so "ABS()" not needed)
                            35893 ; 5357 |            // 30<=dwPilotTest<127
                            35894 ; 5358 |            if ((dwPiloTestLowerLimit < dwPiloTest) &&
                            35895 ; 5359 |                 (dwPiloTest < dwPiloTestUpperLimit))
                            35896 
P:01D0 77F400 FFFFFB  3 101335881         move    #-5,n7
P:01D2 205F13         2 101535880         clr     a	                (r7)+
P:01D3 5C6F00         4 101935884         move    a1,y:(r7+n7)
P:01D4 205700         2 102135885         move    (r7)-
P:01D5 586F00         4 102535887         move    a0,y:(r7+n7)
                            35898 L1078:
P:01D6 77F400 FFFFFB  3 102835898         move    #-5,n7
P:01D8 205F13         2 103035905         clr     a	                (r7)+
P:01D9 281E00         2 103235906         move    #30,a0
P:01DA 5FEF00         4 103635901         move    y:(r7+n7),b
P:01DB 2B0000         2 103835907         move    #0,b2
P:01DC 205700         2 104035902         move    (r7)-
P:01DD 59EF00         4 104435904         move    y:(r7+n7),b0
P:01DE 200005         2 104635908         cmp     b,a
P:01DF 0AF0A1 rrrrrr  6 105235909         jge     L1081
P:01E1 2E0000         2 105435910         move    #0,a
P:01E2 287F00         2 105635911         move    #$7F,a0
P:01E3 20000D         2 105835912         cmp     a,b
P:01E4 0AF0A9 rrrrrr  6 106435913         jlt     L1082
                            35914 
                            35915 ; 5360 |            {
                            35916 ; 5361 |                continue;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 131

M:ADDR CODE           CYCLES LINE SOURCELINE
                            35917 ; 5362 |            }
                            35918 ; 5363 |            else
                            35919 ; 5364 |            {
                            35920 ; 5365 |                 // turn off pilot tracking on chip
                            35921 ; 5366 |                RetCode = STFM1000WriteRegister(
                            35922 ; 5367 |                    PILOTTRACKING_REG_ADDR,
                            35923 ; 5368 |                    B2_PILOTTRACKING_ENABLE_REG_MASK,
                            35924 ; 5369 |                    &pDrst->sd_ctl_ShadowPilotTracking_dw,
                            35925 ; 5370 |                    0);
                            35926 
                            35928 L1081:
P:01E6 77F41B FFFFFE  3 106735934         clr     b	                #-2,n7
P:01E8 380413         2 106935936         clr     a	                #4,n0
P:01E9 68EF00         4 107335931         move    y:(r7+n7),r0
P:01EA 44F400 000008  3 107635935         move    #>8,x0
P:01EC 50F400 008000  3 107935937         move    #$8000,a0
P:01EE 204800         2 108135933         move    (r0)+n0
P:01EF 0BF080 rrrrrr  6 108735938         jsr     FSTFM1000WriteRegister
                            35942 
                            35943 ; 5371 |
                            35944 ; 5372 |                if (SUCCESS != RetCode)
                            35945 
P:01F1 045FA0         2 108935948         movec   m0,n7
P:01F2 21C403         2 109135947         tst     a	                a,x0
P:01F3 5FEF00         4 109535950         move    y:(r7+n7),b
P:01F4 0AF0A2 rrrrrr  6 110135953         jne     L1088
                            35954 
                            35955 ; 5373 |                {
                            35956 ; 5374 |                     //SystemHalt();
                            35957 ; 5375 |                     return RetCode;
                            35958 ; 5376 |                }
                            35959 ; 5377 |
                            35960 ; 5378 |                *bPilotPresent = FALSE; // result to the calling function
                            35961 
                            35968 
                            35969 ; 5379 |
                            35970 ; 5380 |                /* enable "forced mono" in black box */
                            35971 ; 5381 |                g_sd_audio_pCoefForcedMono_u1 = TRUE;
                            35972 
                            35976 
                            35977 ; 5382 |                break;
                            35978 
P:01F6 77F413 FFFFFD  3 110435966         clr     a	                #-3,n7
P:01F8 000000         2 110635966         nop             ; (inserted)
P:01F9 6EEF00         4 111035965         move    y:(r7+n7),r6
P:01FA 000000         2 111235965         nop             ; (inserted)
P:01FB 5C6600         2 111435967         move    a1,y:(r6)
P:01FC 2C0100         2 111635974         move    #1,a1
P:01FD 5C7000 rrrrrr  3 111935975         move    a1,y:Fg_sd_audio_pCoefForcedMono_u1
P:01FF 0AF080 rrrrrr  6 112535980         jmp     L1084
                            35982 L1082:
P:0201 045FA0         2 112735985         movec   m0,n7
P:0202 000000         2 112935985         nop             ; (inserted)
P:0203 5FEF00         4 113335987         move    y:(r7+n7),b
P:0204 20005C         2 113535988         sub     y0,b
P:0205 0AF0A7 rrrrrr  6 114135991         jgt     L1077
                            35992 
                            35993 ; 5383 |
                            35994 ; 5384 |            } // if ((dwPiloTestLowerLimit < dwPiloTest) ...
                            35995 ; 5385 |        }
                            35996 ; 5386 |        /* Pilot check passed every time in the preceding loop ? */
                            35997 ; 5387 |        if (iCount <= 0)
                            35998 
P:0207 20000B         2 114336000 L1084:  tst     b
P:0208 0AF0A7 rrrrrr  6 114936001         jgt     L1085
                            36002 
                            36003 ; 5388 |        {
                            36004 ; 5389 |            *bPilotPresent = TRUE; // result to the calling function
                            36005 
                            36013 
                            36014 ; 5390 |        }
                            36015 ; 5391 |    }
                            36016 ; 5392 |    pDrst->sd_ctl_PilotPresent_b = *bPilotPresent;
                            36017 
P:020A 77F400 FFFFFD  3 115236007         move    #-3,n7
P:020C 290100         2 115436010         move    #1,b0
P:020D 6EEF00         4 115836009         move    y:(r7+n7),r6
P:020E 000000         2 116036009         nop             ; (inserted)
P:020F 596600         2 116236011         move    b0,y:(r6)
                            36019 L1085:
                            36037 
                            36038 ; 5393 |    return RetCode;
                            36039 
P:0210 3E3900         2 116436026         move    #$39,n6
P:0211 77F400 FFFFFD  3 116736019         move    #-3,n7
P:0213 000000         2 116936019         nop             ; (inserted)
P:0214 6EEF00         4 117336021         move    y:(r7+n7),r6
P:0215 77F400 FFFFFE  3 117636027         move    #-2,n7
P:0217 4EE600         2 117836023         move    y:(r6),y0
P:0218 6EEF00         4 118236029         move    y:(r7+n7),r6
P:0219 000000         2 118436029         nop             ; (inserted)
P:021A 204E00         2 118636031         move    (r6)+n6
P:021B 4E6600         2 118836036         move    y0,y:(r6)
                            36041 L1088:
                            36044 
                            36045 ; 5394 |}
                            36046 
P:021C 77F441 FFFFFA  3 119136041         tfr     x0,a	                #-6,n7
P:021E 000000         2 119336041         nop             ; (inserted)
P:021F 05EF7C         4 119736050         movec   y:(r7+n7),ssh
P:0220 204F00         2 119936052         move    (r7)+n7
P:0221 00000C         4 120336054         rts
                            36057 
                            36058 ; 5395 |
                            36059 ; 5396 |////////////////////////////////////////////////////////////////////////////////
                            36060 ; 5397 |//
                            36061 ; 5398 |//>  Name:          TunerGetStatus
                            36062 ; 5399 |//
                            36063 ; 5400 |//   Type:          Function
                            36064 ; 5401 |//
                            36065 ; 5402 |//   Description:   Check if tuning is done
                            36066 ; 5403 |//
                            36067 ; 5404 |//   Inputs:        none
                            36068 ; 5405 |//
                            36069 ; 5406 |//   Outputs:       Error status
                            36070 ; 5407 |//
                            36071 ; 5408 |//   Notes:         This function is called whenever the tuner is return E_TUNER_BUSY
                            36072 ; 5409 |//                  which is used to release the control back to the system when waiting
                            36073 ; 5410 |//                  for the settling period for tuning, optimizing channel, or monitoring
                            36074 ; 5411 |//                  the signal quality
                            36075 ; 5412 |//<
                            36076 ; 5413 |////////////////////////////////////////////////////////////////////////////////
                            36077 ; 5414 |_reentrant INT TunerGetStatus( void )
                            36078 ; 5415 |{
                            36079 
                            36084 FTunerGetStatus:
                            36090 
                            36091 ; 5416 |    // The timer could be E_TUNER_BUSY by tuning or optimizing channel and monitoring
                            36092 ; 5417 |    // the signal quality. In the last two cases, the tuner should be not in busy state
                            36093 ; 5418 |    // In those cases, if a message comes, we should ignor timer and handle the message
                            36094 ; 5419 |    // The tuning step:
                            36095 ; 5420 |    // 1. Tune to a frequency
                            36096 ; 5421 |    // 2. Optimize the channel after tuned, when complete, send a message to menu information
                            36097 ; 5422 |    //    the completion
                            36098 ; 5423 |    // 3. Minitor the signal quality every second
                            36099 ; 5424 |    INT iStatus;
                            36100 ; 5425 |
                            36101 ; 5426 |    if(g_wFMTunerError.m_bTUNER_BUSY == TRUE)
                            36102 
P:0222 055F7C         2 120536085         movec   ssh,y:(r7)+
P:0223 5FF000 rrrrrr  3 120836104         move    y:Fg_wFMTunerError,b
P:0225 0BCD60         4 121236105         btst    #0,b1
P:0226 44F41B 000001  3 121536106         clr     b	                #>1,x0
P:0228 20003F         2 121736107         rol     b
P:0229 20004D         2 121936109         cmp     x0,b
P:022A 0AF0A2 rrrrrr  6 122536110         jne     L1097
                            36111 
                            36112 ; 5427 |    {
                            36113 ; 5428 |        iStatus = STFM1000TuningSearchingScanning();
                            36114 
P:022C 0BF080 rrrrrr  6 123136116         jsr     FSTFM1000TuningSearchingScanning
                            36118 
                            36119 ; 5429 |        return(iStatus);
                            36120 
P:022E 0AF080 rrrrrr  6 123736122         jmp     L1103
                            36123 
                            36124 ; 5430 |    }
                            36125 ; 5431 |    else
                            36126 ; 5432 |    {
                            36127 ; 5433 |        // We are in the middle of channel optimization, so discard the signal montor quality
                            36128 ; 5434 |        // since we only monitor the signal after the station is settled
                            36129 ; 5435 |        if(s_eOptimizeChannelState != OPTIMIZE_CHANNEL_STATE_COMPLETE)
                            36130 
                            36132 L1097:
P:0230 5FF000 rrrrrr  3 124036132         move    y:Fs_eOptimizeChannelState,b
P:0232 56F400 000004  3 124336133         move    #>4,a
P:0234 20000D         2 124536134         cmp     a,b
P:0235 0AF0AA rrrrrr  6 125136136         jeq     L1098
                            36137 
                            36138 ; 5436 |        {
                            36139 ; 5437 |            // If we just received a message to start monitoring the signal quality
                            36140 ; 5438 |            // so discard the prevoius operation, start over
                            36141 ; 5439 |            if(s_eOptimizeChannelState == OPTIMIZE_CHANNEL_STATE_START)
                            36142 
P:0237 20000B         2 125336144         tst     b
P:0238 0AF0AA rrrrrr  6 125936145         jeq     L1099
                            36146 
                            36147 ; 5440 |            {
                            36148 ; 5441 |                return TUNER_SUCCESS;
                            36149 ; 5442 |
                            36150 ; 5443 |            }
                            36151 ; 5444 |            else
                            36152 ; 5445 |            {
                            36153 ; 5446 |                return STFM1000OptimizeChannel();
                            36154 
P:023A 0BF080 rrrrrr  6 126536156         jsr     FSTFM1000OptimizeChannel
P:023C 0AF080 rrrrrr  6 127136157         jmp     L1103
                            36158 
                            36159 ; 5447 |            }
                            36160 ; 5448 |        }
                            36161 ; 5449 |        else
                            36162 ; 5450 |        {
                            36163 ; 5451 |            // warning: HJ made this change to use #else but DW concerned maybe we need #if case to run.
                            36164 ; 5452 |#ifdef STFM1000_ENABLE_MONITOR_SIGNAL_QUALITY
                            36165 ; 5453 |            // If we just received a message to start monitoring the signal quality
                            36166 ; 5454 |            // so discard the prevoius operation, start over
                            36167 ; 5455 |            if(s_eMonitorSignalQualityState == MONITOR_SIGNAL_QUALITY_STATE_START)
                            36168 
P:023E 5EF000 rrrrrr  3 127436170 L1098:  move    y:Fs_eMonitorSignalQualityState,a
P:0240 200003         2 127636171         tst     a
P:0241 0AF0A2 rrrrrr  6 128236172         jne     L1100
                            36173 
                            36174 ; 5456 |            {
                            36175 ; 5457 |                return TUNER_SUCCESS;
                            36176 
P:0243 200013         2 128436178 L1099:  clr     a   
P:0244 0AF080 rrrrrr  6 129036179         jmp     L1103
                            36180 
                            36181 ; 5458 |            }
                            36182 ; 5459 |            else
                            36183 ; 5460 |            {
                            36184 ; 5461 |                return (STFM1000TunerMonitorQuality());
                            36185 
P:0246 0BF080 rrrrrr  6 129636187 L1100:  jsr     FSTFM1000TunerMonitorQuality
                            36188 
                            36189 ; 5462 |            }
                            36190 ; 5463 |#else
                            36191 ; 5464 |                return TUNER_SUCCESS;
                            36192 ; 5465 |#endif
                            36193 ; 5466 |        }
                            36194 ; 5467 |    }
                            36195 ; 5468 |}
                            36196 
                            36198 L1103:
P:0248 05FF7C         4 130036198         movec   y:-(r7),ssh
P:0249 000000         2 130236198         nop             ; (inserted)
P:024A 00000C         4 130636202         rts
                            36204 
                            36205 ; 5469 |
                            36206 ; 5470 |// New function Nov 2006
                            36207 ; 5471 |// Input: Input param is a pointer to prelim pilot check result. Retcode returned also for err status.
                            36208 ; 5472 |_reentrant INT STFM1000PrelimPilotCheck(BOOL * bPrelimPilot)
                            36209 ; 5473 |{
                            36210 
                            36215 FSTFM1000PrelimPilotCheck:
                            36232 
                            36233 ; 5474 |    INT iCount;
                            36234 ; 5475 |    DWORD dwPiloTest;
                            36235 ; 5476 |    DWORD dwPiloTestLowerLimit = 0x19;                          //TB2  +25(0x19)
                            36236 ; 5477 |    DWORD dwPiloTestUpperLimit = 0x7F;                          //TB2  +127(0x7F)
                            36237 
                            36258 
                            36259 ; 5478 |    DWORD dwPiloTestMask = PILOTEST_REG_TB2_MASK;       //VERSION_TB2
                            36260 
                            36278 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 132

M:ADDR CODE           CYCLES LINE SOURCELINE
                            36279 ; 5479 |
                            36280 ; 5480 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            36281 ; 5481 |    INT RetCode = SUCCESS;
                            36282 ; 5482 |
                            36283 ; 5483 |    if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            36284 
P:024B 055F7C         2 130836216         movec   ssh,y:(r7)+
P:024C 3F0813         2 131036244         clr     a	                #8,n7
P:024D 260000         2 131236263         move    #0,y0
P:024E 57F000 rrrrrr  3 131536286         move    x:FStfmTuneDefault+60,b
P:0250 47F400 0000FE  3 131836262         move    #>$FE,y1
P:0252 287F00         2 132036245         move    #$7F,a0
P:0253 204F00         2 132236221         move    (r7)+n7
P:0254 77F400 FFFFFA  3 132536239         move    #-6,n7
P:0256 2B0000         2 132736290         move    #0,b2
P:0257 51F000 rrrrrr  3 133036287         move    x:FStfmTuneDefault+59,b0
P:0259 686F00         4 133436241         move    r0,y:(r7+n7)
P:025A 77F400 FFFFFB  3 133736247         move    #-5,n7
P:025C 205F00         2 133936248         move    (r7)+
P:025D 5C6F00         4 134336250         move    a1,y:(r7+n7)
P:025E 205700         2 134536251         move    (r7)-
P:025F 586F13         4 134936288         clr     a	                a0,y:(r7+n7)
P:0260 77F400 FFFFFD  3 135236265         move    #-3,n7
P:0262 280200         2 135436289         move    #2,a0
P:0263 205F00         2 135636266         move    (r7)+
P:0264 4F6F00         4 136036268         move    y1,y:(r7+n7)
P:0265 205700         2 136236269         move    (r7)-
P:0266 4E6F0D         4 136636291         cmp     a,b	                y0,y:(r7+n7)
P:0267 0AF0A2 rrrrrr  6 137236292         jne     L1122
                            36293 
                            36294 ; 5484 |    {
                            36295 ; 5485 |        dwPiloTestMask = PILOTEST_REG_TA2_MASK;
                            36296 
                            36309 
                            36310 ; 5486 |        dwPiloTestLowerLimit = 0x19;     // TA2  +25(0x19)
                            36311 ; 5487 |        dwPiloTestUpperLimit = 0xE7;     // TA2  -25(0xE7)
                            36312 
                            36327 
                            36328 ; 5488 |    }  // end if TA2
                            36329 ; 5489 |
                            36330 ; 5490 |        /* Let's check the pilot 5 times, and declare "pilot possible"
                            36331 ; 5491 |             if value falls outside range even once */
                            36332 ; 5492 |        for (iCount=5; iCount>0; --iCount)
                            36333 
P:0269 250000         2 137436314         move    #0,x1
P:026A 47F400 0000FF  3 137736298         move    #>$FF,y1
P:026C 44F400 0000E7  3 138036315         move    #>231,x0
P:026E 205F00         2 138236301         move    (r7)+
P:026F 4F6F00         4 138636303         move    y1,y:(r7+n7)
P:0270 205700         2 138836304         move    (r7)-
P:0271 4E6F00         4 139236306         move    y0,y:(r7+n7)
P:0272 77F400 FFFFFB  3 139536318         move    #-5,n7
P:0274 205F00         2 139736319         move    (r7)+
P:0275 4D6F00         4 140136321         move    x1,y:(r7+n7)
P:0276 205700         2 140336322         move    (r7)-
P:0277 4C6F00         4 140736324         move    x0,y:(r7+n7)
                            36335 L1122:
P:0278 46F400 000005  3 141036335         move    #>5,y0
P:027A 44F400 000001  3 141336337         move    #>1,x0
                            36338 L1123:
                            36343 
                            36344 ; 5493 |        {
                            36345 ; 5494 |            // get pilot level
                            36346 ; 5495 |            RetCode = STFM1000ReadSubRegister(
                            36347 ; 5496 |                PILOTCORRECTION_REG_ADDR,
                            36348 ; 5497 |                dwPiloTestMask,
                            36349 ; 5498 |                &dwPiloTest);
                            36350 
P:027C 045FA0         2 141536338         movec   m0,n7
P:027D 57F400 000074  3 141836364         move    #>116,b
P:027F 4E6F00         4 142236340         move    y0,y:(r7+n7)
P:0280 77F400 FFFFF8  3 142536352         move    #-8,n7
P:0282 000000         2 142736352         nop             ; (inserted)
P:0283 044F10         4 143136354         lua     (r7)+n7,r0
P:0284 77F400 FFFFFD  3 143436355         move    #-3,n7
P:0286 205F00         2 143636356         move    (r7)+
P:0287 5EEF00         4 144036358         move    y:(r7+n7),a
P:0288 205700         2 144236359         move    (r7)-
P:0289 58EF00         4 144636361         move    y:(r7+n7),a0
P:028A 0BF080 rrrrrr  6 145236365         jsr     FSTFM1000ReadSubRegister
                            36370 
                            36371 ; 5499 |
                            36372 ; 5500 |            if (SUCCESS != RetCode)
                            36373 
P:028C 045FA0         2 145436379         movec   m0,n7
P:028D 44F409 000001  3 145736368         tfr     a,b	                #>1,x0
P:028F 4EEF00         4 146136381         move    y:(r7+n7),y0
P:0290 21E70B         2 146336376         tst     b	                b,y1
P:0291 0AF0A2 rrrrrr  6 146936385         jne     L1129
                            36386 
                            36387 ; 5501 |            {
                            36388 ; 5502 |                 //SystemHalt();
                            36389 ; 5503 |                 return RetCode;
                            36390 ; 5504 |            }
                            36391 ; 5505 |            // compare pilot level to threshold
                            36392 ; 5506 |            // (value is positive so "ABS()" not needed)
                            36393 ; 5507 |            // -25<=dwPilotTest<+25  for TA2   ---   0<=dwPilotTest<+25  for TB2
                            36394 ; 5508 |            if ((dwPiloTest < dwPiloTestLowerLimit) ||
                            36395 ; 5509 |               ((dwPiloTestUpperLimit < dwPiloTest) && (dwPiloTest <= 0xFF)))
                            36396 
P:0293 77F400 FFFFF8  3 147236398         move    #-8,n7
P:0295 205F13         2 147436405         clr     a	                (r7)+
P:0296 281900         2 147636406         move    #25,a0
P:0297 5FEF00         4 148036401         move    y:(r7+n7),b
P:0298 2B0000         2 148236407         move    #0,b2
P:0299 205700         2 148436402         move    (r7)-
P:029A 59EF00         4 148836404         move    y:(r7+n7),b0
P:029B 20000D         2 149036408         cmp     a,b
P:029C 0AF0A9 rrrrrr  6 149636409         jlt     L1126
P:029E 77F400 FFFFFB  3 149936410         move    #-5,n7
P:02A0 205F00         2 150136411         move    (r7)+
P:02A1 5EEF00         4 150536413         move    y:(r7+n7),a
P:02A2 2A0000         2 150736417         move    #0,a2
P:02A3 205700         2 150936414         move    (r7)-
P:02A4 58EF00         4 151336416         move    y:(r7+n7),a0
P:02A5 200005         2 151536418         cmp     b,a
P:02A6 0AF0A1 rrrrrr  6 152136419         jge     L1124
P:02A8 2E0000         2 152336420         move    #0,a
P:02A9 28FF00         2 152536421         move    #$FF,a0
P:02AA 20000D         2 152736422         cmp     a,b
P:02AB 0AF0AF rrrrrr  6 153336423         jle     L1126
                            36424 
                            36425 ; 5510 |            {
                            36426 ; 5511 |                continue;
                            36427 ; 5512 |            }
                            36428 ; 5513 |            else
                            36429 ; 5514 |            {
                            36430 ; 5515 |                *bPrelimPilot = TRUE; // result to the calling function
                            36431 
                            36433 L1124:
                            36438 
                            36439 ; 5516 |                break;
                            36440 
P:02AD 77F400 FFFFFA  3 153636433         move    #-6,n7
P:02AF 000000         2 153836433         nop             ; (inserted)
P:02B0 6EEF00         4 154236435         move    y:(r7+n7),r6
P:02B1 000000         2 154436435         nop             ; (inserted)
P:02B2 4C6600         2 154636437         move    x0,y:(r6)
P:02B3 0AF080 rrrrrr  6 155236442         jmp     L1127
                            36444 L1126:
P:02B5 20CF00         2 155436444         move    y0,b
P:02B6 20004C         2 155636445         sub     x0,b
P:02B7 21A600         2 155836448         move    b1,y0
P:02B8 0AF0A7 rrrrrr  6 156436451         jgt     L1123
                            36452 
                            36453 ; 5517 |            } // if ((dwPiloTest < dwPiloTestLowerLimit) ...
                            36454 ; 5518 |        }
                            36455 ; 5519 |        /* Pilot check is "small" every time in the preceding loop? */
                            36456 ; 5520 |        if (iCount <= 0)
                            36457 
                            36459 L1127:
P:02BA 20CE1B         2 156636460         clr     b	                y0,a
P:02BB 200003         2 156836461         tst     a
P:02BC 0AF0A7 rrrrrr  6 157436464         jgt     L1129
                            36465 
                            36466 ; 5521 |        {
                            36467 ; 5522 |            *bPrelimPilot = FALSE; // result to the calling function
                            36468 
                            36477 
                            36478 ; 5523 |        }
                            36479 ; 5524 |
                            36480 ; 5525 |
                            36481 ; 5526 |
                            36482 ; 5527 |    return RetCode;
                            36483 
P:02BE 77F400 FFFFFA  3 157736470         move    #-6,n7
P:02C0 000000         2 157936470         nop             ; (inserted)
P:02C1 6EEF00         4 158336472         move    y:(r7+n7),r6
P:02C2 000000         2 158536472         nop             ; (inserted)
P:02C3 5F6600         2 158736474         move    b,y:(r6)
                            36485 L1129:
                            36489 
                            36490 ; 5528 |}
                            36491 
P:02C4 77F471 FFFFF7  3 159036485         tfr     y1,a	                #-9,n7
P:02C6 000000         2 159236485         nop             ; (inserted)
P:02C7 05EF7C         4 159636495         movec   y:(r7+n7),ssh
P:02C8 204F00         2 159836497         move    (r7)+n7
P:02C9 00000C         4 160236499         rts
                            36505 
                            36506 ; 5529 |_reentrant INT STFM1000TunerMonitorQuality(void)
                            36507 ; 5530 |{
                            36508 
                            36513 FSTFM1000TunerMonitorQuality:
                            36547 
                            36548 ; 5531 |
                            36549 ; 5532 |    DWORD dwShadowToneReg;
                            36550 ; 5533 |    WORD wRssiMantissa, wRssiExponent;
                            36551 ; 5534 |    WORD wPrssi;
                            36552 ; 5535 |    INT iRssiLog;
                            36553 ; 5536 |    DWORD dwRssiDecoded;
                            36554 ; 5537 |    DWORD dwTemp;
                            36555 ; 5538 |    DWORD dwShadowAgcStatReg;
                            36556 ; 5539 |    DWORD dwAgcOut, dwLnaRms, dwLnaTh;
                            36557 ; 5540 |    BOOL bWriteFlag;
                            36558 ; 5541 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            36559 
                            36566 
                            36567 ; 5542 |    INT iRetCode = SUCCESS;
                            36568 
                            36572 
                            36573 ; 5543 |
                            36574 ; 5544 |    switch(s_eMonitorSignalQualityState)
                            36575 
P:02CA 055F7C         2 160436514         movec   ssh,y:(r7)+
P:02CB 3F0413         2 160636570         clr     a	                #4,n7
P:02CC 76F400 rrrrrr  3 160936561         move    #FStfmTuneData,n6
P:02CE 23D600         2 161136562         move    n6,r6
P:02CF 5FF000 rrrrrr  3 161436577         move    y:Fs_eMonitorSignalQualityState,b
P:02D1 64F40B rrrrrr  3 161736578         tst     b       #L1205,r4
P:02D3 204F00         2 161936519         move    (r7)+n7
P:02D4 0AF0AB rrrrrr  6 162536579         jmi     L1204
P:02D6 46F400 000003  3 162836580         move    #>3,y0
P:02D8 21FC5D         2 163036581         cmp     y0,b    b,n4
P:02D9 0AF0A7 rrrrrr  6 163636582         jgt     L1204
P:02DB 07EC94         8 164436583         movem   p:(r4+n4),r4
P:02DC 000000         2 164636583         nop             ; (inserted)
P:02DD 0AE480         4 165036585         jmp     (r4)
                            36586 
P:02DE rrrrrr               36587 L1205:  dc      L1200   ; case 0:
P:02DF rrrrrr               36588         dc      L1186   ; case 1:
P:02E0 rrrrrr               36589         dc      L1188   ; case 2:
P:02E1 rrrrrr               36590         dc      L1191   ; case 3:
                            36591 
                            36592 
                            36593 ; 5545 |    {
                            36594 ; 5546 |        case MONITOR_SIGNAL_QUALITY_STATE_START:
                            36595 ; 5547 |            iRetCode = STFM1000TunerMonitorQualityStateStart();
                            36596 ; 5548 |            break;
                            36597 ; 5549 |        case MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_1:
                            36598 
                            36600 L1186:
                            36605 
                            36606 ; 5550 |
                            36607 ; 5551 |            STFM1000GetNearChannelOffset();
                            36608 
P:02E2 77F413 FFFFFE  3 165336617         clr     a	                #-2,n7
P:02E4 57F400 000068  3 165636616         move    #>104,b
P:02E6 287F00         2 165836618         move    #$7F,a0
P:02E7 6E6F00         4 166236602         move    r6,y:(r7+n7)
P:02E8 045FA0         2 166436610         movec   m0,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 133

M:ADDR CODE           CYCLES LINE SOURCELINE
P:02E9 000000         2 166636610         nop             ; (inserted)
P:02EA 7E6F00         4 167036612         move    n6,y:(r7+n7)
P:02EB 77F400 FFFFFC  3 167336613         move    #-4,n7
P:02ED 000000         2 167536613         nop             ; (inserted)
P:02EE 044F10         4 167936615         lua     (r7)+n7,r0
P:02EF 0BF080 rrrrrr  6 168536619         jsr     FSTFM1000ReadSubRegister
                            36634 
                            36635 ; 5552 |            if ( pDrst->sd_ctl_ShadowSignalQuality_w < pDrst->sd_ctl_AdjChanTh_w)
                            36636 
P:02F1 3D3800         2 168736628         move    #$38,n5
P:02F2 3E2600         2 168936645         move    #38,n6
P:02F3 77F400 FFFFFC  3 169236621         move    #-4,n7
P:02F5 205F00         2 169436622         move    (r7)+
P:02F6 5FEF00         4 169836624         move    y:(r7+n7),b
P:02F7 205700         2 170036625         move    (r7)-
P:02F8 59EF00         4 170436627         move    y:(r7+n7),b0
P:02F9 045FA0         2 170636629         movec   m0,n7
P:02FA 000000         2 170836629         nop             ; (inserted)
P:02FB 6DEF00         4 171236631         move    y:(r7+n7),r5
P:02FC 77F400 FFFFFE  3 171536638         move    #-2,n7
P:02FE 596D00         4 171936633         move    b0,y:(r5+n5)
P:02FF 6DEF00         4 172336640         move    y:(r7+n7),r5
P:0300 22B600         2 172536646         move    r5,r6
P:0301 5FED00         4 172936642         move    y:(r5+n5),b
P:0302 5EEE00         4 173336648         move    y:(r6+n6),a
P:0303 2B0000         2 173536650         move    #0,b2
P:0304 2A0000         2 173736649         move    #0,a2
P:0305 20000D         2 173936651         cmp     a,b
P:0306 0AF0A1 rrrrrr  6 174536652         jge     L1187
                            36653 
                            36654 ; 5553 |            {
                            36655 ; 5554 |                iRetCode = STFM1000SetNearChannelOffset(5);
                            36656 
P:0308 380A1B         2 174736663         clr     b	                #10,n0
P:0309 60F400 rrrrrr  3 175036658         move    #FStfmTuneData,r0
P:030B 56F400 00001C  3 175336662         move    #>$1C,a
P:030D 44F400 000018  3 175636665         move    #>24,x0
P:030F 290500         2 175836664         move    #5,b0
P:0310 204800         2 176036661         move    (r0)+n0
P:0311 0BF080 rrrrrr  6 176636666         jsr     FSTFM1000WriteRegister
                            36668 
                            36669 ; 5555 |
                            36670 ; 5556 |                g_iTunerProcessIntervalMs = 10;
                            36671 
                            36675 
                            36676 ; 5557 |                s_eMonitorSignalQualityState = MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_2;
                            36677 
                            36681 
                            36682 ; 5558 |                iRetCode = E_TUNER_BUSY;
                            36683 
P:0313 44F400 00000A  3 176936673         move    #>10,x0
P:0315 46F400 000002  3 177236679         move    #>2,y0
P:0317 447000 rrrrrr  3 177536674         move    x0,x:Fg_iTunerProcessIntervalMs
P:0319 4E7000 rrrrrr  3 177836680         move    y0,y:Fs_eMonitorSignalQualityState
P:031B 0AF080 rrrrrr  6 178436685         jmp     L1199
                            36686 
                            36687 ; 5559 |            }
                            36688 
                            36690 L1187:
                            36695 
                            36696 ; 5560 |            else
                            36697 ; 5561 |            {
                            36698 ; 5562 |                iRetCode = STFM1000SetNearChannelFilter(0);
                            36699 
P:031D 380613         2 178636705         clr     a	                #6,n0
P:031E 60F400 rrrrrr  3 178936701         move    #FStfmTuneData,r0
P:0320 44F400 000010  3 179236708         move    #>16,x0
P:0322 6D6F00         4 179636692         move    r5,y:(r7+n7)
P:0323 280C1B         2 179836707         clr     b	                #12,a0
P:0324 204800         2 180036704         move    (r0)+n0
P:0325 0BF080 rrrrrr  6 180636709         jsr     FSTFM1000WriteRegister
                            36710 
                            36711 ; 5563 |                if ((TRUE == pDrst->sd_ctl_PilotPresent_b) && (TRUE == bIsWeakSignal))
                            36712 
P:0327 3E3900         2 180836714         move    #$39,n6
P:0328 77F400 FFFFFE  3 181136715         move    #-2,n7
P:032A 46F400 000001  3 181436722         move    #>1,y0
P:032C 6EEF00         4 181836717         move    y:(r7+n7),r6
P:032D 000000         2 182036717         nop             ; (inserted)
P:032E 5FEE00         4 182436719         move    y:(r6+n6),b
P:032F 2B0000         2 182636723         move    #0,b2
P:0330 20005D         2 182836724         cmp     y0,b
P:0331 0AF0A2 rrrrrr  6 183436725         jne     L1195
P:0333 5FF000 rrrrrr  3 183736726         move    y:FbIsWeakSignal,b
P:0335 2B0000         2 183936727         move    #0,b2
P:0336 20005D         2 184136728         cmp     y0,b
P:0337 0AF0A2 rrrrrr  6 184736729         jne     L1195
                            36730 
                            36731 ; 5564 |                {
                            36732 ; 5565 |                    s_wTrackTableIndex = 0;
                            36733 
                            36737 
                            36738 ; 5566 |                    iRetCode = STFM1000GearShiftPtGear(STFM1000TrackTable[s_wTrackTableIndex].dw_bits);
                            36739 
P:0339 240000         2 184936735         move    #0,x0
P:033A 4C7000 rrrrrr  3 185236736         move    x0,y:Fs_wTrackTableIndex
P:033C 5FF000 rrrrrr  3 185536741         move    y:FSTFM1000TrackTable+3,b
P:033E 59F000 rrrrrr  3 185836742         move    y:FSTFM1000TrackTable+2,b0
P:0340 0AF080 rrrrrr  6 186436743         jmp     L1197
                            36744 
                            36745 ; 5567 |
                            36746 ; 5568 |                    g_iTunerProcessIntervalMs = STFM1000TrackTable[s_wTrackTableIndex].dw_msec_delay;
                            36747 ; 5569 |                    s_eMonitorSignalQualityState = MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_3;
                            36748 ; 5570 |                    iRetCode =  E_TUNER_BUSY;
                            36749 ; 5571 |                }
                            36750 ; 5572 |                else
                            36751 ; 5573 |                {
                            36752 ; 5574 |                    iRetCode = STFM1000TunerMonitorQualityStateFinal();
                            36753 ; 5575 |                }
                            36754 ; 5576 |            }
                            36755 ; 5577 |            break;
                            36756 ; 5578 |       case MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_2:
                            36757 
                            36759 L1188:
                            36764 
                            36765 ; 5579 |            STFM1000GetNearChannelOffset();
                            36766 
P:0342 77F413 FFFFFE  3 186736774         clr     a	                #-2,n7
P:0344 57F400 000068  3 187036776         move    #>104,b
P:0346 287F00         2 187236775         move    #$7F,a0
P:0347 6E6F00         4 187636761         move    r6,y:(r7+n7)
P:0348 045FA0         2 187836768         movec   m0,n7
P:0349 000000         2 188036768         nop             ; (inserted)
P:034A 7E6F00         4 188436770         move    n6,y:(r7+n7)
P:034B 77F400 FFFFFC  3 188736771         move    #-4,n7
P:034D 000000         2 188936771         nop             ; (inserted)
P:034E 044F10         4 189336773         lua     (r7)+n7,r0
P:034F 0BF080 rrrrrr  6 189936777         jsr     FSTFM1000ReadSubRegister
                            36791 
                            36792 ; 5580 |
                            36793 ; 5581 |            if ( pDrst->sd_ctl_ShadowSignalQuality_w < pDrst->sd_ctl_AdjChanTh_w)
                            36794 
P:0351 3D3800         2 190136785         move    #$38,n5
P:0352 3E2600         2 190336803         move    #38,n6
P:0353 77F400 FFFFFC  3 190636778         move    #-4,n7
P:0355 205F00         2 190836779         move    (r7)+
P:0356 5FEF00         4 191236781         move    y:(r7+n7),b
P:0357 205700         2 191436782         move    (r7)-
P:0358 59EF00         4 191836784         move    y:(r7+n7),b0
P:0359 045FA0         2 192036786         movec   m0,n7
P:035A 000000         2 192236786         nop             ; (inserted)
P:035B 6DEF00         4 192636788         move    y:(r7+n7),r5
P:035C 77F400 FFFFFE  3 192936796         move    #-2,n7
P:035E 596D00         4 193336790         move    b0,y:(r5+n5)
P:035F 6DEF00         4 193736798         move    y:(r7+n7),r5
P:0360 22B600         2 193936804         move    r5,r6
P:0361 5FED00         4 194336800         move    y:(r5+n5),b
P:0362 5EEE00         4 194736806         move    y:(r6+n6),a
P:0363 2B0000         2 194936810         move    #0,b2
P:0364 2A0000         2 195136809         move    #0,a2
P:0365 20000D         2 195336811         cmp     a,b
P:0366 0AF0A1 rrrrrr  6 195936812         jge     L1189
                            36813 
                            36814 ; 5582 |            {
                            36815 ; 5583 |                iRetCode = STFM1000SetNearChannelFilter(2);
                            36816 
                            36824 
                            36825 ; 5584 |
                            36826 ; 5585 |                if ((TRUE == pDrst->sd_ctl_PilotPresent_b) && (TRUE == bIsWeakSignal))
                            36827 
P:0368 38061B         2 196136822         clr     b	                #6,n0
P:0369 60F400 rrrrrr  3 196436818         move    #FStfmTuneData,r0
P:036B 290200         2 196636823         move    #2,b0
P:036C 204800         2 196836821         move    (r0)+n0
P:036D 0AF080 rrrrrr  6 197436829         jmp     L1190
                            36830 
                            36831 ; 5586 |                {
                            36832 ; 5587 |                    s_wTrackTableIndex = 0;
                            36833 ; 5588 |                    iRetCode = STFM1000GearShiftPtGear(STFM1000TrackTable[s_wTrackTableIndex].dw_bits);
                            36834 ; 5589 |
                            36835 ; 5590 |                    g_iTunerProcessIntervalMs = STFM1000TrackTable[s_wTrackTableIndex].dw_msec_delay;
                            36836 ; 5591 |                    s_eMonitorSignalQualityState = MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_3;
                            36837 ; 5592 |                    iRetCode =  E_TUNER_BUSY;
                            36838 ; 5593 |                }
                            36839 ; 5594 |                else
                            36840 ; 5595 |                {
                            36841 ; 5596 |                    iRetCode = STFM1000TunerMonitorQualityStateFinal();
                            36842 ; 5597 |                }
                            36843 ; 5598 |            }
                            36844 ; 5599 |            else
                            36845 ; 5600 |            {
                            36846 ; 5601 |                iRetCode = STFM1000SetNearChannelFilter(0);
                            36847 
                            36849 L1189:
                            36854 
                            36855 ; 5602 |                if ((TRUE == pDrst->sd_ctl_PilotPresent_b) && (TRUE == bIsWeakSignal))
                            36856 
P:036F 38061B         2 197636853         clr     b	                #6,n0
P:0370 60F400 rrrrrr  3 197936849         move    #FStfmTuneData,r0
P:0372 000000         2 198136849         nop             ; (inserted)
P:0373 204800         2 198336852         move    (r0)+n0
                            36858 L1190:
P:0374 44F413 000010  3 198636860         clr     a	                #>16,x0
P:0376 280C00         2 198836861         move    #12,a0
P:0377 0BF080 rrrrrr  6 199436863         jsr     FSTFM1000WriteRegister
P:0379 3E3900         2 199636865         move    #$39,n6
P:037A 77F400 FFFFFE  3 199936866         move    #-2,n7
P:037C 44F400 000001  3 200236873         move    #>1,x0
P:037E 6EEF00         4 200636868         move    y:(r7+n7),r6
P:037F 000000         2 200836868         nop             ; (inserted)
P:0380 5FEE00         4 201236870         move    y:(r6+n6),b
P:0381 2B0000         2 201436874         move    #0,b2
P:0382 20004D         2 201636875         cmp     x0,b
P:0383 0AF0A2 rrrrrr  6 202236876         jne     L1195
P:0385 5FF000 rrrrrr  3 202536877         move    y:FbIsWeakSignal,b
P:0387 2B0000         2 202736878         move    #0,b2
P:0388 20004D         2 202936879         cmp     x0,b
P:0389 0AF0A2 rrrrrr  6 203536880         jne     L1195
                            36881 
                            36882 ; 5603 |                {
                            36883 ; 5604 |                    s_wTrackTableIndex = 0;
                            36884 ; 5605 |                    iRetCode = STFM1000GearShiftPtGear(STFM1000TrackTable[s_wTrackTableIndex].dw_bits);
                            36885 ; 5606 |
                            36886 ; 5607 |                    g_iTunerProcessIntervalMs = STFM1000TrackTable[s_wTrackTableIndex].dw_msec_delay;
                            36887 
P:038B 0AF080 rrrrrr  6 204136889         jmp     L1196
                            36890 
                            36891 ; 5608 |                    s_eMonitorSignalQualityState = MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_3;
                            36892 ; 5609 |                    iRetCode =  E_TUNER_BUSY;
                            36893 ; 5610 |                }
                            36894 ; 5611 |                else
                            36895 ; 5612 |                {
                            36896 ; 5613 |                    iRetCode = STFM1000TunerMonitorQualityStateFinal();
                            36897 ; 5614 |                }
                            36898 ; 5615 |            }
                            36899 ; 5616 |            break;
                            36900 ; 5617 |        case MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_3:
                            36901 ; 5618 |            s_wTrackTableIndex++;
                            36902 
                            36904 L1191:
                            36910 
                            36911 ; 5619 |            if (/* (0 != STFM1000TrackTable[s_wTrackTableIndex].dw_msec_delay)
                            36912 ; 5620 |                 ||*/ (0 != STFM1000TrackTable[s_wTrackTableIndex].dw_bits) )
                            36913 
P:038D 5FF000 rrrrrr  3 204436906         move    y:Fs_wTrackTableIndex,b
P:038F 46F400 000001  3 204736907         move    #>1,y0
P:0391 66F458 rrrrrr  3 205036908         add     y0,b	                #FSTFM1000TrackTable+2,r6
P:0393 5D703B rrrrrr  3 205336915         lsl     b	                b1,y:Fs_wTrackTableIndex
P:0395 20003B         2 205536916         lsl     b
P:0396 21BE00         2 205736917         move    b1,n6
P:0397 000000         2 205936917         nop             ; (inserted)
P:0398 204E00         2 206136920         move    (r6)+n6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 134

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0399 205E00         2 206336922         move    (r6)+
P:039A 5FD600         2 206536923         move    y:(r6)-,b
P:039B 2B0000         2 206736925         move    #0,b2
P:039C 59E600         2 206936924         move    y:(r6),b0
P:039D 20000B         2 207136926         tst     b
P:039E 0AF0AA rrrrrr  6 207736927         jeq     L1204
                            36928 
                            36929 ; 5621 |            {
                            36930 ; 5622 |                iRetCode = STFM1000GearShiftPtGear(STFM1000TrackTable[s_wTrackTableIndex].dw_bits);
                            36931 
P:03A0 60F400 rrrrrr  3 208036933         move    #FStfmTuneData+4,r0
P:03A2 44F413 000008  3 208336934         clr     a	                #>8,x0
P:03A4 50F400 00FFFF  3 208636935         move    #$FFFF,a0
P:03A6 0BF080 rrrrrr  6 209236937         jsr     FSTFM1000WriteRegister
                            36939 
                            36940 ; 5623 |                if(STFM1000TrackTable[s_wTrackTableIndex].dw_msec_delay == 0)
                            36941 
P:03A8 66F400 rrrrrr  3 209536946         move    #FSTFM1000TrackTable,r6
P:03AA 4DF000 rrrrrr  3 209836943         move    y:Fs_wTrackTableIndex,x1
P:03AC 0116F8         2 210036944         mpy     x1,#22,b
P:03AD 213E00         2 210236945         move    b0,n6
P:03AE 000000         2 210436945         nop             ; (inserted)
P:03AF 204E00         2 210636948         move    (r6)+n6
P:03B0 205E00         2 210836949         move    (r6)+
P:03B1 5ED600         2 211036950         move    y:(r6)-,a
P:03B2 2A0000         2 211236952         move    #0,a2
P:03B3 58E600         2 211436951         move    y:(r6),a0
P:03B4 200003         2 211636953         tst     a
P:03B5 0AF0A2 rrrrrr  6 212236954         jne     L1198
                            36955 
                            36956 ; 5624 |                {
                            36957 ; 5625 |                    /* configure "forced mono" in black box */
                            36958 ; 5626 |                    g_sd_audio_pCoefForcedMono_u1 = 0;
                            36959 
                            36963 
                            36964 ; 5627 |                    bIsWeakSignal = FALSE;
                            36965 
                            36968 
                            36969 ; 5628 |
                            36970 ; 5629 |                    iRetCode = STFM1000TunerMonitorQualityStateFinal();
                            36971 
P:03B7 2F0000         2 212436961         move    #0,b
P:03B8 5F7000 rrrrrr  3 212736962         move    b,y:Fg_sd_audio_pCoefForcedMono_u1
P:03BA 5F7000 rrrrrr  3 213036967         move    b,y:FbIsWeakSignal
P:03BC 0BF080 rrrrrr  6 213636973 L1195:  jsr     FSTFM1000TunerMonitorQualityStateFinal
                            36975 
                            36976 ; 5630 |                }
                            36977 
P:03BE 0AF080 rrrrrr  6 214236979         jmp     L1204
                            36981 L1196:
P:03C0 280000         2 214436981         move    #0,a0
P:03C1 587000 rrrrrr  3 214736983         move    a0,y:Fs_wTrackTableIndex
P:03C3 5FF000 rrrrrr  3 215036985         move    y:FSTFM1000TrackTable+3,b
P:03C5 59F000 rrrrrr  3 215336986         move    y:FSTFM1000TrackTable+2,b0
                            36987 L1197:
P:03C7 60F400 rrrrrr  3 215636989         move    #FStfmTuneData+4,r0
P:03C9 44F413 000008  3 215936987         clr     a	                #>8,x0
P:03CB 50F400 00FFFF  3 216236988         move    #$FFFF,a0
P:03CD 0BF080 rrrrrr  6 216836991         jsr     FSTFM1000WriteRegister
                            36992 
                            36993 ; 5631 |                else
                            36994 ; 5632 |                {
                            36995 ; 5633 |                    g_iTunerProcessIntervalMs = STFM1000TrackTable[s_wTrackTableIndex].dw_msec_delay;
                            36996 
                            36998 L1198:
                            37007 
                            37008 ; 5634 |                    s_eMonitorSignalQualityState = MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_3;
                            37009 
                            37013 
                            37014 ; 5635 |                    iRetCode =  E_TUNER_BUSY;
                            37015 
P:03CF 66F400 rrrrrr  3 217137001         move    #FSTFM1000TrackTable,r6
P:03D1 4EF000 rrrrrr  3 217436998         move    y:Fs_wTrackTableIndex,y0
P:03D3 47F400 000003  3 217737011         move    #>3,y1
P:03D5 0116E8         2 217936999         mpy     y0,#22,b
P:03D6 213E00         2 218137000         move    b0,n6
P:03D7 000000         2 218337000         nop             ; (inserted)
P:03D8 204E00         2 218537003         move    (r6)+n6
P:03D9 4CDE00         2 218737004         move    y:(r6)+,x0
P:03DA 4DD600         2 218937005         move    y:(r6)-,x1
P:03DB 447000 rrrrrr  3 219237006         move    x0,x:Fg_iTunerProcessIntervalMs
P:03DD 4F7000 rrrrrr  3 219537012         move    y1,y:Fs_eMonitorSignalQualityState
                            37017 L1199:
                            37019 
                            37020 ; 5636 |                }
                            37021 ; 5637 |            }
                            37022 ; 5638 |            break;
                            37023 
P:03DF 56F400 FFFFFC  3 219837017         move    #>-4,a
P:03E1 0AF080 rrrrrr  6 220437025         jmp     L1204
P:03E3 0BF080 rrrrrr  6 221037027 L1200:  jsr     FSTFM1000TunerMonitorQualityStateStart
                            37028 
                            37029 ; 5639 |        default:
                            37030 ; 5640 |            break;
                            37031 ; 5641 |     }
                            37032 
                            37034 L1204:
                            37035 
                            37036 ; 5642 |    return iRetCode;
                            37037 ; 5643 |
                            37038 ; 5644 |}
                            37039 
P:03E5 77F400 FFFFFB  3 221337041         move    #-5,n7
P:03E7 000000         2 221537041         nop             ; (inserted)
P:03E8 05EF7C         4 221937043         movec   y:(r7+n7),ssh
P:03E9 204F00         2 222137045         move    (r7)+n7
P:03EA 00000C         4 222537047         rts
                            37050 
                            37051 ; 5645 |//
                            37052 ; 5646 |_reentrant INT STFM1000TunerMonitorQualityStateStart(void)
                            37053 ; 5647 |{
                            37054 
                            37059 FSTFM1000TunerMonitorQualityStateStart:
                            37083 
                            37084 ; 5648 |    DWORD dwShadowToneReg;
                            37085 ; 5649 |    //WORD wRssiMantissa, wRssiExponent;
                            37086 ; 5650 |    //WORD wPrssi;
                            37087 ; 5651 |    //INT iRssiLog;
                            37088 ; 5652 |    //DWORD dwRssiDecoded;
                            37089 ; 5653 |    DWORD dwTemp;
                            37090 ; 5654 |    DWORD dwShadowAgcStatReg;
                            37091 ; 5655 |    DWORD dwAgcOut, dwLnaRms, dwLnaTh;
                            37092 ; 5656 |    BOOL bWriteFlag;
                            37093 ; 5657 |    DWORD dwTempInit0 = 0;
                            37094 
                            37103 
                            37104 ; 5658 |    DWORD dwTempLna = 9;
                            37105 ; 5659 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            37106 
                            37113 
                            37114 ; 5660 |    INT iRetCode = SUCCESS;
                            37115 ; 5661 |    BOOL bPilotPresent = FALSE;
                            37116 
                            37123 
                            37124 ; 5662 |    BOOL bPrelimPilotCheck = FALSE;
                            37125 
                            37130 
                            37131 ; 5663 |
                            37132 ; 5664 |    // **** Following section gives an occasional opportunity to the system
                            37133 ; 5665 |    // to recover stereo after confidence has been exhausted.
                            37134 ; 5666 |    // This helps the system eventually recover from brief multipath,
                            37135 ; 5667 |    // which might otherwise decrease confidence and forever force mono.
                            37136 ; 5668 |    count_MonitorQuality+=1;
                            37137 
                            37141 
                            37142 ; 5669 |    if (count_MonitorQuality>300)    // value indicates #sec to "wait" before trying again
                            37143 
P:03EB 055F7C         2 222737060         movec   ssh,y:(r7)+
P:03EC 3F0713         2 222937118         clr     a	                #7,n7
P:03ED 66F400 rrrrrr  3 223237108         move    #FStfmTuneData,r6
P:03EF 260000         2 223437097         move    #0,y0
P:03F0 44F400 000001  3 223737139         move    #>1,x0
P:03F2 45F400 00012C  3 224037145         move    #300,x1
P:03F4 5FF000 rrrrrr  3 224337082         move    y:Fcount_MonitorQuality,b
P:03F6 204F00         2 224537065         move    (r7)+n7
P:03F7 77F400 FFFFFA  3 224837119         move    #-6,n7
P:03F9 000000         2 225037119         nop             ; (inserted)
P:03FA 5C6F48         4 225437140         add     x0,b	                a1,y:(r7+n7)
P:03FB 77F400 FFFFF9  3 225737127         move    #-7,n7
P:03FD 27006D         2 225937146         cmp     x1,b	                #0,y1
P:03FE 5C6F00         4 226337129         move    a1,y:(r7+n7)
P:03FF 0AF0AF rrrrrr  6 226937147         jle     L1314
                            37148 
                            37149 ; 5670 |        {
                            37150 ; 5671 |          count_MonitorQuality = 0;   // reset counter
                            37151 
                            37154 
                            37155 ; 5672 |        wSd_ctl_Confidence_u16 = 3; // reset confidence
                            37156 
                            37160 
                            37161 ; 5673 |        }
                            37162 
P:0401 218F00         2 227137153         move    a1,b
P:0402 45F400 000003  3 227437158         move    #>3,x1
P:0404 4D7000 rrrrrr  3 227737159         move    x1,y:FwSd_ctl_Confidence_u16
                            37164 L1314:
                            37174 
                            37175 ; 5674 |     //****
                            37176 ; 5675 |
                            37177 ; 5676 |    /* enable buffered writes */
                            37178 ; 5677 |    iRetCode = STFM1000WriteRegister(
                            37179 ; 5678 |            DATAPATH_REG_ADDR,
                            37180 ; 5679 |            DB_ACCEPT_REG_MASK,
                            37181 ; 5680 |            &pDrst->sd_ctl_ShadowDataPath_dw,
                            37182 ; 5681 |            1);
                            37183 
P:0406 3E2200         2 227937185         move    #34,n6
P:0407 77F400 FFFFFD  3 228237164         move    #-3,n7
P:0409 044E10         4 228637189         lua     (r6)+n6,r0
P:040A 205F00         2 228837165         move    (r7)+
P:040B 4F6F00         4 229237167         move    y1,y:(r7+n7)
P:040C 205700         2 229437168         move    (r7)-
P:040D 4E6F00         4 229837170         move    y0,y:(r7+n7)
P:040E 045FA0         2 230037186         movec   m0,n7
P:040F 5D701B rrrrrr  3 230337192         clr     b	                b1,y:Fcount_MonitorQuality
P:0411 000009         2 230537193         inc     b
P:0412 6E6F00         4 230937188         move    r6,y:(r7+n7)
P:0413 44F413 00005C  3 231237194         clr     a	                #>92,x0
P:0415 50F400 010000  3 231537195         move    #$10000,a0
P:0417 0BF080 rrrrrr  6 232137197         jsr     FSTFM1000WriteRegister
                            37200 
                            37201 ; 5682 |    if (SUCCESS != iRetCode)
                            37202 
P:0419 21CF03         2 232337204         tst     a	                a,b
P:041A 0AF0A2 rrrrrr  6 232937205         jne     L1347
                            37206 
                            37207 ; 5683 |    {
                            37208 ; 5684 |        //SystemHalt();
                            37209 ; 5685 |        return iRetCode;
                            37210 ; 5686 |    }
                            37211 ; 5687 |
                            37212 ; 5688 |    /* Get Rssi register readings from STFM1000 */
                            37213 ; 5689 |    iRetCode = STFM1000ReadRegisterToShadow(RSSI_TONE_REG_ADDR,
                            37214 ; 5690 |                                            &dwShadowToneReg);
                            37215 
P:041C 77F400 FFFFFB  3 233237217         move    #-5,n7
P:041E 56F400 000070  3 233537220         move    #>$70,a
P:0420 044F10         4 233937219         lua     (r7)+n7,r0
P:0421 0BF080 rrrrrr  6 234537221         jsr     FSTFM1000ReadRegisterToShadow
                            37225 
                            37226 ; 5691 |    if (SUCCESS != iRetCode)
                            37227 
P:0423 21CF03         2 234737229         tst     a	                a,b
P:0424 0AF0A2 rrrrrr  6 235337230         jne     L1347
                            37231 
                            37232 ; 5692 |    {
                            37233 ; 5693 |        //SystemHalt();
                            37234 ; 5694 |        return iRetCode;
                            37235 ; 5695 |    }
                            37236 ; 5696 |//******************** No longer using direct-read RSSI_DCEST,
                            37237 ; 5697 |//******************** rather we're using attack-decay-filtered RSSI
                            37238 ; 5698 |#if 0
                            37239 ; 5699 |    STFM1000ReadShadowRegister(RSSI_DCEST_REG_MASK, &dwShadowToneReg,
                            37240 ; 5700 |            &dwTemp);
                            37241 ; 5701 |    pDrst->sd_ctl_ShadowRssiDcEst_w = dwTemp & 0xffff;
                            37242 ; 5702 |
                            37243 ; 5703 |    /* decode RSSI */
                            37244 ; 5704 |    wRssiMantissa = (pDrst->sd_ctl_ShadowRssiDcEst_w & 0xFFE0)>>5;// 11 msb
                            37245 ; 5705 |    wRssiExponent = (pDrst->sd_ctl_ShadowRssiDcEst_w & 0x001F);   // 5 lsb
                            37246 ; 5706 |    dwRssiDecoded = wRssiMantissa << wRssiExponent;
                            37247 ; 5707 |
                            37248 ; 5708 |    /* Convert Rssi to 10log(Rssi) */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 135

M:ADDR CODE           CYCLES LINE SOURCELINE
                            37249 ; 5709 |    for (wPrssi = 20; wPrssi >0; --wPrssi)
                            37250 ; 5710 |    {
                            37251 ; 5711 |        if (dwRssiDecoded >= (1 << wPrssi))
                            37252 ; 5712 |        {
                            37253 ; 5713 |            break;
                            37254 ; 5714 |        }
                            37255 ; 5715 |    }
                            37256 ; 5716 |
                            37257 ; 5717 |    iRssiLog = (3*dwRssiDecoded >> wPrssi) + (3*wPrssi - 3);
                            37258 ; 5718 |
                            37259 ; 5719 |    /* clamp to positive */
                            37260 ; 5720 |    if (iRssiLog < 0)
                            37261 ; 5721 |    {
                            37262 ; 5722 |        iRssiLog = 0;
                            37263 ; 5723 |    }
                            37264 ; 5724 |
                            37265 ; 5725 |    /* Compensate for errors in truncation/approximation by adding 1 */
                            37266 ; 5726 |    iRssiLog += 1;
                            37267 ; 5727 |#endif
                            37268 ; 5728 |//********************
                            37269 ; 5729 |
                            37270 ; 5730 |    // Save the value for sending across to UI later
                            37271 ; 5731 |    //pDrst->sd_ctl_ShadowRssiDcEstLog_w = (WORD)iRssiLog;
                            37272 ; 5732 |    //s_iFMSignalStrengthRSSI = iRssiLog;
                            37273 ; 5733 |    pDrst->sd_ctl_ShadowRssiDcEstLog_w = (WORD)global_filtered_rssi;
                            37274 
                            37286 
                            37287 ; 5734 |    s_iFMSignalStrengthRSSI = global_filtered_rssi;
                            37288 
                            37291 
                            37292 ; 5735 |
                            37293 ; 5736 |    //if(iRssiLog < (sw_stereocontrol.sd_audio_pCoefLmrGaTh_u16 - 20))
                            37294 ; 5737 |    if(global_filtered_rssi < (sw_stereocontrol.sd_audio_pCoefLmrGaTh_u16 - 20))
                            37295 
P:0426 3D3600         2 235537278         move    #54,n5
P:0427 045FA0         2 235737279         movec   m0,n7
P:0428 5FF000 rrrrrr  3 236037276         move    y:Fglobal_filtered_rssi,b
P:042A 6DEF00         4 236437281         move    y:(r7+n7),r5
P:042B 45F400 000014  3 236737298         move    #>20,x1
P:042D 5F6D00         4 237137283         move    b,y:(r5+n5)
P:042E 5F7000 rrrrrr  3 237437290         move    b,y:Fs_iFMSignalStrengthRSSI
P:0430 5EF000 rrrrrr  3 237737297         move    y:Fsw_stereocontrol+5,a
P:0432 200064         2 237937299         sub     x1,a
P:0433 20000D         2 238137300         cmp     a,b
P:0434 0AF0A1 rrrrrr  6 238737301         jge     L1316
                            37302 
                            37303 ; 5738 |    {
                            37304 ; 5739 |       if(TRUE == pDrst->sd_ctl_PilotPresent_b)
                            37305 
P:0436 3E3900         2 238937307         move    #$39,n6
P:0437 22B600         2 239137308         move    r5,r6
P:0438 44F400 000001  3 239437311         move    #>1,x0
P:043A 5FEE00         4 239837310         move    y:(r6+n6),b
P:043B 2B0000         2 240037312         move    #0,b2
P:043C 20004D         2 240237313         cmp     x0,b
P:043D 0AF0A2 rrrrrr  6 240837314         jne     L1315
                            37315 
                            37316 ; 5740 |       {
                            37317 ; 5741 |            dwTempInit0 = 1;
                            37318 
                            37333 
                            37334 ; 5742 |       }
                            37335 ; 5743 |        /* configure filter for narrow band */
                            37336 ; 5744 |        iRetCode = STFM1000WriteRegister(
                            37337 ; 5745 |            INITIALIZATION1_REG_ADDR,
                            37338 ; 5746 |            B2_BYPASS_FILT_REG_MASK,
                            37339 ; 5747 |            &pDrst->sd_ctl_ShadowInitialization1_dw,
                            37340 ; 5748 |            dwTempInit0);
                            37341 
P:043F 77F400 FFFFFD  3 241137324         move    #-3,n7
P:0441 270000         2 241337320         move    #0,y1
P:0442 208600         2 241537321         move    x0,y0
P:0443 205F00         2 241737325         move    (r7)+
P:0444 4F6F00         4 242137327         move    y1,y:(r7+n7)
P:0445 205700         2 242337328         move    (r7)-
P:0446 4E6F00         4 242737330         move    y0,y:(r7+n7)
                            37343 L1315:
P:0447 3E0613         2 242937358         clr     a	                #6,n6
P:0448 22B600         2 243137344         move    r5,r6
P:0449 045FA0         2 243337345         movec   m0,n7
P:044A 044E10         4 243737348         lua     (r6)+n6,r0
P:044B 44F400 000010  3 244037360         move    #>16,x0
P:044D 280C00         2 244237359         move    #12,a0
P:044E 6E6F00         4 244637347         move    r6,y:(r7+n7)
P:044F 77F400 FFFFFD  3 244937351         move    #-3,n7
P:0451 205F00         2 245137352         move    (r7)+
P:0452 5FEF00         4 245537354         move    y:(r7+n7),b
P:0453 205700         2 245737355         move    (r7)-
P:0454 59EF00         4 246137357         move    y:(r7+n7),b0
P:0455 0BF080 rrrrrr  6 246737361         jsr     FSTFM1000WriteRegister
                            37367 
                            37368 ; 5749 |
                            37369 ; 5750 |        if (SUCCESS != iRetCode)
                            37370 
P:0457 21CF00         2 246937365         move    a,b
P:0458 20000B         2 247137372         tst     b
P:0459 0AF0A2 rrrrrr  6 247737373         jne     L1347
                            37374 
                            37375 ; 5751 |        {
                            37376 ; 5752 |            //SystemHalt();
                            37377 ; 5753 |            return iRetCode;
                            37378 ; 5754 |        }
                            37379 ; 5755 |
                            37380 ; 5756 |        /* Turn off pilot tracking */
                            37381 ; 5757 |        iRetCode = STFM1000WriteRegister(
                            37382 ; 5758 |            PILOTTRACKING_REG_ADDR,
                            37383 ; 5759 |            B2_PILOTTRACKING_ENABLE_REG_MASK,
                            37384 ; 5760 |            &pDrst->sd_ctl_ShadowPilotTracking_dw,
                            37385 ; 5761 |            0);
                            37386 
P:045B 3E0413         2 247937394         clr     a	                #4,n6
P:045C 045FA0         2 248137389         movec   m0,n7
P:045D 44F400 000008  3 248437396         move    #>8,x0
P:045F 6EEF1B         4 248837397         clr     b	                y:(r7+n7),r6
P:0460 50F400 008000  3 249137395         move    #$8000,a0
P:0462 044E10         4 249537393         lua     (r6)+n6,r0
P:0463 0BF080 rrrrrr  6 250137398         jsr     FSTFM1000WriteRegister
                            37402 
                            37403 ; 5762 |
                            37404 ; 5763 |        if (SUCCESS != iRetCode)
                            37405 
P:0465 21CF03         2 250337407         tst     a	                a,b
P:0466 0AF0A2 rrrrrr  6 250937408         jne     L1347
                            37409 
                            37410 ; 5764 |        {
                            37411 ; 5765 |            //SystemHalt();
                            37412 ; 5766 |            return iRetCode;
                            37413 ; 5767 |        }
                            37414 ; 5768 |
                            37415 ; 5769 |        /* enable "forced mono" in black box */
                            37416 ; 5770 |        g_sd_audio_pCoefForcedMono_u1 = 1;
                            37417 
                            37422 
                            37423 ; 5771 |        bIsWeakSignal = TRUE;
                            37424 
                            37427 
                            37428 ; 5772 |        pDrst->bPrevPilotPresent = 0;
                            37429 
                            37439 
                            37440 ; 5773 |
                            37441 ; 5774 |        //STFM1000SetLnaBias(iRssiLog);
                            37442 ; 5775 |        STFM1000SetLnaBias(global_filtered_rssi);
                            37443 
P:0468 3E3A00         2 251137431         move    #58,n6
P:0469 045FA0         2 251337432         movec   m0,n7
P:046A 290100         2 251537419         move    #1,b0
P:046B 597000 rrrrrr  3 251837420         move    b0,y:Fg_sd_audio_pCoefForcedMono_u1
P:046D 59701B rrrrrr  3 252137435         clr     b	                b0,y:FbIsWeakSignal
P:046F 6EEF00         4 252537434         move    y:(r7+n7),r6
P:0470 000000         2 252737434         nop             ; (inserted)
P:0471 5D6E00         4 253137436         move    b1,y:(r6+n6)
P:0472 5EF000 rrrrrr  3 253437445         move    y:Fglobal_filtered_rssi,a
P:0474 0BF080 rrrrrr  6 254037446         jsr     FSTFM1000SetLnaBias
                            37448 
                            37449 ; 5776 |    }
                            37450 
P:0476 0AF080 rrrrrr  6 254637452         jmp     L1334
                            37453 
                            37454 ; 5777 |    else   // else, strong signal side
                            37455 ; 5778 |    {
                            37456 ; 5779 |        if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            37457 
                            37459 L1316:
P:0478 57F013 rrrrrr  3 254937463         clr     a	                x:FStfmTuneDefault+60,b
P:047A 2B0000         2 255137465         move    #0,b2
P:047B 280200         2 255337464         move    #2,a0
P:047C 51F000 rrrrrr  3 255637462         move    x:FStfmTuneDefault+59,b0
P:047E 20000D         2 255837466         cmp     a,b
P:047F 0AF0A2 rrrrrr  6 256437467         jne     L1317
                            37468 
                            37469 ; 5780 |            {
                            37470 ; 5781 |            iRetCode = STFM1000WriteRegister(
                            37471 ; 5782 |                AGC_CONTROL1_REG_ADDR,
                            37472 ; 5783 |                B2_AGCREF_REG_MASK,
                            37473 ; 5784 |                &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            37474 ; 5785 |                7);
                            37475 
                            37487 
                            37488 ; 5786 |            if (SUCCESS != iRetCode)
                            37489 
P:0481 3E1E1B         2 256637485         clr     b	                #30,n6
P:0482 22B600         2 256837478         move    r5,r6
P:0483 045FA0         2 257037479         movec   m0,n7
P:0484 044E10         4 257437482         lua     (r6)+n6,r0
P:0485 290700         2 257637486         move    #7,b0
P:0486 6E6F00         4 258037481         move    r6,y:(r7+n7)
P:0487 0AF080 rrrrrr  6 258637491         jmp     L1318
                            37492 
                            37493 ; 5787 |                {
                            37494 ; 5788 |                //SystemHalt();
                            37495 ; 5789 |                return iRetCode;
                            37496 ; 5790 |                }
                            37497 ; 5791 |             } // end if TA2
                            37498 ; 5792 |         else  // must be version TB2
                            37499 ; 5793 |            {
                            37500 ; 5794 |            iRetCode = STFM1000WriteRegister(
                            37501 ; 5795 |                AGC_CONTROL1_REG_ADDR,
                            37502 ; 5796 |                0x00003F00,          // mask for B2_DB_WB_REF_REG
                            37503 ; 5797 |                &pDrst->sd_ctl_ShadowAgcControl1_dw,
                            37504 ; 5798 |                34);
                            37505 
                            37507 L1317:
                            37520 
                            37521 ; 5799 |            if (SUCCESS != iRetCode)
                            37522 
P:0489 3E1E1B         2 258837518         clr     b	                #30,n6
P:048A 22B600         2 259037511         move    r5,r6
P:048B 045FA0         2 259237512         movec   m0,n7
P:048C 044E10         4 259637515         lua     (r6)+n6,r0
P:048D 292200         2 259837519         move    #34,b0
P:048E 6E6F00         4 260237514         move    r6,y:(r7+n7)
                            37524 L1318:
P:048F 44F413 000044  3 260537526         clr     a	                #>68,x0
P:0491 50F400 003F00  3 260837527         move    #$3F00,a0
P:0493 0BF080 rrrrrr  6 261437529         jsr     FSTFM1000WriteRegister
P:0495 21CF00         2 261637531         move    a,b
P:0496 20000B         2 261837534         tst     b
P:0497 0AF0A2 rrrrrr  6 262437535         jne     L1347
                            37536 
                            37537 ; 5800 |                {
                            37538 ; 5801 |                //SystemHalt();
                            37539 ; 5802 |                return iRetCode;
                            37540 ; 5803 |                }
                            37541 ; 5804 |            } // end version TB2
                            37542 ; 5805 |
                            37543 ; 5806 |
                            37544 ; 5807 |        //if (iRssiLog > (sw_stereocontrol.sd_audio_pCoefLmrGaTh_u16 - 17))
                            37545 ; 5808 |        if (global_filtered_rssi > (sw_stereocontrol.sd_audio_pCoefLmrGaTh_u16 - 17))
                            37546 
P:0499 5FF000 rrrrrr  3 262737549         move    y:Fsw_stereocontrol+5,b
P:049B 46F400 000011  3 263037551         move    #>17,y0
P:049D 5EF05C rrrrrr  3 263337552         sub     y0,b	                y:Fglobal_filtered_rssi,a
P:049F 200005         2 263537553         cmp     b,a
P:04A0 0AF0AF rrrrrr  6 264137554         jle     L1331
                            37555 
                            37556 ; 5809 |        {
                            37557 ; 5810 |            iRetCode = STFM1000WriteRegister(
                            37558 ; 5811 |                LNA_REG_ADDR,
                            37559 ; 5812 |                0x0000000F,
                            37560 ; 5813 |                &pDrst->sd_ctl_ShadowLna_dw,
                            37561 ; 5814 |                0x00000009);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 136

M:ADDR CODE           CYCLES LINE SOURCELINE
                            37562 
P:04A2 3E1413         2 264337570         clr     a	                #20,n6
P:04A3 045FA0         2 264537565         movec   m0,n7
P:04A4 44F400 00002C  3 264837572         move    #>44,x0
P:04A6 6EEF00         4 265237567         move    y:(r7+n7),r6
P:04A7 280F1B         2 265437573         clr     b	                #15,a0
P:04A8 044E10         4 265837569         lua     (r6)+n6,r0
P:04A9 290900         2 266037574         move    #9,b0
P:04AA 0BF080 rrrrrr  6 266637575         jsr     FSTFM1000WriteRegister
                            37578 
                            37579 ; 5815 |
                            37580 ; 5816 |            if (SUCCESS != iRetCode)
                            37581 
P:04AC 21CF03         2 266837583         tst     a	                a,b
P:04AD 0AF0A2 rrrrrr  6 267437584         jne     L1347
                            37585 
                            37586 ; 5817 |            {
                            37587 ; 5818 |                //SystemHalt();
                            37588 ; 5819 |                return iRetCode;
                            37589 ; 5820 |            }
                            37590 ; 5821 |
                            37591 ; 5822 |            // STFM1000SetNearChannelOffset(1); // call SetChannelFilter
                            37592 ; 5823 |            STFM1000SetNearChannelFilter(2);
                            37593 
P:04AF 380613         2 267637599         clr     a	                #6,n0
P:04B0 60F41B rrrrrr  3 267937601         clr     b	                #FStfmTuneData,r0
P:04B2 44F400 000010  3 268237603         move    #>16,x0
P:04B4 280C00         2 268437600         move    #12,a0
P:04B5 290200         2 268637602         move    #2,b0
P:04B6 204800         2 268837598         move    (r0)+n0
P:04B7 0BF080 rrrrrr  6 269437604         jsr     FSTFM1000WriteRegister
                            37606 
                            37607 ; 5824 |
                            37608 ; 5825 |            iRetCode = STFM1000PrelimPilotCheck(&bPrelimPilotCheck);
                            37609 
P:04B9 77F400 FFFFF9  3 269737611         move    #-7,n7
P:04BB 000000         2 269937611         nop             ; (inserted)
P:04BC 044F10         4 270337613         lua     (r7)+n7,r0
P:04BD 0BF080 rrrrrr  6 270937614         jsr     FSTFM1000PrelimPilotCheck
                            37617 
                            37618 ; 5826 |            if (SUCCESS != iRetCode)
                            37619 
P:04BF 21CF03         2 271137621         tst     a	                a,b
P:04C0 0AF0A2 rrrrrr  6 271737622         jne     L1347
                            37623 
                            37624 ; 5827 |            {
                            37625 ; 5828 |                 return iRetCode;
                            37626 ; 5829 |            }
                            37627 ; 5830 |
                            37628 ; 5831 |            if (bPrelimPilotCheck)
                            37629 
P:04C2 77F400 FFFFF9  3 272037631         move    #-7,n7
P:04C4 000000         2 272237631         nop             ; (inserted)
P:04C5 5FEF00         4 272637633         move    y:(r7+n7),b
P:04C6 2B0000         2 272837634         move    #0,b2
P:04C7 20000B         2 273037635         tst     b
P:04C8 0AF0AA rrrrrr  6 273637636         jeq     L1327
                            37637 
                            37638 ; 5832 |            {
                            37639 ; 5833 |
                            37640 ; 5834 |                 iRetCode = STFM1000LookForPilot(&bPilotPresent);
                            37641 
P:04CA 77F400 FFFFFA  3 273937643         move    #-6,n7
P:04CC 000000         2 274137643         nop             ; (inserted)
P:04CD 044F16         4 274537645         lua     (r7)+n7,r6
P:04CE 22D000         2 274737646         move    r6,r0
P:04CF 0BF080 rrrrrr  6 275337647         jsr     FSTFM1000LookForPilot
                            37651 
                            37652 ; 5835 |                 if (SUCCESS != iRetCode)
                            37653 
P:04D1 21CF03         2 275537655         tst     a	                a,b
P:04D2 0AF0A2 rrrrrr  6 276137656         jne     L1347
                            37657 
                            37658 ; 5836 |                 {
                            37659 ; 5837 |                      return iRetCode;
                            37660 ; 5838 |                 }
                            37661 ; 5839 |
                            37662 ; 5840 |                 if (!bPilotPresent)
                            37663 
P:04D4 77F400 FFFFFA  3 276437665         move    #-6,n7
P:04D6 000000         2 276637665         nop             ; (inserted)
P:04D7 5FEF00         4 277037667         move    y:(r7+n7),b
P:04D8 2B0000         2 277237668         move    #0,b2
P:04D9 20000B         2 277437669         tst     b
P:04DA 0AF0A2 rrrrrr  6 278037670         jne     L1320
                            37671 
                            37672 ; 5841 |                 {
                            37673 ; 5842 |                    if(wSd_ctl_Confidence_u16 > 0)
                            37674 
P:04DC 5FF000 rrrrrr  3 278337676         move    y:FwSd_ctl_Confidence_u16,b
P:04DE 2B0000         2 278537678         move    #0,b2
P:04DF 20000B         2 278737679         tst     b
P:04E0 0AF0AF rrrrrr  6 279337680         jle     L1327
                            37681 
                            37682 ; 5843 |                    {
                            37683 ; 5844 |                        s_eOptimizeChannelState = OPTIMIZE_CHANNEL_STATE_START;
                            37684 
                            37688 
                            37689 ; 5845 |
                            37690 ; 5846 |                        while(E_TUNER_BUSY == STFM1000OptimizeChannel())
                            37691 
P:04E2 2F0000         2 279537686         move    #0,b
P:04E3 5D7000 rrrrrr  3 279837687         move    b1,y:Fs_eOptimizeChannelState
P:04E5 0BF080 rrrrrr  6 280437693 L1319:  jsr     FSTFM1000OptimizeChannel
P:04E7 46F400 FFFFFC  3 280737694         move    #>-4,y0
P:04E9 200055         2 280937695         cmp     y0,a
P:04EA 0AF0AA rrrrrr  6 281537696         jeq     L1319
                            37697 
                            37698 ; 5847 |                        {
                            37699 ; 5848 |                        }
                            37700 ; 5849 |
                            37701 ; 5850 |                        iRetCode = STFM1000LookForPilot(&bPilotPresent);
                            37702 
P:04EC 77F400 FFFFFA  3 281837704         move    #-6,n7
P:04EE 000000         2 282037704         nop             ; (inserted)
P:04EF 044F10         4 282437706         lua     (r7)+n7,r0
P:04F0 0BF080 rrrrrr  6 283037707         jsr     FSTFM1000LookForPilot
                            37710 
                            37711 ; 5851 |                        if (SUCCESS != iRetCode)
                            37712 
P:04F2 21CF00         2 283237708         move    a,b
P:04F3 20000B         2 283437714         tst     b
P:04F4 0AF0A2 rrrrrr  6 284037715         jne     L1347
                            37716 
                            37717 ; 5852 |                        {
                            37718 ; 5853 |                             return iRetCode;
                            37719 ; 5854 |                        }
                            37720 ; 5855 |                        if (bPilotPresent)
                            37721 
P:04F6 77F400 FFFFFA  3 284337723         move    #-6,n7
P:04F8 000000         2 284537723         nop             ; (inserted)
P:04F9 5EEF00         4 284937725         move    y:(r7+n7),a
P:04FA 2A0000         2 285137726         move    #0,a2
P:04FB 200003         2 285337727         tst     a
P:04FC 0AF0AA rrrrrr  6 285937728         jeq     L1325
                            37729 
                            37730 ; 5856 |                        {
                            37731 ; 5857 |                                    if(wSd_ctl_Confidence_u16 > 0)  // only allow stereo if "confident"
                            37732 
P:04FE 5FF000 rrrrrr  3 286237734         move    y:FwSd_ctl_Confidence_u16,b
P:0500 2B0000         2 286437736         move    #0,b2
P:0501 20000B         2 286637737         tst     b
P:0502 0AF0AF rrrrrr  6 287237738         jle     L1330
                            37739 
                            37740 ; 5858 |                                        {
                            37741 ; 5859 |                                g_sd_audio_pCoefForcedMono_u1 = 0;
                            37742 
P:0504 0AF080 rrrrrr  6 287837744         jmp     L1324
                            37745 
                            37746 ; 5860 |                                        }
                            37747 ; 5861 |                        }  // end if (bPilotPresent)
                            37748 ; 5862 |                        else
                            37749 ; 5863 |                        {
                            37750 ; 5864 |                            wSd_ctl_Confidence_u16--;
                            37751 ; 5865 |                            // turn off pilot tracking on chip
                            37752 ; 5866 |                            iRetCode = STFM1000WriteRegister(
                            37753 ; 5867 |                                PILOTTRACKING_REG_ADDR,
                            37754 ; 5868 |                                B2_PILOTTRACKING_ENABLE_REG_MASK,
                            37755 ; 5869 |                                &pDrst->sd_ctl_ShadowPilotTracking_dw,
                            37756 ; 5870 |                                0);
                            37757 ; 5871 |                            if (SUCCESS != iRetCode)
                            37758 ; 5872 |                            {
                            37759 ; 5873 |                                 return iRetCode;
                            37760 ; 5874 |                            }
                            37761 ; 5875 |
                            37762 ; 5876 |                            /* enable "forced mono" in black box */
                            37763 ; 5877 |                            g_sd_audio_pCoefForcedMono_u1 = 1;
                            37764 ; 5878 |                        }
                            37765 ; 5879 |                    }
                            37766 ; 5880 |                    else  // if (wSd_ctl_Confidence_u16 > 0)
                            37767 ; 5881 |                    {
                            37768 ; 5882 |                        // turn off pilot tracking on chip
                            37769 ; 5883 |                        iRetCode = STFM1000WriteRegister(
                            37770 ; 5884 |                            PILOTTRACKING_REG_ADDR,
                            37771 ; 5885 |                            B2_PILOTTRACKING_ENABLE_REG_MASK,
                            37772 ; 5886 |                            &pDrst->sd_ctl_ShadowPilotTracking_dw,
                            37773 ; 5887 |                            0);
                            37774 ; 5888 |                        if (SUCCESS != iRetCode)
                            37775 ; 5889 |                        {
                            37776 ; 5890 |                             return iRetCode;
                            37777 ; 5891 |                        }
                            37778 ; 5892 |
                            37779 ; 5893 |                        /* enable "forced mono" in black box */
                            37780 ; 5894 |                        g_sd_audio_pCoefForcedMono_u1 = 1;
                            37781 ; 5895 |                    }
                            37782 ; 5896 |                }
                            37783 ; 5897 |                else // if (!bPilotPresent)
                            37784 ; 5898 |                {
                            37785 ; 5899 |                          if (wSd_ctl_Confidence_u16 > 0)  // only allow stereo if "confident"
                            37786 
P:0506 5EF000 rrrrrr  3 288137788 L1320:  move    y:FwSd_ctl_Confidence_u16,a
P:0508 2A0000         2 288337789         move    #0,a2
P:0509 200003         2 288537790         tst     a
P:050A 0AF0AF rrrrrr  6 289137791         jle     L1330
                            37792 
                            37793 ; 5900 |                              {
                            37794 ; 5901 |                        // if pilot just discovered OR signal was weak and now is strong,
                            37795 ; 5902 |                              // then gear-shift
                            37796 ; 5903 |                        if ((!pDrst->bPrevPilotPresent) || (bIsWeakSignal))
                            37797 
P:050C 3E3A00         2 289337799         move    #58,n6
P:050D 045FA0         2 289537800         movec   m0,n7
P:050E 000000         2 289737800         nop             ; (inserted)
P:050F 6EEF00         4 290137802         move    y:(r7+n7),r6
P:0510 000000         2 290337802         nop             ; (inserted)
P:0511 5FEE00         4 290737804         move    y:(r6+n6),b
P:0512 2B0000         2 290937805         move    #0,b2
P:0513 20000B         2 291137806         tst     b
P:0514 0AF0AA rrrrrr  6 291737807         jeq     L1321
P:0516 5FF000 rrrrrr  3 292037808         move    y:FbIsWeakSignal,b
P:0518 2B0000         2 292237809         move    #0,b2
P:0519 20000B         2 292437810         tst     b
P:051A 0AF0AA rrrrrr  6 293037811         jeq     L1323
                            37812 
                            37813 ; 5904 |                            {
                            37814 ; 5905 |                            s_eOptimizeChannelState = OPTIMIZE_CHANNEL_STATE_START;
                            37815 
                            37817 L1321:
                            37819 
                            37820 ; 5906 |
                            37821 ; 5907 |                            while(E_TUNER_BUSY == STFM1000OptimizeChannel())
                            37822 
P:051C 2F0000         2 293237817         move    #0,b
P:051D 5D7000 rrrrrr  3 293537818         move    b1,y:Fs_eOptimizeChannelState
P:051F 0BF080 rrrrrr  6 294137824 L1322:  jsr     FSTFM1000OptimizeChannel
P:0521 44F400 FFFFFC  3 294437825         move    #>-4,x0
P:0523 200045         2 294637826         cmp     x0,a
P:0524 0AF0AA rrrrrr  6 295237827         jeq     L1322
                            37828 
                            37829 ; 5908 |                            {
                            37830 ; 5909 |                            }
                            37831 ; 5910 |                            g_sd_audio_pCoefForcedMono_u1 = 0;
                            37832 
                            37836 
                            37837 ; 5911 |                            }  // end if ((!pDrst->bPrevPilotPresent) || (bIsWeakSignal))
                            37838 ; 5912 |
                            37839 ; 5913 |                        // be sure pilot tracking is enabled and in "low gear"
                            37840 ; 5914 |
                            37841 ; 5915 |                        iRetCode = STFM1000WriteRegister(
                            37842 ; 5916 |
                            37843 ; 5917 |                            PILOTTRACKING_REG_ADDR,
                            37844 ; 5918 |
                            37845 ; 5919 |                            0x0000ffff,
                            37846 ; 5920 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 137

M:ADDR CODE           CYCLES LINE SOURCELINE
                            37847 ; 5921 |                            &pDrst->sd_ctl_ShadowPilotTracking_dw,
                            37848 ; 5922 |
                            37849 ; 5923 |                            0x8810);
                            37850 
P:0526 2F0000         2 295437834         move    #0,b
P:0527 5D7000 rrrrrr  3 295737835         move    b1,y:Fg_sd_audio_pCoefForcedMono_u1
                            37852 L1323:
P:0529 3E041B         2 295937858         clr     b	                #4,n6
P:052A 045FA0         2 296137853         movec   m0,n7
P:052B 44F400 000008  3 296437862         move    #>8,x0
P:052D 6EEF00         4 296837855         move    y:(r7+n7),r6
P:052E 51F413 008810  3 297137860         clr     a	                #34832,b0
P:0530 044E10         4 297537857         lua     (r6)+n6,r0
P:0531 50F400 00FFFF  3 297837861         move    #$FFFF,a0
P:0533 0BF080 rrrrrr  6 298437863         jsr     FSTFM1000WriteRegister
                            37866 
                            37867 ; 5924 |
                            37868 ; 5925 |                        if (SUCCESS != iRetCode)
                            37869 
P:0535 21CF03         2 298637871         tst     a	                a,b
P:0536 0AF0A2 rrrrrr  6 299237872         jne     L1347
                            37873 
                            37874 ; 5926 |
                            37875 ; 5927 |                        {
                            37876 ; 5928 |
                            37877 ; 5929 |                             return iRetCode;
                            37878 ; 5930 |
                            37879 ; 5931 |                        }
                            37880 ; 5932 |
                            37881 ; 5933 |
                            37882 ; 5934 |
                            37883 ; 5935 |                        // allow stereo
                            37884 ; 5936 |
                            37885 ; 5937 |                        g_sd_audio_pCoefForcedMono_u1 = 0;
                            37886 
                            37888 L1324:
                            37890 
                            37891 ; 5938 |                                }  // end if (wSd_ctl_Confidence_u16 > 0)
                            37892 ; 5939 |                }  // end if (!bPilotPresent)
                            37893 ; 5940 |            }
                            37894 
P:0538 2F0000         2 299437888         move    #0,b
P:0539 5D7000 rrrrrr  3 299737889         move    b1,y:Fg_sd_audio_pCoefForcedMono_u1
P:053B 0AF080 rrrrrr  6 300337896         jmp     L1330
                            37898 L1325:
                            37903 
                            37904 ; 5941 |            else  // if (bPrelimPilotCheck)
                            37905 ; 5942 |            {
                            37906 ; 5943 |                // turn off pilot tracking on chip
                            37907 ; 5944 |                iRetCode = STFM1000WriteRegister(
                            37908 ; 5945 |                    PILOTTRACKING_REG_ADDR,
                            37909 ; 5946 |                    B2_PILOTTRACKING_ENABLE_REG_MASK,
                            37910 ; 5947 |                    &pDrst->sd_ctl_ShadowPilotTracking_dw,
                            37911 ; 5948 |                    0);
                            37912 
P:053D 5FF000 rrrrrr  3 300637898         move    y:FwSd_ctl_Confidence_u16,b
P:053F 47F400 000001  3 300937900         move    #>1,y1
P:0541 20007C         2 301137901         sub     y1,b
P:0542 5D7000 rrrrrr  3 301437902         move    b1,y:FwSd_ctl_Confidence_u16
                            37914 L1327:
P:0544 3E0413         2 301637920         clr     a	                #4,n6
P:0545 045FA0         2 301837915         movec   m0,n7
P:0546 44F400 000008  3 302137922         move    #>8,x0
P:0548 6EEF1B         4 302537923         clr     b	                y:(r7+n7),r6
P:0549 50F400 008000  3 302837921         move    #$8000,a0
P:054B 044E10         4 303237919         lua     (r6)+n6,r0
P:054C 0BF080 rrrrrr  6 303837924         jsr     FSTFM1000WriteRegister
                            37927 
                            37928 ; 5949 |                if (SUCCESS != iRetCode)
                            37929 
P:054E 21CF03         2 304037931         tst     a	                a,b
P:054F 0AF0A2 rrrrrr  6 304637932         jne     L1347
                            37933 
                            37934 ; 5950 |                {
                            37935 ; 5951 |                     return iRetCode;
                            37936 ; 5952 |                }
                            37937 ; 5953 |
                            37938 ; 5954 |                /* enable "forced mono" in black box */
                            37939 ; 5955 |                g_sd_audio_pCoefForcedMono_u1 = 1;
                            37940 
                            37944 
                            37945 ; 5956 |            }
                            37946 ; 5957 |
                            37947 ; 5958 |            g_iTunerProcessIntervalMs = 10;
                            37948 
P:0551 290100         2 304837942         move    #1,b0
P:0552 597000 rrrrrr  3 305137943         move    b0,y:Fg_sd_audio_pCoefForcedMono_u1
                            37950 L1330:
                            37952 
                            37953 ; 5959 |            s_eMonitorSignalQualityState = MONITOR_SIGNAL_QUALITY_STATE_PROCESSING_1;
                            37954 
                            37959 
                            37960 ; 5960 |            iRetCode = E_TUNER_BUSY;
                            37961 ; 5961 |            bIsWeakSignal = FALSE;
                            37962 
P:0554 290100         2 305337956         move    #1,b0
P:0555 47F400 00000A  3 305637950         move    #>10,y1
P:0557 597000 rrrrrr  3 305937958         move    b0,y:Fs_eMonitorSignalQualityState
P:0559 477000 rrrrrr  3 306237951         move    y1,x:Fg_iTunerProcessIntervalMs
P:055B 0AF080 rrrrrr  6 306837964         jmp     L1332
                            37965 
                            37966 ; 5962 |            pDrst->bPrevPilotPresent = bPilotPresent;   // update for use next time
                            37967 ; 5963 |        }
                            37968 ; 5964 |
                            37969 ; 5965 |        else   // if (iRssiLog > (sw_stereocontrol.sd_audio_pCoefLmrGaTh_u16 - 17))
                            37970 ; 5966 |        {
                            37971 ; 5967 |
                            37972 ; 5968 |            iRetCode = STFM1000LookForPilot(&bPilotPresent);
                            37973 
P:055D 77F400 FFFFFA  3 307137975 L1331:  move    #-6,n7
P:055F 000000         2 307337975         nop             ; (inserted)
P:0560 044F10         4 307737977         lua     (r7)+n7,r0
P:0561 0BF080 rrrrrr  6 308337978         jsr     FSTFM1000LookForPilot
                            37981 
                            37982 ; 5969 |            if (SUCCESS != iRetCode)
                            37983 
P:0563 21CF03         2 308537985         tst     a	                a,b
P:0564 0AF0A2 rrrrrr  6 309137986         jne     L1347
                            37987 
                            37988 ; 5970 |            {
                            37989 ; 5971 |                 return iRetCode;
                            37990 ; 5972 |            }
                            37991 ; 5973 |
                            37992 ; 5974 |            if (!bPilotPresent)
                            37993 
P:0566 77F400 FFFFFA  3 309437995         move    #-6,n7
P:0568 000000         2 309637995         nop             ; (inserted)
P:0569 5FEF00         4 310037997         move    y:(r7+n7),b
P:056A 2B0000         2 310237998         move    #0,b2
P:056B 20000B         2 310437999         tst     b
P:056C 0AF0A2 rrrrrr  6 311038000         jne     L1334
                            38001 
                            38002 ; 5975 |            {
                            38003 ; 5976 |                // turn off pilot tracking on chip
                            38004 ; 5977 |                iRetCode = STFM1000WriteRegister(
                            38005 ; 5978 |                    PILOTTRACKING_REG_ADDR,
                            38006 ; 5979 |                    B2_PILOTTRACKING_ENABLE_REG_MASK,
                            38007 ; 5980 |                    &pDrst->sd_ctl_ShadowPilotTracking_dw,
                            38008 ; 5981 |                    0);
                            38009 
P:056E 3E0413         2 311238017         clr     a	                #4,n6
P:056F 045FA0         2 311438012         movec   m0,n7
P:0570 44F400 000008  3 311738019         move    #>8,x0
P:0572 6EEF1B         4 312138020         clr     b	                y:(r7+n7),r6
P:0573 50F400 008000  3 312438018         move    #$8000,a0
P:0575 044E10         4 312838016         lua     (r6)+n6,r0
P:0576 0BF080 rrrrrr  6 313438021         jsr     FSTFM1000WriteRegister
                            38025 
                            38026 ; 5982 |                if (SUCCESS != iRetCode)
                            38027 
P:0578 21CF03         2 313638029         tst     a	                a,b
P:0579 0AF0A2 rrrrrr  6 314238030         jne     L1347
                            38031 
                            38032 ; 5983 |                {
                            38033 ; 5984 |                     return iRetCode;
                            38034 ; 5985 |                }
                            38035 ; 5986 |
                            38036 ; 5987 |                /* enable "forced mono" in black box */
                            38037 ; 5988 |                g_sd_audio_pCoefForcedMono_u1 = 1;
                            38038 
                            38042 
                            38043 ; 5989 |                bIsWeakSignal = FALSE;
                            38044 
P:057B 280100         2 314438040         move    #1,a0
P:057C 587000 rrrrrr  3 314738041         move    a0,y:Fg_sd_audio_pCoefForcedMono_u1
                            38046 L1332:
                            38048 
                            38049 ; 5990 |                pDrst->bPrevPilotPresent = bPilotPresent;   // update for use next time
                            38050 
                            38062 
                            38063 ; 5991 |
                            38064 ; 5992 |            }  // end if (!bPilotPresent)
                            38065 ; 5993 |        } // end else if not (iRssiLog > (sw_stereocontrol.sd_audio_pCoefLmrGaTh_u16 - 17))
                            38066 ; 5994 |
                            38067 ; 5995 |
                            38068 ; 5996 |    }  // end "strong signal side"
                            38069 ; 5997 |    iRetCode = STFM1000TunerMonitorQualityStateFinal();
                            38070 
P:057E 3E3A00         2 314938052         move    #58,n6
P:057F 045FA0         2 315138053         movec   m0,n7
P:0580 260000         2 315338046         move    #0,y0
P:0581 4E7000 rrrrrr  3 315638047         move    y0,y:FbIsWeakSignal
P:0583 6EEF00         4 316038055         move    y:(r7+n7),r6
P:0584 77F400 FFFFFA  3 316338056         move    #-6,n7
P:0586 000000         2 316538056         nop             ; (inserted)
P:0587 4EEF00         4 316938058         move    y:(r7+n7),y0
P:0588 4E6E00         4 317338059         move    y0,y:(r6+n6)
P:0589 0BF080 rrrrrr  6 317938072 L1334:  jsr     FSTFM1000TunerMonitorQualityStateFinal
                            38077 
                            38078 ; 5998 |    return iRetCode;
                            38079 
P:058B 21CF00         2 318138075         move    a,b
                            38081 L1347:
                            38084 
                            38085 ; 5999 |}
                            38086 
P:058C 77F400 FFFFF8  3 318438088         move    #-8,n7
P:058E 21AE00         2 318638081         move    b1,a
P:058F 05EF7C         4 319038090         movec   y:(r7+n7),ssh
P:0590 204F00         2 319238092         move    (r7)+n7
P:0591 00000C         4 319638094         rts
                            38097 
                            38098 ; 6000 |_reentrant INT STFM1000TunerMonitorQualityStateFinal(void)
                            38099 ; 6001 |{
                            38100 
                            38105 FSTFM1000TunerMonitorQualityStateFinal:
                            38123 
                            38124 ; 6002 |    DWORD dwTemp;
                            38125 ; 6003 |    DWORD dwShadowAgcStatReg;
                            38126 ; 6004 |    DWORD dwAgcOut, dwLnaRms, dwLnaTh;
                            38127 ; 6005 |    BOOL bWriteFlag;
                            38128 ; 6006 |    STFM1000Tune_t * pDrst = &StfmTuneData;
                            38129 
                            38138 
                            38139 ; 6007 |    INT iRetCode = SUCCESS;
                            38140 ; 6008 |
                            38141 ; 6009 |    if (VERSION_TA2 == StfmTuneDefault.STFM1000_Version)
                            38142 
P:0592 055F7C         2 319838106         movec   ssh,y:(r7)+
P:0593 3F0A13         2 320038146         clr     a	                #10,n7
P:0594 57F000 rrrrrr  3 320338144         move    x:FStfmTuneDefault+60,b
P:0596 280200         2 320538147         move    #2,a0
P:0597 204F00         2 320738111         move    (r7)+n7
P:0598 77F400 FFFFFE  3 321038132         move    #-2,n7
P:059A 2B0000         2 321238148         move    #0,b2
P:059B 51F000 rrrrrr  3 321538145         move    x:FStfmTuneDefault+59,b0
P:059D 75F40D rrrrrr  3 321838149         cmp     a,b	                #FStfmTuneData,n5
P:059F 7D6F00         4 322238134         move    n5,y:(r7+n7)
P:05A0 0AF0A2 rrrrrr  6 322838150         jne     L1387
                            38151 
                            38152 ; 6010 |    {
                            38153 ; 6011 |        /* read AGC_STAT register */
                            38154 ; 6012 |        iRetCode = STFM1000ReadRegisterToShadow(AGC_STAT_REG_ADDR,
                            38155 ; 6013 |                                                &dwShadowAgcStatReg);
                            38156 
P:05A2 77F400 FFFFFC  3 323138158         move    #-4,n7
P:05A4 56F400 000064  3 323438162         move    #>100,a
P:05A6 044F15         4 323838160         lua     (r7)+n7,r5
P:05A7 22B000         2 324038161         move    r5,r0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 138

M:ADDR CODE           CYCLES LINE SOURCELINE
P:05A8 0BF080 rrrrrr  6 324638163         jsr     FSTFM1000ReadRegisterToShadow
                            38166 
                            38167 ; 6014 |
                            38168 ; 6015 |        if (SUCCESS != iRetCode)
                            38169 
P:05AA 21CF03         2 324838171         tst     a	                a,b
P:05AB 0AF0A2 rrrrrr  6 325438172         jne     L1391
                            38173 
                            38174 ; 6016 |        {
                            38175 ; 6017 |            //SystemHalt();
                            38176 ; 6018 |             return iRetCode;
                            38177 ; 6019 |        }
                            38178 ; 6020 |
                            38179 ; 6021 |        /* extract AgcOut */
                            38180 ; 6022 |        STFM1000ReadShadowRegister(AGCOUT_STAT_REG_MASK, &dwShadowAgcStatReg,
                            38181 ; 6023 |                &dwAgcOut);
                            38182 
P:05AD 77F400 FFFFFA  3 325738184         move    #-6,n7
P:05AF 56F400 00001F  3 326038190         move    #>$1F,a
P:05B1 044F14         4 326438186         lua     (r7)+n7,r4
P:05B2 77F400 FFFFFC  3 326738187         move    #-4,n7
P:05B4 000000         2 326938187         nop             ; (inserted)
P:05B5 044F10         4 327338189         lua     (r7)+n7,r0
P:05B6 0BF080 rrrrrr  6 327938191         jsr     FSTFM1000ReadShadowRegister
                            38193 
                            38194 ; 6024 |
                            38195 ; 6025 |        /* extract LnaRms */
                            38196 ; 6026 |        STFM1000ReadShadowRegister(LNA_RMS_REG_MASK, &dwShadowAgcStatReg,
                            38197 ; 6027 |                &dwLnaRms);
                            38198 
P:05B8 77F413 FFFFF8  3 328238206         clr     a	                #-8,n7
P:05BA 50F400 001F00  3 328538207         move    #$1F00,a0
P:05BC 044F14         4 328938202         lua     (r7)+n7,r4
P:05BD 77F400 FFFFFC  3 329238203         move    #-4,n7
P:05BF 000000         2 329438203         nop             ; (inserted)
P:05C0 044F10         4 329838205         lua     (r7)+n7,r0
P:05C1 0BF080 rrrrrr  6 330438208         jsr     FSTFM1000ReadShadowRegister
                            38209 
                            38210 ; 6028 |
                            38211 ; 6029 |        if (VERSION_TB2 == StfmTuneDefault.STFM1000_Version)
                            38212 
P:05C3 57F013 rrrrrr  3 330738216         clr     a	                x:FStfmTuneDefault+60,b
P:05C5 2B0000         2 330938218         move    #0,b2
P:05C6 281200         2 331138217         move    #18,a0
P:05C7 51F000 rrrrrr  3 331438215         move    x:FStfmTuneDefault+59,b0
P:05C9 20000D         2 331638219         cmp     a,b
P:05CA 0AF0A2 rrrrrr  6 332238220         jne     L1380
                            38221 
                            38222 ; 6030 |        {
                            38223 ; 6031 |             dwLnaTh = 12;
                            38224 
                            38235 
                            38236 ; 6032 |        }   //VERSION_TB2
                            38237 
P:05CC 77F400 FFFFF6  3 332538228         move    #-10,n7
P:05CE 57F400 00000C  3 332838227         move    #>12,b
P:05D0 205F13         2 333038226         clr     a	                (r7)+
P:05D1 5E6F00         4 333438231         move    a,y:(r7+n7)
P:05D2 205700         2 333638232         move    (r7)-
P:05D3 5F6F00         4 334038234         move    b,y:(r7+n7)
P:05D4 0AF080 rrrrrr  6 334638239         jmp     L1381
                            38240 
                            38241 ; 6033 |        else
                            38242 ; 6034 |        {
                            38243 ; 6035 |            /* read AGC_CONTROL1 register */
                            38244 ; 6036 |            iRetCode = STFM1000ReadRegisterToShadow(AGC_CONTROL1_REG_ADDR,
                            38245 ; 6037 |                    &pDrst->sd_ctl_ShadowAgcControl1_dw);
                            38246 
P:05D6 3B1E00         2 334838248 L1380:  move    #30,n3
P:05D7 77F400 FFFFFE  3 335138249         move    #-2,n7
P:05D9 56F400 000044  3 335438258         move    #>68,a
P:05DB 6BEF00         4 335838251         move    y:(r7+n7),r3
P:05DC 045FA0         2 336038254         movec   m0,n7
P:05DD 044B1B         4 336438253         lua     (r3)+n3,n3
P:05DE 237000         2 336638257         move    n3,r0
P:05DF 7B6F00         4 337038256         move    n3,y:(r7+n7)
P:05E0 0BF080 rrrrrr  6 337638259         jsr     FSTFM1000ReadRegisterToShadow
                            38262 
                            38263 ; 6038 |
                            38264 ; 6039 |            if (SUCCESS != iRetCode)
                            38265 
P:05E2 21CF00         2 337838260         move    a,b
P:05E3 20000B         2 338038267         tst     b
P:05E4 0AF0A2 rrrrrr  6 338638268         jne     L1391
                            38269 
                            38270 ; 6040 |            {
                            38271 ; 6041 |                //SystemHalt();
                            38272 ; 6042 |                return iRetCode;
                            38273 ; 6043 |            }
                            38274 ; 6044 |
                            38275 ; 6045 |            /* extract LNATH */
                            38276 ; 6046 |            STFM1000ReadShadowRegister(B2_LNATH_REG_MASK,
                            38277 ; 6047 |                    &pDrst->sd_ctl_ShadowAgcControl1_dw, &dwLnaTh);
                            38278 
P:05E6 77F413 FFFFF6  3 338938286         clr     a	                #-10,n7
P:05E8 50F400 1F0000  3 339238287         move    #$1F0000,a0
P:05EA 044F14         4 339638282         lua     (r7)+n7,r4
P:05EB 045FA0         2 339838283         movec   m0,n7
P:05EC 000000         2 340038283         nop             ; (inserted)
P:05ED 68EF00         4 340438285         move    y:(r7+n7),r0
P:05EE 0BF080 rrrrrr  6 341038288         jsr     FSTFM1000ReadShadowRegister
                            38290 
                            38291 ; 6048 |        }
                            38292 ; 6049 |
                            38293 ; 6050 |        /* Reset Write Flag */
                            38294 ; 6051 |        bWriteFlag = FALSE;
                            38295 
                            38297 L1381:
                            38299 
                            38300 ; 6052 |        dwTemp = 0;
                            38301 
                            38306 
                            38307 ; 6053 |
                            38308 ; 6054 |        if ( (dwLnaRms > dwLnaTh) && (dwAgcOut <= 1) )
                            38309 
P:05F0 77F400 FFFFF8  3 341338311         move    #-8,n7
P:05F2 260000         2 341538304         move    #0,y0
P:05F3 270000         2 341738303         move    #0,y1
P:05F4 205F00         2 341938312         move    (r7)+
P:05F5 5FEF00         4 342338314         move    y:(r7+n7),b
P:05F6 2B0000         2 342538326         move    #0,b2
P:05F7 205700         2 342738315         move    (r7)-
P:05F8 59EF00         4 343138317         move    y:(r7+n7),b0
P:05F9 77F400 FFFFF6  3 343438318         move    #-10,n7
P:05FB 205F00         2 343638319         move    (r7)+
P:05FC 5EEF00         4 344038321         move    y:(r7+n7),a
P:05FD 2A0000         2 344238325         move    #0,a2
P:05FE 205700         2 344438322         move    (r7)-
P:05FF 58EF00         4 344838324         move    y:(r7+n7),a0
P:0600 24000D         2 345038327         cmp     a,b	                #0,x0
P:0601 0AF0AF rrrrrr  6 345638328         jle     L1383
P:0603 77F400 FFFFFA  3 345938329         move    #-6,n7
P:0605 205F13         2 346138336         clr     a	                (r7)+
P:0606 000008         2 346338337         inc     a
P:0607 5FEF00         4 346738332         move    y:(r7+n7),b
P:0608 2B0000         2 346938338         move    #0,b2
P:0609 205700         2 347138333         move    (r7)-
P:060A 59EF00         4 347538335         move    y:(r7+n7),b0
P:060B 20000D         2 347738339         cmp     a,b
P:060C 0AF0A7 rrrrrr  6 348338340         jgt     L1383
                            38341 
                            38342 ; 6055 |        {
                            38343 ; 6056 |            dwTemp = 1;
                            38344 
                            38348 
                            38349 ; 6057 |            /* Set Write Flag */
                            38350 ; 6058 |            bWriteFlag = TRUE;
                            38351 
P:060E 210600         2 348538346         move    a0,y0
P:060F 218700         2 348738347         move    a1,y1
P:0610 0AF080 rrrrrr  6 349338353         jmp     L1384
                            38354 
                            38355 ; 6059 |        }
                            38356 ; 6060 |        else
                            38357 ; 6061 |        {
                            38358 ; 6062 |            if (dwAgcOut > 15)
                            38359 
                            38361 L1383:
P:0612 77F400 FFFFFA  3 349638361         move    #-6,n7
P:0614 205F13         2 349838368         clr     a	                (r7)+
P:0615 280F00         2 350038369         move    #15,a0
P:0616 5FEF00         4 350438364         move    y:(r7+n7),b
P:0617 2B0000         2 350638370         move    #0,b2
P:0618 205700         2 350838365         move    (r7)-
P:0619 59EF00         4 351238367         move    y:(r7+n7),b0
P:061A 20000D         2 351438371         cmp     a,b
P:061B 0AF0AF rrrrrr  6 352038372         jle     L1385
                            38373 
                            38374 ; 6063 |            {
                            38375 ; 6064 |                dwTemp = 0;
                            38376 
                            38380 
                            38381 ; 6065 |                /* Set Write Flag */
                            38382 ; 6066 |                bWriteFlag = TRUE;
                            38383 
P:061D 270000         2 352238378         move    #0,y1
P:061E 260000         2 352438379         move    #0,y0
                            38385 L1384:
                            38386 
                            38387 ; 6067 |            }
                            38388 ; 6068 |        }
                            38389 ; 6069 |
                            38390 ; 6070 |        /* Is Write Flag Set? */
                            38391 ; 6071 |        if (bWriteFlag == TRUE)
                            38392 
P:061F 44F400 000001  3 352738385         move    #>1,x0
                            38394 L1385:
P:0621 44F449 000001  3 353038394         tfr     x0,b	                #>1,x0
P:0623 2B0000         2 353238396         move    #0,b2
P:0624 20004D         2 353438397         cmp     x0,b
P:0625 0AF0A2 rrrrrr  6 354038400         jne     L1387
                            38401 
                            38402 ; 6072 |        {
                            38403 ; 6073 |            iRetCode = STFM1000WriteRegister(
                            38404 ; 6074 |                LNA_REG_ADDR,
                            38405 ; 6075 |                USEATTEN_MASK,
                            38406 ; 6076 |                &pDrst->sd_ctl_ShadowLna_dw,
                            38407 ; 6077 |                dwTemp);
                            38408 
P:0627 77F413 FFFFFE  3 354338416         clr     a	                #-2,n7
P:0629 381479         2 354538418         tfr     y1,b	                #20,n0
P:062A 68EF00         4 354938413         move    y:(r7+n7),r0
P:062B 44F400 00002C  3 355238420         move    #>44,x0
P:062D 50F400 600000  3 355538417         move    #$600000,a0
P:062F 20C900         2 355738419         move    y0,b0
P:0630 204800         2 355938415         move    (r0)+n0
P:0631 0BF080 rrrrrr  6 356538421         jsr     FSTFM1000WriteRegister
                            38428 
                            38429 ; 6078 |
                            38430 ; 6079 |            if (SUCCESS != iRetCode)
                            38431 
P:0633 21CF03         2 356738433         tst     a	                a,b
P:0634 0AF0A2 rrrrrr  6 357338434         jne     L1391
                            38435 
                            38436 ; 6080 |            {
                            38437 ; 6081 |                //SystemHalt();
                            38438 ; 6082 |                 return iRetCode;
                            38439 ; 6083 |            }
                            38440 ; 6084 |        }
                            38441 ; 6085 |    }   //VERSION_TA2
                            38442 ; 6086 |    /* disable buffered writes */
                            38443 ; 6087 |    iRetCode = STFM1000WriteRegister(
                            38444 ; 6088 |        DATAPATH_REG_ADDR,
                            38445 ; 6089 |        DB_ACCEPT_REG_MASK,
                            38446 ; 6090 |        &pDrst->sd_ctl_ShadowDataPath_dw,
                            38447 ; 6091 |        0);
                            38448 
                            38450 L1387:
P:0636 77F41B FFFFFE  3 357638459         clr     b	                #-2,n7
P:0638 382213         2 357838460         clr     a	                #34,n0
P:0639 68EF00         4 358238453         move    y:(r7+n7),r0
P:063A 44F400 00005C  3 358538462         move    #>92,x0
P:063C 50F400 010000  3 358838461         move    #$10000,a0
P:063E 204800         2 359038455         move    (r0)+n0
P:063F 0BF080 rrrrrr  6 359638463         jsr     FSTFM1000WriteRegister
                            38467 
                            38468 ; 6092 |    if (SUCCESS != iRetCode)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 139

M:ADDR CODE           CYCLES LINE SOURCELINE
                            38469 
P:0641 21CF03         2 359838471         tst     a	                a,b
P:0642 0AF0A2 rrrrrr  6 360438472         jne     L1391
                            38473 
                            38474 ; 6093 |    {
                            38475 ; 6094 |        //SystemHalt();
                            38476 ; 6095 |        return iRetCode;
                            38477 ; 6096 |    }
                            38478 ; 6097 |    s_eMonitorSignalQualityState = MONITOR_SIGNAL_QUALITY_STATE_COMPLETE;
                            38479 
                            38483 
                            38484 ; 6098 |    return iRetCode;
                            38485 
P:0644 45F400 000004  3 360738481         move    #>4,x1
P:0646 4D7000 rrrrrr  3 361038482         move    x1,y:Fs_eMonitorSignalQualityState
                            38487 L1391:
                            38490 
                            38491 ; 6099 |
                            38492 ; 6100 |}
                            38493 
P:0648 77F400 FFFFF5  3 361338495         move    #-11,n7
P:064A 21AE00         2 361538487         move    b1,a
P:064B 05EF7C         4 361938497         movec   y:(r7+n7),ssh
P:064C 204F00         2 362138499         move    (r7)+n7
P:064D 00000C         4 362538501         rts
                            38504 
                            38505 ; 6101 |////////////////////////////////////////////////////////////////////////////////
                            38506 ; 6102 |//
                            38507 ; 6103 |//>  Name:          STFM1000ContinueScanning
                            38508 ; 6104 |//
                            38509 ; 6105 |//   Type:          Function
                            38510 ; 6106 |//
                            38511 ; 6107 |//   Description:   Scanning until complete
                            38512 ; 6108 |//
                            38513 ; 6109 |//   Inputs:        none
                            38514 ; 6110 |//
                            38515 ; 6111 |//   Outputs:       Busy or SUCCESS
                            38516 ; 6112 |//
                            38517 ; 6113 |//   Notes:         none
                            38518 ; 6114 |//<
                            38519 ; 6115 |////////////////////////////////////////////////////////////////////////////////
                            38520 ; 6116 |_reentrant INT STFM1000ContinueScanning( void )
                            38521 ; 6117 |{
                            38522 
                            38527 FSTFM1000ContinueScanning:
                            38537 
                            38538 ; 6118 |        INT iTuningStatus;
                            38539 ; 6119 |
                            38540 ; 6120 |        if ((s_iFMSignalStrengthRSSI > StfmTuneData.sd_ctl_TuneRssiTh_w ) &&
                            38541 ; 6121 |        (s_wCurrentFMFrequency >= FM_BAND_LIMIT_LOW_FREQ) &&
                            38542 ; 6122 |        (s_wCurrentFMFrequency <= FM_BAND_LIMIT_HIGH_FREQ)) // test for valid station, IF count in the range and Level is OK
                            38543 
P:064E 055F7C         2 362738528         movec   ssh,y:(r7)+
P:064F 5FF000 rrrrrr  3 363038545         move    y:Fs_iFMSignalStrengthRSSI,b
P:0651 5EF000 rrrrrr  3 363338546         move    y:FStfmTuneData+36,a
P:0653 2B0000         2 363538548         move    #0,b2
P:0654 2A0000         2 363738547         move    #0,a2
P:0655 3F030D         2 363938549         cmp     a,b	                #3,n7
P:0656 000000         2 364138549         nop             ; (inserted)
P:0657 204F00         2 364338533         move    (r7)+n7
P:0658 0AF0AF rrrrrr  6 364938550         jle     L1417
P:065A 5EF000 rrrrrr  3 365238551         move    y:Fs_wCurrentFMFrequency,a
P:065C 46F400 0155CC  3 365538552         move    #87500,y0
P:065E 2A0000         2 365738553         move    #0,a2
P:065F 200055         2 365938554         cmp     y0,a
P:0660 0AF0A9 rrrrrr  6 366538555         jlt     L1417
P:0662 45F400 01A5E0  3 366838556         move    #108000,x1
P:0664 200065         2 367038557         cmp     x1,a
P:0665 0AF0A7 rrrrrr  6 367638558         jgt     L1417
                            38559 
                            38560 ; 6123 |        {
                            38561 ; 6124 |                SysPostMessage(2,MENU_TUNER_TUNED);
                            38562 
P:0667 290200         2 367838564         move    #2,b0
P:0668 46F400 06000A  3 368138565         move    #393226,y0
P:066A 4E5F00         2 368338566         move    y0,y:(r7)+
P:066B 595F00         2 368538568         move    b0,y:(r7)+
P:066C 0BF080 rrrrrr  6 369138570         jsr     FSysPostMessage
                            38575 
                            38576 ; 6125 |                if (s_iFMPresetCount < NUMBER_OF_PRESETS)
                            38577 
P:066E 5FF000 rrrrrr  3 369438579         move    y:Fs_iFMPresetCount,b
P:0670 13B400 00000A  3 369738581         move    #>10,x0	                b,y1
P:0672 20574D         2 369938582         cmp     x0,b	                (r7)-
P:0673 205700         2 370138573         move    (r7)-
P:0674 0AF0A1 rrrrrr  6 370738583         jge     L1408
                            38584 
                            38585 ; 6126 |                {
                            38586 ; 6127 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            38587 ; 6128 |            g_astPresetStations[s_iFMPresetCount].Frequency = s_wDisplayFMFrequency;
                            38588 ; 6129 |#else
                            38589 ; 6130 |#ifdef SD_USE_100KHZ_TUNING_GRID
                            38590 ; 6131 |            g_astPresetStations[s_iFMPresetCount].Frequency = ((s_wCurrentFMFrequency+FM_TUNER_GRID/2)/FM_TUNER_GRID)*FM_TUNER_GRID;
                            38591 
P:0676 5EF000 rrrrrr  3 371038593         move    y:Fs_wCurrentFMFrequency,a
P:0678 46F400 000032  3 371338594         move    #>50,y0
P:067A 57F450 000064  3 371638595         add     y0,a	                #>100,b
P:067C 0BF080 rrrrrr  6 372238597         jsr     Rdiv_uiuiui
                            38610 
                            38611 ; 6132 |
                            38612 ; 6133 |#else
                            38613 ; 6134 |            g_astPresetStations[s_iFMPresetCount].Frequency = s_wCurrentFMFrequency;
                            38614 ; 6135 |#endif
                            38615 ; 6136 |#endif
                            38616 ; 6137 |            g_astPresetStations[s_iFMPresetCount++].Level = s_iFMSignalStrengthRSSI;
                            38617 
                            38629 
                            38630 ; 6138 |            g_wCurrentPreset = s_iFMPresetCount;
                            38631 
                            38634 
                            38635 ; 6139 |                }
                            38636 
P:067E 21A600         2 372438598         move    b1,y0
P:067F 210500         2 372638599         move    a0,x1
P:0680 65F4E0 rrrrrr  3 372938600         mpy     x1,y0,a	                #Fg_astPresetStations,r5
P:0682 20EF22         2 373138601         asr     a	                y1,b
P:0683 20003B         2 373338603         lsl     b
P:0684 21BD79         2 373538620         tfr     y1,b	                b1,n5
P:0685 20003B         2 373738621         lsl     b
P:0686 044D16         4 374138607         lua     (r5)+n5,r6
P:0687 21BE00         2 374338622         move    b1,n6
P:0688 586600         2 374538609         move    a0,y:(r6)
P:0689 66F400 rrrrrr  3 374838623         move    #Fg_astPresetStations+1,r6
P:068B 57F400 000001  3 375138626         move    #>1,b
P:068D 4EF078 rrrrrr  3 375438627         add     y1,b	                y:Fs_iFMSignalStrengthRSSI,y0
P:068F 4E6E00         4 375838625         move    y0,y:(r6+n6)
P:0690 5D7000 rrrrrr  3 376138628         move    b1,y:Fs_iFMPresetCount
P:0692 5D7000 rrrrrr  3 376438633         move    b1,y:Fg_wCurrentPreset
P:0694 0AF080 rrrrrr  6 377038638         jmp     L1414
                            38639 
                            38640 ; 6140 |                else // if the preset stations are full, replace the weaker stations with a stronger one
                            38641 ; 6141 |                {
                            38642 ; 6142 |                        INT iCount1, iCount2;
                            38643 ; 6143 |            FMTunerPreset stPresetTemp;
                            38644 ; 6144 |            // Bubble sort, the last station is always the weakest one
                            38645 ; 6145 |            for (iCount1 = 0; iCount1<NUMBER_OF_PRESETS; iCount1++)
                            38646 
                            38648 L1408:
P:0696 260049         2 377238648         tfr     x0,b	                #0,y0
P:0697 45F40B 000001  3 377538659         tst     b	                #>1,x1
P:0699 0AF0AA rrrrrr  6 378138660         jeq     L1423
P:069B 06CD00 rrrrrr  6 378738661         do      b1,L1423
                            38663 
                            38664 ; 6146 |            for (iCount2 = 0; iCount2<(NUMBER_OF_PRESETS - iCount1- 1); iCount2++)
                            38665 
P:069D 65F41B rrrrrr  3 379038667         clr     b	                #Fg_astPresetStations+1,r5
P:069F 76F441 rrrrrr  3 379338671         tfr     x0,a	                #Fg_astPresetStations,n6
P:06A1 200054         2 379538672         sub     y0,a
P:06A2 200064         2 379738673         sub     x1,a
P:06A3 0AF080 rrrrrr  6 380338674         jmp     L1412
                            38675 
                            38676 ; 6147 |            if (g_astPresetStations[iCount2].Level < g_astPresetStations[iCount2+1].Level)
                            38677 
                            38679 L1410:
P:06A5 77F400 FFFFFD  3 380638679         move    #-3,n7
P:06A7 64F400 rrrrrr  3 380938688         move    #Fg_astPresetStations+3,r4
P:06A9 5D6F3B         4 381338682         lsl     b	                b1,y:(r7+n7)
P:06AA 21B800         2 381538686         move    b1,n0
P:06AB 21BD00         2 381738685         move    b1,n5
P:06AC 231C00         2 381938689         move    n0,n4
P:06AD 5FED00         4 382338687         move    y:(r5+n5),b
P:06AE 4FEC00         4 382738691         move    y:(r4+n4),y1
P:06AF 20007D         2 382938692         cmp     y1,b
P:06B0 0AF0A1 rrrrrr  6 383538693         jge     L1411
                            38694 
                            38695 ; 6148 |            {
                            38696 ; 6149 |                stPresetTemp = g_astPresetStations[iCount2+1];
                            38697 
                            38711 
                            38712 ; 6150 |                g_astPresetStations[iCount2+1] = g_astPresetStations[iCount2];
                            38713 
                            38724 
                            38725 ; 6151 |                g_astPresetStations[iCount2] = stPresetTemp;
                            38726 
                            38734 
                            38735 ; 6152 |            }
                            38736 
P:06B2 231000         2 383738715         move    n0,r0
P:06B3 64F400 rrrrrr  3 384038699         move    #Fg_astPresetStations+2,r4
P:06B5 77F400 FFFFFE  3 384338703         move    #-2,n7
P:06B7 23D800         2 384538716         move    n6,n0
P:06B8 044C16         4 384938701         lua     (r4)+n4,r6
P:06B9 044F14         4 385338705         lua     (r7)+n7,r4
P:06BA 22D300         2 385538702         move    r6,r3
P:06BB 4FDE00         2 385738706         move    y:(r6)+,y1
P:06BC 4F5C00         2 385938707         move    y1,y:(r4)+
P:06BD 4FD600         2 386138708         move    y:(r6)-,y1
P:06BE 044816         4 386538718         lua     (r0)+n0,r6
P:06BF 22D200         2 386738719         move    r6,r2
P:06C0 4F5400         2 386938709         move    y1,y:(r4)-
P:06C1 4FDE00         2 387138720         move    y:(r6)+,y1
P:06C2 4F5B00         2 387338721         move    y1,y:(r3)+
P:06C3 4FD600         2 387538722         move    y:(r6)-,y1
P:06C4 4F5300         2 387738723         move    y1,y:(r3)-
P:06C5 044F13         4 388138728         lua     (r7)+n7,r3
P:06C6 000000         2 388338728         nop             ; (inserted)
P:06C7 5FDB00         2 388538730         move    y:(r3)+,b
P:06C8 5F5A00         2 388738731         move    b,y:(r2)+
P:06C9 5FD300         2 388938732         move    y:(r3)-,b
P:06CA 5F5200         2 389138733         move    b,y:(r2)-
                            38738 L1411:
P:06CB 77F400 FFFFFD  3 389438740         move    #-3,n7
P:06CD 000000         2 389638740         nop             ; (inserted)
P:06CE 5FEF00         4 390038742         move    y:(r7+n7),b
P:06CF 200068         2 390238743         add     x1,b
P:06D0 20000D         2 390438746 L1412:  cmp     a,b
P:06D1 0AF0A9 rrrrrr  6 391038747         jlt     L1410
P:06D3 20CF00         2 391238749         move    y0,b
P:06D4 200068         2 391438750         add     x1,b
P:06D5 21A600         2 391638754         move    b1,y0
                       (129)38757 L1423:
                            38759 
                            38760 ; 6153 |
                            38761 ; 6154 |            // Replace the last preset station
                            38762 ; 6155 |                        if (g_astPresetStations[NUMBER_OF_PRESETS-1].Level < s_iFMSignalStrengthRSSI) // replaced the weaker one
                            38763 
P:06D6 5FF000 rrrrrr  3 391938765         move    y:Fg_astPresetStations+19,b
P:06D8 5EF000 rrrrrr  3 392238766         move    y:Fs_iFMSignalStrengthRSSI,a
P:06DA 20000D         2 392438767         cmp     a,b
P:06DB 0AF0A1 rrrrrr  6 393038768         jge     L1414
                            38769 
                            38770 ; 6156 |                        {
                            38771 ; 6157 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            38772 ; 6158 |                    g_astPresetStations[NUMBER_OF_PRESETS-1].Frequency = s_wDisplayFMFrequency;
                            38773 ; 6159 |#else
                            38774 ; 6160 |#ifdef SD_USE_100KHZ_TUNING_GRID
                            38775 ; 6161 |
                            38776 ; 6162 |                    g_astPresetStations[NUMBER_OF_PRESETS-1].Frequency = ((s_wCurrentFMFrequency+FM_TUNER_GRID/2)/FM_TUNER_GRID)*FM_TUNER_GRID;
                            38777 
P:06DD 5EF000 rrrrrr  3 393338779         move    y:Fs_wCurrentFMFrequency,a
P:06DF 44F400 000032  3 393638780         move    #>50,x0
P:06E1 57F440 000064  3 393938781         add     x0,a	                #>100,b
P:06E3 0BF080 rrrrrr  6 394538783         jsr     Rdiv_uiuiui
                            38790 
                            38791 ; 6163 |#else
                            38792 ; 6164 |                    g_astPresetStations[NUMBER_OF_PRESETS-1].Frequency = s_wCurrentFMFrequency;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 140

M:ADDR CODE           CYCLES LINE SOURCELINE
                            38793 ; 6165 |#endif
                            38794 ; 6166 |#endif
                            38795 ; 6167 |                    g_astPresetStations[NUMBER_OF_PRESETS-1].Level = s_iFMSignalStrengthRSSI;
                            38796 
                            38802 
                            38803 ; 6168 |                        }
                            38804 ; 6169 |
                            38805 ; 6170 |                }
                            38806 ; 6171 |                if (s_wCurrentFMFrequency  < FM_BAND_LIMIT_HIGH_FREQ) // scan more station if not at the end of the FM band
                            38807 
P:06E5 21A700         2 394738784         move    b1,y1
P:06E6 210600         2 394938785         move    a0,y0
P:06E7 2000B8         2 395138786         mpy     y0,y1,b
P:06E8 20002A         2 395338787         asr     b
P:06E9 597000 rrrrrr  3 395638789         move    b0,y:Fg_astPresetStations+18
P:06EB 5EF000 rrrrrr  3 395938798         move    y:Fs_iFMSignalStrengthRSSI,a
P:06ED 5E7000 rrrrrr  3 396238799         move    a,y:Fg_astPresetStations+19
P:06EF 5EF000 rrrrrr  3 396538809 L1414:  move    y:Fs_wCurrentFMFrequency,a
P:06F1 44F400 01A5E0  3 396838810         move    #108000,x0
P:06F3 2A0000         2 397038811         move    #0,a2
P:06F4 200045         2 397238812         cmp     x0,a
P:06F5 0AF0A1 rrrrrr  6 397838813         jge     L1421
                            38814 
                            38815 ; 6172 |        {
                            38816 ; 6173 |                        iTuningStatus = TunerDriverSearchUp();
                            38817 
P:06F7 0AF080 rrrrrr  6 398438819         jmp     L1419
                            38820 
                            38821 ; 6174 |                }
                            38822 ; 6175 |                else    // stop preset scanning
                            38823 ; 6176 |                {
                            38824 ; 6177 |                        iTuningStatus = STFM1000EndAutoScanning();
                            38825 ; 6178 |                }
                            38826 ; 6179 |        }
                            38827 ; 6180 |    // Arrived at tuned station that is not upto par
                            38828 ; 6181 |        else
                            38829 ; 6182 |    {
                            38830 ; 6183 |                if (s_wCurrentFMFrequency  < FM_BAND_LIMIT_HIGH_FREQ) // scan more station if not at the end of the FM band
                            38831 
P:06F9 5FF000 rrrrrr  3 398738833 L1417:  move    y:Fs_wCurrentFMFrequency,b
P:06FB 45F400 01A5E0  3 399038834         move    #108000,x1
P:06FD 2B0000         2 399238835         move    #0,b2
P:06FE 20006D         2 399438836         cmp     x1,b
P:06FF 0AF0A1 rrrrrr  6 400038837         jge     L1421
                            38838 
                            38839 ; 6184 |                {
                            38840 ; 6185 |            if (s_wCurrentFMFrequency < FM_BAND_LIMIT_LOW_FREQ)
                            38841 
P:0701 46F400 0155CC  3 400338843         move    #87500,y0
P:0703 20005D         2 400538844         cmp     y0,b
P:0704 0AF0A1 rrrrrr  6 401138845         jge     L1419
                            38846 
                            38847 ; 6186 |                s_wCurrentFMFrequency = FM_BAND_LIMIT_LOW_FREQ; // Put the tuner in the scanning range
                            38848 
                            38851 
                            38852 ; 6187 |                        iTuningStatus = TunerDriverSearchUp();
                            38853 
P:0706 4E7000 rrrrrr  3 401438850         move    y0,y:Fs_wCurrentFMFrequency
P:0708 0BF080 rrrrrr  6 402038855 L1419:  jsr     FTunerDriverSearchUp
                            38857 
                            38858 ; 6188 |                }
                            38859 
P:070A 0AF080 rrrrrr  6 402638861         jmp     L1422
                            38862 
                            38863 ; 6189 |                else    // stop preset scanning
                            38864 ; 6190 |                {
                            38865 ; 6191 |                        iTuningStatus = STFM1000EndAutoScanning();
                            38866 
P:070C 0BF080 rrrrrr  6 403238868 L1421:  jsr     FSTFM1000EndAutoScanning
                            38869 
                            38870 ; 6192 |                }
                            38871 ; 6193 |        }
                            38872 
                            38874 L1422:
                            38875 
                            38876 ; 6194 |
                            38877 ; 6195 |        return iTuningStatus;
                            38878 ; 6196 |}
                            38879 
P:070E 77F400 FFFFFC  3 403538881         move    #-4,n7
P:0710 000000         2 403738881         nop             ; (inserted)
P:0711 05EF7C         4 404138883         movec   y:(r7+n7),ssh
P:0712 204F00         2 404338885         move    (r7)+n7
P:0713 00000C         4 404738887         rts
                            38890 
                            38891 ; 6197 |////////////////////////////////////////////////////////////////////////////////
                            38892 ; 6198 |//
                            38893 ; 6199 |//>  Name:          STFM1000TunerSearchEnded
                            38894 ; 6200 |//
                            38895 ; 6201 |//   Type:          Function
                            38896 ; 6202 |//
                            38897 ; 6203 |//   Description:   Search complete
                            38898 ; 6204 |//
                            38899 ; 6205 |//   Inputs:        wSearchFrequency
                            38900 ; 6206 |//
                            38901 ; 6207 |//   Outputs:       Busy or SUCCESS
                            38902 ; 6208 |//
                            38903 ; 6209 |//   Notes:         none
                            38904 ; 6210 |//<
                            38905 ; 6211 |////////////////////////////////////////////////////////////////////////////////
                            38906 ; 6212 |#ifdef FUNCLET
                            38907 ; 6213 |    #pragma asm
P:0018                      38908         org p,".stfm1000_SYS":
                            38909         FSTFM1000TunerSearchEnded:
                            38910 
                            38915 
                            38916         ;If using funclet, function will be executed via funclet kernel
                            38917         CallFunclet2 RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED
P:0018 0D0082         4   5238917     jsr       $82
P:0019 000436               38917     DC       RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED  ; 1 word
                            38918 
P:0000                      38919         org p,"SYSFUNCLET_STFM1000_TUNER_SEARCH_ENDED_P":
P:0000 000436               38920         dc      RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED
                            38921 ; 6227 |    #pragma endasm
                            38922 ; 6228 |_reentrant INT STFM1000TunerSearchEnded_Funclet(WORD wSearchFrequency )
                            38923 ; 6229 |#else
                            38924 ; 6230 |_reentrant INT STFM1000TunerSearchEnded(WORD wSearchFrequency )
                            38925 ; 6231 |#endif
                            38926 ; 6232 |{
                            38927 
                            38932 FSTFM1000TunerSearchEnded_Funclet:
                            38938 
                            38939 ; 6233 |#ifdef FM_USA_REGION
                            38940 ; 6234 |    WORD wFreqModulo = 0;
                            38941 ; 6235 |#endif
                            38942 ; 6236 |        g_wFMTunerError.m_bSEARCHING_UP = FALSE;
                            38943 
                            38946 
                            38947 ; 6237 |        g_wFMTunerError.m_bSEARCHING_DOWN = FALSE;
                            38948 
                            38951 
                            38952 ; 6238 |        s_iFMTunerSearchStatus = 0;         // Let's call it a good station
                            38953 
                            38957 
                            38958 ; 6239 |#ifdef FM_USA_REGION
                            38959 ; 6240 |    // Skip the first even station we find if we search from 108MHz --stmp9292
                            38960 ; 6241 |    if(s_bSearchFromTopBand)
                            38961 ; 6242 |    {
                            38962 ; 6243 |        wFreqModulo = wSearchFrequency % 200;
                            38963 ; 6244 |        if(wFreqModulo == 0)
                            38964 ; 6245 |        {
                            38965 ; 6246 |            wSearchFrequency -= FM_FREQ_STEP;
                            38966 ; 6247 |        }
                            38967 ; 6248 |    }
                            38968 ; 6249 |    s_bSearchFromTopBand = FALSE;
                            38969 ; 6250 |#endif
                            38970 ; 6251 |    STFM1000TunerQuicksetStation(wSearchFrequency);
                            38971 
P:0001 055F7C         2    238933         movec   ssh,y:(r7)+
P:0002 260000         2    438955         move    #0,y0
P:0003 0A7041 rrrrrr  6   1038945         bclr    #1,y:Fg_wFMTunerError
P:0005 0A7042 rrrrrr  6   1638950         bclr    #2,y:Fg_wFMTunerError
P:0007 4E7000 rrrrrr  3   1938956         move    y0,y:Fs_iFMTunerSearchStatus
P:0009 0BF080 rrrrrr  6   2538973         jsr     FSTFM1000TunerQuicksetStation
                            38975 
                            38976 ; 6252 |    bIsFirstTimeToNewStation = TRUE;
                            38977 
                            38981 
                            38982 ; 6253 |
                            38983 ; 6254 |    return E_TUNER_BUSY;
                            38984 
                            38987 
                            38988 ; 6255 |}
                            38989 
P:000B 56F400 FFFFFC  3   2838986         move    #>-4,a
P:000D 44F400 000001  3   3138979         move    #>1,x0
P:000F 4C7000 rrrrrr  3   3438980         move    x0,y:FbIsFirstTimeToNewStation
P:0011 05FF7C         4   3838991         movec   y:-(r7),ssh
P:0012 000000         2   4038991         nop             ; (inserted)
P:0013 00000C         4   4438995         rts
                            38997 
                            38998 ; 6256 |#ifdef FUNCLET
                            38999 ; 6257 |    #pragma asm
P:0BAD                      39000         org p,".ptextstfm1000":
                            39001 ; 6259 |    #pragma endasm
                            39002 ; 6260 |#endif
                            39003 ; 6261 |////////////////////////////////////////////////////////////////////////////////
                            39004 ; 6262 |//
                            39005 ; 6263 |//>  Name:          TunerDriverSearchUp
                            39006 ; 6264 |//
                            39007 ; 6265 |//   Type:          Function
                            39008 ; 6266 |//
                            39009 ; 6267 |//   Description:   Search up to find a station
                            39010 ; 6268 |//
                            39011 ; 6269 |//   Inputs:        none
                            39012 ; 6270 |//
                            39013 ; 6271 |//   Outputs:       Error status
                            39014 ; 6272 |//
                            39015 ; 6273 |//   Notes:         none
                            39016 ; 6274 |//<
                            39017 ; 6275 |////////////////////////////////////////////////////////////////////////////////
                            39018 ; 6276 |_reentrant INT TunerDriverSearchUp(void)
                            39019 ; 6277 |{
                            39020 
                            39025 FTunerDriverSearchUp:
                            39029 
                            39030 ; 6278 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            39031 ; 6279 |    // step the search base to 100KHz
                            39032 ; 6280 |    s_wCurrentFMFrequency = 100 * (int) (s_wCurrentFMFrequency/100);
                            39033 ; 6281 |#endif
                            39034 ; 6282 |    // Remember the origin of the searching
                            39035 ; 6283 |    s_wBeginSearchFMFrequency = s_wCurrentFMFrequency;
                            39036 
                            39040 
                            39041 ; 6284 |    s_bTunerSearchHitBandLimit = FALSE;
                            39042 
                            39046 
                            39047 ; 6285 |    // fake out the tuner search
                            39048 ; 6286 |    if(s_iFMTunerSearchStatus != NOT_SEARCHING)
                            39049 
P:0BAD 055F7C         2 665839026         movec   ssh,y:(r7)+
P:0BAE 4DF013 rrrrrr  3 666139044         clr     a	                y:Fs_wCurrentFMFrequency,x1
P:0BB0 4D7000 rrrrrr  3 666439039         move    x1,y:Fs_wBeginSearchFMFrequency
P:0BB2 5FF000 rrrrrr  3 666739051         move    y:Fs_iFMTunerSearchStatus,b
P:0BB4 54700B rrrrrr  3 667039052         tst     b	                a1,x:Fs_bTunerSearchHitBandLimit
P:0BB6 0AF0AA rrrrrr  6 667639053         jeq     L1424
                            39054 
                            39055 ; 6287 |    {
                            39056 ; 6288 |        return TUNER_SUCCESS;
                            39057 
P:0BB8 218E00         2 667839059         move    a1,a
P:0BB9 0AF080 rrrrrr  6 668439060         jmp     L1429
                            39061 
                            39062 ; 6289 |    }
                            39063 ; 6290 |#ifdef DEBUG_MONITOR_SIGNAL_QUALITY
                            39064 ; 6291 |    LogDebugFunction(0x50);
                            39065 ; 6292 |#endif
                            39066 ; 6293 |
                            39067 ; 6294 |    TunerTuningInit();
                            39068 
P:0BBB 0BF080 rrrrrr  6 669039070 L1424:  jsr     FTunerTuningInit
                            39071 
                            39072 ; 6295 |#ifdef FM_USA_REGION
                            39073 ; 6296 |    // Skip the first even station we find if we search from 108MHz - -stmp9292
                            39074 ; 6297 |
                            39075 ; 6298 |    if(s_wBeginSearchFMFrequency == FM_BAND_LIMIT_HIGH_FREQ)
                            39076 ; 6299 |    {
                            39077 ; 6300 |        s_bSearchFromTopBand = TRUE;
                            39078 ; 6301 |    }
                            39079 ; 6302 |#endif
                            39080 ; 6303 |    // If frequency is at the top of the band
                            39081 ; 6304 |    if ((s_wCurrentFMFrequency >= FM_BAND_LIMIT_HIGH_FREQ) && (g_bSearchEndAtBandLimit==FALSE))
                            39082 
P:0BBD 5FF000 rrrrrr  3 669339084         move    y:Fs_wCurrentFMFrequency,b
P:0BBF 46F400 01A5E0  3 669639085         move    #108000,y0
P:0BC1 2B0000         2 669839086         move    #0,b2
P:0BC2 20005D         2 670039087         cmp     y0,b
P:0BC3 0AF0A9 rrrrrr  6 670639088         jlt     L1426
P:0BC5 56F000 rrrrrr  3 670939089         move    x:Fg_bSearchEndAtBandLimit,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 141

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0BC7 2A0000         2 671139090         move    #0,a2
P:0BC8 200003         2 671339091         tst     a
P:0BC9 0AF0A2 rrrrrr  6 671939092         jne     L1426
                            39093 
                            39094 ; 6305 |    {
                            39095 ; 6306 |        s_wCurrentFMFrequency = FM_SEARCH_LOW_LIMIT;
                            39096 
                            39100 
                            39101 ; 6307 |        s_bTunerSearchHitBandLimit=TRUE;
                            39102 
                            39106 
                            39107 ; 6308 |    }
                            39108 ; 6309 |
                            39109 ; 6310 |    g_wFMTunerError.m_bSEARCHING_UP = TRUE;
                            39110 
P:0BCB 56F400 015568  3 672239098         move    #87400,a
P:0BCD 44F400 000001  3 672539104         move    #>1,x0
P:0BCF 5C7000 rrrrrr  3 672839099         move    a1,y:Fs_wCurrentFMFrequency
P:0BD1 447000 rrrrrr  3 673139105         move    x0,x:Fs_bTunerSearchHitBandLimit
                            39112 L1426:
                            39113 
                            39114 ; 6311 |    g_wFMTunerError.m_bSEARCHING_DOWN = FALSE;
                            39115 
                            39118 
                            39119 ; 6312 |    s_iFMTunerSearchStatus = SEARCHING_UP;
                            39120 
                            39124 
                            39125 ; 6313 |    // Turn off DRI before change station
                            39126 ; 6314 |    STFM1000DriOff();
                            39127 
P:0BD3 60F400 rrrrrr  3 673439130         move    #FStfmTuneData+34,r0
P:0BD5 290100         2 673639122         move    #1,b0
P:0BD6 0A7061 rrrrrr  6 674239112         bset    #1,y:Fg_wFMTunerError
P:0BD8 0A7042 rrrrrr  6 674839117         bclr    #2,y:Fg_wFMTunerError
P:0BDA 59701B rrrrrr  3 675139129         clr     b	                b0,y:Fs_iFMTunerSearchStatus
P:0BDC 44F413 00005C  3 675439131         clr     a	                #>92,x0
P:0BDE 000008         2 675639132         inc     a
P:0BDF 0BF080 rrrrrr  6 676239134         jsr     FSTFM1000WriteRegister
                            39135 
                            39136 ; 6315 |
                            39137 ; 6316 |    if (s_wCurrentFMFrequency < FM_BAND_LIMIT_HIGH_FREQ)
                            39138 
P:0BE1 5FF000 rrrrrr  3 676539140         move    y:Fs_wCurrentFMFrequency,b
P:0BE3 46F400 01A5E0  3 676839141         move    #108000,y0
P:0BE5 2B0000         2 677039142         move    #0,b2
P:0BE6 20005D         2 677239143         cmp     y0,b
P:0BE7 0AF0A1 rrrrrr  6 677839144         jge     L1427
                            39145 
                            39146 ; 6317 |    {
                            39147 ; 6318 |        STFM1000QuickTune((s_wCurrentFMFrequency += FM_FREQ_STEP));
                            39148 
                            39153 
                            39154 ; 6319 |    }
                            39155 ; 6320 |    else
                            39156 ; 6321 |    {
                            39157 ; 6322 |        STFM1000QuickTune(s_wCurrentFMFrequency);
                            39158 
P:0BE9 46F400 000064  3 678139150         move    #>100,y0
P:0BEB 200058         2 678339151         add     y0,b
P:0BEC 5D7000 rrrrrr  3 678639152         move    b1,y:Fs_wCurrentFMFrequency
P:0BEE 5EF000 rrrrrr  3 678939160 L1427:  move    y:Fs_wCurrentFMFrequency,a
P:0BF0 0BF080 rrrrrr  6 679539161         jsr     FSTFM1000QuickTune
                            39162 
                            39163 ; 6323 |    }
                            39164 ; 6324 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            39165 ; 6325 |    s_wDisplayFMFrequency = s_wCurrentFMFrequency;
                            39166 ; 6326 |#endif
                            39167 ; 6327 |#ifdef DEBUG_MONITOR_SIGNAL_QUALITY
                            39168 ; 6328 |    LogDebugFunction(0x51);
                            39169 ; 6329 |#endif
                            39170 ; 6330 |
                            39171 ; 6331 |    return E_TUNER_BUSY;
                            39172 
                            39175 
                            39176 ; 6332 |}
                            39177 
P:0BF2 56F400 FFFFFC  3 679839174         move    #>-4,a
                            39179 L1429:
P:0BF4 05FF7C         4 680239179         movec   y:-(r7),ssh
P:0BF5 000000         2 680439179         nop             ; (inserted)
P:0BF6 00000C         4 680839183         rts
                            39185 
                            39186 ; 6333 |_reentrant INT STFM1000TuningSearchingScanning(void)
                            39187 ; 6334 |{
                            39188 
                            39193 FSTFM1000TuningSearchingScanning:
                            39201 
                            39202 ; 6335 |    INT iTuningStatus = TUNER_SUCCESS;
                            39203 ; 6336 |    BOOL bIsStation;
                            39204 ; 6337 |#ifdef SD_USE_50KHZ_TUNING_GRID
                            39205 ; 6338 |    g_wCurrentFrequency = s_wDisplayFMFrequency;
                            39206 ; 6339 |#else
                            39207 ; 6340 |    g_wCurrentFrequency = s_wCurrentFMFrequency;
                            39208 
                            39212 
                            39213 ; 6341 |#endif
                            39214 ; 6342 |    // if the tuner is success then test to see if scanning is in progress
                            39215 ; 6343 |    if (s_iFMTunerSearchStatus != NOT_SEARCHING)
                            39216 
P:0BF7 055F7C         2 681039194         movec   ssh,y:(r7)+
P:0BF8 5EF000 rrrrrr  3 681339210         move    y:Fs_wCurrentFMFrequency,a
P:0BFA 5C7000 rrrrrr  3 681639211         move    a1,y:Fg_wCurrentFrequency
P:0BFC 5FF000 rrrrrr  3 681939218         move    y:Fs_iFMTunerSearchStatus,b
P:0BFE 20000B         2 682139219         tst     b
P:0BFF 0AF0AA rrrrrr  6 682739220         jeq     L1434
                            39221 
                            39222 ; 6344 |    {   // stop searching after one round through the band limit
                            39223 ; 6345 |        iTuningStatus = STFM1000ContinueSearching();
                            39224 
P:0C01 0BF080 rrrrrr  6 683339226         jsr     FSTFM1000ContinueSearching
                            39228 
                            39229 ; 6346 |    }
                            39230 
P:0C03 0AF080 rrrrrr  6 683939232         jmp     L1437
                            39233 
                            39234 ; 6347 |    else
                            39235 ; 6348 |    {
                            39236 ; 6349 |        if (g_wFMTunerError.m_bSCANNING_STATION==TRUE)
                            39237 
P:0C05 5FF000 rrrrrr  3 684239239 L1434:  move    y:Fg_wFMTunerError,b
P:0C07 0BCD64         4 684639240         btst    #4,b1
P:0C08 47F41B 000001  3 684939241         clr     b	                #>1,y1
P:0C0A 20003F         2 685139242         rol     b
P:0C0B 20007D         2 685339244         cmp     y1,b
P:0C0C 0AF0A2 rrrrrr  6 685939245         jne     L1435
                            39246 
                            39247 ; 6350 |        {
                            39248 ; 6351 |            iTuningStatus = STFM1000ContinueScanning();
                            39249 
P:0C0E 0BF080 rrrrrr  6 686539251         jsr     FSTFM1000ContinueScanning
                            39252 
                            39253 ; 6352 |        }
                            39254 
P:0C10 0AF080 rrrrrr  6 687139256         jmp     L1437
                            39257 
                            39258 ; 6353 |        // if not tuning/searching/scanning     send out the message that tuning is done
                            39259 ; 6354 |        else
                            39260 ; 6355 |        {
                            39261 ; 6356 |            // Reset this flag when we change frequency
                            39262 ; 6357 |            bIsWeakSignal = FALSE;
                            39263 
                            39265 L1435:
                            39267 
                            39268 ; 6358 |            s_eOptimizeChannelState = OPTIMIZE_CHANNEL_STATE_START;
                            39269 
                            39272 
                            39273 ; 6359 |            iTuningStatus = STFM1000TunerLockStation();
                            39274 
P:0C12 2F0000         2 687339265         move    #0,b
P:0C13 5D7000 rrrrrr  3 687639266         move    b1,y:FbIsWeakSignal
P:0C15 5D7000 rrrrrr  3 687939271         move    b1,y:Fs_eOptimizeChannelState
P:0C17 0BF080 rrrrrr  6 688539276         jsr     FSTFM1000TunerLockStation
                            39277 
                            39278 ; 6360 |            g_wFMTunerError.m_bTUNER_BUSY=FALSE;
                            39279 
                            39282 
                            39283 ; 6361 |            //g_bSearchEndAtBandLimit = FALSE;
                            39284 ; 6362 |        }
                            39285 ; 6363 |    }
                            39286 
P:0C19 0A7040 rrrrrr  6 689139281         bclr    #0,y:Fg_wFMTunerError
                            39288 L1437:
                            39289 
                            39290 ; 6364 |
                            39291 ; 6365 |    return iTuningStatus;
                            39292 ; 6366 |}
                            39293 
P:0C1B 05FF7C         4 689539295         movec   y:-(r7),ssh
P:0C1C 000000         2 689739295         nop             ; (inserted)
P:0C1D 00000C         4 690139299         rts
                            39302 
                            39303 ; 6367 |// inported from sw_stereocontroll.c for mem map savings.
                            39304 ; 6368 |
                            39305 ; 6369 |//input:
                            39306 ; 6370 |_reentrant void sw_stereocontrol_xcall(unsigned short sd_audio_Rssi_u16)
                            39307 ; 6371 |{
                            39308 
                            39313 Fsw_stereocontrol_xcall:
                            39321 
                            39322 ; 6372 |    unsigned long  temp;
                            39323 ; 6373 |
                            39324 ; 6374 |    IIRFiltCoeffSemaphore = 0;  // Filter coefficients are not yet valid - they are being recomputed!
                            39325 
                            39329 
                            39330 ; 6375 |
                            39331 ; 6376 |    sw_stereocontrol.sd_audio_RssiMant_u16 = (sd_audio_Rssi_u16 & 0xFFE0) >> 5;  // 11 msb's
                            39332 
                            39340 
                            39341 ; 6377 |    sw_stereocontrol.sd_audio_RssiExp_u16 = sd_audio_Rssi_u16 & 0x001F;        // 5 lsb's
                            39342 
                            39348 
                            39349 ; 6378 |    sw_stereocontrol.sd_audio_RssiDecoded_u24 = sw_stereocontrol.sd_audio_RssiMant_u16 << sw_stereocontrol.sd_audio_RssiExp_u16;
                            39350 
P:0C1E 46F41B 00FFE0  3 690439327         clr     b	                #$FFE0,y0
P:0C20 5F7000 rrrrrr  3 690739328         move    b,y:FIIRFiltCoeffSemaphore
P:0C22 218D00         2 690939334         move    a1,b1
P:0C23 44F45E 00001F  3 691239336         and     y0,b	                #>$1F,x0
P:0C25 21A700         2 691439337         move    b1,y1
P:0C26 0105C8         2 691639338         mpy     y1,#5,b
P:0C27 5D7046 rrrrrr  3 691939345         and     x0,a	                b1,y:Fsw_stereocontrol+18
P:0C29 5C7000 rrrrrr  3 692239347         move    a1,y:Fsw_stereocontrol+19
P:0C2B 5EF000 rrrrrr  3 692539353         move    y:Fsw_stereocontrol+19,a
P:0C2D 5DF000 rrrrrr  3 692839352         move    y:Fsw_stereocontrol+18,b1
P:0C2F 2A0000         2 693039354         move    #0,a2
P:0C30 205F03         2 693239355         tst     a	                (r7)+
P:0C31 205F00         2 693439315         move    (r7)+
P:0C32 0AF0AA rrrrrr  6 694039356         jeq     L1471
P:0C34 06CC20         4 694439357         rep     a1      
P:0C35 20003B         2 694639359         lsl     b
                            39361 L1471:
                            39370 
                            39371 ; 6379 |    temp = sw_stereocontrol.sd_audio_RssiDecoded_u24;           //asign value of sd_audio_RssiDecoded_u24 to temp
                            39372 ; 6380 |
                            39373 ; 6381 |    // *** Convert RSSI to 10*Log10(RSSI)
                            39374 ; 6382 |    // This is easily accomplished in DSP code using the CLZ instruction
                            39375 ; 6383 |    // rather than using all these comparisons.
                            39376 ; 6384 |    // The basic idea is this:
                            39377 ; 6385 |    // if x >= 2^P
                            39378 ; 6386 |    //   f(x) = 3*x>>P + (3*P-3)
                            39379 ; 6387 |    // Approx. is valid over the range of sd_audio_RssiDecoded_u24 in [0, 2^21]
                            39380 ; 6388 |    // ***
                            39381 ; 6389 |
                            39382 ; 6390 |    temp = temp & 0xFFFFF;
                            39383 
                            39404 
                            39405 ; 6391 |    sw_stereocontrol.sd_audio_Prssi_u16 =0;
                            39406 
                            39410 
                            39411 ; 6392 |    while(temp >>= 1)                                                           //right shift temp to find value of sd_audio_Prssi_u16
                            39412 
P:0C36 77F400 FFFFFE  3 694939385         move    #-2,n7
P:0C38 250000         2 695139364         move    #0,x1
P:0C39 270000         2 695339392         move    #0,y1
P:0C3A 21A400         2 695539363         move    b1,x0
P:0C3B 2E0000         2 695739408         move    #0,a
P:0C3C 46F400 0FFFFF  3 696039393         move    #$FFFFF,y0
P:0C3E 205F00         2 696239386         move    (r7)+
P:0C3F 4D7069 rrrrrr  3 696539365         tfr     x1,b	                x1,y:Fsw_stereocontrol+16
P:0C41 208900         2 696739366         move    x0,b0
P:0C42 4C7000 rrrrrr  3 697039368         move    x0,y:Fsw_stereocontrol+15
P:0C44 21A400         2 697239394         move    b1,x0
P:0C45 5D6F00         4 697639388         move    b1,y:(r7+n7)
P:0C46 212D00         2 697839395         move    b0,b1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 142

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0C47 20575E         2 698039396         and     y0,b	                (r7)-
P:0C48 596F00         4 698439391         move    b0,y:(r7+n7)
P:0C49 21A900         2 698639397         move    b1,b0
P:0C4A 208D00         2 698839398         move    x0,b1
P:0C4B 5E707E rrrrrr  3 699139399         and     y1,b	                a,y:Fsw_stereocontrol+20
P:0C4D 0AF080 rrrrrr  6 699739414         jmp     L1439
                            39415 
                            39416 ; 6393 |        sw_stereocontrol.sd_audio_Prssi_u16++;
                            39417 
                            39419 L1438:
P:0C4F 5EF000 rrrrrr  3 700039419         move    y:Fsw_stereocontrol+20,a
P:0C51 46F400 000001  3 700339420         move    #>1,y0
P:0C53 200050         2 700539421         add     y0,a
P:0C54 5C7000 rrrrrr  3 700839422         move    a1,y:Fsw_stereocontrol+20
P:0C56 2B0000         2 701039424 L1439:  move    #0,b2
P:0C57 20002A         2 701239425         asr     b
P:0C58 2B0000         2 701439426         move    #0,b2
P:0C59 20000B         2 701639427         tst     b
P:0C5A 0AF0A2 rrrrrr  6 702239428         jne     L1438
                            39429 
                            39430 ; 6394 |
                            39431 ; 6395 |    sw_stereocontrol.sd_audio_RssiLog_i16 = (3*sw_stereocontrol.sd_audio_RssiDecoded_u24 >> sw_stereocontrol.sd_audio_Prssi_u16) + (3*sw_stereocontrol.sd_audio_Prssi_u16-3);
                            39432 
P:0C5C 77F400 FFFFFE  3 702539434         move    #-2,n7
P:0C5E 270000         2 702739441         move    #0,y1
P:0C5F 46F400 000003  3 703039442         move    #>3,y0
P:0C61 205F00         2 703239435         move    (r7)+
P:0C62 4DEF00         4 703639437         move    y:(r7+n7),x1
P:0C63 205700         2 703839438         move    (r7)-
P:0C64 4CEF00         4 704239440         move    y:(r7+n7),x0
P:0C65 0040F8         2 704439443         ori     #$40,mr
P:0C66 000000         2 704639443         nop             ; (inserted)
P:0C67 2000D8         2 704839445         mpy     y0,x0,b
P:0C68 2128EA         2 705039446         mac     x1,y0,b b0,a0
P:0C69 2000CA         2 705239447         mac     x0,y1,b
P:0C6A 00BFB8         2 705439448         andi    #$BF,mr
P:0C6B 212C00         2 705639449         move    b0,a1
P:0C6C 21AA00         2 705839450         move    b1,a2
P:0C6D 5FF022 rrrrrr  3 706139451         asr     a	                y:Fsw_stereocontrol+20,b
P:0C6F 2B0000         2 706339455         move    #0,b2
P:0C70 2A000B         2 706539456         tst     b	                #0,a2
P:0C71 0AF0AA rrrrrr  6 707139457         jeq     L1472
P:0C73 06CD20         4 707539458         rep     b1      
P:0C74 200022         2 707739460         asr     a
                            39462 L1472:
                            39474 
                            39475 ; 6396 |
                            39476 ; 6397 |    if (sw_stereocontrol.sd_audio_RssiLog_i16 < 0)  // Clamp to positive
                            39477 
P:0C75 21A600         2 707939465         move    b1,y0
P:0C76 47F400 000003  3 708239464         move    #>3,y1
P:0C78 2000B8         2 708439466         mpy     y0,y1,b
P:0C79 20002A         2 708639467         asr     b
P:0C7A 212F00         2 708839468         move    b0,b
P:0C7B 20007C         2 709039469         sub     y1,b
P:0C7C 21A900         2 709239470         move    b1,b0
P:0C7D 216D00         2 709439471         move    b2,b1
P:0C7E 200018         2 709639472         add     a,b
P:0C7F 597000 rrrrrr  3 709939473         move    b0,y:Fsw_stereocontrol+17
P:0C81 212F00         2 710139479         move    b0,b
P:0C82 20000B         2 710339480         tst     b
P:0C83 0AF0A1 rrrrrr  6 710939481         jge     L1440
                            39482 
                            39483 ; 6398 |        sw_stereocontrol.sd_audio_RssiLog_i16 = 0;
                            39484 
                            39488 
                            39489 ; 6399 |
                            39490 ; 6400 |    // Compensate for errors in truncation/approximation by adding 1
                            39491 ; 6401 |    sw_stereocontrol.sd_audio_RssiLog_i16 = sw_stereocontrol.sd_audio_RssiLog_i16+1;
                            39492 
P:0C85 2F0000         2 711139486         move    #0,b
P:0C86 5F7000 rrrrrr  3 711439487         move    b,y:Fsw_stereocontrol+17
                            39494 L1440:
                            39498 
                            39499 ; 6402 |
                            39500 ; 6403 |    // Scale up so we have some room for precision
                            39501 ; 6404 |    sw_stereocontrol.sd_audio_ScaledTrueRssi_u16 = sw_stereocontrol.sd_audio_RssiLog_i16 << 8;
                            39502 
                            39507 
                            39508 ; 6405 |    // ************
                            39509 ; 6406 |    // *** end RSSI
                            39510 ; 6407 |    // ************
                            39511 ; 6408 |
                            39512 ; 6409 |
                            39513 ; 6410 |    // **************************************************************************
                            39514 ; 6411 |    // *** Weak Signal Processing ***********************************************
                            39515 ; 6412 |    // **************************************************************************
                            39516 ; 6413 |    // *** This block operates each time the system can read RSSI_DCEST register
                            39517 ; 6414 |    // *** from Steely Dan.
                            39518 ; 6415 |
                            39519 ; 6416 |    // *** Filter RSSI via attack/decay structure
                            39520 ; 6417 |    // Changed on 15NOV2006 the direction of the comparison to "attack" when RSSI "falls"
                            39521 ; 6418 |    if (sw_stereocontrol.sd_audio_ScaledTrueRssi_u16 <= sw_stereocontrol.sd_audio_PrevFilteredRssi_u16)
                            39522 
P:0C88 5FF000 rrrrrr  3 711739494         move    y:Fsw_stereocontrol+17,b
P:0C8A 46F400 000001  3 712039495         move    #>1,y0
P:0C8C 200058         2 712239496         add     y0,b
P:0C8D 5D7000 rrrrrr  3 712539497         move    b1,y:Fsw_stereocontrol+17
P:0C8F 4EF000 rrrrrr  3 712839504         move    y:Fsw_stereocontrol+17,y0
P:0C91 0110E8         2 713039505         mpy     y0,#16,b
P:0C92 597000 rrrrrr  3 713339506         move    b0,y:Fsw_stereocontrol+21
P:0C94 6CF000 rrrrrr  3 713639524         move    y:Fsw_stereocontrol+21,r4
P:0C96 4FF000 rrrrrr  3 713939526         move    y:Fsw_stereocontrol+23,y1
P:0C98 228F00         2 714139525         move    r4,b
P:0C99 20FE7D         2 714339528         cmp     y1,b	                y1,n6
P:0C9A 0AF0A7 rrrrrr  6 714939529         jgt     L1441
                            39530 
                            39531 ; 6419 |        sw_stereocontrol.sd_audio_Acc_u32 =(long)((long)sw_stereocontrol.sd_audio_pCoefRssiAttack_u16*(long)sw_stereocontrol.sd_audio_PrevFilteredRssi_u16
                            39532 ; 6420 |                                + ((long)65535-(long)sw_stereocontrol.sd_audio_pCoefRssiAttack_u16)*(long)sw_stereocontrol.sd_audio_ScaledTrueRssi_u16);
                            39533 
P:0C9C 4CF000 rrrrrr  3 715239535         move    y:Fsw_stereocontrol,x0
P:0C9E 0AF080 rrrrrr  6 715839536         jmp     L1442
                            39537 
                            39538 ; 6421 |    else
                            39539 ; 6422 |        sw_stereocontrol.sd_audio_Acc_u32 = ((long)sw_stereocontrol.sd_audio_pCoefRssiDecay_u16*(long)sw_stereocontrol.sd_audio_PrevFilteredRssi_u16)
                            39540 ; 6423 |                                + (((long)65535-(long)sw_stereocontrol.sd_audio_pCoefRssiDecay_u16)*(long)sw_stereocontrol.sd_audio_ScaledTrueRssi_u16);
                            39541 
P:0CA0 4CF000 rrrrrr  3 716139543 L1441:  move    y:Fsw_stereocontrol+1,x0
                            39544 L1442:
                            39587 
                            39588 ; 6424 |
                            39589 ; 6425 |    sw_stereocontrol.sd_audio_FilteredRssi_u16 = sw_stereocontrol.sd_audio_Acc_u32 >> 16;
                            39590 
P:0CA2 250000         2 716339544         move    #0,x1
P:0CA3 270000         2 716539546         move    #0,y1
P:0CA4 23C600         2 716739545         move    n6,y0
P:0CA5 0040F8         2 716939547         ori     #$40,mr
P:0CA6 205F00         2 717139557         move    (r7)+
P:0CA7 77F4D8 FFFFFE  3 717439549         mpy     y0,x0,b	                #-2,n7
P:0CA9 2128EA         2 717639550         mac     x1,y0,b b0,a0
P:0CAA 2000CA         2 717839551         mac     x0,y1,b
P:0CAB 212CFA         2 718039552         mac     y1,x1,b b0,a1
P:0CAC 00BFB8         2 718239553         andi    #$BF,mr
P:0CAD 212A00         2 718439554         move    b0,a2
P:0CAE 228622         2 718639555         asr     a	                r4,y0
P:0CAF 5C6F1B         4 719039563         clr     b	                a1,y:(r7+n7)
P:0CB0 51F400 00FFFF  3 719339564         move    #$FFFF,b0
P:0CB2 20572C         2 719539565         sub     x,b	                (r7)-
P:0CB3 586F00         4 719939562         move    a0,y:(r7+n7)
P:0CB4 212400         2 720139567         move    b0,x0
P:0CB5 21A500         2 720339568         move    b1,x1
P:0CB6 0040F8         2 720539569         ori     #$40,mr
P:0CB7 205F00         2 720739578         move    (r7)+
P:0CB8 2000D0         2 720939571         mpy     y0,x0,a
P:0CB9 2109E2         2 721139572         mac     x1,y0,a a0,b0
P:0CBA 2000C2         2 721339573         mac     x0,y1,a
P:0CBB 210DF2         2 721539574         mac     y1,x1,a a0,b1
P:0CBC 00BFB8         2 721739575         andi    #$BF,mr
P:0CBD 210B00         2 721939576         move    a0,b2
P:0CBE 4FEF2A         4 722339577         asr     b	                y:(r7+n7),y1
P:0CBF 205700         2 722539581         move    (r7)-
P:0CC0 4EEF00         4 722939583         move    y:(r7+n7),y0
P:0CC1 200038         2 723139584         add     y,b
P:0CC2 5D7000 rrrrrr  3 723439585         move    b1,y:Fsw_stereocontrol+43
P:0CC4 597000 rrrrrr  3 723739586         move    b0,y:Fsw_stereocontrol+42
P:0CC6 5FF000 rrrrrr  3 724039592         move    y:Fsw_stereocontrol+43,b
P:0CC8 2B0000         2 724239594         move    #0,b2
P:0CC9 59F000 rrrrrr  3 724539593         move    y:Fsw_stereocontrol+42,b0
P:0CCB 0610A0         4 724939595         rep     #16      
P:0CCC 20002A         2 725139597         asr     b
                            39599 L1473:
                            39603 
                            39604 ; 6426 |    sw_stereocontrol.sd_audio_PrevFilteredRssi_u16 = sw_stereocontrol.sd_audio_FilteredRssi_u16;
                            39605 
                            39608 
                            39609 ; 6427 |
                            39610 ; 6428 |
                            39611 ; 6429 |    global_filtered_rssi = sw_stereocontrol.sd_audio_FilteredRssi_u16>>8;  // DEBUG!!!
                            39612 
                            39617 
                            39618 ; 6430 |
                            39619 ; 6431 |
                            39620 ; 6432 |    // *** Form control variable
                            39621 ; 6433 |    // Generically speaking, ctl = f(RSSI) = filtered RSSI  (simplest way for now!)
                            39622 ; 6434 |    sw_stereocontrol.sd_audio_ControlLpr_i16 = sw_stereocontrol.sd_audio_FilteredRssi_u16;
                            39623 
                            39626 
                            39627 ; 6435 |    sw_stereocontrol.sd_audio_ControlLmr_i16 = sw_stereocontrol.sd_audio_FilteredRssi_u16;
                            39628 
                            39632 
                            39633 ; 6436 |
                            39634 ; 6437 |
                            39635 ; 6438 |
                            39636 ; 6439 |    // *** Define LPR_BW = f(control LPR)
                            39637 ; 6440 |    // Assume that 5 kHz and 17 kHz are limits of LPR_BW control
                            39638 ; 6441 |    if (sw_stereocontrol.sd_audio_ControlLpr_i16 <= sw_stereocontrol.sd_audio_pCoefLprBwThLo_u16)
                            39639 
P:0CCD 213D00         2 725339601         move    b0,n5
P:0CCE 7D7000 rrrrrr  3 725639602         move    n5,y:Fsw_stereocontrol+22
P:0CD0 7D7000 rrrrrr  3 725939607         move    n5,y:Fsw_stereocontrol+23
P:0CD2 4FF000 rrrrrr  3 726239614         move    y:Fsw_stereocontrol+22,y1
P:0CD4 0108C0         2 726439615         mpy     y1,#8,a
P:0CD5 5C7000 rrrrrr  3 726739616         move    a1,y:Fglobal_filtered_rssi
P:0CD7 4F7000 rrrrrr  3 727039625         move    y1,y:Fsw_stereocontrol+24
P:0CD9 6EF000 rrrrrr  3 727339630         move    y:Fsw_stereocontrol+22,r6
P:0CDB 6E7000 rrrrrr  3 727639631         move    r6,y:Fsw_stereocontrol+25
P:0CDD 5FF000 rrrrrr  3 727939641         move    y:Fsw_stereocontrol+24,b
P:0CDF 4EF000 rrrrrr  3 728239642         move    y:Fsw_stereocontrol+2,y0
P:0CE1 20005D         2 728439643         cmp     y0,b
P:0CE2 0AF0A7 rrrrrr  6 729039644         jgt     L1443
                            39645 
                            39646 ; 6442 |        sw_stereocontrol.sd_audio_LprBw_u16 = 5000;     // lower limit is 5 kHz
                            39647 
P:0CE4 64F400 001388  3 729339649         move    #$1388,r4
P:0CE6 6C7000 rrrrrr  3 729639650         move    r4,y:Fsw_stereocontrol+26
P:0CE8 0AF080 rrrrrr  6 730239651         jmp     L1446
                            39652 
                            39653 ; 6443 |    else if  (sw_stereocontrol.sd_audio_ControlLpr_i16 >= sw_stereocontrol.sd_audio_pCoefLprBwThHi_u16)
                            39654 
P:0CEA 5FF000 rrrrrr  3 730539656 L1443:  move    y:Fsw_stereocontrol+24,b
P:0CEC 4EF000 rrrrrr  3 730839657         move    y:Fsw_stereocontrol+3,y0
P:0CEE 20005D         2 731039658         cmp     y0,b
P:0CEF 0AF0A9 rrrrrr  6 731639659         jlt     L1444
                            39660 
                            39661 ; 6444 |        sw_stereocontrol.sd_audio_LprBw_u16 = 17000;    // upper limit is 17 kHz
                            39662 
P:0CF1 73F400 004268  3 731939664         move    #17000,n3
P:0CF3 7B7000 rrrrrr  3 732239665         move    n3,y:Fsw_stereocontrol+26
P:0CF5 0AF080 rrrrrr  6 732839666         jmp     L1446
                            39667 
                            39668 ; 6445 |    else
                            39669 ; 6446 |        sw_stereocontrol.sd_audio_LprBw_u16 = (long)17000 - (((long)sw_stereocontrol.sd_audio_pCoefLprBwSlSc_u16*((long)sw_stereocontrol.sd_audio_pCoefLprBwThHi_u16
                            39670 ; 6447 |                               - (long)sw_stereocontrol.sd_audio_ControlLpr_i16)) >> (long)sw_stereocontrol.sd_audio_pCoefLprBwSlSh_u16);
                            39671 
                            39673 L1444:
P:0CF7 2D0000         2 733039676         move    #0,b1
P:0CF8 2B0000         2 733239677         move    #0,b2
P:0CF9 5EF000 rrrrrr  3 733539678         move    y:Fsw_stereocontrol+24,a
P:0CFB 59F000 rrrrrr  3 733839675         move    y:Fsw_stereocontrol+3,b0
P:0CFD 4CF000 rrrrrr  3 734139673         move    y:Fsw_stereocontrol+6,x0
P:0CFF 218800         2 734339679         move    a1,a0
P:0D00 214C00         2 734539680         move    a2,a1
P:0D01 25001C         2 734739681         sub     a,b	                #0,x1
P:0D02 212600         2 734939682         move    b0,y0
P:0D03 21A700         2 735139683         move    b1,y1
P:0D04 0040F8         2 735339684         ori     #$40,mr
P:0D05 000000         2 735539684         nop             ; (inserted)
P:0D06 2000D0         2 735739686         mpy     y0,x0,a
P:0D07 2109E2         2 735939687         mac     x1,y0,a a0,b0
P:0D08 2000C2         2 736139688         mac     x0,y1,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 143

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0D09 210DF2         2 736339689         mac     y1,x1,a a0,b1
P:0D0A 00BFB8         2 736539690         andi    #$BF,mr
P:0D0B 210B00         2 736739691         move    a0,b2
P:0D0C 5EF02A rrrrrr  3 737039692         asr     b	                y:Fsw_stereocontrol+7,a
P:0D0E 2A0000         2 737239694         move    #0,a2
P:0D0F 200003         2 737439695         tst     a
P:0D10 0AF0AA rrrrrr  6 738039696         jeq     L1474
P:0D12 06CC20         4 738439697         rep     a1      
P:0D13 20002A         2 738639699         asr     b
                            39701 L1474:
                            39707 
                            39708 ; 6448 |
                            39709 ; 6449 |    // *** Define LMR_Gain = f(control LMR)
                            39710 ; 6450 |    // Assume that Blending occurs across 20 dB range of control LMR
                            39711 ; 6451 |    // For sake of listenability, approximate antilog blending curve
                            39712 ; 6452 |    // To simplify antilog approx, scale control LMR back into "RSSI in dB range" [0,60]
                            39713 ; 6453 |    sw_stereocontrol.sd_audio_ScaledControlLmr_u16 = sw_stereocontrol.sd_audio_ControlLmr_i16 >> 8;
                            39714 
P:0D14 2E0000         2 738839703         move    #0,a
P:0D15 50F400 004268  3 739139704         move    #17000,a0
P:0D17 200014         2 739339705         sub     b,a
P:0D18 587000 rrrrrr  3 739639706         move    a0,y:Fsw_stereocontrol+26
                            39716 L1446:
                            39719 
                            39720 ; 6454 |    sw_stereocontrol.temp1_reg = sw_stereocontrol.sd_audio_pCoefLmrGaTh_u16 - sw_stereocontrol.sd_audio_ScaledControlLmr_u16;  // how far below blend threshold are we?
                            39721 
                            39727 
                            39728 ; 6455 |    if (sw_stereocontrol.temp1_reg < 0)             // We're not below threshold, so no blending needed
                            39729 
P:0D1A 4FF000 rrrrrr  3 739939716         move    y:Fsw_stereocontrol+25,y1
P:0D1C 0108C8         2 740139717         mpy     y1,#8,b
P:0D1D 5D7000 rrrrrr  3 740439718         move    b1,y:Fsw_stereocontrol+27
P:0D1F 5FF000 rrrrrr  3 740739723         move    y:Fsw_stereocontrol+5,b
P:0D21 4CF000 rrrrrr  3 741039724         move    y:Fsw_stereocontrol+27,x0
P:0D23 20004C         2 741239725         sub     x0,b
P:0D24 5D7000 rrrrrr  3 741539726         move    b1,y:Fsw_stereocontrol+44
P:0D26 5EF000 rrrrrr  3 741839731         move    y:Fsw_stereocontrol+44,a
P:0D28 200003         2 742039732         tst     a
P:0D29 0AF0A1 rrrrrr  6 742639733         jge     L1447
                            39734 
                            39735 ; 6456 |        sw_stereocontrol.temp1_reg = 0;
                            39736 
                            39740 
                            39741 ; 6457 |    sw_stereocontrol.temp2_reg = 20 - sw_stereocontrol.temp1_reg;    // Blend range = 20 dB
                            39742 
P:0D2B 2F0000         2 742839738         move    #0,b
P:0D2C 5F7000 rrrrrr  3 743139739         move    b,y:Fsw_stereocontrol+44
                            39744 L1447:
                            39748 
                            39749 ; 6458 |    if (sw_stereocontrol.temp2_reg < 0)
                            39750 
P:0D2E 5EF000 rrrrrr  3 743439744         move    y:Fsw_stereocontrol+44,a
P:0D30 57F400 000014  3 743739745         move    #>20,b
P:0D32 20001C         2 743939746         sub     a,b
P:0D33 5D7000 rrrrrr  3 744239747         move    b1,y:Fsw_stereocontrol+45
P:0D35 5EF000 rrrrrr  3 744539752         move    y:Fsw_stereocontrol+45,a
P:0D37 200003         2 744739753         tst     a
P:0D38 0AF0A1 rrrrrr  6 745339754         jge     L1448
                            39755 
                            39756 ; 6459 |        sw_stereocontrol.temp2_reg = 0;               // if beyond that range, then clamp to 0
                            39757 
                            39761 
                            39762 ; 6460 |
                            39763 ; 6461 |    // We want stereo separation (n dB) to rolloff linearly over the 20 dB wide blend region.
                            39764 ; 6462 |    // this necessitates a particular rolloff for the blend parameter, which is not obvious.
                            39765 ; 6463 |    // See sw_audio/log_approx.m for calculation of this rolloff, implemented below...
                            39766 ; 6464 |    // Note that stereo_separation (in dB) = 20*log10((1+a)/(1-a)), where a = blend scaler
                            39767 ; 6465 |    // appropriately scaled for 2^15.  This relationship sits at the heart of why this curve is needed.
                            39768 ; 6466 |    if (sw_stereocontrol.temp2_reg >= 15)
                            39769 
P:0D3A 2F0000         2 745539759         move    #0,b
P:0D3B 5F7000 rrrrrr  3 745839760         move    b,y:Fsw_stereocontrol+45
P:0D3D 5FF000 rrrrrr  3 746139771 L1448:  move    y:Fsw_stereocontrol+45,b
P:0D3F 46F400 00000F  3 746439772         move    #>15,y0
P:0D41 20005D         2 746639773         cmp     y0,b
P:0D42 0AF0A9 rrrrrr  6 747239774         jlt     L1449
                            39775 
                            39776 ; 6467 |        sw_stereocontrol.temp3_reg = 264 * sw_stereocontrol.temp2_reg + 27487;
                            39777 
P:0D44 17B400 000108  3 747539781         move    b,y1	                #264,x1
P:0D46 50F400 006B5F  3 747839780         move    #27487,a0
P:0D48 200032         2 748039782         asl     a
P:0D49 2000F2         2 748239783         mac     y1,x1,a
P:0D4A 200022         2 748439784         asr     a
P:0D4B 587000 rrrrrr  3 748739785         move    a0,y:Fsw_stereocontrol+46
P:0D4D 0AF080 rrrrrr  6 749339786         jmp     L1454
                            39787 
                            39788 ; 6468 |    else if (sw_stereocontrol.temp2_reg >= 10)
                            39789 
P:0D4F 5FF000 rrrrrr  3 749639791 L1449:  move    y:Fsw_stereocontrol+45,b
P:0D51 56F400 00000A  3 749939792         move    #>10,a
P:0D53 20000D         2 750139793         cmp     a,b
P:0D54 0AF0A9 rrrrrr  6 750739794         jlt     L1450
                            39795 
                            39796 ; 6469 |        sw_stereocontrol.temp3_reg = 650 * sw_stereocontrol.temp2_reg + 21692;
                            39797 
P:0D56 50F400 0054BC  3 751039801         move    #21692,a0
P:0D58 47F400 00028A  3 751339799         move    #650,y1
P:0D5A 21E632         2 751539802         asl     a	                b,y0
P:0D5B 2000B2         2 751739803         mac     y0,y1,a
P:0D5C 200022         2 751939804         asr     a
P:0D5D 587000 rrrrrr  3 752239805         move    a0,y:Fsw_stereocontrol+46
P:0D5F 0AF080 rrrrrr  6 752839806         jmp     L1454
                            39807 
                            39808 ; 6470 |    else if (sw_stereocontrol.temp2_reg >= 5)
                            39809 
P:0D61 5FF000 rrrrrr  3 753139811 L1450:  move    y:Fsw_stereocontrol+45,b
P:0D63 44F400 000005  3 753439812         move    #>5,x0
P:0D65 20004D         2 753639813         cmp     x0,b
P:0D66 0AF0A9 rrrrrr  6 754239814         jlt     L1451
                            39815 
                            39816 ; 6471 |        sw_stereocontrol.temp3_reg = 1903 * sw_stereocontrol.temp2_reg + 9166;
                            39817 
P:0D68 1CF400 00076F  3 754539819         move    b,x1	                #1903,y0
P:0D6A 50F400 0023CE  3 754839821         move    #9166,a0
P:0D6C 200032         2 755039822         asl     a
P:0D6D 2000E2         2 755239823         mac     x1,y0,a
P:0D6E 200022         2 755439824         asr     a
P:0D6F 587000 rrrrrr  3 755739825         move    a0,y:Fsw_stereocontrol+46
P:0D71 0AF080 rrrrrr  6 756339826         jmp     L1454
                            39827 
                            39828 ; 6472 |    else
                            39829 ; 6473 |    sw_stereocontrol.temp3_reg = 3736 * sw_stereocontrol.temp2_reg;
                            39830 
                            39832 L1451:
                            39837 
                            39838 ; 6474 |
                            39839 ; 6475 |    sw_stereocontrol.sd_audio_LmrGa_u16 = sw_stereocontrol.temp3_reg;
                            39840 
P:0D73 4FF000 rrrrrr  3 756639832         move    y:Fsw_stereocontrol+45,y1
P:0D75 45F400 000E98  3 756939833         move    #3736,x1
P:0D77 2000F8         2 757139834         mpy     y1,x1,b
P:0D78 20002A         2 757339835         asr     b
P:0D79 597000 rrrrrr  3 757639836         move    b0,y:Fsw_stereocontrol+46
                            39842 L1454:
                            39844 
                            39845 ; 6476 |
                            39846 ; 6477 |    if (sw_stereocontrol.sd_audio_LmrGa_u16 > 32767)
                            39847 
P:0D7B 4EF000 rrrrrr  3 757939842         move    y:Fsw_stereocontrol+46,y0
P:0D7D 4E7000 rrrrrr  3 758239843         move    y0,y:Fsw_stereocontrol+10
P:0D7F 5EF000 rrrrrr  3 758539849         move    y:Fsw_stereocontrol+10,a
P:0D81 46F400 007FFF  3 758839850         move    #$7FFF,y0
P:0D83 200055         2 759039851         cmp     y0,a
P:0D84 0AF0AF rrrrrr  6 759639852         jle     L1455
                            39853 
                            39854 ; 6478 |    sw_stereocontrol.sd_audio_LmrGa_u16 = 32767;   // Clamp to '1'
                            39855 
                            39858 
                            39859 ; 6479 |
                            39860 ; 6480 |
                            39861 ; 6481 |    // *** Define LPR_Gain = f(control LPR)
                            39862 ; 6482 |    // Assume that SoftMuting occurs across 20 dB range of control LPR
                            39863 ; 6483 |  // For sake of listenability, approximate antilog softmute curve
                            39864 ; 6484 |  // To simplify antilog approx, scale control LPR back into "RSSI in dB range" [0,60]
                            39865 ; 6485 |
                            39866 ; 6486 |#if 0
                            39867 ; 6487 |  sw_stereocontrol.sd_audio_ScaledControlLpr_u16 = sw_stereocontrol.sd_audio_ControlLpr_i16 >> 8;
                            39868 ; 6488 |#else
                            39869 ; 6489 |  if((dwBias1Up ==0) && (dwBias1Down==0))  // IBIAS bits jerk RSSI around, so we compensate for that here
                            39870 
P:0D86 4E7000 rrrrrr  3 759939857         move    y0,y:Fsw_stereocontrol+10
P:0D88 5EF000 rrrrrr  3 760239872 L1455:  move    y:FdwBias1Up+1,a
P:0D8A 2A0000         2 760439874         move    #0,a2
P:0D8B 58F000 rrrrrr  3 760739873         move    y:FdwBias1Up,a0
P:0D8D 200003         2 760939875         tst     a
P:0D8E 0AF0A2 rrrrrr  6 761539876         jne     L1457
P:0D90 5FF000 rrrrrr  3 761839877         move    y:FdwBias1Down+1,b
P:0D92 2B0000         2 762039879         move    #0,b2
P:0D93 59F000 rrrrrr  3 762339878         move    y:FdwBias1Down,b0
P:0D95 20000B         2 762539880         tst     b
P:0D96 0AF0A2 rrrrrr  6 763139881         jne     L1457
                            39882 
                            39883 ; 6490 |  {
                            39884 ; 6491 |    sw_stereocontrol.sd_audio_ScaledControlLpr_u16 = (sw_stereocontrol.sd_audio_ControlLpr_i16 >> 8)-6;
                            39885 
                            39893 
                            39894 ; 6492 |  }
                            39895 
P:0D98 4DF000 rrrrrr  3 763439887         move    y:Fsw_stereocontrol+24,x1
P:0D9A 56F400 000006  3 763739889         move    #>6,a
P:0D9C 0108F8         2 763939888         mpy     x1,#8,b
P:0D9D 21AF00         2 764139890         move    b1,b
P:0D9E 20001C         2 764339891         sub     a,b
P:0D9F 5D7000 rrrrrr  3 764639892         move    b1,y:Fsw_stereocontrol+28
P:0DA1 0AF080 rrrrrr  6 765239897         jmp     L1460
                            39898 
                            39899 ; 6493 |  else if(dwBias1Up==1)
                            39900 
P:0DA3 2A001B         2 765439902 L1457:  clr     b	                #0,a2
P:0DA4 000009         2 765639903         inc     b
P:0DA5 200005         2 765839905         cmp     b,a
P:0DA6 0AF0A2 rrrrrr  6 766439906         jne     L1458
                            39907 
                            39908 ; 6494 |  {
                            39909 ; 6495 |    sw_stereocontrol.sd_audio_ScaledControlLpr_u16 = (sw_stereocontrol.sd_audio_ControlLpr_i16 >> 8)-12;
                            39910 
                            39918 
                            39919 ; 6496 |  }
                            39920 
P:0DA8 4FF000 rrrrrr  3 766739912         move    y:Fsw_stereocontrol+24,y1
P:0DAA 0108C8         2 766939913         mpy     y1,#8,b
P:0DAB 21AF00         2 767139914         move    b1,b
P:0DAC 47F400 00000C  3 767439915         move    #>12,y1
P:0DAE 20007C         2 767639916         sub     y1,b
P:0DAF 5D7000 rrrrrr  3 767939917         move    b1,y:Fsw_stereocontrol+28
P:0DB1 0AF080 rrrrrr  6 768539922         jmp     L1460
                            39923 
                            39924 ; 6497 |  else
                            39925 ; 6498 |  {
                            39926 ; 6499 |    sw_stereocontrol.sd_audio_ScaledControlLpr_u16 = sw_stereocontrol.sd_audio_ControlLpr_i16 >> 8;
                            39927 
                            39929 L1458:
                            39932 
                            39933 ; 6500 |  }
                            39934 ; 6501 |#endif
                            39935 ; 6502 |
                            39936 ; 6503 |  sw_stereocontrol.temp1_reg = sw_stereocontrol.sd_audio_pCoefLprGaTh_u16 - sw_stereocontrol.sd_audio_ScaledControlLpr_u16;  // how far below softmute threshold are we?
                            39937 
P:0DB3 4FF000 rrrrrr  3 768839929         move    y:Fsw_stereocontrol+24,y1
P:0DB5 0108C0         2 769039930         mpy     y1,#8,a
P:0DB6 5C7000 rrrrrr  3 769339931         move    a1,y:Fsw_stereocontrol+28
                            39939 L1460:
                            39943 
                            39944 ; 6504 |  if (sw_stereocontrol.temp1_reg < 0)             // We're not below threshold, so no softmute needed
                            39945 
P:0DB8 4DF000 rrrrrr  3 769639940         move    y:Fsw_stereocontrol+28,x1
P:0DBA 5EF000 rrrrrr  3 769939939         move    y:Fsw_stereocontrol+4,a
P:0DBC 200064         2 770139941         sub     x1,a
P:0DBD 5C7000 rrrrrr  3 770439942         move    a1,y:Fsw_stereocontrol+44
P:0DBF 5FF000 rrrrrr  3 770739947         move    y:Fsw_stereocontrol+44,b
P:0DC1 20000B         2 770939948         tst     b
P:0DC2 0AF0A1 rrrrrr  6 771539949         jge     L1461
                            39950 
                            39951 ; 6505 |    sw_stereocontrol.temp1_reg = 0;
                            39952 
                            39956 
                            39957 ; 6506 |  sw_stereocontrol.temp2_reg = 20 - sw_stereocontrol.temp1_reg;    // SoftMute range = 20 dB
                            39958 
P:0DC4 2F0000         2 771739954         move    #0,b
P:0DC5 5F7000 rrrrrr  3 772039955         move    b,y:Fsw_stereocontrol+44
                            39960 L1461:
                            39964 
                            39965 ; 6507 |  if (sw_stereocontrol.temp2_reg < 0)
                            39966 
P:0DC7 4FF000 rrrrrr  3 772339960         move    y:Fsw_stereocontrol+44,y1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 144

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0DC9 57F400 000014  3 772639961         move    #>20,b
P:0DCB 20007C         2 772839962         sub     y1,b
P:0DCC 5D7000 rrrrrr  3 773139963         move    b1,y:Fsw_stereocontrol+45
P:0DCE 5FF000 rrrrrr  3 773439968         move    y:Fsw_stereocontrol+45,b
P:0DD0 20000B         2 773639969         tst     b
P:0DD1 0AF0A1 rrrrrr  6 774239970         jge     L1462
                            39971 
                            39972 ; 6508 |    sw_stereocontrol.temp2_reg = 0;               // if beyond that range, then clamp to 0
                            39973 
                            39977 
                            39978 ; 6509 |  // Form 100*10^((temp2_reg-20)/20) approximation (antilog) over range [0,20] dB
                            39979 ; 6510 |  // approximation in range [0,100], but we only want to softmute down to -20 dB, no further
                            39980 ; 6511 |  if (sw_stereocontrol.temp2_reg > 16)
                            39981 
P:0DD3 240000         2 774439975         move    #0,x0
P:0DD4 4C7000 rrrrrr  3 774739976         move    x0,y:Fsw_stereocontrol+45
P:0DD6 5FF000 rrrrrr  3 775039983 L1462:  move    y:Fsw_stereocontrol+45,b
P:0DD8 47F400 000010  3 775339984         move    #>16,y1
P:0DDA 20007D         2 775539985         cmp     y1,b
P:0DDB 0AF0AF rrrrrr  6 776139986         jle     L1463
                            39987 
                            39988 ; 6512 |    sw_stereocontrol.temp3_reg = 9 * sw_stereocontrol.temp2_reg - 80;
                            39989 
P:0DDD 19F400 000009  3 776439991         move    b,x0	                #>9,y1
P:0DDF 44F4C8 000050  3 776739993         mpy     x0,y1,b	                #>80,x0
P:0DE1 20002A         2 776939994         asr     b
P:0DE2 212F00         2 777139996         move    b0,b
P:0DE3 20004C         2 777339997         sub     x0,b
P:0DE4 5D7000 rrrrrr  3 777639998         move    b1,y:Fsw_stereocontrol+46
P:0DE6 0AF080 rrrrrr  6 778239999         jmp     L1468
                            40000 
                            40001 ; 6513 |  else if (sw_stereocontrol.temp2_reg > 12)
                            40002 
P:0DE8 5FF000 rrrrrr  3 778540004 L1463:  move    y:Fsw_stereocontrol+45,b
P:0DEA 56F400 00000C  3 778840005         move    #>12,a
P:0DEC 20000D         2 779040006         cmp     a,b
P:0DED 0AF0AF rrrrrr  6 779640007         jle     L1464
                            40008 
                            40009 ; 6514 |    sw_stereocontrol.temp3_reg = 6 * sw_stereocontrol.temp2_reg - 33;
                            40010 
P:0DEF 13B400 000006  3 779940012         move    b,y1	                #>6,x0
P:0DF1 45F4C8 000021  3 780240014         mpy     y1,x0,b	                #>$21,x1
P:0DF3 20002A         2 780440015         asr     b
P:0DF4 212F00         2 780640017         move    b0,b
P:0DF5 20006C         2 780840018         sub     x1,b
P:0DF6 5D7000 rrrrrr  3 781140019         move    b1,y:Fsw_stereocontrol+46
P:0DF8 0AF080 rrrrrr  6 781740020         jmp     L1468
                            40021 
                            40022 ; 6515 |  else if (sw_stereocontrol.temp2_reg > 8)
                            40023 
P:0DFA 5FF000 rrrrrr  3 782040025 L1464:  move    y:Fsw_stereocontrol+45,b
P:0DFC 47F400 000008  3 782340026         move    #>8,y1
P:0DFE 20007D         2 782540027         cmp     y1,b
P:0DFF 0AF0AF rrrrrr  6 783140028         jle     L1465
                            40029 
                            40030 ; 6516 |    sw_stereocontrol.temp3_reg = 4 * sw_stereocontrol.temp2_reg - 8;
                            40031 
P:0E01 20E43B         2 783340033         lsl     b	                y1,x0
P:0E02 20003B         2 783540034         lsl     b
P:0E03 20004C         2 783740036         sub     x0,b
P:0E04 5D7000 rrrrrr  3 784040037         move    b1,y:Fsw_stereocontrol+46
P:0E06 0AF080 rrrrrr  6 784640038         jmp     L1468
                            40039 
                            40040 ; 6517 |  else
                            40041 ; 6518 |    sw_stereocontrol.temp3_reg = 2 * sw_stereocontrol.temp2_reg + 9;
                            40042 
                            40044 L1465:
                            40048 
                            40049 ; 6519 |
                            40050 ; 6520 |  sw_stereocontrol.sd_audio_LprGa_u16 = 328 * sw_stereocontrol.temp3_reg;   // close to 32767*(1/100)
                            40051 
P:0E08 5FF000 rrrrrr  3 784940044         move    y:Fsw_stereocontrol+45,b
P:0E0A 56F400 000009  3 785240045         move    #>9,a
P:0E0C 20001A         2 785440046         addl    a,b
P:0E0D 5D7000 rrrrrr  3 785740047         move    b1,y:Fsw_stereocontrol+46
                            40053 L1468:
                            40058 
                            40059 ; 6521 |
                            40060 ; 6522 |  if (sw_stereocontrol.sd_audio_LprGa_u16 > 32767)
                            40061 
P:0E0F 4DF000 rrrrrr  3 786040053         move    y:Fsw_stereocontrol+46,x1
P:0E11 47F400 000148  3 786340054         move    #328,y1
P:0E13 2000F0         2 786540055         mpy     x1,y1,a
P:0E14 200022         2 786740056         asr     a
P:0E15 587000 rrrrrr  3 787040057         move    a0,y:Fsw_stereocontrol+9
P:0E17 5FF000 rrrrrr  3 787340063         move    y:Fsw_stereocontrol+9,b
P:0E19 20005D         2 787540064         cmp     y0,b
P:0E1A 0AF0AF rrrrrr  6 788140065         jle     L1469
                            40066 
                            40067 ; 6523 |    sw_stereocontrol.sd_audio_LprGa_u16 = 32767;   // Clamp to '1'
                            40068 
                            40071 
                            40072 ; 6524 |
                            40073 ; 6525 |  if (sw_stereocontrol.sd_audio_LprGa_u16 < 3277)
                            40074 
P:0E1C 4E7000 rrrrrr  3 788440070         move    y0,y:Fsw_stereocontrol+9
P:0E1E 5FF000 rrrrrr  3 788740076 L1469:  move    y:Fsw_stereocontrol+9,b
P:0E20 44F400 000CCD  3 789040077         move    #3277,x0
P:0E22 20004D         2 789240078         cmp     x0,b
P:0E23 0AF0A1 rrrrrr  6 789840079         jge     L1470
                            40080 
                            40081 ; 6526 |    sw_stereocontrol.sd_audio_LprGa_u16 = 3277;          // Clamp to 0.1*32767 = -20 dB min gain
                            40082 
P:0E25 4C7000 rrrrrr  3 790140084         move    x0,y:Fsw_stereocontrol+9
                            40085 L1470:
                            40086 
                            40087 ; 6527 |
                            40088 ; 6528 |}
                            40089 
P:0E27 205700         2 790340091         move    (r7)-
P:0E28 205700         2 790540092         move    (r7)-
P:0E29 00000C         4 790940094         rts
                            40096 
                            40097 ; 6529 |#pragma asm
P:0E2A                      40098         org p,".ptextstfm1000":
                            40099 ; 6531 |#pragma endasm
                            40100 
                            40106 
                            40109 
Y:0000                      40110         org     y,".ybssstfm1000",bss:
                            40111 Fg_astSearchStations:
Y:0000                      40112         ds      2
   |   RESERVED                   
Y:0001
                            40116 Fs_wBeginSearchFMFrequency:
Y:0002 RESERVED             40117         ds      1
Y:0002
                            40126 
X:0000                      40127         org     x,".xbssstfm1000",bss:
                            40128 Fs_bTunerSearchHitBandLimit:
X:0000 RESERVED             40129         ds      1
X:0000
                            40140 
Y:0003                      40141         org     y,".ybssstfm1000",bss:
                            40142 Fg_wCurrentPreset:
Y:0003 RESERVED             40143         ds      1
Y:0003
                            40148 FdwBias1Down:
Y:0004                      40149         ds      2
   |   RESERVED                   
Y:0005
                            40173 Fg_wFMTunerError:
Y:0006 RESERVED             40174         ds      1
Y:0006
                            40178 Fs_wCurrentFMFrequency:
Y:0007 RESERVED             40179         ds      1
Y:0007
                            40183 Fs_iFMSignalStrengthRSSI:
Y:0008 RESERVED             40184         ds      1
Y:0008
                            40196 Fg_astPresetStations:
Y:0009                      40197         ds      20
   |   RESERVED                   
Y:001C
                            40202 FdwBias1Up:
Y:001D                      40203         ds      2
   |   RESERVED                   
Y:001E
                            40207 
X:0001                      40208         org     x,".xbssstfm1000",bss:
                            40209 Fg_bTunedStereoStation:
X:0001 RESERVED             40210         ds      1
X:0001
                            40214 
Y:001F                      40215         org     y,".ybssstfm1000",bss:
                            40216 Fs_iFMPresetCount:
Y:001F RESERVED             40217         ds      1
Y:001F
                            40220 Fg_wRawRSSIData:
Y:0020 RESERVED             40221         ds      1
Y:0020
                            40226 FStfmTuneData:
Y:0021                      40227         ds      61
   |   RESERVED                   
Y:005D
                            40228 
                            40229         extern  Rdiv_iii, Rdiv_uiuiui, Rfpaddf2, Rfpcfi22, Rfpcif22
                            40230         extern  Rfpcuf12, Rfpdivf2, Rfpmulf2, SysGetCurrentTime
                            40231         extern  y:FIIRFiltCoeffSemaphore, FSTFM1000ContinueSearching
                            40232         extern  FSTFM1000DataPathOff, FSTFM1000FindRSSIThresHold
                            40233         extern  FSTFM1000I2CInit, FSTFM1000OptimizeChannel
                            40234         extern  FSTFM1000RegsPowerUp1, FSTFM1000RegsPowerUp2
                            40235         extern  FSTFM1000TunerSearchEnded, FSysGetSpeed, FSysPostMessage
                            40236         extern  FTunerDriverSetTunerStandby, y:FgCOEF_SCALE
                            40237         extern  y:FgLMR_Mult_fract, y:FgLPR_Mult_fract
                            40238         extern  y:Fg_bStereoBroadcast, x:Fg_iTunerProcessIntervalMs
                            40239         extern  y:Fg_sd_audio_LprA1_i16, y:Fg_sd_audio_LprA2_i16
                            40240         extern  y:Fg_sd_audio_LprB0_i16, y:Fg_sd_audio_LprB1_i16
                            40241         extern  y:Fg_sd_audio_pCoefBypassBlend_u1
                            40242         extern  y:Fg_sd_audio_pCoefBypassSoftmute_u1
                            40243         extern  y:Fg_sd_audio_pCoefForcedMono_u1, x:Fg_wTunedFrequency
                            40244         extern  y:Fsw_stereocontrol
                            40245 
                            40246         global  FGetDclkCount, FSTFM1000BringUp, FSTFM1000ContinueScanning
                            40247         global  FSTFM1000ContinueSearching_Funclet
                            40248         global  FSTFM1000DataPathOff_Funclet, FSTFM1000DataPathOn
                            40249         global  FSTFM1000EndAutoScanning
                            40250         global  FSTFM1000FindRSSIThresHold_Funclet, FSTFM1000I2CClose
                            40251         global  FSTFM1000I2CInit_Funclet, FSTFM1000I2CReadRegister
                            40252         global  FSTFM1000I2CWriteRegister, FSTFM1000LookForPilot
                            40253         global  FSTFM1000NextSearchFrequency, FSTFM1000OptimizeChannelEnd
                            40254         global  FSTFM1000OptimizeChannelStart
                            40255         global  FSTFM1000OptimizeChannel_Funclet
                            40256         global  FSTFM1000PrelimPilotCheck, FSTFM1000QuickTune
                            40257         global  FSTFM1000ReadDataReAlignment
                            40258         global  FSTFM1000ReadRegisterToShadow, FSTFM1000ReadShadowRegister
                            40259         global  FSTFM1000ReadSubRegister, FSTFM1000RegValsReset
                            40260         global  FSTFM1000RegsPowerUp1_Funclet
                            40261         global  FSTFM1000RegsPowerUp2_Funclet, FSTFM1000Reset
                            40262         global  FSTFM1000SetLnaBias, FSTFM1000TakeDown
                            40263         global  FSTFM1000TrackTable, FSTFM1000TunerLockStation
                            40264         global  FSTFM1000TunerLowPowerMode, FSTFM1000TunerMonitorQuality
                            40265         global  FSTFM1000TunerMonitorQualityStateFinal
                            40266         global  FSTFM1000TunerMonitorQualityStateStart
                            40267         global  FSTFM1000TunerPowerUp, FSTFM1000TunerQueryIsStation
                            40268         global  FSTFM1000TunerQuicksetStation
                            40269         global  FSTFM1000TunerSearchEnded_Funclet
                            40270         global  FSTFM1000TuningSearchingScanning
                            40271         global  FSTFM1000WriteDataReAlignment, FSTFM1000WriteRegister
                            40272         global  FSTFM1000delay_ms, FSetDclkCount, FStfmTuneData
                            40273         global  FStfmTuneDefault, FTunerDriverErasePresetStations_Funclet
                            40274         global  FTunerDriverGetTunerstate
                            40275         global  FTunerDriverIncrementDown_Funclet
                            40276         global  FTunerDriverIncrementUp_Funclet, FTunerDriverInit_Funclet
                            40277         global  FTunerDriverScanStations_Funclet
                            40278         global  FTunerDriverSearchDown_Funclet, FTunerDriverSearchUp
                            40279         global  FTunerDriverSetMonoStereoMode_Funclet
                            40280         global  FTunerDriverSetPresetStations_Funclet
                            40281         global  FTunerDriverSetToPresetStations_Funclet
                            40282         global  FTunerDriverSetTunerStandby_Funclet
                            40283         global  FTunerDriverTuneToFrequency, FTunerGetStatus
                            40284         global  FTunerTuningInit, FbIsFirstTimeEnterFMMode
                            40285         global  FbIsFirstTimeToNewStation, FbIsWeakSignal
                            40286         global  Fconst_sd_audio_data, Fcount_MonitorQuality, FdwBias1Down
                            40287         global  FdwBias1Up, Fg_STFM1000_CustomerForceMono
                            40288         global  Fg_astPresetStations, Fg_astSearchStations
                            40289         global  Fg_bSearchEndAtBandLimit, Fg_bTunedStereoStation
                            40290         global  Fg_wCurrentFrequency, Fg_wCurrentPreset, Fg_wFMTunerError
                            40291         global  Fg_wRawRSSIData, Fglobal_filtered_rssi
                            40292         global  Fs_bTunerSearchHitBandLimit, Fs_eMonitorSignalQualityState
                            40293         global  Fs_eOptimizeChannelState, Fs_iFMPresetCount
                            40294         global  Fs_iFMSignalStrengthRSSI, Fs_iFMTunerSearchStatus
                            40295         global  Fs_wBeginSearchFMFrequency, Fs_wCurrentFMFrequency
                            40296         global  Fs_wTrackTableIndex, Fsw_stereocontrol_bwsweep
                            40297         global  Fsw_stereocontrol_xcall, FwCountForTriggerMonitorQuality
                            40298         global  FwSd_ctl_Confidence_u16
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page 145

M:ADDR CODE           CYCLES LINE SOURCELINE
                            40299 
                            40300         local   Fdo_nothing, L18, L21, L22, L31, L44, L45, L46, L59, L60
                            40301         local   L61, L62, L63, L64, L65, L85, L91, L92, L93, L94, L95, L136
                            40302         local   L137, L155, L186, L201, L202, L203, L205, L229, L234, L235
                            40303         local   L240, L241, L242, L243, L244, L245, L246, L247, L249, L250
                            40304         local   L252, L297, L298, L299, L300, L301, L302, L304, L305, L306
                            40305         local   L307, L308, L309, L313, L314, L323, L324, L325, L339, L341
                            40306         local   L342, L343, L345, L364, L365, L366, L367, L368, L369, L371
                            40307         local   L372, L408, L409, L412, L413, L414, L415, L416, L417, L418
                            40308         local   L419, L421, L423, L434, L435, L436, L437, L438, L440, L441
                            40309         local   L442, L611, L612, L613, L614, L615, L616, L617, L618, L619
                            40310         local   L620, L621, L622, L623, L624, L625, L626, L627, L628, L629
                            40311         local   L632, L633, L646, L647, L648, L649, L650, L651, L652, L681
                            40312         local   L682, L683, L684, L685, L713, L714, L715, L717, L719, L721
                            40313         local   L722, L723, L724, L725, L726, L727, L728, L729, L730, L731
                            40314         local   L732, L737, L743, L744, L745, L746, L747, L748, L749, L750
                            40315         local   L751, L752, L753, L770, L771, L772, L773, L774, L775, L776
                            40316         local   L777, L778, L779, L780, L781, L783, L810, L811, L812, L813
                            40317         local   L814, L815, L816, L817, L818, L819, L820, L821, L822, L823
                            40318         local   L824, L825, L826, L827, L828, L831, L832, L863, L864, L865
                            40319         local   L866, L868, L869, L870, L871, L872, L875, L876, L877, L878
                            40320         local   L879, L888, L889, L890, L891, L892, L893, L894, L917, L918
                            40321         local   L919, L920, L921, L922, L923, L930, L931, L932, L933, L934
                            40322         local   L935, L936, L937, L938, L939, L940, L1003, L1004, L1005
                            40323         local   L1008, L1009, L1010, L1011, L1012, L1013, L1014, L1015
                            40324         local   L1017, L1018, L1023, L1025, L1026, L1027, L1029, L1074
                            40325         local   L1075, L1076, L1077, L1078, L1081, L1082, L1084, L1085
                            40326         local   L1088, L1097, L1098, L1099, L1100, L1103, L1122, L1123
                            40327         local   L1124, L1126, L1127, L1129, L1186, L1187, L1188, L1189
                            40328         local   L1190, L1191, L1195, L1196, L1197, L1198, L1199, L1200
                            40329         local   L1204, L1205, L1314, L1315, L1316, L1317, L1318, L1319
                            40330         local   L1320, L1321, L1322, L1323, L1324, L1325, L1327, L1330
                            40331         local   L1331, L1332, L1334, L1347, L1380, L1381, L1383, L1384
                            40332         local   L1385, L1387, L1391, L1408, L1410, L1411, L1412, L1414
                            40333         local   L1417, L1419, L1421, L1422, L1423, L1424, L1426, L1427
                            40334         local   L1429, L1434, L1435, L1437, L1438, L1439, L1440, L1441
                            40335         local   L1442, L1443, L1444, L1446, L1447, L1448, L1449, L1450
                            40336         local   L1451, L1454, L1455, L1457, L1458, L1460, L1461, L1462
                            40337         local   L1463, L1464, L1465, L1468, L1469, L1470, L1471, L1472
                            40338         local   L1473, L1474
                            40339 
                            40340         calls   "STFM1000BringUp", "STFM1000DataPathOn"
                            40341         calls   "STFM1000ContinueScanning", "Rdiv_uiuiui"
                            40342         calls   "STFM1000ContinueScanning", "STFM1000EndAutoScanning"
                            40343         calls   "STFM1000ContinueScanning", "SysPostMessage"
                            40344         calls   "STFM1000ContinueScanning", "TunerDriverSearchUp"
                            40345         calls   "STFM1000ContinueSearching_Funclet", "Rdiv_iii"
                            40346         calls   "STFM1000ContinueSearching_Funclet", "STFM1000NextSearchFrequency"
                            40347         calls   "STFM1000ContinueSearching_Funclet", "STFM1000TunerQueryIsStation"
                            40348         calls   "STFM1000ContinueSearching_Funclet", "STFM1000TunerSearchEnded"
                            40349         calls   "STFM1000DataPathOff_Funclet", "STFM1000WriteRegister"
                            40350         calls   "STFM1000DataPathOn", "STFM1000WriteRegister"
                            40351         calls   "STFM1000DataPathOn", "STFM1000delay_ms"
                            40352         calls   "STFM1000EndAutoScanning", "TunerDriverTuneToFrequency"
                            40353         calls   "STFM1000FindRSSIThresHold_Funclet", "STFM1000TunerQueryIsStation"
                            40354         calls   "STFM1000FindRSSIThresHold_Funclet", "STFM1000TunerQuicksetStation"
                            40355         calls   "STFM1000FindRSSIThresHold_Funclet", "STFM1000delay_ms"
                            40356         calls   "STFM1000I2CInit_Funclet", "SysGetSpeed"
                            40357         calls   "STFM1000I2CReadRegister", "GetDclkCount"
                            40358         calls   "STFM1000I2CReadRegister", "STFM1000I2CWriteRegister"
                            40359         calls   "STFM1000I2CReadRegister", "SetDclkCount"
                            40360         calls   "STFM1000LookForPilot", "STFM1000ReadSubRegister"
                            40361         calls   "STFM1000LookForPilot", "STFM1000WriteRegister"
                            40362         calls   "STFM1000NextSearchFrequency", "STFM1000TunerQuicksetStation"
                            40363         calls   "STFM1000NextSearchFrequency", "STFM1000TunerSearchEnded"
                            40364         calls   "STFM1000OptimizeChannelEnd", "STFM1000WriteRegister"
                            40365         calls   "STFM1000OptimizeChannelEnd", "SysPostMessage"
                            40366         calls   "STFM1000OptimizeChannelStart", "STFM1000WriteRegister"
                            40367         calls   "STFM1000OptimizeChannel_Funclet", "STFM1000LookForPilot"
                            40368         calls   "STFM1000OptimizeChannel_Funclet", "STFM1000OptimizeChannelEnd"
                            40369         calls   "STFM1000OptimizeChannel_Funclet", "STFM1000OptimizeChannelStart"
                            40370         calls   "STFM1000OptimizeChannel_Funclet", "STFM1000ReadSubRegister"
                            40371         calls   "STFM1000OptimizeChannel_Funclet", "STFM1000WriteRegister"
                            40372         calls   "STFM1000PrelimPilotCheck", "STFM1000ReadSubRegister"
                            40373         calls   "STFM1000QuickTune", "Rdiv_uiuiui", "Rfpaddf2", "Rfpcfi22"
                            40374         calls   "STFM1000QuickTune", "Rfpcif22", "Rfpcuf12", "Rfpdivf2"
                            40375         calls   "STFM1000QuickTune", "Rfpmulf2", "STFM1000WriteRegister"
                            40376         calls   "STFM1000ReadRegisterToShadow", "STFM1000I2CInit"
                            40377         calls   "STFM1000ReadRegisterToShadow", "STFM1000I2CReadRegister"
                            40378         calls   "STFM1000ReadRegisterToShadow", "STFM1000ReadDataReAlignment"
                            40379         calls   "STFM1000ReadSubRegister", "STFM1000ReadRegisterToShadow"
                            40380         calls   "STFM1000ReadSubRegister", "STFM1000ReadShadowRegister"
                            40381         calls   "STFM1000RegsPowerUp1_Funclet", "STFM1000WriteRegister"
                            40382         calls   "STFM1000RegsPowerUp1_Funclet", "STFM1000delay_ms"
                            40383         calls   "STFM1000RegsPowerUp2_Funclet", "STFM1000WriteRegister"
                            40384         calls   "STFM1000SetLnaBias", "STFM1000ReadRegisterToShadow"
                            40385         calls   "STFM1000SetLnaBias", "STFM1000ReadShadowRegister"
                            40386         calls   "STFM1000SetLnaBias", "STFM1000WriteRegister"
                            40387         calls   "STFM1000TakeDown", "STFM1000DataPathOff"
                            40388         calls   "STFM1000TunerLockStation", "STFM1000OptimizeChannel"
                            40389         calls   "STFM1000TunerLowPowerMode", "STFM1000WriteRegister"
                            40390         calls   "STFM1000TunerMonitorQuality", "STFM1000ReadSubRegister"
                            40391         calls   "STFM1000TunerMonitorQuality", "STFM1000TunerMonitorQualityStateFinal"
                            40392         calls   "STFM1000TunerMonitorQuality", "STFM1000TunerMonitorQualityStateStart"
                            40393         calls   "STFM1000TunerMonitorQuality", "STFM1000WriteRegister"
                            40394         calls   "STFM1000TunerMonitorQualityStateFinal", "STFM1000ReadRegisterToShadow"
                            40395         calls   "STFM1000TunerMonitorQualityStateFinal", "STFM1000ReadShadowRegister"
                            40396         calls   "STFM1000TunerMonitorQualityStateFinal", "STFM1000WriteRegister"
                            40397         calls   "STFM1000TunerMonitorQualityStateStart", "STFM1000LookForPilot"
                            40398         calls   "STFM1000TunerMonitorQualityStateStart", "STFM1000OptimizeChannel"
                            40399         calls   "STFM1000TunerMonitorQualityStateStart", "STFM1000PrelimPilotCheck"
                            40400         calls   "STFM1000TunerMonitorQualityStateStart", "STFM1000ReadRegisterToShadow"
                            40401         calls   "STFM1000TunerMonitorQualityStateStart", "STFM1000SetLnaBias"
                            40402         calls   "STFM1000TunerMonitorQualityStateStart", "STFM1000TunerMonitorQualityStateFinal"
                            40403         calls   "STFM1000TunerMonitorQualityStateStart", "STFM1000WriteRegister"
                            40404         calls   "STFM1000TunerPowerUp", "STFM1000RegsPowerUp1"
                            40405         calls   "STFM1000TunerPowerUp", "STFM1000RegsPowerUp2"
                            40406         calls   "STFM1000TunerQueryIsStation", "STFM1000ReadRegisterToShadow"
                            40407         calls   "STFM1000TunerQueryIsStation", "STFM1000ReadShadowRegister"
                            40408         calls   "STFM1000TunerQuicksetStation", "STFM1000QuickTune"
                            40409         calls   "STFM1000TunerSearchEnded_Funclet", "STFM1000TunerQuicksetStation"
                            40410         calls   "STFM1000TuningSearchingScanning", "STFM1000ContinueScanning"
                            40411         calls   "STFM1000TuningSearchingScanning", "STFM1000ContinueSearching"
                            40412         calls   "STFM1000TuningSearchingScanning", "STFM1000TunerLockStation"
                            40413         calls   "STFM1000WriteRegister", "STFM1000I2CInit"
                            40414         calls   "STFM1000WriteRegister", "STFM1000I2CWriteRegister"
                            40415         calls   "STFM1000WriteRegister", "STFM1000WriteDataReAlignment"
                            40416         calls   "STFM1000delay_ms", "SysGetCurrentTime"
                            40417         calls   "TunerDriverErasePresetStations_Funclet", "SysPostMessage"
                            40418         calls   "TunerDriverGetTunerstate", "Rdiv_uiuiui"
                            40419         calls   "TunerDriverGetTunerstate", "STFM1000TunerMonitorQuality"
                            40420         calls   "TunerDriverGetTunerstate", "STFM1000TunerQueryIsStation"
                            40421         calls   "TunerDriverGetTunerstate", "SysPostMessage"
                            40422         calls   "TunerDriverGetTunerstate", "sw_stereocontrol_bwsweep"
                            40423         calls   "TunerDriverGetTunerstate", "sw_stereocontrol_xcall"
                            40424         calls   "TunerDriverIncrementDown_Funclet", "Rdiv_uiuiui"
                            40425         calls   "TunerDriverIncrementDown_Funclet", "TunerDriverTuneToFrequency"
                            40426         calls   "TunerDriverIncrementUp_Funclet", "Rdiv_uiuiui"
                            40427         calls   "TunerDriverIncrementUp_Funclet", "TunerDriverTuneToFrequency"
                            40428         calls   "TunerDriverInit_Funclet", "STFM1000I2CInit"
                            40429         calls   "TunerDriverInit_Funclet", "STFM1000ReadSubRegister"
                            40430         calls   "TunerDriverInit_Funclet", "STFM1000RegValsReset"
                            40431         calls   "TunerDriverInit_Funclet", "STFM1000Reset"
                            40432         calls   "TunerDriverInit_Funclet", "TunerDriverSetTunerStandby"
                            40433         calls   "TunerDriverScanStations_Funclet", "TunerDriverSearchUp"
                            40434         calls   "TunerDriverSearchDown_Funclet", "STFM1000QuickTune"
                            40435         calls   "TunerDriverSearchDown_Funclet", "STFM1000WriteRegister"
                            40436         calls   "TunerDriverSearchDown_Funclet", "TunerTuningInit"
                            40437         calls   "TunerDriverSearchUp", "STFM1000QuickTune"
                            40438         calls   "TunerDriverSearchUp", "STFM1000WriteRegister"
                            40439         calls   "TunerDriverSearchUp", "TunerTuningInit"
                            40440         calls   "TunerDriverSetPresetStations_Funclet", "SysPostMessage"
                            40441         calls   "TunerDriverSetToPresetStations_Funclet", "TunerDriverTuneToFrequency"
                            40442         calls   "TunerDriverSetTunerStandby_Funclet", "STFM1000BringUp"
                            40443         calls   "TunerDriverSetTunerStandby_Funclet", "STFM1000FindRSSIThresHold"
                            40444         calls   "TunerDriverSetTunerStandby_Funclet", "STFM1000I2CInit"
                            40445         calls   "TunerDriverSetTunerStandby_Funclet", "STFM1000TakeDown"
                            40446         calls   "TunerDriverSetTunerStandby_Funclet", "STFM1000TunerLowPowerMode"
                            40447         calls   "TunerDriverSetTunerStandby_Funclet", "STFM1000TunerPowerUp"
                            40448         calls   "TunerDriverSetTunerStandby_Funclet", "STFM1000WriteRegister"
                            40449         calls   "TunerDriverTuneToFrequency", "STFM1000TunerQuicksetStation"
                            40450         calls   "TunerDriverTuneToFrequency", "STFM1000WriteRegister"
                            40451         calls   "TunerDriverTuneToFrequency", "TunerTuningInit"
                            40452         calls   "TunerGetStatus", "STFM1000OptimizeChannel"
                            40453         calls   "TunerGetStatus", "STFM1000TunerMonitorQuality"
                            40454         calls   "TunerGetStatus", "STFM1000TuningSearchingScanning"
                            40455 
