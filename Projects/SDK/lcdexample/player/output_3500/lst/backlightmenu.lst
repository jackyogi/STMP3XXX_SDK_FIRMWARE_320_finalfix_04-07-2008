TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfc636b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;backlightmenu.c:
                               96 ; 1    |#include "types.h"
                               97 
                               99 
                              100 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              101 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              102 ; 3    |//
                              103 ; 4    |// Filename: types.h
                              104 ; 5    |// Description: Standard data types
                              105 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              106 ; 7    |
                              107 ; 8    |#ifndef _TYPES_H
                              108 ; 9    |#define _TYPES_H
                              109 ; 10   |
                              110 ; 11   |// TODO:  move this outta here!
                              111 ; 12   |#if !defined(NOERROR)
                              112 ; 13   |#define NOERROR 0
                              113 ; 14   |#define SUCCESS 0
                              114 ; 15   |#endif 
                              115 ; 16   |#if !defined(SUCCESS)
                              116 ; 17   |#define SUCCESS  0
                              117 ; 18   |#endif
                              118 ; 19   |#if !defined(ERROR)
                              119 ; 20   |#define ERROR   -1
                              120 ; 21   |#endif
                              121 ; 22   |#if !defined(FALSE)
                              122 ; 23   |#define FALSE 0
                              123 ; 24   |#endif
                              124 ; 25   |#if !defined(TRUE)
                              125 ; 26   |#define TRUE  1
                              126 ; 27   |#endif
                              127 ; 28   |
                              128 ; 29   |#if !defined(NULL)
                              129 ; 30   |#define NULL 0
                              130 ; 31   |#endif
                              131 ; 32   |
                              132 ; 33   |#define MAX_INT     0x7FFFFF
                              133 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              134 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              135 ; 36   |#define MAX_ULONG   (-1) 
                              136 ; 37   |
                              137 ; 38   |#define WORD_SIZE   24              // word size in bits
                              138 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              139 ; 40   |
                              140 ; 41   |
                              141 ; 42   |#define BYTE    unsigned char       // btVarName
                              142 ; 43   |#define CHAR    signed char         // cVarName
                              143 ; 44   |#define USHORT  unsigned short      // usVarName
                              144 ; 45   |#define SHORT   unsigned short      // sVarName
                              145 ; 46   |#define WORD    unsigned int        // wVarName
                              146 ; 47   |#define INT     signed int          // iVarName
                              147 ; 48   |#define DWORD   unsigned long       // dwVarName
                              148 ; 49   |#define LONG    signed long         // lVarName
                              149 ; 50   |#define BOOL    unsigned int        // bVarName
                              150 ; 51   |#define FRACT   _fract              // frVarName
                              151 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              152 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              153 ; 54   |#define FLOAT   float               // fVarName
                              154 ; 55   |#define DBL     double              // dVarName
                              155 ; 56   |#define ENUM    enum                // eVarName
                              156 ; 57   |#define CMX     _complex            // cmxVarName
                              157 ; 58   |typedef WORD UCS3;                   // 
                              158 ; 59   |
                              159 ; 60   |#define UINT16  unsigned short
                              160 ; 61   |#define UINT8   unsigned char   
                              161 ; 62   |#define UINT32  unsigned long
                              162 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              163 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              164 ; 65   |#define WCHAR   UINT16
                              165 ; 66   |
                              166 ; 67   |//UINT128 is 16 bytes or 6 words
                              167 ; 68   |typedef struct UINT128_3500 {   
                              168 ; 69   |    int val[6];     
                              169 ; 70   |} UINT128_3500;
                              170 ; 71   |
                              171 ; 72   |#define UINT128   UINT128_3500
                              172 ; 73   |
                              173 ; 74   |// Little endian word packed byte strings:   
                              174 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              175 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              176 ; 77   |// Little endian word packed byte strings:   
                              177 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              178 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              179 ; 80   |
                              180 ; 81   |// Declare Memory Spaces To Use When Coding
                              181 ; 82   |// A. Sector Buffers
                              182 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              183 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              184 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              185 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              186 
                              188 
                              189 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              190 ; 88   |// B. Media DDI Memory
                              191 ; 89   |#define MEDIA_DDI_MEM _Y
                              192 ; 90   |
                              193 ; 91   |
                              194 ; 92   |
                              195 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              196 ; 94   |// Examples of circular pointers:
                              197 ; 95   |//    INT CIRC cpiVarName
                              198 ; 96   |//    DWORD CIRC cpdwVarName
                              199 ; 97   |
                              200 ; 98   |#define RETCODE INT                 // rcVarName
                              201 ; 99   |
                              202 ; 100  |// generic bitfield structure
                              203 ; 101  |struct Bitfield {
                              204 ; 102  |    unsigned int B0  :1;
                              205 ; 103  |    unsigned int B1  :1;
                              206 ; 104  |    unsigned int B2  :1;
                              207 ; 105  |    unsigned int B3  :1;
                              208 ; 106  |    unsigned int B4  :1;
                              209 ; 107  |    unsigned int B5  :1;
                              210 ; 108  |    unsigned int B6  :1;
                              211 ; 109  |    unsigned int B7  :1;
                              212 ; 110  |    unsigned int B8  :1;
                              213 ; 111  |    unsigned int B9  :1;
                              214 ; 112  |    unsigned int B10 :1;
                              215 ; 113  |    unsigned int B11 :1;
                              216 ; 114  |    unsigned int B12 :1;
                              217 ; 115  |    unsigned int B13 :1;
                              218 ; 116  |    unsigned int B14 :1;
                              219 ; 117  |    unsigned int B15 :1;
                              220 ; 118  |    unsigned int B16 :1;
                              221 ; 119  |    unsigned int B17 :1;
                              222 ; 120  |    unsigned int B18 :1;
                              223 ; 121  |    unsigned int B19 :1;
                              224 ; 122  |    unsigned int B20 :1;
                              225 ; 123  |    unsigned int B21 :1;
                              226 ; 124  |    unsigned int B22 :1;
                              227 ; 125  |    unsigned int B23 :1;
                              228 ; 126  |};
                              229 ; 127  |
                              230 ; 128  |union BitInt {
                              231 ; 129  |        struct Bitfield B;
                              232 ; 130  |        int        I;
                              233 ; 131  |};
                              234 ; 132  |
                              235 ; 133  |#define MAX_MSG_LENGTH 10
                              236 ; 134  |struct CMessage
                              237 ; 135  |{
                              238 ; 136  |        unsigned int m_uLength;
                              239 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              240 ; 138  |};
                              241 ; 139  |
                              242 ; 140  |typedef struct {
                              243 ; 141  |    WORD m_wLength;
                              244 ; 142  |    WORD m_wMessage;
                              245 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              246 ; 144  |} Message;
                              247 ; 145  |
                              248 ; 146  |struct MessageQueueDescriptor
                              249 ; 147  |{
                              250 ; 148  |        int *m_pBase;
                              251 ; 149  |        int m_iModulo;
                              252 ; 150  |        int m_iSize;
                              253 ; 151  |        int *m_pHead;
                              254 ; 152  |        int *m_pTail;
                              255 ; 153  |};
                              256 ; 154  |
                              257 ; 155  |struct ModuleEntry
                              258 ; 156  |{
                              259 ; 157  |    int m_iSignaledEventMask;
                              260 ; 158  |    int m_iWaitEventMask;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                              261 ; 159  |    int m_iResourceOfCode;
                              262 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              263 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              264 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              265 ; 163  |    int m_uTimeOutHigh;
                              266 ; 164  |    int m_uTimeOutLow;
                              267 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              268 ; 166  |};
                              269 ; 167  |
                              270 ; 168  |union WaitMask{
                              271 ; 169  |    struct B{
                              272 ; 170  |        unsigned int m_bNone     :1;
                              273 ; 171  |        unsigned int m_bMessage  :1;
                              274 ; 172  |        unsigned int m_bTimer    :1;
                              275 ; 173  |        unsigned int m_bButton   :1;
                              276 ; 174  |    } B;
                              277 ; 175  |    int I;
                              278 ; 176  |} ;
                              279 ; 177  |
                              280 ; 178  |
                              281 ; 179  |struct Button {
                              282 ; 180  |        WORD wButtonEvent;
                              283 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              284 ; 182  |};
                              285 ; 183  |
                              286 ; 184  |struct Message {
                              287 ; 185  |        WORD wMsgLength;
                              288 ; 186  |        WORD wMsgCommand;
                              289 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              290 ; 188  |};
                              291 ; 189  |
                              292 ; 190  |union EventTypes {
                              293 ; 191  |        struct CMessage msg;
                              294 ; 192  |        struct Button Button ;
                              295 ; 193  |        struct Message Message;
                              296 ; 194  |};
                              297 ; 195  |
                              298 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              299 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              300 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              301 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              302 ; 200  |
                              303 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              304 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              305 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              306 ; 204  |
                              307 ; 205  |#if DEBUG
                              308 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              309 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              310 ; 208  |#else 
                              311 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              312 ; 210  |#define DebugBuildAssert(x)    
                              313 ; 211  |#endif
                              314 ; 212  |
                              315 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              316 ; 214  |//  #pragma asm
                              317 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              318 ; 216  |//  #pragma endasm
                              319 ; 217  |
                              320 ; 218  |
                              321 ; 219  |#ifdef COLOR_262K
                              322 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              323 ; 221  |#elif defined(COLOR_65K)
                              324 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              325 ; 223  |#else
                              326 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              327 ; 225  |#endif
                              328 ; 226  |    
                              329 ; 227  |#endif // #ifndef _TYPES_H
                              330 
                              332 
                              333 ; 2    |#include "exec.h"
                              334 
                              336 
                              337 ; 1    |#ifndef EXEC_H
                              338 ; 2    |#define EXEC_H
                              339 ; 3    |
                              340 ; 4    |
                              341 ; 5    |void _reentrant SysPostMessage(int iLength,...);
                              342 ; 6    |int _asmfunc GetMessage(struct MessageQueueDescriptor*,struct CMessage * );
                              343 ; 7    |long _asmfunc SysGetCurrentTime(void);
                              344 ; 8    |
                              345 ; 9    |
                              346 ; 10   |#endif
                              347 
                              349 
                              350 ; 3    |#include "menumanager.h"
                              351 
                              353 
                              354 ; 1    |#ifndef _EXEC_H
                              355 ; 2    |#define _EXEC_H
                              356 ; 3    |
                              357 ; 4    |#include "types.h"
                              358 
                              360 
                              361 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              362 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              363 ; 3    |//
                              364 ; 4    |// Filename: types.h
                              365 ; 5    |// Description: Standard data types
                              366 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              367 ; 7    |
                              368 ; 8    |#ifndef _TYPES_H
                              369 ; 9    |#define _TYPES_H
                              370 ; 10   |
                              371 ; 11   |// TODO:  move this outta here!
                              372 ; 12   |#if !defined(NOERROR)
                              373 ; 13   |#define NOERROR 0
                              374 ; 14   |#define SUCCESS 0
                              375 ; 15   |#endif 
                              376 ; 16   |#if !defined(SUCCESS)
                              377 ; 17   |#define SUCCESS  0
                              378 ; 18   |#endif
                              379 ; 19   |#if !defined(ERROR)
                              380 ; 20   |#define ERROR   -1
                              381 ; 21   |#endif
                              382 ; 22   |#if !defined(FALSE)
                              383 ; 23   |#define FALSE 0
                              384 ; 24   |#endif
                              385 ; 25   |#if !defined(TRUE)
                              386 ; 26   |#define TRUE  1
                              387 ; 27   |#endif
                              388 ; 28   |
                              389 ; 29   |#if !defined(NULL)
                              390 ; 30   |#define NULL 0
                              391 ; 31   |#endif
                              392 ; 32   |
                              393 ; 33   |#define MAX_INT     0x7FFFFF
                              394 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              395 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              396 ; 36   |#define MAX_ULONG   (-1) 
                              397 ; 37   |
                              398 ; 38   |#define WORD_SIZE   24              // word size in bits
                              399 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              400 ; 40   |
                              401 ; 41   |
                              402 ; 42   |#define BYTE    unsigned char       // btVarName
                              403 ; 43   |#define CHAR    signed char         // cVarName
                              404 ; 44   |#define USHORT  unsigned short      // usVarName
                              405 ; 45   |#define SHORT   unsigned short      // sVarName
                              406 ; 46   |#define WORD    unsigned int        // wVarName
                              407 ; 47   |#define INT     signed int          // iVarName
                              408 ; 48   |#define DWORD   unsigned long       // dwVarName
                              409 ; 49   |#define LONG    signed long         // lVarName
                              410 ; 50   |#define BOOL    unsigned int        // bVarName
                              411 ; 51   |#define FRACT   _fract              // frVarName
                              412 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              413 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              414 ; 54   |#define FLOAT   float               // fVarName
                              415 ; 55   |#define DBL     double              // dVarName
                              416 ; 56   |#define ENUM    enum                // eVarName
                              417 ; 57   |#define CMX     _complex            // cmxVarName
                              418 ; 58   |typedef WORD UCS3;                   // 
                              419 ; 59   |
                              420 ; 60   |#define UINT16  unsigned short
                              421 ; 61   |#define UINT8   unsigned char   
                              422 ; 62   |#define UINT32  unsigned long
                              423 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              424 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              425 ; 65   |#define WCHAR   UINT16
                              426 ; 66   |
                              427 ; 67   |//UINT128 is 16 bytes or 6 words
                              428 ; 68   |typedef struct UINT128_3500 {   
                              429 ; 69   |    int val[6];     
                              430 ; 70   |} UINT128_3500;
                              431 ; 71   |
                              432 ; 72   |#define UINT128   UINT128_3500
                              433 ; 73   |
                              434 ; 74   |// Little endian word packed byte strings:   
                              435 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              436 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              437 ; 77   |// Little endian word packed byte strings:   
                              438 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              439 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              440 ; 80   |
                              441 ; 81   |// Declare Memory Spaces To Use When Coding
                              442 ; 82   |// A. Sector Buffers
                              443 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              444 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              445 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              446 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              447 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              448 ; 88   |// B. Media DDI Memory
                              449 ; 89   |#define MEDIA_DDI_MEM _Y
                              450 ; 90   |
                              451 ; 91   |
                              452 ; 92   |
                              453 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              454 ; 94   |// Examples of circular pointers:
                              455 ; 95   |//    INT CIRC cpiVarName
                              456 ; 96   |//    DWORD CIRC cpdwVarName
                              457 ; 97   |
                              458 ; 98   |#define RETCODE INT                 // rcVarName
                              459 ; 99   |
                              460 ; 100  |// generic bitfield structure
                              461 ; 101  |struct Bitfield {
                              462 ; 102  |    unsigned int B0  :1;
                              463 ; 103  |    unsigned int B1  :1;
                              464 ; 104  |    unsigned int B2  :1;
                              465 ; 105  |    unsigned int B3  :1;
                              466 ; 106  |    unsigned int B4  :1;
                              467 ; 107  |    unsigned int B5  :1;
                              468 ; 108  |    unsigned int B6  :1;
                              469 ; 109  |    unsigned int B7  :1;
                              470 ; 110  |    unsigned int B8  :1;
                              471 ; 111  |    unsigned int B9  :1;
                              472 ; 112  |    unsigned int B10 :1;
                              473 ; 113  |    unsigned int B11 :1;
                              474 ; 114  |    unsigned int B12 :1;
                              475 ; 115  |    unsigned int B13 :1;
                              476 ; 116  |    unsigned int B14 :1;
                              477 ; 117  |    unsigned int B15 :1;
                              478 ; 118  |    unsigned int B16 :1;
                              479 ; 119  |    unsigned int B17 :1;
                              480 ; 120  |    unsigned int B18 :1;
                              481 ; 121  |    unsigned int B19 :1;
                              482 ; 122  |    unsigned int B20 :1;
                              483 ; 123  |    unsigned int B21 :1;
                              484 ; 124  |    unsigned int B22 :1;
                              485 ; 125  |    unsigned int B23 :1;
                              486 ; 126  |};
                              487 ; 127  |
                              488 ; 128  |union BitInt {
                              489 ; 129  |        struct Bitfield B;
                              490 ; 130  |        int        I;
                              491 ; 131  |};
                              492 ; 132  |
                              493 ; 133  |#define MAX_MSG_LENGTH 10
                              494 ; 134  |struct CMessage
                              495 ; 135  |{
                              496 ; 136  |        unsigned int m_uLength;
                              497 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              498 ; 138  |};
                              499 ; 139  |
                              500 ; 140  |typedef struct {
                              501 ; 141  |    WORD m_wLength;
                              502 ; 142  |    WORD m_wMessage;
                              503 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              504 ; 144  |} Message;
                              505 ; 145  |
                              506 ; 146  |struct MessageQueueDescriptor
                              507 ; 147  |{
                              508 ; 148  |        int *m_pBase;
                              509 ; 149  |        int m_iModulo;
                              510 ; 150  |        int m_iSize;
                              511 ; 151  |        int *m_pHead;
                              512 ; 152  |        int *m_pTail;
                              513 ; 153  |};
                              514 ; 154  |
                              515 ; 155  |struct ModuleEntry
                              516 ; 156  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              517 ; 157  |    int m_iSignaledEventMask;
                              518 ; 158  |    int m_iWaitEventMask;
                              519 ; 159  |    int m_iResourceOfCode;
                              520 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              521 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              522 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              523 ; 163  |    int m_uTimeOutHigh;
                              524 ; 164  |    int m_uTimeOutLow;
                              525 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              526 ; 166  |};
                              527 ; 167  |
                              528 ; 168  |union WaitMask{
                              529 ; 169  |    struct B{
                              530 ; 170  |        unsigned int m_bNone     :1;
                              531 ; 171  |        unsigned int m_bMessage  :1;
                              532 ; 172  |        unsigned int m_bTimer    :1;
                              533 ; 173  |        unsigned int m_bButton   :1;
                              534 ; 174  |    } B;
                              535 ; 175  |    int I;
                              536 ; 176  |} ;
                              537 ; 177  |
                              538 ; 178  |
                              539 ; 179  |struct Button {
                              540 ; 180  |        WORD wButtonEvent;
                              541 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              542 ; 182  |};
                              543 ; 183  |
                              544 ; 184  |struct Message {
                              545 ; 185  |        WORD wMsgLength;
                              546 ; 186  |        WORD wMsgCommand;
                              547 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              548 ; 188  |};
                              549 ; 189  |
                              550 ; 190  |union EventTypes {
                              551 ; 191  |        struct CMessage msg;
                              552 ; 192  |        struct Button Button ;
                              553 ; 193  |        struct Message Message;
                              554 ; 194  |};
                              555 ; 195  |
                              556 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              557 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              558 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              559 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              560 ; 200  |
                              561 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              562 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              563 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              564 ; 204  |
                              565 ; 205  |#if DEBUG
                              566 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              567 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              568 ; 208  |#else 
                              569 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              570 ; 210  |#define DebugBuildAssert(x)    
                              571 ; 211  |#endif
                              572 ; 212  |
                              573 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              574 ; 214  |//  #pragma asm
                              575 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              576 ; 216  |//  #pragma endasm
                              577 ; 217  |
                              578 ; 218  |
                              579 ; 219  |#ifdef COLOR_262K
                              580 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              581 ; 221  |#elif defined(COLOR_65K)
                              582 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              583 ; 223  |#else
                              584 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              585 ; 225  |#endif
                              586 ; 226  |    
                              587 ; 227  |#endif // #ifndef _TYPES_H
                              588 
                              590 
                              591 ; 5    |
                              592 ; 6    |int _asmfunc SysWaitOnEvent(unsigned int uEvent,struct CMessage *,int uLength);
                              593 ; 7    |int _asmfunc SysCallFunction(unsigned int RESOURCE,int _reentrant (int,int,int*),  int, int, int *);
                              594 ; 8    |
                              595 ; 9    |#if !defined(NULL)
                              596 ; 10   |#define NULL 0
                              597 ; 11   |#endif 
                              598 ; 12   |
                              599 ; 13   |#if !defined(FALSE)
                              600 ; 14   |#define FALSE 0
                              601 ; 15   |#endif
                              602 ; 16   |#if !defined(TRUE)
                              603 ; 17   |#define TRUE  !FALSE
                              604 ; 18   |#endif
                              605 ; 19   |
                              606 ; 20   |// The same memory location contains either a menu message or button event. 
                              607 ; 21   |// The button info is stored in the first word or the entire message is stored.
                              608 ; 22   |
                              609 ; 23   |// CMessage is kept for backards compatibility.
                              610 ; 24   |// The union and 2 new structures are added to aid in readability.
                              611 ; 25   |
                              612 ; 26   |
                              613 ; 27   |#include "messages.h"
                              614 
                              616 
                              617 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              618 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                              619 ; 3    |// Message defs
                              620 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              621 ; 5    |
                              622 ; 6    |#if (!defined(MSGEQU_INC))
                              623 ; 7    |#define MSGEQU_INC 1
                              624 ; 8    |
                              625 ; 9    |
                              626 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                              627 ; 11   |
                              628 ; 12   |
                              629 ; 13   |#define MSG_TYPE_DECODER 0x000000
                              630 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                              631 ; 15   |#define MSG_TYPE_PARSER 0x020000
                              632 ; 16   |#define MSG_TYPE_LCD 0x030000
                              633 ; 17   |#define MSG_TYPE_MIXER 0x040000
                              634 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                              635 ; 19   |#define MSG_TYPE_MENU 0x060000
                              636 ; 20   |#define MSG_TYPE_LED 0x070000
                              637 ; 21   |#define MSG_TYPE_TUNER 0x080000
                              638 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                              639 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                              640 ; 24   |// Equalizer and other effects
                              641 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                              642 ; 26   |#if (defined(USE_PLAYLIST3))
                              643 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                              644 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                              645 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                              646 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                              647 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                              648 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                              649 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                              650 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                              651 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                              652 ; 36   |#if defined(USE_PLAYLIST5)
                              653 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                              654 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                              655 ; 39   |#endif // if @def('USE_PLAYLIST5')
                              656 ; 40   |
                              657 ; 41   |// Message Structure Offsets
                              658 ; 42   |#define MSG_Length 0
                              659 ; 43   |#define MSG_ID 1
                              660 ; 44   |#define MSG_Argument1 2
                              661 ; 45   |#define MSG_Argument2 3
                              662 ; 46   |#define MSG_Argument3 4
                              663 ; 47   |#define MSG_Argument4 5
                              664 ; 48   |#define MSG_Argument5 6
                              665 ; 49   |#define MSG_Argument6 7
                              666 ; 50   |
                              667 ; 51   |
                              668 ; 52   |
                              669 ; 53   |// LCD Message IDs
                              670 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                              671 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                              672 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                              673 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                              674 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                              675 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                              676 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                              677 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                              678 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                              679 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                              680 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                              681 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                              682 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                              683 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                              684 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                              685 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                              686 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                              687 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                              688 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                              689 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                              690 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                              691 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                              692 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                              693 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                              694 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                              695 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                              696 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                              697 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                              698 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                              699 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                              700 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                              701 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                              702 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                              703 ; 87   |//send a NULL as Param1 to return to root frame buffer
                              704 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                              705 ; 89   |//Param1 = left
                              706 ; 90   |//Param2 = top
                              707 ; 91   |//Param3 = right
                              708 ; 92   |//Param4 = bottom
                              709 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                              710 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                              711 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                              712 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                              713 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                              714 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                              715 ; 99   |
                              716 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                              717 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
                              718 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                              719 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                              720 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                              721 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                              722 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                              723 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                              724 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                              725 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                              726 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                              727 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                              728 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                              729 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                              730 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                              731 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                              732 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                              733 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                              734 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                              735 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                              736 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                              737 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                              738 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                              739 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                              740 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                              741 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                              742 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                              743 ; 127  |
                              744 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                              745 ; 129  |
                              746 ; 130  |#if defined(CLCD_16BIT)
                              747 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                              748 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                              749 ; 133  |
                              750 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                              751 ; 135  |#else 
                              752 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                              753 ; 137  |#endif
                              754 ; 138  |
                              755 ; 139  |// If you change the LCD message ID's then you must
                              756 ; 140  |// also change the jump table in lcdapi.asm
                              757 ; 141  |
                              758 ; 142  |// Character LCD Message IDs
                              759 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                              760 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                              761 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                              762 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                              763 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                              764 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                              765 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                              766 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                              767 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                              768 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                              769 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              770 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                              771 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                              772 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                              773 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                              774 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                              775 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                              776 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                              777 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                              778 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                              779 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                              780 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                              781 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                              782 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                              783 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                              784 ; 168  |// also change the jump table in lcdapi.asm
                              785 ; 169  |
                              786 ; 170  |// Decoder Message IDs
                              787 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                              788 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                              789 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                              790 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                              791 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                              792 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                              793 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                              794 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                              795 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                              796 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                              797 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                              798 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                              799 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                              800 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                              801 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                              802 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                              803 ; 187  |// If you change the Decoder message ID's, then you must
                              804 ; 188  |// also change the jump table in decoder_overlay.asm
                              805 ; 189  |// and in dec_adpcm_overlay.asm.
                              806 ; 190  |
                              807 ; 191  |// Encoder Message IDs
                              808 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                              809 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                              810 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                              811 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                              812 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                              813 ; 197  |// If you change the Encoder message ID's, then you must
                              814 ; 198  |// also change the jump table in all encoder overlay modules.
                              815 ; 199  |
                              816 ; 200  |// Parser Message IDs
                              817 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                              818 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                              819 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                              820 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                              821 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                              822 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                              823 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                              824 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                              825 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                              826 ; 210  |// If you change the Parser message ID's, then you must
                              827 ; 211  |// also change the jump table in parser.asm
                              828 ; 212  |
                              829 ; 213  |// Button Message IDs
                              830 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                              831 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                              832 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                              833 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                              834 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                              835 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                              836 ; 220  |
                              837 ; 221  |// Mixer Message IDs
                              838 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                              839 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                              840 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                              841 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                              842 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                              843 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                              844 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                              845 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                              846 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                              847 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                              848 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                              849 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                              850 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                              851 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                              852 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                              853 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                              854 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                              855 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                              856 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                              857 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                              858 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                              859 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                              860 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                              861 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                              862 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                              863 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                              864 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                              865 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                              866 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                              867 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                              868 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                              869 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                              870 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                              871 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                              872 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                              873 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                              874 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                              875 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                              876 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                              877 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                              878 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                              879 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                              880 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                              881 ; 265  |// If you change the mixer message ID's then you must
                              882 ; 266  |// also change the jump table in mixer.asm
                              883 ; 267  |#define MIXER_ON 0
                              884 ; 268  |#define MIXER_OFF 1
                              885 ; 269  |
                              886 ; 270  |
                              887 ; 271  |// System Message IDs
                              888 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                              889 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                              890 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                              891 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                              892 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                              893 ; 277  |// If you change the system message ID's then you must
                              894 ; 278  |// also change the jump table in systemapi.asm
                              895 ; 279  |
                              896 ; 280  |// Menu IDs
                              897 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                              898 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                              899 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                              900 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                              901 ; 285  |//sub parameters for this message:
                              902 ; 286  |#define RECORDER_START 0
                              903 ; 287  |#define RECORDER_PAUSE 0x2000
                              904 ; 288  |#define RECORDER_RESUME 0x4000
                              905 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                              906 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                              907 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                              908 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                              909 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                              910 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                              911 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                              912 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                              913 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                              914 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                              915 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                              916 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                              917 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                              918 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                              919 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                              920 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                              921 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                              922 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                              923 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                              924 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                              925 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                              926 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                              927 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                              928 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                              929 ; 313  |
                              930 ; 314  |// Note that other versions of this file have different msg equates.
                              931 ; 315  |// If you change the system message ID's then you must
                              932 ; 316  |// also change the jump table in all menu *.asm
                              933 ; 317  |
                              934 ; 318  |// LED Message IDs
                              935 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                              936 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                              937 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                              938 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                              939 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                              940 ; 324  |// If you change the LeD message ID's then you must
                              941 ; 325  |// also change the jump table in ledapi.asm
                              942 ; 326  |
                              943 ; 327  |#if (!defined(REMOVE_FM))
                              944 ; 328  |// FM Tuner Message IDs
                              945 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                              946 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                              947 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                              948 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                              949 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                              950 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                              951 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                              952 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                              953 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                              954 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                              955 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                              956 ; 340  |//one parameter--the sensitivity in uV
                              957 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                              958 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                              959 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                              960 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                              961 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                              962 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                              963 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                              964 ; 348  |#endif
                              965 ; 349  |
                              966 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                              967 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                              968 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                              969 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                              970 ; 354  |
                              971 ; 355  |
                              972 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                              973 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                              974 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                              975 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                              976 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                              977 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                              978 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                              979 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                              980 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                              981 ; 365  |
                              982 ; 366  |#if (defined(USE_PLAYLIST3))
                              983 ; 367  |// Music Library
                              984 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                              985 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                              986 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                              987 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                              988 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                              989 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                              990 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                              991 ; 375  |
                              992 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                              993 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                              994 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                              995 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                              996 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                              997 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                              998 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                              999 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                             1000 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                             1001 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                             1002 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                             1003 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                             1004 ; 388  |
                             1005 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1006 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1007 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1008 ; 392  |
                             1009 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1010 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1011 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1012 ; 396  |
                             1013 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1014 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1015 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1016 ; 400  |
                             1017 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                             1018 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                             1019 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                             1020 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1021 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                             1022 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                             1023 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                             1024 ; 408  |
                             1025 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1026 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1027 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1028 ; 412  |
                             1029 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                             1030 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                             1031 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                             1032 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                             1033 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                             1034 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                             1035 ; 419  |
                             1036 ; 420  |#if defined(USE_PLAYLIST5)
                             1037 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                             1038 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                             1039 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                             1040 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                             1041 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                             1042 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                             1043 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                             1044 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                             1045 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                             1046 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                             1047 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                             1048 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                             1049 ; 433  |
                             1050 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                             1051 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                             1052 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                             1053 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                             1054 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                             1055 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                             1056 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                             1057 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                             1058 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                             1059 ; 443  |#endif // if @def('USE_PLAYLIST5')
                             1060 ; 444  |// Events
                             1061 ; 445  |// No event
                             1062 ; 446  |#define EVENT_NONE 0x000001   
                             1063 ; 447  |// A message has been posted
                             1064 ; 448  |#define EVENT_MESSAGE 0x000002   
                             1065 ; 449  |// Run if wait time elapsed
                             1066 ; 450  |#define EVENT_TIMER 0x000004   
                             1067 ; 451  |// Run if a button event occured
                             1068 ; 452  |#define EVENT_BUTTON 0x000008   
                             1069 ; 453  |// Run if a background event occured
                             1070 ; 454  |#define EVENT_BACKGROUND 0x000010   
                             1071 ; 455  |// The executive should immediately repeat this module
                             1072 ; 456  |#define EVENT_REPEAT 0x000020   
                             1073 ; 457  |// Run the module's init routine
                             1074 ; 458  |#define EVENT_INIT 0x800000   
                             1075 ; 459  |
                             1076 ; 460  |#define EVENT_NONE_BITPOS 0
                             1077 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                             1078 ; 462  |#define EVENT_TIMER_BITPOS 2
                             1079 ; 463  |#define EVENT_BUTTON_BITPOS 3
                             1080 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                             1081 ; 465  |#define EVENT_REPEAT_BITPOS 5
                             1082 ; 466  |#define EVENT_INIT_BITPOS 23
                             1083 ; 467  |
                             1084 ; 468  |// Parser Message Buffers
                             1085 ; 469  |#define ParserPlayBit 0
                             1086 ; 470  |#define ButtonPressBit 1
                             1087 ; 471  |#define ParserRwndBit 1
                             1088 ; 472  |#define ParserFfwdBit 2
                             1089 ; 473  |
                             1090 ; 474  |//NextSong Message Parameters
                             1091 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                             1092 ; 476  |#define NEXT_SONG 2             
                             1093 ; 477  |// ButtonPressBit1 cleared
                             1094 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                             1095 ; 479  |// ButtonPressBit1 set
                             1096 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                             1097 ; 481  |// NextSong + Ffwd
                             1098 ; 482  |#define NEXT_SONG_FFWD 4          
                             1099 ; 483  |
                             1100 ; 484  |//PrevSong Message Parameters
                             1101 ; 485  |// PrevSong + Stopped
                             1102 ; 486  |#define PREV_SONG 0          
                             1103 ; 487  |// PrevSong + Play
                             1104 ; 488  |#define PREV_SONG_PLAY 1          
                             1105 ; 489  |// PrevSong + Rwnd
                             1106 ; 490  |#define PREV_SONG_RWND 2          
                             1107 ; 491  |
                             1108 ; 492  |
                             1109 ; 493  |
                             1110 ; 494  |
                             1111 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                             1112 ; 496  |
                             1113 ; 497  |
                             1114 
                             1116 
                             1117 ; 28   |
                             1118 ; 29   |#endif 
                             1119 
                             1121 
                             1122 ; 4    |#include "messages.h"
                             1123 
                             1125 
                             1126 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1127 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                             1128 ; 3    |// Message defs
                             1129 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             1130 ; 5    |
                             1131 ; 6    |#if (!defined(MSGEQU_INC))
                             1132 ; 7    |#define MSGEQU_INC 1
                             1133 ; 8    |
                             1134 ; 9    |
                             1135 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                             1136 ; 11   |
                             1137 ; 12   |
                             1138 ; 13   |#define MSG_TYPE_DECODER 0x000000
                             1139 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                             1140 ; 15   |#define MSG_TYPE_PARSER 0x020000
                             1141 ; 16   |#define MSG_TYPE_LCD 0x030000
                             1142 ; 17   |#define MSG_TYPE_MIXER 0x040000
                             1143 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                             1144 ; 19   |#define MSG_TYPE_MENU 0x060000
                             1145 ; 20   |#define MSG_TYPE_LED 0x070000
                             1146 ; 21   |#define MSG_TYPE_TUNER 0x080000
                             1147 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                             1148 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                             1149 ; 24   |// Equalizer and other effects
                             1150 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                             1151 ; 26   |#if (defined(USE_PLAYLIST3))
                             1152 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                             1153 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                             1154 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                             1155 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                             1156 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                             1157 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                             1158 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                             1159 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                             1160 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                             1161 ; 36   |#if defined(USE_PLAYLIST5)
                             1162 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                             1163 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                             1164 ; 39   |#endif // if @def('USE_PLAYLIST5')
                             1165 ; 40   |
                             1166 ; 41   |// Message Structure Offsets
                             1167 ; 42   |#define MSG_Length 0
                             1168 ; 43   |#define MSG_ID 1
                             1169 ; 44   |#define MSG_Argument1 2
                             1170 ; 45   |#define MSG_Argument2 3
                             1171 ; 46   |#define MSG_Argument3 4
                             1172 ; 47   |#define MSG_Argument4 5
                             1173 ; 48   |#define MSG_Argument5 6
                             1174 ; 49   |#define MSG_Argument6 7
                             1175 ; 50   |
                             1176 ; 51   |
                             1177 ; 52   |
                             1178 ; 53   |// LCD Message IDs
                             1179 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                             1180 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                             1181 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                             1182 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                             1183 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                             1184 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                             1185 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                             1186 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                             1187 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                             1188 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                             1189 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                             1190 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                             1191 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                             1192 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                             1193 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                             1194 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                             1195 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                             1196 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                             1197 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                             1198 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                             1199 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                             1200 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                             1201 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                             1202 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                             1203 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                             1204 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                             1205 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                             1206 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                             1207 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                             1208 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                             1209 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                             1210 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                             1211 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                             1212 ; 87   |//send a NULL as Param1 to return to root frame buffer
                             1213 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                             1214 ; 89   |//Param1 = left
                             1215 ; 90   |//Param2 = top
                             1216 ; 91   |//Param3 = right
                             1217 ; 92   |//Param4 = bottom
                             1218 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                             1219 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                             1220 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                             1221 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                             1222 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                             1223 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                             1224 ; 99   |
                             1225 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                             1226 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
                             1227 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                             1228 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                             1229 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                             1230 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                             1231 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                             1232 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                             1233 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                             1234 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                             1235 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                             1236 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                             1237 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                             1238 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                             1239 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                             1240 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                             1241 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                             1242 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                             1243 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                             1244 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                             1245 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                             1246 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                             1247 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                             1248 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                             1249 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                             1250 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                             1251 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                             1252 ; 127  |
                             1253 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                             1254 ; 129  |
                             1255 ; 130  |#if defined(CLCD_16BIT)
                             1256 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                             1257 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                             1258 ; 133  |
                             1259 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                             1260 ; 135  |#else 
                             1261 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                             1262 ; 137  |#endif
                             1263 ; 138  |
                             1264 ; 139  |// If you change the LCD message ID's then you must
                             1265 ; 140  |// also change the jump table in lcdapi.asm
                             1266 ; 141  |
                             1267 ; 142  |// Character LCD Message IDs
                             1268 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                             1269 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                             1270 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                             1271 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                             1272 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                             1273 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                             1274 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1275 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                             1276 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                             1277 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                             1278 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                             1279 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                             1280 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                             1281 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                             1282 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                             1283 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                             1284 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                             1285 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                             1286 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                             1287 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                             1288 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                             1289 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                             1290 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                             1291 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                             1292 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                             1293 ; 168  |// also change the jump table in lcdapi.asm
                             1294 ; 169  |
                             1295 ; 170  |// Decoder Message IDs
                             1296 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                             1297 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                             1298 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                             1299 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                             1300 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                             1301 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                             1302 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                             1303 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                             1304 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                             1305 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                             1306 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                             1307 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                             1308 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                             1309 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                             1310 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                             1311 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                             1312 ; 187  |// If you change the Decoder message ID's, then you must
                             1313 ; 188  |// also change the jump table in decoder_overlay.asm
                             1314 ; 189  |// and in dec_adpcm_overlay.asm.
                             1315 ; 190  |
                             1316 ; 191  |// Encoder Message IDs
                             1317 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                             1318 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                             1319 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                             1320 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                             1321 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                             1322 ; 197  |// If you change the Encoder message ID's, then you must
                             1323 ; 198  |// also change the jump table in all encoder overlay modules.
                             1324 ; 199  |
                             1325 ; 200  |// Parser Message IDs
                             1326 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                             1327 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                             1328 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                             1329 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                             1330 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                             1331 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                             1332 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                             1333 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                             1334 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                             1335 ; 210  |// If you change the Parser message ID's, then you must
                             1336 ; 211  |// also change the jump table in parser.asm
                             1337 ; 212  |
                             1338 ; 213  |// Button Message IDs
                             1339 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                             1340 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                             1341 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                             1342 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                             1343 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                             1344 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                             1345 ; 220  |
                             1346 ; 221  |// Mixer Message IDs
                             1347 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                             1348 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                             1349 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                             1350 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                             1351 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                             1352 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                             1353 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                             1354 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                             1355 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                             1356 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                             1357 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                             1358 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                             1359 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                             1360 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                             1361 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                             1362 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                             1363 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                             1364 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                             1365 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                             1366 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                             1367 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                             1368 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                             1369 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                             1370 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                             1371 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                             1372 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                             1373 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                             1374 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                             1375 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                             1376 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                             1377 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                             1378 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                             1379 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                             1380 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                             1381 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                             1382 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                             1383 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                             1384 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                             1385 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                             1386 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                             1387 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                             1388 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                             1389 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                             1390 ; 265  |// If you change the mixer message ID's then you must
                             1391 ; 266  |// also change the jump table in mixer.asm
                             1392 ; 267  |#define MIXER_ON 0
                             1393 ; 268  |#define MIXER_OFF 1
                             1394 ; 269  |
                             1395 ; 270  |
                             1396 ; 271  |// System Message IDs
                             1397 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                             1398 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                             1399 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                             1400 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                             1401 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                             1402 ; 277  |// If you change the system message ID's then you must
                             1403 ; 278  |// also change the jump table in systemapi.asm
                             1404 ; 279  |
                             1405 ; 280  |// Menu IDs
                             1406 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                             1407 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                             1408 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                             1409 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                             1410 ; 285  |//sub parameters for this message:
                             1411 ; 286  |#define RECORDER_START 0
                             1412 ; 287  |#define RECORDER_PAUSE 0x2000
                             1413 ; 288  |#define RECORDER_RESUME 0x4000
                             1414 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                             1415 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                             1416 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                             1417 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                             1418 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                             1419 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                             1420 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                             1421 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                             1422 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                             1423 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                             1424 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                             1425 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                             1426 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                             1427 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                             1428 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                             1429 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                             1430 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                             1431 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                             1432 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                             1433 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                             1434 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                             1435 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                             1436 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                             1437 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                             1438 ; 313  |
                             1439 ; 314  |// Note that other versions of this file have different msg equates.
                             1440 ; 315  |// If you change the system message ID's then you must
                             1441 ; 316  |// also change the jump table in all menu *.asm
                             1442 ; 317  |
                             1443 ; 318  |// LED Message IDs
                             1444 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                             1445 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                             1446 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                             1447 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                             1448 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                             1449 ; 324  |// If you change the LeD message ID's then you must
                             1450 ; 325  |// also change the jump table in ledapi.asm
                             1451 ; 326  |
                             1452 ; 327  |#if (!defined(REMOVE_FM))
                             1453 ; 328  |// FM Tuner Message IDs
                             1454 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                             1455 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                             1456 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                             1457 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                             1458 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                             1459 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                             1460 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                             1461 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                             1462 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                             1463 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                             1464 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                             1465 ; 340  |//one parameter--the sensitivity in uV
                             1466 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                             1467 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                             1468 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                             1469 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                             1470 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                             1471 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                             1472 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                             1473 ; 348  |#endif
                             1474 ; 349  |
                             1475 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                             1476 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                             1477 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                             1478 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                             1479 ; 354  |
                             1480 ; 355  |
                             1481 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                             1482 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                             1483 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                             1484 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                             1485 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                             1486 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                             1487 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                             1488 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                             1489 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                             1490 ; 365  |
                             1491 ; 366  |#if (defined(USE_PLAYLIST3))
                             1492 ; 367  |// Music Library
                             1493 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                             1494 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                             1495 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                             1496 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                             1497 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                             1498 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                             1499 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                             1500 ; 375  |
                             1501 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                             1502 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                             1503 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                             1504 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                             1505 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                             1506 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                             1507 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                             1508 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                             1509 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                             1510 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                             1511 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                             1512 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                             1513 ; 388  |
                             1514 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1515 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1516 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1517 ; 392  |
                             1518 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1519 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1520 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1521 ; 396  |
                             1522 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1523 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1524 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1525 ; 400  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1526 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                             1527 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                             1528 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                             1529 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
                             1530 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                             1531 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                             1532 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                             1533 ; 408  |
                             1534 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1535 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1536 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1537 ; 412  |
                             1538 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                             1539 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                             1540 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                             1541 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                             1542 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                             1543 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                             1544 ; 419  |
                             1545 ; 420  |#if defined(USE_PLAYLIST5)
                             1546 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                             1547 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                             1548 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                             1549 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                             1550 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                             1551 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                             1552 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                             1553 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                             1554 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                             1555 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                             1556 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                             1557 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                             1558 ; 433  |
                             1559 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                             1560 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                             1561 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                             1562 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                             1563 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                             1564 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                             1565 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                             1566 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                             1567 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                             1568 ; 443  |#endif // if @def('USE_PLAYLIST5')
                             1569 ; 444  |// Events
                             1570 ; 445  |// No event
                             1571 ; 446  |#define EVENT_NONE 0x000001   
                             1572 ; 447  |// A message has been posted
                             1573 ; 448  |#define EVENT_MESSAGE 0x000002   
                             1574 ; 449  |// Run if wait time elapsed
                             1575 ; 450  |#define EVENT_TIMER 0x000004   
                             1576 ; 451  |// Run if a button event occured
                             1577 ; 452  |#define EVENT_BUTTON 0x000008   
                             1578 ; 453  |// Run if a background event occured
                             1579 ; 454  |#define EVENT_BACKGROUND 0x000010   
                             1580 ; 455  |// The executive should immediately repeat this module
                             1581 ; 456  |#define EVENT_REPEAT 0x000020   
                             1582 ; 457  |// Run the module's init routine
                             1583 ; 458  |#define EVENT_INIT 0x800000   
                             1584 ; 459  |
                             1585 ; 460  |#define EVENT_NONE_BITPOS 0
                             1586 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                             1587 ; 462  |#define EVENT_TIMER_BITPOS 2
                             1588 ; 463  |#define EVENT_BUTTON_BITPOS 3
                             1589 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                             1590 ; 465  |#define EVENT_REPEAT_BITPOS 5
                             1591 ; 466  |#define EVENT_INIT_BITPOS 23
                             1592 ; 467  |
                             1593 ; 468  |// Parser Message Buffers
                             1594 ; 469  |#define ParserPlayBit 0
                             1595 ; 470  |#define ButtonPressBit 1
                             1596 ; 471  |#define ParserRwndBit 1
                             1597 ; 472  |#define ParserFfwdBit 2
                             1598 ; 473  |
                             1599 ; 474  |//NextSong Message Parameters
                             1600 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                             1601 ; 476  |#define NEXT_SONG 2             
                             1602 ; 477  |// ButtonPressBit1 cleared
                             1603 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                             1604 ; 479  |// ButtonPressBit1 set
                             1605 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                             1606 ; 481  |// NextSong + Ffwd
                             1607 ; 482  |#define NEXT_SONG_FFWD 4          
                             1608 ; 483  |
                             1609 ; 484  |//PrevSong Message Parameters
                             1610 ; 485  |// PrevSong + Stopped
                             1611 ; 486  |#define PREV_SONG 0          
                             1612 ; 487  |// PrevSong + Play
                             1613 ; 488  |#define PREV_SONG_PLAY 1          
                             1614 ; 489  |// PrevSong + Rwnd
                             1615 ; 490  |#define PREV_SONG_RWND 2          
                             1616 ; 491  |
                             1617 ; 492  |
                             1618 ; 493  |
                             1619 ; 494  |
                             1620 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                             1621 ; 496  |
                             1622 ; 497  |
                             1623 
                             1625 
                             1626 ; 5    |#include "resource.h"
                             1627 
                             1629 
                             1630 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1631 ; 2    |//  Do not edit it directly.
                             1632 ; 3    |//  Created on Sat Jun 28 16:37:44 2008 using resource.inc as input.
                             1633 ; 4    |
                             1634 ; 5    |
                             1635 ; 6    |
                             1636 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1637 ; 8    |//  Do not edit it directly.
                             1638 ; 9    |//  Created on Sat Jun 28 16:13:49 2008 using resource.inc as input.
                             1639 ; 10   |
                             1640 ; 11   |
                             1641 ; 12   |
                             1642 ; 13   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1643 ; 14   |//  Do not edit it directly.
                             1644 ; 15   |//  Created on Sat Jun 28 15:55:53 2008 using resource.inc as input.
                             1645 ; 16   |
                             1646 ; 17   |
                             1647 ; 18   |
                             1648 ; 19   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1649 ; 20   |//  Do not edit it directly.
                             1650 ; 21   |//  Created on Thu Jun 26 08:58:05 2008 using resource.inc as input.
                             1651 ; 22   |
                             1652 ; 23   |
                             1653 ; 24   |
                             1654 ; 25   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1655 ; 26   |//  Do not edit it directly.
                             1656 ; 27   |//  Created on Wed Jun 25 17:00:35 2008 using resource.inc as input.
                             1657 ; 28   |
                             1658 ; 29   |
                             1659 ; 30   |
                             1660 ; 31   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1661 ; 32   |//  Do not edit it directly.
                             1662 ; 33   |//  Created on Wed Jun 25 11:42:38 2008 using resource.inc as input.
                             1663 ; 34   |
                             1664 ; 35   |
                             1665 ; 36   |
                             1666 ; 37   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1667 ; 38   |//  Do not edit it directly.
                             1668 ; 39   |//  Created on Wed Jun 25 11:17:50 2008 using resource.inc as input.
                             1669 ; 40   |
                             1670 ; 41   |
                             1671 ; 42   |
                             1672 ; 43   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1673 ; 44   |//  Do not edit it directly.
                             1674 ; 45   |//  Created on Wed Jun 25 11:17:05 2008 using resource.inc as input.
                             1675 ; 46   |
                             1676 ; 47   |
                             1677 ; 48   |
                             1678 ; 49   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1679 ; 50   |//  Do not edit it directly.
                             1680 ; 51   |//  Created on Tue Jun 24 15:21:11 2008 using resource.inc as input.
                             1681 ; 52   |
                             1682 ; 53   |
                             1683 ; 54   |
                             1684 ; 55   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1685 ; 56   |//  Do not edit it directly.
                             1686 ; 57   |//  Created on Sun Jun 22 02:54:01 2008 using resource.inc as input.
                             1687 ; 58   |
                             1688 ; 59   |
                             1689 ; 60   |
                             1690 ; 61   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1691 ; 62   |//  Do not edit it directly.
                             1692 ; 63   |//  Created on Sun Jun 22 00:47:39 2008 using resource.inc as input.
                             1693 ; 64   |
                             1694 ; 65   |
                             1695 ; 66   |
                             1696 ; 67   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1697 ; 68   |//  Do not edit it directly.
                             1698 ; 69   |//  Created on Fri Jun 20 16:15:57 2008 using resource.inc as input.
                             1699 ; 70   |
                             1700 ; 71   |
                             1701 ; 72   |
                             1702 ; 73   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1703 ; 74   |//  Do not edit it directly.
                             1704 ; 75   |//  Created on Thu Jun 19 09:47:30 2008 using resource.inc as input.
                             1705 ; 76   |
                             1706 ; 77   |
                             1707 ; 78   |
                             1708 ; 79   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1709 ; 80   |//  Do not edit it directly.
                             1710 ; 81   |//  Created on Wed Jun 18 23:11:16 2008 using resource.inc as input.
                             1711 ; 82   |
                             1712 ; 83   |
                             1713 ; 84   |
                             1714 ; 85   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1715 ; 86   |//  Do not edit it directly.
                             1716 ; 87   |//  Created on Wed Jun 18 22:57:19 2008 using resource.inc as input.
                             1717 ; 88   |
                             1718 ; 89   |
                             1719 ; 90   |
                             1720 ; 91   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1721 ; 92   |//  Do not edit it directly.
                             1722 ; 93   |//  Created on Wed Jun 18 22:49:16 2008 using resource.inc as input.
                             1723 ; 94   |
                             1724 ; 95   |
                             1725 ; 96   |
                             1726 ; 97   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1727 ; 98   |//  Do not edit it directly.
                             1728 ; 99   |//  Created on Wed Jun 18 11:53:38 2008 using resource.inc as input.
                             1729 ; 100  |
                             1730 ; 101  |
                             1731 ; 102  |
                             1732 ; 103  |//  NOTE: This file was generated automatically by rscrenum.pl
                             1733 ; 104  |//  Do not edit it directly.
                             1734 ; 105  |//  Created on Wed Jun 18 10:45:13 2008 using resource.inc as input.
                             1735 ; 106  |
                             1736 ; 107  |
                             1737 ; 108  |
                             1738 ; 109  |//  NOTE: This file was generated automatically by rscrenum.pl
                             1739 ; 110  |//  Do not edit it directly.
                             1740 ; 111  |//  Created on Wed Jun 18 09:54:56 2008 using resource.inc as input.
                             1741 ; 112  |
                             1742 ; 113  |
                             1743 ; 114  |
                             1744 ; 115  |//  NOTE: This file was generated automatically by rscrenum.pl
                             1745 ; 116  |//  Do not edit it directly.
                             1746 ; 117  |//  Created on Tue Jun 17 16:47:21 2008 using resource.inc as input.
                             1747 ; 118  |
                             1748 ; 119  |
                             1749 ; 120  |
                             1750 ; 121  |//  NOTE: This file was generated automatically by rscrenum.pl
                             1751 ; 122  |//  Do not edit it directly.
                             1752 ; 123  |//  Created on Tue Jun 17 11:30:49 2008 using resource.inc as input.
                             1753 ; 124  |
                             1754 ; 125  |
                             1755 ; 126  |
                             1756 ; 127  |/////////////////////////////////////////////////////////////////////////////////
                             1757 ; 128  |// Copyright(C) SigmaTel, Inc. 2001-2007
                             1758 ; 129  |// Reviews: DanhNguyen (06-2008) for X8iTF/STFM1000
                             1759 ; 130  |// LCD example resource listing
                             1760 ; 131  |/////////////////////////////////////////////////////////////////////////////////
                             1761 ; 132  |
                             1762 ; 133  |#if (!defined(resources))
                             1763 ; 134  |#define resources 1
                             1764 ; 135  |
                             1765 ; 136  |/////////////////////////////////////////////////////////////////////////////////
                             1766 ; 137  |//  Player version number  no leading zeros in version number!!!!!
                             1767 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             1768 ; 139  |
                             1769 ; 140  |#define VERSION_MAJOR 3
                             1770 ; 141  |#define VERSION_MIDDLE 200
                             1771 ; 142  |#define VERSION_MINOR 910
                             1772 ; 143  |
                             1773 ; 144  |#define LCD_SEG_OFFSET 0x000000
                             1774 ; 145  |#define NUMBER_OF_PRESETS 10
                             1775 ; 146  |
                             1776 ; 147  |
                             1777 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                             1778 ; 149  |//  High usage resource. These have been moved here to take maximum advantage of
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1779 ; 150  |//  the resource index cache if it was added.
                             1780 ; 151  |//  This block is sorted by frequency of use while loading a new song.
                             1781 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             1782 ; 153  |
                             1783 ; 154  |//$FILENAME searchdirectory.src
                             1784 ; 155  |#define RSRC_FUNCLET_SEARCHDIRECTORY 1    
                             1785 ; 156  |//$FILENAME shortdirmatch.src
                             1786 ; 157  |#define RSRC_FUNCLET_SHORTDIRMATCH 2    
                             1787 ; 158  |//$FILENAME fopen.src
                             1788 ; 159  |#define RSRC_FUNCLET_FOPEN 3    
                             1789 ; 160  |//$FILENAME musicmenu.src
                             1790 ; 161  |#define RSRC_MUSIC_MENU_CODE_BANK 4    
                             1791 ; 162  |//$FILENAME changepath.src
                             1792 ; 163  |#define RSRC_FUNCLET_CHANGEPATH 5    
                             1793 ; 164  |//$FILENAME _openandverifyslot.src
                             1794 ; 165  |#define RSRC_FUNCLET__OPENANDVERIFYSLOT 6    
                             1795 ; 166  |//$FILENAME _loadslot.src
                             1796 ; 167  |#define RSRC_FUNCLET__LOADSLOT 7    
                             1797 ; 168  |//$FILENAME getname.src
                             1798 ; 169  |#define RSRC_FUNCLET_GETNAME 8    
                             1799 ; 170  |//$FILENAME Funclet_SteppingVoltageSet.src
                             1800 ; 171  |#define RSRC_FUNCLET_STEPPINGVOLTAGESET 9    
                             1801 ; 172  |//$FILENAME sethandleforsearch.src
                             1802 ; 173  |#define RSRC_FUNCLET_SETHANDLEFORSEARCH 10    
                             1803 ; 174  |//$FILENAME wmaWrap.src
                             1804 ; 175  |#define RSRC_WMADEC_CODE 11    
                             1805 ; 176  |//$FILENAME extractfilename.src
                             1806 ; 177  |#define RSRC_FUNCLET_EXTRACTFILENAME 12    
                             1807 ; 178  |//$FILENAME oem_getgroupcertprivatekey.src
                             1808 ; 179  |#define RSRC_FUNCLET_OEM_GETGROUPCERTPRIVATEKEY 13    
                             1809 ; 180  |//$FILENAME SoftTimerMod.src
                             1810 ; 181  |#define RSRC_SOFT_TIMER_MODULE_CODE 14    
                             1811 ; 182  |//$FILENAME GetShortfilename.src
                             1812 ; 183  |#define RSRC_FUNCLET_GETSHORTFILENAME 15    
                             1813 ; 184  |//$FILENAME drm_dcp_loadpropertiescache.src
                             1814 ; 185  |#define RSRC_FUNCLET_DRM_DCP_LOADPROPERTIESCACHE 16    
                             1815 ; 186  |//$FILENAME playerstatemachine.src
                             1816 ; 187  |#define RSRC_PLAY_STATE_MACHINE_CODE_BANK 17    
                             1817 ; 188  |//$FILENAME SysMod.src
                             1818 ; 189  |#define RSRC_SYSMOD_CODE 18    
                             1819 ; 190  |//$FILENAME drm_b64_decodew.src
                             1820 ; 191  |#define RSRC_FUNCLET_DRM_B64_DECODEW 19    
                             1821 ; 192  |//$FILENAME discardtrailigperiods.src
                             1822 ; 193  |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODS 20    
                             1823 ; 194  |//$FILENAME uppercase.src
                             1824 ; 195  |#define RSRC_FUNCLET_UPPERCASE 21    
                             1825 ; 196  |//$FILENAME strlength.src
                             1826 ; 197  |#define RSRC_FUNCLET_STRLENGTH 22    
                             1827 ; 198  |//$FILENAME ConverToShortname.src
                             1828 ; 199  |#define RSRC_FUNCLET_CONVERTOSHORTNAME 23    
                             1829 ; 200  |//$FILENAME drm_bbx_hashvalue.src
                             1830 ; 201  |#define RSRC_FUNCLET_DRM_BBX_HASHVALUE 24    
                             1831 ; 202  |//$FILENAME drm_expr_evaluateexpression.src
                             1832 ; 203  |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION 25    
                             1833 ; 204  |//$FILENAME drm_sst_closekey.src
                             1834 ; 205  |#define RSRC_FUNCLET_DRM_SST_CLOSEKEY 26    
                             1835 ; 206  |//$FILENAME Funclet_SysSetSpeed.src
                             1836 ; 207  |#define RSRC_FUNCLET_SYSSETSPEED 27    
                             1837 ; 208  |//$FILENAME freehandle.src
                             1838 ; 209  |#define RSRC_FUNCLET_FREEHANDLE 28    
                             1839 ; 210  |//$FILENAME searchfreehandleallocate.src
                             1840 ; 211  |#define RSRC_FUNCLET_SEARCHFREEHANDLEALLOCATE 29    
                             1841 ; 212  |//$FILENAME _parselicenseattributes.src
                             1842 ; 213  |#define RSRC_FUNCLET__PARSELICENSEATTRIBUTES 30    
                             1843 ; 214  |//$FILENAME variablesecstategetorset.src
                             1844 ; 215  |#define RSRC_FUNCLET_VARIABLESECSTATEGETORSET 31    
                             1845 ; 216  |//$FILENAME _setuplicevalobjecttoshare.src
                             1846 ; 217  |#define RSRC_FUNCLET__SETUPLICEVALOBJECTTOSHARE 32    
                             1847 ; 218  |//$FILENAME drm_mgr_initialize.src
                             1848 ; 219  |#define RSRC_FUNCLET_DRM_MGR_INITIALIZE 33    
                             1849 ; 220  |//$FILENAME display.src
                             1850 ; 221  |#define RSRC_DISPLAY_CODE_BANK 34    
                             1851 ; 222  |//$FILENAME DisplayModule.src
                             1852 ; 223  |#define RSRC_DISPLAY_MODULE 35    
                             1853 ; 224  |//$FILENAME extractpath.src
                             1854 ; 225  |#define RSRC_FUNCLET_EXTRACTPATH 36    
                             1855 ; 226  |//$FILENAME drm_sst_createglobalstorepassword.src
                             1856 ; 227  |#define RSRC_FUNCLET_DRM_SST_CREATEGLOBALSTOREPASSWORD 37    
                             1857 ; 228  |//$FILENAME _getprivatekey.src
                             1858 ; 229  |#define RSRC_FUNCLET__GETPRIVATEKEY 38    
                             1859 ; 230  |//$FILENAME drm_hds_opennamespace.src
                             1860 ; 231  |#define RSRC_FUNCLET_DRM_HDS_OPENNAMESPACE 39    
                             1861 ; 232  |//$FILENAME drm_hds_openslot.src
                             1862 ; 233  |#define RSRC_FUNCLET_DRM_HDS_OPENSLOT 40    
                             1863 ; 234  |//$FILENAME fclose.src
                             1864 ; 235  |#define RSRC_FUNCLET_FCLOSE 41    
                             1865 ; 236  |//$FILENAME drm_cphr_init.src
                             1866 ; 237  |#define RSRC_FUNCLET_DRM_CPHR_INIT 42    
                             1867 ; 238  |//$FILENAME drm_pk_symmetriccrypt.src
                             1868 ; 239  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICCRYPT 43    
                             1869 ; 240  |//$FILENAME drm_mgr_bind.src
                             1870 ; 241  |#define RSRC_FUNCLET_DRM_MGR_BIND 44    
                             1871 ; 242  |//$FILENAME _decryptcontentkey.src
                             1872 ; 243  |#define RSRC_FUNCLET__DECRYPTCONTENTKEY 45    
                             1873 ; 244  |//$FILENAME drm_mac_inv32.src
                             1874 ; 245  |#define RSRC_FUNCLET_DRM_MAC_INV32 46    
                             1875 ; 246  |//$FILENAME drm_lic_getattribute.src
                             1876 ; 247  |#define RSRC_FUNCLET_DRM_LIC_GETATTRIBUTE 47    
                             1877 ; 248  |//$FILENAME drm_utl_getversionasstring.src
                             1878 ; 249  |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONASSTRING 48    
                             1879 ; 250  |//$FILENAME drm_dcp_getattribute.src
                             1880 ; 251  |#define RSRC_FUNCLET_DRM_DCP_GETATTRIBUTE 49    
                             1881 ; 252  |//$FILENAME effectsmodules.src
                             1882 ; 253  |#define RSRC_EFFECTS_MODULES_P 50    
                             1883 ; 254  |//$FILENAME janusx.src
                             1884 ; 255  |#define RSRC_JANUSX_CODE 51    
                             1885 ; 256  |//$FILENAME drm_sst_openkeytokens.src
                             1886 ; 257  |#define RSRC_FUNCLET_DRM_SST_OPENKEYTOKENS 52    
                             1887 ; 258  |//$FILENAME eval.src
                             1888 ; 259  |#define RSRC_FUNCLET_EVAL 53    
                             1889 ; 260  |//$FILENAME _verifyslothash.src
                             1890 ; 261  |#define RSRC_FUNCLET__VERIFYSLOTHASH 54    
                             1891 ; 262  |//$FILENAME januscommon.src
                             1892 ; 263  |#define RSRC_JANUS_COMMON 55    
                             1893 ; 264  |//$FILENAME changecase.src
                             1894 ; 265  |#define RSRC_FUNCLET_CHANGECASE 56    
                             1895 ; 266  |//$FILENAME drm_bbx_symmetricverify.src
                             1896 ; 267  |#define RSRC_FUNCLET_DRM_BBX_SYMMETRICVERIFY 57    
                             1897 ; 268  |//$FILENAME _loadlicenseattributes.src
                             1898 ; 269  |#define RSRC_FUNCLET__LOADLICENSEATTRIBUTES 58    
                             1899 ; 270  |//$FILENAME drm_hds_slotseek.src
                             1900 ; 271  |#define RSRC_FUNCLET_DRM_HDS_SLOTSEEK 59    
                             1901 ; 272  |//$FILENAME drm_hds_slotwrite.src
                             1902 ; 273  |#define RSRC_FUNCLET_DRM_HDS_SLOTWRITE 60    
                             1903 ; 274  |//$FILENAME drm_levl_performoperations.src
                             1904 ; 275  |#define RSRC_FUNCLET_DRM_LEVL_PERFORMOPERATIONS 61    
                             1905 ; 276  |//$FILENAME drm_lic_verifysignature.src
                             1906 ; 277  |#define RSRC_FUNCLET_DRM_LIC_VERIFYSIGNATURE 62    
                             1907 ; 278  |//$FILENAME drm_lst_getlicense.src
                             1908 ; 279  |#define RSRC_FUNCLET_DRM_LST_GETLICENSE 63    
                             1909 ; 280  |//$FILENAME drm_utl_numbertostring.src
                             1910 ; 281  |#define RSRC_FUNCLET_DRM_UTL_NUMBERTOSTRING 64    
                             1911 ; 282  |//$FILENAME oem_writefile.src
                             1912 ; 283  |#define RSRC_FUNCLET_OEM_WRITEFILE 65    
                             1913 ; 284  |//$FILENAME drm_sst_getdata.src
                             1914 ; 285  |#define RSRC_FUNCLET_DRM_SST_GETDATA 66    
                             1915 ; 286  |//$FILENAME updatehandlemode.src
                             1916 ; 287  |#define RSRC_FUNCLET_UPDATEHANDLEMODE 67    
                             1917 ; 288  |//$FILENAME _getlicenseinfoandsetup.src
                             1918 ; 289  |#define RSRC_FUNCLET__GETLICENSEINFOANDSETUP 68    
                             1919 ; 290  |//$FILENAME drm_lic_completelicensechain.src
                             1920 ; 291  |#define RSRC_FUNCLET_DRM_LIC_COMPLETELICENSECHAIN 69    
                             1921 ; 292  |//$FILENAME doplay_p.src
                             1922 ; 293  |#define RSRC_DOPLAY_P 70    
                             1923 ; 294  |//$FILENAME fatwritep.src
                             1924 ; 295  |#define RSRC_FATWRITE_P_CODE 71    
                             1925 ; 296  |//$FILENAME findfirst.src
                             1926 ; 297  |#define RSRC_FUNCLET_FINDFIRST 72    
                             1927 ; 298  |//$FILENAME Funclet_SysLoadFatWrite.src
                             1928 ; 299  |#define RSRC_FUNCLET_SYSLOADFATWRITE 73    
                             1929 ; 300  |//$FILENAME changetorootdirectory.src
                             1930 ; 301  |#define RSRC_FUNCLET_CHANGETOROOTDIRECTORY 74    
                             1931 ; 302  |//$FILENAME _findkeypair.src
                             1932 ; 303  |#define RSRC_FUNCLET__FINDKEYPAIR 75    
                             1933 ; 304  |//$FILENAME variablemachinegetorset.src
                             1934 ; 305  |#define RSRC_FUNCLET_VARIABLEMACHINEGETORSET 76    
                             1935 ; 306  |//$FILENAME _hdsslotenumnext.src
                             1936 ; 307  |#define RSRC_FUNCLET__HDSSLOTENUMNEXT 77    
                             1937 ; 308  |//$FILENAME getlspubkey.src
                             1938 ; 309  |#define RSRC_FUNCLET_GETLSPUBKEY 78    
                             1939 ; 310  |//$FILENAME drm_sst_gettokenvalue.src
                             1940 ; 311  |#define RSRC_FUNCLET_DRM_SST_GETTOKENVALUE 79    
                             1941 ; 312  |//$FILENAME drm_utl_decodekid.src
                             1942 ; 313  |#define RSRC_FUNCLET_DRM_UTL_DECODEKID 80    
                             1943 ; 314  |//$FILENAME drm_xml_getnodecdata.src
                             1944 ; 315  |#define RSRC_FUNCLET_DRM_XML_GETNODECDATA 81    
                             1945 ; 316  |//$FILENAME _freedrmmanagerinternalcontexts.src
                             1946 ; 317  |#define RSRC_FUNCLET__FREEDRMMANAGERINTERNALCONTEXTS 82    
                             1947 ; 318  |//$FILENAME drm_clk_initchecksecureclock.src
                             1948 ; 319  |#define RSRC_FUNCLET_DRM_CLK_INITCHECKSECURECLOCK 83    
                             1949 ; 320  |//$FILENAME drm_sst_openandlockslot.src
                             1950 ; 321  |#define RSRC_FUNCLET_DRM_SST_OPENANDLOCKSLOT 84    
                             1951 ; 322  |//$FILENAME aes_enc.src
                             1952 ; 323  |#define RSRC_AES_ENC 85    
                             1953 ; 324  |//$FILENAME getprivkey.src
                             1954 ; 325  |#define RSRC_FUNCLET_GETPRIVKEY 86    
                             1955 ; 326  |//$FILENAME Funclet_GetUnicodeCharacterBitmap.src
                             1956 ; 327  |#define RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP 87    
                             1957 ; 328  |//$FILENAME playlist_codebank.src
                             1958 ; 329  |#define RSRC_PLAYLIST_CODEBANK 88    
                             1959 ; 330  |//$FILENAME drm_lic_getenablingbits.src
                             1960 ; 331  |#define RSRC_FUNCLET_DRM_LIC_GETENABLINGBITS 89    
                             1961 ; 332  |//$FILENAME drm_mgr_uninitialize.src
                             1962 ; 333  |#define RSRC_FUNCLET_DRM_MGR_UNINITIALIZE 90    
                             1963 ; 334  |//$FILENAME _getdevicecert.src
                             1964 ; 335  |#define RSRC_FUNCLET__GETDEVICECERT 91    
                             1965 ; 336  |//$FILENAME drm_lic_reportactions.src
                             1966 ; 337  |#define RSRC_FUNCLET_DRM_LIC_REPORTACTIONS 92    
                             1967 ; 338  |//$FILENAME drmcrt_wcsntol.src
                             1968 ; 339  |#define RSRC_FUNCLET_DRMCRT_WCSNTOL 93    
                             1969 ; 340  |//$FILENAME _basicheaderchecks.src
                             1970 ; 341  |#define RSRC_FUNCLET__BASICHEADERCHECKS 94    
                             1971 ; 342  |//$FILENAME drm_hdr_getattribute.src
                             1972 ; 343  |#define RSRC_FUNCLET_DRM_HDR_GETATTRIBUTE 95    
                             1973 ; 344  |//$FILENAME drm_hds_slotenumnext.src
                             1974 ; 345  |#define RSRC_FUNCLET_DRM_HDS_SLOTENUMNEXT 96    
                             1975 ; 346  |//$FILENAME drm_levl_evaluateexpression.src
                             1976 ; 347  |#define RSRC_FUNCLET_DRM_LEVL_EVALUATEEXPRESSION 97    
                             1977 ; 348  |//$FILENAME drm_lst_open.src
                             1978 ; 349  |#define RSRC_FUNCLET_DRM_LST_OPEN 98    
                             1979 ; 350  |//$FILENAME drm_xml_getnodeattribute.src
                             1980 ; 351  |#define RSRC_FUNCLET_DRM_XML_GETNODEATTRIBUTE 99    
                             1981 ; 352  |//$FILENAME _verifysymmerticsignature.src
                             1982 ; 353  |#define RSRC_FUNCLET__VERIFYSYMMERTICSIGNATURE 100    
                             1983 ; 354  |//$FILENAME oem_openfile.src
                             1984 ; 355  |#define RSRC_FUNCLET_OEM_OPENFILE 101    
                             1985 ; 356  |//$FILENAME _getdrmfullpathname.src
                             1986 ; 357  |#define RSRC_FUNCLET__GETDRMFULLPATHNAME 102    
                             1987 ; 358  |//$FILENAME oem_getsecurestoreglobalpasswordseed.src
                             1988 ; 359  |#define RSRC_FUNCLET_OEM_GETSECURESTOREGLOBALPASSWORDSEED 103    
                             1989 ; 360  |//$FILENAME _applydiffstostore.src
                             1990 ; 361  |#define RSRC_FUNCLET__APPLYDIFFSTOSTORE 104    
                             1991 ; 362  |//$FILENAME drm_sst_setdata.src
                             1992 ; 363  |#define RSRC_FUNCLET_DRM_SST_SETDATA 105    
                             1993 ; 364  |//$FILENAME drm_sst_getlockeddata.src
                             1994 ; 365  |#define RSRC_FUNCLET_DRM_SST_GETLOCKEDDATA 106    
                             1995 ; 366  |//$FILENAME drm_sst_setlockeddata.src
                             1996 ; 367  |#define RSRC_FUNCLET_DRM_SST_SETLOCKEDDATA 107    
                             1997 ; 368  |//$FILENAME playerlib_extra.src
                             1998 ; 369  |#define RSRC_PLAYERLIB_EXTRA_CODE_BANK 108    
                             1999 ; 370  |//$FILENAME wmaCommon.src
                             2000 ; 371  |#define RSRC_WMA_COMMON 109    
                             2001 ; 372  |//$FILENAME wmainit.src
                             2002 ; 373  |#define RSRC_WMA_INIT 110    
                             2003 ; 374  |//$FILENAME playlist2traverse_codebank.src
                             2004 ; 375  |#define RSRC_PLAYLIST2TRAVERSE_CODEBANK 111    
                             2005 ; 376  |//$FILENAME drm_bbx_cipherkeysetup.src
                             2006 ; 377  |#define RSRC_FUNCLET_DRM_BBX_CIPHERKEYSETUP 112    
                             2007 ; 378  |//$FILENAME drm_lic_checkclockrollback.src
                             2008 ; 379  |#define RSRC_FUNCLET_DRM_LIC_CHECKCLOCKROLLBACK 113    
                             2009 ; 380  |//$FILENAME drm_hds_closestore.src
                             2010 ; 381  |#define RSRC_FUNCLET_DRM_HDS_CLOSESTORE 114    
                             2011 ; 382  |//$FILENAME _hdsloadsrn.src
                             2012 ; 383  |#define RSRC_FUNCLET__HDSLOADSRN 115    
                             2013 ; 384  |//$FILENAME _loadproritizedlist.src
                             2014 ; 385  |#define RSRC_FUNCLET__LOADPRORITIZEDLIST 116    
                             2015 ; 386  |//$FILENAME drm_lst_initenum.src
                             2016 ; 387  |#define RSRC_FUNCLET_DRM_LST_INITENUM 117    
                             2017 ; 388  |//$FILENAME _loadattributesintocache.src
                             2018 ; 389  |#define RSRC_FUNCLET__LOADATTRIBUTESINTOCACHE 118    
                             2019 ; 390  |//$FILENAME drm_pk_symmetricverify.src
                             2020 ; 391  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICVERIFY 119    
                             2021 ; 392  |
                             2022 ; 393  |/////////////////////////////////////////////////////////////////////////////////
                             2023 ; 394  |//  Menu Modules (codebanks)
                             2024 ; 395  |/////////////////////////////////////////////////////////////////////////////////
                             2025 ; 396  |//$FILENAME mainmenu.src
                             2026 ; 397  |#define RSRC_MAIN_MENU_CODE_BANK 120    
                             2027 ; 398  |//$FILENAME displaylists.src
                             2028 ; 399  |#define RSRC_DISPLAY_LISTS_CODE_BANK 121    
                             2029 ; 400  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2030 ; 401  |//$FILENAME voicemenu.src
                             2031 ; 402  |#define RSRC_VOICE_MENU_CODE_BANK 122    
                             2032 ; 403  |//$FILENAME fmtunermenu.src
                             2033 ; 404  |#define RSRC_FMTUNER_MENU_CODE_BANK 123    
                             2034 ; 405  |//$FILENAME recorderstatemachine.src
                             2035 ; 406  |#define RSRC_RECORDER_STATE_MACHINE_CODE_BANK 124    
                             2036 ; 407  |
                             2037 ; 408  |//$FILENAME eqmenu.src
                             2038 ; 409  |#define RSRC_EQ_MENU_CODE_BANK 125    
                             2039 ; 410  |//$FILENAME playmodemenu.src
                             2040 ; 411  |#define RSRC_PLAYMODE_MENU_CODE_BANK 126    
                             2041 ; 412  |//$FILENAME contrastmenu.src
                             2042 ; 413  |#define RSRC_CONTRAST_MENU_CODE_BANK 127    
                             2043 ; 414  |//$FILENAME pwrsettingsmenu.src
                             2044 ; 415  |#define RSRC_PWRSETTINGS_MENU_CODE_BANK 128    
                             2045 ; 416  |//$FILENAME timedatemenu.src
                             2046 ; 417  |#define RSRC_TIMEDATE_MENU_CODE_BANK 129    
                             2047 ; 418  |//$FILENAME settimemenu.src
                             2048 ; 419  |#define RSRC_SETTIME_MENU_CODE_BANK 130    
                             2049 ; 420  |//$FILENAME setdatemenu.src
                             2050 ; 421  |#define RSRC_SETDATE_MENU_CODE_BANK 131    
                             2051 ; 422  |//$FILENAME settingsmenu.src
                             2052 ; 423  |#define RSRC_SETTINGS_MENU_CODE_BANK 132    
                             2053 ; 424  |//$FILENAME string_system_menu.src
                             2054 ; 425  |#define RSRC_SYSTEM_MENU_CODE_BANK 133    
                             2055 ; 426  |//$FILENAME deletemenu.src
                             2056 ; 427  |#define RSRC_DELETE_MENU_CODE_BANK 134    
                             2057 ; 428  |//$FILENAME aboutmenu.src
                             2058 ; 429  |#define RSRC_ABOUT_MENU_CODE_BANK 135    
                             2059 ; 430  |
                             2060 ; 431  |//$FILENAME spectrogram.src
                             2061 ; 432  |#define RSRC_SPECTROGRAM_MENU_CODE_BANK 136    
                             2062 ; 433  |
                             2063 ; 434  |//$FILENAME motionvideomenu.src
                             2064 ; 435  |#define RSRC_MOTION_VIDEO_MENU_CODE_BANK 137    
                             2065 ; 436  |//$FILENAME motionvideomenuinitstate.src
                             2066 ; 437  |#define RSRC_MOTION_VIDEO_MENU_INITSTATE_CODE_BANK 138    
                             2067 ; 438  |//$FILENAME jpegdisplaymenu.src
                             2068 ; 439  |#define RSRC_JPEG_DISPLAY_MENU_CODE_BANK 139    
                             2069 ; 440  |//$FILENAME jpegmanualmenu.src
                             2070 ; 441  |#define RSRC_JPEG_MANUAL_MENU_CODE_BANK 140    
                             2071 ; 442  |//$FILENAME jpegthumbnailmenu.src
                             2072 ; 443  |#define RSRC_JPEG_THUMBNAIL_MENU_CODE_BANK 141    
                             2073 ; 444  |//$FILENAME jpegslideshowmenu.src
                             2074 ; 445  |#define RSRC_JPEG_SLIDESHOW_MENU_CODE_BANK 142    
                             2075 ; 446  |//$FILENAME albumartmenu.src
                             2076 ; 447  |#define RSRC_ALBUM_ART_MENU_CODE_BANK 143    
                             2077 ; 448  |//$FILENAME jpegfileutilextra.src
                             2078 ; 449  |#define RSRC_JPEG_FILEUTIL_EXTRA_MENU_CODE_BANK 144    
                             2079 ; 450  |
                             2080 ; 451  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2081 ; 452  |// General Modules
                             2082 ; 453  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2083 ; 454  |//$FILENAME MixMod.src
                             2084 ; 455  |#define RSRC_MIXMOD_CODE 145    
                             2085 ; 456  |//$FILENAME TunerModule.src
                             2086 ; 457  |#define RSRC_TUNER_MODULE 146    
                             2087 ; 458  |//$FILENAME geqoverlay.src
                             2088 ; 459  |#define RSRC_GEQOVERLAY_CODE 147    
                             2089 ; 460  |
                             2090 ; 461  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2091 ; 462  |// Decoders/Encoders
                             2092 ; 463  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2093 ; 464  |//$FILENAME DecMod.src
                             2094 ; 465  |#define RSRC_DECMOD_CODE 148    
                             2095 ; 466  |//$FILENAME mp3p.src
                             2096 ; 467  |#define RSRC_MP3P_CODE 149    
                             2097 ; 468  |//$FILENAME mp3x.src
                             2098 ; 469  |#define RSRC_MP3X_CODE 150    
                             2099 ; 470  |//$FILENAME mp3y.src
                             2100 ; 471  |#define RSRC_MP3Y_CODE 151    
                             2101 ; 472  |//$FILENAME janusp.src
                             2102 ; 473  |#define RSRC_JANUSP_CODE 152    
                             2103 ; 474  |//RSRC_JANUSY_CODE        equ       29    ;$FILENAME janusy.src
                             2104 ; 475  |
                             2105 ; 476  |//$FILENAME decadpcmimamod.src
                             2106 ; 477  |#define RSRC_DEC_ADPCM_MOD_CODE 153    
                             2107 ; 478  |//$FILENAME dec_adpcmp.src
                             2108 ; 479  |#define RSRC_DEC_ADPCMP_CODE 154    
                             2109 ; 480  |//$FILENAME dec_adpcmx.src
                             2110 ; 481  |#define RSRC_DEC_ADPCMX_CODE 155    
                             2111 ; 482  |//$FILENAME dec_adpcmy.src
                             2112 ; 483  |#define RSRC_DEC_ADPCMY_CODE 156    
                             2113 ; 484  |
                             2114 ; 485  |//$FILENAME decadpcmsmvmod.src
                             2115 ; 486  |#define RSRC_DEC_SMVADPCM_MOD_CODE 157    
                             2116 ; 487  |//$FILENAME dec_smvadpcmp.src
                             2117 ; 488  |#define RSRC_DEC_SMVADPCMP_CODE 158    
                             2118 ; 489  |//$FILENAME dec_smvadpcmx.src
                             2119 ; 490  |#define RSRC_DEC_SMVADPCMX_CODE 159    
                             2120 ; 491  |//$FILENAME dec_smvadpcmy.src
                             2121 ; 492  |#define RSRC_DEC_SMVADPCMY_CODE 160    
                             2122 ; 493  |
                             2123 ; 494  |//$FILENAME encadpcmimamod.src
                             2124 ; 495  |#define RSRC_ENC_ADPCM_MOD_CODE 161    
                             2125 ; 496  |//$FILENAME enc_adpcmp.src
                             2126 ; 497  |#define RSRC_ENC_ADPCMP_CODE 162    
                             2127 ; 498  |//$FILENAME enc_adpcmx.src
                             2128 ; 499  |#define RSRC_ENC_ADPCMX_CODE 163    
                             2129 ; 500  |//$FILENAME enc_adpcmy.src
                             2130 ; 501  |#define RSRC_ENC_ADPCMY_CODE 164    
                             2131 ; 502  |
                             2132 ; 503  |//$FILENAME jpeg_p.src
                             2133 ; 504  |#define RSRC_JPEG_DECODER_P 165    
                             2134 ; 505  |//$FILENAME jpeg_x.src
                             2135 ; 506  |#define RSRC_JPEG_DECODER_X 166    
                             2136 ; 507  |//$FILENAME jpeg_y.src
                             2137 ; 508  |#define RSRC_JPEG_DECODER_Y 167    
                             2138 ; 509  |//$FILENAME jpeg2_y.src
                             2139 ; 510  |#define RSRC_JPEG_DECODER_Y_2 168    
                             2140 ; 511  |//$FILENAME bmp2_y.src
                             2141 ; 512  |#define RSRC_BMP_DECODER_Y_2 169    
                             2142 ; 513  |//$FILENAME bmp_p.src
                             2143 ; 514  |#define RSRC_BMP_DECODER_P 170    
                             2144 ; 515  |
                             2145 ; 516  |//RSRC_SMVJPEG_DECODER_P    equ       57    ;$FILENAME smvjpeg_p.src
                             2146 ; 517  |//$FILENAME smvjpeg_x.src
                             2147 ; 518  |#define RSRC_SMVJPEG_DECODER_X 171    
                             2148 ; 519  |//$FILENAME smvjpeg_y.src
                             2149 ; 520  |#define RSRC_SMVJPEG_DECODER_Y 172    
                             2150 ; 521  |
                             2151 ; 522  |
                             2152 ; 523  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2153 ; 524  |// System Settings
                             2154 ; 525  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2155 ; 526  |//$FILENAME settings.src
                             2156 ; 527  |#define RSRC_SETTINGS_COMMANDS 173    
                             2157 ; 528  |
                             2158 ; 529  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2159 ; 530  |// Media Device Drivers
                             2160 ; 531  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2161 ; 532  |//This resource is filled with garbage unless it is the MMC build
                             2162 ; 533  |//$FILENAME null.src
                             2163 ; 534  |#define RSRC_MMCDD_CODE 174    
                             2164 ; 535  |//$FILENAME null.src
                             2165 ; 536  |#define RSRC_SMDD_HIGH_CODE 175    
                             2166 ; 537  |
                             2167 ; 538  |/////////////////////////////////////////////////////////////////////////////////
                             2168 ; 539  |//  PlayState resources
                             2169 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             2170 ; 541  |//$FILENAME play_icon_with_border.src
                             2171 ; 542  |#define RSRC_PLAY_ICON_WITH_BORDER 176    
                             2172 ; 543  |//$FILENAME pause_icon_with_border.src
                             2173 ; 544  |#define RSRC_PAUSE_ICON_WITH_BORDER 177    
                             2174 ; 545  |//$FILENAME stop_icon_with_border.src
                             2175 ; 546  |#define RSRC_STOP_ICON_WITH_BORDER 178    
                             2176 ; 547  |//$FILENAME record_icon_with_border.src
                             2177 ; 548  |#define RSRC_RECORD_ICON_WITH_BORDER 179    
                             2178 ; 549  |//$FILENAME paused_record_icon_with_border.src
                             2179 ; 550  |#define RSRC_PAUSED_RECORD_ICON_BORDER 180    
                             2180 ; 551  |//$FILENAME ffwd_icon_with_border.src
                             2181 ; 552  |#define RSRC_FFWD_ICON_WITH_BORDER 181    
                             2182 ; 553  |//$FILENAME rwnd_icon_with_border.src
                             2183 ; 554  |#define RSRC_RWND_ICON_WITH_BORDER 182    
                             2184 ; 555  |
                             2185 ; 556  |/////////////////////////////////////////////////////////////////////////////////
                             2186 ; 557  |//  PlayMode resources
                             2187 ; 558  |/////////////////////////////////////////////////////////////////////////////////
                             2188 ; 559  |//$FILENAME repeatall_icon.src
                             2189 ; 560  |#define RSRC_REPEAT_ALL_ICON 183    
                             2190 ; 561  |//$FILENAME repeatsong_icon.src
                             2191 ; 562  |#define RSRC_REPEAT_SONG_ICON 184    
                             2192 ; 563  |//$FILENAME shuffle_icon.src
                             2193 ; 564  |#define RSRC_SHUFFLE_ICON 185    
                             2194 ; 565  |//$FILENAME random_icon.src
                             2195 ; 566  |#define RSRC_RANDOM_ICON 186    
                             2196 ; 567  |//$FILENAME repeatallclear_icon.src
                             2197 ; 568  |#define RSRC_REPEAT_ALL_CLEAR_ICON 187    
                             2198 ; 569  |//$FILENAME repeatsongclear_icon.src
                             2199 ; 570  |#define RSRC_REPEAT_SONG_CLEAR_ICON 188    
                             2200 ; 571  |//$FILENAME shuffleclear_icon.src
                             2201 ; 572  |#define RSRC_SHUFFLE_CLEAR_ICON 189    
                             2202 ; 573  |
                             2203 ; 574  |/////////////////////////////////////////////////////////////////////////////////
                             2204 ; 575  |//  Battery Status
                             2205 ; 576  |/////////////////////////////////////////////////////////////////////////////////
                             2206 ; 577  |//$FILENAME battery_00.src
                             2207 ; 578  |#define RSRC_BATTERY_00 190    
                             2208 ; 579  |//$FILENAME battery_01.src
                             2209 ; 580  |#define RSRC_BATTERY_01 191    
                             2210 ; 581  |//$FILENAME battery_02.src
                             2211 ; 582  |#define RSRC_BATTERY_02 192    
                             2212 ; 583  |//$FILENAME battery_03.src
                             2213 ; 584  |#define RSRC_BATTERY_03 193    
                             2214 ; 585  |//$FILENAME battery_04.src
                             2215 ; 586  |#define RSRC_BATTERY_04 194    
                             2216 ; 587  |//$FILENAME battery_05.src
                             2217 ; 588  |#define RSRC_BATTERY_05 195    
                             2218 ; 589  |//$FILENAME battery_06.src
                             2219 ; 590  |#define RSRC_BATTERY_06 196    
                             2220 ; 591  |//$FILENAME battery_07.src
                             2221 ; 592  |#define RSRC_BATTERY_07 197    
                             2222 ; 593  |//$FILENAME battery_08.src
                             2223 ; 594  |#define RSRC_BATTERY_08 198    
                             2224 ; 595  |//$FILENAME battery_09.src
                             2225 ; 596  |#define RSRC_BATTERY_09 199    
                             2226 ; 597  |//$FILENAME battery_10.src
                             2227 ; 598  |#define RSRC_BATTERY_10 200    
                             2228 ; 599  |
                             2229 ; 600  |/////////////////////////////////////////////////////////////////////////////////
                             2230 ; 601  |//  System Icons
                             2231 ; 602  |/////////////////////////////////////////////////////////////////////////////////
                             2232 ; 603  |//$FILENAME disk_small.src
                             2233 ; 604  |#define RSRC_DISK_ICON 201    
                             2234 ; 605  |//$FILENAME lock_small.src
                             2235 ; 606  |#define RSRC_LOCK_ICON 202    
                             2236 ; 607  |//$FILENAME icon_music_mode.src
                             2237 ; 608  |#define RSRC_MUSIC_MODE_ICON 203    
                             2238 ; 609  |//$FILENAME icon_voice_mode.src
                             2239 ; 610  |#define RSRC_VOICE_MODE_ICON 204    
                             2240 ; 611  |
                             2241 ; 612  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2242 ; 613  |// Volume Bitmaps
                             2243 ; 614  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2244 ; 615  |//$FILENAME icon_vol_00.src
                             2245 ; 616  |#define RSRC_ICON_VOL_00 205    
                             2246 ; 617  |//$FILENAME icon_vol_01.src
                             2247 ; 618  |#define RSRC_ICON_VOL_01 206    
                             2248 ; 619  |//$FILENAME icon_vol_02.src
                             2249 ; 620  |#define RSRC_ICON_VOL_02 207    
                             2250 ; 621  |//$FILENAME icon_vol_03.src
                             2251 ; 622  |#define RSRC_ICON_VOL_03 208    
                             2252 ; 623  |//$FILENAME icon_vol_04.src
                             2253 ; 624  |#define RSRC_ICON_VOL_04 209    
                             2254 ; 625  |//$FILENAME icon_vol_05.src
                             2255 ; 626  |#define RSRC_ICON_VOL_05 210    
                             2256 ; 627  |//$FILENAME icon_vol_06.src
                             2257 ; 628  |#define RSRC_ICON_VOL_06 211    
                             2258 ; 629  |//$FILENAME icon_vol_07.src
                             2259 ; 630  |#define RSRC_ICON_VOL_07 212    
                             2260 ; 631  |//$FILENAME icon_vol_08.src
                             2261 ; 632  |#define RSRC_ICON_VOL_08 213    
                             2262 ; 633  |//$FILENAME icon_vol_09.src
                             2263 ; 634  |#define RSRC_ICON_VOL_09 214    
                             2264 ; 635  |//$FILENAME icon_vol_10.src
                             2265 ; 636  |#define RSRC_ICON_VOL_10 215    
                             2266 ; 637  |//$FILENAME icon_vol_11.src
                             2267 ; 638  |#define RSRC_ICON_VOL_11 216    
                             2268 ; 639  |//$FILENAME icon_vol_12.src
                             2269 ; 640  |#define RSRC_ICON_VOL_12 217    
                             2270 ; 641  |//$FILENAME icon_vol_13.src
                             2271 ; 642  |#define RSRC_ICON_VOL_13 218    
                             2272 ; 643  |//$FILENAME icon_vol_14.src
                             2273 ; 644  |#define RSRC_ICON_VOL_14 219    
                             2274 ; 645  |//$FILENAME icon_vol_15.src
                             2275 ; 646  |#define RSRC_ICON_VOL_15 220    
                             2276 ; 647  |//$FILENAME icon_vol_16.src
                             2277 ; 648  |#define RSRC_ICON_VOL_16 221    
                             2278 ; 649  |//$FILENAME icon_vol_17.src
                             2279 ; 650  |#define RSRC_ICON_VOL_17 222    
                             2280 ; 651  |//$FILENAME icon_vol_18.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2281 ; 652  |#define RSRC_ICON_VOL_18 223    
                             2282 ; 653  |//$FILENAME icon_vol_19.src
                             2283 ; 654  |#define RSRC_ICON_VOL_19 224    
                             2284 ; 655  |//$FILENAME icon_vol_20.src
                             2285 ; 656  |#define RSRC_ICON_VOL_20 225    
                             2286 ; 657  |//$FILENAME icon_vol_21.src
                             2287 ; 658  |#define RSRC_ICON_VOL_21 226    
                             2288 ; 659  |//$FILENAME icon_vol_22.src
                             2289 ; 660  |#define RSRC_ICON_VOL_22 227    
                             2290 ; 661  |//$FILENAME icon_vol_23.src
                             2291 ; 662  |#define RSRC_ICON_VOL_23 228    
                             2292 ; 663  |//$FILENAME icon_vol_24.src
                             2293 ; 664  |#define RSRC_ICON_VOL_24 229    
                             2294 ; 665  |//$FILENAME icon_vol_25.src
                             2295 ; 666  |#define RSRC_ICON_VOL_25 230    
                             2296 ; 667  |//$FILENAME icon_vol_26.src
                             2297 ; 668  |#define RSRC_ICON_VOL_26 231    
                             2298 ; 669  |//$FILENAME icon_vol_27.src
                             2299 ; 670  |#define RSRC_ICON_VOL_27 232    
                             2300 ; 671  |//$FILENAME icon_vol_28.src
                             2301 ; 672  |#define RSRC_ICON_VOL_28 233    
                             2302 ; 673  |//$FILENAME icon_vol_29.src
                             2303 ; 674  |#define RSRC_ICON_VOL_29 234    
                             2304 ; 675  |//$FILENAME icon_vol_30.src
                             2305 ; 676  |#define RSRC_ICON_VOL_30 235    
                             2306 ; 677  |//$FILENAME icon_vol_31.src
                             2307 ; 678  |#define RSRC_ICON_VOL_31 236    
                             2308 ; 679  |
                             2309 ; 680  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2310 ; 681  |// Splash Screen Stuff
                             2311 ; 682  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2312 ; 683  |//$FILENAME st_bw1.src
                             2313 ; 684  |#define RSRC_SPLASH_SCREEN 237    
                             2314 ; 685  |//$FILENAME siglogo1.src
                             2315 ; 686  |#define RSRC_SPLASH_SCREEN_1 238    
                             2316 ; 687  |//$FILENAME siglogo2.src
                             2317 ; 688  |#define RSRC_SPLASH_SCREEN_2 239    
                             2318 ; 689  |//$FILENAME siglogo3.src
                             2319 ; 690  |#define RSRC_SPLASH_SCREEN_3 240    
                             2320 ; 691  |//$FILENAME siglogo4.src
                             2321 ; 692  |#define RSRC_SPLASH_SCREEN_4 241    
                             2322 ; 693  |//$FILENAME siglogo5.src
                             2323 ; 694  |#define RSRC_SPLASH_SCREEN_5 242    
                             2324 ; 695  |//$FILENAME siglogo6.src
                             2325 ; 696  |#define RSRC_SPLASH_SCREEN_6 243    
                             2326 ; 697  |//$FILENAME siglogo7.src
                             2327 ; 698  |#define RSRC_SPLASH_SCREEN_7 244    
                             2328 ; 699  |//$FILENAME siglogo8.src
                             2329 ; 700  |#define RSRC_SPLASH_SCREEN_8 245    
                             2330 ; 701  |//$FILENAME siglogo9.src
                             2331 ; 702  |#define RSRC_SPLASH_SCREEN_9 246    
                             2332 ; 703  |//$FILENAME siglogo10.src
                             2333 ; 704  |#define RSRC_SPLASH_SCREEN_10 247    
                             2334 ; 705  |//$FILENAME siglogo11.src
                             2335 ; 706  |#define RSRC_SPLASH_SCREEN_11 248    
                             2336 ; 707  |//$FILENAME siglogo12.src
                             2337 ; 708  |#define RSRC_SPLASH_SCREEN_12 249    
                             2338 ; 709  |//$FILENAME siglogo13.src
                             2339 ; 710  |#define RSRC_SPLASH_SCREEN_13 250    
                             2340 ; 711  |//$FILENAME siglogo.src
                             2341 ; 712  |#define RSRC_SPLASH_SCREEN_ALL 251    
                             2342 ; 713  |
                             2343 ; 714  |//$FILENAME locked.src
                             2344 ; 715  |#define RSRC_LOCKED_SCREEN 252    
                             2345 ; 716  |
                             2346 ; 717  |/////////////////////////////////////////////////////////////////////////////////
                             2347 ; 718  |//  Shutdown
                             2348 ; 719  |/////////////////////////////////////////////////////////////////////////////////
                             2349 ; 720  |//$FILENAME string_arial_8_continue_holding_to_power_off.src
                             2350 ; 721  |#define RSRC_PDOWN_HOLD_STRING 253    
                             2351 ; 722  |//$FILENAME status_16_6_steps_0.src
                             2352 ; 723  |#define RSRC_PDOWN_STATUS_0 254    
                             2353 ; 724  |//$FILENAME status_16_6_steps_1.src
                             2354 ; 725  |#define RSRC_PDOWN_STATUS_1 255    
                             2355 ; 726  |//$FILENAME status_16_6_steps_2.src
                             2356 ; 727  |#define RSRC_PDOWN_STATUS_2 256    
                             2357 ; 728  |//$FILENAME status_16_6_steps_3.src
                             2358 ; 729  |#define RSRC_PDOWN_STATUS_3 257    
                             2359 ; 730  |//$FILENAME status_16_6_steps_4.src
                             2360 ; 731  |#define RSRC_PDOWN_STATUS_4 258    
                             2361 ; 732  |//$FILENAME status_16_6_steps_5.src
                             2362 ; 733  |#define RSRC_PDOWN_STATUS_5 259    
                             2363 ; 734  |//$FILENAME status_16_6_steps_6.src
                             2364 ; 735  |#define RSRC_PDOWN_STATUS_6 260    
                             2365 ; 736  |
                             2366 ; 737  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2367 ; 738  |// EQ
                             2368 ; 739  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2369 ; 740  |//$FILENAME eq_clear_icon.src
                             2370 ; 741  |#define RSRC_EQ_CLEAR_ICON 261    
                             2371 ; 742  |//$FILENAME rock_icon.src
                             2372 ; 743  |#define RSRC_ROCK_ICON 262    
                             2373 ; 744  |//$FILENAME jazz_icon.src
                             2374 ; 745  |#define RSRC_JAZZ_ICON 263    
                             2375 ; 746  |//$FILENAME classic_icon.src
                             2376 ; 747  |#define RSRC_CLASSIC_ICON 264    
                             2377 ; 748  |//$FILENAME pop_icon.src
                             2378 ; 749  |#define RSRC_POP_ICON 265    
                             2379 ; 750  |//$FILENAME custom_icon.src
                             2380 ; 751  |#define RSRC_CUSTOM_ICON 266    
                             2381 ; 752  |
                             2382 ; 753  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2383 ; 754  |// AB
                             2384 ; 755  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2385 ; 756  |//$FILENAME ab_mark_a.src
                             2386 ; 757  |#define RSRC_AB_MARK_A_ICON 267    
                             2387 ; 758  |//$FILENAME ab_mark_b.src
                             2388 ; 759  |#define RSRC_AB_MARK_B_ICON 268    
                             2389 ; 760  |
                             2390 ; 761  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2391 ; 762  |// Menu Display Resources
                             2392 ; 763  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2393 ; 764  |//$FILENAME string_music_menu.src
                             2394 ; 765  |#define RSRC_STRING_MUSIC_MENU 269    
                             2395 ; 766  |//$FILENAME string_mvideo_menu.src
                             2396 ; 767  |#define RSRC_STRING_MVIDEO_MENU 270    
                             2397 ; 768  |//$FILENAME string_jpeg_display_menu.src
                             2398 ; 769  |#define RSRC_STRING_JPEG_DISPLAY_MENU 271    
                             2399 ; 770  |//$FILENAME string_jpeg_manual_menu.src
                             2400 ; 771  |#define RSRC_STRING_JPEG_MANUAL_MENU 272    
                             2401 ; 772  |//$FILENAME string_jpeg_slideshow_menu.src
                             2402 ; 773  |#define RSRC_STRING_JPEG_SLIDESHOW_MENU 273    
                             2403 ; 774  |//$FILENAME string_jpeg_thumbnail_menu.src
                             2404 ; 775  |#define RSRC_STRING_JPEG_THUMBNAIL_MENU 274    
                             2405 ; 776  |//$FILENAME string_voice_menu.src
                             2406 ; 777  |#define RSRC_STRING_VOICE_MENU 275    
                             2407 ; 778  |//$FILENAME string_audible_menu.src
                             2408 ; 779  |#define RSRC_STRING_AUDIBLE_MENU 276    
                             2409 ; 780  |//$FILENAME string_fmtuner_menu.src
                             2410 ; 781  |#define RSRC_STRING_FMTUNER_MENU 277    
                             2411 ; 782  |//$FILENAME string_settings_menu.src
                             2412 ; 783  |#define RSRC_STRING_SETTINGS_MENU 278    
                             2413 ; 784  |//$FILENAME string_eq_menu.src
                             2414 ; 785  |#define RSRC_STRING_EQ_MENU 279    
                             2415 ; 786  |//$FILENAME string_playmode_menu.src
                             2416 ; 787  |#define RSRC_STRING_PLAYMODE_MENU 280    
                             2417 ; 788  |//$FILENAME string_contrast_menu.src
                             2418 ; 789  |#define RSRC_STRING_CONTRAST_MENU 281    
                             2419 ; 790  |//$FILENAME string_pwrsavings_menu.src
                             2420 ; 791  |#define RSRC_STRING_PWRSAVINGS_MENU 282    
                             2421 ; 792  |//$FILENAME string_time_date_menu.src
                             2422 ; 793  |#define RSRC_STRING_TIME_DATE_MENU 283    
                             2423 ; 794  |//$FILENAME string_set_time_menu.src
                             2424 ; 795  |#define RSRC_STRING_SET_TIME_MENU 284    
                             2425 ; 796  |//$FILENAME string_set_date_menu.src
                             2426 ; 797  |#define RSRC_STRING_SET_DATE_MENU 285    
                             2427 ; 798  |//$FILENAME string_exit_menu.src
                             2428 ; 799  |#define RSRC_STRING_EXIT_MENU 286    
                             2429 ; 800  |//$FILENAME string_rock_menu.src
                             2430 ; 801  |#define RSRC_STRING_ROCK_MENU 287    
                             2431 ; 802  |//$FILENAME string_pop_menu.src
                             2432 ; 803  |#define RSRC_STRING_POP_MENU 288    
                             2433 ; 804  |//$FILENAME string_classic_menu.src
                             2434 ; 805  |#define RSRC_STRING_CLASSIC_MENU 289    
                             2435 ; 806  |//$FILENAME string_normal_menu.src
                             2436 ; 807  |#define RSRC_STRING_NORMAL_MENU 290    
                             2437 ; 808  |//$FILENAME string_jazz_menu.src
                             2438 ; 809  |#define RSRC_STRING_JAZZ_MENU 291    
                             2439 ; 810  |//$FILENAME string_repeat1_menu.src
                             2440 ; 811  |#define RSRC_STRING_REPEAT1_MENU 292    
                             2441 ; 812  |//$FILENAME string_repeatall_menu.src
                             2442 ; 813  |#define RSRC_STRING_REPEATALL_MENU 293    
                             2443 ; 814  |//$FILENAME string_shuffle_menu.src
                             2444 ; 815  |#define RSRC_STRING_SHUFFLE_MENU 294    
                             2445 ; 816  |//$FILENAME string_repeatshuffle_menu.src
                             2446 ; 817  |#define RSRC_STRING_SHUFFLEREPEAT_MENU 295    
                             2447 ; 818  |//$FILENAME string_disable_menu.src
                             2448 ; 819  |#define RSRC_STRING_DISABLE_MENU 296    
                             2449 ; 820  |//$FILENAME string_1min_menu.src
                             2450 ; 821  |#define RSRC_STRING_1MIN_MENU 297    
                             2451 ; 822  |//$FILENAME string_2min_menu.src
                             2452 ; 823  |#define RSRC_STRING_2MIN_MENU 298    
                             2453 ; 824  |//$FILENAME string_5min_menu.src
                             2454 ; 825  |#define RSRC_STRING_5MIN_MENU 299    
                             2455 ; 826  |//$FILENAME string_10min_menu.src
                             2456 ; 827  |#define RSRC_STRING_10MIN_MENU 300    
                             2457 ; 828  |//$FILENAME string_system_menu.src
                             2458 ; 829  |#define RSRC_STRING_SYSTEM_MENU 301    
                             2459 ; 830  |//$FILENAME string_about_menu.src
                             2460 ; 831  |#define RSRC_STRING_ABOUT_MENU 302    
                             2461 ; 832  |//$FILENAME string_delete_menu.src
                             2462 ; 833  |#define RSRC_STRING_DELETE_MENU 303    
                             2463 ; 834  |//$FILENAME string_record_menu.src
                             2464 ; 835  |#define RSRC_STRING_RECORD_MENU 304    
                             2465 ; 836  |//$FILENAME string_spectrogram_menu.src
                             2466 ; 837  |#define RSRC_STRING_SPECTROGRAM_MENU 305    
                             2467 ; 838  |
                             2468 ; 839  |//$FILENAME string_end_of_slide_show.src
                             2469 ; 840  |#define RSRC_STRING_END_OF_SLIDE_SHOW 306    
                             2470 ; 841  |
                             2471 ; 842  |//$FILENAME string_mb.src
                             2472 ; 843  |#define RSRC_STRING_MB 307    
                             2473 ; 844  |
                             2474 ; 845  |//$FILENAME internal_media.src
                             2475 ; 846  |#define RSRC_INT_MEDIA 308    
                             2476 ; 847  |//$FILENAME external_media.src
                             2477 ; 848  |#define RSRC_EXT_MEDIA 309    
                             2478 ; 849  |
                             2479 ; 850  |//$FILENAME about_title.src
                             2480 ; 851  |#define RSRC_ABOUT_TITLE 310    
                             2481 ; 852  |//$FILENAME player_name.src
                             2482 ; 853  |#define RSRC_PLAYER_NAME_VER 311    
                             2483 ; 854  |
                             2484 ; 855  |//$FILENAME settings_title.src
                             2485 ; 856  |#define RSRC_SETTINGS_TITLE 312    
                             2486 ; 857  |//$FILENAME jpeg_display_title.src
                             2487 ; 858  |#define RSRC_JPEG_DISPLAY_TITLE 313    
                             2488 ; 859  |//$FILENAME erase_title.src
                             2489 ; 860  |#define RSRC_ERASE_TITLE 314    
                             2490 ; 861  |
                             2491 ; 862  |//$FILENAME del_warning_no.src
                             2492 ; 863  |#define RSRC_DELETE_NO 315    
                             2493 ; 864  |//$FILENAME del_warning_yes.src
                             2494 ; 865  |#define RSRC_DELETE_YES 316    
                             2495 ; 866  |//$FILENAME del_warning_line1.src
                             2496 ; 867  |#define RSRC_WARNING_MSG_LINE1 317    
                             2497 ; 868  |//$FILENAME del_warning_line2.src
                             2498 ; 869  |#define RSRC_WARNING_MSG_LINE2 318    
                             2499 ; 870  |//$FILENAME lowbattery.src
                             2500 ; 871  |#define RSRC_BROWNOUT_BITMAP 319    
                             2501 ; 872  |//$FILENAME vbr.src
                             2502 ; 873  |#define RSRC_VBR_BITMAP 320    
                             2503 ; 874  |
                             2504 ; 875  |//$FILENAME string_song.src
                             2505 ; 876  |#define RSRC_STRING_SONG_COLON 321    
                             2506 ; 877  |//$FILENAME string_voice.src
                             2507 ; 878  |#define RSRC_STRING_VOICE_COLON 322    
                             2508 ; 879  |
                             2509 ; 880  |//$FILENAME time_date_title.src
                             2510 ; 881  |#define RSRC_TIME_DATE_TITLE 323    
                             2511 ; 882  |//$FILENAME set_time_title.src
                             2512 ; 883  |#define RSRC_SET_TIME_TITLE 324    
                             2513 ; 884  |//$FILENAME set_date_title.src
                             2514 ; 885  |#define RSRC_SET_DATE_TITLE 325    
                             2515 ; 886  |//$FILENAME string_searching.src
                             2516 ; 887  |#define RSRC_STRING_SEARCHING 326    
                             2517 ; 888  |/////////////////////////////////////////////////////////////////////////////////
                             2518 ; 889  |//  Save Changes
                             2519 ; 890  |/////////////////////////////////////////////////////////////////////////////////
                             2520 ; 891  |//$FILENAME save_changes_yes.src
                             2521 ; 892  |#define RSRC_SAVE_CHANGES_YES 327    
                             2522 ; 893  |//$FILENAME save_changes_no.src
                             2523 ; 894  |#define RSRC_SAVE_CHANGES_NO 328    
                             2524 ; 895  |//$FILENAME save_changes_cancel.src
                             2525 ; 896  |#define RSRC_SAVE_CHANGES_CANCEL 329    
                             2526 ; 897  |//$FILENAME save_changes_clear.src
                             2527 ; 898  |#define RSRC_SAVE_CHANGES_CLEAR 330    
                             2528 ; 899  |/////////////////////////////////////////////////////////////////////////////////
                             2529 ; 900  |//  Contrast
                             2530 ; 901  |/////////////////////////////////////////////////////////////////////////////////
                             2531 ; 902  |//$FILENAME contrast_title.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2532 ; 903  |#define RSRC_CONTRAST_TITLE 331    
                             2533 ; 904  |//$FILENAME contrast_frame.src
                             2534 ; 905  |#define RSRC_CONTRAST_FRAME 332    
                             2535 ; 906  |//$FILENAME contrast_level0.src
                             2536 ; 907  |#define RSRC_CONTRAST_LEVEL_0 333    
                             2537 ; 908  |//$FILENAME contrast_level1.src
                             2538 ; 909  |#define RSRC_CONTRAST_LEVEL_1 334    
                             2539 ; 910  |//$FILENAME contrast_level2.src
                             2540 ; 911  |#define RSRC_CONTRAST_LEVEL_2 335    
                             2541 ; 912  |//$FILENAME contrast_level3.src
                             2542 ; 913  |#define RSRC_CONTRAST_LEVEL_3 336    
                             2543 ; 914  |//$FILENAME contrast_level4.src
                             2544 ; 915  |#define RSRC_CONTRAST_LEVEL_4 337    
                             2545 ; 916  |//$FILENAME contrast_level5.src
                             2546 ; 917  |#define RSRC_CONTRAST_LEVEL_5 338    
                             2547 ; 918  |//$FILENAME contrast_level6.src
                             2548 ; 919  |#define RSRC_CONTRAST_LEVEL_6 339    
                             2549 ; 920  |//$FILENAME contrast_level7.src
                             2550 ; 921  |#define RSRC_CONTRAST_LEVEL_7 340    
                             2551 ; 922  |//$FILENAME contrast_level8.src
                             2552 ; 923  |#define RSRC_CONTRAST_LEVEL_8 341    
                             2553 ; 924  |//$FILENAME contrast_level9.src
                             2554 ; 925  |#define RSRC_CONTRAST_LEVEL_9 342    
                             2555 ; 926  |//$FILENAME contrast_level10.src
                             2556 ; 927  |#define RSRC_CONTRAST_LEVEL_10 343    
                             2557 ; 928  |
                             2558 ; 929  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2559 ; 930  |// Funclets
                             2560 ; 931  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2561 ; 932  |//$FILENAME Funclet_SetRTC.src
                             2562 ; 933  |#define RSRC_FUNCLET_SET_RTC 344    
                             2563 ; 934  |//$FILENAME Funclet_InitRTC.src
                             2564 ; 935  |#define RSRC_FUNCLET_INIT_RTC 345    
                             2565 ; 936  |//$FILENAME Funclet_ReadRTC.src
                             2566 ; 937  |#define RSRC_FUNCLET_READ_RTC 346    
                             2567 ; 938  |//$FILENAME Funclet_SysResetAllInt.src
                             2568 ; 939  |#define RSRC_FUNCLET_SYSRESETALLINT 347    
                             2569 ; 940  |//$FILENAME Funclet_SysSetupDecVec.src
                             2570 ; 941  |#define RSRC_FUNCLET_SYSSETUPDECVEC 348    
                             2571 ; 942  |//$FILENAME Funclet_SysSetupEncVec.src
                             2572 ; 943  |#define RSRC_FUNCLET_SYSSETUPENCVEC 349    
                             2573 ; 944  |//$FILENAME Funclet_SysTimeInit.src
                             2574 ; 945  |#define RSRC_FUNCLET_SYSTIMEINIT 350    
                             2575 ; 946  |//$FILENAME Funclet_AnalogInit.src
                             2576 ; 947  |#define RSRC_FUNCLET_ANALOGINIT 351    
                             2577 ; 948  |//$FILENAME Funclet_UsbConnected.src
                             2578 ; 949  |#define RSRC_FUNCLET_USBCONNECTED 352    
                             2579 ; 950  |//$FILENAME Funclet_ButtonInit.src
                             2580 ; 951  |#define RSRC_FUNCLET_BUTTONINIT 353    
                             2581 ; 952  |//$FILENAME Funclet_PowerUpHeadPhones.src
                             2582 ; 953  |#define RSRC_FUNCLET_POWERUPHEADPHONES 354    
                             2583 ; 954  |//$FILENAME Funclet_PowerDownHeadPhones.src
                             2584 ; 955  |#define RSRC_FUNCLET_POWERDOWNHEADPHONES 355    
                             2585 ; 956  |//$FILENAME Funclet_StartProject.src
                             2586 ; 957  |#define RSRC_FUNCLET_STARTPROJECT 356    
                             2587 ; 958  |//$FILENAME Funclet_ModuleSetTimer.src
                             2588 ; 959  |#define RSRC_FUNCLET_MODULESETTIMER 357    
                             2589 ; 960  |//$FILENAME null.src
                             2590 ; 961  |#define RSRC_FUNCLET_MEDIADETECTION 358    
                             2591 ; 962  |//$FILENAME Funclet_SysStopDecoder.src
                             2592 ; 963  |#define RSRC_FUNCLET_SYSSTOPDECODER 359    
                             2593 ; 964  |//$FILENAME Funclet_SysStopEncoder.src
                             2594 ; 965  |#define RSRC_FUNCLET_SYSSTOPENCODER 360    
                             2595 ; 966  |//$FILENAME Funclet_SysSetDecoder.src
                             2596 ; 967  |#define RSRC_FUNCLET_SYSSETDECODER 361    
                             2597 ; 968  |//$FILENAME Funclet_SysSetEncoder.src
                             2598 ; 969  |#define RSRC_FUNCLET_SYSSETENCODER 362    
                             2599 ; 970  |//$FILENAME null.src
                             2600 ; 971  |#define RSRC_FUNCLET_PROCESSPT 363    
                             2601 ; 972  |//$FILENAME Funclet_DisplaySplashScreen.src
                             2602 ; 973  |#define RSRC_FUNCLET_DISPLAYSPLASHSCREEN 364    
                             2603 ; 974  |//$FILENAME Funclet_SysGetVolume.src
                             2604 ; 975  |#define RSRC_FUNCLET_SYSGETVOLUME 365    
                             2605 ; 976  |//$FILENAME null.src
                             2606 ; 977  |#define RSRC_FUNCLET_MMCENUMERATEPHYSICALDEVICE 366    
                             2607 ; 978  |//$FILENAME null.src
                             2608 ; 979  |#define RSRC_FUNCLET_RESETDEVICE 367    
                             2609 ; 980  |//$FILENAME null.src
                             2610 ; 981  |#define RSRC_FUNCLET_PROCESSCSD 368    
                             2611 ; 982  |//$FILENAME null.src
                             2612 ; 983  |#define RSRC_FUNCLET_PROCESSPARTITION 369    
                             2613 ; 984  |//$FILENAME null.src
                             2614 ; 985  |#define RSRC_FUNCLET_PARTITIONENTRYCOPY 370    
                             2615 ; 986  |//$FILENAME Funclet_MixerMasterFadeOut.src
                             2616 ; 987  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_OUT 371    
                             2617 ; 988  |//$FILENAME Funclet_MixerMasterFadeIn.src
                             2618 ; 989  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_IN 372    
                             2619 ; 990  |//$FILENAME Funclet_EncSetProperties.src
                             2620 ; 991  |#define RSRC_FUNCLET_ENCSETPROPERTIES 373    
                             2621 ; 992  |//$FILENAME null.src
                             2622 ; 993  |#define RSRC_FUNCLET_DOESMBREXIST 374    
                             2623 ; 994  |//$FILENAME null.src
                             2624 ; 995  |#define RSRC_FUNCLET_EXTRACTPARTITIONPARAMETERS 375    
                             2625 ; 996  |//$FILENAME Funclet_SaveSettings.src
                             2626 ; 997  |#define RSRC_FUNCLET_SYSSAVESETTINGS 376    
                             2627 ; 998  |//$FILENAME Funclet_LoadSettings.src
                             2628 ; 999  |#define RSRC_FUNCLET_SYSLOADSETTINGS 377    
                             2629 ; 1000 |///////////////////////////////////////////////////////////////
                             2630 ; 1001 |// Sanyo FM Tuner Fuclet
                             2631 ; 1002 |///////////////////////////////////////////////////////////////
                             2632 ; 1003 |//RSRC_FUNCLET_TUNER_DRIVER_INIT    equ      334    ;$FILENAME Funclet_TunerDriverInit.src
                             2633 ; 1004 |//RSRC_FUNCLET_TUNER_SCAN_STATIONS    equ      335    ;$FILENAME Funclet_TunerScanStations.src
                             2634 ; 1005 |//RSRC_FUNCLET_TUNER_SET_TO_PRESET    equ      336    ;$FILENAME Funclet_TunerSetToPreset.src
                             2635 ; 1006 |//RSRC_FUNCLET_TUNER_SET_MONO_STEREO    equ      337    ;$FILENAME Funclet_TunerSetMonoStereo.src
                             2636 ; 1007 |//RSRC_FUNCLET_TUNER_SET_STANDBY    equ      338    ;$FILENAME Funclet_TunerSetStandby.src
                             2637 ; 1008 |//RSRC_FUNCLET_TUNER_SET_PRESET    equ      339    ;$FILENAME Funclet_TunerSetPreset.src
                             2638 ; 1009 |//RSRC_FUNCLET_TUNER_ERASE_PRESET    equ      340    ;$FILENAME Funclet_TunerErasePreset.src
                             2639 ; 1010 |//RSRC_FUNCLET_TUNER_SET_IF    equ      341    ;$FILENAME Funclet_TunerSetIf.src
                             2640 ; 1011 |//RSRC_FUNCLET_TUNER_WRITE_IF_OSC    equ      342    ;$FILENAME Funclet_TunerWriteIfOSc.src
                             2641 ; 1012 |//RSRC_FUNCLET_TUNER_GET_FIELD_STRENGTH    equ      343    ;$FILENAME Funclet_TunerGetFieldStrength.src
                             2642 ; 1013 |//RSRC_FUNCLET_TUNER_INIT_RF_CAP_OSC    equ      344    ;$FILENAME Funclet_TunerInitRfCapOsc.src
                             2643 ; 1014 |//RSRC_FUNCLET_TUNER_STORE_FM_STATION    equ      345    ;$FILENAME Funclet_TunerStoreFmStation.src
                             2644 ; 1015 |//RSRC_FUNCLET_TUNER_STORE_FM_PRESET    equ      346    ;$FILENAME Funclet_TunerStoreFmPreset.src
                             2645 ; 1016 |//RSRC_FUNCLET_TUNER_SET_REGION    equ      347    ;$FILENAME Funclet_TunerSetRegion.src
                             2646 ; 1017 |
                             2647 ; 1018 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2648 ; 1019 |// WMA Resources
                             2649 ; 1020 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2650 ; 1021 |//$FILENAME wmaCore.src
                             2651 ; 1022 |#define RSRC_WMA_CORE 378    
                             2652 ; 1023 |//$FILENAME wmaMidLow.src
                             2653 ; 1024 |#define RSRC_WMA_MIDLOW 379    
                             2654 ; 1025 |//$FILENAME wmaHigh.src
                             2655 ; 1026 |#define RSRC_WMA_HIGH 380    
                             2656 ; 1027 |//$FILENAME wmaHighMid.src
                             2657 ; 1028 |#define RSRC_WMA_HIGHMID 381    
                             2658 ; 1029 |//$FILENAME wmaMid.src
                             2659 ; 1030 |#define RSRC_WMA_MID 382    
                             2660 ; 1031 |//$FILENAME wmaLow.src
                             2661 ; 1032 |#define RSRC_WMA_LOW 383    
                             2662 ; 1033 |//$FILENAME wmaX1mem.src
                             2663 ; 1034 |#define RSRC_WMA_DATA_X1 384    
                             2664 ; 1035 |//$FILENAME wmaYmem.src
                             2665 ; 1036 |#define RSRC_WMA_DATA_Y 385    
                             2666 ; 1037 |//$FILENAME wmaLXmem.src
                             2667 ; 1038 |#define RSRC_WMA_DATA_L_X 386    
                             2668 ; 1039 |//$FILENAME wmaLYmem.src
                             2669 ; 1040 |#define RSRC_WMA_DATA_L_Y 387    
                             2670 ; 1041 |//$FILENAME wmaHuff44Qb.src
                             2671 ; 1042 |#define RSRC_WMA_HUFF44QB 388    
                             2672 ; 1043 |//$FILENAME wmaHuff44Ob.src
                             2673 ; 1044 |#define RSRC_WMA_HUFF44OB 389    
                             2674 ; 1045 |//$FILENAME wmaHuff16Ob.src
                             2675 ; 1046 |#define RSRC_WMA_HUFF16OB 390    
                             2676 ; 1047 |//$FILENAME drmpdcommon.src
                             2677 ; 1048 |#define RSRC_DRMPD_COMMON 391    
                             2678 ; 1049 |//$FILENAME januswmasupport.src
                             2679 ; 1050 |#define RSRC_JANUS_WMASUPPORT 392    
                             2680 ; 1051 |//$FILENAME wmalicenseinit.src
                             2681 ; 1052 |#define RSRC_WMA_LICENSEINIT 393    
                             2682 ; 1053 |//$FILENAME wma_tables.src
                             2683 ; 1054 |#define RSRC_WMA_TABLES 394    
                             2684 ; 1055 |//$FILENAME janus_tables.src
                             2685 ; 1056 |#define RSRC_JANUS_TABLES 395    
                             2686 ; 1057 |//$FILENAME wma_constants.src
                             2687 ; 1058 |#define RSRC_WMA_CONSTANTS 396    
                             2688 ; 1059 |//$FILENAME janus_constants.src
                             2689 ; 1060 |#define RSRC_JANUS_CONSTANTS 397    
                             2690 ; 1061 |//$FILENAME janus_xmem.src
                             2691 ; 1062 |#define RSRC_JANUS_X 398    
                             2692 ; 1063 |//$FILENAME janusy_data.src
                             2693 ; 1064 |#define RSRC_JANUSY_DATA 399    
                             2694 ; 1065 |
                             2695 ; 1066 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2696 ; 1067 |// Fonts -- these are last because they are very large
                             2697 ; 1068 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2698 ; 1069 |//$FILENAME font_table.src
                             2699 ; 1070 |#define RSRC_FONT_TABLE 400    
                             2700 ; 1071 |//$FILENAME font_PGM.src
                             2701 ; 1072 |#define RSRC_PGM_8 401    
                             2702 ; 1073 |//$FILENAME font_SGMs.src
                             2703 ; 1074 |#define RSRC_SGMS_8 402    
                             2704 ; 1075 |//$FILENAME font_script_00.src
                             2705 ; 1076 |#define RSRC_SCRIPT_00_8 403    
                             2706 ; 1077 |//$FILENAME font_scripts.src
                             2707 ; 1078 |#define RSRC_SCRIPTS_8 404    
                             2708 ; 1079 |//$FILENAME font_PDM.src
                             2709 ; 1080 |#define RSRC_PDM 405    
                             2710 ; 1081 |//$FILENAME font_SDMs.src
                             2711 ; 1082 |#define RSRC_SDMS 406    
                             2712 ; 1083 |//$FILENAME bitmap_warning.src
                             2713 ; 1084 |#define RSRC_WARNING 407    
                             2714 ; 1085 |//$FILENAME bitmap_device_full.src
                             2715 ; 1086 |#define RSRC_DEVICE_FULL 408    
                             2716 ; 1087 |
                             2717 ; 1088 |
                             2718 ; 1089 |//$FILENAME lcd_controller_init.src
                             2719 ; 1090 |#define RSRC_LCD_INIT_SEQ 409    
                             2720 ; 1091 |
                             2721 ; 1092 |//$FILENAME Funclet_DBCSToUnicode.src
                             2722 ; 1093 |#define RSRC_FUNCLET_DBCS_TO_UNICODE 410    
                             2723 ; 1094 |//$FILENAME Funclet_DBCSToUnicodeDstXSrcY.src
                             2724 ; 1095 |#define RSRC_FUNCLET_DBCS_TO_UNICODE_DSTX_SRCY 411    
                             2725 ; 1096 |//$FILENAME Funclet_LCDSetFont.src
                             2726 ; 1097 |#define RSRC_FUNCLET_SET_FONT 412    
                             2727 ; 1098 |//$FILENAME Funclet_GetTextWidthAddressUnicode.src
                             2728 ; 1099 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE 413    
                             2729 ; 1100 |//$FILENAME Funclet_GetTextWidthResourceUnicode.src
                             2730 ; 1101 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE 414    
                             2731 ; 1102 |//$FILENAME Funclet_GetTextWidthAddressDBCS.src
                             2732 ; 1103 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS 415    
                             2733 ; 1104 |//$FILENAME Funclet_GetTextWidthResourceDBCS.src
                             2734 ; 1105 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS 416    
                             2735 ; 1106 |//$FILENAME Funclet_ChipSerialNumberInit.src
                             2736 ; 1107 |#define RSRC_FUNCLET_CHIPSERIALNUMBERINIT 417    
                             2737 ; 1108 |//$FILENAME Funclet_InternalMediaSerialNumberInit.src
                             2738 ; 1109 |#define RSRC_FUNCLET_INTERNALMEDIASERIALNUMBERINIT 418    
                             2739 ; 1110 |//$FILENAME Funclet_ChipGetSerialNumber.src
                             2740 ; 1111 |#define RSRC_FUNCLET_CHIPGETSERIALNUMBER 419    
                             2741 ; 1112 |//$FILENAME Funclet_CreateNullSerialNumber.src
                             2742 ; 1113 |#define RSRC_FUNCLET_CREATENULLSERIALNUMBER 420    
                             2743 ; 1114 |//$FILENAME Funclet_ConvertHexToASCII.src
                             2744 ; 1115 |#define RSRC_FUNCLET_CONVERTHEXTOASCII 421    
                             2745 ; 1116 |//$FILENAME Funclet_LowResolutionAdcInit.src
                             2746 ; 1117 |#define RSRC_FUNCLET_LOWRESOLUTIONADCINIT 422    
                             2747 ; 1118 |
                             2748 ; 1119 |
                             2749 ; 1120 |//$FILENAME sysrecord.src
                             2750 ; 1121 |#define RSRC_SYSRECORD_CODE 423    
                             2751 ; 1122 |
                             2752 ; 1123 |//$FILENAME string_record_settings.src
                             2753 ; 1124 |#define RSRC_STRING_RECORD_SETTINGS 424    
                             2754 ; 1125 |//$FILENAME string_sample_rate.src
                             2755 ; 1126 |#define RSRC_STRING_SAMPLE_RATE 425    
                             2756 ; 1127 |//$FILENAME string_encoder.src
                             2757 ; 1128 |#define RSRC_STRING_ENCODER 426    
                             2758 ; 1129 |//$FILENAME string_adpcm.src
                             2759 ; 1130 |#define RSRC_STRING_ADPCM 427    
                             2760 ; 1131 |//$FILENAME string_msadpcm.src
                             2761 ; 1132 |#define RSRC_STRING_MSADPCM 428    
                             2762 ; 1133 |//$FILENAME string_imadpcm.src
                             2763 ; 1134 |#define RSRC_STRING_IMADPCM 429    
                             2764 ; 1135 |//$FILENAME string_pcm.src
                             2765 ; 1136 |#define RSRC_STRING_PCM 430    
                             2766 ; 1137 |//$FILENAME string_internal.src
                             2767 ; 1138 |#define RSRC_STRING_INTERNAL 431    
                             2768 ; 1139 |//$FILENAME string_external.src
                             2769 ; 1140 |#define RSRC_STRING_EXTERNAL 432    
                             2770 ; 1141 |//$FILENAME string_device.src
                             2771 ; 1142 |#define RSRC_STRING_DEVICE 433    
                             2772 ; 1143 |//$FILENAME string_source.src
                             2773 ; 1144 |#define RSRC_STRING_SOURCE 434    
                             2774 ; 1145 |//$FILENAME string_microphone.src
                             2775 ; 1146 |#define RSRC_STRING_MICROPHONE 435    
                             2776 ; 1147 |//$FILENAME string_linein.src
                             2777 ; 1148 |#define RSRC_STRING_LINEIN 436    
                             2778 ; 1149 |//$FILENAME string_bits.src
                             2779 ; 1150 |#define RSRC_STRING_BITS 437    
                             2780 ; 1151 |//$FILENAME string_4.src
                             2781 ; 1152 |#define RSRC_STRING_4 438    
                             2782 ; 1153 |//$FILENAME string_8.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2783 ; 1154 |#define RSRC_STRING_8 439    
                             2784 ; 1155 |//$FILENAME string_16.src
                             2785 ; 1156 |#define RSRC_STRING_16 440    
                             2786 ; 1157 |//$FILENAME string_24.src
                             2787 ; 1158 |#define RSRC_STRING_24 441    
                             2788 ; 1159 |//$FILENAME string_fm.src
                             2789 ; 1160 |#define RSRC_STRING_FM 442    
                             2790 ; 1161 |//$FILENAME string_mono.src
                             2791 ; 1162 |#define RSRC_STRING_MONO 443    
                             2792 ; 1163 |//$FILENAME string_stereo.src
                             2793 ; 1164 |#define RSRC_STRING_STEREO 444    
                             2794 ; 1165 |//$FILENAME string_8000hz.src
                             2795 ; 1166 |#define RSRC_STRING_8000HZ 445    
                             2796 ; 1167 |//$FILENAME string_11025hz.src
                             2797 ; 1168 |#define RSRC_STRING_11025HZ 446    
                             2798 ; 1169 |//$FILENAME string_16000hz.src
                             2799 ; 1170 |#define RSRC_STRING_16000HZ 447    
                             2800 ; 1171 |//$FILENAME string_22050hz.src
                             2801 ; 1172 |#define RSRC_STRING_22050HZ 448    
                             2802 ; 1173 |//$FILENAME string_32000hz.src
                             2803 ; 1174 |#define RSRC_STRING_32000HZ 449    
                             2804 ; 1175 |//$FILENAME string_44100hz.src
                             2805 ; 1176 |#define RSRC_STRING_44100HZ 450    
                             2806 ; 1177 |//$FILENAME string_48000hz.src
                             2807 ; 1178 |#define RSRC_STRING_48000HZ 451    
                             2808 ; 1179 |//$FILENAME string_channels.src
                             2809 ; 1180 |#define RSRC_STRING_CHANNELS 452    
                             2810 ; 1181 |//$FILENAME string_spaces.src
                             2811 ; 1182 |#define RSRC_STRING_SPACES 453    
                             2812 ; 1183 |//$FILENAME slider_bar.src
                             2813 ; 1184 |#define RSRC_SLIDER_BAR 454    
                             2814 ; 1185 |//$FILENAME slider_bar_inv.src
                             2815 ; 1186 |#define RSRC_SLIDER_BAR_INV 455    
                             2816 ; 1187 |//$FILENAME slider_track.src
                             2817 ; 1188 |#define RSRC_SLIDER_TRACK 456    
                             2818 ; 1189 |//$FILENAME string_no_files.src
                             2819 ; 1190 |#define RSRC_STRING_NO_FILES 457    
                             2820 ; 1191 |
                             2821 ; 1192 |/////////////////////////////////////////////////////////////////////
                             2822 ; 1193 |//  Time and Date Resource Strings
                             2823 ; 1194 |/////////////////////////////////////////////////////////////////////
                             2824 ; 1195 |//$FILENAME string_sunday.src
                             2825 ; 1196 |#define RSRC_STRING_SUNDAY 458    
                             2826 ; 1197 |//$FILENAME string_monday.src
                             2827 ; 1198 |#define RSRC_STRING_MONDAY 459    
                             2828 ; 1199 |//$FILENAME string_tuesday.src
                             2829 ; 1200 |#define RSRC_STRING_TUESDAY 460    
                             2830 ; 1201 |//$FILENAME string_wednesday.src
                             2831 ; 1202 |#define RSRC_STRING_WEDNESDAY 461    
                             2832 ; 1203 |//$FILENAME string_thursday.src
                             2833 ; 1204 |#define RSRC_STRING_THURSDAY 462    
                             2834 ; 1205 |//$FILENAME string_friday.src
                             2835 ; 1206 |#define RSRC_STRING_FRIDAY 463    
                             2836 ; 1207 |//$FILENAME string_saturday.src
                             2837 ; 1208 |#define RSRC_STRING_SATURDAY 464    
                             2838 ; 1209 |//$FILENAME string_am.src
                             2839 ; 1210 |#define RSRC_STRING_AM 465    
                             2840 ; 1211 |//$FILENAME string_pm.src
                             2841 ; 1212 |#define RSRC_STRING_PM 466    
                             2842 ; 1213 |//$FILENAME string_amclear.src
                             2843 ; 1214 |#define RSRC_STRING_AMCLEAR 467    
                             2844 ; 1215 |//$FILENAME string_slash.src
                             2845 ; 1216 |#define RSRC_STRING_SLASH 468    
                             2846 ; 1217 |//$FILENAME string_colon.src
                             2847 ; 1218 |#define RSRC_STRING_COLON 469    
                             2848 ; 1219 |//$FILENAME string_12hour.src
                             2849 ; 1220 |#define RSRC_STRING_12HOUR 470    
                             2850 ; 1221 |//$FILENAME string_24hour.src
                             2851 ; 1222 |#define RSRC_STRING_24HOUR 471    
                             2852 ; 1223 |//$FILENAME string_format.src
                             2853 ; 1224 |#define RSRC_STRING_FORMAT 472    
                             2854 ; 1225 |//$FILENAME string_mmddyyyy.src
                             2855 ; 1226 |#define RSRC_STRING_MMDDYYYY 473    
                             2856 ; 1227 |//$FILENAME string_ddmmyyyy.src
                             2857 ; 1228 |#define RSRC_STRING_DDMMYYYY 474    
                             2858 ; 1229 |//$FILENAME string_yyyymmdd.src
                             2859 ; 1230 |#define RSRC_STRING_YYYYMMDD 475    
                             2860 ; 1231 |//$FILENAME string_ok.src
                             2861 ; 1232 |#define RSRC_STRING_OK 476    
                             2862 ; 1233 |//$FILENAME string_cancel.src
                             2863 ; 1234 |#define RSRC_STRING_CANCEL 477    
                             2864 ; 1235 |//$FILENAME negative_sign.src
                             2865 ; 1236 |#define RSRC_NEGATIVE_SIGN 478    
                             2866 ; 1237 |//$FILENAME string_dec_pt5.src
                             2867 ; 1238 |#define RSRC_DEC_PT5_STRING 479    
                             2868 ; 1239 |//$FILENAME string_dec_pt0.src
                             2869 ; 1240 |#define RSRC_DEC_PT0_STRING 480    
                             2870 ; 1241 |//$FILENAME string_db.src
                             2871 ; 1242 |#define RSRC_DB_STRING 481    
                             2872 ; 1243 |//$FILENAME string_hz2.src
                             2873 ; 1244 |#define RSRC_HZ2_STRING 482    
                             2874 ; 1245 |
                             2875 ; 1246 |
                             2876 ; 1247 |//$FILENAME record_settings_menu_code_bank.src
                             2877 ; 1248 |#define RSRC_RECORD_SETTINGS_MENU_CODE_BANK 483    
                             2878 ; 1249 |//$FILENAME metadata_codebank.src
                             2879 ; 1250 |#define RSRC_METADATA_CODEBANK 484    
                             2880 ; 1251 |//$FILENAME mp3metadata_codebank.src
                             2881 ; 1252 |#define RSRC_MP3_METADATA_CODEBANK 485    
                             2882 ; 1253 |//$FILENAME wmametadata_codebank.src
                             2883 ; 1254 |#define RSRC_WMA_METADATA_CODEBANK 486    
                             2884 ; 1255 |//$FILENAME wavmetadata_codebank.src
                             2885 ; 1256 |#define RSRC_WAV_METADATA_CODEBANK 487    
                             2886 ; 1257 |//$FILENAME smvmetadata_codebank.src
                             2887 ; 1258 |#define RSRC_SMV_METADATA_CODEBANK 488    
                             2888 ; 1259 |//$FILENAME playlist2init_codebank.src
                             2889 ; 1260 |#define RSRC_PLAYLIST2INIT_CODEBANK 489    
                             2890 ; 1261 |
                             2891 ; 1262 |//$FILENAME delete_successful.src
                             2892 ; 1263 |#define RSRC_DELETE_SUCCESSFUL 490    
                             2893 ; 1264 |//$FILENAME delete_error.src
                             2894 ; 1265 |#define RSRC_DELETE_ERROR 491    
                             2895 ; 1266 |//$FILENAME lic_expired.src
                             2896 ; 1267 |#define RSRC_LIC_EXPIRED 492    
                             2897 ; 1268 |//$FILENAME id3v2_codebank.src
                             2898 ; 1269 |#define RSRC_ID3V2_CODEBANK 493    
                             2899 ; 1270 |//$FILENAME id3v2lyrics_codebank.src
                             2900 ; 1271 |#define RSRC_ID3V2_LYRICS_CODEBANK 494    
                             2901 ; 1272 |//$FILENAME lyrics3_codebank.src
                             2902 ; 1273 |#define RSRC_LYRICS3_CODEBANK 495    
                             2903 ; 1274 |//$FILENAME lrc_codebank.src
                             2904 ; 1275 |#define RSRC_LRC_CODEBANK 496    
                             2905 ; 1276 |//$FILENAME lyrics_api_codebank.src
                             2906 ; 1277 |#define RSRC_LYRICS_API_CODEBANK 497    
                             2907 ; 1278 |//$FILENAME wmalyrics_codebank.src
                             2908 ; 1279 |#define RSRC_WMA_LYRICS_CODEBANK 498    
                             2909 ; 1280 |//$FILENAME apicframe_codebank.src
                             2910 ; 1281 |#define RSRC_APIC_FRAME_CODEBANK 499    
                             2911 ; 1282 |
                             2912 ; 1283 |//$FILENAME exmediaerror1.src
                             2913 ; 1284 |#define RSRC_EXTERNAL_MEDIA_ERROR1 500    
                             2914 ; 1285 |//$FILENAME exmediaerror2.src
                             2915 ; 1286 |#define RSRC_EXTERNAL_MEDIA_ERROR2 501    
                             2916 ; 1287 |//$FILENAME inmediaerror1.src
                             2917 ; 1288 |#define RSRC_INTERNAL_MEDIA_ERROR1 502    
                             2918 ; 1289 |
                             2919 ; 1290 |//$FILENAME backlight_title.src
                             2920 ; 1291 |#define RSRC_BACKLIGHT_TITLE 503    
                             2921 ; 1292 |//$FILENAME backlight_state_on.src
                             2922 ; 1293 |#define RSRC_BACKLIGHT_STATE_ON 504    
                             2923 ; 1294 |//$FILENAME backlight_state_off.src
                             2924 ; 1295 |#define RSRC_BACKLIGHT_STATE_OFF 505    
                             2925 ; 1296 |//$FILENAME backlightmenu.src
                             2926 ; 1297 |#define RSRC_BACKLIGHT_MENU_CODE_BANK 506    
                             2927 ; 1298 |//$FILENAME string_backlight_menu.src
                             2928 ; 1299 |#define RSRC_STRING_BACKLIGHT_MENU 507    
                             2929 ; 1300 |
                             2930 ; 1301 |//$FILENAME enc_mp3mod.src
                             2931 ; 1302 |#define RSRC_ENC_MP3_MOD_CODE 508    
                             2932 ; 1303 |//$FILENAME enc_mp3p.src
                             2933 ; 1304 |#define RSRC_ENC_MP3P_CODE 509    
                             2934 ; 1305 |//$FILENAME enc_mp3x.src
                             2935 ; 1306 |#define RSRC_ENC_MP3X_CODE 510    
                             2936 ; 1307 |//$FILENAME enc_mp3y.src
                             2937 ; 1308 |#define RSRC_ENC_MP3Y_CODE 511    
                             2938 ; 1309 |//$FILENAME mp3_implementation.src
                             2939 ; 1310 |#define RSRC_MP3_IMPLEMENTATION 512    
                             2940 ; 1311 |//$FILENAME string_mp3.src
                             2941 ; 1312 |#define RSRC_STRING_MP3 513    
                             2942 ; 1313 |//$FILENAME string_all.src
                             2943 ; 1314 |#define RSRC_STRING_ALL 514    
                             2944 ; 1315 |
                             2945 ; 1316 |//$FILENAME mediastartup.src
                             2946 ; 1317 |#define RSRC_NANDMEDIAINIT 515    
                             2947 ; 1318 |#define RSRC_NANDMEDIAALLOCATE 0
                             2948 ; 1319 |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                             2949 ; 1320 |#define RSRC_NANDMEDIAGETMEDIATABLE RSRC_NANDMEDIAINIT
                             2950 ; 1321 |#define RSRC_NANDMEDIAGETINFO RSRC_NANDMEDIAINIT
                             2951 ; 1322 |#define RSRC_NANDMEDIAERASE 0
                             2952 ; 1323 |
                             2953 ; 1324 |//$FILENAME nanddatadriveinit.src
                             2954 ; 1325 |#define RSRC_NANDDATADRIVEINIT 516    
                             2955 ; 1326 |#define RSRC_NANDDATADRIVEGETINFO RSRC_NANDDATADRIVEREADSECTOR
                             2956 ; 1327 |#define RSRC_NANDDATADRIVESETINFO 0
                             2957 ; 1328 |//$FILENAME nanddatadrivereadsector.src
                             2958 ; 1329 |#define RSRC_NANDDATADRIVEREADSECTOR 517    
                             2959 ; 1330 |#define RSRC_NANDDATADRIVEWRITESECTOR RSRC_NANDDATADRIVEREADSECTOR
                             2960 ; 1331 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0
                             2961 ; 1332 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0
                             2962 ; 1333 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0
                             2963 ; 1334 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0
                             2964 ; 1335 |#define RSRC_NANDDATADRIVEERASE 0
                             2965 ; 1336 |#define RSRC_NANDDATADRIVEFLUSH RSRC_NANDDATADRIVEREADSECTOR
                             2966 ; 1337 |
                             2967 ; 1338 |#define RSRC_NANDSYSTEMDRIVEINIT RSRC_NANDMEDIAINIT
                             2968 ; 1339 |#define RSRC_NANDSYSTEMDRIVEGETINFO RSRC_NANDMEDIAINIT
                             2969 ; 1340 |#define RSRC_NANDSYSTEMDRIVESETINFO 0
                             2970 ; 1341 |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0
                             2971 ; 1342 |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0
                             2972 ; 1343 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0
                             2973 ; 1344 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0
                             2974 ; 1345 |#define RSRC_NANDSYSTEMDRIVEERASE 0
                             2975 ; 1346 |#define RSRC_NANDSYSTEMDRIVEFLUSH 0
                             2976 ; 1347 |
                             2977 ; 1348 |//$FILENAME vbr_codebank.src
                             2978 ; 1349 |#define RSRC_VBR_CODEBANK 518    
                             2979 ; 1350 |
                             2980 ; 1351 |//$FILENAME string_recordtest_menu.src
                             2981 ; 1352 |#define RSRC_STRING_RECORDTEST_MENU 519    
                             2982 ; 1353 |//$FILENAME string_recordtest_duration.src
                             2983 ; 1354 |#define RSRC_STRING_DURATION 520    
                             2984 ; 1355 |//$FILENAME string_recordtest_time5.src
                             2985 ; 1356 |#define RSRC_STRING_TIME5 521    
                             2986 ; 1357 |//$FILENAME string_recordtest_time10.src
                             2987 ; 1358 |#define RSRC_STRING_TIME10 522    
                             2988 ; 1359 |//$FILENAME string_recordtest_time30.src
                             2989 ; 1360 |#define RSRC_STRING_TIME30 523    
                             2990 ; 1361 |//$FILENAME string_recordtest_time60.src
                             2991 ; 1362 |#define RSRC_STRING_TIME60 524    
                             2992 ; 1363 |//$FILENAME string_recordtest_time300.src
                             2993 ; 1364 |#define RSRC_STRING_TIME300 525    
                             2994 ; 1365 |//$FILENAME string_recordtest_time600.src
                             2995 ; 1366 |#define RSRC_STRING_TIME600 526    
                             2996 ; 1367 |
                             2997 ; 1368 |//$FILENAME test_title.src
                             2998 ; 1369 |#define RSRC_TEST_TITLE 527    
                             2999 ; 1370 |//$FILENAME testmenu.src
                             3000 ; 1371 |#define RSRC_TEST_MENU_CODE_BANK 528    
                             3001 ; 1372 |
                             3002 ; 1373 |
                             3003 ; 1374 |//$FILENAME mmcmediastartup.src
                             3004 ; 1375 |#define RSRC_MMCDATADRIVEINIT 529    
                             3005 ; 1376 |#define RSRC_MMCMEDIAALLOCATE RSRC_MMCDATADRIVEINIT
                             3006 ; 1377 |#define RSRC_MMCMEDIADISCOVERALLOCATION RSRC_MMCDATADRIVEINIT
                             3007 ; 1378 |//$FILENAME mmcinfo.src
                             3008 ; 1379 |#define RSRC_MMCMEDIAGETINFO 530    
                             3009 ; 1380 |#define RSRC_MMCMEDIAGETMEDIATABLE RSRC_MMCMEDIAGETINFO
                             3010 ; 1381 |//$FILENAME mmcerase.src
                             3011 ; 1382 |#define RSRC_MMCMEDIAERASE 531    
                             3012 ; 1383 |
                             3013 ; 1384 |
                             3014 ; 1385 |#define RSRC_MMCDATADRIVEFLUSH RSRC_MMCDATADRIVEINIT
                             3015 ; 1386 |
                             3016 ; 1387 |//$FILENAME mmcenumerate.src
                             3017 ; 1388 |#define RSRC_MMCENUMERATE 532    
                             3018 ; 1389 |//$FILENAME mmcresetdevice.src
                             3019 ; 1390 |#define RSRC_MMC_RESETDEVICE 533    
                             3020 ; 1391 |//$FILENAME mmcprocesscsd.src
                             3021 ; 1392 |#define RSRC_MMC_PROCESSCSD 534    
                             3022 ; 1393 |//$FILENAME mmcprocesscid.src
                             3023 ; 1394 |#define RSRC_MMC_PROCESSCID 535    
                             3024 ; 1395 |//$FILENAME mmcprocesscid2.src
                             3025 ; 1396 |#define RSRC_FUNCLET_MMCPROCESSCID2 536    
                             3026 ; 1397 |//$FILENAME mmcdetectpresence.src
                             3027 ; 1398 |#define RSRC_MMC_DETECTPRESENCE 537    
                             3028 ; 1399 |//$FILENAME mmcserialnumberinit.src
                             3029 ; 1400 |#define RSRC_MMCSERIALNUMBERINIT 538    
                             3030 ; 1401 |//$FILENAME mmccheckwriteprotect.src
                             3031 ; 1402 |#define RSRC_MMC_CHECKWRITEPROTECT 539    
                             3032 ; 1403 |
                             3033 ; 1404 |//$FILENAME mmcread.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3034 ; 1405 |#define RSRC_MMCDATADRIVEREADSECTOR 540    
                             3035 ; 1406 |//$FILENAME mmcmediainit.src
                             3036 ; 1407 |#define RSRC_MMCMEDIAINIT 541    
                             3037 ; 1408 |//$FILENAME mmcdatadriveinfo.src
                             3038 ; 1409 |#define RSRC_MMCDATADRIVESETINFO 542    
                             3039 ; 1410 |#define RSRC_MMCDATADRIVEGETINFO RSRC_MMCDATADRIVESETINFO
                             3040 ; 1411 |//$FILENAME mmcdatadriveerase.src
                             3041 ; 1412 |#define RSRC_MMCDATADRIVEERASE 543    
                             3042 ; 1413 |
                             3043 ; 1414 |#define RSRC_MMCDATADRIVEWRITESECTOR RSRC_MMCDATADRIVEREADSECTOR
                             3044 ; 1415 |#define RSRC_MMCDATADRIVEMULTIWRITESETUP RSRC_MMCDATADRIVEWRITESECTOR
                             3045 ; 1416 |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR RSRC_MMCDATADRIVEWRITESECTOR
                             3046 ; 1417 |
                             3047 ; 1418 |
                             3048 ; 1419 |/////////////////////////////////////////////////////////////////////////////////
                             3049 ; 1420 |//  File system
                             3050 ; 1421 |/////////////////////////////////////////////////////////////////////////////////
                             3051 ; 1422 |//$FILENAME arrangefilename.src
                             3052 ; 1423 |#define RSRC_FUNCLET_ARRANGEFILENAME 544    
                             3053 ; 1424 |//$FILENAME clearcluster.src
                             3054 ; 1425 |#define RSRC_FUNCLET_CLEARCLUSTER 545    
                             3055 ; 1426 |//$FILENAME createdirectory.src
                             3056 ; 1427 |#define RSRC_FUNCLET_CREATEDIRECTORY 546    
                             3057 ; 1428 |//$FILENAME deletecontent.src
                             3058 ; 1429 |#define RSRC_FUNCLET_DELETECONTENT 547    
                             3059 ; 1430 |//$FILENAME deleterecord.src
                             3060 ; 1431 |#define RSRC_FUNCLET_DELETERECORD 548    
                             3061 ; 1432 |//$FILENAME fastopen.src
                             3062 ; 1433 |#define RSRC_FUNCLET_FASTOPEN 549    
                             3063 ; 1434 |//$FILENAME fcreate.src
                             3064 ; 1435 |#define RSRC_FUNCLET_FCREATE 550    
                             3065 ; 1436 |//$FILENAME filegetattrib.src
                             3066 ; 1437 |#define RSRC_FUNCLET_FILEGETATTRIB 551    
                             3067 ; 1438 |//$FILENAME filegetdate.src
                             3068 ; 1439 |#define RSRC_FUNCLET_FILEGETDATE 552    
                             3069 ; 1440 |//$FILENAME filesetattrib.src
                             3070 ; 1441 |#define RSRC_FUNCLET_FILESETATTRIB 553    
                             3071 ; 1442 |//$FILENAME filesetdate.src
                             3072 ; 1443 |#define RSRC_FUNCLET_FILESETDATE 554    
                             3073 ; 1444 |//$FILENAME fsinit.src
                             3074 ; 1445 |#define RSRC_FUNCLET_FSINIT 555    
                             3075 ; 1446 |//$FILENAME fsshutdown.src
                             3076 ; 1447 |#define RSRC_FUNCLET_FSSHUTDOWN 556    
                             3077 ; 1448 |//$FILENAME readdevicerecord.src
                             3078 ; 1449 |#define RSRC_FUNCLET_READDEVICERECORD 557    
                             3079 ; 1450 |//$FILENAME checkspaceinrootdir.src
                             3080 ; 1451 |#define RSRC_FUNCLET_CHECKSPACEINROOTDIR 558    
                             3081 ; 1452 |//$FILENAME setcwdhandle.src
                             3082 ; 1453 |#define RSRC_FUNCLET_SETCWDHANDLE 559    
                             3083 ; 1454 |//$FILENAME fsdriveinit.src
                             3084 ; 1455 |#define RSRC_FUNCLET_FSDRIVEINIT 560    
                             3085 ; 1456 |//$FILENAME fsclearBuf.src
                             3086 ; 1457 |#define RSRC_FUNCLET_FSCLEARDRIVEBUF 561    
                             3087 ; 1458 |//RSRC_FUNCLET_TOTALFREECLUSTER    equ      328    ;$FILENAME totalfreecluster.src
                             3088 ; 1459 |//RSRC_FUNCLET_TOTALFREECLUSTERFAT16    equ      328    ;$FILENAME totalfreeclusterfat16.src
                             3089 ; 1460 |//$FILENAME fgetfasthandle.src
                             3090 ; 1461 |#define RSRC_FUNCLET_FGETFASTHANDLE 562    
                             3091 ; 1462 |//$FILENAME ishandlewriteallocated.src
                             3092 ; 1463 |#define RSRC_FUNCLET_ISHANDLEWRITEALLOCATED 563    
                             3093 ; 1464 |//$FILENAME isfileopen.src
                             3094 ; 1465 |#define RSRC_FUNCLET_ISFILEOPEN 564    
                             3095 ; 1466 |//$FILENAME iscurrworkdir.src
                             3096 ; 1467 |#define RSRC_FUNCLET_ISCURRWORKDIR 565    
                             3097 ; 1468 |//$FILENAME chdir.src
                             3098 ; 1469 |#define RSRC_FUNCLET_CHDIR 566    
                             3099 ; 1470 |//$FILENAME chdirFromOffset.src
                             3100 ; 1471 |#define RSRC_FUNCLET_CHDIR_FROM_OFFSET 567    
                             3101 ; 1472 |//$FILENAME deletetree.src
                             3102 ; 1473 |#define RSRC_FUNCLET_DELETETREE 568    
                             3103 ; 1474 |//$FILENAME deleteallrecords.src
                             3104 ; 1475 |#define RSRC_FUNCLET_DELETEALLRECORDS 569    
                             3105 ; 1476 |//$FILENAME cleardata.src
                             3106 ; 1477 |#define RSRC_FUNCLET_CLEARDATA 570    
                             3107 ; 1478 |//$FILENAME changetolowleveldir.src
                             3108 ; 1479 |#define RSRC_FUNCLET_CHANGETOLOWLEVELDIR 571    
                             3109 ; 1480 |//$FILENAME getrecordnumber.src
                             3110 ; 1481 |#define RSRC_FUNCLET_GETRECORDNUMBER 572    
                             3111 ; 1482 |//$FILENAME fileremove.src
                             3112 ; 1483 |#define RSRC_FUNCLET_FILEREMOVE 573    
                             3113 ; 1484 |//$FILENAME charactersearch.src
                             3114 ; 1485 |#define RSRC_FUNCLET_CHARACTERSEARCH 574    
                             3115 ; 1486 |//$FILENAME stringcompare.src
                             3116 ; 1487 |#define RSRC_FUNCLET_STRINGCOMPARE 575    
                             3117 ; 1488 |//$FILENAME fopenw.src
                             3118 ; 1489 |#define RSRC_FUNCLET_FOPENW 576    
                             3119 ; 1490 |//$FILENAME fremove.src
                             3120 ; 1491 |#define RSRC_FUNCLET_FREMOVE 577    
                             3121 ; 1492 |//$FILENAME fremovew.src
                             3122 ; 1493 |#define RSRC_FUNCLET_FREMOVEW 578    
                             3123 ; 1494 |//$FILENAME mkdir.src
                             3124 ; 1495 |#define RSRC_FUNCLET_MKDIR 579    
                             3125 ; 1496 |//$FILENAME mkdirw.src
                             3126 ; 1497 |#define RSRC_FUNCLET_MKDIRW 580    
                             3127 ; 1498 |//$FILENAME rmdir.src
                             3128 ; 1499 |#define RSRC_FUNCLET_RMDIR 581    
                             3129 ; 1500 |//$FILENAME rmdirw.src
                             3130 ; 1501 |#define RSRC_FUNCLET_RMDIRW 582    
                             3131 ; 1502 |//$FILENAME fgetc.src
                             3132 ; 1503 |#define RSRC_FUNCLET_FGETC 583    
                             3133 ; 1504 |//$FILENAME fgets.src
                             3134 ; 1505 |#define RSRC_FUNCLET_FGETS 584    
                             3135 ; 1506 |//$FILENAME fputc.src
                             3136 ; 1507 |#define RSRC_FUNCLET_FPUTC 585    
                             3137 ; 1508 |//$FILENAME fputs.src
                             3138 ; 1509 |#define RSRC_FUNCLET_FPUTS 586    
                             3139 ; 1510 |//$FILENAME arrangelongfilename.src
                             3140 ; 1511 |#define RSRC_FUNCLET_ARRANGELONGFILENAME 587    
                             3141 ; 1512 |//$FILENAME convert_itoa.src
                             3142 ; 1513 |#define RSRC_FUNCLET_CONVERT_ITOA 588    
                             3143 ; 1514 |//$FILENAME createdirrecord.src
                             3144 ; 1515 |#define RSRC_FUNCLET_CREATEDIRRECORD 589    
                             3145 ; 1516 |//$FILENAME chksum.src
                             3146 ; 1517 |#define RSRC_FUNCLET_CHKSUM 590    
                             3147 ; 1518 |//$FILENAME createshortdirrecord.src
                             3148 ; 1519 |#define RSRC_FUNCLET_CREATESHORTDIRRECORD 591    
                             3149 ; 1520 |//$FILENAME discardtrailigperiodsucs3.src
                             3150 ; 1521 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSUCS3 592    
                             3151 ; 1522 |//$FILENAME discardtrailigperiodsw.src
                             3152 ; 1523 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSW 593    
                             3153 ; 1524 |//$FILENAME extractfilenamew.src
                             3154 ; 1525 |#define RSRC_FUNCLET_EXTRACTFILENAMEW 594    
                             3155 ; 1526 |//$FILENAME extractpathw.src
                             3156 ; 1527 |#define RSRC_FUNCLET_EXTRACTPATHW 595    
                             3157 ; 1528 |//$FILENAME findfreerecord.src
                             3158 ; 1529 |#define RSRC_FUNCLET_FINDFREERECORD 596    
                             3159 ; 1530 |//$FILENAME getnamew.src
                             3160 ; 1531 |#define RSRC_FUNCLET_GETNAMEW 597    
                             3161 ; 1532 |//$FILENAME isdirectoryempty.src
                             3162 ; 1533 |#define RSRC_FUNCLET_ISDIRECTORYEMPTY 598    
                             3163 ; 1534 |//$FILENAME isshortnamevalid.src
                             3164 ; 1535 |#define RSRC_FUNCLET_ISSHORTNAMEVALID 599    
                             3165 ; 1536 |//$FILENAME longdirmatch.src
                             3166 ; 1537 |#define RSRC_FUNCLET_LONGDIRMATCH 600    
                             3167 ; 1538 |//$FILENAME unicodetooem.src
                             3168 ; 1539 |#define RSRC_FUNCLET_UNICODETOOEM 601    
                             3169 ; 1540 |//$FILENAME matchdirrecordw.src
                             3170 ; 1541 |#define RSRC_FUNCLET_MATCHDIRRECORDW 602    
                             3171 ; 1542 |//$FILENAME setcwd.src
                             3172 ; 1543 |#define RSRC_FUNCLET_SETCWD 603    
                             3173 ; 1544 |//$FILENAME setshortfilename.src
                             3174 ; 1545 |#define RSRC_FUNCLET_SETSHORTFILENAME 604    
                             3175 ; 1546 |//$FILENAME generatefilenametail.src
                             3176 ; 1547 |#define RSRC_FUNCLET_GENERATEFILENAMETAIL 605    
                             3177 ; 1548 |//$FILENAME dbcstounicode.src
                             3178 ; 1549 |#define RSRC_FUNCLET_DBCSTOUNICODE 606    
                             3179 ; 1550 |//$FILENAME strcpy.src
                             3180 ; 1551 |#define RSRC_FUNCLET_STRCPY 607    
                             3181 ; 1552 |//$FILENAME strcpyw.src
                             3182 ; 1553 |#define RSRC_FUNCLET_STRCPYW 608    
                             3183 ; 1554 |//$FILENAME strlengthw.src
                             3184 ; 1555 |#define RSRC_FUNCLET_STRLENGTHW 609    
                             3185 ; 1556 |//$FILENAME filesystempresent.src
                             3186 ; 1557 |#define RSRC_FUNCLET_FILESYSTEMPRESENT 610    
                             3187 ; 1558 |//$FILENAME DataDriveInit.src
                             3188 ; 1559 |#define RSRC_FUNCLET_DATADRIVEINIT 611    
                             3189 ; 1560 |//$FILENAME FSGetDataDrivePbsLocation.src
                             3190 ; 1561 |#define RSRC_FUNCLET_FSGETDATADRIVEPBSLOCATION 612    
                             3191 ; 1562 |//$FILENAME FSPartitionEntryCopy.src
                             3192 ; 1563 |#define RSRC_FUNCLET_FSPARTITIONENTRYCOPYFSDD 613    
                             3193 ; 1564 |//$FILENAME DataDriveGetSize.src
                             3194 ; 1565 |#define RSRC_FUNCLET_DATADRIVEGETSIZE 614    
                             3195 ; 1566 |//$FILENAME ConstructLongFileName.src
                             3196 ; 1567 |#define RSRC_FUNCLET_CONSTRUCTLONGFILENAME 615    
                             3197 ; 1568 |//$FILENAME strcpyucs3_2.src
                             3198 ; 1569 |#define RSRC_FUNCLET_STRCPYUCS3_2 616    
                             3199 ; 1570 |//$FILENAME getvolumelabel.src
                             3200 ; 1571 |#define RSRC_FUNCLET_GETVOLUMELABEL 617    
                             3201 ; 1572 |//$FILENAME setvolumelabel.src
                             3202 ; 1573 |#define RSRC_FUNCLET_SETVOLUMELABEL 618    
                             3203 ; 1574 |//$FILENAME disk_full.src
                             3204 ; 1575 |#define RSRC_DISK_FULL 619    
                             3205 ; 1576 |//$FILENAME chkdskstartup.src
                             3206 ; 1577 |#define RSRC_CHECKDISK 620    
                             3207 ; 1578 |//$FILENAME chkdskstartupy.src
                             3208 ; 1579 |#define RSRC_CHKDSK_YMEM 621    
                             3209 ; 1580 |//$FILENAME low_level_pwr_line1.src
                             3210 ; 1581 |#define RSRC_LOW_PWR_EXT_DEV_LINE1 622    
                             3211 ; 1582 |//$FILENAME low_level_pwr_line2.src
                             3212 ; 1583 |#define RSRC_LOW_PWR_EXT_DEV_LINE2 623    
                             3213 ; 1584 |//$FILENAME string_bit_rate.src
                             3214 ; 1585 |#define RSRC_STRING_BIT_RATE 624    
                             3215 ; 1586 |//$FILENAME string_96000hz.src
                             3216 ; 1587 |#define RSRC_STRING_96KBPS 625    
                             3217 ; 1588 |//$FILENAME string_112000hz.src
                             3218 ; 1589 |#define RSRC_STRING_112KBPS 626    
                             3219 ; 1590 |//$FILENAME string_128000hz.src
                             3220 ; 1591 |#define RSRC_STRING_128KBPS 627    
                             3221 ; 1592 |//$FILENAME string_160000hz.src
                             3222 ; 1593 |#define RSRC_STRING_160KBPS 628    
                             3223 ; 1594 |//$FILENAME string_192000hz.src
                             3224 ; 1595 |#define RSRC_STRING_192KBPS 629    
                             3225 ; 1596 |//$FILENAME string_224000hz.src
                             3226 ; 1597 |#define RSRC_STRING_224KBPS 630    
                             3227 ; 1598 |//$FILENAME string_256000hz.src
                             3228 ; 1599 |#define RSRC_STRING_256KBPS 631    
                             3229 ; 1600 |//$FILENAME string_320000hz.src
                             3230 ; 1601 |#define RSRC_STRING_320KBPS 632    
                             3231 ; 1602 |//$FILENAME string_hz.src
                             3232 ; 1603 |#define RSRC_STRING_HZ 633    
                             3233 ; 1604 |//$FILENAME EncCommonp.src
                             3234 ; 1605 |#define RSRC_ENCODERCOMMON_P_CODE 634    
                             3235 ; 1606 |//$FILENAME adc_adcx.src
                             3236 ; 1607 |#define RSRC_ADC_ADCX_CODE 635    
                             3237 ; 1608 |//$FILENAME adc_adcy.src
                             3238 ; 1609 |#define RSRC_ADC_ADCY_CODE 636    
                             3239 ; 1610 |//$FILENAME Funclet_encodercommon.src
                             3240 ; 1611 |#define RSRC_FUNCLET_LOADENCODERCOMMON 637    
                             3241 ; 1612 |//$FILENAME string_album.src
                             3242 ; 1613 |#define RSRC_STRING_ALBUM 638    
                             3243 ; 1614 |//$FILENAME string_encoder_song.src
                             3244 ; 1615 |#define RSRC_STRING_SONG 639    
                             3245 ; 1616 |//$FILENAME string_mode.src
                             3246 ; 1617 |#define RSRC_STRING_MODE 640    
                             3247 ; 1618 |
                             3248 ; 1619 |//////////////////////////////////////////////////////////////////////////////////
                             3249 ; 1620 |// display related
                             3250 ; 1621 |//////////////////////////////////////////////////////////////////////////////////
                             3251 ; 1622 |//$FILENAME Funclet_HalDisplayInit.src
                             3252 ; 1623 |#define RSRC_FUNCLET_HAL_DISPLAY_INIT 641    
                             3253 ; 1624 |//$FILENAME Funclet_SalDisplayInit.src
                             3254 ; 1625 |#define RSRC_FUNCLET_SAL_DISPLAY_INIT 642    
                             3255 ; 1626 |//$FILENAME Funclet_SalHandleMessage.src
                             3256 ; 1627 |#define RSRC_FUNCLET_SAL_HANDLE_MSG 643    
                             3257 ; 1628 |//$FILENAME Funclet_FixBitmapHeader.src
                             3258 ; 1629 |#define RSRC_FUNCLET_FIXBITMAPHEADER 644    
                             3259 ; 1630 |//$FILENAME Funclet_BitmapReadHeader.src
                             3260 ; 1631 |#define RSRC_FUNCLET_BITMAPREADHEADER 645    
                             3261 ; 1632 |//$FILENAME Funclet_BitmapReadPalette.src
                             3262 ; 1633 |#define RSRC_FUNCLET_BITMAPREADPALETTE 646    
                             3263 ; 1634 |//$FILENAME Funclet_BitmapReadBitMask.src
                             3264 ; 1635 |#define RSRC_FUNCLET_BITMAPREADBITMASK 647    
                             3265 ; 1636 |//$FILENAME Funclet_BitmapPrintNonPalette.src
                             3266 ; 1637 |#define RSRC_FUNCLET_BITMAPPRINTNONPALETTE 648    
                             3267 ; 1638 |//$FILENAME Funclet_BitmapPrintPalette.src
                             3268 ; 1639 |#define RSRC_FUNCLET_BITMAPPRINTPALETTE 649    
                             3269 ; 1640 |//$FILENAME Funclet_DisplayPrintBitmapFile.src
                             3270 ; 1641 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPFILE 650    
                             3271 ; 1642 |//$FILENAME Funclet_DisplayPrintBitmapResource.src
                             3272 ; 1643 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPRESOURCE 651    
                             3273 ; 1644 |
                             3274 ; 1645 |//////////////////////////////////////////////////////////////////////////////////
                             3275 ; 1646 |//WMDRM Related
                             3276 ; 1647 |//////////////////////////////////////////////////////////////////////////////////
                             3277 ; 1648 |//$FILENAME legacy_decryptcontentkey.src
                             3278 ; 1649 |#define RSRC_FUNCLET_LEGACY_DECRYPTCONTENTKEY 652    
                             3279 ; 1650 |//$FILENAME drm_bbx_legacycipherkeysetup.src
                             3280 ; 1651 |#define RSRC_FUNCLET_DRM_BBX_LEGACYCIPHERKEYSETUP 653    
                             3281 ; 1652 |//$FILENAME drm_bbx_initialize.src
                             3282 ; 1653 |#define RSRC_FUNCLET_DRM_BBX_INITIALIZE 654    
                             3283 ; 1654 |//$FILENAME drm_bbx_canbind.src
                             3284 ; 1655 |#define RSRC_FUNCLET_DRM_BBX_CANBIND 655    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3285 ; 1656 |//$FILENAME verifychecksum.src
                             3286 ; 1657 |#define RSRC_FUNCLET_VERIFYCHECKSUM 656    
                             3287 ; 1658 |//$FILENAME drm_b64_encodew.src
                             3288 ; 1659 |#define RSRC_FUNCLET_DRM_B64_ENCODEW 657    
                             3289 ; 1660 |//$FILENAME _performactions.src
                             3290 ; 1661 |#define RSRC_FUNCLET__PERFORMACTIONS 658    
                             3291 ; 1662 |//$FILENAME _processendofchain.src
                             3292 ; 1663 |#define RSRC_FUNCLET__PROCESSENDOFCHAIN 659    
                             3293 ; 1664 |//$FILENAME drmcrt_iswxdigit.src
                             3294 ; 1665 |#define RSRC_FUNCLET_DRMCRT_ISWXDIGIT 660    
                             3295 ; 1666 |//$FILENAME drmcrt_towlower.src
                             3296 ; 1667 |#define RSRC_FUNCLET_DRMCRT_TOWLOWER 661    
                             3297 ; 1668 |//$FILENAME drmcrt_wcslen.src
                             3298 ; 1669 |#define RSRC_FUNCLET_DRMCRT_WCSLEN 662    
                             3299 ; 1670 |//$FILENAME drmcrt_wcsncpy.src
                             3300 ; 1671 |#define RSRC_FUNCLET_DRMCRT_WCSNCPY 663    
                             3301 ; 1672 |//$FILENAME drmcrt_memmove.src
                             3302 ; 1673 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE 664    
                             3303 ; 1674 |//$FILENAME performoperation_part1.src
                             3304 ; 1675 |#define RSRC_FUNCLET_PERFORMOPERATION_PART1 665    
                             3305 ; 1676 |//$FILENAME performoperation_part2.src
                             3306 ; 1677 |#define RSRC_FUNCLET_PERFORMOPERATION_PART2 666    
                             3307 ; 1678 |//$FILENAME performoperation_part3.src
                             3308 ; 1679 |#define RSRC_FUNCLET_PERFORMOPERATION_PART3 667    
                             3309 ; 1680 |//$FILENAME performoperation_part4.src
                             3310 ; 1681 |#define RSRC_FUNCLET_PERFORMOPERATION_PART4 668    
                             3311 ; 1682 |//$FILENAME performoperation_part5.src
                             3312 ; 1683 |#define RSRC_FUNCLET_PERFORMOPERATION_PART5 669    
                             3313 ; 1684 |//$FILENAME performoperation_part6.src
                             3314 ; 1685 |#define RSRC_FUNCLET_PERFORMOPERATION_PART6 670    
                             3315 ; 1686 |//$FILENAME isvalidfunction.src
                             3316 ; 1687 |#define RSRC_FUNCLET_ISVALIDFUNCTION 671    
                             3317 ; 1688 |//$FILENAME functiongetvalue.src
                             3318 ; 1689 |#define RSRC_FUNCLET_FUNCTIONGETVALUE 672    
                             3319 ; 1690 |//$FILENAME globalsetvariable.src
                             3320 ; 1691 |#define RSRC_FUNCLET_GLOBALSETVARIABLE 673    
                             3321 ; 1692 |//$FILENAME variabledrmkgetorset.src
                             3322 ; 1693 |#define RSRC_FUNCLET_VARIABLEDRMKGETORSET 674    
                             3323 ; 1694 |//$FILENAME variabledrmgetorset.src
                             3324 ; 1695 |#define RSRC_FUNCLET_VARIABLEDRMGETORSET 675    
                             3325 ; 1696 |//$FILENAME variableappgetorset.src
                             3326 ; 1697 |#define RSRC_FUNCLET_VARIABLEAPPGETORSET 676    
                             3327 ; 1698 |//$FILENAME variablelicensegetorset.src
                             3328 ; 1699 |#define RSRC_FUNCLET_VARIABLELICENSEGETORSET 677    
                             3329 ; 1700 |//$FILENAME variablecontentgetorset.src
                             3330 ; 1701 |#define RSRC_FUNCLET_VARIABLECONTENTGETORSET 678    
                             3331 ; 1702 |//$FILENAME variabledevicegetorset.src
                             3332 ; 1703 |#define RSRC_FUNCLET_VARIABLEDEVICEGETORSET 679    
                             3333 ; 1704 |//$FILENAME variablepmlicensegetorset.src
                             3334 ; 1705 |#define RSRC_FUNCLET_VARIABLEPMLICENSEGETORSET 680    
                             3335 ; 1706 |//$FILENAME drm_hds_createstore.src
                             3336 ; 1707 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE 681    
                             3337 ; 1708 |//$FILENAME drm_hds_init.src
                             3338 ; 1709 |#define RSRC_FUNCLET_DRM_HDS_INIT 682    
                             3339 ; 1710 |//$FILENAME drm_hds_uninit.src
                             3340 ; 1711 |#define RSRC_FUNCLET_DRM_HDS_UNINIT 683    
                             3341 ; 1712 |//$FILENAME drm_hds_openstore.src
                             3342 ; 1713 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE 684    
                             3343 ; 1714 |//$FILENAME drm_hds_deleteslot.src
                             3344 ; 1715 |#define RSRC_FUNCLET_DRM_HDS_DELETESLOT 685    
                             3345 ; 1716 |//$FILENAME drm_hds_slotresize.src
                             3346 ; 1717 |#define RSRC_FUNCLET_DRM_HDS_SLOTRESIZE 686    
                             3347 ; 1718 |//$FILENAME drm_hds_initslotenum.src
                             3348 ; 1719 |#define RSRC_FUNCLET_DRM_HDS_INITSLOTENUM 687    
                             3349 ; 1720 |//$FILENAME drm_hds_cleanupstore.src
                             3350 ; 1721 |#define RSRC_FUNCLET_DRM_HDS_CLEANUPSTORE 688    
                             3351 ; 1722 |//$FILENAME _hdscopyslot_child2child.src
                             3352 ; 1723 |#define RSRC_FUNCLET__HDSCOPYSLOT_CHILD2CHILD 689    
                             3353 ; 1724 |//$FILENAME _hdscopychildpayload.src
                             3354 ; 1725 |#define RSRC_FUNCLET__HDSCOPYCHILDPAYLOAD 690    
                             3355 ; 1726 |//$FILENAME _hdsdefragmentfile.src
                             3356 ; 1727 |#define RSRC_FUNCLET__HDSDEFRAGMENTFILE 691    
                             3357 ; 1728 |//$FILENAME _hdscleanupnamespace.src
                             3358 ; 1729 |#define RSRC_FUNCLET__HDSCLEANUPNAMESPACE 692    
                             3359 ; 1730 |//$FILENAME _hdscleanupstore.src
                             3360 ; 1731 |#define RSRC_FUNCLET__HDSCLEANUPSTORE 693    
                             3361 ; 1732 |//$FILENAME drm_lst_clean.src
                             3362 ; 1733 |#define RSRC_FUNCLET_DRM_LST_CLEAN 694    
                             3363 ; 1734 |//$FILENAME _hdslocatefreeblockforslot.src
                             3364 ; 1735 |#define RSRC_FUNCLET__HDSLOCATEFREEBLOCKFORSLOT 695    
                             3365 ; 1736 |//$FILENAME _hdslockblock2deleteslot.src
                             3366 ; 1737 |#define RSRC_FUNCLET__HDSLOCKBLOCK2DELETESLOT 696    
                             3367 ; 1738 |//$FILENAME _hdsunlockblock2deleteslot.src
                             3368 ; 1739 |#define RSRC_FUNCLET__HDSUNLOCKBLOCK2DELETESLOT 697    
                             3369 ; 1740 |//$FILENAME _hdscreatenamespace.src
                             3370 ; 1741 |#define RSRC_FUNCLET__HDSCREATENAMESPACE 698    
                             3371 ; 1742 |//$FILENAME _hdsfilepos2blocknum.src
                             3372 ; 1743 |#define RSRC_FUNCLET__HDSFILEPOS2BLOCKNUM 699    
                             3373 ; 1744 |//$FILENAME _writesrn.src
                             3374 ; 1745 |#define RSRC_FUNCLET__WRITESRN 700    
                             3375 ; 1746 |//$FILENAME _writecommonblockheader.src
                             3376 ; 1747 |#define RSRC_FUNCLET__WRITECOMMONBLOCKHEADER 701    
                             3377 ; 1748 |//$FILENAME _writechildblockheader.src
                             3378 ; 1749 |#define RSRC_FUNCLET__WRITECHILDBLOCKHEADER 702    
                             3379 ; 1750 |//$FILENAME _readdatablockheader.src
                             3380 ; 1751 |#define RSRC_FUNCLET__READDATABLOCKHEADER 703    
                             3381 ; 1752 |//$FILENAME _writedatablockheader.src
                             3382 ; 1753 |#define RSRC_FUNCLET__WRITEDATABLOCKHEADER 704    
                             3383 ; 1754 |//$FILENAME _hdsexpandstore.src
                             3384 ; 1755 |#define RSRC_FUNCLET__HDSEXPANDSTORE 705    
                             3385 ; 1756 |//$FILENAME _hdsallocblock.src
                             3386 ; 1757 |#define RSRC_FUNCLET__HDSALLOCBLOCK 706    
                             3387 ; 1758 |//$FILENAME _hdsfreeblock.src
                             3388 ; 1759 |#define RSRC_FUNCLET__HDSFREEBLOCK 707    
                             3389 ; 1760 |//$FILENAME _hdscreateoversizedslot.src
                             3390 ; 1761 |#define RSRC_FUNCLET__HDSCREATEOVERSIZEDSLOT 708    
                             3391 ; 1762 |//$FILENAME _hdsallocslotinfile.src
                             3392 ; 1763 |#define RSRC_FUNCLET__HDSALLOCSLOTINFILE 709    
                             3393 ; 1764 |//$FILENAME _hdswriteblockhdr.src
                             3394 ; 1765 |#define RSRC_FUNCLET__HDSWRITEBLOCKHDR 710    
                             3395 ; 1766 |//$FILENAME _hdsadjustchildpayload.src
                             3396 ; 1767 |#define RSRC_FUNCLET__HDSADJUSTCHILDPAYLOAD 711    
                             3397 ; 1768 |//$FILENAME _hdsfindleftmostleafblock.src
                             3398 ; 1769 |#define RSRC_FUNCLET__HDSFINDLEFTMOSTLEAFBLOCK 712    
                             3399 ; 1770 |//$FILENAME _hdscreateandopenslot.src
                             3400 ; 1771 |#define RSRC_FUNCLET__HDSCREATEANDOPENSLOT 713    
                             3401 ; 1772 |//$FILENAME _hdsremoveslot.src
                             3402 ; 1773 |#define RSRC_FUNCLET__HDSREMOVESLOT 714    
                             3403 ; 1774 |//$FILENAME _hdscopyandlocknewslot.src
                             3404 ; 1775 |#define RSRC_FUNCLET__HDSCOPYANDLOCKNEWSLOT 715    
                             3405 ; 1776 |//$FILENAME _hdsrelocateslotandkeepcurrlock.src
                             3406 ; 1777 |#define RSRC_FUNCLET__HDSRELOCATESLOTANDKEEPCURRLOCK 716    
                             3407 ; 1778 |//$FILENAME _hdstraversenextrightsiblingblock.src
                             3408 ; 1779 |#define RSRC_FUNCLET__HDSTRAVERSENEXTRIGHTSIBLINGBLOCK 717    
                             3409 ; 1780 |//$FILENAME _hdstraverseblocksinpostorder.src
                             3410 ; 1781 |#define RSRC_FUNCLET__HDSTRAVERSEBLOCKSINPOSTORDER 718    
                             3411 ; 1782 |//$FILENAME _hdsslotresize.src
                             3412 ; 1783 |#define RSRC_FUNCLET__HDSSLOTRESIZE 719    
                             3413 ; 1784 |//$FILENAME _isnull.src
                             3414 ; 1785 |#define RSRC_FUNCLET__ISNULL 720    
                             3415 ; 1786 |//$FILENAME _hdsgensrnhash.src
                             3416 ; 1787 |#define RSRC_FUNCLET__HDSGENSRNHASH 721    
                             3417 ; 1788 |//$FILENAME _hdsallocblockbuffer.src
                             3418 ; 1789 |#define RSRC_FUNCLET__HDSALLOCBLOCKBUFFER 722    
                             3419 ; 1790 |//$FILENAME _readsrn.src
                             3420 ; 1791 |#define RSRC_FUNCLET__READSRN 723    
                             3421 ; 1792 |//$FILENAME _hdsgetputchildblocknum.src
                             3422 ; 1793 |#define RSRC_FUNCLET__HDSGETPUTCHILDBLOCKNUM 724    
                             3423 ; 1794 |//$FILENAME _hdshashkeytoindex.src
                             3424 ; 1795 |#define RSRC_FUNCLET__HDSHASHKEYTOINDEX 725    
                             3425 ; 1796 |//$FILENAME _hdsslotwrite.src
                             3426 ; 1797 |#define RSRC_FUNCLET__HDSSLOTWRITE 726    
                             3427 ; 1798 |//$FILENAME _hdsinitslotenum.src
                             3428 ; 1799 |#define RSRC_FUNCLET__HDSINITSLOTENUM 727    
                             3429 ; 1800 |//$FILENAME drm_lst_close.src
                             3430 ; 1801 |#define RSRC_FUNCLET_DRM_LST_CLOSE 728    
                             3431 ; 1802 |//$FILENAME drm_lst_enumnext.src
                             3432 ; 1803 |#define RSRC_FUNCLET_DRM_LST_ENUMNEXT 729    
                             3433 ; 1804 |//$FILENAME drm_lst_enumdelete.src
                             3434 ; 1805 |#define RSRC_FUNCLET_DRM_LST_ENUMDELETE 730    
                             3435 ; 1806 |//$FILENAME _processextensions.src
                             3436 ; 1807 |#define RSRC_FUNCLET__PROCESSEXTENSIONS 731    
                             3437 ; 1808 |//$FILENAME _processidlist.src
                             3438 ; 1809 |#define RSRC_FUNCLET__PROCESSIDLIST 732    
                             3439 ; 1810 |//$FILENAME _processexclusions.src
                             3440 ; 1811 |#define RSRC_FUNCLET__PROCESSEXCLUSIONS 733    
                             3441 ; 1812 |//$FILENAME _processinclusions.src
                             3442 ; 1813 |#define RSRC_FUNCLET__PROCESSINCLUSIONS 734    
                             3443 ; 1814 |//$FILENAME drm_opl_processcopyoutputleveldata.src
                             3444 ; 1815 |#define RSRC_FUNCLET_DRM_OPL_PROCESSCOPYOUTPUTLEVELDATA 735    
                             3445 ; 1816 |//$FILENAME _getopllevel.src
                             3446 ; 1817 |#define RSRC_FUNCLET__GETOPLLEVEL 736    
                             3447 ; 1818 |//$FILENAME drm_opl_processplayoutputleveldata.src
                             3448 ; 1819 |#define RSRC_FUNCLET_DRM_OPL_PROCESSPLAYOUTPUTLEVELDATA 737    
                             3449 ; 1820 |//$FILENAME _updateattributetokeninslot.src
                             3450 ; 1821 |#define RSRC_FUNCLET__UPDATEATTRIBUTETOKENINSLOT 738    
                             3451 ; 1822 |//$FILENAME drm_sst_settokenvalue.src
                             3452 ; 1823 |#define RSRC_FUNCLET_DRM_SST_SETTOKENVALUE 739    
                             3453 ; 1824 |//$FILENAME drm_sst_createlicensestatepassword.src
                             3454 ; 1825 |#define RSRC_FUNCLET_DRM_SST_CREATELICENSESTATEPASSWORD 740    
                             3455 ; 1826 |//$FILENAME drm_utl_promoteansitounicode.src
                             3456 ; 1827 |#define RSRC_FUNCLET_DRM_UTL_PROMOTEANSITOUNICODE 741    
                             3457 ; 1828 |//$FILENAME drm_pk_symmetricsign.src
                             3458 ; 1829 |#define RSRC_FUNCLET_DRM_PK_SYMMETRICSIGN 742    
                             3459 ; 1830 |//$FILENAME drm_utl_getversionfromstring.src
                             3460 ; 1831 |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONFROMSTRING 743    
                             3461 ; 1832 |//$FILENAME drm_utl_stringinsertblanksubstring.src
                             3462 ; 1833 |#define RSRC_FUNCLET_DRM_UTL_STRINGINSERTBLANKSUBSTRING 744    
                             3463 ; 1834 |//$FILENAME drm_utl_stringremovesubstring.src
                             3464 ; 1835 |#define RSRC_FUNCLET_DRM_UTL_STRINGREMOVESUBSTRING 745    
                             3465 ; 1836 |//$FILENAME drm_utl_dstrsearch.src
                             3466 ; 1837 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCH 746    
                             3467 ; 1838 |//$FILENAME drm_utl_dstrsearchreverse.src
                             3468 ; 1839 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCHREVERSE 747    
                             3469 ; 1840 |//$FILENAME drm_utl_stringtoguid.src
                             3470 ; 1841 |#define RSRC_FUNCLET_DRM_UTL_STRINGTOGUID 748    
                             3471 ; 1842 |//$FILENAME drm_utl_ensuredataalignment.src
                             3472 ; 1843 |#define RSRC_FUNCLET_DRM_UTL_ENSUREDATAALIGNMENT 749    
                             3473 ; 1844 |//$FILENAME overlappingdates.src
                             3474 ; 1845 |#define RSRC_FUNCLET_OVERLAPPINGDATES 750    
                             3475 ; 1846 |//$FILENAME drm_asd_parsev2license.src
                             3476 ; 1847 |#define RSRC_FUNCLET_DRM_ASD_PARSEV2LICENSE 751    
                             3477 ; 1848 |//$FILENAME neginfdate.src
                             3478 ; 1849 |#define RSRC_FUNCLET_NEGINFDATE 752    
                             3479 ; 1850 |//$FILENAME infdate.src
                             3480 ; 1851 |#define RSRC_FUNCLET_INFDATE 753    
                             3481 ; 1852 |//$FILENAME isexpired.src
                             3482 ; 1853 |#define RSRC_FUNCLET_ISEXPIRED 754    
                             3483 ; 1854 |//$FILENAME getsecstateattr.src
                             3484 ; 1855 |#define RSRC_FUNCLET_GETSECSTATEATTR 755    
                             3485 ; 1856 |//$FILENAME setexpirycategory.src
                             3486 ; 1857 |#define RSRC_FUNCLET_SETEXPIRYCATEGORY 756    
                             3487 ; 1858 |//$FILENAME getv2licenseinfo.src
                             3488 ; 1859 |#define RSRC_FUNCLET_GETV2LICENSEINFO 757    
                             3489 ; 1860 |//$FILENAME getnextlicense.src
                             3490 ; 1861 |#define RSRC_FUNCLET_GETNEXTLICENSE 758    
                             3491 ; 1862 |//$FILENAME aggregate.src
                             3492 ; 1863 |#define RSRC_FUNCLET_AGGREGATE 759    
                             3493 ; 1864 |//$FILENAME drm_asd_getlicenseaggregatedata.src
                             3494 ; 1865 |#define RSRC_FUNCLET_DRM_ASD_GETLICENSEAGGREGATEDATA 760    
                             3495 ; 1866 |//$FILENAME _scannodeforattributew.src
                             3496 ; 1867 |#define RSRC_FUNCLET__SCANNODEFORATTRIBUTEW 761    
                             3497 ; 1868 |//$FILENAME _getxmlnodecdataw.src
                             3498 ; 1869 |#define RSRC_FUNCLET__GETXMLNODECDATAW 762    
                             3499 ; 1870 |//$FILENAME drm_ddc_getdevicecertificate.src
                             3500 ; 1871 |#define RSRC_FUNCLET_DRM_DDC_GETDEVICECERTIFICATE 763    
                             3501 ; 1872 |//$FILENAME _createdevicestore.src
                             3502 ; 1873 |#define RSRC_FUNCLET__CREATEDEVICESTORE 764    
                             3503 ; 1874 |//$FILENAME _mapdrmerror.src
                             3504 ; 1875 |#define RSRC_FUNCLET__MAPDRMERROR 765    
                             3505 ; 1876 |//$FILENAME _comparemachineid.src
                             3506 ; 1877 |#define RSRC_FUNCLET__COMPAREMACHINEID 766    
                             3507 ; 1878 |//$FILENAME initmgrcontext.src
                             3508 ; 1879 |#define RSRC_FUNCLET_INITMGRCONTEXT 767    
                             3509 ; 1880 |//$FILENAME drm_mgr_setv2header.src
                             3510 ; 1881 |#define RSRC_FUNCLET_DRM_MGR_SETV2HEADER 768    
                             3511 ; 1882 |//$FILENAME drm_mgr_commit.src
                             3512 ; 1883 |#define RSRC_FUNCLET_DRM_MGR_COMMIT 769    
                             3513 ; 1884 |//$FILENAME drm_mgr_cleanuplicensestore.src
                             3514 ; 1885 |#define RSRC_FUNCLET_DRM_MGR_CLEANUPLICENSESTORE 770    
                             3515 ; 1886 |//$FILENAME januscleandatastore.src
                             3516 ; 1887 |#define RSRC_FUNCLET_JANUSCLEANDATASTORE 771    
                             3517 ; 1888 |//$FILENAME drm_mtr_openid.src
                             3518 ; 1889 |#define RSRC_FUNCLET_DRM_MTR_OPENID 772    
                             3519 ; 1890 |//$FILENAME drm_mtr_incrementcount.src
                             3520 ; 1891 |#define RSRC_FUNCLET_DRM_MTR_INCREMENTCOUNT 773    
                             3521 ; 1892 |//$FILENAME drm_mtr_closecontext.src
                             3522 ; 1893 |#define RSRC_FUNCLET_DRM_MTR_CLOSECONTEXT 774    
                             3523 ; 1894 |//$FILENAME oem_setendoffile.src
                             3524 ; 1895 |#define RSRC_FUNCLET_OEM_SETENDOFFILE 775    
                             3525 ; 1896 |//$FILENAME oem_genrandombytes.src
                             3526 ; 1897 |#define RSRC_FUNCLET_OEM_GENRANDOMBYTES 776    
                             3527 ; 1898 |//$FILENAME oem_getfallbacksigningkey.src
                             3528 ; 1899 |#define RSRC_FUNCLET_OEM_GETFALLBACKSIGNINGKEY 777    
                             3529 ; 1900 |//$FILENAME oem_getdevicecerttemplate.src
                             3530 ; 1901 |#define RSRC_FUNCLET_OEM_GETDEVICECERTTEMPLATE 778    
                             3531 ; 1902 |//$FILENAME oem_setdevicecert.src
                             3532 ; 1903 |#define RSRC_FUNCLET_OEM_SETDEVICECERT 779    
                             3533 ; 1904 |//$FILENAME oem_getclockresetstate.src
                             3534 ; 1905 |#define RSRC_FUNCLET_OEM_GETCLOCKRESETSTATE 780    
                             3535 ; 1906 |//$FILENAME oem_setclockresetstate.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3536 ; 1907 |#define RSRC_FUNCLET_OEM_SETCLOCKRESETSTATE 781    
                             3537 ; 1908 |//$FILENAME oem_getuniqueid.src
                             3538 ; 1909 |#define RSRC_FUNCLET_OEM_GETUNIQUEID 782    
                             3539 ; 1910 |//$FILENAME oem_getdevicecert.src
                             3540 ; 1911 |#define RSRC_FUNCLET_OEM_GETDEVICECERT 783    
                             3541 ; 1912 |//$FILENAME drm_snc_openstore.src
                             3542 ; 1913 |#define RSRC_FUNCLET_DRM_SNC_OPENSTORE 784    
                             3543 ; 1914 |//$FILENAME drm_snc_closestore.src
                             3544 ; 1915 |#define RSRC_FUNCLET_DRM_SNC_CLOSESTORE 785    
                             3545 ; 1916 |//$FILENAME _setkidstoredata.src
                             3546 ; 1917 |#define RSRC_FUNCLET__SETKIDSTOREDATA 786    
                             3547 ; 1918 |//$FILENAME drm_snc_deletekid.src
                             3548 ; 1919 |#define RSRC_FUNCLET_DRM_SNC_DELETEKID 787    
                             3549 ; 1920 |//$FILENAME drm_snc_updatekid.src
                             3550 ; 1921 |#define RSRC_FUNCLET_DRM_SNC_UPDATEKID 788    
                             3551 ; 1922 |//$FILENAME drm_mgr_setv1header.src
                             3552 ; 1923 |#define RSRC_FUNCLET_DRM_MGR_SETV1HEADER 789    
                             3553 ; 1924 |//$FILENAME functiongetvalue_part1.src
                             3554 ; 1925 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_PART1 790    
                             3555 ; 1926 |//$FILENAME functiongetvalue_fn_datediff.src
                             3556 ; 1927 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_FN_DATEDIFF 791    
                             3557 ; 1928 |//$FILENAME _hdscreatenamespacestore.src
                             3558 ; 1929 |#define RSRC_FUNCLET__HDSCREATENAMESPACESTORE 792    
                             3559 ; 1930 |//$FILENAME drm_hds_createstore2.src
                             3560 ; 1931 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE2 793    
                             3561 ; 1932 |//$FILENAME drm_hds_openstore2.src
                             3562 ; 1933 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE2 794    
                             3563 ; 1934 |//$FILENAME _hdsprealloc.src
                             3564 ; 1935 |#define RSRC_FUNCLET__HDSPREALLOC 795    
                             3565 ; 1936 |//$FILENAME oem_systemtimetofiletime.src
                             3566 ; 1937 |#define RSRC_FUNCLET_OEM_SYSTEMTIMETOFILETIME 796    
                             3567 ; 1938 |//$FILENAME oem_filetimetosystemtime.src
                             3568 ; 1939 |#define RSRC_FUNCLET_OEM_FILETIMETOSYSTEMTIME 797    
                             3569 ; 1940 |//$FILENAME gendevicecertificate.src
                             3570 ; 1941 |#define RSRC_FUNCLET_GENDEVICECERTIFICATE 798    
                             3571 ; 1942 |//$FILENAME drmcrt_memmove_mem.src
                             3572 ; 1943 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE_MEM 799    
                             3573 ; 1944 |//$FILENAME copyhdsdtore.src
                             3574 ; 1945 |#define RSRC_FUNCLET_COPYHDSDTORE 800    
                             3575 ; 1946 |//$FILENAME generatedevicecert.src
                             3576 ; 1947 |#define RSRC_FUNCLET_GENERATEDEVICECERT 801    
                             3577 ; 1948 |//$FILENAME oem_getdevicedatetime.src
                             3578 ; 1949 |#define RSRC_FUNCLET_OEM_GETDEVICEDATETIME 802    
                             3579 ; 1950 |//$FILENAME drm_mtr_updatedata.src
                             3580 ; 1951 |#define RSRC_FUNCLET_DRM_MTR_UPDATEDATA 803    
                             3581 ; 1952 |//$FILENAME _hdsupdatesrn.src
                             3582 ; 1953 |#define RSRC_FUNCLET__HDSUPDATESRN 804    
                             3583 ; 1954 |//$FILENAME drm_b64_decodew_inplace.src
                             3584 ; 1955 |#define RSRC_FUNCLET_DRM_B64_DECODEW_INPLACE 805    
                             3585 ; 1956 |//$FILENAME _checksecureclock.src
                             3586 ; 1957 |#define RSRC_FUNCLET__CHECKSECURECLOCK 806    
                             3587 ; 1958 |//$FILENAME _preparesecureclockdataforwriting.src
                             3588 ; 1959 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORWRITING 807    
                             3589 ; 1960 |//$FILENAME _preparesecureclockdataforreading.src
                             3590 ; 1961 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORREADING 808    
                             3591 ; 1962 |//$FILENAME drm_sst_closelockedslot.src
                             3592 ; 1963 |#define RSRC_FUNCLET_DRM_SST_CLOSELOCKEDSLOT 809    
                             3593 ; 1964 |//$FILENAME variablesecuretimegetorset.src
                             3594 ; 1965 |#define RSRC_FUNCLET_VARIABLESECURETIMEGETORSET 810    
                             3595 ; 1966 |//$FILENAME strtol.src
                             3596 ; 1967 |#define RSRC_FUNCLET_STRTOL 811    
                             3597 ; 1968 |//$FILENAME mktime.src
                             3598 ; 1969 |#define RSRC_FUNCLET_MKTIME 812    
                             3599 ; 1970 |//$FILENAME gmtime.src
                             3600 ; 1971 |#define RSRC_FUNCLET_GMTIME 813    
                             3601 ; 1972 |//$FILENAME localtime.src
                             3602 ; 1973 |#define RSRC_FUNCLET_LOCALTIME 814    
                             3603 ; 1974 |//$FILENAME _struct_tm_to_systemtime.src
                             3604 ; 1975 |#define RSRC_FUNCLET__STRUCT_TM_TO_SYSTEMTIME 815    
                             3605 ; 1976 |//$FILENAME _systemtime_to_struct_tm.src
                             3606 ; 1977 |#define RSRC_FUNCLET__SYSTEMTIME_TO_STRUCT_TM 816    
                             3607 ; 1978 |//$FILENAME _systemtimetotime_t.src
                             3608 ; 1979 |#define RSRC_FUNCLET__SYSTEMTIMETOTIME_T 817    
                             3609 ; 1980 |//$FILENAME oem_setsystemtime.src
                             3610 ; 1981 |#define RSRC_FUNCLET_OEM_SETSYSTEMTIME 818    
                             3611 ; 1982 |//$FILENAME const_pkcrypto.src
                             3612 ; 1983 |#define RSRC_CONST_PKCRYPTO 819    
                             3613 ; 1984 |//$FILENAME const_y.src
                             3614 ; 1985 |#define RSRC_CONST_Y 820    
                             3615 ; 1986 |//$FILENAME aes_dec_table.src
                             3616 ; 1987 |#define RSRC_AES_DEC_TABLE 821    
                             3617 ; 1988 |//$FILENAME aes_key_table.src
                             3618 ; 1989 |#define RSRC_AES_KEY_TABLE 822    
                             3619 ; 1990 |//$FILENAME aes_enc_table.src
                             3620 ; 1991 |#define RSRC_AES_ENC_TABLE 823    
                             3621 ; 1992 |//$FILENAME device_cert.src
                             3622 ; 1993 |#define RSRC_DEVCERT 824    
                             3623 ; 1994 |//$FILENAME devcert_template.src
                             3624 ; 1995 |#define RSRC_DEVCERT_TEMPLATE 825    
                             3625 ; 1996 |//$FILENAME getbase64decodedkey.src
                             3626 ; 1997 |#define RSRC_FUNCLET_GETBASE64DECODEDKEY 826    
                             3627 ; 1998 |//$FILENAME _initslot.src
                             3628 ; 1999 |#define RSRC_FUNCLET__INITSLOT 827    
                             3629 ; 2000 |//$FILENAME hdsimplcommon.src
                             3630 ; 2001 |#define RSRC_HDSIMPLCOMMON_P 828    
                             3631 ; 2002 |//$FILENAME hdsimpl_p.src
                             3632 ; 2003 |#define RSRC_HDSIMPL_P 829    
                             3633 ; 2004 |
                             3634 ; 2005 |
                             3635 ; 2006 |//////////////////////////////////////////////////////////////////////////////////
                             3636 ; 2007 |//pkcrypto Related
                             3637 ; 2008 |//////////////////////////////////////////////////////////////////////////////////
                             3638 ; 2009 |//$FILENAME two_adic_inverse.src
                             3639 ; 2010 |#define RSRC_FUNCLET_TWO_ADIC_INVERSE 830    
                             3640 ; 2011 |//$FILENAME mp_shift.src
                             3641 ; 2012 |#define RSRC_FUNCLET_MP_SHIFT 831    
                             3642 ; 2013 |//$FILENAME mp_significant_bit_count.src
                             3643 ; 2014 |#define RSRC_FUNCLET_MP_SIGNIFICANT_BIT_COUNT 832    
                             3644 ; 2015 |//$FILENAME set_immediate.src
                             3645 ; 2016 |#define RSRC_FUNCLET_SET_IMMEDIATE 833    
                             3646 ; 2017 |//$FILENAME multiply_immediate.src
                             3647 ; 2018 |#define RSRC_FUNCLET_MULTIPLY_IMMEDIATE 834    
                             3648 ; 2019 |//$FILENAME multiply.src
                             3649 ; 2020 |#define RSRC_FUNCLET_MULTIPLY 835    
                             3650 ; 2021 |//$FILENAME divide_precondition_1.src
                             3651 ; 2022 |#define RSRC_FUNCLET_DIVIDE_PRECONDITION_1 836    
                             3652 ; 2023 |//$FILENAME divide_immediate.src
                             3653 ; 2024 |#define RSRC_FUNCLET_DIVIDE_IMMEDIATE 837    
                             3654 ; 2025 |//$FILENAME ecaffine_exponentiation_tabular.src
                             3655 ; 2026 |#define RSRC_FUNCLET_ECAFFINE_EXPONENTIATION_TABULAR 838    
                             3656 ; 2027 |//$FILENAME ecaffine_table_construction.src
                             3657 ; 2028 |#define RSRC_FUNCLET_ECAFFINE_TABLE_CONSTRUCTION 839    
                             3658 ; 2029 |//$FILENAME ecproj5_to_ecaffine.src
                             3659 ; 2030 |#define RSRC_FUNCLET_ECPROJ5_TO_ECAFFINE 840    
                             3660 ; 2031 |//$FILENAME ecproj5_set_infinite.src
                             3661 ; 2032 |#define RSRC_FUNCLET_ECPROJ5_SET_INFINITE 841    
                             3662 ; 2033 |//$FILENAME ecaffine_on_curve.src
                             3663 ; 2034 |#define RSRC_FUNCLET_ECAFFINE_ON_CURVE 842    
                             3664 ; 2035 |//$FILENAME ecaffine_addition.src
                             3665 ; 2036 |#define RSRC_FUNCLET_ECAFFINE_ADDITION 843    
                             3666 ; 2037 |//$FILENAME ecaffine_addition_subtraction.src
                             3667 ; 2038 |#define RSRC_FUNCLET_ECAFFINE_ADDITION_SUBTRACTION 844    
                             3668 ; 2039 |//$FILENAME ecaffine_attributes2.src
                             3669 ; 2040 |#define RSRC_FUNCLET_ECAFFINE_ATTRIBUTES2 845    
                             3670 ; 2041 |//$FILENAME kfdesc_initialize.src
                             3671 ; 2042 |#define RSRC_FUNCLET_KFDESC_INITIALIZE 846    
                             3672 ; 2043 |//$FILENAME kimmediate.src
                             3673 ; 2044 |#define RSRC_FUNCLET_KIMMEDIATE 847    
                             3674 ; 2045 |//$FILENAME kprime_immediater.src
                             3675 ; 2046 |#define RSRC_FUNCLET_KPRIME_IMMEDIATER 848    
                             3676 ; 2047 |//$FILENAME kprime_sqrter.src
                             3677 ; 2048 |#define RSRC_FUNCLET_KPRIME_SQRTER 849    
                             3678 ; 2049 |//$FILENAME kinitialize_prime.src
                             3679 ; 2050 |#define RSRC_FUNCLET_KINITIALIZE_PRIME 850    
                             3680 ; 2051 |//$FILENAME mod_lucasuv.src
                             3681 ; 2052 |#define RSRC_FUNCLET_MOD_LUCASUV 851    
                             3682 ; 2053 |//$FILENAME mod_lucas.src
                             3683 ; 2054 |#define RSRC_FUNCLET_MOD_LUCAS 852    
                             3684 ; 2055 |//$FILENAME bucket_multiply.src
                             3685 ; 2056 |#define RSRC_FUNCLET_BUCKET_MULTIPLY 853    
                             3686 ; 2057 |//$FILENAME mod_exp2000.src
                             3687 ; 2058 |#define RSRC_FUNCLET_MOD_EXP2000 854    
                             3688 ; 2059 |//$FILENAME mod_exp.src
                             3689 ; 2060 |#define RSRC_FUNCLET_MOD_EXP 855    
                             3690 ; 2061 |//$FILENAME modmul_choices1.src
                             3691 ; 2062 |#define RSRC_FUNCLET_MODMUL_CHOICES1 856    
                             3692 ; 2063 |//$FILENAME mod_sqrt.src
                             3693 ; 2064 |#define RSRC_FUNCLET_MOD_SQRT 857    
                             3694 ; 2065 |//$FILENAME create_modulus.src
                             3695 ; 2066 |#define RSRC_FUNCLET_CREATE_MODULUS 858    
                             3696 ; 2067 |//$FILENAME from_modular.src
                             3697 ; 2068 |#define RSRC_FUNCLET_FROM_MODULAR 859    
                             3698 ; 2069 |//$FILENAME add_immediate.src
                             3699 ; 2070 |#define RSRC_FUNCLET_ADD_IMMEDIATE 860    
                             3700 ; 2071 |//$FILENAME add_diff.src
                             3701 ; 2072 |#define RSRC_FUNCLET_ADD_DIFF 861    
                             3702 ; 2073 |//$FILENAME add_full.src
                             3703 ; 2074 |#define RSRC_FUNCLET_ADD_FULL 862    
                             3704 ; 2075 |//$FILENAME compare_sum_same.src
                             3705 ; 2076 |#define RSRC_FUNCLET_COMPARE_SUM_SAME 863    
                             3706 ; 2077 |//$FILENAME sub_immediate.src
                             3707 ; 2078 |#define RSRC_FUNCLET_SUB_IMMEDIATE 864    
                             3708 ; 2079 |//$FILENAME mp_initialization.src
                             3709 ; 2080 |#define RSRC_FUNCLET_MP_INITIALIZATION 865    
                             3710 ; 2081 |//$FILENAME new_random_bytes.src
                             3711 ; 2082 |#define RSRC_FUNCLET_NEW_RANDOM_BYTES 866    
                             3712 ; 2083 |//$FILENAME new_random_dword_interval.src
                             3713 ; 2084 |#define RSRC_FUNCLET_NEW_RANDOM_DWORD_INTERVAL 867    
                             3714 ; 2085 |//$FILENAME new_random_digit_interval.src
                             3715 ; 2086 |#define RSRC_FUNCLET_NEW_RANDOM_DIGIT_INTERVAL 868    
                             3716 ; 2087 |//$FILENAME new_random_mod.src
                             3717 ; 2088 |#define RSRC_FUNCLET_NEW_RANDOM_MOD 869    
                             3718 ; 2089 |//$FILENAME new_random_mod_nonzero.src
                             3719 ; 2090 |#define RSRC_FUNCLET_NEW_RANDOM_MOD_NONZERO 870    
                             3720 ; 2091 |//$FILENAME new_random_digits.src
                             3721 ; 2092 |#define RSRC_FUNCLET_NEW_RANDOM_DIGITS 871    
                             3722 ; 2093 |//$FILENAME words_to_ecaffine.src
                             3723 ; 2094 |#define RSRC_FUNCLET_WORDS_TO_ECAFFINE 872    
                             3724 ; 2095 |//$FILENAME ecaffine_to_dwords.src
                             3725 ; 2096 |#define RSRC_FUNCLET_ECAFFINE_TO_DWORDS 873    
                             3726 ; 2097 |//$FILENAME _threadunsafepkinit.src
                             3727 ; 2098 |#define RSRC_FUNCLET__THREADUNSAFEPKINIT 874    
                             3728 ; 2099 |//$FILENAME pkinit.src
                             3729 ; 2100 |#define RSRC_FUNCLET_PKINIT 875    
                             3730 ; 2101 |//$FILENAME drm_pk_genkeypair.src
                             3731 ; 2102 |#define RSRC_FUNCLET_DRM_PK_GENKEYPAIR 876    
                             3732 ; 2103 |//$FILENAME drm_pk_encrypt.src
                             3733 ; 2104 |#define RSRC_FUNCLET_DRM_PK_ENCRYPT 877    
                             3734 ; 2105 |//$FILENAME drm_pk_decrypt.src
                             3735 ; 2106 |#define RSRC_FUNCLET_DRM_PK_DECRYPT 878    
                             3736 ; 2107 |//$FILENAME byte_array_mod_bignum.src
                             3737 ; 2108 |#define RSRC_FUNCLET_BYTE_ARRAY_MOD_BIGNUM 879    
                             3738 ; 2109 |//$FILENAME fe2ipmod.src
                             3739 ; 2110 |#define RSRC_FUNCLET_FE2IPMOD 880    
                             3740 ; 2111 |//$FILENAME drm_pk_sign.src
                             3741 ; 2112 |#define RSRC_FUNCLET_DRM_PK_SIGN 881    
                             3742 ; 2113 |//$FILENAME drm_pk_verify.src
                             3743 ; 2114 |#define RSRC_FUNCLET_DRM_PK_VERIFY 882    
                             3744 ; 2115 |//$FILENAME random_bytes.src
                             3745 ; 2116 |#define RSRC_FUNCLET_RANDOM_BYTES 883    
                             3746 ; 2117 |//$FILENAME mp_gcdex.src
                             3747 ; 2118 |#define RSRC_FUNCLET_MP_GCDEX 884    
                             3748 ; 2119 |//$FILENAME mp_gcdex_split1.src
                             3749 ; 2120 |#define RSRC_FUNCLET_MP_GCDEX_SPLIT1 885    
                             3750 ; 2121 |//$FILENAME pkcrypto_p.src
                             3751 ; 2122 |#define RSRC_PKCRYPTO_P 886    
                             3752 ; 2123 |//$FILENAME pkcrypto_ovl_p.src
                             3753 ; 2124 |#define RSRC_PKCRYPTO_OVL_P 887    
                             3754 ; 2125 |//$FILENAME del_all_warning_line2.src
                             3755 ; 2126 |#define RSRC_WARNING_MSG_ALL_LINE2 888    
                             3756 ; 2127 |//$FILENAME del_all_file_star.src
                             3757 ; 2128 |#define RSRC_FILE_DELETE_STAR 889    
                             3758 ; 2129 |//$FILENAME string_voice_menu_delete_all.src
                             3759 ; 2130 |#define RSRC_STRING_VOICE_MENU_DELETE_ALL 890    
                             3760 ; 2131 |//$FILENAME Funclet_Init5VSense.src
                             3761 ; 2132 |#define RSRC_FUNCLET_INIT5VSENSE 891    
                             3762 ; 2133 |//$FILENAME Funclet_UpdateDCDCDutyCycle.src
                             3763 ; 2134 |#define RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE 892    
                             3764 ; 2135 |//$FILENAME Funclet_changeplayset.src
                             3765 ; 2136 |#define RSRC_FUNCLET_CHANGE_PLAYSET 893    
                             3766 ; 2137 |
                             3767 ; 2138 |//$FILENAME Funclet_mmctesterase.src
                             3768 ; 2139 |#define RSRC_FUNCLET_MMC_TEST_ERASE 894    
                             3769 ; 2140 |//$FILENAME Funclet_mmchalinit.src
                             3770 ; 2141 |#define RSRC_FUNCLET_MMC_HALINIT 895    
                             3771 ; 2142 |
                             3772 ; 2143 |
                             3773 ; 2144 |// Added to allow rechargeable battery configurations to build
                             3774 ; 2145 |//$FILENAME battery_charging.src
                             3775 ; 2146 |#define RSRC_BATTERY_CHARGING 896    
                             3776 ; 2147 |//$FILENAME batterychargecodebank.src
                             3777 ; 2148 |#define RSRC_BATTERY_CHARGE_CODEBANK 897    
                             3778 ; 2149 |//$FILENAME updatevolume.src
                             3779 ; 2150 |#define RSRC_FUNCLET_SYSUPDATEVOLUME 898    
                             3780 ; 2151 |//$FILENAME Funclet_TestSkipCheckDisk.src
                             3781 ; 2152 |#define RSRC_FUNCLET_TESTSKIPCHECKDISK 899    
                             3782 ; 2153 |//$FILENAME Funclet_DisableStmpGeneratedMicBias.src
                             3783 ; 2154 |#define RSRC_FUNCLET_DISABLE_STMP_GENERATED_MICBIAS 900    
                             3784 ; 2155 |//$FILENAME Funclet_EnableStmpGeneratedMicBias.src
                             3785 ; 2156 |#define RSRC_FUNCLET_ENABLE_STMP_GENERATED_MICBIAS 901    
                             3786 ; 2157 |//$FILENAME Funclet_SetSkipCheckDisk.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3787 ; 2158 |#define RSRC_FUNCLET_SETSKIPCHECKDISK 902    
                             3788 ; 2159 |//$FILENAME drm_expr_evaluateexpression_no_more_tokens.src
                             3789 ; 2160 |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION_NO_MORE_TOKENS 903    
                             3790 ; 2161 |//$FILENAME _iscachedevent.src
                             3791 ; 2162 |#define RSRC_FUNCLET__ISCACHEDEVENT 904    
                             3792 ; 2163 |//$FILENAME setcountedexpirycategory.src
                             3793 ; 2164 |#define RSRC_FUNCLET_SETCOUNTEDEXPIRYCATEGORY 905    
                             3794 ; 2165 |//$FILENAME oem_data.src
                             3795 ; 2166 |#define RSRC_OEM_DATA 906    
                             3796 ; 2167 |//$FILENAME gpk_p.src
                             3797 ; 2168 |#define RSRC_GPK_P 907    
                             3798 ; 2169 |//$FILENAME key_data.src
                             3799 ; 2170 |#define RSRC_KEY_DATA 908    
                             3800 ; 2171 |//$FILENAME string_arial_8_defragmenting_store.src
                             3801 ; 2172 |#define RSRC_DEFRAGMENT_STORE_STRING 909    
                             3802 ; 2173 |//$FILENAME string_working.src
                             3803 ; 2174 |#define RSRC_STRING_WORKING 910    
                             3804 ; 2175 |//$FILENAME Funclet_loadusertime.src
                             3805 ; 2176 |#define RSRC_FUNCLET_LOADUSERTIME 911    
                             3806 ; 2177 |//$FILENAME Funclet_saveusertime.src
                             3807 ; 2178 |#define RSRC_FUNCLET_SAVEUSERTIME 912    
                             3808 ; 2179 |
                             3809 ; 2180 |//$FILENAME Funclet_SysLRADCBrownoutInit.src
                             3810 ; 2181 |#define RSRC_FUNCLET_SYSLRADCBROWNOUTINIT 913    
                             3811 ; 2182 |//$FILENAME Funclet_SysBatteryGetLevel.src
                             3812 ; 2183 |#define RSRC_FUNCLET_SYSBATTERYGETLEVEL 914    
                             3813 ; 2184 |
                             3814 ; 2185 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             3815 ; 2186 |// Audible ACELP Resources
                             3816 ; 2187 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             3817 ; 2188 |//$FILENAME AudibleAcelpDec.src
                             3818 ; 2189 |#define RSRC_AUDIBLE_ACELPDEC_CODE 915    
                             3819 ; 2190 |//$FILENAME AudibleAcelpP.src
                             3820 ; 2191 |#define RSRC_AUDIBLE_ACELP_CODE_P 916    
                             3821 ; 2192 |//$FILENAME AudibleAcelpX.src
                             3822 ; 2193 |#define RSRC_AUDIBLE_ACELP_DATA_X 917    
                             3823 ; 2194 |//$FILENAME AudibleAcelpY.src
                             3824 ; 2195 |#define RSRC_AUDIBLE_ACELP_DATA_Y 918    
                             3825 ; 2196 |
                             3826 ; 2197 |//$FILENAME AudibleDecMod.src
                             3827 ; 2198 |#define RSRC_AUDIBLE_DECMOD_CODE 919    
                             3828 ; 2199 |//$FILENAME audiblemp3p.src
                             3829 ; 2200 |#define RSRC_AUDIBLE_MP3P_CODE 920    
                             3830 ; 2201 |//$FILENAME audiblemp3x.src
                             3831 ; 2202 |#define RSRC_AUDIBLE_MP3X_CODE 921    
                             3832 ; 2203 |//$FILENAME audiblemp3y.src
                             3833 ; 2204 |#define RSRC_AUDIBLE_MP3Y_CODE 922    
                             3834 ; 2205 |
                             3835 ; 2206 |//$FILENAME audiblemetadata_p.src
                             3836 ; 2207 |#define RSRC_AUDIBLE_METADATA_P 923    
                             3837 ; 2208 |//$FILENAME audiblemetadata_y.src
                             3838 ; 2209 |#define RSRC_AUDIBLE_METADATA_Y 924    
                             3839 ; 2210 |//$FILENAME audiblesongposition_p.src
                             3840 ; 2211 |#define RSRC_AUDIBLE_SONG_POSITION_P 925    
                             3841 ; 2212 |//$FILENAME audibletargetcheck_p.src
                             3842 ; 2213 |#define RSRC_AUDIBLE_TARGET_CHECK_P 926    
                             3843 ; 2214 |//$FILENAME audiblefillfileinfo_p.src
                             3844 ; 2215 |#define RSRC_AUDIBLE_FILLFILEINFO_P 927    
                             3845 ; 2216 |//$FILENAME audibledsa_p.src
                             3846 ; 2217 |#define RSRC_AUDIBLE_DSA_P 928    
                             3847 ; 2218 |//$FILENAME audiblefillmetadata_p.src
                             3848 ; 2219 |#define RSRC_AUDIBLE_FILLMETADATA_P 929    
                             3849 ; 2220 |//$FILENAME audiblemetastrings_p.src
                             3850 ; 2221 |#define RSRC_AUDIBLE_METASTRINGS_P 930    
                             3851 ; 2222 |//$FILENAME aaactivationrecords_p.src
                             3852 ; 2223 |#define RSRC_AUDIBLE_ACTIVATION_P 931    
                             3853 ; 2224 |
                             3854 ; 2225 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             3855 ; 2226 |// Effects and SRS Resources
                             3856 ; 2227 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             3857 ; 2228 |//$FILENAME srs_effectsmodules_p.src
                             3858 ; 2229 |#define RSRC_SRS_EFFECTS_MODULES_P 932    
                             3859 ; 2230 |//$FILENAME srs_effectsmodules_x.src
                             3860 ; 2231 |#define RSRC_SRS_EFFECTS_MODULES_X 933    
                             3861 ; 2232 |//$FILENAME wowctrl.src
                             3862 ; 2233 |#define RSRC_WOW_CTRL 934    
                             3863 ; 2234 |
                             3864 ; 2235 |//$FILENAME wowmenu.src
                             3865 ; 2236 |#define RSRC_WOW_MENU_CODE_BANK 935    
                             3866 ; 2237 |//$FILENAME string_wowbrightness_menu.src
                             3867 ; 2238 |#define RSRC_STRING_WOW_BRIGHTNESS 936    
                             3868 ; 2239 |//$FILENAME string_wow_menu.src
                             3869 ; 2240 |#define RSRC_STRING_WOW_MENU 937    
                             3870 ; 2241 |//$FILENAME string_wowtrubass_menu.src
                             3871 ; 2242 |#define RSRC_STRING_WOW_TRUBASS 938    
                             3872 ; 2243 |//$FILENAME string_wowvolume_menu.src
                             3873 ; 2244 |#define RSRC_STRING_WOW_VOLUME 939    
                             3874 ; 2245 |//$FILENAME string_wowbrightness_low_menu.src
                             3875 ; 2246 |#define RSRC_STRING_WOW_BRIGHT_LOW 940    
                             3876 ; 2247 |//$FILENAME string_wowbrightness_mid_menu.src
                             3877 ; 2248 |#define RSRC_STRING_WOW_BRIGHT_MID 941    
                             3878 ; 2249 |//$FILENAME string_wowbrightness_high_menu.src
                             3879 ; 2250 |#define RSRC_STRING_WOW_BRIGHT_HIGH 942    
                             3880 ; 2251 |//$FILENAME wow_icon.src
                             3881 ; 2252 |#define RSRC_WOW_ICON 943    
                             3882 ; 2253 |
                             3883 ; 2254 |//$FILENAME wow16k.src
                             3884 ; 2255 |#define RSRC_WOW16K 944    
                             3885 ; 2256 |//$FILENAME wow32k.src
                             3886 ; 2257 |#define RSRC_WOW32K 945    
                             3887 ; 2258 |//$FILENAME wow8k.src
                             3888 ; 2259 |#define RSRC_WOW8K 946    
                             3889 ; 2260 |//$FILENAME wow11k.src
                             3890 ; 2261 |#define RSRC_WOW11K 947    
                             3891 ; 2262 |//$FILENAME wow22k.src
                             3892 ; 2263 |#define RSRC_WOW22K 948    
                             3893 ; 2264 |//$FILENAME wow24k.src
                             3894 ; 2265 |#define RSRC_WOW24K 949    
                             3895 ; 2266 |//$FILENAME wow44k.src
                             3896 ; 2267 |#define RSRC_WOW44K 950    
                             3897 ; 2268 |//$FILENAME wow48k.src
                             3898 ; 2269 |#define RSRC_WOW48K 951    
                             3899 ; 2270 |
                             3900 ; 2271 |//$FILENAME wow16k_Y.src
                             3901 ; 2272 |#define RSRC_WOW16K_Y 952    
                             3902 ; 2273 |//$FILENAME wow32k_Y.src
                             3903 ; 2274 |#define RSRC_WOW32K_Y 953    
                             3904 ; 2275 |//$FILENAME wow8k_Y.src
                             3905 ; 2276 |#define RSRC_WOW8K_Y 954    
                             3906 ; 2277 |//$FILENAME wow11k_Y.src
                             3907 ; 2278 |#define RSRC_WOW11K_Y 955    
                             3908 ; 2279 |//$FILENAME wow22k_Y.src
                             3909 ; 2280 |#define RSRC_WOW22K_Y 956    
                             3910 ; 2281 |//$FILENAME wow24k_Y.src
                             3911 ; 2282 |#define RSRC_WOW24K_Y 957    
                             3912 ; 2283 |//$FILENAME wow44k_Y.src
                             3913 ; 2284 |#define RSRC_WOW44K_Y 958    
                             3914 ; 2285 |//$FILENAME wow48k_Y.src
                             3915 ; 2286 |#define RSRC_WOW48K_Y 959    
                             3916 ; 2287 |
                             3917 ; 2288 |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             3918 ; 2289 |// Audible Section Navigation
                             3919 ; 2290 |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             3920 ; 2291 |//$FILENAME audible_secnav.src
                             3921 ; 2292 |#define RSRC_AUDIBLE_SECNAV_ICON 960    
                             3922 ; 2293 |
                             3923 ; 2294 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             3924 ; 2295 |// PLAYLIST3 and Music Library
                             3925 ; 2296 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             3926 ; 2297 |
                             3927 ; 2298 |//$FILENAME build_ml.src
                             3928 ; 2299 |#define RSRC_BUILD_ML 961    
                             3929 ; 2300 |//$FILENAME build_ml_warning.src
                             3930 ; 2301 |#define RSRC_BUILD_ML_WARNING 962    
                             3931 ; 2302 |//$FILENAME build_ml_warning2.src
                             3932 ; 2303 |#define RSRC_BUILD_ML_WARNING2 963    
                             3933 ; 2304 |//$FILENAME build_flash1.src
                             3934 ; 2305 |#define RSRC_BUILD_FLASH1 964    
                             3935 ; 2306 |//$FILENAME build_flash2.src
                             3936 ; 2307 |#define RSRC_BUILD_FLASH2 965    
                             3937 ; 2308 |//$FILENAME build_flash3.src
                             3938 ; 2309 |#define RSRC_BUILD_FLASH3 966    
                             3939 ; 2310 |//$FILENAME build_sd1.src
                             3940 ; 2311 |#define RSRC_BUILD_SD1 967    
                             3941 ; 2312 |//$FILENAME build_sd2.src
                             3942 ; 2313 |#define RSRC_BUILD_SD2 968    
                             3943 ; 2314 |//$FILENAME build_sd3.src
                             3944 ; 2315 |#define RSRC_BUILD_SD3 969    
                             3945 ; 2316 |//$FILENAME build_newmusic.src
                             3946 ; 2317 |#define RSRC_BUILD_NEWMUSIC 970    
                             3947 ; 2318 |//$FILENAME sdmd.src
                             3948 ; 2319 |#define RSRC_SDMD_MENU_CODE_BANK 971    
                             3949 ; 2320 |//$FILENAME musiclib_build_function_sec.src
                             3950 ; 2321 |#define RSRC_MUSICLIB_BUILD_FUNCTION_SEC 972    
                             3951 ; 2322 |//$FILENAME musiclib_build_function_flush.src
                             3952 ; 2323 |#define RSRC_MUSICLIB_BUILD_FUNCTION_FLUSH 973    
                             3953 ; 2324 |//$FILENAME MusicLibBuildModule.src
                             3954 ; 2325 |#define RSRC_MUSICLIB_BUILD_MODULE 974    
                             3955 ; 2326 |//$FILENAME MusicLibBuildGenreTable.src
                             3956 ; 2327 |#define RSRC_MUSICLIB_BUILD_GENRE_TABLE 975    
                             3957 ; 2328 |//$FILENAME MusicLibBuildFlushMem.src
                             3958 ; 2329 |#define RSRC_MUSICLIB_BUILD_FLUSH_MEM 976    
                             3959 ; 2330 |//$FILENAME MusicLibBrowseModule.src
                             3960 ; 2331 |#define RSRC_MUSICLIB_BROWSE_MODULE 977    
                             3961 ; 2332 |//$FILENAME MusicLibPlayModule.src
                             3962 ; 2333 |#define RSRC_MUSICLIB_PLAY_MODULE 978    
                             3963 ; 2334 |//$FILENAME MusicLibPlayAllNextModule.src
                             3964 ; 2335 |#define RSRC_MUSICLIB_PLAYALLNEXT_MODULE 979    
                             3965 ; 2336 |//$FILENAME MusicLibPlayAllPrevModule.src
                             3966 ; 2337 |#define RSRC_MUSICLIB_PLAYALLPREV_MODULE 980    
                             3967 ; 2338 |//$FILENAME MusicLibShuffleModule.src
                             3968 ; 2339 |#define RSRC_MUSICLIB_SHUFFLE_MODULE 981    
                             3969 ; 2340 |//$FILENAME Funclet_write_detection_access.src
                             3970 ; 2341 |#define RSRC_FUNCLET_WRITE_DETECTION_ACCESS 982    
                             3971 ; 2342 |//$FILENAME Funclet_LOCAL_GetLvlOneItem_info.src
                             3972 ; 2343 |#define RSRC_FUNCLET_LOCAL_GET_LVL_ONE_ITEM_INFO 983    
                             3973 ; 2344 |//$FILENAME Funclet_LOCAL_GetFlashAssociatedList_info.src
                             3974 ; 2345 |#define RSRC_FUNCLET_LOCAL_GET_FLASH_ASSOCIATED_LIST_INFO 984    
                             3975 ; 2346 |//$FILENAME Funclet_ML_ResumePlayState.src
                             3976 ; 2347 |#define RSRC_FUNCLET_ML_RESUMEPLAYSTATE 985    
                             3977 ; 2348 |//$FILENAME Funclet_ML_UpdateOnTheGo.src
                             3978 ; 2349 |#define RSRC_FUNCLET_ML_UPDATE_ON_THE_GO 986    
                             3979 ; 2350 |//$FILENAME Funclet_ML_ChOnTheGo.src
                             3980 ; 2351 |#define RSRC_FUNCLET_ML_CH_ON_THE_GO 987    
                             3981 ; 2352 |//$FILENAME Funclet_ML_LoadOnTheGo.src
                             3982 ; 2353 |#define RSRC_FUNCLET_ML_LOAD_ON_THE_GO 988    
                             3983 ; 2354 |//$FILENAME Funclet_Build_InitandUseCache.src
                             3984 ; 2355 |#define RSRC_FUNCLET_BUILD_INIT_AND_USE_CACHE 989    
                             3985 ; 2356 |//$FILENAME Funclet_Build_FlushAndCloseCache.src
                             3986 ; 2357 |#define RSRC_FUNCLET_BUILD_FLUSH_AND_CLOSE_CACHE 990    
                             3987 ; 2358 |//$FILENAME Funclet_ML_movePointerBackward.src
                             3988 ; 2359 |#define RSRC_FUNCLET_ML_MOVE_POINTER_BACKWARD 991    
                             3989 ; 2360 |//$FILENAME Funclet_ML_findLastItemPointer.src
                             3990 ; 2361 |#define RSRC_FUNCLET_ML_FIND_LAST_ITEM_POINTER 992    
                             3991 ; 2362 |//$FILENAME Funclet_ML_startShuffle.src
                             3992 ; 2363 |#define RSRC_FUNCLET_ML_START_SHUFFLE 993    
                             3993 ; 2364 |//$FILENAME Funclet_ML_GetFlashDirAssocListId.src
                             3994 ; 2365 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ID 994    
                             3995 ; 2366 |//$FILENAME Funclet_ML_GetFlashDirAssocListRootId.src
                             3996 ; 2367 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ROOT_ID 995    
                             3997 ; 2368 |//$FILENAME Funclet_ML_GetFlashDirAssocListSize.src
                             3998 ; 2369 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_SIZE 996    
                             3999 ; 2370 |//$FILENAME Funclet_ML_GetIdByStateAndPosition.src
                             4000 ; 2371 |#define RSRC_FUNCLET_ML_GET_ID_BY_STATE_AND_POSITION 997    
                             4001 ; 2372 |//$FILENAME Funclet_ML_StartPlayDirSongInit.src
                             4002 ; 2373 |#define RSRC_FUNCLET_ML_START_PLAY_DIR_SONG_INIT 998    
                             4003 ; 2374 |//$FILENAME Funclet_ML_ShuffleNextDirSong.src
                             4004 ; 2375 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_DIR_SONG 999    
                             4005 ; 2376 |//$FILENAME Funclet_ML_BrowseMenu.src
                             4006 ; 2377 |#define RSRC_FUNCLET_ML_BROWSE_MENU 1000    
                             4007 ; 2378 |//$FILENAME Funclet_ML_StartPlayAllSong.src
                             4008 ; 2379 |#define RSRC_FUNCLET_ML_START_PLAY_ALL_SONG 1001    
                             4009 ; 2380 |//$FILENAME Funclet_ML_PlayAllNextSong.src
                             4010 ; 2381 |#define RSRC_FUNCLET_ML_PLAY_ALL_NEXT_SONG 1002    
                             4011 ; 2382 |//$FILENAME Funclet_ML_PlayAllPreviousSong.src
                             4012 ; 2383 |#define RSRC_FUNCLET_ML_PLAY_ALL_PREVIOUS_SONG 1003    
                             4013 ; 2384 |//$FILENAME Funclet_ML_PlayPreviousDirSong.src
                             4014 ; 2385 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_DIR_SONG 1004    
                             4015 ; 2386 |//$FILENAME Funclet_ML_ShuffleNextSong.src
                             4016 ; 2387 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_SONG 1005    
                             4017 ; 2388 |//$FILENAME Funclet_ML_PlayNextSong.src
                             4018 ; 2389 |#define RSRC_FUNCLET_ML_PLAY_NEXT_SONG 1006    
                             4019 ; 2390 |//$FILENAME Funclet_ML_PlayPreviousSong.src
                             4020 ; 2391 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_SONG 1007    
                             4021 ; 2392 |//$FILENAME Funclet_BuildVoiceFilePath.src
                             4022 ; 2393 |#define RSRC_FUNCLET_BUILDVOICEFILEPATH 1008    
                             4023 ; 2394 |//$FILENAME Funclet_BuildFMFilePath.src
                             4024 ; 2395 |#define RSRC_FUNCLET_BUILDFMFILEPATH 1009    
                             4025 ; 2396 |//$FILENAME Funclet_BuildLINEINFilePath.src
                             4026 ; 2397 |#define RSRC_FUNCLET_BUILDLINEINFILEPATH 1010    
                             4027 ; 2398 |//$FILENAME Funclet_GetVoiceFastKey.src
                             4028 ; 2399 |#define RSRC_FUNCLET_GETVOICEFASTKEY 1011    
                             4029 ; 2400 |//$FILENAME MusicLibVoiceApp.src
                             4030 ; 2401 |#define RSRC_MUSICLIB_VOICE_APP 1012    
                             4031 ; 2402 |//$FILENAME MusicLibVoiceModule.src
                             4032 ; 2403 |#define RSRC_MUSICLIB_VOICE_MODULE 1013    
                             4033 ; 2404 |//$FILENAME MusicLibVoicePlayModule.src
                             4034 ; 2405 |#define RSRC_MUSICLIB_VOICEPLAY_MODULE 1014    
                             4035 ; 2406 |//$FILENAME MusicLibMergeFunction.src
                             4036 ; 2407 |#define RSRC_MUSICLIB_MERGE_FUNCTION 1015    
                             4037 ; 2408 |//$FILENAME MusicLibMergeModule.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4038 ; 2409 |#define RSRC_MUSICLIB_MERGE_MODULE 1016    
                             4039 ; 2410 |//$FILENAME MusicLibBrowseApp.src
                             4040 ; 2411 |#define RSRC_MUSICLIB_BROWSE_APP 1017    
                             4041 ; 2412 |//$FILENAME playmusicmenu.src
                             4042 ; 2413 |#define RSRC_PLAYMUSIC_MENU_CODE_BANK 1018    
                             4043 ; 2414 |//$FILENAME browsemenu.src
                             4044 ; 2415 |#define RSRC_BROWSE_MENU_CODE_BANK 1019    
                             4045 ; 2416 |//$FILENAME browsemenu_extra.src
                             4046 ; 2417 |#define RSRC_BROWSE_MENU_EXTRA_CODE_BANK 1020    
                             4047 ; 2418 |//$FILENAME string_play_all.src
                             4048 ; 2419 |#define RSRC_STRING_PLAY_ALL 1021    
                             4049 ; 2420 |//$FILENAME string_play.src
                             4050 ; 2421 |#define RSRC_STRING_PLAY 1022    
                             4051 ; 2422 |//$FILENAME string_unknown_year.src
                             4052 ; 2423 |#define RSRC_STRING_UNKNOWN_YEAR 1023    
                             4053 ; 2424 |//$FILENAME string_year_width.src
                             4054 ; 2425 |#define RSRC_STRING_YEAR_WIDTH 1024    
                             4055 ; 2426 |//$FILENAME string_artist.src
                             4056 ; 2427 |#define RSRC_STRING_ARTIST 1025    
                             4057 ; 2428 |//$FILENAME string_songs.src
                             4058 ; 2429 |#define RSRC_STRING_SONGS 1026    
                             4059 ; 2430 |//$FILENAME string_on_the_fly.src
                             4060 ; 2431 |#define RSRC_STRING_ON_THE_FLY 1027    
                             4061 ; 2432 |//$FILENAME string_new_music.src
                             4062 ; 2433 |#define RSRC_STRING_NEW_MUSIC_MENU 1028    
                             4063 ; 2434 |//$FILENAME string_genre.src
                             4064 ; 2435 |#define RSRC_STRING_GENRE 1029    
                             4065 ; 2436 |//$FILENAME string_year.src
                             4066 ; 2437 |#define RSRC_STRING_YEAR 1030    
                             4067 ; 2438 |//$FILENAME string_playlist.src
                             4068 ; 2439 |#define RSRC_STRING_PLAYLIST 1031    
                             4069 ; 2440 |//$FILENAME string_fm_rec.src
                             4070 ; 2441 |#define RSRC_STRING_FM_REC 1032    
                             4071 ; 2442 |//$FILENAME string_linein_rec.src
                             4072 ; 2443 |#define RSRC_STRING_LINEIN_REC 1033    
                             4073 ; 2444 |//$FILENAME string_play_music.src
                             4074 ; 2445 |#define RSRC_STRING_PLAY_MUSIC 1034    
                             4075 ; 2446 |//$FILENAME highlight_back.src
                             4076 ; 2447 |#define RSRC_HIGHLIGHT_BACK 1035    
                             4077 ; 2448 |//$FILENAME newmusicmenu.src
                             4078 ; 2449 |#define RSRC_NEW_MUSIC_MENU_CODE_BANK 1036    
                             4079 ; 2450 |//$FILENAME string_1_day.src
                             4080 ; 2451 |#define RSRC_STRING_1_DAY 1037    
                             4081 ; 2452 |//$FILENAME string_1_week.src
                             4082 ; 2453 |#define RSRC_STRING_1_WEEK 1038    
                             4083 ; 2454 |//$FILENAME string_1_month.src
                             4084 ; 2455 |#define RSRC_STRING_1_MONTH 1039    
                             4085 ; 2456 |//$FILENAME on_the_fly_full.src
                             4086 ; 2457 |#define RSRC_LIST_FULL_MESSAGE 1040    
                             4087 ; 2458 |//$FILENAME on_the_fly_free1.src
                             4088 ; 2459 |#define RSRC_LIST_FREE_MESSAGE 1041    
                             4089 ; 2460 |//$FILENAME on_the_fly_free2.src
                             4090 ; 2461 |#define RSRC_LIST_FREE_MESSAGE2 1042    
                             4091 ; 2462 |//$FILENAME on_the_fly_delete1.src
                             4092 ; 2463 |#define RSRC_LIST_DELETE_MESSAGE 1043    
                             4093 ; 2464 |//$FILENAME on_the_fly_delete2.src
                             4094 ; 2465 |#define RSRC_LIST_DELETE_MESSAGE2 1044    
                             4095 ; 2466 |//$FILENAME empty_favourite.src
                             4096 ; 2467 |#define RSRC_EMPTY_FAVOURITE 1045    
                             4097 ; 2468 |//$FILENAME sd_remove.src
                             4098 ; 2469 |#define RSRC_SD_REMOVE 1046    
                             4099 ; 2470 |//$FILENAME sd_insert.src
                             4100 ; 2471 |#define RSRC_SD_INSERT 1047    
                             4101 ; 2472 |//$FILENAME check_disk_1.src
                             4102 ; 2473 |#define RSRC_CHECK_DISK_1 1048    
                             4103 ; 2474 |//$FILENAME check_disk_2.src
                             4104 ; 2475 |#define RSRC_CHECK_DISK_2 1049    
                             4105 ; 2476 |//$FILENAME check_disk_3.src
                             4106 ; 2477 |#define RSRC_CHECK_DISK_3 1050    
                             4107 ; 2478 |//$FILENAME flash_error.src
                             4108 ; 2479 |#define RSRC_FLASH_ERROR 1051    
                             4109 ; 2480 |
                             4110 ; 2481 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4111 ; 2482 |// STFM1000 Tuner funclet
                             4112 ; 2483 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4113 ; 2484 |//$FILENAME Funclet_TunerDriverInit.src
                             4114 ; 2485 |#define RSRC_FUNCLET_TUNER_DRIVER_INIT 1052    
                             4115 ; 2486 |//$FILENAME Funclet_TunerDriverIncUp.src
                             4116 ; 2487 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_UP 1053    
                             4117 ; 2488 |//$FILENAME Funclet_TunerDriverIncDown.src
                             4118 ; 2489 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN 1054    
                             4119 ; 2490 |//$FILENAME Funclet_TunerDriverStandyby.src
                             4120 ; 2491 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY 1055    
                             4121 ; 2492 |//$FILENAME Funclet_TunerDriverReplacePreset.src
                             4122 ; 2493 |#define RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET 1056    
                             4123 ; 2494 |//$FILENAME Funclet_TunerDriverErasePreset.src
                             4124 ; 2495 |#define RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET 1057    
                             4125 ; 2496 |//$FILENAME Funclet_TunerDriverTuneToPreset.src
                             4126 ; 2497 |#define RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET 1058    
                             4127 ; 2498 |//$FILENAME Funclet_TunerDriverSearchDown.src
                             4128 ; 2499 |#define RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN 1059    
                             4129 ; 2500 |//$FILENAME Funclet_TunerSTFM1000SafePowerDown.src
                             4130 ; 2501 |#define RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN 1060    
                             4131 ; 2502 |//$FILENAME Funclet_TunerSTFM1000OptimizeChannel.src
                             4132 ; 2503 |#define RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL 1061    
                             4133 ; 2504 |//$FILENAME decstfmmod.src
                             4134 ; 2505 |#define RSRC_DEC_STFM_MOD_CODE 1062    
                             4135 ; 2506 |//$FILENAME dec_stfmp.src
                             4136 ; 2507 |#define RSRC_DEC_STFMP_CODE 1063    
                             4137 ; 2508 |//$FILENAME dec_stfmx.src
                             4138 ; 2509 |#define RSRC_DEC_STFMX_CODE 1064    
                             4139 ; 2510 |//$FILENAME dec_stfmy.src
                             4140 ; 2511 |#define RSRC_DEC_STFMY_CODE 1065    
                             4141 ; 2512 |//$FILENAME Funclet_TunerSTFM1000I2CInit.src
                             4142 ; 2513 |#define RSRC_FUNCLET_STFM1000_I2C_INIT 1066    
                             4143 ; 2514 |//$FILENAME Funclet_TunerDriverScanStations.src
                             4144 ; 2515 |#define RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION 1067    
                             4145 ; 2516 |//$FILENAME Funclet_TunerDriverSetMonoStereoMode.src
                             4146 ; 2517 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE 1068    
                             4147 ; 2518 |//$FILENAME Funclet_STFM1000TestPresence.src
                             4148 ; 2519 |#define RSRC_FUNCLET_STFM1000_TEST_PRESENCE 1069    
                             4149 ; 2520 |//$FILENAME Funclet_I2CWriteTunerRegister.src
                             4150 ; 2521 |#define RSRC_FUNCLET_I2C_WRITE_TUNER_REGISTER 1070    
                             4151 ; 2522 |//$FILENAME Funclet_I2CReset.src
                             4152 ; 2523 |#define RSRC_FUNCLET_I2C_RESET 1071    
                             4153 ; 2524 |//$FILENAME fmtunersecondrsrc.src
                             4154 ; 2525 |#define RSRC_FM_TUNER_SECOND_RSRC 1072    
                             4155 ; 2526 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp1.src
                             4156 ; 2527 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP1 1073    
                             4157 ; 2528 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp2.src
                             4158 ; 2529 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP2 1074    
                             4159 ; 2530 |//$FILENAME Funclet_TunerSTFM1000FindRssiThreshold.src
                             4160 ; 2531 |#define RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD 1075    
                             4161 ; 2532 |//$FILENAME Funclet_TunerSTFM1000DataPathOff.src
                             4162 ; 2533 |#define RSRC_FUNCLET_STFM1000_DATA_PATH_OFF 1076    
                             4163 ; 2534 |//$FILENAME Funclet_TunerSTFM1000ContinueSearching.src
                             4164 ; 2535 |#define RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING 1077    
                             4165 ; 2536 |//RSRC_FUNCLET_STFM1000_SET_LNA_BIAS    equ      975    ;$FILENAME Funclet_STFM1000SetLnaBias.src
                             4166 ; 2537 |//RSRC_FUNCLET_STFM1000_LOOK_FOR_PILOT    equ      976    ;$FILENAME Funclet_STFM1000LookForPilot.src
                             4167 ; 2538 |//$FILENAME Funclet_STFM1000TunerSearchEnded.src
                             4168 ; 2539 |#define RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED 1078    
                             4169 ; 2540 |// for RestoreDriveFromBackup
                             4170 ; 2541 |//$FILENAME restoresysdrive.src
                             4171 ; 2542 |#define RSRC_RESTORESYSDRIVE_P_CODE 1079    
                             4172 ; 2543 |
                             4173 ; 2544 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4174 ; 2545 |// Playlist5 sources
                             4175 ; 2546 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4176 ; 2547 |//$FILENAME playlist5_browsemenu.src
                             4177 ; 2548 |#define RSRC_PL5BROWSE_MENU_CODEBANK 1080    
                             4178 ; 2549 |//$FILENAME playlist5_browsemenu_extra.src
                             4179 ; 2550 |#define RSRC_PL5_BROWSEMENU_EXTRA 1081    
                             4180 ; 2551 |//$FILENAME playlist5_browse_submenu.src
                             4181 ; 2552 |#define RSRC_PL5BROWSE_SUBMENU_CODEBANK 1082    
                             4182 ; 2553 |//$FILENAME playlist5_playback_module.src
                             4183 ; 2554 |#define RSRC_PLAYLIST5_PLAYBACK_MODULE 1083    
                             4184 ; 2555 |//$FILENAME playlist5_browse_module.src
                             4185 ; 2556 |#define RSRC_PLAYLIST5_BROWSE_MODULE 1084    
                             4186 ; 2557 |
                             4187 ; 2558 |//$FILENAME Funclet_Get_LRCDirName_PL5.src
                             4188 ; 2559 |#define RSRC_FUNCLET_GET_LRC_DIR_NAME_PL5 1085    
                             4189 ; 2560 |//$FILENAME Funclet_PL5_PL_QueuePushBack.src   
                             4190 ; 2561 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHBACK 1086    
                             4191 ; 2562 |//$FILENAME Funclet_PL5_PL_QueuePushFront.src 
                             4192 ; 2563 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHFRONT 1087    
                             4193 ; 2564 |
                             4194 ; 2565 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4195 ; 2566 |// DanhNguyen added bitmaps
                             4196 ; 2567 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4197 ; 2568 |//$FILENAME icon_folder.src
                             4198 ; 2569 |#define RSRC_ICON_FOLDER 1088    
                             4199 ; 2570 |//$FILENAME icon_song.src
                             4200 ; 2571 |#define RSRC_ICON_SONG 1089    
                             4201 ; 2572 |
                             4202 ; 2573 |//$FILENAME menu_music.src
                             4203 ; 2574 |#define RSRC_MENU_MUSIC 1090    
                             4204 ; 2575 |//$FILENAME vie_menu_music.src
                             4205 ; 2576 |#define RSRC_VIE_MENU_MUSIC 1091    
                             4206 ; 2577 |
                             4207 ; 2578 |//$FILENAME menu_voice.src
                             4208 ; 2579 |#define RSRC_MENU_VOICE 1092    
                             4209 ; 2580 |//$FILENAME vie_menu_voice.src
                             4210 ; 2581 |#define RSRC_VIE_MENU_VOICE 1093    
                             4211 ; 2582 |
                             4212 ; 2583 |//$FILENAME menu_fmtuner.src
                             4213 ; 2584 |#define RSRC_MENU_FMTUNER 1094    
                             4214 ; 2585 |//$FILENAME vie_menu_fmtuner.src
                             4215 ; 2586 |#define RSRC_VIE_MENU_FMTUNER 1095    
                             4216 ; 2587 |
                             4217 ; 2588 |//$FILENAME menu_record.src
                             4218 ; 2589 |#define RSRC_MENU_RECORD 1096    
                             4219 ; 2590 |//$FILENAME vie_menu_record.src
                             4220 ; 2591 |#define RSRC_VIE_MENU_RECORD 1097    
                             4221 ; 2592 |
                             4222 ; 2593 |//$FILENAME menu_settings.src
                             4223 ; 2594 |#define RSRC_MENU_SETTINGS 1098    
                             4224 ; 2595 |//$FILENAME vie_menu_settings.src
                             4225 ; 2596 |#define RSRC_VIE_MENU_SETTINGS 1099    
                             4226 ; 2597 |
                             4227 ; 2598 |//$FILENAME menu_shutdown.src
                             4228 ; 2599 |#define RSRC_MENU_SHUTDOWN 1100    
                             4229 ; 2600 |//$FILENAME vie_menu_shutdown.src
                             4230 ; 2601 |#define RSRC_VIE_MENU_SHUTDOWN 1101    
                             4231 ; 2602 |
                             4232 ; 2603 |//$FILENAME menu_clock.src
                             4233 ; 2604 |#define RSRC_MENU_CLOCK 1102    
                             4234 ; 2605 |//$FILENAME vie_menu_clock.src
                             4235 ; 2606 |#define RSRC_VIE_MENU_CLOCK 1103    
                             4236 ; 2607 |
                             4237 ; 2608 |//$FILENAME menu_ab.src
                             4238 ; 2609 |#define RSRC_MENU_AB 1104    
                             4239 ; 2610 |//$FILENAME vie_menu_ab.src
                             4240 ; 2611 |#define RSRC_VIE_MENU_AB 1105    
                             4241 ; 2612 |
                             4242 ; 2613 |//$FILENAME menu_delete.src
                             4243 ; 2614 |#define RSRC_MENU_DELETE 1106    
                             4244 ; 2615 |//$FILENAME vie_menu_delete.src
                             4245 ; 2616 |#define RSRC_VIE_MENU_DELETE 1107    
                             4246 ; 2617 |
                             4247 ; 2618 |//$FILENAME menu_about.src
                             4248 ; 2619 |#define RSRC_MENU_ABOUT 1108    
                             4249 ; 2620 |//$FILENAME vie_menu_about.src
                             4250 ; 2621 |#define RSRC_VIE_MENU_ABOUT 1109    
                             4251 ; 2622 |
                             4252 ; 2623 |//$FILENAME menu_exit.src
                             4253 ; 2624 |#define RSRC_MENU_EXIT 1110    
                             4254 ; 2625 |//$FILENAME vie_menu_exit.src
                             4255 ; 2626 |#define RSRC_VIE_MENU_EXIT 1111    
                             4256 ; 2627 |
                             4257 ; 2628 |//$FILENAME music_play_all.src
                             4258 ; 2629 |#define RSRC_MUSIC_PLAY_ALL 1112    
                             4259 ; 2630 |//$FILENAME vie_music_play_all.src
                             4260 ; 2631 |#define RSRC_VIE_MUSIC_PLAY_ALL 1113    
                             4261 ; 2632 |
                             4262 ; 2633 |//$FILENAME music_folder_internal.src
                             4263 ; 2634 |#define RSRC_MUSIC_FOLDER_INTERNAL 1114    
                             4264 ; 2635 |//$FILENAME vie_music_folder_internal.src
                             4265 ; 2636 |#define RSRC_VIE_MUSIC_FOLDER_INTERNAL 1115    
                             4266 ; 2637 |
                             4267 ; 2638 |//$FILENAME music_folder_external.src
                             4268 ; 2639 |#define RSRC_MUSIC_FOLDER_EXTERNAL 1116    
                             4269 ; 2640 |//$FILENAME vie_music_folder_external.src
                             4270 ; 2641 |#define RSRC_VIE_MUSIC_FOLDER_EXTERNAL 1117    
                             4271 ; 2642 |
                             4272 ; 2643 |//$FILENAME music_songs.src
                             4273 ; 2644 |#define RSRC_MUSIC_SONGS 1118    
                             4274 ; 2645 |//$FILENAME vie_music_songs.src
                             4275 ; 2646 |#define RSRC_VIE_MUSIC_SONGS 1119    
                             4276 ; 2647 |
                             4277 ; 2648 |//$FILENAME music_favorites.src
                             4278 ; 2649 |#define RSRC_MUSIC_FAVORITES 1120    
                             4279 ; 2650 |//$FILENAME vie_music_favorites.src
                             4280 ; 2651 |#define RSRC_VIE_MUSIC_FAVORITES 1121    
                             4281 ; 2652 |
                             4282 ; 2653 |//$FILENAME music_fm_record.src
                             4283 ; 2654 |#define RSRC_MUSIC_FM_RECORD 1122    
                             4284 ; 2655 |//$FILENAME vie_music_fm_record.src
                             4285 ; 2656 |#define RSRC_VIE_MUSIC_FM_RECORD 1123    
                             4286 ; 2657 |
                             4287 ; 2658 |//$FILENAME music_exit.src
                             4288 ; 2659 |#define RSRC_MUSIC_EXIT 1124    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4289 ; 2660 |//$FILENAME vie_music_exit.src
                             4290 ; 2661 |#define RSRC_VIE_MUSIC_EXIT 1125    
                             4291 ; 2662 |
                             4292 ; 2663 |//$FILENAME browse_music_folder_internal.src
                             4293 ; 2664 |#define RSRC_BROWSE_MUSIC_FOLDER_INTERNAL 1126    
                             4294 ; 2665 |//$FILENAME vie_browse_music_folder_internal.src
                             4295 ; 2666 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_INTERNAL 1127    
                             4296 ; 2667 |
                             4297 ; 2668 |//$FILENAME browse_music_folder_external.src
                             4298 ; 2669 |#define RSRC_BROWSE_MUSIC_FOLDER_EXTERNAL 1128    
                             4299 ; 2670 |//$FILENAME vie_browse_music_folder_external.src
                             4300 ; 2671 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_EXTERNAL 1129    
                             4301 ; 2672 |
                             4302 ; 2673 |//$FILENAME browse_music_list_songs.src
                             4303 ; 2674 |#define RSRC_BROWSE_MUSIC_LIST_SONGS 1130    
                             4304 ; 2675 |//$FILENAME vie_browse_music_list_songs.src
                             4305 ; 2676 |#define RSRC_VIE_BROWSE_MUSIC_LIST_SONGS 1131    
                             4306 ; 2677 |
                             4307 ; 2678 |//$FILENAME browse_music_favourites.src
                             4308 ; 2679 |#define RSRC_BROWSE_MUSIC_FAVOURITES 1132    
                             4309 ; 2680 |//$FILENAME vie_browse_music_favourites.src
                             4310 ; 2681 |#define RSRC_VIE_BROWSE_MUSIC_FAVOURITES 1133    
                             4311 ; 2682 |
                             4312 ; 2683 |//$FILENAME browse_music_fm_files.src
                             4313 ; 2684 |#define RSRC_BROWSE_MUSIC_FM_FILES 1134    
                             4314 ; 2685 |//$FILENAME vie_browse_music_fm_files.src
                             4315 ; 2686 |#define RSRC_VIE_BROWSE_MUSIC_FM_FILES 1135    
                             4316 ; 2687 |
                             4317 ; 2688 |//$FILENAME browse_voice.src
                             4318 ; 2689 |#define RSRC_BROWSE_VOICE 1136    
                             4319 ; 2690 |//$FILENAME vie_browse_voice.src
                             4320 ; 2691 |#define RSRC_VIE_BROWSE_VOICE 1137    
                             4321 ; 2692 |
                             4322 ; 2693 |//$FILENAME favourites_list_add.src
                             4323 ; 2694 |#define RSRC_FAVOURITES_LIST_ADD 1138    
                             4324 ; 2695 |//$FILENAME vie_favourites_list_add.src
                             4325 ; 2696 |#define RSRC_VIE_FAVOURITES_LIST_ADD 1139    
                             4326 ; 2697 |
                             4327 ; 2698 |//$FILENAME favourites_list_remove.src
                             4328 ; 2699 |#define RSRC_FAVOURITES_LIST_REMOVE 1140    
                             4329 ; 2700 |//$FILENAME vie_favourites_list_remove.src
                             4330 ; 2701 |#define RSRC_VIE_FAVOURITES_LIST_REMOVE 1141    
                             4331 ; 2702 |
                             4332 ; 2703 |//$FILENAME favourites_list_is_full.src
                             4333 ; 2704 |#define RSRC_FAVOURITES_LIST_IS_FULL 1142    
                             4334 ; 2705 |//$FILENAME vie_favourites_list_is_full.src
                             4335 ; 2706 |#define RSRC_VIE_FAVOURITES_LIST_IS_FULL 1143    
                             4336 ; 2707 |
                             4337 ; 2708 |//$FILENAME about_screen_1.src
                             4338 ; 2709 |#define RSRC_ABOUT_SCREEN_1 1144    
                             4339 ; 2710 |//$FILENAME vie_about_screen_1.src
                             4340 ; 2711 |#define RSRC_VIE_ABOUT_SCREEN_1 1145    
                             4341 ; 2712 |
                             4342 ; 2713 |//$FILENAME about_screen_2.src
                             4343 ; 2714 |#define RSRC_ABOUT_SCREEN_2 1146    
                             4344 ; 2715 |//$FILENAME vie_about_screen_2.src
                             4345 ; 2716 |#define RSRC_VIE_ABOUT_SCREEN_2 1147    
                             4346 ; 2717 |
                             4347 ; 2718 |//$FILENAME about_screen_3.src
                             4348 ; 2719 |#define RSRC_ABOUT_SCREEN_3 1148    
                             4349 ; 2720 |//$FILENAME vie_about_screen_3.src
                             4350 ; 2721 |#define RSRC_VIE_ABOUT_SCREEN_3 1149    
                             4351 ; 2722 |
                             4352 ; 2723 |//$FILENAME about_screen_4.src
                             4353 ; 2724 |#define RSRC_ABOUT_SCREEN_4 1150    
                             4354 ; 2725 |//$FILENAME vie_about_screen_4.src
                             4355 ; 2726 |#define RSRC_VIE_ABOUT_SCREEN_4 1151    
                             4356 ; 2727 |
                             4357 ; 2728 |//$FILENAME time_date_exit_title.src
                             4358 ; 2729 |#define RSRC_TIME_DATE_EXIT_TITLE 1152    
                             4359 ; 2730 |//$FILENAME vie_time_date_exit_title.src
                             4360 ; 2731 |#define RSRC_VIE_TIME_DATE_EXIT_TITLE 1153    
                             4361 ; 2732 |
                             4362 ; 2733 |//$FILENAME time_clean_desktop.src
                             4363 ; 2734 |#define RSRC_TIME_CLEAN_DESKTOP 1154    
                             4364 ; 2735 |//$FILENAME time_dash.src
                             4365 ; 2736 |#define RSRC_TIME_DASH 1155    
                             4366 ; 2737 |
                             4367 ; 2738 |//$FILENAME time_day_7.src
                             4368 ; 2739 |#define RSRC_TIME_DAY_SAT 1156    
                             4369 ; 2740 |//$FILENAME vie_time_day_7.src
                             4370 ; 2741 |#define RSRC_VIE_TIME_DAY_SAT 1157    
                             4371 ; 2742 |//$FILENAME time_day_cn.src
                             4372 ; 2743 |#define RSRC_TIME_DAY_SUN 1158    
                             4373 ; 2744 |//$FILENAME vie_time_day_cn.src
                             4374 ; 2745 |#define RSRC_VIE_TIME_DAY_SUN 1159    
                             4375 ; 2746 |//$FILENAME time_day_2.src
                             4376 ; 2747 |#define RSRC_TIME_DAY_MON 1160    
                             4377 ; 2748 |//$FILENAME vie_time_day_2.src
                             4378 ; 2749 |#define RSRC_VIE_TIME_DAY_MON 1161    
                             4379 ; 2750 |//$FILENAME time_day_3.src
                             4380 ; 2751 |#define RSRC_TIME_DAY_TUE 1162    
                             4381 ; 2752 |//$FILENAME vie_time_day_3.src
                             4382 ; 2753 |#define RSRC_VIE_TIME_DAY_TUE 1163    
                             4383 ; 2754 |//$FILENAME time_day_4.src
                             4384 ; 2755 |#define RSRC_TIME_DAY_WED 1164    
                             4385 ; 2756 |//$FILENAME vie_time_day_4.src
                             4386 ; 2757 |#define RSRC_VIE_TIME_DAY_WED 1165    
                             4387 ; 2758 |//$FILENAME time_day_5.src
                             4388 ; 2759 |#define RSRC_TIME_DAY_THU 1166    
                             4389 ; 2760 |//$FILENAME vie_time_day_5.src
                             4390 ; 2761 |#define RSRC_VIE_TIME_DAY_THU 1167    
                             4391 ; 2762 |//$FILENAME time_day_6.src
                             4392 ; 2763 |#define RSRC_TIME_DAY_FRI 1168    
                             4393 ; 2764 |//$FILENAME vie_time_day_6.src
                             4394 ; 2765 |#define RSRC_VIE_TIME_DAY_FRI 1169    
                             4395 ; 2766 |
                             4396 ; 2767 |//$FILENAME time_month_1.src
                             4397 ; 2768 |#define RSRC_TIME_MONTH_1 1170    
                             4398 ; 2769 |//$FILENAME vie_time_month_1.src
                             4399 ; 2770 |#define RSRC_VIE_TIME_MONTH_1 1171    
                             4400 ; 2771 |//$FILENAME time_month_2.src
                             4401 ; 2772 |#define RSRC_TIME_MONTH_2 1172    
                             4402 ; 2773 |//$FILENAME vie_time_month_2.src
                             4403 ; 2774 |#define RSRC_VIE_TIME_MONTH_2 1173    
                             4404 ; 2775 |//$FILENAME time_month_3.src
                             4405 ; 2776 |#define RSRC_TIME_MONTH_3 1174    
                             4406 ; 2777 |//$FILENAME vie_time_month_3.src
                             4407 ; 2778 |#define RSRC_VIE_TIME_MONTH_3 1175    
                             4408 ; 2779 |//$FILENAME time_month_4.src
                             4409 ; 2780 |#define RSRC_TIME_MONTH_4 1176    
                             4410 ; 2781 |//$FILENAME vie_time_month_4.src
                             4411 ; 2782 |#define RSRC_VIE_TIME_MONTH_4 1177    
                             4412 ; 2783 |//$FILENAME time_month_5.src
                             4413 ; 2784 |#define RSRC_TIME_MONTH_5 1178    
                             4414 ; 2785 |//$FILENAME vie_time_month_5.src
                             4415 ; 2786 |#define RSRC_VIE_TIME_MONTH_5 1179    
                             4416 ; 2787 |//$FILENAME time_month_6.src
                             4417 ; 2788 |#define RSRC_TIME_MONTH_6 1180    
                             4418 ; 2789 |//$FILENAME vie_time_month_6.src
                             4419 ; 2790 |#define RSRC_VIE_TIME_MONTH_6 1181    
                             4420 ; 2791 |//$FILENAME time_month_7.src
                             4421 ; 2792 |#define RSRC_TIME_MONTH_7 1182    
                             4422 ; 2793 |//$FILENAME vie_time_month_7.src
                             4423 ; 2794 |#define RSRC_VIE_TIME_MONTH_7 1183    
                             4424 ; 2795 |//$FILENAME time_month_8.src
                             4425 ; 2796 |#define RSRC_TIME_MONTH_8 1184    
                             4426 ; 2797 |//$FILENAME vie_time_month_8.src
                             4427 ; 2798 |#define RSRC_VIE_TIME_MONTH_8 1185    
                             4428 ; 2799 |//$FILENAME time_month_9.src
                             4429 ; 2800 |#define RSRC_TIME_MONTH_9 1186    
                             4430 ; 2801 |//$FILENAME vie_time_month_9.src
                             4431 ; 2802 |#define RSRC_VIE_TIME_MONTH_9 1187    
                             4432 ; 2803 |//$FILENAME time_month_10.src
                             4433 ; 2804 |#define RSRC_TIME_MONTH_10 1188    
                             4434 ; 2805 |//$FILENAME vie_time_month_10.src
                             4435 ; 2806 |#define RSRC_VIE_TIME_MONTH_10 1189    
                             4436 ; 2807 |//$FILENAME time_month_11.src
                             4437 ; 2808 |#define RSRC_TIME_MONTH_11 1190    
                             4438 ; 2809 |//$FILENAME vie_time_month_11.src
                             4439 ; 2810 |#define RSRC_VIE_TIME_MONTH_11 1191    
                             4440 ; 2811 |//$FILENAME time_month_12.src
                             4441 ; 2812 |#define RSRC_TIME_MONTH_12 1192    
                             4442 ; 2813 |//$FILENAME vie_time_month_12.src
                             4443 ; 2814 |#define RSRC_VIE_TIME_MONTH_12 1193    
                             4444 ; 2815 |
                             4445 ; 2816 |//$FILENAME time_num_am.src
                             4446 ; 2817 |#define RSRC_TIME_NUM_AM 1194    
                             4447 ; 2818 |//$FILENAME time_num_am.src
                             4448 ; 2819 |#define RSRC_TIME_NUM_PM 1195    
                             4449 ; 2820 |//$FILENAME settime_format_12h.src
                             4450 ; 2821 |#define RSRC_SETTIME_FORMAT_12H 1196    
                             4451 ; 2822 |//$FILENAME settime_format_24h.src
                             4452 ; 2823 |#define RSRC_SETTIME_FORMAT_24H 1197    
                             4453 ; 2824 |//$FILENAME setdate_format_dmy.src
                             4454 ; 2825 |#define RSRC_SETDATE_FORMAT_DMY 1198    
                             4455 ; 2826 |//$FILENAME setdate_format_mdy.src
                             4456 ; 2827 |#define RSRC_SETDATE_FORMAT_MDY 1199    
                             4457 ; 2828 |//$FILENAME setdate_format_ymd.src
                             4458 ; 2829 |#define RSRC_SETDATE_FORMAT_YMD 1200    
                             4459 ; 2830 |
                             4460 ; 2831 |//$FILENAME time_num_large_0.src
                             4461 ; 2832 |#define RSRC_TIME_NUM_LARGE_0 1201    
                             4462 ; 2833 |//$FILENAME time_num_large_1.src
                             4463 ; 2834 |#define RSRC_TIME_NUM_LARGE_1 1202    
                             4464 ; 2835 |//$FILENAME time_num_large_2.src
                             4465 ; 2836 |#define RSRC_TIME_NUM_LARGE_2 1203    
                             4466 ; 2837 |//$FILENAME time_num_large_3.src
                             4467 ; 2838 |#define RSRC_TIME_NUM_LARGE_3 1204    
                             4468 ; 2839 |//$FILENAME time_num_large_4.src
                             4469 ; 2840 |#define RSRC_TIME_NUM_LARGE_4 1205    
                             4470 ; 2841 |//$FILENAME time_num_large_5.src
                             4471 ; 2842 |#define RSRC_TIME_NUM_LARGE_5 1206    
                             4472 ; 2843 |//$FILENAME time_num_large_6.src
                             4473 ; 2844 |#define RSRC_TIME_NUM_LARGE_6 1207    
                             4474 ; 2845 |//$FILENAME time_num_large_7.src
                             4475 ; 2846 |#define RSRC_TIME_NUM_LARGE_7 1208    
                             4476 ; 2847 |//$FILENAME time_num_large_8.src
                             4477 ; 2848 |#define RSRC_TIME_NUM_LARGE_8 1209    
                             4478 ; 2849 |//$FILENAME time_num_large_9.src
                             4479 ; 2850 |#define RSRC_TIME_NUM_LARGE_9 1210    
                             4480 ; 2851 |
                             4481 ; 2852 |//$FILENAME time_num_medium_0.src
                             4482 ; 2853 |#define RSRC_TIME_NUM_MEDIUM_0 1211    
                             4483 ; 2854 |//$FILENAME time_num_medium_1.src
                             4484 ; 2855 |#define RSRC_TIME_NUM_MEDIUM_1 1212    
                             4485 ; 2856 |//$FILENAME time_num_medium_2.src
                             4486 ; 2857 |#define RSRC_TIME_NUM_MEDIUM_2 1213    
                             4487 ; 2858 |//$FILENAME time_num_medium_3.src
                             4488 ; 2859 |#define RSRC_TIME_NUM_MEDIUM_3 1214    
                             4489 ; 2860 |//$FILENAME time_num_medium_4.src
                             4490 ; 2861 |#define RSRC_TIME_NUM_MEDIUM_4 1215    
                             4491 ; 2862 |//$FILENAME time_num_medium_5.src
                             4492 ; 2863 |#define RSRC_TIME_NUM_MEDIUM_5 1216    
                             4493 ; 2864 |//$FILENAME time_num_medium_6.src
                             4494 ; 2865 |#define RSRC_TIME_NUM_MEDIUM_6 1217    
                             4495 ; 2866 |//$FILENAME time_num_medium_7.src
                             4496 ; 2867 |#define RSRC_TIME_NUM_MEDIUM_7 1218    
                             4497 ; 2868 |//$FILENAME time_num_medium_8.src
                             4498 ; 2869 |#define RSRC_TIME_NUM_MEDIUM_8 1219    
                             4499 ; 2870 |//$FILENAME time_num_medium_9.src
                             4500 ; 2871 |#define RSRC_TIME_NUM_MEDIUM_9 1220    
                             4501 ; 2872 |
                             4502 ; 2873 |//$FILENAME time_colon.src
                             4503 ; 2874 |#define RSRC_TIME_COLON 1221    
                             4504 ; 2875 |
                             4505 ; 2876 |//$FILENAME settings_backlight_title.src
                             4506 ; 2877 |#define RSRC_SETTINGS_BACKLIGHT_TITLE 1222    
                             4507 ; 2878 |//$FILENAME settings_auto_shutdown_title.src
                             4508 ; 2879 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_TITLE 1223    
                             4509 ; 2880 |//$FILENAME settings_playmode_title.src
                             4510 ; 2881 |#define RSRC_SETTINGS_PLAYMODE_TITLE 1224    
                             4511 ; 2882 |
                             4512 ; 2883 |//$FILENAME settings_contrast_title.src
                             4513 ; 2884 |#define RSRC_SETTINGS_CONTRAST_TITLE 1225    
                             4514 ; 2885 |//$FILENAME vie_settings_contrast_title.src
                             4515 ; 2886 |#define RSRC_VIE_SETTINGS_CONTRAST_TITLE 1226    
                             4516 ; 2887 |
                             4517 ; 2888 |//$FILENAME settings_eq_title.src
                             4518 ; 2889 |#define RSRC_SETTINGS_EQ_TITLE 1227    
                             4519 ; 2890 |//$FILENAME vie_settings_eq_title.src
                             4520 ; 2891 |#define RSRC_VIE_SETTINGS_EQ_TITLE 1228    
                             4521 ; 2892 |
                             4522 ; 2893 |//$FILENAME settings_exit_title.src
                             4523 ; 2894 |#define RSRC_SETTINGS_EXIT_TITLE 1229    
                             4524 ; 2895 |//$FILENAME vie_settings_exit_title.src
                             4525 ; 2896 |#define RSRC_VIE_SETTINGS_EXIT_TITLE 1230    
                             4526 ; 2897 |
                             4527 ; 2898 |//$FILENAME settings_set_date_title.src
                             4528 ; 2899 |#define RSRC_SETTINGS_SET_DATE_TITLE 1231    
                             4529 ; 2900 |//$FILENAME vie_settings_set_date_title.src
                             4530 ; 2901 |#define RSRC_VIE_SETTINGS_SET_DATE_TITLE 1232    
                             4531 ; 2902 |
                             4532 ; 2903 |//$FILENAME settings_set_time_title.src
                             4533 ; 2904 |#define RSRC_SETTINGS_SET_TIME_TITLE 1233    
                             4534 ; 2905 |//$FILENAME vie_settings_set_time_title.src
                             4535 ; 2906 |#define RSRC_VIE_SETTINGS_SET_TIME_TITLE 1234    
                             4536 ; 2907 |
                             4537 ; 2908 |//$FILENAME settings_playmode_normal.src
                             4538 ; 2909 |#define RSRC_SETTINGS_PLAYMODE_NORMAL 1235    
                             4539 ; 2910 |//$FILENAME vie_settings_playmode_normal.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4540 ; 2911 |#define RSRC_VIE_SETTINGS_PLAYMODE_NORMAL 1236    
                             4541 ; 2912 |
                             4542 ; 2913 |//$FILENAME settings_playmode_repeatone.src
                             4543 ; 2914 |#define RSRC_SETTINGS_PLAYMODE_REPEATONE 1237    
                             4544 ; 2915 |//$FILENAME vie_settings_playmode_repeatone.src
                             4545 ; 2916 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATONE 1238    
                             4546 ; 2917 |
                             4547 ; 2918 |//$FILENAME settings_playmode_repeatall.src
                             4548 ; 2919 |#define RSRC_SETTINGS_PLAYMODE_REPEATALL 1239    
                             4549 ; 2920 |//$FILENAME vie_settings_playmode_repeatall.src
                             4550 ; 2921 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATALL 1240    
                             4551 ; 2922 |
                             4552 ; 2923 |//$FILENAME settings_playmode_shuffle.src
                             4553 ; 2924 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE 1241    
                             4554 ; 2925 |//$FILENAME vie_settings_playmode_shuffle.src
                             4555 ; 2926 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE 1242    
                             4556 ; 2927 |
                             4557 ; 2928 |//$FILENAME settings_playmode_shuffle_repeat.src
                             4558 ; 2929 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1243    
                             4559 ; 2930 |//$FILENAME vie_settings_playmode_shuffle_repeat.src
                             4560 ; 2931 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1244    
                             4561 ; 2932 |
                             4562 ; 2933 |//$FILENAME settings_backlight_on.src
                             4563 ; 2934 |#define RSRC_SETTINGS_BACKLIGHT_ON 1245    
                             4564 ; 2935 |//$FILENAME vie_settings_backlight_on.src
                             4565 ; 2936 |#define RSRC_VIE_SETTINGS_BACKLIGHT_ON 1246    
                             4566 ; 2937 |
                             4567 ; 2938 |//$FILENAME settings_backlight_10s.src
                             4568 ; 2939 |#define RSRC_SETTINGS_BACKLIGHT_10S 1247    
                             4569 ; 2940 |//$FILENAME vie_settings_backlight_10s.src
                             4570 ; 2941 |#define RSRC_VIE_SETTINGS_BACKLIGHT_10S 1248    
                             4571 ; 2942 |
                             4572 ; 2943 |//$FILENAME settings_backlight_20s.src
                             4573 ; 2944 |#define RSRC_SETTINGS_BACKLIGHT_20S 1249    
                             4574 ; 2945 |//$FILENAME vie_settings_backlight_20s.src
                             4575 ; 2946 |#define RSRC_VIE_SETTINGS_BACKLIGHT_20s 1250    
                             4576 ; 2947 |
                             4577 ; 2948 |//$FILENAME settings_backlight_30s.src
                             4578 ; 2949 |#define RSRC_SETTINGS_BACKLIGHT_30S 1251    
                             4579 ; 2950 |//$FILENAME vie_settings_backlight_30s.src
                             4580 ; 2951 |#define RSRC_VIE_SETTINGS_BACKLIGHT_30S 1252    
                             4581 ; 2952 |
                             4582 ; 2953 |//$FILENAME settings_auto_shutdown_disable.src
                             4583 ; 2954 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_DISABLE 1253    
                             4584 ; 2955 |//$FILENAME vie_settings_auto_shutdown_disable.src
                             4585 ; 2956 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_DISABLE 1254    
                             4586 ; 2957 |
                             4587 ; 2958 |//$FILENAME settings_auto_shutdown_1minute.src
                             4588 ; 2959 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1255    
                             4589 ; 2960 |//$FILENAME vie_settings_auto_shutdown_1min.src
                             4590 ; 2961 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1256    
                             4591 ; 2962 |
                             4592 ; 2963 |//$FILENAME settings_auto_shutdown_2minutes.src
                             4593 ; 2964 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1257    
                             4594 ; 2965 |//$FILENAME vie_settings_auto_shutdown_2min.src
                             4595 ; 2966 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1258    
                             4596 ; 2967 |
                             4597 ; 2968 |//$FILENAME settings_auto_shutdown_5minutes.src
                             4598 ; 2969 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1259    
                             4599 ; 2970 |//$FILENAME vie_settings_auto_shutdown_5min.src
                             4600 ; 2971 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1260    
                             4601 ; 2972 |
                             4602 ; 2973 |//$FILENAME settings_auto_shutdown_10minutes.src
                             4603 ; 2974 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1261    
                             4604 ; 2975 |//$FILENAME vie_settings_auto_shutdown_10min.src
                             4605 ; 2976 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1262    
                             4606 ; 2977 |
                             4607 ; 2978 |//$FILENAME settings_languages_eng.src
                             4608 ; 2979 |#define RSRC_SETTINGS_LANGUAGES_ENG 1263    
                             4609 ; 2980 |//$FILENAME settings_languages_vie.src
                             4610 ; 2981 |#define RSRC_SETTINGS_LANGUAGES_VIE 1264    
                             4611 ; 2982 |
                             4612 ; 2983 |//$FILENAME fraction_dot.src
                             4613 ; 2984 |#define RSRC_FRACTION_DOT 1265    
                             4614 ; 2985 |
                             4615 ; 2986 |//$FILENAME fm_background.src
                             4616 ; 2987 |#define RSRC_FM_BACKGROUND 1266    
                             4617 ; 2988 |//$FILENAME vie_fm_background.src
                             4618 ; 2989 |#define RSRC_VIE_FM_BACKGROUND 1267    
                             4619 ; 2990 |
                             4620 ; 2991 |//$FILENAME searching_please_wait.src
                             4621 ; 2992 |#define RSRC_SEARCHING_PLEASE_WAIT 1268    
                             4622 ; 2993 |//$FILENAME vie_searching_please_wait.src
                             4623 ; 2994 |#define RSRC_VIE_SEARCHING_PLEASE_WAIT 1269    
                             4624 ; 2995 |
                             4625 ; 2996 |//$FILENAME fm_auto_search.src
                             4626 ; 2997 |#define RSRC_FM_AUTO_SEARCH 1270    
                             4627 ; 2998 |//$FILENAME vie_fm_auto_search.src
                             4628 ; 2999 |#define RSRC_VIE_FM_AUTO_SEARCH 1271    
                             4629 ; 3000 |
                             4630 ; 3001 |//$FILENAME jvj_shutdown_player.src
                             4631 ; 3002 |#define RSRC_JVJ_SHUTDOWN_PLAYER 1272    
                             4632 ; 3003 |//$FILENAME vie_jvj_shutdown_player.src
                             4633 ; 3004 |#define RSRC_VIE_JVJ_SHUTDOWN_PLAYER 1273    
                             4634 ; 3005 |
                             4635 ; 3006 |#endif //IF (!@def(resources))
                             4636 ; 3007 |
                             4637 
                             4639 
                             4640 ; 6    |#include "buttons.h"
                             4641 
                             4643 
                             4644 ; 1    |#ifndef _BUTTONS_H
                             4645 ; 2    |#define _BUTTONS_H
                             4646 ; 3    |
                             4647 ; 4    |#include "types.h"
                             4648 
                             4650 
                             4651 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4652 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4653 ; 3    |//
                             4654 ; 4    |// Filename: types.h
                             4655 ; 5    |// Description: Standard data types
                             4656 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4657 ; 7    |
                             4658 ; 8    |#ifndef _TYPES_H
                             4659 ; 9    |#define _TYPES_H
                             4660 ; 10   |
                             4661 ; 11   |// TODO:  move this outta here!
                             4662 ; 12   |#if !defined(NOERROR)
                             4663 ; 13   |#define NOERROR 0
                             4664 ; 14   |#define SUCCESS 0
                             4665 ; 15   |#endif 
                             4666 ; 16   |#if !defined(SUCCESS)
                             4667 ; 17   |#define SUCCESS  0
                             4668 ; 18   |#endif
                             4669 ; 19   |#if !defined(ERROR)
                             4670 ; 20   |#define ERROR   -1
                             4671 ; 21   |#endif
                             4672 ; 22   |#if !defined(FALSE)
                             4673 ; 23   |#define FALSE 0
                             4674 ; 24   |#endif
                             4675 ; 25   |#if !defined(TRUE)
                             4676 ; 26   |#define TRUE  1
                             4677 ; 27   |#endif
                             4678 ; 28   |
                             4679 ; 29   |#if !defined(NULL)
                             4680 ; 30   |#define NULL 0
                             4681 ; 31   |#endif
                             4682 ; 32   |
                             4683 ; 33   |#define MAX_INT     0x7FFFFF
                             4684 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4685 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4686 ; 36   |#define MAX_ULONG   (-1) 
                             4687 ; 37   |
                             4688 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4689 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4690 ; 40   |
                             4691 ; 41   |
                             4692 ; 42   |#define BYTE    unsigned char       // btVarName
                             4693 ; 43   |#define CHAR    signed char         // cVarName
                             4694 ; 44   |#define USHORT  unsigned short      // usVarName
                             4695 ; 45   |#define SHORT   unsigned short      // sVarName
                             4696 ; 46   |#define WORD    unsigned int        // wVarName
                             4697 ; 47   |#define INT     signed int          // iVarName
                             4698 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4699 ; 49   |#define LONG    signed long         // lVarName
                             4700 ; 50   |#define BOOL    unsigned int        // bVarName
                             4701 ; 51   |#define FRACT   _fract              // frVarName
                             4702 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4703 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4704 ; 54   |#define FLOAT   float               // fVarName
                             4705 ; 55   |#define DBL     double              // dVarName
                             4706 ; 56   |#define ENUM    enum                // eVarName
                             4707 ; 57   |#define CMX     _complex            // cmxVarName
                             4708 ; 58   |typedef WORD UCS3;                   // 
                             4709 ; 59   |
                             4710 ; 60   |#define UINT16  unsigned short
                             4711 ; 61   |#define UINT8   unsigned char   
                             4712 ; 62   |#define UINT32  unsigned long
                             4713 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4714 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4715 ; 65   |#define WCHAR   UINT16
                             4716 ; 66   |
                             4717 ; 67   |//UINT128 is 16 bytes or 6 words
                             4718 ; 68   |typedef struct UINT128_3500 {   
                             4719 ; 69   |    int val[6];     
                             4720 ; 70   |} UINT128_3500;
                             4721 ; 71   |
                             4722 ; 72   |#define UINT128   UINT128_3500
                             4723 ; 73   |
                             4724 ; 74   |// Little endian word packed byte strings:   
                             4725 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4726 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4727 ; 77   |// Little endian word packed byte strings:   
                             4728 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4729 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4730 ; 80   |
                             4731 ; 81   |// Declare Memory Spaces To Use When Coding
                             4732 ; 82   |// A. Sector Buffers
                             4733 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4734 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4735 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4736 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4737 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4738 ; 88   |// B. Media DDI Memory
                             4739 ; 89   |#define MEDIA_DDI_MEM _Y
                             4740 ; 90   |
                             4741 ; 91   |
                             4742 ; 92   |
                             4743 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4744 ; 94   |// Examples of circular pointers:
                             4745 ; 95   |//    INT CIRC cpiVarName
                             4746 ; 96   |//    DWORD CIRC cpdwVarName
                             4747 ; 97   |
                             4748 ; 98   |#define RETCODE INT                 // rcVarName
                             4749 ; 99   |
                             4750 ; 100  |// generic bitfield structure
                             4751 ; 101  |struct Bitfield {
                             4752 ; 102  |    unsigned int B0  :1;
                             4753 ; 103  |    unsigned int B1  :1;
                             4754 ; 104  |    unsigned int B2  :1;
                             4755 ; 105  |    unsigned int B3  :1;
                             4756 ; 106  |    unsigned int B4  :1;
                             4757 ; 107  |    unsigned int B5  :1;
                             4758 ; 108  |    unsigned int B6  :1;
                             4759 ; 109  |    unsigned int B7  :1;
                             4760 ; 110  |    unsigned int B8  :1;
                             4761 ; 111  |    unsigned int B9  :1;
                             4762 ; 112  |    unsigned int B10 :1;
                             4763 ; 113  |    unsigned int B11 :1;
                             4764 ; 114  |    unsigned int B12 :1;
                             4765 ; 115  |    unsigned int B13 :1;
                             4766 ; 116  |    unsigned int B14 :1;
                             4767 ; 117  |    unsigned int B15 :1;
                             4768 ; 118  |    unsigned int B16 :1;
                             4769 ; 119  |    unsigned int B17 :1;
                             4770 ; 120  |    unsigned int B18 :1;
                             4771 ; 121  |    unsigned int B19 :1;
                             4772 ; 122  |    unsigned int B20 :1;
                             4773 ; 123  |    unsigned int B21 :1;
                             4774 ; 124  |    unsigned int B22 :1;
                             4775 ; 125  |    unsigned int B23 :1;
                             4776 ; 126  |};
                             4777 ; 127  |
                             4778 ; 128  |union BitInt {
                             4779 ; 129  |        struct Bitfield B;
                             4780 ; 130  |        int        I;
                             4781 ; 131  |};
                             4782 ; 132  |
                             4783 ; 133  |#define MAX_MSG_LENGTH 10
                             4784 ; 134  |struct CMessage
                             4785 ; 135  |{
                             4786 ; 136  |        unsigned int m_uLength;
                             4787 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4788 ; 138  |};
                             4789 ; 139  |
                             4790 ; 140  |typedef struct {
                             4791 ; 141  |    WORD m_wLength;
                             4792 ; 142  |    WORD m_wMessage;
                             4793 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4794 ; 144  |} Message;
                             4795 ; 145  |
                             4796 ; 146  |struct MessageQueueDescriptor
                             4797 ; 147  |{
                             4798 ; 148  |        int *m_pBase;
                             4799 ; 149  |        int m_iModulo;
                             4800 ; 150  |        int m_iSize;
                             4801 ; 151  |        int *m_pHead;
                             4802 ; 152  |        int *m_pTail;
                             4803 ; 153  |};
                             4804 ; 154  |
                             4805 ; 155  |struct ModuleEntry
                             4806 ; 156  |{
                             4807 ; 157  |    int m_iSignaledEventMask;
                             4808 ; 158  |    int m_iWaitEventMask;
                             4809 ; 159  |    int m_iResourceOfCode;
                             4810 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4811 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             4812 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4813 ; 163  |    int m_uTimeOutHigh;
                             4814 ; 164  |    int m_uTimeOutLow;
                             4815 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4816 ; 166  |};
                             4817 ; 167  |
                             4818 ; 168  |union WaitMask{
                             4819 ; 169  |    struct B{
                             4820 ; 170  |        unsigned int m_bNone     :1;
                             4821 ; 171  |        unsigned int m_bMessage  :1;
                             4822 ; 172  |        unsigned int m_bTimer    :1;
                             4823 ; 173  |        unsigned int m_bButton   :1;
                             4824 ; 174  |    } B;
                             4825 ; 175  |    int I;
                             4826 ; 176  |} ;
                             4827 ; 177  |
                             4828 ; 178  |
                             4829 ; 179  |struct Button {
                             4830 ; 180  |        WORD wButtonEvent;
                             4831 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4832 ; 182  |};
                             4833 ; 183  |
                             4834 ; 184  |struct Message {
                             4835 ; 185  |        WORD wMsgLength;
                             4836 ; 186  |        WORD wMsgCommand;
                             4837 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4838 ; 188  |};
                             4839 ; 189  |
                             4840 ; 190  |union EventTypes {
                             4841 ; 191  |        struct CMessage msg;
                             4842 ; 192  |        struct Button Button ;
                             4843 ; 193  |        struct Message Message;
                             4844 ; 194  |};
                             4845 ; 195  |
                             4846 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4847 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4848 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4849 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4850 ; 200  |
                             4851 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4852 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4853 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4854 ; 204  |
                             4855 ; 205  |#if DEBUG
                             4856 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4857 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4858 ; 208  |#else 
                             4859 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             4860 ; 210  |#define DebugBuildAssert(x)    
                             4861 ; 211  |#endif
                             4862 ; 212  |
                             4863 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4864 ; 214  |//  #pragma asm
                             4865 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4866 ; 216  |//  #pragma endasm
                             4867 ; 217  |
                             4868 ; 218  |
                             4869 ; 219  |#ifdef COLOR_262K
                             4870 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             4871 ; 221  |#elif defined(COLOR_65K)
                             4872 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             4873 ; 223  |#else
                             4874 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             4875 ; 225  |#endif
                             4876 ; 226  |    
                             4877 ; 227  |#endif // #ifndef _TYPES_H
                             4878 
                             4880 
                             4881 ; 5    |
                             4882 ; 6    |//These must match the definintions in buttondefs.inc, otherwise the button presses will trigger
                             4883 ; 7    |//unexpected events.
                             4884 ; 8    |
                             4885 ; 9    |#define PR_RW           0
                             4886 ; 10   |#define PH_RW                   1
                             4887 ; 11   |#define PR_FF           2
                             4888 ; 12   |#define PH_FF           3
                             4889 ; 13   |#define PR_MENU         4
                             4890 ; 14   |#define PH_MENU         5
                             4891 ; 15   |#define PR_RV           6
                             4892 ; 16   |#define PH_RV           7
                             4893 ; 17   |#define PR_PLAY                 8
                             4894 ; 18   |#define PH_PLAY         9
                             4895 ; 19   |#define PR_HOLD         10
                             4896 ; 20   |#define PH_HOLD         11
                             4897 ; 21   |#define PR_VOL_DOWN     12
                             4898 ; 22   |#define PR_VOL_UP       13
                             4899 ; 23   |
                             4900 ; 24   |
                             4901 ; 25   |
                             4902 ; 26   |
                             4903 ; 27   |#define PH_VOL_DOWN     14
                             4904 ; 28   |#define PH_VOL_UP       15
                             4905 ; 29   |#define PR_MODE         24
                             4906 ; 30   |#define PR_STOP                 25
                             4907 ; 31   |#define PH_STOP         26
                             4908 ; 32   |#define PR_RECORD      27
                             4909 ; 33   |#define PH_RECORD       28
                             4910 ; 34   |#define PR_AB           33
                             4911 ; 35   |#define PR_ERASE        34
                             4912 ; 36   |#define PH_ERASE        35
                             4913 ; 37   |#define PR_EQ           36
                             4914 ; 38   |#define PH_EQ       37
                             4915 ; 39   |
                             4916 ; 40   |
                             4917 ; 41   |
                             4918 ; 42   |
                             4919 ; 43   |extern WORD g_wLastButton;
                             4920 ; 44   |
                             4921 ; 45   |#endif //_BUTTONS_H
                             4922 
                             4924 
                             4925 ; 7    |#include "menus.h"
                             4926 
                             4928 
                             4929 ; 1    |#ifndef _MENU_H
                             4930 ; 2    |#define _MENU_H
                             4931 ; 3    |
                             4932 ; 4    |#include "types.h"
                             4933 
                             4935 
                             4936 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4937 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4938 ; 3    |//
                             4939 ; 4    |// Filename: types.h
                             4940 ; 5    |// Description: Standard data types
                             4941 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4942 ; 7    |
                             4943 ; 8    |#ifndef _TYPES_H
                             4944 ; 9    |#define _TYPES_H
                             4945 ; 10   |
                             4946 ; 11   |// TODO:  move this outta here!
                             4947 ; 12   |#if !defined(NOERROR)
                             4948 ; 13   |#define NOERROR 0
                             4949 ; 14   |#define SUCCESS 0
                             4950 ; 15   |#endif 
                             4951 ; 16   |#if !defined(SUCCESS)
                             4952 ; 17   |#define SUCCESS  0
                             4953 ; 18   |#endif
                             4954 ; 19   |#if !defined(ERROR)
                             4955 ; 20   |#define ERROR   -1
                             4956 ; 21   |#endif
                             4957 ; 22   |#if !defined(FALSE)
                             4958 ; 23   |#define FALSE 0
                             4959 ; 24   |#endif
                             4960 ; 25   |#if !defined(TRUE)
                             4961 ; 26   |#define TRUE  1
                             4962 ; 27   |#endif
                             4963 ; 28   |
                             4964 ; 29   |#if !defined(NULL)
                             4965 ; 30   |#define NULL 0
                             4966 ; 31   |#endif
                             4967 ; 32   |
                             4968 ; 33   |#define MAX_INT     0x7FFFFF
                             4969 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4970 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4971 ; 36   |#define MAX_ULONG   (-1) 
                             4972 ; 37   |
                             4973 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4974 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4975 ; 40   |
                             4976 ; 41   |
                             4977 ; 42   |#define BYTE    unsigned char       // btVarName
                             4978 ; 43   |#define CHAR    signed char         // cVarName
                             4979 ; 44   |#define USHORT  unsigned short      // usVarName
                             4980 ; 45   |#define SHORT   unsigned short      // sVarName
                             4981 ; 46   |#define WORD    unsigned int        // wVarName
                             4982 ; 47   |#define INT     signed int          // iVarName
                             4983 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4984 ; 49   |#define LONG    signed long         // lVarName
                             4985 ; 50   |#define BOOL    unsigned int        // bVarName
                             4986 ; 51   |#define FRACT   _fract              // frVarName
                             4987 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4988 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4989 ; 54   |#define FLOAT   float               // fVarName
                             4990 ; 55   |#define DBL     double              // dVarName
                             4991 ; 56   |#define ENUM    enum                // eVarName
                             4992 ; 57   |#define CMX     _complex            // cmxVarName
                             4993 ; 58   |typedef WORD UCS3;                   // 
                             4994 ; 59   |
                             4995 ; 60   |#define UINT16  unsigned short
                             4996 ; 61   |#define UINT8   unsigned char   
                             4997 ; 62   |#define UINT32  unsigned long
                             4998 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4999 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             5000 ; 65   |#define WCHAR   UINT16
                             5001 ; 66   |
                             5002 ; 67   |//UINT128 is 16 bytes or 6 words
                             5003 ; 68   |typedef struct UINT128_3500 {   
                             5004 ; 69   |    int val[6];     
                             5005 ; 70   |} UINT128_3500;
                             5006 ; 71   |
                             5007 ; 72   |#define UINT128   UINT128_3500
                             5008 ; 73   |
                             5009 ; 74   |// Little endian word packed byte strings:   
                             5010 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5011 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5012 ; 77   |// Little endian word packed byte strings:   
                             5013 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5014 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5015 ; 80   |
                             5016 ; 81   |// Declare Memory Spaces To Use When Coding
                             5017 ; 82   |// A. Sector Buffers
                             5018 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5019 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5020 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5021 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5022 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5023 ; 88   |// B. Media DDI Memory
                             5024 ; 89   |#define MEDIA_DDI_MEM _Y
                             5025 ; 90   |
                             5026 ; 91   |
                             5027 ; 92   |
                             5028 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5029 ; 94   |// Examples of circular pointers:
                             5030 ; 95   |//    INT CIRC cpiVarName
                             5031 ; 96   |//    DWORD CIRC cpdwVarName
                             5032 ; 97   |
                             5033 ; 98   |#define RETCODE INT                 // rcVarName
                             5034 ; 99   |
                             5035 ; 100  |// generic bitfield structure
                             5036 ; 101  |struct Bitfield {
                             5037 ; 102  |    unsigned int B0  :1;
                             5038 ; 103  |    unsigned int B1  :1;
                             5039 ; 104  |    unsigned int B2  :1;
                             5040 ; 105  |    unsigned int B3  :1;
                             5041 ; 106  |    unsigned int B4  :1;
                             5042 ; 107  |    unsigned int B5  :1;
                             5043 ; 108  |    unsigned int B6  :1;
                             5044 ; 109  |    unsigned int B7  :1;
                             5045 ; 110  |    unsigned int B8  :1;
                             5046 ; 111  |    unsigned int B9  :1;
                             5047 ; 112  |    unsigned int B10 :1;
                             5048 ; 113  |    unsigned int B11 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5049 ; 114  |    unsigned int B12 :1;
                             5050 ; 115  |    unsigned int B13 :1;
                             5051 ; 116  |    unsigned int B14 :1;
                             5052 ; 117  |    unsigned int B15 :1;
                             5053 ; 118  |    unsigned int B16 :1;
                             5054 ; 119  |    unsigned int B17 :1;
                             5055 ; 120  |    unsigned int B18 :1;
                             5056 ; 121  |    unsigned int B19 :1;
                             5057 ; 122  |    unsigned int B20 :1;
                             5058 ; 123  |    unsigned int B21 :1;
                             5059 ; 124  |    unsigned int B22 :1;
                             5060 ; 125  |    unsigned int B23 :1;
                             5061 ; 126  |};
                             5062 ; 127  |
                             5063 ; 128  |union BitInt {
                             5064 ; 129  |        struct Bitfield B;
                             5065 ; 130  |        int        I;
                             5066 ; 131  |};
                             5067 ; 132  |
                             5068 ; 133  |#define MAX_MSG_LENGTH 10
                             5069 ; 134  |struct CMessage
                             5070 ; 135  |{
                             5071 ; 136  |        unsigned int m_uLength;
                             5072 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5073 ; 138  |};
                             5074 ; 139  |
                             5075 ; 140  |typedef struct {
                             5076 ; 141  |    WORD m_wLength;
                             5077 ; 142  |    WORD m_wMessage;
                             5078 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5079 ; 144  |} Message;
                             5080 ; 145  |
                             5081 ; 146  |struct MessageQueueDescriptor
                             5082 ; 147  |{
                             5083 ; 148  |        int *m_pBase;
                             5084 ; 149  |        int m_iModulo;
                             5085 ; 150  |        int m_iSize;
                             5086 ; 151  |        int *m_pHead;
                             5087 ; 152  |        int *m_pTail;
                             5088 ; 153  |};
                             5089 ; 154  |
                             5090 ; 155  |struct ModuleEntry
                             5091 ; 156  |{
                             5092 ; 157  |    int m_iSignaledEventMask;
                             5093 ; 158  |    int m_iWaitEventMask;
                             5094 ; 159  |    int m_iResourceOfCode;
                             5095 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5096 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             5097 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5098 ; 163  |    int m_uTimeOutHigh;
                             5099 ; 164  |    int m_uTimeOutLow;
                             5100 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5101 ; 166  |};
                             5102 ; 167  |
                             5103 ; 168  |union WaitMask{
                             5104 ; 169  |    struct B{
                             5105 ; 170  |        unsigned int m_bNone     :1;
                             5106 ; 171  |        unsigned int m_bMessage  :1;
                             5107 ; 172  |        unsigned int m_bTimer    :1;
                             5108 ; 173  |        unsigned int m_bButton   :1;
                             5109 ; 174  |    } B;
                             5110 ; 175  |    int I;
                             5111 ; 176  |} ;
                             5112 ; 177  |
                             5113 ; 178  |
                             5114 ; 179  |struct Button {
                             5115 ; 180  |        WORD wButtonEvent;
                             5116 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5117 ; 182  |};
                             5118 ; 183  |
                             5119 ; 184  |struct Message {
                             5120 ; 185  |        WORD wMsgLength;
                             5121 ; 186  |        WORD wMsgCommand;
                             5122 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5123 ; 188  |};
                             5124 ; 189  |
                             5125 ; 190  |union EventTypes {
                             5126 ; 191  |        struct CMessage msg;
                             5127 ; 192  |        struct Button Button ;
                             5128 ; 193  |        struct Message Message;
                             5129 ; 194  |};
                             5130 ; 195  |
                             5131 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5132 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5133 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5134 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5135 ; 200  |
                             5136 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5137 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5138 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5139 ; 204  |
                             5140 ; 205  |#if DEBUG
                             5141 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5142 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5143 ; 208  |#else 
                             5144 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             5145 ; 210  |#define DebugBuildAssert(x)    
                             5146 ; 211  |#endif
                             5147 ; 212  |
                             5148 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5149 ; 214  |//  #pragma asm
                             5150 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5151 ; 216  |//  #pragma endasm
                             5152 ; 217  |
                             5153 ; 218  |
                             5154 ; 219  |#ifdef COLOR_262K
                             5155 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             5156 ; 221  |#elif defined(COLOR_65K)
                             5157 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             5158 ; 223  |#else
                             5159 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             5160 ; 225  |#endif
                             5161 ; 226  |    
                             5162 ; 227  |#endif // #ifndef _TYPES_H
                             5163 
                             5165 
                             5166 ; 5    |
                             5167 ; 6    |#define TIMER_ANIMATE           0
                             5168 ; 7    |#define TIMER_AUTO_SHUTDOWN     1
                             5169 ; 8    |#define TIMER_BATT_CHK          2
                             5170 ; 9    |#define TIMER_SONG_CHANGE       3
                             5171 ; 10   |#define TIMER_TUNER                             4
                             5172 ; 11   |#define TIMER_BACKLIGHT                 5
                             5173 ; 12   |#define TIMER_FFRWND                6
                             5174 ; 13   |#define TIMER_BATTERY_CHARGER   7
                             5175 ; 14   |#define TIMER_TIMEDATE                  8
                             5176 ; 15   |#define TIMER_JPEG_DECODER_CALLBACK 6 //shared with TIMER_FFRWND since they won't use together
                             5177 ; 16   |#define TIMER_APIC_UPDATE               9
                             5178 ; 17   |
                             5179 ; 18   |#define MENU_MSG_ANIMATE            MENU_LAST_MSG_ID+1
                             5180 ; 19   |#define MENU_MSG_AUTOSHUTDOWN       MENU_LAST_MSG_ID+2
                             5181 ; 20   |#define MENU_SONG_CHANGE_TIMEOUT    MENU_LAST_MSG_ID+3
                             5182 ; 21   |#define MENU_TUNER_READY                        MENU_LAST_MSG_ID+4
                             5183 ; 22   |#define MENU_MSG_TURN_OFF_BACKLIGHT MENU_LAST_MSG_ID+5
                             5184 ; 23   |#define MENU_MSG_SEND_FF            MENU_LAST_MSG_ID+6
                             5185 ; 24   |#define MENU_MSG_SEND_RWND          MENU_LAST_MSG_ID+7
                             5186 ; 25   |#define MENU_BATTERY_CHARGER_TIMEOUT  MENU_LAST_MSG_ID+8
                             5187 ; 26   |#define MENU_MSG_REFRESH_TIMEDATE       MENU_LAST_MSG_ID+9
                             5188 ; 27   |#ifdef USE_PLAYLIST3
                             5189 ; 28   |#define MENU_PAGE_ITEM_COUNT    (4)
                             5190 ; 29   |#define MENU_ITEM_HEIGHT                (8)
                             5191 ; 30   |#define MENU_ITEM_X_OFFSET      (0)
                             5192 ; 31   |#define MENU_ITEM_Y_OFFSET      (16)
                             5193 ; 32   |
                             5194 ; 33   |#define PLAYLIST_ENABLE         (0)
                             5195 ; 34   |#endif
                             5196 ; 35   |#define ANIMATE_PERIOD          (100)
                             5197 ; 36   |#define MENU_MSG_JPEG_CALLBACK            MENU_LAST_MSG_ID+10
                             5198 ; 37   |#define MENU_JPEG_THUMBNAIL_CURSOR  MENU_LAST_MSG_ID+11
                             5199 ; 38   |#define MENU_JPEG_NEXT_PICTURE          MENU_LAST_MSG_ID+12
                             5200 ; 39   |#define MENU_MSG_APIC_UPDATE            MENU_LAST_MSG_ID+13
                             5201 ; 40   |#ifdef USE_PLAYLIST5
                             5202 ; 41   |#define MENU_MSG_PL5_PLAY_SONG          MENU_LAST_MSG_ID+14
                             5203 ; 42   |#endif
                             5204 ; 43   |
                             5205 ; 44   |#define MENU_BATTERY_CHARGER_TIMEOUT  MENU_LAST_MSG_ID+8
                             5206 ; 45   |#define FILE_NAME_BUFFER_SIZE  7
                             5207 ; 46   |#define TIMER_JPEG_DECODER_TIMEOUT_MS 5
                             5208 ; 47   |
                             5209 ; 48   |// used with shutdown menu
                             5210 ; 49   |// FORCESHUTDOWN does not allow abort
                             5211 ; 50   |// USERSHUTDOWN allows user abort if PH_STOP is not held long enough
                             5212 ; 51   |#define FORCESHUTDOWN                   TRUE
                             5213 ; 52   |#define USERSHUTDOWN                    FALSE
                             5214 ; 53   |
                             5215 ; 54   |// if low battery display low battery message
                             5216 ; 55   |#define LOWBATT                                 TRUE
                             5217 ; 56   |#define REGBATT                                 FALSE
                             5218 ; 57   |
                             5219 ; 58   |//Backlight Define Statements
                             5220 ; 59   |#ifdef CLCD
                             5221 ; 60   |#ifdef CLCD_16BIT
                             5222 ; 61   |#define BACKLIGHT_CONTROL_REGISTER              HW_PWM_CH0AR.I
                             5223 ; 62   |#define BACKLIGHT_CONTROL_REGISTER_ENABLE       HW_GP0ENR.B.B9  //PWM2
                             5224 ; 63   |#define BACKLIGHT_CONTROL_REGISTER_DIRECTION    HW_GP0DOER.B.B9
                             5225 ; 64   |#define BACKLIGHT_ON                            0x06C000
                             5226 ; 65   |#define BACKLIGHT_OFF                           0x024000
                             5227 ; 66   |#else
                             5228 ; 67   |#define BACKLIGHT_CONTROL_REGISTER              HW_PWM_CH2AR.I
                             5229 ; 68   |#define BACKLIGHT_CONTROL_REGISTER_ENABLE       HW_GP0ENR.B.B9  //PWM2
                             5230 ; 69   |#define BACKLIGHT_CONTROL_REGISTER_DIRECTION    HW_GP0DOER.B.B9
                             5231 ; 70   |#define BACKLIGHT_ON                            0x006000
                             5232 ; 71   |#define BACKLIGHT_OFF                           0x002000
                             5233 ; 72   |#endif
                             5234 ; 73   |#else
                             5235 ; 74   |#define BACKLIGHT_CONTROL_REGISTER              HW_GP0DOR.B.B9
                             5236 ; 75   |#define BACKLIGHT_CONTROL_REGISTER_ENABLE       HW_GP0ENR.B.B9
                             5237 ; 76   |#define BACKLIGHT_CONTROL_REGISTER_DIRECTION    HW_GP0DOER.B.B9
                             5238 ; 77   |#define BACKLIGHT_ON                            TRUE
                             5239 ; 78   |#define BACKLIGHT_OFF                           FALSE
                             5240 ; 79   |#endif
                             5241 ; 80   |#define BACKLIGHT_TIME                                          5000            //5 seconds
                             5242 ; 81   |
                             5243 ; 82   |// used with NextEQ / NextPlayMode to indicate direction
                             5244 ; 83   |#define INCREMENT 1
                             5245 ; 84   |#define DECREMENT 0
                             5246 ; 85   |
                             5247 ; 86   |//These two sit outside the boundary of MENU_FIRST and MENU_LAST simply because they're
                             5248 ; 87   |//states that aren't included in the displayed list.
                             5249 ; 88   |#define MENU_EXIT       101
                             5250 ; 89   |#define MENU_MAIN       100
                             5251 ; 90   |
                             5252 ; 91   |// menu flags
                             5253 ; 92   |#define MENU_FLAG_POWER_DOWN_ENABLED    B0      // when clear, disable tracking
                             5254 ; 93   |#define MENU_FLAG_ESCAPE_TO_MUSIC               B1      // when set, escape all menu nesting to music
                             5255 ; 94   |#define MENU_FLAG_SAVE_CHANGES          B2  // true if fast escape interrupted by save changes?
                             5256 ; 95   |#if (defined USE_PLAYLIST3) || (defined USE_PLAYLIST5)
                             5257 ; 96   |#define MENU_FLAG_ESCAPE_TO_RECORD              B2      // when set, escape all menu nesting to voice/fm menu and start recording
                             5258 ; 97   |#define MENU_FLAG_RETURN_TO_MUSIC               B3      // when set, escape all menu nesting to music
                             5259 ; 98   |#endif
                             5260 ; 99   |
                             5261 ; 100  |#define LANGUAGES_ENG   0
                             5262 ; 101  |#define LANGUAGES_VIE   1
                             5263 ; 102  |#define LANGUAGES_FIRST LANGUAGES_ENG
                             5264 ; 103  |#define LANGUAGES_LAST          LANGUAGES_VIE
                             5265 ; 104  |
                             5266 ; 105  |// 1 word menu variable -- bit flags
                             5267 ; 106  |extern struct Bitfield g_MenuFlags;
                             5268 ; 107  |
                             5269 ; 108  |// This data type is declared in mainmenu.c, but is externed here for all other menus.
                             5270 ; 109  |extern union EventTypes gEventInfo;
                             5271 ; 110  |
                             5272 ; 111  |//each menu should set g_iCurrentMenu to make sure the menu icon shows up correctly.
                             5273 ; 112  |extern INT g_iCurrentMenu;
                             5274 ; 113  |
                             5275 ; 114  |//Backlight State
                             5276 ; 115  |extern INT g_iBackLightState;
                             5277 ; 116  |
                             5278 ; 117  |//Language state
                             5279 ; 118  |extern INT g_iLanguage;
                             5280 ; 119  |
                             5281 ; 120  |//Export all Menu prototypes for calls allowed from other code banks
                             5282 ; 121  |void _reentrant UserTask(int a, int b, int *pPtr);
                             5283 ; 122  |_reentrant INT ShutdownMenu( INT iIgnored1, INT iIgnored2, INT *pPtr);
                             5284 ; 123  |_reentrant INT SplashScreen( INT iResource, INT iMilliseconds, INT *pPtr);
                             5285 ; 124  |int _reentrant MusicMenu(INT a, INT b, INT *c);
                             5286 ; 125  |#ifdef USE_PLAYLIST3
                             5287 ; 126  |int _reentrant PlayMusicMenu(INT a, INT b, INT *c);
                             5288 ; 127  |int _reentrant NewMusicMenu(INT a, INT b, INT *c);
                             5289 ; 128  |int _reentrant BrowseMenu(INT a, INT b, INT *c);
                             5290 ; 129  |#endif // #ifdef USE_PLAYLIST3
                             5291 ; 130  |#ifdef MOTION_VIDEO
                             5292 ; 131  |int _reentrant MotionVideoMenu(INT a, INT b, INT *c);
                             5293 ; 132  |#endif
                             5294 ; 133  |#ifdef JPEG_APP
                             5295 ; 134  |int _reentrant JpegDisplayMenu(int a, int b, int *pPtr);
                             5296 ; 135  |int _reentrant JpegManualMenu(int a, int b, int *pPtr);
                             5297 ; 136  |int _reentrant JpegSlideshowMenu(int a, int b, int *pPtr);
                             5298 ; 137  |int _reentrant JpegThumbnailMenu(int a, int b, int *pPtr);
                             5299 ; 138  |#endif
                             5300 ; 139  |int _reentrant SpectrogramMenu(INT a, INT b, INT *pPtr);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5301 ; 140  |int _reentrant VoiceMenu(int a, int b, int *c);
                             5302 ; 141  |int _reentrant SettingsMenu(int a, int b, int *pPtr);
                             5303 ; 142  |int _reentrant EqMenu(int a, int b, int *pPtr);
                             5304 ; 143  |int _reentrant SendEQ(int iCurrentEQ, int b, int *pPtr);
                             5305 ; 144  |
                             5306 ; 145  |int _reentrant PlayModeMenu(int a, int b, int *pPtr);
                             5307 ; 146  |int _reentrant NextPlayMode(int iDirection, int b, int *c);
                             5308 ; 147  |int _reentrant ContrastMenu(int a, int b, int *pPtr);
                             5309 ; 148  |int _reentrant AboutMenu(int a, int b, int *pPtr);
                             5310 ; 149  |#ifdef USE_PLAYLIST5
                             5311 ; 150  |int _reentrant BrowseMenu(INT a, INT b, INT *c);
                             5312 ; 151  |#endif
                             5313 ; 152  |int _reentrant DeleteMenu(int a, int b, int *pPtr);
                             5314 ; 153  |int _reentrant PwrSavingsMenu(int a, int b, int *pPtr);
                             5315 ; 154  |int _reentrant BackLightMenu(int a, int b, int *pPtr);
                             5316 ; 155  |int _reentrant RecordSettingsMenu(int a, int b, int *pPtr);
                             5317 ; 156  |int _reentrant TimeDateMenu(int a, int b, int *pPtr);
                             5318 ; 157  |int _reentrant SetTimeMenu(int a, int b, int *pPtr);
                             5319 ; 158  |int _reentrant SetDateMenu(int a, int b, int *pPtr);
                             5320 ; 159  |
                             5321 ; 160  |int _reentrant TestMenu(int a, int b, int *pPtr);
                             5322 ; 161  |void _reentrant RecordTestMenu(void);
                             5323 ; 162  |
                             5324 ; 163  |int _reentrant FMTunerMenu(int a, int b, int *c);
                             5325 ; 164  |int _reentrant InitPlayerStateMachine(int iEvent, int iIgnored, int *pMessagePtr);
                             5326 ; 165  |int _reentrant HandlePlayerStateMachine(int iEvent, int iIgnored, int *pMessagePtr);
                             5327 ; 166  |int _reentrant ExitPlayerStateMachine(int iEvent, int iIgnored, int *pMessagePtr);
                             5328 ; 167  |_reentrant int InitRecorderStateMachine(int EncodingType, int InputSource, int *c);
                             5329 ; 168  |_reentrant int HandleRecorderStateMachine(int a, int b, int *c);
                             5330 ; 169  |_reentrant int ExitRecorderStateMachine(int InputSource, int b, int *c);
                             5331 ; 170  |int _reentrant NextEQ(INT iDirection, INT b, INT *c);
                             5332 ; 171  |_reentrant INT RecordVoiceFile(INT a, INT b, INT *pPtr);
                             5333 ; 172  |_reentrant int RefreshDisplay           ( int iDisplayHint, int a, int *pPtr);
                             5334 ; 173  |_reentrant void DisplayClearDisplay      ( int iDisplayHint, int a, int *pPtr);
                             5335 ; 174  |_reentrant int DisplayEQIcon            ( int iDisplayHint, int a, int *pPtr);
                             5336 ; 175  |_reentrant int DisplayVolume            ( int iDisplayHint, int a, int *pPtr);
                             5337 ; 176  |_reentrant int DisplayShutdownProgress  ( int iDisplayHint, int a, int *pPtr);
                             5338 ; 177  |_reentrant int DisplayDefragmentstore  ( int iDisplayHint, int a, int *pPtr);
                             5339 ; 178  |_reentrant int DisplayKickOff           ( int iDisplayHint, int a, int *pPtr);
                             5340 ; 179  |_reentrant int DisplayKickOffLocked     ( int iDisplayHint, int a, int *pPtr);
                             5341 ; 180  |_reentrant void DisplayLockIcon          ( int iDisplayHint, int a, int *pPtr);
                             5342 ; 181  |_reentrant void ChangePlaySet(INT mode);
                             5343 ; 182  |void _reentrant UpdateAutoShutdownTimer (void);
                             5344 ; 183  |int _reentrant SetPwrSetting (int iCurrentPwrSetting, int b, int *pPtr);
                             5345 ; 184  |int  _reentrant SendPlayMode(int iCurrentPlayMode, int b, int *pPtr);
                             5346 ; 185  |_reentrant int DeleteFilePrompt(int a,int b, int *pPtr);
                             5347 ; 186  |#endif
                             5348 ; 187  |
                             5349 
                             5351 
                             5352 ; 8    |#include "display.h"
                             5353 
                             5355 
                             5356 ; 1    |#ifndef _DISPLAY_H
                             5357 ; 2    |#define _DISPLAY_H
                             5358 ; 3    |
                             5359 ; 4    |//Display bits
                             5360 ; 5    |#define DISPLAY_CLEAR_DISPLAY_BITPOS        0
                             5361 ; 6    |
                             5362 ; 7    |#define DISPLAY_ENCODER_TRACK_TIME_BITPOS   1
                             5363 ; 8    |#define DISPLAY_ENCODER_TRACK_NAME_BITPOS   2
                             5364 ; 9    |#define DISPLAY_RECORD_MODE_BITPOS          3
                             5365 ; 10   |
                             5366 ; 11   |//This bit (DISPLAY_MISC_BITPOS) is set to allow DisplayHints to be non zero, but does not map
                             5367 ; 12   |//to anything in UpdateDisplay();  (meant to be used to indicate that specific
                             5368 ; 13   |//things that are specific for that menu.
                             5369 ; 14   |#define DISPLAY_MISC_BITPOS                 4
                             5370 ; 15   |
                             5371 ; 16   |#define DISPLAY_FMTUNER_FREQUENCY           5
                             5372 ; 17   |#define DISPLAY_FMTUNER_PRESET              6
                             5373 ; 18   |#define DISPLAY_FMTUNER_STRENGTH            7
                             5374 ; 19   |
                             5375 ; 20   |#define DISPLAY_PLAYSTATE_BITPOS             9
                             5376 ; 21   |#define DISPLAY_AB_ICON_BITPOS              10
                             5377 ; 22   |#define DISPLAY_PLAYMODE_BITPOS             11
                             5378 ; 23   |#define DISPLAY_PLAYSET_BITPOS              12
                             5379 ; 24   |
                             5380 ; 25   |//Playback info
                             5381 ; 26   |#define DISPLAY_EQ_BITPOS                   13
                             5382 ; 27   |#define DISPLAY_VOLUME_BITPOS               14
                             5383 ; 28   |
                             5384 ; 29   |//Track Info
                             5385 ; 30   |#define DISPLAY_SONGARTISTALBUM_BITPOS      15
                             5386 ; 31   |#define DISPLAY_SONGTITLE_BITPOS            16
                             5387 ; 32   |#define DISPLAY_CURRENTTRACK_BITPOS         17
                             5388 ; 33   |#define DISPLAY_TRACKTIME_BITPOS            18
                             5389 ; 34   |#define DISPLAY_TOTALTRACKTIME_BITPOS        8
                             5390 ; 35   |#define DISPLAY_BITRATE_BITPOS              19
                             5391 ; 36   |
                             5392 ; 37   |//Device status info
                             5393 ; 38   |#define DISPLAY_LOCK_BITPOS                 20
                             5394 ; 39   |#define DISPLAY_DISK_BITPOS                 21
                             5395 ; 40   |#define DISPLAY_BATTERY_BITPOS              22
                             5396 ; 41   |#define DISPLAY_ALBUMART_BITPOS              23
                             5397 ; 42   |
                             5398 ; 43   |#ifdef PLAYER_STRESS
                             5399 ; 44   |// this may not work since album art uses bit 23 so we may need a new word variable for this player stress test bit below.
                             5400 ; 45   |#define DISPLAY_STRESSTEST_BITPOS            23
                             5401 ; 46   |#endif
                             5402 ; 47   |
                             5403 ; 48   |
                             5404 ; 49   |union DisplayHints
                             5405 ; 50   |{
                             5406 ; 51   |    struct {
                             5407 ; 52   |        int ClearDisplay        :1;//0
                             5408 ; 53   |        int EncoderTrackTime    :1;//1
                             5409 ; 54   |        int EncoderTrackName    :1;//2
                             5410 ; 55   |        int RecordMode          :1;//3
                             5411 ; 56   |        int Misc                :1;//4
                             5412 ; 57   |        int FMTunerFrequency    :1;//5
                             5413 ; 58   |        int FMTunerPreset       :1;//6
                             5414 ; 59   |        int FMTunerStrength     :1;//7
                             5415 ; 60   |        int TotalTrackTime      :1;//8
                             5416 ; 61   |        int PlayState           :1;//9
                             5417 ; 62   |        int ABIcon              :1;//10
                             5418 ; 63   |        int PlayMode            :1;//11
                             5419 ; 64   |        int PlaySet             :1;//12
                             5420 ; 65   |        int EQ                  :1;//13
                             5421 ; 66   |        int Volume              :1;//14
                             5422 ; 67   |        int SongArtistAlbum     :1;//15
                             5423 ; 68   |        int SongTitle           :1;//16
                             5424 ; 69   |        int CurrentTrack        :1;//17
                             5425 ; 70   |        int TrackTime           :1;//18
                             5426 ; 71   |        int Bitrate             :1;//19
                             5427 ; 72   |        int LockIcon            :1;//20
                             5428 ; 73   |        int Disk                :1;//21
                             5429 ; 74   |        int Battery             :1;//22
                             5430 ; 75   |#ifdef PLAYER_STRESS
                             5431 ; 76   |        int StressTest         :1;//23  // this might not work since bit 23 is already taken by album art. 23 is last bit in word.
                             5432 ; 77   |#else
                             5433 ; 78   |        int AlbumArt            :1;//23
                             5434 ; 79   |#endif
                             5435 ; 80   |    } bits;
                             5436 ; 81   |    WORD I;
                             5437 ; 82   |};
                             5438 ; 83   |
                             5439 ; 84   |// setup default display for all menus
                             5440 ; 85   |// can be adjusted in each menus as required.
                             5441 ; 86   |#define COMMON_DISPLAY_ALL  (\ 
                             5442 ; 87   |                                (1<<DISPLAY_BATTERY_BITPOS)|\ 
                             5443 ; 88   |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             5444 ; 89   |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5445 ; 90   |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             5446 ; 91   |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             5447 ; 92   |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             5448 ; 93   |                                (1<<DISPLAY_EQ_BITPOS)|\ 
                             5449 ; 94   |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             5450 ; 95   |                                (1<<DISPLAY_PLAYSTATE_BITPOS)\ 
                             5451 ; 96   |                                )
                             5452 ; 97   |
                             5453 ; 98   |#define SPECTROGRAM_MENU_DISPLAY_ALL  (\ 
                             5454 ; 99   |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             5455 ; 100  |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             5456 ; 101  |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             5457 ; 102  |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             5458 ; 103  |                                (1<<DISPLAY_EQ_BITPOS)|\ 
                             5459 ; 104  |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             5460 ; 105  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)\ 
                             5461 ; 106  |                                )
                             5462 ; 107  |
                             5463 ; 108  |//-----------------------------------------------
                             5464 ; 109  |#ifdef JPEG_ALBUM_ART
                             5465 ; 110  |#define ALBUMART_SET_MASK_IF_APPROPRIATE (1<<DISPLAY_ALBUMART_BITPOS)
                             5466 ; 111  |#else
                             5467 ; 112  |#define ALBUMART_SET_MASK_IF_APPROPRIATE (0)
                             5468 ; 113  |#endif
                             5469 ; 114  |
                             5470 ; 115  |#ifdef PLAYER_STRESS
                             5471 ; 116  |#define PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE (1<<DISPLAY_STRESSTEST_BITPOS)
                             5472 ; 117  |#else
                             5473 ; 118  |#define PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE (0)
                             5474 ; 119  |#endif
                             5475 ; 120  |
                             5476 ; 121  |
                             5477 ; 122  |#define MUSIC_MENU_DISPLAY_ALL  (\ 
                             5478 ; 123  |                                (COMMON_DISPLAY_ALL)|\ 
                             5479 ; 124  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             5480 ; 125  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5481 ; 126  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5482 ; 127  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             5483 ; 128  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             5484 ; 129  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             5485 ; 130  |                                (1<<DISPLAY_TRACKTIME_BITPOS)|\ 
                             5486 ; 131  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)\ 
                             5487 ; 132  |                                )
                             5488 ; 133  |
                             5489 ; 134  |#define MUSIC_MENU_DISPLAY_NEW_TRACK (\ 
                             5490 ; 135  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             5491 ; 136  |                                (PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE)|\ 
                             5492 ; 137  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             5493 ; 138  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             5494 ; 139  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             5495 ; 140  |                                (1<<DISPLAY_TRACKTIME_BITPOS)|\ 
                             5496 ; 141  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)|\ 
                             5497 ; 142  |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             5498 ; 143  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5499 ; 144  |                                (1<<DISPLAY_PLAYSET_BITPOS)\ 
                             5500 ; 145  |                                )
                             5501 ; 146  |//-----------------------------------------------
                             5502 ; 147  |
                             5503 ; 148  |
                             5504 ; 149  |#define MVIDEO_MENU_DISPLAY_ALL ((1<<DISPLAY_CURRENTTRACK_BITPOS)|(1<<DISPLAY_SONGTITLE_BITPOS))
                             5505 ; 150  |
                             5506 ; 151  |
                             5507 ; 152  |#define VOICE_MENU_DISPLAY_ALL  (\ 
                             5508 ; 153  |                                COMMON_DISPLAY_ALL|\ 
                             5509 ; 154  |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             5510 ; 155  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5511 ; 156  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5512 ; 157  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             5513 ; 158  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             5514 ; 159  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             5515 ; 160  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)|\ 
                             5516 ; 161  |                                (1<<DISPLAY_TRACKTIME_BITPOS)\ 
                             5517 ; 162  |                                )
                             5518 ; 163  |
                             5519 ; 164  |
                             5520 ; 165  |#define RECORDING_DISPLAY_ALL   (\ 
                             5521 ; 166  |                                COMMON_DISPLAY_ALL|\ 
                             5522 ; 167  |                                (1<<DISPLAY_ENCODER_TRACK_TIME_BITPOS)|\ 
                             5523 ; 168  |                                (1<<DISPLAY_ENCODER_TRACK_NAME_BITPOS)|\ 
                             5524 ; 169  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5525 ; 170  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5526 ; 171  |                                (1<<DISPLAY_RECORD_MODE_BITPOS)\ 
                             5527 ; 172  |                                )
                             5528 ; 173  |
                             5529 ; 174  |#ifdef USE_PLAYLIST3
                             5530 ; 175  |#define BROWSE_MENU_DISPLAY_ALL  (\ 
                             5531 ; 176  |                                (1<<DISPLAY_BATTERY_BITPOS)|\ 
                             5532 ; 177  |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             5533 ; 178  |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             5534 ; 179  |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             5535 ; 180  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             5536 ; 181  |                                )
                             5537 ; 182  |#else
                             5538 ; 183  |#ifdef USE_PLAYLIST5
                             5539 ; 184  |#if 0
                             5540 ; 185  |#define BROWSE_MENU_DISPLAY_ALL (\ 
                             5541 ; 186  |                                 COMMON_DISPLAY_ALL|\ 
                             5542 ; 187  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             5543 ; 188  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5544 ; 189  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5545 ; 190  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             5546 ; 191  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             5547 ; 192  |                                )
                             5548 ; 193  |#else
                             5549 ; 194  |#define BROWSE_MENU_DISPLAY_ALL (\ 
                             5550 ; 195  |                                 COMMON_DISPLAY_ALL|\ 
                             5551 ; 196  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             5552 ; 197  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5553 ; 198  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5554 ; 199  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             5555 ; 200  |                                )
                             5556 ; 201  |#endif
                             5557 ; 202  |#endif  // #ifdef USE_PLAYLIST5
                             5558 ; 203  |#endif  // #ifdef USE_PLAYLIST3
                             5559 ; 204  |
                             5560 ; 205  |
                             5561 ; 206  |
                             5562 ; 207  |#define MAIN_MENU_DISPLAY_ALL           (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5563 ; 208  |
                             5564 ; 209  |#define EQ_MENU_DISPLAY_ALL             (\ 
                             5565 ; 210  |                                        COMMON_DISPLAY_ALL|\ 
                             5566 ; 211  |                                        (1<<DISPLAY_EQ_BITPOS)|\ 
                             5567 ; 212  |                                        (1<<DISPLAY_VOLUME_BITPOS)\ 
                             5568 ; 213  |                                        )     // (SDK2.520)
                             5569 ; 214  |
                             5570 ; 215  |#define PM_MENU_DISPLAY_ALL             (COMMON_DISPLAY_ALL|(1<<DISPLAY_PLAYMODE_BITPOS)|(1<<DISPLAY_MISC_BITPOS))
                             5571 ; 216  |#define PWR_MENU_DISPLAY_ALL            (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5572 ; 217  |#define SETTINGS_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5573 ; 218  |#define JPEG_DISPLAY_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5574 ; 219  |#define DELETE_MENU_DISPLAY_ALL         (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5575 ; 220  |#define ABOUT_MENU_DISPLAY_ALL          (COMMON_DISPLAY_ALL)
                             5576 ; 221  |#define ERASE_MENU_DISPLAY_ALL          ((1<<DISPLAY_BATTERY_BITPOS)|(1<<DISPLAY_LOCK_BITPOS))
                             5577 ; 222  |
                             5578 ; 223  |#define CONTRAST_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5579 ; 224  |
                             5580 ; 225  |#define TIME_DATE_MENU_DISPLAY_ALL      0
                             5581 ; 226  |#define RECORDTEST_DISPLAY_ALL       (\ 
                             5582 ; 227  |                                        (1<<DISPLAY_ENCODER_TRACK_TIME_BITPOS)|\ 
                             5583 ; 228  |                                                                        (1<<DISPLAY_ENCODER_TRACK_NAME_BITPOS)|\ 
                             5584 ; 229  |                                                                        (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5585 ; 230  |                                        (1<<DISPLAY_RECORD_MODE_BITPOS)|\ 
                             5586 ; 231  |                                    (1<<DISPLAY_MISC_BITPOS)\ 
                             5587 ; 232  |                                                                        )
                             5588 ; 233  |
                             5589 ; 234  |#define SPLASH_MENU_DISPLAY_ALL         (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5590 ; 235  |// used during track update to force total time update
                             5591 ; 236  |#define AUTOUPDATE              FALSE
                             5592 ; 237  |#define FORCEUPDATE             TRUE
                             5593 ; 238  |
                             5594 ; 239  |
                             5595 ; 240  |// based on font used for title/artist display
                             5596 ; 241  |#define DEFAULT_CHAR_WIDTH  5
                             5597 ; 242  |
                             5598 ; 243  |
                             5599 ; 244  |// LCD dimensions
                             5600 ; 245  |#ifdef LDS514_LCD
                             5601 ; 246  |#define   LCD_SIZE_X       96
                             5602 ; 247  |#define   LCD_SIZE_Y       64
                             5603 ; 248  |#endif
                             5604 ; 249  |
                             5605 ; 250  |#ifdef ILI814_LCD
                             5606 ; 251  |#define   LCD_SIZE_X       96
                             5607 ; 252  |#define   LCD_SIZE_Y       64
                             5608 ; 253  |#endif
                             5609 ; 254  |
                             5610 ; 255  |#ifdef ML9341_LCD
                             5611 ; 256  |#define   LCD_SIZE_X       96
                             5612 ; 257  |#define   LCD_SIZE_Y       96
                             5613 ; 258  |#endif
                             5614 ; 259  |
                             5615 ; 260  |#ifdef SSD1332_LCD
                             5616 ; 261  |#define   LCD_SIZE_X       96
                             5617 ; 262  |#define   LCD_SIZE_Y       64
                             5618 ; 263  |#endif
                             5619 ; 264  |
                             5620 ; 265  |#ifdef S6B33B0A_LCD
                             5621 ; 266  |#define   LCD_SIZE_X       128
                             5622 ; 267  |#define   LCD_SIZE_Y       159
                             5623 ; 268  |#endif
                             5624 ; 269  |
                             5625 ; 270  |#ifdef SED15XX_LCD
                             5626 ; 271  |#define LCD_SIZE_X                      128
                             5627 ; 272  |#define LCD_SIZE_Y                      64
                             5628 ; 273  |#endif
                             5629 ; 274  |
                             5630 ; 275  |#define LCD_SIZE_ROW                     8
                             5631 ; 276  |
                             5632 ; 277  |#define TOP_OF_SCREEN           0
                             5633 ; 278  |#define LEFT_OF_SCREEN          0
                             5634 ; 279  |
                             5635 ; 280  |#ifdef LDS514_LCD
                             5636 ; 281  |#define   SCREEN_WIDTH       96
                             5637 ; 282  |#define   SCREEN_HEIGHT       64
                             5638 ; 283  |#endif
                             5639 ; 284  |
                             5640 ; 285  |#ifdef ILI814_LCD
                             5641 ; 286  |#define   SCREEN_WIDTH       96
                             5642 ; 287  |#define   SCREEN_HEIGHT       64
                             5643 ; 288  |#endif
                             5644 ; 289  |
                             5645 ; 290  |#ifdef ML9341_LCD
                             5646 ; 291  |#define   SCREEN_WIDTH       96
                             5647 ; 292  |#define   SCREEN_HEIGHT       96
                             5648 ; 293  |#endif
                             5649 ; 294  |
                             5650 ; 295  |#ifdef SSD1332_LCD
                             5651 ; 296  |#define   SCREEN_WIDTH       96
                             5652 ; 297  |#define   SCREEN_HEIGHT       64
                             5653 ; 298  |#endif
                             5654 ; 299  |
                             5655 ; 300  |#ifdef S6B33B0A_LCD
                             5656 ; 301  |#define   SCREEN_WIDTH       128
                             5657 ; 302  |#define   SCREEN_HEIGHT       159
                             5658 ; 303  |#endif
                             5659 ; 304  |
                             5660 ; 305  |#ifdef SED15XX_LCD
                             5661 ; 306  |#define SCREEN_WIDTH            128
                             5662 ; 307  |#define SCREEN_HEIGHT           64
                             5663 ; 308  |#endif
                             5664 ; 309  |
                             5665 ; 310  |#define CHAR_SIZE_X             6
                             5666 ; 311  |#define CHAR_SIZE_Y             8
                             5667 ; 312  |
                             5668 ; 313  |// Physical rows are numbered from 0 to LCD_SIZE_Y/LCD_SIZE_ROW
                             5669 ; 314  |#define LCD_FIRST_ROW_NUM                1
                             5670 ; 315  |#define LCD_FIRST_ROW_POS_Y=LCD_FIRST_ROW_NUM*LCD_SIZE_ROW  // skipping the first row
                             5671 ; 316  |
                             5672 ; 317  |// Top row in order from left to right
                             5673 ; 318  |#define PLAY_STATE_ICON_X_POS   LEFT_OF_SCREEN+0
                             5674 ; 319  |#define PLAY_STATE_ICON_Y_POS   TOP_OF_SCREEN+0
                             5675 ; 320  |#define PLAY_STATE_ICON_X_SIZE  12
                             5676 ; 321  |#define PLAY_STATE_ICON_Y_SIZE  8
                             5677 ; 322  |
                             5678 ; 323  |#define REPEAT_ICON_X_POS       LEFT_OF_SCREEN+13
                             5679 ; 324  |#define REPEAT_ICON_Y_POS       TOP_OF_SCREEN+0
                             5680 ; 325  |#define REPEAT_ICON_X_SIZE      12
                             5681 ; 326  |#define REPEAT_ICON_Y_SIZE      8
                             5682 ; 327  |
                             5683 ; 328  |#define SHUFFLE_ICON_X_POS      LEFT_OF_SCREEN+25
                             5684 ; 329  |#define SHUFFLE_ICON_Y_POS      TOP_OF_SCREEN+0
                             5685 ; 330  |#define SHUFFLE_ICON_X_SIZE     5     // includes white space on left side of .bmp
                             5686 ; 331  |#define SHUFFLE_ICON_Y_SIZE     8
                             5687 ; 332  |
                             5688 ; 333  |#define AB_ICON_X_POS           LEFT_OF_SCREEN+31
                             5689 ; 334  |#define AB_ICON_Y_POS           TOP_OF_SCREEN+0
                             5690 ; 335  |#define AB_ICON_X_SIZE          12
                             5691 ; 336  |#define AB_ICON_Y_SIZE          8
                             5692 ; 337  |
                             5693 ; 338  |#ifdef  AUDIBLE
                             5694 ; 339  |#define SECNAV_ICON_X_POS       LEFT_OF_SCREEN+31
                             5695 ; 340  |#define SECNAV_ICON_Y_POS       TOP_OF_SCREEN+0
                             5696 ; 341  |#define SECNAV_ICON_X_SIZE      12
                             5697 ; 342  |#define SECNAV_ICON_Y_SIZE      8
                             5698 ; 343  |#endif
                             5699 ; 344  |
                             5700 ; 345  |#define EQ_ICON_X_POS           LEFT_OF_SCREEN+44
                             5701 ; 346  |#define EQ_ICON_Y_POS           TOP_OF_SCREEN+0
                             5702 ; 347  |#define EQ_ICON_X_SIZE          22
                             5703 ; 348  |#define EQ_ICON_Y_SIZE          8
                             5704 ; 349  |
                             5705 ; 350  |#ifdef WOW
                             5706 ; 351  |#define WOW_X_POS               EQ_ICON_X_POS
                             5707 ; 352  |#define WOW_Y_POS               EQ_ICON_Y_POS
                             5708 ; 353  |#endif
                             5709 ; 354  |
                             5710 ; 355  |
                             5711 ; 356  |// Media icon
                             5712 ; 357  |#define DISK_X_POS              LEFT_OF_SCREEN+66
                             5713 ; 358  |#define DISK_Y_POS              TOP_OF_SCREEN
                             5714 ; 359  |#define DISK_X_SIZE             8
                             5715 ; 360  |#define DISK_Y_SIZE             8
                             5716 ; 361  |
                             5717 ; 362  |// Hold icon
                             5718 ; 363  |#define LOCK_ICON_X_POS         LEFT_OF_SCREEN+73
                             5719 ; 364  |#define LOCK_ICON_Y_POS         TOP_OF_SCREEN
                             5720 ; 365  |#define LOCK_ICON_X_SIZE        8
                             5721 ; 366  |#define LOCK_ICON_Y_SIZE        8
                             5722 ; 367  |
                             5723 ; 368  |#define BATTERY_ICON_X_POS      LEFT_OF_SCREEN+110
                             5724 ; 369  |#define BATTERY_ICON_Y_POS      TOP_OF_SCREEN+0
                             5725 ; 370  |#define BATTERY_ICON_X_SIZE     16
                             5726 ; 371  |#define BATTERY_ICON_Y_SIZE     8
                             5727 ; 372  |#define BATTERY_RESOURCE        RSRC_BATTERY_00
                             5728 ; 373  |
                             5729 ; 374  |// Second row from left to right
                             5730 ; 375  |#define VOLUME_ICON_X_POS       LEFT_OF_SCREEN+0
                             5731 ; 376  |#define VOLUME_ICON_Y_POS       TOP_OF_SCREEN+8
                             5732 ; 377  |#define VOLUME_ICON_X_SIZE      48
                             5733 ; 378  |#define VOLUME_ICON_Y_SIZE      8
                             5734 ; 379  |#define VOLUME_RESOURCE         RSRC_ICON_VOL_00
                             5735 ; 380  |#define VOLUME_NUM_ICONS        27
                             5736 ; 381  |
                             5737 ; 382  |#define PLAYSET_X_POS           SCREEN_WIDTH-8
                             5738 ; 383  |#define PLAYSET_Y_POS           TOP_OF_SCREEN+8
                             5739 ; 384  |
                             5740 ; 385  |//Lyrics Position
                             5741 ; 386  |#define LYRICS_DISPLAY_X_POS    LEFT_OF_SCREEN
                             5742 ; 387  |#define LYRICS_DISPLAY_Y_POS    TOP_OF_SCREEN+16
                             5743 ; 388  |#define LYRICS_DISPLAY_HEIGHT           10
                             5744 ; 389  |
                             5745 ; 390  |// Music menu
                             5746 ; 391  |#define SONG_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5747 ; 392  |#define SONG_TITLE_Y_POS        TOP_OF_SCREEN+16
                             5748 ; 393  |#define SONG_TITLE_X_SIZE       SCREEN_WIDTH
                             5749 ; 394  |#define SONG_TITLE_Y_SIZE       10
                             5750 ; 395  |
                             5751 ; 396  |#define SONG_ARTIST_X_POS       LEFT_OF_SCREEN
                             5752 ; 397  |#define SONG_ARTIST_Y_POS       TOP_OF_SCREEN+26
                             5753 ; 398  |#define SONG_ARTIST_X_SIZE      SCREEN_WIDTH
                             5754 ; 399  |#define SONG_ARTIST_Y_SIZE      10
                             5755 ; 400  |
                             5756 ; 401  |#define SONG_ALBUM_X_POS       LEFT_OF_SCREEN
                             5757 ; 402  |#define SONG_ALBUM_Y_POS       TOP_OF_SCREEN+36
                             5758 ; 403  |#define SONG_ALBUM_X_SIZE      SCREEN_WIDTH
                             5759 ; 404  |#define SONG_ALBUM_Y_SIZE      10
                             5760 ; 405  |
                             5761 ; 406  |#ifdef USE_PLAYLIST5
                             5762 ; 407  |#define TRACK_NUMBER_X_POS      LEFT_OF_SCREEN+28
                             5763 ; 408  |#define TRACK_NUMBER_Y_POS      TOP_OF_SCREEN+56
                             5764 ; 409  |#define TRACK_NUMBER_X_SIZE     6*4
                             5765 ; 410  |#define TRACK_NUMBER_Y_SIZE     8
                             5766 ; 411  |
                             5767 ; 412  |#define TRACK_COUNT_X_POS       TRACK_NUMBER_X_POS+TRACK_NUMBER_X_SIZE+10
                             5768 ; 413  |#define TRACK_COUNT_Y_POS       TOP_OF_SCREEN+56
                             5769 ; 414  |#define TRACK_COUNT_X_SIZE      6*4
                             5770 ; 415  |#define TRACK_COUNT_Y_SIZE      8
                             5771 ; 416  |
                             5772 ; 417  |#define TRACK_DIVIDE_X TRACK_NUMBER_X_POS+TRACK_COUNT_X_SIZE + 2
                             5773 ; 418  |#else
                             5774 ; 419  |#define TRACK_NUMBER_X_POS      LEFT_OF_SCREEN+34
                             5775 ; 420  |#define TRACK_NUMBER_Y_POS      TOP_OF_SCREEN+56
                             5776 ; 421  |#define TRACK_NUMBER_X_SIZE     6*3
                             5777 ; 422  |#define TRACK_NUMBER_Y_SIZE     8
                             5778 ; 423  |
                             5779 ; 424  |#define TRACK_COUNT_X_POS       TRACK_NUMBER_X_POS+TRACK_NUMBER_X_SIZE+10
                             5780 ; 425  |#define TRACK_COUNT_Y_POS       TOP_OF_SCREEN+56
                             5781 ; 426  |#define TRACK_COUNT_X_SIZE      6*3
                             5782 ; 427  |#define TRACK_COUNT_Y_SIZE      8
                             5783 ; 428  |
                             5784 ; 429  |#define TRACK_DIVIDE_X  TRACK_NUMBER_X_POS+24
                             5785 ; 430  |#endif
                             5786 ; 431  |
                             5787 ; 432  |
                             5788 ; 433  |#define TRACK_CURR_TIME_X_POS       LEFT_OF_SCREEN+28
                             5789 ; 434  |#define TRACK_CURR_TIME_Y_POS       TOP_OF_SCREEN+48
                             5790 ; 435  |#define TRACK_CURR_TIME_X_SIZE      25
                             5791 ; 436  |#define TRACK_CURR_TIME_Y_SIZE      8
                             5792 ; 437  |
                             5793 ; 438  |#define TRACK_SLASH_X_SIZE          5
                             5794 ; 439  |#define TRACK_SLASH_X_POS           TRACK_TOTAL_TIME_X_POS-TRACK_SLASH_X_SIZE
                             5795 ; 440  |#define TRACK_SLASH_Y_POS           TRACK_CURR_TIME_Y_POS
                             5796 ; 441  |
                             5797 ; 442  |#define TRACK_TOTAL_TIME_X_POS      LEFT_OF_SCREEN+60
                             5798 ; 443  |#define TRACK_TOTAL_TIME_Y_POS      TRACK_CURR_TIME_Y_POS
                             5799 ; 444  |#define TRACK_TOTAL_TIME_X_SIZE     28
                             5800 ; 445  |#define TRACK_TOTAL_TIME_Y_SIZE     8
                             5801 ; 446  |
                             5802 ; 447  |#define VBR_FLAG_X_POS      LEFT_OF_SCREEN+80
                             5803 ; 448  |#define VBR_FLAG_Y_POS      8
                             5804 ; 449  |#define VBR_FLAG_X_SIZE     20
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5805 ; 450  |#define VBR_FLAG_Y_SIZE     8
                             5806 ; 451  |#ifdef JPEG_ALBUM_ART
                             5807 ; 452  |// Album art display parameters:
                             5808 ; 453  |#define ALBUM_ART_X_POS         TOP_OF_SCREEN
                             5809 ; 454  |#define ALBUM_ART_Y_POS         80
                             5810 ; 455  |#define ALBUM_ART_X_SIZE        SCREEN_WIDTH
                             5811 ; 456  |#define ALBUM_ART_Y_SIZE        (SCREEN_HEIGHT-ALBUM_ART_Y_POS)
                             5812 ; 457  |#endif
                             5813 ; 458  |
                             5814 ; 459  |// Recording Display
                             5815 ; 460  |#define REC_CURR_TIME_X_POS       LEFT_OF_SCREEN
                             5816 ; 461  |#define REC_CURR_TIME_Y_POS       TOP_OF_SCREEN+48
                             5817 ; 462  |#define REC_CURR_TIME_X_SIZE      12
                             5818 ; 463  |#define REC_CURR_TIME_Y_SIZE      8
                             5819 ; 464  |
                             5820 ; 465  |#define REC_TOTAL_TIME_X_POS      LEFT_OF_SCREEN+45
                             5821 ; 466  |#define REC_TOTAL_TIME_Y_POS      TOP_OF_SCREEN+48
                             5822 ; 467  |#define REC_TOTAL_TIME_X_SIZE     28
                             5823 ; 468  |#define REC_TOTAL_TIME_Y_SIZE     8
                             5824 ; 469  |
                             5825 ; 470  |// Playback Display with hours added.
                             5826 ; 471  |#ifdef LDS514_LCD
                             5827 ; 472  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5828 ; 473  |#endif
                             5829 ; 474  |
                             5830 ; 475  |#ifdef ILI814_LCD
                             5831 ; 476  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5832 ; 477  |#endif
                             5833 ; 478  |
                             5834 ; 479  |#ifdef ML9341_LCD
                             5835 ; 480  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5836 ; 481  |#endif
                             5837 ; 482  |
                             5838 ; 483  |#ifdef SSD1332_LCD
                             5839 ; 484  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5840 ; 485  |#endif
                             5841 ; 486  |
                             5842 ; 487  |#ifdef S6B33B0A_LCD
                             5843 ; 488  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5844 ; 489  |#endif
                             5845 ; 490  |
                             5846 ; 491  |#ifdef SED15XX_LCD
                             5847 ; 492  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5848 ; 493  |#endif
                             5849 ; 494  |
                             5850 ; 495  |#define HR_TRACK_CURR_TIME_Y_POS        TOP_OF_SCREEN+48
                             5851 ; 496  |#define HR_TRACK_CURR_TIME_X_SIZE       28
                             5852 ; 497  |#define HR_TRACK_CURR_TIME_Y_SIZE       8
                             5853 ; 498  |
                             5854 ; 499  |#define HR_TRACK_TOTAL_TIME_X_POS       LEFT_OF_SCREEN+59
                             5855 ; 500  |#define HR_TRACK_TOTAL_TIME_Y_POS       TRACK_CURR_TIME_Y_POS
                             5856 ; 501  |#define HR_TRACK_TOTAL_TIME_X_SIZE      28
                             5857 ; 502  |#define HR_TRACK_TOTAL_TIME_Y_SIZE      8
                             5858 ; 503  |
                             5859 ; 504  |//Clear entire Track Time when song changes.
                             5860 ; 505  |#define CLR_TRACK_TIME_X_POS            LEFT_OF_SCREEN
                             5861 ; 506  |#define CLR_TRACK_TIME_Y_POS            TRACK_CURR_TIME_Y_POS
                             5862 ; 507  |#define CLR_TRACK_TIME_X_SIZE           SCREEN_WIDTH
                             5863 ; 508  |#define CLR_TRACK_TIME_Y_SIZE           8
                             5864 ; 509  |
                             5865 ; 510  |#define HR_TRACK_SLASH_X_SIZE           3
                             5866 ; 511  |#define HR_TRACK_SLASH_X_POS            HR_TRACK_TOTAL_TIME_X_POS-HR_TRACK_SLASH_X_SIZE
                             5867 ; 512  |#define HR_TRACK_SLASH_Y_POS            HR_TRACK_CURR_TIME_Y_POS
                             5868 ; 513  |
                             5869 ; 514  | //DVRWARN
                             5870 ; 515  |#define VOICE_SPACE_WARN_X_POS      LEFT_OF_SCREEN
                             5871 ; 516  |#define VOICE_SPACE_WARN_Y_POS      SONG_TITLE_Y_POS
                             5872 ; 517  |#define VOICE_SPACE_WARN_X_SIZE     93
                             5873 ; 518  |#define VOICE_SPACE_WARN_Y_SIZE     16
                             5874 ; 519  |
                             5875 ; 520  |//Shutdown
                             5876 ; 521  |#define SHUTDOWN_PROGRESS_X_POS     LEFT_OF_SCREEN+24
                             5877 ; 522  |#define SHUTDOWN_PROGRESS_Y_POS     TOP_OF_SCREEN+32
                             5878 ; 523  |#define SHUTDOWN_PROGRESS_X_SIZE    59
                             5879 ; 524  |#define SHUTDOWN_PROGRESS_Y_SIZE    16
                             5880 ; 525  |#define SHUTDOWN_PROGRESS_RESOURCE  RSRC_PDOWN_STATUS_0
                             5881 ; 526  |
                             5882 ; 527  |#define SHUTDOWN_STRING_X_POS       LEFT_OF_SCREEN+10
                             5883 ; 528  |#define SHUTDOWN_STRING_Y_POS       TOP_OF_SCREEN+16
                             5884 ; 529  |#define SHUTDOWN_STRING_X_SIZE      59
                             5885 ; 530  |#define SHUTDOWN_STRING_Y_SIZE      16
                             5886 ; 531  |#define SHUTDOWN_STRING_RESOURCE    RSRC_PDOWN_HOLD_STRING
                             5887 ; 532  |
                             5888 ; 533  |#define DEFRAGMENT_STRING_X_POS       LEFT_OF_SCREEN+0
                             5889 ; 534  |#define DEFRAGMENT_STRING_Y_POS       TOP_OF_SCREEN+16
                             5890 ; 535  |#define DEFRAGMENT_STRING_X_SIZE      59
                             5891 ; 536  |#define DEFRAGMENT_STRING_Y_SIZE      16
                             5892 ; 537  |#define DEFRAGMENT_STRING_RESOURCE    RSRC_DEFRAGMENT_STORE_STRING
                             5893 ; 538  |
                             5894 ; 539  |
                             5895 ; 540  |//Contrast Display
                             5896 ; 541  |#define CONTRAST_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5897 ; 542  |#define CONTRAST_TITLE_Y_POS        TOP_OF_SCREEN+16
                             5898 ; 543  |
                             5899 ; 544  |#define CONTRAST_X_POS              LEFT_OF_SCREEN+8
                             5900 ; 545  |#define CONTRAST_Y_POS              TOP_OF_SCREEN+32
                             5901 ; 546  |#define CONTRAST_X_SIZE             96
                             5902 ; 547  |#define CONTRAST_Y_SIZE             8
                             5903 ; 548  |#define CONTRAST_RESOURCE           RSRC_CONTRAST_LEVEL_0
                             5904 ; 549  |
                             5905 ; 550  |//Backlight Display
                             5906 ; 551  |#define BACKLIGHT_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5907 ; 552  |#define BACKLIGHT_TITLE_Y_POS        TOP_OF_SCREEN+24
                             5908 ; 553  |#define BACKLIGHT_STATE_X_POS        LEFT_OF_SCREEN+0
                             5909 ; 554  |#define BACKLIGHT_STATE_Y_POS        (LCD_FIRST_ROW_NUM+4)*LCD_SIZE_ROW
                             5910 ; 555  |
                             5911 ; 556  |//settings title display
                             5912 ; 557  |#define SETTINGS_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5913 ; 558  |#define SETTINGS_TITLE_Y_POS        TOP_OF_SCREEN+8
                             5914 ; 559  |//jpeg display title display
                             5915 ; 560  |#define JPEG_DISPLAY_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5916 ; 561  |#define JPEG_DISPLAY_TITLE_Y_POS        TOP_OF_SCREEN+8
                             5917 ; 562  |//erase files title display
                             5918 ; 563  |#define ERASE_TITLE_X_POS           LEFT_OF_SCREEN+0
                             5919 ; 564  |#define ERASE_TITLE_Y_POS           TOP_OF_SCREEN+8
                             5920 ; 565  |
                             5921 ; 566  |// Splashscreen
                             5922 ; 567  |#ifdef LDS514_LCD
                             5923 ; 568  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5924 ; 569  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             5925 ; 570  |#define SPLASH_SCREEN_X_SIZE        96
                             5926 ; 571  |#define SPLASH_SCREEN_Y_SIZE        64
                             5927 ; 572  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5928 ; 573  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5929 ; 574  |#endif
                             5930 ; 575  |
                             5931 ; 576  |#ifdef ILI814_LCD
                             5932 ; 577  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5933 ; 578  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             5934 ; 579  |#define SPLASH_SCREEN_X_SIZE        96
                             5935 ; 580  |#define SPLASH_SCREEN_Y_SIZE        64
                             5936 ; 581  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5937 ; 582  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5938 ; 583  |#endif
                             5939 ; 584  |
                             5940 ; 585  |#ifdef ML9341_LCD
                             5941 ; 586  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5942 ; 587  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             5943 ; 588  |#define SPLASH_SCREEN_X_SIZE        96
                             5944 ; 589  |#define SPLASH_SCREEN_Y_SIZE        96
                             5945 ; 590  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5946 ; 591  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5947 ; 592  |#endif
                             5948 ; 593  |
                             5949 ; 594  |#ifdef SSD1332_LCD
                             5950 ; 595  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5951 ; 596  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             5952 ; 597  |#define SPLASH_SCREEN_X_SIZE        96
                             5953 ; 598  |#define SPLASH_SCREEN_Y_SIZE        64
                             5954 ; 599  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5955 ; 600  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5956 ; 601  |#endif
                             5957 ; 602  |
                             5958 ; 603  |#ifdef S6B33B0A_LCD
                             5959 ; 604  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5960 ; 605  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN + 16
                             5961 ; 606  |#define SPLASH_SCREEN_X_SIZE        80
                             5962 ; 607  |#define SPLASH_SCREEN_Y_SIZE        48
                             5963 ; 608  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5964 ; 609  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5965 ; 610  |#endif
                             5966 ; 611  |
                             5967 ; 612  |#ifdef SED15XX_LCD
                             5968 ; 613  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5969 ; 614  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN 
                             5970 ; 615  |#define SPLASH_SCREEN_X_SIZE        128
                             5971 ; 616  |#define SPLASH_SCREEN_Y_SIZE        64    
                             5972 ; 617  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5973 ; 618  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5974 ; 619  |#endif
                             5975 ; 620  |
                             5976 ; 621  |// FM tuner
                             5977 ; 622  |#define FM_TUNER_FREQUENCY_X_POS    LEFT_OF_SCREEN+30
                             5978 ; 623  |#define FM_TUNER_FREQUENCY_Y_POS    TOP_OF_SCREEN+24
                             5979 ; 624  |#define FM_TUNER_FREQUENCY_X_SIZE   CHAR_SIZE_X*10
                             5980 ; 625  |#define FM_TUNER_FREQUENCY_Y_SIZE   CHAR_SIZE_Y
                             5981 ; 626  |#define FM_TUNER_FREQUENCY_DOT_X_POS    FM_TUNER_FREQUENCY_X_POS+CHAR_SIZE_X*3
                             5982 ; 627  |#define FM_TUNER_FRAC_FREQUENCY_X_POS    FM_TUNER_FREQUENCY_DOT_X_POS+3
                             5983 ; 628  |
                             5984 ; 629  |#define FM_TUNER_PRESET_X_POS       LEFT_OF_SCREEN+30
                             5985 ; 630  |#define FM_TUNER_PRESET_Y_POS       TOP_OF_SCREEN+34
                             5986 ; 631  |#define FM_TUNER_PRESET_X_SIZE      CHAR_SIZE_X*5
                             5987 ; 632  |#define FM_TUNER_PRESET_Y_SIZE      CHAR_SIZE_Y
                             5988 ; 633  |
                             5989 ; 634  |#define FM_TUNER_PILOT_X_POS       LEFT_OF_SCREEN+30
                             5990 ; 635  |#define FM_TUNER_PILOT_Y_POS       TOP_OF_SCREEN+44
                             5991 ; 636  |
                             5992 ; 637  |// About menu
                             5993 ; 638  |#define ABOUT_TITLE_X_POS           LEFT_OF_SCREEN+0
                             5994 ; 639  |#define ABOUT_TITLE_Y_POS           TOP_OF_SCREEN+LCD_SIZE_ROW
                             5995 ; 640  |// starting row -- use offsets for the rest
                             5996 ; 641  |#define ABOUT_LINE_LABEL_X_POS      LEFT_OF_SCREEN+0
                             5997 ; 642  |#define ABOUT_LINE_LABEL_Y_POS      ABOUT_TITLE_Y_POS+(2*LCD_SIZE_ROW)
                             5998 ; 643  |
                             5999 ; 644  |#ifdef PLAYER_STRESS
                             6000 ; 645  |#define STRESS_TEST_X_POS       LEFT_OF_SCREEN
                             6001 ; 646  |#define STRESS_TEST_Y_POS       TOP_OF_SCREEN+40
                             6002 ; 647  |#define STRESS_TEST_X_SIZE      SCREEN_WIDTH
                             6003 ; 648  |#define STRESS_TEST_Y_SIZE      8
                             6004 ; 649  |#endif
                             6005 ; 650  |
                             6006 ; 651  |
                             6007 ; 652  |// Delete Menu
                             6008 ; 653  |#define WARNING_MSG_LINE1_X         LEFT_OF_SCREEN
                             6009 ; 654  |#define WARNING_MSG_LINE1_Y         (LCD_FIRST_ROW_NUM+1)*LCD_SIZE_ROW
                             6010 ; 655  |#define WARNING_MSG_LINE2_X         LEFT_OF_SCREEN
                             6011 ; 656  |#define WARNING_MSG_LINE2_Y         (LCD_FIRST_ROW_NUM+2)*LCD_SIZE_ROW
                             6012 ; 657  |#define WARNING_MSG_FILE_X          LEFT_OF_SCREEN
                             6013 ; 658  |#define WARNING_MSG_FILE_Y          (LCD_FIRST_ROW_NUM+4)*LCD_SIZE_ROW
                             6014 ; 659  |#define WARNING_MSG_YES_X           LEFT_OF_SCREEN
                             6015 ; 660  |#define WARNING_MSG_YES_Y           (LCD_FIRST_ROW_NUM+6)*LCD_SIZE_ROW
                             6016 ; 661  |#define DELETE_FAIL_MSG_X           LEFT_OF_SCREEN
                             6017 ; 662  |#define DELETE_FAIL_MSG_Y           (LCD_FIRST_ROW_NUM+6)*LCD_SIZE_ROW
                             6018 ; 663  |
                             6019 ; 664  |_reentrant void DisplayClear (void);
                             6020 ; 665  |_reentrant void DisplayLowBattery (void);
                             6021 ; 666  |
                             6022 ; 667  |_reentrant int DisplayContrast( int bDisplay, int iIgnored1, void *pPtr);
                             6023 ; 668  |
                             6024 ; 669  |_reentrant int DisplayBacklight( int bDisplay, int iIgnored1, void *pPtr);
                             6025 ; 670  |#ifdef WOW
                             6026 ; 671  |_reentrant int DisplayBar( int bDisplay, int step, void *pPtr);
                             6027 ; 672  |#endif
                             6028 ; 673  |extern _X BOOL g_bSongStringScroll;
                             6029 ; 674  |extern _X INT  g_iSongStringOffset;
                             6030 ; 675  |extern _X INT  g_iSongStringLength;
                             6031 ; 676  |
                             6032 ; 677  |extern _X BOOL g_bArtistStringScroll;
                             6033 ; 678  |extern _X INT  g_iArtistStringOffset;
                             6034 ; 679  |extern _X INT  g_iArtistStringLength;
                             6035 ; 680  |
                             6036 ; 681  |
                             6037 ; 682  |extern _X BOOL g_bAlbumStringScroll;
                             6038 ; 683  |extern _X INT  g_iAlbumStringOffset;
                             6039 ; 684  |extern _X INT  g_iAlbumStringLength;
                             6040 ; 685  |extern int g_iVolume_Control_Mode;
                             6041 ; 686  |extern int g_iAB_Control_Mode;
                             6042 ; 687  |
                             6043 ; 688  |
                             6044 ; 689  |#endif //_DISPLAY_H
                             6045 
                             6047 
                             6048 ; 9    |#include "mainmenu.h"
                             6049 
                             6051 
                             6052 ; 1    |#ifndef _MAIN_MENU_H
                             6053 ; 2    |#define _MAIN_MENU_H
                             6054 ; 3    |
                             6055 ; 4    |// menus in mainmenu
                             6056 ; 5    |#define MAINMENU_FIRST  0
                             6057 ; 6    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6058 ; 7    |enum _MENU_ID
                             6059 ; 8    |{
                             6060 ; 9    |        MENU_MUSIC = 0,
                             6061 ; 10   |#ifdef JPEG_APP
                             6062 ; 11   |        MENU_JPEG_DISPLAY,
                             6063 ; 12   |#endif
                             6064 ; 13   |#ifdef MOTION_VIDEO
                             6065 ; 14   |        MENU_MVIDEO,
                             6066 ; 15   |#endif
                             6067 ; 16   |        MENU_VOICE,
                             6068 ; 17   |
                             6069 ; 18   |/*This version does not use PL5
                             6070 ; 19   |#ifdef USE_PLAYLIST5
                             6071 ; 20   |#ifndef REMOVE_FM
                             6072 ; 21   |    MENU_FMREC,
                             6073 ; 22   |#endif
                             6074 ; 23   |    MENU_LINEIN,
                             6075 ; 24   |#ifdef AUDIBLE
                             6076 ; 25   |        MENU_AUDIBLE,
                             6077 ; 26   |#endif
                             6078 ; 27   |#endif  // #ifdef USE_PLAYLIST5
                             6079 ; 28   |*/
                             6080 ; 29   |
                             6081 ; 30   |#ifdef USE_PLAYLIST3
                             6082 ; 31   |#ifdef AUDIBLE
                             6083 ; 32   |        MENU_AUDIBLE,
                             6084 ; 33   |#endif
                             6085 ; 34   |#endif
                             6086 ; 35   |#ifndef REMOVE_FM
                             6087 ; 36   |        MENU_FMTUNER,
                             6088 ; 37   |#endif
                             6089 ; 38   |        MENU_RECORD,
                             6090 ; 39   |        MENU_SETTINGS,
                             6091 ; 40   |        MENU_SHUTDOWN,
                             6092 ; 41   |        MENU_TIME_DATE,
                             6093 ; 42   |        MENU_AB,
                             6094 ; 43   |        MENU_DELETE,
                             6095 ; 44   |        MENU_ABOUT,
                             6096 ; 45   |#ifdef SPECTRUM_ANAL
                             6097 ; 46   |        MENU_SPECTROGRAM,
                             6098 ; 47   |#endif
                             6099 ; 48   |        MENU_MAIN_EXIT
                             6100 ; 49   |};
                             6101 ; 50   |
                             6102 ; 51   |
                             6103 ; 52   |#define MAINMENU_LAST    MENU_MAIN_EXIT
                             6104 ; 53   |#define MAINMENU_COUNT  (MAINMENU_LAST+1)
                             6105 ; 54   |
                             6106 ; 55   |#ifdef S6B33B0A_LCD
                             6107 ; 56   |#define MAINMENU_PAGE1_COUNT    MAINMENU_COUNT
                             6108 ; 57   |#endif
                             6109 ; 58   |
                             6110 ; 59   |#ifdef SED15XX_LCD
                             6111 ; 60   |#define MAINMENU_PAGE1_COUNT    4
                             6112 ; 61   |#endif
                             6113 ; 62   |
                             6114 ; 63   |
                             6115 ; 64   |// Media error constants
                             6116 ; 65   |// Each device gets 5 bits for error codes, in the global g_FSinitErrorCode.
                             6117 ; 66   |// If there is no external device, the internal device uses bits 0-4.  If there
                             6118 ; 67   |// is an external device, the internal device is shifted up 5 bits (to bits 5-9),
                             6119 ; 68   |// and the external device uses bits 0-4.  (More than one external device is not
                             6120 ; 69   |// supported in the current code.)
                             6121 ; 70   |
                             6122 ; 71   |#define ERROR_ON_INTERNAL_MEDIA         0x0F
                             6123 ; 72   |#define INTERNAL_MEDIA_NOT_SIGMATEL_FORMAT      0x010
                             6124 ; 73   |
                             6125 ; 74   |#define ERROR_ON_EXTERNAL_MEDIA                         0x0E
                             6126 ; 75   |#define EXTERNAL_MEDIA_NOT_SIGMATEL_FORMAT      0x010
                             6127 ; 76   |
                             6128 ; 77   |#define ERROR_ON_INTERNAL_MEDIA_SHIFTED         0x01E0
                             6129 ; 78   |#define INTERNAL_MEDIA_NOT_SIGMATEL_FORMAT_SHIFTED      0x020
                             6130 ; 79   |
                             6131 ; 80   |#ifdef USE_PLAYLIST3
                             6132 ; 81   |extern INT  g_current_index;
                             6133 ; 82   |extern INT  g_current_size;
                             6134 ; 83   |extern _packed BYTE g_strMusicLib_FilePath[];
                             6135 ; 84   |extern _packed BYTE g_strMusicLib_SecTable_FilePath[];
                             6136 ; 85   |extern INT  g_iFileHandle;
                             6137 ; 86   |extern INT  g_ML_save_on_exit;
                             6138 ; 87   |extern WORD g_rsrc_TimeDate_CodeBank;
                             6139 ; 88   |#endif  // USE_PLAYLIST3
                             6140 ; 89   |
                             6141 ; 90   |////////////////////////////////////////////////////////////////////////////////
                             6142 ; 91   |//  Prototypes
                             6143 ; 92   |////////////////////////////////////////////////////////////////////////////////
                             6144 ; 93   |#ifdef USE_PLAYLIST3
                             6145 ; 94   |void _reentrant ML_building_engine_init(void);
                             6146 ; 95   |#endif  // USE_PLAYLIST3
                             6147 ; 96   |
                             6148 ; 97   |#endif
                             6149 
                             6151 
                             6152 ; 10   |#include "settingsmenu.h"
                             6153 
                             6155 
                             6156 ; 1    |#ifndef _SETTINGS_MENU_H
                             6157 ; 2    |#define _SETTINGS_MENU_H
                             6158 ; 3    |
                             6159 ; 4    |// menus in settings menu
                             6160 ; 5    |// defines order of selection
                             6161 ; 6    |#define SETTINGSMENU_FIRST  0
                             6162 ; 7    |
                             6163 ; 8    |enum _MENUSETTING_ID
                             6164 ; 9    |{
                             6165 ; 10   |MENU_EQ = 0,
                             6166 ; 11   |MENU_PLAYMODE,
                             6167 ; 12   |MENU_CONTRAST,
                             6168 ; 13   |MENU_PWRSAVINGS,
                             6169 ; 14   |#ifdef BACKLIGHT
                             6170 ; 15   |MENU_BACKLIGHT,
                             6171 ; 16   |#endif
                             6172 ; 17   |MENU_RECORD_SETTINGS,
                             6173 ; 18   |MENU_SET_TIME,
                             6174 ; 19   |MENU_SET_DATE,
                             6175 ; 20   | #ifdef WOW
                             6176 ; 21   |MENU_WOW,
                             6177 ; 22   | #endif
                             6178 ; 23   |MENU_SETTINGS_EXIT
                             6179 ; 24   |#ifndef BACKLIGHT
                             6180 ; 25   |,MENU_BACKLIGHT
                             6181 ; 26   |#endif
                             6182 ; 27   |};
                             6183 ; 28   |
                             6184 ; 29   |#define SETTINGSMENU_LAST   MENU_SETTINGS_EXIT
                             6185 ; 30   |#define SETTINGSMENU_COUNT  (SETTINGSMENU_LAST+1)
                             6186 ; 31   |        
                             6187 ; 32   |#ifdef S6B33B0A_LCD
                             6188 ; 33   |#define SETTINGSMENU_PAGE1_COUNT        SETTINGSMENU_COUNT
                             6189 ; 34   |#endif
                             6190 ; 35   |
                             6191 ; 36   |#ifdef SED15XX_LCD
                             6192 ; 37   |#define SETTINGSMENU_PAGE1_COUNT        4
                             6193 ; 38   |#endif
                             6194 ; 39   |
                             6195 ; 40   |#endif
                             6196 
                             6198 
                             6199 ; 11   |#include "hwequ.h"
                             6200 
                             6202 
                             6203 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             6204 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                             6205 ; 3    |//  File        : hwequ.inc
                             6206 ; 4    |//  Description : STMP Hardware Constants
                             6207 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             6208 ; 6    |
                             6209 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                             6210 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                             6211 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                             6212 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                             6213 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                             6214 ; 12   |
                             6215 ; 13   |#if (!defined(HWEQU_INC))
                             6216 ; 14   |#define HWEQU_INC 1
                             6217 ; 15   |
                             6218 ; 16   |#include "types.h"
                             6219 
                             6221 
                             6222 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6223 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6224 ; 3    |//
                             6225 ; 4    |// Filename: types.h
                             6226 ; 5    |// Description: Standard data types
                             6227 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6228 ; 7    |
                             6229 ; 8    |#ifndef _TYPES_H
                             6230 ; 9    |#define _TYPES_H
                             6231 ; 10   |
                             6232 ; 11   |// TODO:  move this outta here!
                             6233 ; 12   |#if !defined(NOERROR)
                             6234 ; 13   |#define NOERROR 0
                             6235 ; 14   |#define SUCCESS 0
                             6236 ; 15   |#endif 
                             6237 ; 16   |#if !defined(SUCCESS)
                             6238 ; 17   |#define SUCCESS  0
                             6239 ; 18   |#endif
                             6240 ; 19   |#if !defined(ERROR)
                             6241 ; 20   |#define ERROR   -1
                             6242 ; 21   |#endif
                             6243 ; 22   |#if !defined(FALSE)
                             6244 ; 23   |#define FALSE 0
                             6245 ; 24   |#endif
                             6246 ; 25   |#if !defined(TRUE)
                             6247 ; 26   |#define TRUE  1
                             6248 ; 27   |#endif
                             6249 ; 28   |
                             6250 ; 29   |#if !defined(NULL)
                             6251 ; 30   |#define NULL 0
                             6252 ; 31   |#endif
                             6253 ; 32   |
                             6254 ; 33   |#define MAX_INT     0x7FFFFF
                             6255 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6256 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6257 ; 36   |#define MAX_ULONG   (-1) 
                             6258 ; 37   |
                             6259 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6260 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6261 ; 40   |
                             6262 ; 41   |
                             6263 ; 42   |#define BYTE    unsigned char       // btVarName
                             6264 ; 43   |#define CHAR    signed char         // cVarName
                             6265 ; 44   |#define USHORT  unsigned short      // usVarName
                             6266 ; 45   |#define SHORT   unsigned short      // sVarName
                             6267 ; 46   |#define WORD    unsigned int        // wVarName
                             6268 ; 47   |#define INT     signed int          // iVarName
                             6269 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6270 ; 49   |#define LONG    signed long         // lVarName
                             6271 ; 50   |#define BOOL    unsigned int        // bVarName
                             6272 ; 51   |#define FRACT   _fract              // frVarName
                             6273 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6274 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6275 ; 54   |#define FLOAT   float               // fVarName
                             6276 ; 55   |#define DBL     double              // dVarName
                             6277 ; 56   |#define ENUM    enum                // eVarName
                             6278 ; 57   |#define CMX     _complex            // cmxVarName
                             6279 ; 58   |typedef WORD UCS3;                   // 
                             6280 ; 59   |
                             6281 ; 60   |#define UINT16  unsigned short
                             6282 ; 61   |#define UINT8   unsigned char   
                             6283 ; 62   |#define UINT32  unsigned long
                             6284 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6285 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6286 ; 65   |#define WCHAR   UINT16
                             6287 ; 66   |
                             6288 ; 67   |//UINT128 is 16 bytes or 6 words
                             6289 ; 68   |typedef struct UINT128_3500 {   
                             6290 ; 69   |    int val[6];     
                             6291 ; 70   |} UINT128_3500;
                             6292 ; 71   |
                             6293 ; 72   |#define UINT128   UINT128_3500
                             6294 ; 73   |
                             6295 ; 74   |// Little endian word packed byte strings:   
                             6296 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6297 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6298 ; 77   |// Little endian word packed byte strings:   
                             6299 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6300 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6301 ; 80   |
                             6302 ; 81   |// Declare Memory Spaces To Use When Coding
                             6303 ; 82   |// A. Sector Buffers
                             6304 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6305 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6306 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6307 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6308 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6309 ; 88   |// B. Media DDI Memory
                             6310 ; 89   |#define MEDIA_DDI_MEM _Y
                             6311 ; 90   |
                             6312 ; 91   |
                             6313 ; 92   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6314 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6315 ; 94   |// Examples of circular pointers:
                             6316 ; 95   |//    INT CIRC cpiVarName
                             6317 ; 96   |//    DWORD CIRC cpdwVarName
                             6318 ; 97   |
                             6319 ; 98   |#define RETCODE INT                 // rcVarName
                             6320 ; 99   |
                             6321 ; 100  |// generic bitfield structure
                             6322 ; 101  |struct Bitfield {
                             6323 ; 102  |    unsigned int B0  :1;
                             6324 ; 103  |    unsigned int B1  :1;
                             6325 ; 104  |    unsigned int B2  :1;
                             6326 ; 105  |    unsigned int B3  :1;
                             6327 ; 106  |    unsigned int B4  :1;
                             6328 ; 107  |    unsigned int B5  :1;
                             6329 ; 108  |    unsigned int B6  :1;
                             6330 ; 109  |    unsigned int B7  :1;
                             6331 ; 110  |    unsigned int B8  :1;
                             6332 ; 111  |    unsigned int B9  :1;
                             6333 ; 112  |    unsigned int B10 :1;
                             6334 ; 113  |    unsigned int B11 :1;
                             6335 ; 114  |    unsigned int B12 :1;
                             6336 ; 115  |    unsigned int B13 :1;
                             6337 ; 116  |    unsigned int B14 :1;
                             6338 ; 117  |    unsigned int B15 :1;
                             6339 ; 118  |    unsigned int B16 :1;
                             6340 ; 119  |    unsigned int B17 :1;
                             6341 ; 120  |    unsigned int B18 :1;
                             6342 ; 121  |    unsigned int B19 :1;
                             6343 ; 122  |    unsigned int B20 :1;
                             6344 ; 123  |    unsigned int B21 :1;
                             6345 ; 124  |    unsigned int B22 :1;
                             6346 ; 125  |    unsigned int B23 :1;
                             6347 ; 126  |};
                             6348 ; 127  |
                             6349 ; 128  |union BitInt {
                             6350 ; 129  |        struct Bitfield B;
                             6351 ; 130  |        int        I;
                             6352 ; 131  |};
                             6353 ; 132  |
                             6354 ; 133  |#define MAX_MSG_LENGTH 10
                             6355 ; 134  |struct CMessage
                             6356 ; 135  |{
                             6357 ; 136  |        unsigned int m_uLength;
                             6358 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6359 ; 138  |};
                             6360 ; 139  |
                             6361 ; 140  |typedef struct {
                             6362 ; 141  |    WORD m_wLength;
                             6363 ; 142  |    WORD m_wMessage;
                             6364 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6365 ; 144  |} Message;
                             6366 ; 145  |
                             6367 ; 146  |struct MessageQueueDescriptor
                             6368 ; 147  |{
                             6369 ; 148  |        int *m_pBase;
                             6370 ; 149  |        int m_iModulo;
                             6371 ; 150  |        int m_iSize;
                             6372 ; 151  |        int *m_pHead;
                             6373 ; 152  |        int *m_pTail;
                             6374 ; 153  |};
                             6375 ; 154  |
                             6376 ; 155  |struct ModuleEntry
                             6377 ; 156  |{
                             6378 ; 157  |    int m_iSignaledEventMask;
                             6379 ; 158  |    int m_iWaitEventMask;
                             6380 ; 159  |    int m_iResourceOfCode;
                             6381 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6382 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             6383 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6384 ; 163  |    int m_uTimeOutHigh;
                             6385 ; 164  |    int m_uTimeOutLow;
                             6386 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6387 ; 166  |};
                             6388 ; 167  |
                             6389 ; 168  |union WaitMask{
                             6390 ; 169  |    struct B{
                             6391 ; 170  |        unsigned int m_bNone     :1;
                             6392 ; 171  |        unsigned int m_bMessage  :1;
                             6393 ; 172  |        unsigned int m_bTimer    :1;
                             6394 ; 173  |        unsigned int m_bButton   :1;
                             6395 ; 174  |    } B;
                             6396 ; 175  |    int I;
                             6397 ; 176  |} ;
                             6398 ; 177  |
                             6399 ; 178  |
                             6400 ; 179  |struct Button {
                             6401 ; 180  |        WORD wButtonEvent;
                             6402 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6403 ; 182  |};
                             6404 ; 183  |
                             6405 ; 184  |struct Message {
                             6406 ; 185  |        WORD wMsgLength;
                             6407 ; 186  |        WORD wMsgCommand;
                             6408 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6409 ; 188  |};
                             6410 ; 189  |
                             6411 ; 190  |union EventTypes {
                             6412 ; 191  |        struct CMessage msg;
                             6413 ; 192  |        struct Button Button ;
                             6414 ; 193  |        struct Message Message;
                             6415 ; 194  |};
                             6416 ; 195  |
                             6417 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6418 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6419 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6420 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6421 ; 200  |
                             6422 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6423 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6424 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6425 ; 204  |
                             6426 ; 205  |#if DEBUG
                             6427 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6428 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             6429 ; 208  |#else 
                             6430 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             6431 ; 210  |#define DebugBuildAssert(x)    
                             6432 ; 211  |#endif
                             6433 ; 212  |
                             6434 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6435 ; 214  |//  #pragma asm
                             6436 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6437 ; 216  |//  #pragma endasm
                             6438 ; 217  |
                             6439 ; 218  |
                             6440 ; 219  |#ifdef COLOR_262K
                             6441 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             6442 ; 221  |#elif defined(COLOR_65K)
                             6443 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             6444 ; 223  |#else
                             6445 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             6446 ; 225  |#endif
                             6447 ; 226  |    
                             6448 ; 227  |#endif // #ifndef _TYPES_H
                             6449 
                             6451 
                             6452 ; 17   |#include "regsclkctrl.h"
                             6453 
                             6455 
                             6456 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                             6457 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                             6458 ; 3    |
                             6459 ; 4    |
                             6460 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             6461 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                             6462 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                             6463 ; 8    |#define HW_CCR_LTC_BITPOS 1
                             6464 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                             6465 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                             6466 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                             6467 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                             6468 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                             6469 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                             6470 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                             6471 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                             6472 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                             6473 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                             6474 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                             6475 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                             6476 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                             6477 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                             6478 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                             6479 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                             6480 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                             6481 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                             6482 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                             6483 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                             6484 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                             6485 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                             6486 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                             6487 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                             6488 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                             6489 ; 34   |
                             6490 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                             6491 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                             6492 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                             6493 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                             6494 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                             6495 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                             6496 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                             6497 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                             6498 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                             6499 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                             6500 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                             6501 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                             6502 ; 47   |
                             6503 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                             6504 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                             6505 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                             6506 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                             6507 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                             6508 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                             6509 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                             6510 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                             6511 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                             6512 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                             6513 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                             6514 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                             6515 ; 60   |
                             6516 ; 61   |typedef union               
                             6517 ; 62   |{
                             6518 ; 63   |    struct
                             6519 ; 64   |    {
                             6520 ; 65   |        int CKRST       :1; // Clock Reset
                             6521 ; 66   |        int LTC         :1;
                             6522 ; 67   |        int PLLEN       :1;
                             6523 ; 68   |        int XTLEN       :1;
                             6524 ; 69   |        int FLB         :1;
                             6525 ; 70   |        unsigned ADIV   :3;
                             6526 ; 71   |        int CKSRC       :1;
                             6527 ; 72   |        unsigned DDIV   :3;
                             6528 ; 73   |        unsigned PDIV   :5;
                             6529 ; 74   |        int PWDN        :1;
                             6530 ; 75   |        int ACKEN       :1;
                             6531 ; 76   |        int LOCK        :1;
                             6532 ; 77   |        unsigned ADIV1  :3;
                             6533 ; 78   |        unsigned DDIV_MSB:1;
                             6534 ; 79   |    } B;
                             6535 ; 80   |
                             6536 ; 81   |    int I;
                             6537 ; 82   |    unsigned int U;
                             6538 ; 83   |
                             6539 ; 84   |} ccr_type;
                             6540 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                             6541 ; 86   |
                             6542 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             6543 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                             6544 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                             6545 ; 90   |#define HW_RCR_SRST_BITPOS 4
                             6546 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                             6547 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                             6548 ; 93   |#define HW_RCR_NMI_BITPOS 10
                             6549 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                             6550 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                             6551 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                             6552 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                             6553 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                             6554 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                             6555 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                             6556 ; 101  |
                             6557 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                             6558 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                             6559 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                             6560 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                             6561 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                             6562 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                             6563 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                             6564 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                             6565 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                             6566 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6567 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                             6568 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                             6569 ; 114  |
                             6570 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                             6571 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                             6572 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                             6573 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                             6574 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                             6575 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                             6576 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                             6577 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                             6578 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                             6579 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                             6580 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                             6581 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                             6582 ; 127  |
                             6583 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                             6584 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                             6585 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                             6586 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                             6587 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                             6588 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                             6589 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                             6590 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                             6591 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                             6592 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                             6593 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                             6594 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                             6595 ; 140  |
                             6596 ; 141  |typedef union               
                             6597 ; 142  |{
                             6598 ; 143  |    struct
                             6599 ; 144  |   {
                             6600 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                             6601 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                             6602 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                             6603 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                             6604 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                             6605 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                             6606 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                             6607 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                             6608 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                             6609 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                             6610 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                             6611 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                             6612 ; 157  |    } B;
                             6613 ; 158  |
                             6614 ; 159  |    int I;
                             6615 ; 160  |    unsigned int U;
                             6616 ; 161  |
                             6617 ; 162  |} rcr_type;
                             6618 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                             6619 ; 164  |
                             6620 ; 165  |
                             6621 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             6622 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                             6623 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                             6624 ; 169  |
                             6625 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                             6626 ; 171  |
                             6627 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                             6628 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                             6629 ; 174  |typedef union               
                             6630 ; 175  |{
                             6631 ; 176  |    struct
                             6632 ; 177  |   {
                             6633 ; 178  |        int LOW;
                             6634 ; 179  |    } B;
                             6635 ; 180  |
                             6636 ; 181  |    int I;
                             6637 ; 182  |    unsigned int U;
                             6638 ; 183  |
                             6639 ; 184  |} dclkcntl_type;
                             6640 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                             6641 ; 186  |
                             6642 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             6643 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                             6644 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                             6645 ; 190  |
                             6646 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                             6647 ; 192  |
                             6648 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS) 
                             6649 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                             6650 ; 195  |typedef union               
                             6651 ; 196  |{
                             6652 ; 197  |    struct
                             6653 ; 198  |   {
                             6654 ; 199  |        int HIGH;
                             6655 ; 200  |    } B;
                             6656 ; 201  |
                             6657 ; 202  |    int I;
                             6658 ; 203  |    unsigned int U;
                             6659 ; 204  |
                             6660 ; 205  |} dclkcntu_type;
                             6661 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                             6662 ; 207  |
                             6663 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             6664 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             6665 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                             6666 ; 211  |
                             6667 ; 212  |// Clock count register (lower)
                             6668 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                             6669 ; 214  |// Clock count register (upper)
                             6670 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                             6671 ; 216  |// Cycle steal count register
                             6672 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                             6673 ; 218  |
                             6674 ; 219  |#endif
                             6675 ; 220  |
                             6676 ; 221  |
                             6677 
                             6679 
                             6680 ; 18   |#include "regscore.h"
                             6681 
                             6683 
                             6684 ; 1    |#if !(defined(__REGS_STATUS_INC))
                             6685 ; 2    |#define __REGS_STATUS_INC 1
                             6686 ; 3    |
                             6687 ; 4    |
                             6688 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             6689 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                             6690 ; 7    |#define HW_OMR_MA_BITPOS 0
                             6691 ; 8    |#define HW_OMR_MB_BITPOS 1
                             6692 ; 9    |#define HW_OMR_DE_BITPOS 2
                             6693 ; 10   |#define HW_OMR_YE_BITPOS 3
                             6694 ; 11   |#define HW_OMR_MC_BITPOS 4
                             6695 ; 12   |#define HW_OMR_SD_BITPOS 6
                             6696 ; 13   |
                             6697 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                             6698 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                             6699 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                             6700 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                             6701 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                             6702 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                             6703 ; 20   |
                             6704 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                             6705 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                             6706 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                             6707 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                             6708 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                             6709 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                             6710 ; 27   |
                             6711 ; 28   |
                             6712 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                             6713 ; 30   |//  Status Register (HW_SR) Bit Positions
                             6714 ; 31   |#define HW_SR_C_BITPOS 0
                             6715 ; 32   |#define HW_SR_O_BITPOS 1
                             6716 ; 33   |#define HW_SR_Z_BITPOS 2
                             6717 ; 34   |#define HW_SR_N_BITPOS 3
                             6718 ; 35   |#define HW_SR_U_BITPOS 4
                             6719 ; 36   |#define HW_SR_E_BITPOS 5
                             6720 ; 37   |#define HW_SR_L_BITPOS 6
                             6721 ; 38   |#define HW_SR_IM_BITPOS 8
                             6722 ; 39   |#define HW_SR_IM0_BITPOS 8
                             6723 ; 40   |#define HW_SR_IM1_BITPOS 9
                             6724 ; 41   |#define HW_SR_SM_BITPOS 10
                             6725 ; 42   |#define HW_SR_SM0_BITPOS 10
                             6726 ; 43   |#define HW_SR_SM1_BITPOS 11
                             6727 ; 44   |#define HW_SR_TM_BITPOS 13
                             6728 ; 45   |#define HW_SR_DP_BITPOS 14
                             6729 ; 46   |#define HW_SR_LOOP_BITPOS 15
                             6730 ; 47   |
                             6731 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                             6732 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                             6733 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                             6734 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                             6735 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                             6736 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                             6737 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                             6738 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                             6739 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                             6740 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                             6741 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                             6742 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                             6743 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                             6744 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                             6745 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                             6746 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                             6747 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                             6748 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                             6749 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                             6750 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                             6751 ; 68   |
                             6752 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                             6753 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                             6754 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                             6755 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                             6756 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                             6757 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                             6758 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                             6759 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                             6760 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                             6761 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                             6762 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                             6763 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                             6764 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                             6765 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                             6766 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                             6767 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                             6768 ; 85   |
                             6769 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                             6770 ; 87   |//  RAM/ROM Config Register Bit Positions
                             6771 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                             6772 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                             6773 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                             6774 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                             6775 ; 92   |#endif
                             6776 ; 93   |
                             6777 ; 94   |
                             6778 
                             6780 
                             6781 ; 19   |#include "regscodec.h"
                             6782 
                             6784 
                             6785 ; 1    |#if !(defined(regscodecinc))
                             6786 ; 2    |#define regscodecinc 1
                             6787 ; 3    |
                             6788 ; 4    |
                             6789 ; 5    |
                             6790 ; 6    |#include "types.h"
                             6791 
                             6793 
                             6794 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6795 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6796 ; 3    |//
                             6797 ; 4    |// Filename: types.h
                             6798 ; 5    |// Description: Standard data types
                             6799 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6800 ; 7    |
                             6801 ; 8    |#ifndef _TYPES_H
                             6802 ; 9    |#define _TYPES_H
                             6803 ; 10   |
                             6804 ; 11   |// TODO:  move this outta here!
                             6805 ; 12   |#if !defined(NOERROR)
                             6806 ; 13   |#define NOERROR 0
                             6807 ; 14   |#define SUCCESS 0
                             6808 ; 15   |#endif 
                             6809 ; 16   |#if !defined(SUCCESS)
                             6810 ; 17   |#define SUCCESS  0
                             6811 ; 18   |#endif
                             6812 ; 19   |#if !defined(ERROR)
                             6813 ; 20   |#define ERROR   -1
                             6814 ; 21   |#endif
                             6815 ; 22   |#if !defined(FALSE)
                             6816 ; 23   |#define FALSE 0
                             6817 ; 24   |#endif
                             6818 ; 25   |#if !defined(TRUE)
                             6819 ; 26   |#define TRUE  1
                             6820 ; 27   |#endif
                             6821 ; 28   |
                             6822 ; 29   |#if !defined(NULL)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6823 ; 30   |#define NULL 0
                             6824 ; 31   |#endif
                             6825 ; 32   |
                             6826 ; 33   |#define MAX_INT     0x7FFFFF
                             6827 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6828 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6829 ; 36   |#define MAX_ULONG   (-1) 
                             6830 ; 37   |
                             6831 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6832 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6833 ; 40   |
                             6834 ; 41   |
                             6835 ; 42   |#define BYTE    unsigned char       // btVarName
                             6836 ; 43   |#define CHAR    signed char         // cVarName
                             6837 ; 44   |#define USHORT  unsigned short      // usVarName
                             6838 ; 45   |#define SHORT   unsigned short      // sVarName
                             6839 ; 46   |#define WORD    unsigned int        // wVarName
                             6840 ; 47   |#define INT     signed int          // iVarName
                             6841 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6842 ; 49   |#define LONG    signed long         // lVarName
                             6843 ; 50   |#define BOOL    unsigned int        // bVarName
                             6844 ; 51   |#define FRACT   _fract              // frVarName
                             6845 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6846 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6847 ; 54   |#define FLOAT   float               // fVarName
                             6848 ; 55   |#define DBL     double              // dVarName
                             6849 ; 56   |#define ENUM    enum                // eVarName
                             6850 ; 57   |#define CMX     _complex            // cmxVarName
                             6851 ; 58   |typedef WORD UCS3;                   // 
                             6852 ; 59   |
                             6853 ; 60   |#define UINT16  unsigned short
                             6854 ; 61   |#define UINT8   unsigned char   
                             6855 ; 62   |#define UINT32  unsigned long
                             6856 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6857 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6858 ; 65   |#define WCHAR   UINT16
                             6859 ; 66   |
                             6860 ; 67   |//UINT128 is 16 bytes or 6 words
                             6861 ; 68   |typedef struct UINT128_3500 {   
                             6862 ; 69   |    int val[6];     
                             6863 ; 70   |} UINT128_3500;
                             6864 ; 71   |
                             6865 ; 72   |#define UINT128   UINT128_3500
                             6866 ; 73   |
                             6867 ; 74   |// Little endian word packed byte strings:   
                             6868 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6869 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6870 ; 77   |// Little endian word packed byte strings:   
                             6871 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6872 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6873 ; 80   |
                             6874 ; 81   |// Declare Memory Spaces To Use When Coding
                             6875 ; 82   |// A. Sector Buffers
                             6876 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6877 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6878 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6879 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6880 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6881 ; 88   |// B. Media DDI Memory
                             6882 ; 89   |#define MEDIA_DDI_MEM _Y
                             6883 ; 90   |
                             6884 ; 91   |
                             6885 ; 92   |
                             6886 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6887 ; 94   |// Examples of circular pointers:
                             6888 ; 95   |//    INT CIRC cpiVarName
                             6889 ; 96   |//    DWORD CIRC cpdwVarName
                             6890 ; 97   |
                             6891 ; 98   |#define RETCODE INT                 // rcVarName
                             6892 ; 99   |
                             6893 ; 100  |// generic bitfield structure
                             6894 ; 101  |struct Bitfield {
                             6895 ; 102  |    unsigned int B0  :1;
                             6896 ; 103  |    unsigned int B1  :1;
                             6897 ; 104  |    unsigned int B2  :1;
                             6898 ; 105  |    unsigned int B3  :1;
                             6899 ; 106  |    unsigned int B4  :1;
                             6900 ; 107  |    unsigned int B5  :1;
                             6901 ; 108  |    unsigned int B6  :1;
                             6902 ; 109  |    unsigned int B7  :1;
                             6903 ; 110  |    unsigned int B8  :1;
                             6904 ; 111  |    unsigned int B9  :1;
                             6905 ; 112  |    unsigned int B10 :1;
                             6906 ; 113  |    unsigned int B11 :1;
                             6907 ; 114  |    unsigned int B12 :1;
                             6908 ; 115  |    unsigned int B13 :1;
                             6909 ; 116  |    unsigned int B14 :1;
                             6910 ; 117  |    unsigned int B15 :1;
                             6911 ; 118  |    unsigned int B16 :1;
                             6912 ; 119  |    unsigned int B17 :1;
                             6913 ; 120  |    unsigned int B18 :1;
                             6914 ; 121  |    unsigned int B19 :1;
                             6915 ; 122  |    unsigned int B20 :1;
                             6916 ; 123  |    unsigned int B21 :1;
                             6917 ; 124  |    unsigned int B22 :1;
                             6918 ; 125  |    unsigned int B23 :1;
                             6919 ; 126  |};
                             6920 ; 127  |
                             6921 ; 128  |union BitInt {
                             6922 ; 129  |        struct Bitfield B;
                             6923 ; 130  |        int        I;
                             6924 ; 131  |};
                             6925 ; 132  |
                             6926 ; 133  |#define MAX_MSG_LENGTH 10
                             6927 ; 134  |struct CMessage
                             6928 ; 135  |{
                             6929 ; 136  |        unsigned int m_uLength;
                             6930 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6931 ; 138  |};
                             6932 ; 139  |
                             6933 ; 140  |typedef struct {
                             6934 ; 141  |    WORD m_wLength;
                             6935 ; 142  |    WORD m_wMessage;
                             6936 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6937 ; 144  |} Message;
                             6938 ; 145  |
                             6939 ; 146  |struct MessageQueueDescriptor
                             6940 ; 147  |{
                             6941 ; 148  |        int *m_pBase;
                             6942 ; 149  |        int m_iModulo;
                             6943 ; 150  |        int m_iSize;
                             6944 ; 151  |        int *m_pHead;
                             6945 ; 152  |        int *m_pTail;
                             6946 ; 153  |};
                             6947 ; 154  |
                             6948 ; 155  |struct ModuleEntry
                             6949 ; 156  |{
                             6950 ; 157  |    int m_iSignaledEventMask;
                             6951 ; 158  |    int m_iWaitEventMask;
                             6952 ; 159  |    int m_iResourceOfCode;
                             6953 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6954 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             6955 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6956 ; 163  |    int m_uTimeOutHigh;
                             6957 ; 164  |    int m_uTimeOutLow;
                             6958 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6959 ; 166  |};
                             6960 ; 167  |
                             6961 ; 168  |union WaitMask{
                             6962 ; 169  |    struct B{
                             6963 ; 170  |        unsigned int m_bNone     :1;
                             6964 ; 171  |        unsigned int m_bMessage  :1;
                             6965 ; 172  |        unsigned int m_bTimer    :1;
                             6966 ; 173  |        unsigned int m_bButton   :1;
                             6967 ; 174  |    } B;
                             6968 ; 175  |    int I;
                             6969 ; 176  |} ;
                             6970 ; 177  |
                             6971 ; 178  |
                             6972 ; 179  |struct Button {
                             6973 ; 180  |        WORD wButtonEvent;
                             6974 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6975 ; 182  |};
                             6976 ; 183  |
                             6977 ; 184  |struct Message {
                             6978 ; 185  |        WORD wMsgLength;
                             6979 ; 186  |        WORD wMsgCommand;
                             6980 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6981 ; 188  |};
                             6982 ; 189  |
                             6983 ; 190  |union EventTypes {
                             6984 ; 191  |        struct CMessage msg;
                             6985 ; 192  |        struct Button Button ;
                             6986 ; 193  |        struct Message Message;
                             6987 ; 194  |};
                             6988 ; 195  |
                             6989 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6990 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6991 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6992 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6993 ; 200  |
                             6994 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6995 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6996 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6997 ; 204  |
                             6998 ; 205  |#if DEBUG
                             6999 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7000 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7001 ; 208  |#else 
                             7002 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             7003 ; 210  |#define DebugBuildAssert(x)    
                             7004 ; 211  |#endif
                             7005 ; 212  |
                             7006 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7007 ; 214  |//  #pragma asm
                             7008 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7009 ; 216  |//  #pragma endasm
                             7010 ; 217  |
                             7011 ; 218  |
                             7012 ; 219  |#ifdef COLOR_262K
                             7013 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             7014 ; 221  |#elif defined(COLOR_65K)
                             7015 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             7016 ; 223  |#else
                             7017 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             7018 ; 225  |#endif
                             7019 ; 226  |    
                             7020 ; 227  |#endif // #ifndef _TYPES_H
                             7021 
                             7023 
                             7024 ; 7    |
                             7025 ; 8    |
                             7026 ; 9    |
                             7027 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7028 ; 11   |
                             7029 ; 12   |//   SYSTEM STMP Registers 
                             7030 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             7031 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7032 ; 15   |
                             7033 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             7034 ; 17   |
                             7035 ; 18   |
                             7036 ; 19   |
                             7037 ; 20   |
                             7038 ; 21   |
                             7039 ; 22   |
                             7040 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             7041 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             7042 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             7043 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             7044 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             7045 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             7046 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             7047 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             7048 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             7049 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             7050 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             7051 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             7052 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             7053 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             7054 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             7055 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             7056 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             7057 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             7058 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             7059 ; 42   |
                             7060 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             7061 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             7062 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             7063 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             7064 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             7065 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             7066 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             7067 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             7068 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             7069 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             7070 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             7071 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             7072 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             7073 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             7074 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7075 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             7076 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             7077 ; 60   |
                             7078 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             7079 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             7080 ; 63   |
                             7081 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             7082 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             7083 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             7084 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             7085 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             7086 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             7087 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             7088 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             7089 ; 72   |
                             7090 ; 73   |#if defined(CAPLESS_HP)
                             7091 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             7092 ; 75   |#else 
                             7093 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             7094 ; 77   |#endif
                             7095 ; 78   |
                             7096 ; 79   |// Headphone control register
                             7097 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             7098 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             7099 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             7100 ; 83   |typedef union               
                             7101 ; 84   |{
                             7102 ; 85   |    struct {
                             7103 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             7104 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             7105 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             7106 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             7107 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             7108 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             7109 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             7110 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             7111 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             7112 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             7113 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             7114 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             7115 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             7116 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             7117 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             7118 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             7119 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             7120 ; 103  |    } B;
                             7121 ; 104  |    int I;
                             7122 ; 105  |    unsigned int U;
                             7123 ; 106  |} hpctrl_type;
                             7124 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             7125 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             7126 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             7127 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             7128 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             7129 ; 112  |
                             7130 ; 113  |
                             7131 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             7132 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             7133 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             7134 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             7135 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             7136 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             7137 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             7138 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             7139 ; 122  |
                             7140 ; 123  |
                             7141 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             7142 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             7143 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             7144 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             7145 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             7146 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             7147 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             7148 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             7149 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             7150 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             7151 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             7152 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             7153 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             7154 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             7155 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             7156 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             7157 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             7158 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             7159 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             7160 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             7161 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             7162 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             7163 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             7164 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             7165 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             7166 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             7167 ; 150  |
                             7168 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             7169 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             7170 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             7171 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             7172 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             7173 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             7174 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             7175 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             7176 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             7177 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             7178 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             7179 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             7180 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             7181 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             7182 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             7183 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             7184 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             7185 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             7186 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             7187 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             7188 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             7189 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             7190 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             7191 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             7192 ; 175  |
                             7193 ; 176  |
                             7194 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             7195 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             7196 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             7197 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             7198 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             7199 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             7200 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             7201 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             7202 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             7203 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             7204 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             7205 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             7206 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             7207 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             7208 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             7209 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             7210 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             7211 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             7212 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             7213 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             7214 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             7215 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             7216 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             7217 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             7218 ; 201  |
                             7219 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             7220 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             7221 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             7222 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             7223 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             7224 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             7225 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             7226 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             7227 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             7228 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             7229 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             7230 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             7231 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             7232 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             7233 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             7234 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             7235 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             7236 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             7237 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             7238 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             7239 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             7240 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             7241 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             7242 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             7243 ; 226  |
                             7244 ; 227  |typedef union               
                             7245 ; 228  |{
                             7246 ; 229  |    struct {
                             7247 ; 230  |        int INV_USB_CLK            : 1;
                             7248 ; 231  |        int USB_DFF_BYPASS         : 1;
                             7249 ; 232  |        int HOLD_GND               : 1;
                             7250 ; 233  |        int ACKI                   : 1;
                             7251 ; 234  |        int ASD2X                  : 1;
                             7252 ; 235  |        int PCPCU                  : 1;
                             7253 ; 236  |        int PCPCD                  : 1;
                             7254 ; 237  |        int DCKI                   : 1;
                             7255 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             7256 ; 239  |        int PSRN                   : 1;
                             7257 ; 240  |        int FX2                    : 1;
                             7258 ; 241  |        int VCOS                   : 1;
                             7259 ; 242  |        int XBCO                   : 1;
                             7260 ; 243  |        int XBGC                   : 1;
                             7261 ; 244  |        int ADTHD                  : 1;
                             7262 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             7263 ; 246  |        int PWDADC                 : 1;
                             7264 ; 247  |        int MICBIAS1               : 1;
                             7265 ; 248  |        int EZD                    : 1;
                             7266 ; 249  |        int DZCDA                  : 1;
                             7267 ; 250  |        int DZCFM                  : 1;
                             7268 ; 251  |        int DZCLI                  : 1;
                             7269 ; 252  |        int DZCMI                  : 1;
                             7270 ; 253  |        int DZCMA                  : 1;
                             7271 ; 254  |    } B;
                             7272 ; 255  |    int I;
                             7273 ; 256  |    unsigned int U;
                             7274 ; 257  |} mix_tbr_type;
                             7275 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             7276 ; 259  |
                             7277 ; 260  |
                             7278 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             7279 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             7280 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             7281 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             7282 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             7283 ; 266  |
                             7284 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             7285 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             7286 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             7287 ; 270  |
                             7288 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             7289 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             7290 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             7291 ; 274  |
                             7292 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             7293 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             7294 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             7295 ; 278  |
                             7296 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             7297 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             7298 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             7299 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             7300 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             7301 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             7302 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             7303 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             7304 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             7305 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             7306 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             7307 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             7308 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             7309 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             7310 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             7311 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             7312 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             7313 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             7314 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             7315 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             7316 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             7317 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             7318 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             7319 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             7320 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             7321 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             7322 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             7323 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             7324 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             7325 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7326 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             7327 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             7328 ; 311  |
                             7329 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             7330 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             7331 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             7332 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             7333 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             7334 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             7335 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             7336 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             7337 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             7338 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             7339 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             7340 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             7341 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             7342 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             7343 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             7344 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             7345 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             7346 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             7347 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             7348 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             7349 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             7350 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             7351 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             7352 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             7353 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             7354 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             7355 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             7356 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             7357 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             7358 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             7359 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             7360 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             7361 ; 344  |
                             7362 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             7363 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             7364 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             7365 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             7366 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             7367 ; 350  |
                             7368 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             7369 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             7370 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             7371 ; 354  |
                             7372 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             7373 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             7374 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             7375 ; 358  |
                             7376 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             7377 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             7378 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             7379 ; 362  |
                             7380 ; 363  |
                             7381 ; 364  |typedef union               
                             7382 ; 365  |{
                             7383 ; 366  |    struct
                             7384 ; 367  |    {
                             7385 ; 368  |        unsigned MR :5;
                             7386 ; 369  |        int         :3;
                             7387 ; 370  |        unsigned ML :5;
                             7388 ; 371  |        int         :2;
                             7389 ; 372  |        int MUTE    :1;
                             7390 ; 373  |    } B;
                             7391 ; 374  |    int I;
                             7392 ; 375  |    unsigned int U;
                             7393 ; 376  |} mix_mastervr_type;
                             7394 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             7395 ; 378  |
                             7396 ; 379  |
                             7397 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             7398 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             7399 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             7400 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             7401 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             7402 ; 385  |
                             7403 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             7404 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             7405 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             7406 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             7407 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             7408 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             7409 ; 392  |
                             7410 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             7411 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             7412 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             7413 ; 396  |
                             7414 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             7415 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             7416 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             7417 ; 400  |
                             7418 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             7419 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             7420 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             7421 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             7422 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             7423 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             7424 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             7425 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             7426 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             7427 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             7428 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             7429 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             7430 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             7431 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             7432 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             7433 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             7434 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             7435 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             7436 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             7437 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             7438 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             7439 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             7440 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             7441 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             7442 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             7443 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             7444 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             7445 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             7446 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             7447 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             7448 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             7449 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             7450 ; 433  |
                             7451 ; 434  |typedef union               
                             7452 ; 435  |{
                             7453 ; 436  |    struct {
                             7454 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             7455 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             7456 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             7457 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             7458 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             7459 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             7460 ; 443  |    } B;
                             7461 ; 444  |    int I;
                             7462 ; 445  |    unsigned int U;
                             7463 ; 446  |} mix_micinvr_type;
                             7464 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             7465 ; 448  |
                             7466 ; 449  |
                             7467 ; 450  |
                             7468 ; 451  |
                             7469 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             7470 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             7471 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             7472 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             7473 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             7474 ; 457  |
                             7475 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             7476 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             7477 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             7478 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             7479 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             7480 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             7481 ; 464  |
                             7482 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             7483 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             7484 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             7485 ; 468  |
                             7486 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             7487 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             7488 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             7489 ; 472  |
                             7490 ; 473  |typedef union               
                             7491 ; 474  |{
                             7492 ; 475  |    struct {
                             7493 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             7494 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             7495 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             7496 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             7497 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             7498 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             7499 ; 482  |    } B;
                             7500 ; 483  |    int I;
                             7501 ; 484  |    unsigned int U;
                             7502 ; 485  |} mix_line1invr_type;
                             7503 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             7504 ; 487  |
                             7505 ; 488  |
                             7506 ; 489  |
                             7507 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             7508 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             7509 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             7510 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             7511 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             7512 ; 495  |
                             7513 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             7514 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             7515 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             7516 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             7517 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             7518 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             7519 ; 502  |
                             7520 ; 503  |
                             7521 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             7522 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             7523 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             7524 ; 507  |
                             7525 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             7526 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             7527 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             7528 ; 511  |
                             7529 ; 512  |typedef union               
                             7530 ; 513  |{
                             7531 ; 514  |    struct {
                             7532 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             7533 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             7534 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             7535 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             7536 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             7537 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             7538 ; 521  |    } B;
                             7539 ; 522  |    int I;
                             7540 ; 523  |    unsigned int U;
                             7541 ; 524  |} mix_line2invr_type;
                             7542 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             7543 ; 526  |
                             7544 ; 527  |
                             7545 ; 528  |
                             7546 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             7547 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             7548 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             7549 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             7550 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             7551 ; 534  |
                             7552 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             7553 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             7554 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             7555 ; 538  |
                             7556 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             7557 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             7558 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             7559 ; 542  |
                             7560 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             7561 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             7562 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             7563 ; 546  |
                             7564 ; 547  |typedef union               
                             7565 ; 548  |{
                             7566 ; 549  |    struct {
                             7567 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             7568 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             7569 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             7570 ; 553  |    } B;
                             7571 ; 554  |    int I;
                             7572 ; 555  |    unsigned int U;
                             7573 ; 556  |} mix_dacinvr_type;
                             7574 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             7575 ; 558  |
                             7576 ; 559  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7577 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             7578 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             7579 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             7580 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             7581 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             7582 ; 565  |
                             7583 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             7584 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             7585 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             7586 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             7587 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             7588 ; 571  |
                             7589 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             7590 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             7591 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             7592 ; 575  |
                             7593 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             7594 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             7595 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             7596 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             7597 ; 580  |
                             7598 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             7599 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             7600 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             7601 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             7602 ; 585  |
                             7603 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             7604 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             7605 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETMASK)
                             7606 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             7607 ; 590  |
                             7608 ; 591  |typedef union               
                             7609 ; 592  |{
                             7610 ; 593  |    struct {
                             7611 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             7612 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             7613 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             7614 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             7615 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             7616 ; 599  |    } B;
                             7617 ; 600  |    int I;
                             7618 ; 601  |    unsigned int U;
                             7619 ; 602  |} mix_recselr_type;
                             7620 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             7621 ; 604  |
                             7622 ; 605  |
                             7623 ; 606  |
                             7624 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             7625 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             7626 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             7627 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             7628 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             7629 ; 612  |
                             7630 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             7631 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             7632 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             7633 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             7634 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             7635 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             7636 ; 619  |
                             7637 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             7638 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             7639 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             7640 ; 623  |
                             7641 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             7642 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             7643 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             7644 ; 627  |
                             7645 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             7646 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             7647 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             7648 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             7649 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             7650 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             7651 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             7652 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             7653 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             7654 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             7655 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             7656 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             7657 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             7658 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             7659 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             7660 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             7661 ; 644  |
                             7662 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             7663 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             7664 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             7665 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             7666 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             7667 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             7668 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             7669 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             7670 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             7671 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             7672 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             7673 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             7674 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             7675 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             7676 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             7677 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             7678 ; 661  |
                             7679 ; 662  |typedef union               
                             7680 ; 663  |{
                             7681 ; 664  |    struct {
                             7682 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             7683 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             7684 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             7685 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             7686 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             7687 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             7688 ; 671  |    } B;
                             7689 ; 672  |    int I;
                             7690 ; 673  |    unsigned int U;
                             7691 ; 674  |} mix_adcgainr_type;
                             7692 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             7693 ; 676  |
                             7694 ; 677  |
                             7695 ; 678  |
                             7696 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             7697 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             7698 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             7699 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             7700 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             7701 ; 684  |
                             7702 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             7703 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             7704 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             7705 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             7706 ; 689  |
                             7707 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             7708 ; 691  |
                             7709 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             7710 ; 693  |
                             7711 ; 694  |typedef union               
                             7712 ; 695  |{
                             7713 ; 696  |    struct {
                             7714 ; 697  |                int                     : 9;
                             7715 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             7716 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             7717 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             7718 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             7719 ; 702  |    } B;
                             7720 ; 703  |    int I;
                             7721 ; 704  |    unsigned int U;
                             7722 ; 705  |} mix_pwrdnr_type;
                             7723 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             7724 ; 707  |
                             7725 ; 708  |
                             7726 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             7727 ; 710  |
                             7728 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             7729 ; 712  |
                             7730 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             7731 ; 714  |
                             7732 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             7733 ; 716  |
                             7734 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             7735 ; 718  |
                             7736 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             7737 ; 720  |
                             7738 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             7739 ; 722  |
                             7740 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             7741 ; 724  |
                             7742 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             7743 ; 726  |
                             7744 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             7745 ; 728  |
                             7746 ; 729  |
                             7747 ; 730  |
                             7748 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             7749 ; 732  |
                             7750 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             7751 ; 734  |
                             7752 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             7753 ; 736  |
                             7754 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             7755 ; 738  |
                             7756 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             7757 ; 740  |
                             7758 ; 741  |
                             7759 ; 742  |
                             7760 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_TEST_DAC_CHOP_CLK_BITPOS)        
                             7761 ; 744  |
                             7762 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             7763 ; 746  |
                             7764 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             7765 ; 748  |
                             7766 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_CFG_BITPOS) 
                             7767 ; 750  |
                             7768 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_BITPOS) 
                             7769 ; 752  |
                             7770 ; 753  |
                             7771 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             7772 ; 755  |
                             7773 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)     
                             7774 ; 757  |
                             7775 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             7776 ; 759  |
                             7777 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             7778 ; 761  |
                             7779 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             7780 ; 763  |
                             7781 ; 764  |
                             7782 ; 765  |typedef union               
                             7783 ; 766  |{
                             7784 ; 767  |    struct {
                             7785 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             7786 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             7787 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             7788 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             7789 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             7790 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             7791 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             7792 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             7793 ; 776  |    } B;
                             7794 ; 777  |    int I;
                             7795 ; 778  |    unsigned int U;
                             7796 ; 779  |} mix_test_type;
                             7797 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Analog Persistent Config Register */
                             7798 ; 781  |
                             7799 ; 782  |
                             7800 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             7801 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             7802 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             7803 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             7804 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             7805 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             7806 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             7807 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             7808 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             7809 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             7810 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             7811 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             7812 ; 795  |
                             7813 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             7814 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             7815 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             7816 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             7817 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             7818 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             7819 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             7820 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             7821 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             7822 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             7823 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             7824 ; 807  |
                             7825 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_DACVBGVAL_BITPOS)
                             7826 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_BITPOS)
                             7827 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7828 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS)
                             7829 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCREFV_BITPOS)
                             7830 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_BITPOS)
                             7831 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDWNS_BITPOS)
                             7832 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BITPOS)
                             7833 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BITPOS)
                             7834 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_PWR_BITPOS)
                             7835 ; 818  |
                             7836 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             7837 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             7838 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             7839 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             7840 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             7841 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             7842 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             7843 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             7844 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             7845 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             7846 ; 829  |
                             7847 ; 830  |typedef union               
                             7848 ; 831  |{
                             7849 ; 832  |    struct {
                             7850 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             7851 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             7852 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             7853 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             7854 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             7855 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             7856 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             7857 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             7858 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             7859 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             7860 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             7861 ; 844  |    } B;
                             7862 ; 845  |    int I;
                             7863 ; 846  |    unsigned int U;
                             7864 ; 847  |} ref_ctrl_type;
                             7865 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             7866 ; 849  |
                             7867 ; 850  |
                             7868 ; 851  |
                             7869 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             7870 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             7871 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             7872 ; 855  |//////  DAC Registers
                             7873 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             7874 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             7875 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             7876 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             7877 ; 860  |
                             7878 ; 861  |
                             7879 ; 862  |
                             7880 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             7881 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             7882 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             7883 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             7884 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             7885 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             7886 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             7887 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             7888 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             7889 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             7890 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             7891 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             7892 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             7893 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             7894 ; 877  |
                             7895 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             7896 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             7897 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             7898 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             7899 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             7900 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             7901 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             7902 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             7903 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             7904 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             7905 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             7906 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             7907 ; 890  |
                             7908 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             7909 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             7910 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             7911 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             7912 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             7913 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             7914 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             7915 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             7916 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             7917 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             7918 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             7919 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             7920 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             7921 ; 904  |
                             7922 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             7923 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             7924 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             7925 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             7926 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             7927 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             7928 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             7929 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             7930 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             7931 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             7932 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             7933 ; 916  |
                             7934 ; 917  |
                             7935 ; 918  |typedef union               
                             7936 ; 919  |{
                             7937 ; 920  |    struct {
                             7938 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             7939 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             7940 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             7941 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             7942 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             7943 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             7944 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             7945 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             7946 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             7947 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             7948 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             7949 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             7950 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             7951 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             7952 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             7953 ; 936  |    } B;
                             7954 ; 937  |    int I;
                             7955 ; 938  |    unsigned int U;
                             7956 ; 939  |} dac_csr_type;
                             7957 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             7958 ; 941  |
                             7959 ; 942  |
                             7960 ; 943  |
                             7961 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             7962 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             7963 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             7964 ; 947  |
                             7965 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             7966 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             7967 ; 950  |
                             7968 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             7969 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             7970 ; 953  |
                             7971 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             7972 ; 955  |
                             7973 ; 956  |typedef union               
                             7974 ; 957  |{
                             7975 ; 958  |    struct {
                             7976 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             7977 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             7978 ; 961  |    } B;
                             7979 ; 962  |    int I;
                             7980 ; 963  |    unsigned int U;
                             7981 ; 964  |} dac_srr_type;
                             7982 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             7983 ; 966  |
                             7984 ; 967  |
                             7985 ; 968  |
                             7986 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             7987 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             7988 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             7989 ; 972  |
                             7990 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             7991 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             7992 ; 975  |
                             7993 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             7994 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                             7995 ; 978  |
                             7996 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             7997 ; 980  |
                             7998 ; 981  |typedef union               
                             7999 ; 982  |{
                             8000 ; 983  |    struct {
                             8001 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             8002 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             8003 ; 986  |    } B;
                             8004 ; 987  |    int I;
                             8005 ; 988  |    unsigned int U;
                             8006 ; 989  |} dac_wcr_type;
                             8007 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             8008 ; 991  |
                             8009 ; 992  |
                             8010 ; 993  |
                             8011 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             8012 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             8013 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             8014 ; 997  |
                             8015 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             8016 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             8017 ; 1000 |
                             8018 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             8019 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                             8020 ; 1003 |
                             8021 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             8022 ; 1005 |
                             8023 ; 1006 |typedef union               
                             8024 ; 1007 |{
                             8025 ; 1008 |    struct {
                             8026 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             8027 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             8028 ; 1011 |    } B;
                             8029 ; 1012 |    int I;
                             8030 ; 1013 |    unsigned int U;
                             8031 ; 1014 |} dac_cpr_type;
                             8032 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             8033 ; 1016 |
                             8034 ; 1017 |
                             8035 ; 1018 |
                             8036 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             8037 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             8038 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             8039 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             8040 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             8041 ; 1024 |
                             8042 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             8043 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             8044 ; 1027 |
                             8045 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             8046 ; 1029 |
                             8047 ; 1030 |typedef union               
                             8048 ; 1031 |{
                             8049 ; 1032 |    struct {
                             8050 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             8051 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             8052 ; 1035 |    } B;
                             8053 ; 1036 |    int I;
                             8054 ; 1037 |    unsigned int U;
                             8055 ; 1038 |} dac_mr_type;
                             8056 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             8057 ; 1040 |
                             8058 ; 1041 |
                             8059 ; 1042 |
                             8060 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             8061 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             8062 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             8063 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             8064 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             8065 ; 1048 |
                             8066 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             8067 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                             8068 ; 1051 |
                             8069 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             8070 ; 1053 |
                             8071 ; 1054 |typedef union               
                             8072 ; 1055 |{
                             8073 ; 1056 |    struct {
                             8074 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             8075 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             8076 ; 1059 |    } B;
                             8077 ; 1060 |    int I;
                             8078 ; 1061 |    unsigned int U;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8079 ; 1062 |} dac_bar_type;
                             8080 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             8081 ; 1064 |
                             8082 ; 1065 |
                             8083 ; 1066 |
                             8084 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             8085 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             8086 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             8087 ; 1070 |
                             8088 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             8089 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             8090 ; 1073 |
                             8091 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                             8092 ; 1075 |
                             8093 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             8094 ; 1077 |
                             8095 ; 1078 |typedef union               
                             8096 ; 1079 |{
                             8097 ; 1080 |    struct {
                             8098 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             8099 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             8100 ; 1083 |    } B;
                             8101 ; 1084 |    int I;
                             8102 ; 1085 |    unsigned int U;
                             8103 ; 1086 |} dac_icr_type;
                             8104 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             8105 ; 1088 |
                             8106 ; 1089 |
                             8107 ; 1090 |
                             8108 ; 1091 |
                             8109 ; 1092 |
                             8110 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             8111 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             8112 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             8113 ; 1096 |//////  ADC Registers
                             8114 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             8115 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             8116 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             8117 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             8118 ; 1101 |
                             8119 ; 1102 |
                             8120 ; 1103 |
                             8121 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             8122 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             8123 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             8124 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             8125 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             8126 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             8127 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             8128 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             8129 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             8130 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             8131 ; 1114 |
                             8132 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             8133 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             8134 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             8135 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             8136 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             8137 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             8138 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             8139 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             8140 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             8141 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             8142 ; 1125 |
                             8143 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             8144 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             8145 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             8146 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             8147 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             8148 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS)        
                             8149 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BITPOS)        
                             8150 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             8151 ; 1134 |
                             8152 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             8153 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             8154 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             8155 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             8156 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             8157 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             8158 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             8159 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             8160 ; 1143 |
                             8161 ; 1144 |typedef union               
                             8162 ; 1145 |{
                             8163 ; 1146 |    struct {
                             8164 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             8165 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             8166 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             8167 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             8168 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             8169 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             8170 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             8171 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             8172 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             8173 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             8174 ; 1157 |    } B;
                             8175 ; 1158 |    int I;
                             8176 ; 1159 |    unsigned int U;
                             8177 ; 1160 |} adc_csr_type;
                             8178 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             8179 ; 1162 |
                             8180 ; 1163 |
                             8181 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             8182 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             8183 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             8184 ; 1167 |
                             8185 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             8186 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             8187 ; 1170 |
                             8188 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                             8189 ; 1172 |
                             8190 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             8191 ; 1174 |
                             8192 ; 1175 |typedef union               
                             8193 ; 1176 |{
                             8194 ; 1177 |    struct {
                             8195 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             8196 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             8197 ; 1180 |    } B;
                             8198 ; 1181 |    int I;
                             8199 ; 1182 |    unsigned int U;
                             8200 ; 1183 |} adc_wcr_type;
                             8201 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             8202 ; 1185 |
                             8203 ; 1186 |
                             8204 ; 1187 |
                             8205 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             8206 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             8207 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             8208 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             8209 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             8210 ; 1193 |
                             8211 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             8212 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                             8213 ; 1196 |
                             8214 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             8215 ; 1198 |
                             8216 ; 1199 |typedef union               
                             8217 ; 1200 |{
                             8218 ; 1201 |    struct {
                             8219 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             8220 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             8221 ; 1204 |    } B;
                             8222 ; 1205 |    int I;
                             8223 ; 1206 |    unsigned int U;
                             8224 ; 1207 |} adc_bar_type;
                             8225 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             8226 ; 1209 |
                             8227 ; 1210 |
                             8228 ; 1211 |
                             8229 ; 1212 |
                             8230 ; 1213 |
                             8231 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             8232 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             8233 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             8234 ; 1217 |
                             8235 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             8236 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             8237 ; 1220 |
                             8238 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                             8239 ; 1222 |
                             8240 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             8241 ; 1224 |
                             8242 ; 1225 |typedef union               
                             8243 ; 1226 |{
                             8244 ; 1227 |    struct {
                             8245 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             8246 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             8247 ; 1230 |    } B;
                             8248 ; 1231 |    int I;
                             8249 ; 1232 |    unsigned int U;
                             8250 ; 1233 |} adc_cpr_type;
                             8251 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             8252 ; 1235 |
                             8253 ; 1236 |
                             8254 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             8255 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             8256 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             8257 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             8258 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             8259 ; 1242 |
                             8260 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             8261 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             8262 ; 1245 |
                             8263 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             8264 ; 1247 |
                             8265 ; 1248 |typedef union               
                             8266 ; 1249 |{
                             8267 ; 1250 |    struct {
                             8268 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             8269 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             8270 ; 1253 |    } B;
                             8271 ; 1254 |    int I;
                             8272 ; 1255 |    unsigned int U;
                             8273 ; 1256 |} adc_mr_type;
                             8274 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             8275 ; 1258 |
                             8276 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             8277 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             8278 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             8279 ; 1262 |
                             8280 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             8281 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             8282 ; 1265 |
                             8283 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             8284 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             8285 ; 1268 |
                             8286 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             8287 ; 1270 |
                             8288 ; 1271 |typedef union               
                             8289 ; 1272 |{
                             8290 ; 1273 |    struct {
                             8291 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             8292 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             8293 ; 1276 |    } B;
                             8294 ; 1277 |    int I;
                             8295 ; 1278 |    unsigned int U;
                             8296 ; 1279 |} adc_srr_type;
                             8297 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             8298 ; 1281 |
                             8299 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             8300 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             8301 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             8302 ; 1285 |
                             8303 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             8304 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             8305 ; 1288 |
                             8306 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                             8307 ; 1290 |
                             8308 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             8309 ; 1292 |
                             8310 ; 1293 |typedef union               
                             8311 ; 1294 |{
                             8312 ; 1295 |    struct {
                             8313 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             8314 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             8315 ; 1298 |    } B;
                             8316 ; 1299 |    int I;
                             8317 ; 1300 |    unsigned int U;
                             8318 ; 1301 |} adc_icr_type;
                             8319 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             8320 ; 1303 |
                             8321 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             8322 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             8323 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             8324 ; 1307 |
                             8325 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             8326 ; 1309 |
                             8327 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             8328 ; 1311 |
                             8329 ; 1312 |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8330 ; 1313 |
                             8331 
                             8333 
                             8334 ; 20   |#include "regsdcdc.h"
                             8335 
                             8337 
                             8338 ; 1    |#if !(defined(regsdcdcinc))
                             8339 ; 2    |
                             8340 ; 3    |#define regssysteminc 1
                             8341 ; 4    |
                             8342 ; 5    |
                             8343 ; 6    |
                             8344 ; 7    |#include "types.h"
                             8345 
                             8347 
                             8348 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8349 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8350 ; 3    |//
                             8351 ; 4    |// Filename: types.h
                             8352 ; 5    |// Description: Standard data types
                             8353 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8354 ; 7    |
                             8355 ; 8    |#ifndef _TYPES_H
                             8356 ; 9    |#define _TYPES_H
                             8357 ; 10   |
                             8358 ; 11   |// TODO:  move this outta here!
                             8359 ; 12   |#if !defined(NOERROR)
                             8360 ; 13   |#define NOERROR 0
                             8361 ; 14   |#define SUCCESS 0
                             8362 ; 15   |#endif 
                             8363 ; 16   |#if !defined(SUCCESS)
                             8364 ; 17   |#define SUCCESS  0
                             8365 ; 18   |#endif
                             8366 ; 19   |#if !defined(ERROR)
                             8367 ; 20   |#define ERROR   -1
                             8368 ; 21   |#endif
                             8369 ; 22   |#if !defined(FALSE)
                             8370 ; 23   |#define FALSE 0
                             8371 ; 24   |#endif
                             8372 ; 25   |#if !defined(TRUE)
                             8373 ; 26   |#define TRUE  1
                             8374 ; 27   |#endif
                             8375 ; 28   |
                             8376 ; 29   |#if !defined(NULL)
                             8377 ; 30   |#define NULL 0
                             8378 ; 31   |#endif
                             8379 ; 32   |
                             8380 ; 33   |#define MAX_INT     0x7FFFFF
                             8381 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8382 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8383 ; 36   |#define MAX_ULONG   (-1) 
                             8384 ; 37   |
                             8385 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8386 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8387 ; 40   |
                             8388 ; 41   |
                             8389 ; 42   |#define BYTE    unsigned char       // btVarName
                             8390 ; 43   |#define CHAR    signed char         // cVarName
                             8391 ; 44   |#define USHORT  unsigned short      // usVarName
                             8392 ; 45   |#define SHORT   unsigned short      // sVarName
                             8393 ; 46   |#define WORD    unsigned int        // wVarName
                             8394 ; 47   |#define INT     signed int          // iVarName
                             8395 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8396 ; 49   |#define LONG    signed long         // lVarName
                             8397 ; 50   |#define BOOL    unsigned int        // bVarName
                             8398 ; 51   |#define FRACT   _fract              // frVarName
                             8399 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8400 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8401 ; 54   |#define FLOAT   float               // fVarName
                             8402 ; 55   |#define DBL     double              // dVarName
                             8403 ; 56   |#define ENUM    enum                // eVarName
                             8404 ; 57   |#define CMX     _complex            // cmxVarName
                             8405 ; 58   |typedef WORD UCS3;                   // 
                             8406 ; 59   |
                             8407 ; 60   |#define UINT16  unsigned short
                             8408 ; 61   |#define UINT8   unsigned char   
                             8409 ; 62   |#define UINT32  unsigned long
                             8410 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8411 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8412 ; 65   |#define WCHAR   UINT16
                             8413 ; 66   |
                             8414 ; 67   |//UINT128 is 16 bytes or 6 words
                             8415 ; 68   |typedef struct UINT128_3500 {   
                             8416 ; 69   |    int val[6];     
                             8417 ; 70   |} UINT128_3500;
                             8418 ; 71   |
                             8419 ; 72   |#define UINT128   UINT128_3500
                             8420 ; 73   |
                             8421 ; 74   |// Little endian word packed byte strings:   
                             8422 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8423 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8424 ; 77   |// Little endian word packed byte strings:   
                             8425 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8426 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8427 ; 80   |
                             8428 ; 81   |// Declare Memory Spaces To Use When Coding
                             8429 ; 82   |// A. Sector Buffers
                             8430 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8431 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8432 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8433 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8434 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8435 ; 88   |// B. Media DDI Memory
                             8436 ; 89   |#define MEDIA_DDI_MEM _Y
                             8437 ; 90   |
                             8438 ; 91   |
                             8439 ; 92   |
                             8440 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8441 ; 94   |// Examples of circular pointers:
                             8442 ; 95   |//    INT CIRC cpiVarName
                             8443 ; 96   |//    DWORD CIRC cpdwVarName
                             8444 ; 97   |
                             8445 ; 98   |#define RETCODE INT                 // rcVarName
                             8446 ; 99   |
                             8447 ; 100  |// generic bitfield structure
                             8448 ; 101  |struct Bitfield {
                             8449 ; 102  |    unsigned int B0  :1;
                             8450 ; 103  |    unsigned int B1  :1;
                             8451 ; 104  |    unsigned int B2  :1;
                             8452 ; 105  |    unsigned int B3  :1;
                             8453 ; 106  |    unsigned int B4  :1;
                             8454 ; 107  |    unsigned int B5  :1;
                             8455 ; 108  |    unsigned int B6  :1;
                             8456 ; 109  |    unsigned int B7  :1;
                             8457 ; 110  |    unsigned int B8  :1;
                             8458 ; 111  |    unsigned int B9  :1;
                             8459 ; 112  |    unsigned int B10 :1;
                             8460 ; 113  |    unsigned int B11 :1;
                             8461 ; 114  |    unsigned int B12 :1;
                             8462 ; 115  |    unsigned int B13 :1;
                             8463 ; 116  |    unsigned int B14 :1;
                             8464 ; 117  |    unsigned int B15 :1;
                             8465 ; 118  |    unsigned int B16 :1;
                             8466 ; 119  |    unsigned int B17 :1;
                             8467 ; 120  |    unsigned int B18 :1;
                             8468 ; 121  |    unsigned int B19 :1;
                             8469 ; 122  |    unsigned int B20 :1;
                             8470 ; 123  |    unsigned int B21 :1;
                             8471 ; 124  |    unsigned int B22 :1;
                             8472 ; 125  |    unsigned int B23 :1;
                             8473 ; 126  |};
                             8474 ; 127  |
                             8475 ; 128  |union BitInt {
                             8476 ; 129  |        struct Bitfield B;
                             8477 ; 130  |        int        I;
                             8478 ; 131  |};
                             8479 ; 132  |
                             8480 ; 133  |#define MAX_MSG_LENGTH 10
                             8481 ; 134  |struct CMessage
                             8482 ; 135  |{
                             8483 ; 136  |        unsigned int m_uLength;
                             8484 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8485 ; 138  |};
                             8486 ; 139  |
                             8487 ; 140  |typedef struct {
                             8488 ; 141  |    WORD m_wLength;
                             8489 ; 142  |    WORD m_wMessage;
                             8490 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8491 ; 144  |} Message;
                             8492 ; 145  |
                             8493 ; 146  |struct MessageQueueDescriptor
                             8494 ; 147  |{
                             8495 ; 148  |        int *m_pBase;
                             8496 ; 149  |        int m_iModulo;
                             8497 ; 150  |        int m_iSize;
                             8498 ; 151  |        int *m_pHead;
                             8499 ; 152  |        int *m_pTail;
                             8500 ; 153  |};
                             8501 ; 154  |
                             8502 ; 155  |struct ModuleEntry
                             8503 ; 156  |{
                             8504 ; 157  |    int m_iSignaledEventMask;
                             8505 ; 158  |    int m_iWaitEventMask;
                             8506 ; 159  |    int m_iResourceOfCode;
                             8507 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8508 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             8509 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8510 ; 163  |    int m_uTimeOutHigh;
                             8511 ; 164  |    int m_uTimeOutLow;
                             8512 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8513 ; 166  |};
                             8514 ; 167  |
                             8515 ; 168  |union WaitMask{
                             8516 ; 169  |    struct B{
                             8517 ; 170  |        unsigned int m_bNone     :1;
                             8518 ; 171  |        unsigned int m_bMessage  :1;
                             8519 ; 172  |        unsigned int m_bTimer    :1;
                             8520 ; 173  |        unsigned int m_bButton   :1;
                             8521 ; 174  |    } B;
                             8522 ; 175  |    int I;
                             8523 ; 176  |} ;
                             8524 ; 177  |
                             8525 ; 178  |
                             8526 ; 179  |struct Button {
                             8527 ; 180  |        WORD wButtonEvent;
                             8528 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8529 ; 182  |};
                             8530 ; 183  |
                             8531 ; 184  |struct Message {
                             8532 ; 185  |        WORD wMsgLength;
                             8533 ; 186  |        WORD wMsgCommand;
                             8534 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8535 ; 188  |};
                             8536 ; 189  |
                             8537 ; 190  |union EventTypes {
                             8538 ; 191  |        struct CMessage msg;
                             8539 ; 192  |        struct Button Button ;
                             8540 ; 193  |        struct Message Message;
                             8541 ; 194  |};
                             8542 ; 195  |
                             8543 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8544 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8545 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8546 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8547 ; 200  |
                             8548 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8549 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8550 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8551 ; 204  |
                             8552 ; 205  |#if DEBUG
                             8553 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8554 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8555 ; 208  |#else 
                             8556 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             8557 ; 210  |#define DebugBuildAssert(x)    
                             8558 ; 211  |#endif
                             8559 ; 212  |
                             8560 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8561 ; 214  |//  #pragma asm
                             8562 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8563 ; 216  |//  #pragma endasm
                             8564 ; 217  |
                             8565 ; 218  |
                             8566 ; 219  |#ifdef COLOR_262K
                             8567 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             8568 ; 221  |#elif defined(COLOR_65K)
                             8569 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             8570 ; 223  |#else
                             8571 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             8572 ; 225  |#endif
                             8573 ; 226  |    
                             8574 ; 227  |#endif // #ifndef _TYPES_H
                             8575 
                             8577 
                             8578 ; 8    |
                             8579 ; 9    |
                             8580 ; 10   |
                             8581 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8582 ; 12   |
                             8583 ; 13   |//   SYSTEM STMP Registers 
                             8584 ; 14   |//      Last Edited 2.19.2003 M. May
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8585 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8586 ; 16   |
                             8587 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             8588 ; 18   |
                             8589 ; 19   |
                             8590 ; 20   |
                             8591 ; 21   |
                             8592 ; 22   |
                             8593 ; 23   |
                             8594 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             8595 ; 25   |
                             8596 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             8597 ; 27   |
                             8598 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             8599 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             8600 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             8601 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             8602 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             8603 ; 33   |
                             8604 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             8605 ; 35   |
                             8606 ; 36   |
                             8607 ; 37   |
                             8608 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             8609 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             8610 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             8611 ; 41   |
                             8612 ; 42   |
                             8613 ; 43   |
                             8614 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBU_BITPOS)        
                             8615 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBO_BITPOS) 
                             8616 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NLEV_BITPOS)  
                             8617 ; 47   |
                             8618 ; 48   |
                             8619 ; 49   |
                             8620 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             8621 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             8622 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             8623 ; 53   |
                             8624 ; 54   |
                             8625 ; 55   |
                             8626 ; 56   |
                             8627 ; 57   |
                             8628 ; 58   |typedef union               
                             8629 ; 59   |{
                             8630 ; 60   |    struct {
                             8631 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             8632 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             8633 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             8634 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             8635 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             8636 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             8637 ; 67   |    } B;
                             8638 ; 68   |    unsigned int I;
                             8639 ; 69   |} dcdc1_ctrl0_type;
                             8640 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* DcDc#1 Limit Level Register */
                             8641 ; 71   |
                             8642 ; 72   |
                             8643 ; 73   |
                             8644 ; 74   |
                             8645 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             8646 ; 76   |
                             8647 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             8648 ; 78   |
                             8649 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             8650 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             8651 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             8652 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             8653 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             8654 ; 84   |
                             8655 ; 85   |
                             8656 ; 86   |
                             8657 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             8658 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             8659 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             8660 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             8661 ; 91   |
                             8662 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS)        
                             8663 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS) 
                             8664 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FFOR_BITPOS)  
                             8665 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CTRL1_PFMCTRL_BITPOS)   
                             8666 ; 96   |
                             8667 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             8668 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             8669 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             8670 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             8671 ; 101  |
                             8672 ; 102  |
                             8673 ; 103  |typedef union               
                             8674 ; 104  |{
                             8675 ; 105  |    struct {
                             8676 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             8677 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             8678 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             8679 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             8680 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             8681 ; 111  |    } B;
                             8682 ; 112  |    unsigned int I;
                             8683 ; 113  |} dcdc1_ctrl1_type;
                             8684 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* DcDc#1 Ctrl #1 Register */
                             8685 ; 115  |
                             8686 ; 116  |
                             8687 ; 117  |
                             8688 ; 118  |
                             8689 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             8690 ; 120  |
                             8691 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             8692 ; 122  |
                             8693 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             8694 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             8695 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             8696 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             8697 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             8698 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             8699 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             8700 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             8701 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             8702 ; 132  |
                             8703 ; 133  |
                             8704 ; 134  |
                             8705 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             8706 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             8707 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             8708 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             8709 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             8710 ; 140  |
                             8711 ; 141  |
                             8712 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             8713 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             8714 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             8715 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             8716 ; 146  |
                             8717 ; 147  |
                             8718 ; 148  |
                             8719 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)     
                             8720 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK) 
                             8721 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK)  
                             8722 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK)  
                             8723 ; 153  |
                             8724 ; 154  |
                             8725 ; 155  |typedef union               
                             8726 ; 156  |{
                             8727 ; 157  |    struct {
                             8728 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             8729 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             8730 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             8731 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             8732 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             8733 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             8734 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             8735 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             8736 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             8737 ; 167  |    } B;
                             8738 ; 168  |    unsigned int I;
                             8739 ; 169  |} dcdc_vddio_type;
                             8740 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* DcDc VDDIO Register */
                             8741 ; 171  |
                             8742 ; 172  |
                             8743 ; 173  |
                             8744 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             8745 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             8746 ; 176  |
                             8747 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             8748 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             8749 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             8750 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             8751 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             8752 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             8753 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             8754 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             8755 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             8756 ; 186  |
                             8757 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             8758 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             8759 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             8760 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             8761 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             8762 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             8763 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             8764 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             8765 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             8766 ; 196  |
                             8767 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)     
                             8768 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             8769 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)  
                             8770 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)  
                             8771 ; 201  |
                             8772 ; 202  |typedef union               
                             8773 ; 203  |{
                             8774 ; 204  |    struct {
                             8775 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             8776 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             8777 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             8778 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             8779 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             8780 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             8781 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             8782 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             8783 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             8784 ; 214  |    } B;
                             8785 ; 215  |   unsigned int I;
                             8786 ; 216  |        unsigned U;
                             8787 ; 217  |} dcdc_vddd_type;
                             8788 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc VDDD Register */
                             8789 ; 219  |
                             8790 ; 220  |
                             8791 ; 221  |
                             8792 ; 222  |
                             8793 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             8794 ; 224  |
                             8795 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             8796 ; 226  |
                             8797 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             8798 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             8799 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             8800 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             8801 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             8802 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             8803 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             8804 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             8805 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             8806 ; 236  |
                             8807 ; 237  |
                             8808 ; 238  |
                             8809 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             8810 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             8811 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             8812 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             8813 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             8814 ; 244  |
                             8815 ; 245  |
                             8816 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             8817 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             8818 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             8819 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             8820 ; 250  |
                             8821 ; 251  |
                             8822 ; 252  |
                             8823 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)     
                             8824 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             8825 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)  
                             8826 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)  
                             8827 ; 257  |
                             8828 ; 258  |
                             8829 ; 259  |typedef union               
                             8830 ; 260  |{
                             8831 ; 261  |    struct {
                             8832 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             8833 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             8834 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             8835 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8836 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             8837 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             8838 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             8839 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             8840 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             8841 ; 271  |    } B;
                             8842 ; 272  |    unsigned int I;
                             8843 ; 273  |} dcdc_vdda_type;
                             8844 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc VDDA Register */
                             8845 ; 275  |
                             8846 ; 276  |
                             8847 ; 277  |
                             8848 ; 278  |
                             8849 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             8850 ; 280  |
                             8851 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             8852 ; 282  |
                             8853 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             8854 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             8855 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             8856 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             8857 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             8858 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             8859 ; 289  |
                             8860 ; 290  |
                             8861 ; 291  |
                             8862 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             8863 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             8864 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             8865 ; 295  |
                             8866 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBU_BITPOS)        
                             8867 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBO_BITPOS) 
                             8868 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NLEV_BITPOS)  
                             8869 ; 299  |
                             8870 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             8871 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             8872 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             8873 ; 303  |
                             8874 ; 304  |
                             8875 ; 305  |typedef union               
                             8876 ; 306  |{
                             8877 ; 307  |    struct {
                             8878 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             8879 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             8880 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             8881 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             8882 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             8883 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             8884 ; 314  |    } B;
                             8885 ; 315  |    unsigned int I;
                             8886 ; 316  |} dcdc2_ctrl0_type; 
                             8887 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* DcDc#2 Limit Level Register */
                             8888 ; 318  |
                             8889 ; 319  |
                             8890 ; 320  |
                             8891 ; 321  |
                             8892 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             8893 ; 323  |
                             8894 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             8895 ; 325  |
                             8896 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             8897 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             8898 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             8899 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             8900 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             8901 ; 331  |
                             8902 ; 332  |
                             8903 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             8904 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             8905 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             8906 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             8907 ; 337  |
                             8908 ; 338  |
                             8909 ; 339  |
                             8910 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS)        
                             8911 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS) 
                             8912 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FFOR_BITPOS)  
                             8913 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CTRL1_PFMCTRL_BITPOS)  
                             8914 ; 344  |
                             8915 ; 345  |
                             8916 ; 346  |
                             8917 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             8918 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             8919 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             8920 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             8921 ; 351  |
                             8922 ; 352  |
                             8923 ; 353  |typedef union               
                             8924 ; 354  |{
                             8925 ; 355  |    struct {
                             8926 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             8927 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                             8928 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             8929 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             8930 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             8931 ; 361  |    } B;
                             8932 ; 362  |    unsigned int I;
                             8933 ; 363  |} dcdc2_ctrl1_type;
                             8934 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* DcDc#2 Ctrl Register #1 */
                             8935 ; 365  |
                             8936 ; 366  |
                             8937 ; 367  |
                             8938 ; 368  |
                             8939 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             8940 ; 370  |
                             8941 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             8942 ; 372  |
                             8943 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             8944 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             8945 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             8946 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             8947 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             8948 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             8949 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             8950 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             8951 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             8952 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             8953 ; 383  |
                             8954 ; 384  |
                             8955 ; 385  |
                             8956 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             8957 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             8958 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             8959 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             8960 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             8961 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             8962 ; 392  |
                             8963 ; 393  |
                             8964 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWRUP_BITPOS)        
                             8965 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC1_START_COUNT_BITPOS)        
                             8966 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BITPOS) 
                             8967 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWRUP_BITPOS)        
                             8968 ; 398  |
                             8969 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC2_START_COUNT_BITPOS)        
                             8970 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BITPOS) 
                             8971 ; 401  |
                             8972 ; 402  |
                             8973 ; 403  |
                             8974 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             8975 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             8976 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             8977 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             8978 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             8979 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             8980 ; 410  |
                             8981 ; 411  |
                             8982 ; 412  |typedef union               
                             8983 ; 413  |{
                             8984 ; 414  |    struct {
                             8985 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             8986 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             8987 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             8988 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             8989 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             8990 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             8991 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             8992 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             8993 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             8994 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             8995 ; 425  |    } B;
                             8996 ; 426  |    unsigned int I;
                             8997 ; 427  |} speed_type;
                             8998 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measurement Register */
                             8999 ; 429  |
                             9000 ; 430  |
                             9001 ; 431  |
                             9002 ; 432  |
                             9003 ; 433  |
                             9004 ; 434  |
                             9005 ; 435  |
                             9006 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             9007 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             9008 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             9009 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             9010 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             9011 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             9012 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             9013 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             9014 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             9015 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             9016 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             9017 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             9018 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             9019 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             9020 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             9021 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             9022 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             9023 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             9024 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             9025 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             9026 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             9027 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             9028 ; 458  |
                             9029 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             9030 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             9031 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             9032 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             9033 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             9034 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             9035 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             9036 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             9037 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             9038 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             9039 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             9040 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             9041 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             9042 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             9043 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             9044 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             9045 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             9046 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             9047 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             9048 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             9049 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             9050 ; 480  |
                             9051 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)
                             9052 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             9053 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1)<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             9054 ; 484  |
                             9055 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             9056 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             9057 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             9058 ; 488  |
                             9059 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the change should happen
                             9060 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             9061 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             9062 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)+((1<<HW_DCDC_TBR_DC
                                  DC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             9063 ; 493  |
                             9064 ; 494  |typedef union               
                             9065 ; 495  |{
                             9066 ; 496  |    struct {
                             9067 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             9068 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             9069 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             9070 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             9071 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             9072 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             9073 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             9074 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             9075 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             9076 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             9077 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             9078 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             9079 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             9080 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             9081 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             9082 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             9083 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             9084 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             9085 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9086 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             9087 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             9088 ; 518  |    } B;
                             9089 ; 519  |    unsigned int I;
                             9090 ; 520  |} usb_dcdctbr_type;
                             9091 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADDR+8))    /* Analog test bit register*/
                             9092 ; 522  |
                             9093 ; 523  |
                             9094 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             9095 ; 525  |
                             9096 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             9097 ; 527  |
                             9098 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             9099 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             9100 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             9101 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             9102 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             9103 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             9104 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             9105 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             9106 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             9107 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             9108 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             9109 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             9110 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             9111 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             9112 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             9113 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             9114 ; 544  |
                             9115 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             9116 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             9117 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             9118 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             9119 ; 549  |
                             9120 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             9121 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             9122 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             9123 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             9124 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             9125 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             9126 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             9127 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             9128 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             9129 ; 559  |
                             9130 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             9131 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWD_BITPOS)        
                             9132 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_RES_BITPOS) 
                             9133 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_NIMH_BITPOS) 
                             9134 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             9135 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             9136 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             9137 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             9138 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             9139 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             9140 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             9141 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             9142 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             9143 ; 573  |
                             9144 ; 574  |
                             9145 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK)     
                             9146 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             9147 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             9148 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             9149 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             9150 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK)     
                             9151 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK)     
                             9152 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK) 
                             9153 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK) 
                             9154 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK) 
                             9155 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK) 
                             9156 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK) 
                             9157 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK) 
                             9158 ; 588  |
                             9159 ; 589  |typedef union               
                             9160 ; 590  |{
                             9161 ; 591  |    struct {
                             9162 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             9163 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             9164 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             9165 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             9166 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             9167 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             9168 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH;
                             9169 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH;
                             9170 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             9171 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             9172 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             9173 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             9174 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             9175 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                             9176 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             9177 ; 607  |    } B;
                             9178 ; 608  |    unsigned int I;
                             9179 ; 609  |} usb_pwr_charge_type;
                             9180 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17))    /* Analog Persistent Config Register */
                             9181 ; 611  |
                             9182 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             9183 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             9184 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             9185 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             9186 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             9187 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             9188 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             9189 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             9190 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             9191 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             9192 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             9193 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             9194 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             9195 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             9196 ; 626  |
                             9197 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             9198 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             9199 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             9200 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             9201 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             9202 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             9203 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             9204 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             9205 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             9206 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             9207 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             9208 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             9209 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             9210 ; 640  |
                             9211 ; 641  |typedef union               
                             9212 ; 642  |{
                             9213 ; 643  |    struct {       
                             9214 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             9215 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             9216 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             9217 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             9218 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             9219 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             9220 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             9221 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             9222 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             9223 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             9224 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             9225 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                             9226 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             9227 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             9228 ; 658  |    } B;
                             9229 ; 659  |    int I;
                             9230 ; 660  |} usb_dcdcpersist_type;
                             9231 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASEADDR+15))    /* Analog test bit register*/
                             9232 ; 662  |
                             9233 ; 663  |
                             9234 ; 664  |
                             9235 ; 665  |#endif
                             9236 ; 666  |
                             9237 ; 667  |
                             9238 ; 668  |
                             9239 
                             9241 
                             9242 ; 21   |#include "regsemc.h"
                             9243 
                             9245 
                             9246 ; 1    |#if !(defined(__REGS_EMC_INC))
                             9247 ; 2    |#define __REGS_EMC_INC 1
                             9248 ; 3    |
                             9249 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             9250 ; 5    |//   Module base addresses
                             9251 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             9252 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             9253 ; 8    |
                             9254 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             9255 ; 10   |//  EMC Registers
                             9256 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             9257 ; 12   |
                             9258 ; 13   |
                             9259 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             9260 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             9261 ; 16   |
                             9262 ; 17   |typedef union               /*Flash Control Register*/
                             9263 ; 18   |{
                             9264 ; 19   |    struct
                             9265 ; 20   |    {
                             9266 ; 21   |    int KICK        :1;
                             9267 ; 22   |    int RW          :1;
                             9268 ; 23   |    int TCIE        :1;
                             9269 ; 24   |    int IRQP        :1;
                             9270 ; 25   |    unsigned MMD    :2;
                             9271 ; 26   |    unsigned NB     :11;
                             9272 ; 27   |    unsigned RSVD   :4;
                             9273 ; 28   |    int SRST        :1;
                             9274 ; 29   |    } B;
                             9275 ; 30   |    int I;
                             9276 ; 31   |} flcr_type;
                             9277 ; 32   |
                             9278 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             9279 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             9280 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             9281 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             9282 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             9283 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             9284 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             9285 ; 40   |
                             9286 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             9287 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             9288 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             9289 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             9290 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             9291 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             9292 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             9293 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             9294 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             9295 ; 50   |
                             9296 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             9297 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             9298 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             9299 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             9300 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             9301 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             9302 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             9303 ; 58   |
                             9304 ; 59   |
                             9305 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             9306 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             9307 ; 62   |
                             9308 ; 63   |typedef union           /* Flash Start Address Low*/
                             9309 ; 64   |{
                             9310 ; 65   |    struct
                             9311 ; 66   |    {
                             9312 ; 67   |    unsigned XA     : 24;
                             9313 ; 68   |    } B;
                             9314 ; 69   |    int I;
                             9315 ; 70   |} flsalr_type;
                             9316 ; 71   |
                             9317 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                             9318 ; 73   |
                             9319 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             9320 ; 75   |
                             9321 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             9322 ; 77   |
                             9323 ; 78   |
                             9324 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             9325 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             9326 ; 81   |
                             9327 ; 82   |typedef union           /* Flash Start Address High*/
                             9328 ; 83   |{
                             9329 ; 84   |    struct
                             9330 ; 85   |    {
                             9331 ; 86   |    unsigned XA     :8;
                             9332 ; 87   |    unsigned DA     :16;
                             9333 ; 88   |    } B;
                             9334 ; 89   |    int I;
                             9335 ; 90   |} flsahr_type;
                             9336 ; 91   |
                             9337 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             9338 ; 93   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9339 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             9340 ; 95   |
                             9341 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             9342 ; 97   |
                             9343 ; 98   |
                             9344 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             9345 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             9346 ; 101  |
                             9347 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             9348 ; 103  |{
                             9349 ; 104  |    struct
                             9350 ; 105  |    {
                             9351 ; 106  |        int WP          :1;
                             9352 ; 107  |        int CDP         :1;
                             9353 ; 108  |        unsigned SM     :2;
                             9354 ; 109  |        int XATTR       :1;
                             9355 ; 110  |        int CRST        :1;
                             9356 ; 111  |        int XWT         :1;
                             9357 ; 112  |        int RI          :1;
                             9358 ; 113  |        int IFCE        :1;
                             9359 ; 114  |        int ISCE        :1;
                             9360 ; 115  |        int INCE        :1;
                             9361 ; 116  |        int IFCS        :1;
                             9362 ; 117  |        int ISCS        :1;
                             9363 ; 118  |        int INCS        :1;
                             9364 ; 119  |        unsigned CFAI   :2;
                             9365 ; 120  |        int XDDI        :1;
                             9366 ; 121  |        unsigned CS     :2;
                             9367 ; 122  |        int CRE         :1;
                             9368 ; 123  |        unsigned VS     :2;
                             9369 ; 124  |        int DASP        :1;
                             9370 ; 125  |        int MODE16      :1; 
                             9371 ; 126  |    } B;
                             9372 ; 127  |    int I;
                             9373 ; 128  |} flcfcr_type;
                             9374 ; 129  |
                             9375 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             9376 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             9377 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             9378 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             9379 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
                             9380 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             9381 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             9382 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             9383 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             9384 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             9385 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             9386 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             9387 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             9388 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             9389 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             9390 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             9391 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             9392 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             9393 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             9394 ; 149  |
                             9395 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             9396 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             9397 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             9398 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             9399 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             9400 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             9401 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             9402 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             9403 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             9404 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             9405 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             9406 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             9407 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             9408 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             9409 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             9410 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             9411 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             9412 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             9413 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             9414 ; 169  |
                             9415 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             9416 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             9417 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             9418 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             9419 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             9420 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             9421 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             9422 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             9423 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             9424 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             9425 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             9426 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             9427 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             9428 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             9429 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             9430 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             9431 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             9432 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             9433 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             9434 ; 189  |
                             9435 ; 190  |
                             9436 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             9437 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             9438 ; 193  |
                             9439 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             9440 ; 195  |{
                             9441 ; 196  |    struct
                             9442 ; 197  |    {
                             9443 ; 198  |        unsigned TRWSU  :5;
                             9444 ; 199  |        unsigned TRPW   :7;
                             9445 ; 200  |        unsigned TWPW   :7;
                             9446 ; 201  |        unsigned TRWH   :5;
                             9447 ; 202  |    } B;
                             9448 ; 203  |    int I;
                             9449 ; 204  |} flcftmr1r_type;
                             9450 ; 205  |
                             9451 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             9452 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             9453 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             9454 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             9455 ; 210  |
                             9456 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             9457 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             9458 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             9459 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             9460 ; 215  |
                             9461 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             9462 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             9463 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             9464 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             9465 ; 220  |
                             9466 ; 221  |
                             9467 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             9468 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             9469 ; 224  |
                             9470 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             9471 ; 226  |{
                             9472 ; 227  |    struct
                             9473 ; 228  |    {
                             9474 ; 229  |        unsigned TWW    :4;
                             9475 ; 230  |        unsigned TWTO   :10;
                             9476 ; 231  |        unsigned THW    :5; 
                             9477 ; 232  |        unsigned TRAQ   :5;
                             9478 ; 233  |    } B;
                             9479 ; 234  |    int I;
                             9480 ; 235  |} flcftmr2r_type;
                             9481 ; 236  |
                             9482 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             9483 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             9484 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             9485 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             9486 ; 241  |
                             9487 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             9488 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             9489 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             9490 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             9491 ; 246  |
                             9492 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             9493 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             9494 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             9495 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             9496 ; 251  |
                             9497 ; 252  |
                             9498 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             9499 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             9500 ; 255  |
                             9501 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             9502 ; 257  |{
                             9503 ; 258  |    struct
                             9504 ; 259  |    {
                             9505 ; 260  |        unsigned CS     :2;
                             9506 ; 261  |        int SE          :1;
                             9507 ; 262  |        int WP          :1;
                             9508 ; 263  |        int SIZE        :1;
                             9509 ; 264  |        int ICMD        :8;
                             9510 ; 265  |        int TOIE        :1;
                             9511 ; 266  |        int BPIE        :1;
                             9512 ; 267  |        int TOIRQ       :1;
                             9513 ; 268  |        int BPIRQ       :1;
                             9514 ; 269  |    } B;
                             9515 ; 270  |    int I;
                             9516 ; 271  |} flsmcr_type;
                             9517 ; 272  |
                             9518 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             9519 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             9520 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             9521 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             9522 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             9523 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             9524 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             9525 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             9526 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             9527 ; 282  |
                             9528 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             9529 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             9530 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             9531 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             9532 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             9533 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             9534 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             9535 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             9536 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             9537 ; 292  |
                             9538 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             9539 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             9540 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             9541 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             9542 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             9543 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             9544 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             9545 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             9546 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             9547 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             9548 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             9549 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             9550 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             9551 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             9552 ; 307  |
                             9553 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             9554 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             9555 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             9556 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             9557 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             9558 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             9559 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             9560 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             9561 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             9562 ; 317  |
                             9563 ; 318  |
                             9564 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             9565 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                             9566 ; 321  |
                             9567 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             9568 ; 323  |{
                             9569 ; 324  |    struct
                             9570 ; 325  |    {
                             9571 ; 326  |        unsigned TRWSU  :5;
                             9572 ; 327  |        unsigned TRPW   :6;
                             9573 ; 328  |        unsigned TWPW   :6;
                             9574 ; 329  |        unsigned TRWH   :5;
                             9575 ; 330  |    } B;
                             9576 ; 331  |    int I;
                             9577 ; 332  |} flsmtmr1r_type;
                             9578 ; 333  |
                             9579 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             9580 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             9581 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             9582 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             9583 ; 338  |
                             9584 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             9585 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             9586 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             9587 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             9588 ; 343  |
                             9589 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9590 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             9591 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             9592 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             9593 ; 348  |
                             9594 ; 349  |
                             9595 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             9596 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             9597 ; 352  |
                             9598 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             9599 ; 354  |{
                             9600 ; 355  |    struct
                             9601 ; 356  |    {
                             9602 ; 357  |        unsigned TWT    :6;
                             9603 ; 358  |        unsigned TWTO   :18;
                             9604 ; 359  |    } B;
                             9605 ; 360  |    int I;
                             9606 ; 361  |} flsmtmr2r_type;
                             9607 ; 362  |
                             9608 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             9609 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             9610 ; 365  |
                             9611 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             9612 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             9613 ; 368  |
                             9614 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             9615 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             9616 ; 371  |
                             9617 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             9618 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             9619 ; 374  |typedef union 
                             9620 ; 375  |{
                             9621 ; 376  |  struct
                             9622 ; 377  |  {
                             9623 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             9624 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers */
                             9625 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers */
                             9626 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             9627 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             9628 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             9629 ; 384  |    int PAD0          :17;    
                             9630 ; 385  |  } B;
                             9631 ; 386  |  int I;
                             9632 ; 387  |} flcr2_type;
                             9633 ; 388  |
                             9634 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             9635 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             9636 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             9637 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             9638 ; 393  |
                             9639 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Control Register */
                             9640 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash Start Address Low Register */
                             9641 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash Start Address High Register */
                             9642 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             9643 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Control Register2 */
                             9644 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash CompactFlash Control Register*/
                             9645 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Compact Flash Timer1 Register*/
                             9646 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Compact Flash Timer2 Register*/
                             9647 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash SmartMedia Control Register*/
                             9648 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash SmartMedia Timer1 Register*/
                             9649 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash SmartMedia Timer2 Register*/
                             9650 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             9651 ; 406  |
                             9652 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             9653 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             9654 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             9655 ; 410  |
                             9656 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             9657 ; 412  |
                             9658 ; 413  |#endif
                             9659 ; 414  |
                             9660 
                             9662 
                             9663 ; 22   |#include "regsgpio.h"
                             9664 
                             9666 
                             9667 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             9668 ; 2    |#define __REGS_GPIO_INC 1
                             9669 ; 3    |
                             9670 ; 4    |#include "types.h"
                             9671 
                             9673 
                             9674 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9675 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9676 ; 3    |//
                             9677 ; 4    |// Filename: types.h
                             9678 ; 5    |// Description: Standard data types
                             9679 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9680 ; 7    |
                             9681 ; 8    |#ifndef _TYPES_H
                             9682 ; 9    |#define _TYPES_H
                             9683 ; 10   |
                             9684 ; 11   |// TODO:  move this outta here!
                             9685 ; 12   |#if !defined(NOERROR)
                             9686 ; 13   |#define NOERROR 0
                             9687 ; 14   |#define SUCCESS 0
                             9688 ; 15   |#endif 
                             9689 ; 16   |#if !defined(SUCCESS)
                             9690 ; 17   |#define SUCCESS  0
                             9691 ; 18   |#endif
                             9692 ; 19   |#if !defined(ERROR)
                             9693 ; 20   |#define ERROR   -1
                             9694 ; 21   |#endif
                             9695 ; 22   |#if !defined(FALSE)
                             9696 ; 23   |#define FALSE 0
                             9697 ; 24   |#endif
                             9698 ; 25   |#if !defined(TRUE)
                             9699 ; 26   |#define TRUE  1
                             9700 ; 27   |#endif
                             9701 ; 28   |
                             9702 ; 29   |#if !defined(NULL)
                             9703 ; 30   |#define NULL 0
                             9704 ; 31   |#endif
                             9705 ; 32   |
                             9706 ; 33   |#define MAX_INT     0x7FFFFF
                             9707 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9708 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9709 ; 36   |#define MAX_ULONG   (-1) 
                             9710 ; 37   |
                             9711 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9712 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9713 ; 40   |
                             9714 ; 41   |
                             9715 ; 42   |#define BYTE    unsigned char       // btVarName
                             9716 ; 43   |#define CHAR    signed char         // cVarName
                             9717 ; 44   |#define USHORT  unsigned short      // usVarName
                             9718 ; 45   |#define SHORT   unsigned short      // sVarName
                             9719 ; 46   |#define WORD    unsigned int        // wVarName
                             9720 ; 47   |#define INT     signed int          // iVarName
                             9721 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9722 ; 49   |#define LONG    signed long         // lVarName
                             9723 ; 50   |#define BOOL    unsigned int        // bVarName
                             9724 ; 51   |#define FRACT   _fract              // frVarName
                             9725 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9726 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9727 ; 54   |#define FLOAT   float               // fVarName
                             9728 ; 55   |#define DBL     double              // dVarName
                             9729 ; 56   |#define ENUM    enum                // eVarName
                             9730 ; 57   |#define CMX     _complex            // cmxVarName
                             9731 ; 58   |typedef WORD UCS3;                   // 
                             9732 ; 59   |
                             9733 ; 60   |#define UINT16  unsigned short
                             9734 ; 61   |#define UINT8   unsigned char   
                             9735 ; 62   |#define UINT32  unsigned long
                             9736 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9737 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9738 ; 65   |#define WCHAR   UINT16
                             9739 ; 66   |
                             9740 ; 67   |//UINT128 is 16 bytes or 6 words
                             9741 ; 68   |typedef struct UINT128_3500 {   
                             9742 ; 69   |    int val[6];     
                             9743 ; 70   |} UINT128_3500;
                             9744 ; 71   |
                             9745 ; 72   |#define UINT128   UINT128_3500
                             9746 ; 73   |
                             9747 ; 74   |// Little endian word packed byte strings:   
                             9748 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9749 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9750 ; 77   |// Little endian word packed byte strings:   
                             9751 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9752 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9753 ; 80   |
                             9754 ; 81   |// Declare Memory Spaces To Use When Coding
                             9755 ; 82   |// A. Sector Buffers
                             9756 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9757 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9758 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9759 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9760 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9761 ; 88   |// B. Media DDI Memory
                             9762 ; 89   |#define MEDIA_DDI_MEM _Y
                             9763 ; 90   |
                             9764 ; 91   |
                             9765 ; 92   |
                             9766 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9767 ; 94   |// Examples of circular pointers:
                             9768 ; 95   |//    INT CIRC cpiVarName
                             9769 ; 96   |//    DWORD CIRC cpdwVarName
                             9770 ; 97   |
                             9771 ; 98   |#define RETCODE INT                 // rcVarName
                             9772 ; 99   |
                             9773 ; 100  |// generic bitfield structure
                             9774 ; 101  |struct Bitfield {
                             9775 ; 102  |    unsigned int B0  :1;
                             9776 ; 103  |    unsigned int B1  :1;
                             9777 ; 104  |    unsigned int B2  :1;
                             9778 ; 105  |    unsigned int B3  :1;
                             9779 ; 106  |    unsigned int B4  :1;
                             9780 ; 107  |    unsigned int B5  :1;
                             9781 ; 108  |    unsigned int B6  :1;
                             9782 ; 109  |    unsigned int B7  :1;
                             9783 ; 110  |    unsigned int B8  :1;
                             9784 ; 111  |    unsigned int B9  :1;
                             9785 ; 112  |    unsigned int B10 :1;
                             9786 ; 113  |    unsigned int B11 :1;
                             9787 ; 114  |    unsigned int B12 :1;
                             9788 ; 115  |    unsigned int B13 :1;
                             9789 ; 116  |    unsigned int B14 :1;
                             9790 ; 117  |    unsigned int B15 :1;
                             9791 ; 118  |    unsigned int B16 :1;
                             9792 ; 119  |    unsigned int B17 :1;
                             9793 ; 120  |    unsigned int B18 :1;
                             9794 ; 121  |    unsigned int B19 :1;
                             9795 ; 122  |    unsigned int B20 :1;
                             9796 ; 123  |    unsigned int B21 :1;
                             9797 ; 124  |    unsigned int B22 :1;
                             9798 ; 125  |    unsigned int B23 :1;
                             9799 ; 126  |};
                             9800 ; 127  |
                             9801 ; 128  |union BitInt {
                             9802 ; 129  |        struct Bitfield B;
                             9803 ; 130  |        int        I;
                             9804 ; 131  |};
                             9805 ; 132  |
                             9806 ; 133  |#define MAX_MSG_LENGTH 10
                             9807 ; 134  |struct CMessage
                             9808 ; 135  |{
                             9809 ; 136  |        unsigned int m_uLength;
                             9810 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9811 ; 138  |};
                             9812 ; 139  |
                             9813 ; 140  |typedef struct {
                             9814 ; 141  |    WORD m_wLength;
                             9815 ; 142  |    WORD m_wMessage;
                             9816 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9817 ; 144  |} Message;
                             9818 ; 145  |
                             9819 ; 146  |struct MessageQueueDescriptor
                             9820 ; 147  |{
                             9821 ; 148  |        int *m_pBase;
                             9822 ; 149  |        int m_iModulo;
                             9823 ; 150  |        int m_iSize;
                             9824 ; 151  |        int *m_pHead;
                             9825 ; 152  |        int *m_pTail;
                             9826 ; 153  |};
                             9827 ; 154  |
                             9828 ; 155  |struct ModuleEntry
                             9829 ; 156  |{
                             9830 ; 157  |    int m_iSignaledEventMask;
                             9831 ; 158  |    int m_iWaitEventMask;
                             9832 ; 159  |    int m_iResourceOfCode;
                             9833 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9834 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             9835 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9836 ; 163  |    int m_uTimeOutHigh;
                             9837 ; 164  |    int m_uTimeOutLow;
                             9838 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9839 ; 166  |};
                             9840 ; 167  |
                             9841 ; 168  |union WaitMask{
                             9842 ; 169  |    struct B{
                             9843 ; 170  |        unsigned int m_bNone     :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9844 ; 171  |        unsigned int m_bMessage  :1;
                             9845 ; 172  |        unsigned int m_bTimer    :1;
                             9846 ; 173  |        unsigned int m_bButton   :1;
                             9847 ; 174  |    } B;
                             9848 ; 175  |    int I;
                             9849 ; 176  |} ;
                             9850 ; 177  |
                             9851 ; 178  |
                             9852 ; 179  |struct Button {
                             9853 ; 180  |        WORD wButtonEvent;
                             9854 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9855 ; 182  |};
                             9856 ; 183  |
                             9857 ; 184  |struct Message {
                             9858 ; 185  |        WORD wMsgLength;
                             9859 ; 186  |        WORD wMsgCommand;
                             9860 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9861 ; 188  |};
                             9862 ; 189  |
                             9863 ; 190  |union EventTypes {
                             9864 ; 191  |        struct CMessage msg;
                             9865 ; 192  |        struct Button Button ;
                             9866 ; 193  |        struct Message Message;
                             9867 ; 194  |};
                             9868 ; 195  |
                             9869 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9870 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9871 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9872 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9873 ; 200  |
                             9874 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9875 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9876 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9877 ; 204  |
                             9878 ; 205  |#if DEBUG
                             9879 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9880 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9881 ; 208  |#else 
                             9882 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             9883 ; 210  |#define DebugBuildAssert(x)    
                             9884 ; 211  |#endif
                             9885 ; 212  |
                             9886 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9887 ; 214  |//  #pragma asm
                             9888 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9889 ; 216  |//  #pragma endasm
                             9890 ; 217  |
                             9891 ; 218  |
                             9892 ; 219  |#ifdef COLOR_262K
                             9893 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             9894 ; 221  |#elif defined(COLOR_65K)
                             9895 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             9896 ; 223  |#else
                             9897 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             9898 ; 225  |#endif
                             9899 ; 226  |    
                             9900 ; 227  |#endif // #ifndef _TYPES_H
                             9901 
                             9903 
                             9904 ; 5    |
                             9905 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             9906 ; 7    |//  Interrupt Collector Registers
                             9907 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             9908 ; 9    |
                             9909 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             9910 ; 11   |
                             9911 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             9912 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             9913 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             9914 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             9915 ; 16   |
                             9916 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             9917 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             9918 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             9919 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             9920 ; 21   |
                             9921 ; 22   |#define HW_GPB_GPENR 0
                             9922 ; 23   |#define HW_GPB_GPDOR 1
                             9923 ; 24   |#define HW_GPB_GPDIR 2
                             9924 ; 25   |#define HW_GPB_GPDOER 3
                             9925 ; 26   |#define HW_GPB_GPIPENR 4
                             9926 ; 27   |#define HW_GPB_GPIENR 5
                             9927 ; 28   |#define HW_GPB_GPILVLR 6
                             9928 ; 29   |#define HW_GPB_GPIPOLR 7
                             9929 ; 30   |#define HW_GPB_GPISTATR 8
                             9930 ; 31   |#define HW_GPB_GPPWR 9
                             9931 ; 32   |#define HW_GPB_GP8MA 10
                             9932 ; 33   |
                             9933 ; 34   |
                             9934 ; 35   |
                             9935 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             9936 ; 37   |//  GPIO Register Bit Positions
                             9937 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             9938 ; 39   |{
                             9939 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             9940 ; 41   |    unsigned int I;
                             9941 ; 42   |    unsigned int U;
                             9942 ; 43   |} gpr_type;
                             9943 ; 44   |
                             9944 ; 45   |#define HW_GP_B0_BITPOS 0
                             9945 ; 46   |#define HW_GP_B1_BITPOS 1
                             9946 ; 47   |#define HW_GP_B2_BITPOS 2
                             9947 ; 48   |#define HW_GP_B3_BITPOS 3
                             9948 ; 49   |#define HW_GP_B4_BITPOS 4
                             9949 ; 50   |#define HW_GP_B5_BITPOS 5
                             9950 ; 51   |#define HW_GP_B6_BITPOS 6
                             9951 ; 52   |#define HW_GP_B7_BITPOS 7
                             9952 ; 53   |#define HW_GP_B8_BITPOS 8
                             9953 ; 54   |#define HW_GP_B9_BITPOS 9
                             9954 ; 55   |#define HW_GP_B10_BITPOS 10
                             9955 ; 56   |#define HW_GP_B11_BITPOS 11
                             9956 ; 57   |#define HW_GP_B12_BITPOS 12
                             9957 ; 58   |#define HW_GP_B13_BITPOS 13
                             9958 ; 59   |#define HW_GP_B14_BITPOS 14
                             9959 ; 60   |#define HW_GP_B15_BITPOS 15
                             9960 ; 61   |#define HW_GP_B16_BITPOS 16
                             9961 ; 62   |#define HW_GP_B17_BITPOS 17
                             9962 ; 63   |#define HW_GP_B18_BITPOS 18
                             9963 ; 64   |#define HW_GP_B19_BITPOS 19
                             9964 ; 65   |#define HW_GP_B20_BITPOS 20
                             9965 ; 66   |#define HW_GP_B21_BITPOS 21
                             9966 ; 67   |#define HW_GP_B22_BITPOS 22
                             9967 ; 68   |#define HW_GP_B23_BITPOS 23
                             9968 ; 69   |
                             9969 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             9970 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             9971 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             9972 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             9973 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             9974 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             9975 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             9976 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             9977 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             9978 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             9979 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             9980 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             9981 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             9982 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             9983 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             9984 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             9985 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             9986 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             9987 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             9988 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             9989 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             9990 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             9991 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             9992 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             9993 ; 94   |
                             9994 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             9995 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             9996 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             9997 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             9998 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             9999 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                            10000 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                            10001 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                            10002 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                            10003 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                            10004 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                            10005 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                            10006 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                            10007 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                            10008 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                            10009 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                            10010 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                            10011 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                            10012 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                            10013 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                            10014 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                            10015 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                            10016 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                            10017 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                            10018 ; 119  |
                            10019 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                            10020 ; 121  |//  GPIO 8mA Register Bit Positions
                            10021 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                            10022 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                            10023 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                            10024 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                            10025 ; 126  |
                            10026 ; 127  |
                            10027 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                            10028 ; 129  |//  Logical GPIO numbers
                            10029 ; 130  |#define HW_GPIO_000 0
                            10030 ; 131  |#define HW_GPIO_001 1
                            10031 ; 132  |#define HW_GPIO_002 2
                            10032 ; 133  |#define HW_GPIO_003 3
                            10033 ; 134  |#define HW_GPIO_004 4
                            10034 ; 135  |#define HW_GPIO_005 5
                            10035 ; 136  |#define HW_GPIO_006 6
                            10036 ; 137  |#define HW_GPIO_007 7
                            10037 ; 138  |#define HW_GPIO_008 8
                            10038 ; 139  |#define HW_GPIO_009 9
                            10039 ; 140  |#define HW_GPIO_010 10
                            10040 ; 141  |#define HW_GPIO_011 11
                            10041 ; 142  |#define HW_GPIO_012 12
                            10042 ; 143  |#define HW_GPIO_013 13
                            10043 ; 144  |#define HW_GPIO_014 14
                            10044 ; 145  |#define HW_GPIO_015 15
                            10045 ; 146  |#define HW_GPIO_016 16
                            10046 ; 147  |#define HW_GPIO_017 17
                            10047 ; 148  |#define HW_GPIO_018 18
                            10048 ; 149  |#define HW_GPIO_019 19
                            10049 ; 150  |#define HW_GPIO_020 20
                            10050 ; 151  |#define HW_GPIO_021 21
                            10051 ; 152  |#define HW_GPIO_022 22
                            10052 ; 153  |#define HW_GPIO_023 23
                            10053 ; 154  |#define HW_GPIO_024 24
                            10054 ; 155  |#define HW_GPIO_025 25
                            10055 ; 156  |#define HW_GPIO_026 26
                            10056 ; 157  |#define HW_GPIO_027 27
                            10057 ; 158  |#define HW_GPIO_028 28
                            10058 ; 159  |#define HW_GPIO_029 29
                            10059 ; 160  |#define HW_GPIO_030 30
                            10060 ; 161  |#define HW_GPIO_031 31
                            10061 ; 162  |#define HW_GPIO_032 32
                            10062 ; 163  |#define HW_GPIO_033 33
                            10063 ; 164  |#define HW_GPIO_034 34
                            10064 ; 165  |#define HW_GPIO_035 35
                            10065 ; 166  |#define HW_GPIO_036 36
                            10066 ; 167  |#define HW_GPIO_037 37
                            10067 ; 168  |#define HW_GPIO_038 38
                            10068 ; 169  |#define HW_GPIO_039 39
                            10069 ; 170  |#define HW_GPIO_040 40
                            10070 ; 171  |#define HW_GPIO_041 41
                            10071 ; 172  |#define HW_GPIO_042 42
                            10072 ; 173  |#define HW_GPIO_043 43
                            10073 ; 174  |#define HW_GPIO_044 44
                            10074 ; 175  |#define HW_GPIO_045 45
                            10075 ; 176  |#define HW_GPIO_046 46
                            10076 ; 177  |#define HW_GPIO_047 47
                            10077 ; 178  |#define HW_GPIO_048 48
                            10078 ; 179  |#define HW_GPIO_049 49
                            10079 ; 180  |#define HW_GPIO_050 50
                            10080 ; 181  |#define HW_GPIO_051 51
                            10081 ; 182  |#define HW_GPIO_052 52
                            10082 ; 183  |#define HW_GPIO_053 53
                            10083 ; 184  |#define HW_GPIO_054 54
                            10084 ; 185  |#define HW_GPIO_055 55
                            10085 ; 186  |#define HW_GPIO_056 56
                            10086 ; 187  |#define HW_GPIO_057 57
                            10087 ; 188  |#define HW_GPIO_058 58
                            10088 ; 189  |#define HW_GPIO_059 59
                            10089 ; 190  |#define HW_GPIO_060 60
                            10090 ; 191  |#define HW_GPIO_061 61
                            10091 ; 192  |#define HW_GPIO_062 62
                            10092 ; 193  |#define HW_GPIO_063 63
                            10093 ; 194  |#define HW_GPIO_064 64
                            10094 ; 195  |#define HW_GPIO_065 65
                            10095 ; 196  |#define HW_GPIO_066 66
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10096 ; 197  |#define HW_GPIO_067 67
                            10097 ; 198  |#define HW_GPIO_068 68
                            10098 ; 199  |#define HW_GPIO_069 69
                            10099 ; 200  |#define HW_GPIO_070 70
                            10100 ; 201  |#define HW_GPIO_071 71
                            10101 ; 202  |#define HW_GPIO_072 72
                            10102 ; 203  |#define HW_GPIO_073 73
                            10103 ; 204  |#define HW_GPIO_074 74
                            10104 ; 205  |#define HW_GPIO_075 75
                            10105 ; 206  |#define HW_GPIO_076 76
                            10106 ; 207  |#define HW_GPIO_077 77
                            10107 ; 208  |#define HW_GPIO_078 78
                            10108 ; 209  |#define HW_GPIO_079 79
                            10109 ; 210  |#define HW_GPIO_080 80
                            10110 ; 211  |#define HW_GPIO_081 81
                            10111 ; 212  |#define HW_GPIO_082 82
                            10112 ; 213  |#define HW_GPIO_083 83
                            10113 ; 214  |#define HW_GPIO_084 84
                            10114 ; 215  |#define HW_GPIO_085 85
                            10115 ; 216  |#define HW_GPIO_086 86
                            10116 ; 217  |#define HW_GPIO_087 87
                            10117 ; 218  |#define HW_GPIO_088 88
                            10118 ; 219  |#define HW_GPIO_089 89
                            10119 ; 220  |#define HW_GPIO_090 90
                            10120 ; 221  |#define HW_GPIO_091 91
                            10121 ; 222  |#define HW_GPIO_092 92
                            10122 ; 223  |#define HW_GPIO_093 93
                            10123 ; 224  |#define HW_GPIO_094 94
                            10124 ; 225  |#define HW_GPIO_095 95
                            10125 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                            10126 ; 227  |
                            10127 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO 0 Enable Register   */
                            10128 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 0 Data Out Register */
                            10129 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 0 Dait In Register  */
                            10130 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO 0 Dait Out Enable Register  */
                            10131 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 0 Interrupt Pin Enable Register */
                            10132 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO 0 Interrupt Enable Register */
                            10133 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 0 Interrupt Level Register  */
                            10134 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 0 Interrupt Polarity Register   */
                            10135 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 0 Interrupt Status Register */
                            10136 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                            10137 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                            10138 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* GPIO 1 Enable Register   */
                            10139 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 1 Data Out Register */
                            10140 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 1 Dait In Register  */
                            10141 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO 1 Dait Out Enable Register  */
                            10142 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 1 Interrupt Pin Enable Register */
                            10143 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO 1 Interrupt Enable Register */
                            10144 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 1 Interrupt Level Register  */
                            10145 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 1 Interrupt Polarity Register   */
                            10146 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 1 Interrupt Status Register */
                            10147 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                            10148 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                            10149 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                            10150 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                            10151 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                            10152 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                            10153 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                            10154 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                            10155 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                            10156 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                            10157 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                            10158 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                            10159 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                            10160 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                            10161 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                            10162 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                            10163 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                            10164 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                            10165 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                            10166 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                            10167 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                            10168 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                            10169 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                            10170 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                            10171 ; 272  |
                            10172 ; 273  |#endif
                            10173 ; 274  |
                            10174 
                            10176 
                            10177 ; 23   |#include "regsi2c.h"
                            10178 
                            10180 
                            10181 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10182 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            10183 ; 3    |// Filename: regsI2C.inc
                            10184 ; 4    |// Description: Register definitions for GPFLASH interface
                            10185 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10186 ; 6    |// The following naming conventions are followed in this file.
                            10187 ; 7    |// All registers are named using the format...
                            10188 ; 8    |//     HW_<module>_<regname>
                            10189 ; 9    |// where <module> is the module name which can be any of the following...
                            10190 ; 10   |//     USB20
                            10191 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10192 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10193 ; 13   |// that module)
                            10194 ; 14   |// <regname> is the specific register within that module
                            10195 ; 15   |// We also define the following...
                            10196 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10197 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10198 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10199 ; 19   |// which does something else, and
                            10200 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10201 ; 21   |// which does something else.
                            10202 ; 22   |// Other rules
                            10203 ; 23   |//     All caps
                            10204 ; 24   |//     Numeric identifiers start at 0
                            10205 ; 25   |#if !(defined(regsi2cinc))
                            10206 ; 26   |#define regsi2cinc 1
                            10207 ; 27   |
                            10208 ; 28   |#include "types.h"
                            10209 
                            10211 
                            10212 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10213 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10214 ; 3    |//
                            10215 ; 4    |// Filename: types.h
                            10216 ; 5    |// Description: Standard data types
                            10217 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10218 ; 7    |
                            10219 ; 8    |#ifndef _TYPES_H
                            10220 ; 9    |#define _TYPES_H
                            10221 ; 10   |
                            10222 ; 11   |// TODO:  move this outta here!
                            10223 ; 12   |#if !defined(NOERROR)
                            10224 ; 13   |#define NOERROR 0
                            10225 ; 14   |#define SUCCESS 0
                            10226 ; 15   |#endif 
                            10227 ; 16   |#if !defined(SUCCESS)
                            10228 ; 17   |#define SUCCESS  0
                            10229 ; 18   |#endif
                            10230 ; 19   |#if !defined(ERROR)
                            10231 ; 20   |#define ERROR   -1
                            10232 ; 21   |#endif
                            10233 ; 22   |#if !defined(FALSE)
                            10234 ; 23   |#define FALSE 0
                            10235 ; 24   |#endif
                            10236 ; 25   |#if !defined(TRUE)
                            10237 ; 26   |#define TRUE  1
                            10238 ; 27   |#endif
                            10239 ; 28   |
                            10240 ; 29   |#if !defined(NULL)
                            10241 ; 30   |#define NULL 0
                            10242 ; 31   |#endif
                            10243 ; 32   |
                            10244 ; 33   |#define MAX_INT     0x7FFFFF
                            10245 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10246 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10247 ; 36   |#define MAX_ULONG   (-1) 
                            10248 ; 37   |
                            10249 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10250 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10251 ; 40   |
                            10252 ; 41   |
                            10253 ; 42   |#define BYTE    unsigned char       // btVarName
                            10254 ; 43   |#define CHAR    signed char         // cVarName
                            10255 ; 44   |#define USHORT  unsigned short      // usVarName
                            10256 ; 45   |#define SHORT   unsigned short      // sVarName
                            10257 ; 46   |#define WORD    unsigned int        // wVarName
                            10258 ; 47   |#define INT     signed int          // iVarName
                            10259 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10260 ; 49   |#define LONG    signed long         // lVarName
                            10261 ; 50   |#define BOOL    unsigned int        // bVarName
                            10262 ; 51   |#define FRACT   _fract              // frVarName
                            10263 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10264 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10265 ; 54   |#define FLOAT   float               // fVarName
                            10266 ; 55   |#define DBL     double              // dVarName
                            10267 ; 56   |#define ENUM    enum                // eVarName
                            10268 ; 57   |#define CMX     _complex            // cmxVarName
                            10269 ; 58   |typedef WORD UCS3;                   // 
                            10270 ; 59   |
                            10271 ; 60   |#define UINT16  unsigned short
                            10272 ; 61   |#define UINT8   unsigned char   
                            10273 ; 62   |#define UINT32  unsigned long
                            10274 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10275 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10276 ; 65   |#define WCHAR   UINT16
                            10277 ; 66   |
                            10278 ; 67   |//UINT128 is 16 bytes or 6 words
                            10279 ; 68   |typedef struct UINT128_3500 {   
                            10280 ; 69   |    int val[6];     
                            10281 ; 70   |} UINT128_3500;
                            10282 ; 71   |
                            10283 ; 72   |#define UINT128   UINT128_3500
                            10284 ; 73   |
                            10285 ; 74   |// Little endian word packed byte strings:   
                            10286 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10287 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10288 ; 77   |// Little endian word packed byte strings:   
                            10289 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10290 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10291 ; 80   |
                            10292 ; 81   |// Declare Memory Spaces To Use When Coding
                            10293 ; 82   |// A. Sector Buffers
                            10294 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10295 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10296 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10297 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10298 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10299 ; 88   |// B. Media DDI Memory
                            10300 ; 89   |#define MEDIA_DDI_MEM _Y
                            10301 ; 90   |
                            10302 ; 91   |
                            10303 ; 92   |
                            10304 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10305 ; 94   |// Examples of circular pointers:
                            10306 ; 95   |//    INT CIRC cpiVarName
                            10307 ; 96   |//    DWORD CIRC cpdwVarName
                            10308 ; 97   |
                            10309 ; 98   |#define RETCODE INT                 // rcVarName
                            10310 ; 99   |
                            10311 ; 100  |// generic bitfield structure
                            10312 ; 101  |struct Bitfield {
                            10313 ; 102  |    unsigned int B0  :1;
                            10314 ; 103  |    unsigned int B1  :1;
                            10315 ; 104  |    unsigned int B2  :1;
                            10316 ; 105  |    unsigned int B3  :1;
                            10317 ; 106  |    unsigned int B4  :1;
                            10318 ; 107  |    unsigned int B5  :1;
                            10319 ; 108  |    unsigned int B6  :1;
                            10320 ; 109  |    unsigned int B7  :1;
                            10321 ; 110  |    unsigned int B8  :1;
                            10322 ; 111  |    unsigned int B9  :1;
                            10323 ; 112  |    unsigned int B10 :1;
                            10324 ; 113  |    unsigned int B11 :1;
                            10325 ; 114  |    unsigned int B12 :1;
                            10326 ; 115  |    unsigned int B13 :1;
                            10327 ; 116  |    unsigned int B14 :1;
                            10328 ; 117  |    unsigned int B15 :1;
                            10329 ; 118  |    unsigned int B16 :1;
                            10330 ; 119  |    unsigned int B17 :1;
                            10331 ; 120  |    unsigned int B18 :1;
                            10332 ; 121  |    unsigned int B19 :1;
                            10333 ; 122  |    unsigned int B20 :1;
                            10334 ; 123  |    unsigned int B21 :1;
                            10335 ; 124  |    unsigned int B22 :1;
                            10336 ; 125  |    unsigned int B23 :1;
                            10337 ; 126  |};
                            10338 ; 127  |
                            10339 ; 128  |union BitInt {
                            10340 ; 129  |        struct Bitfield B;
                            10341 ; 130  |        int        I;
                            10342 ; 131  |};
                            10343 ; 132  |
                            10344 ; 133  |#define MAX_MSG_LENGTH 10
                            10345 ; 134  |struct CMessage
                            10346 ; 135  |{
                            10347 ; 136  |        unsigned int m_uLength;
                            10348 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10349 ; 138  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10350 ; 139  |
                            10351 ; 140  |typedef struct {
                            10352 ; 141  |    WORD m_wLength;
                            10353 ; 142  |    WORD m_wMessage;
                            10354 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10355 ; 144  |} Message;
                            10356 ; 145  |
                            10357 ; 146  |struct MessageQueueDescriptor
                            10358 ; 147  |{
                            10359 ; 148  |        int *m_pBase;
                            10360 ; 149  |        int m_iModulo;
                            10361 ; 150  |        int m_iSize;
                            10362 ; 151  |        int *m_pHead;
                            10363 ; 152  |        int *m_pTail;
                            10364 ; 153  |};
                            10365 ; 154  |
                            10366 ; 155  |struct ModuleEntry
                            10367 ; 156  |{
                            10368 ; 157  |    int m_iSignaledEventMask;
                            10369 ; 158  |    int m_iWaitEventMask;
                            10370 ; 159  |    int m_iResourceOfCode;
                            10371 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10372 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10373 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10374 ; 163  |    int m_uTimeOutHigh;
                            10375 ; 164  |    int m_uTimeOutLow;
                            10376 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10377 ; 166  |};
                            10378 ; 167  |
                            10379 ; 168  |union WaitMask{
                            10380 ; 169  |    struct B{
                            10381 ; 170  |        unsigned int m_bNone     :1;
                            10382 ; 171  |        unsigned int m_bMessage  :1;
                            10383 ; 172  |        unsigned int m_bTimer    :1;
                            10384 ; 173  |        unsigned int m_bButton   :1;
                            10385 ; 174  |    } B;
                            10386 ; 175  |    int I;
                            10387 ; 176  |} ;
                            10388 ; 177  |
                            10389 ; 178  |
                            10390 ; 179  |struct Button {
                            10391 ; 180  |        WORD wButtonEvent;
                            10392 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10393 ; 182  |};
                            10394 ; 183  |
                            10395 ; 184  |struct Message {
                            10396 ; 185  |        WORD wMsgLength;
                            10397 ; 186  |        WORD wMsgCommand;
                            10398 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10399 ; 188  |};
                            10400 ; 189  |
                            10401 ; 190  |union EventTypes {
                            10402 ; 191  |        struct CMessage msg;
                            10403 ; 192  |        struct Button Button ;
                            10404 ; 193  |        struct Message Message;
                            10405 ; 194  |};
                            10406 ; 195  |
                            10407 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10408 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10409 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10410 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10411 ; 200  |
                            10412 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10413 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10414 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10415 ; 204  |
                            10416 ; 205  |#if DEBUG
                            10417 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10418 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10419 ; 208  |#else 
                            10420 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            10421 ; 210  |#define DebugBuildAssert(x)    
                            10422 ; 211  |#endif
                            10423 ; 212  |
                            10424 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10425 ; 214  |//  #pragma asm
                            10426 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10427 ; 216  |//  #pragma endasm
                            10428 ; 217  |
                            10429 ; 218  |
                            10430 ; 219  |#ifdef COLOR_262K
                            10431 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            10432 ; 221  |#elif defined(COLOR_65K)
                            10433 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10434 ; 223  |#else
                            10435 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10436 ; 225  |#endif
                            10437 ; 226  |    
                            10438 ; 227  |#endif // #ifndef _TYPES_H
                            10439 
                            10441 
                            10442 ; 29   |
                            10443 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                            10444 ; 31   |////   I2C STMP Registers
                            10445 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                            10446 ; 33   |
                            10447 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                            10448 ; 35   |
                            10449 ; 36   |
                            10450 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                            10451 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                            10452 ; 39   |
                            10453 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                            10454 ; 41   |
                            10455 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                            10456 ; 43   |
                            10457 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                            10458 ; 45   |
                            10459 ; 46   |typedef union               /* I2C Clock Divider Register */
                            10460 ; 47   |{
                            10461 ; 48   |    struct {
                            10462 ; 49   |        int                :1; 
                            10463 ; 50   |        unsigned FACT      :8;
                            10464 ; 51   |    } B;
                            10465 ; 52   |    int I;
                            10466 ; 53   |    unsigned U;
                            10467 ; 54   |} i2cdivr_type;
                            10468 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Registers        */
                            10469 ; 56   |
                            10470 ; 57   |
                            10471 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                            10472 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                            10473 ; 60   |
                            10474 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                            10475 ; 62   |
                            10476 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                            10477 ; 64   |
                            10478 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                            10479 ; 66   |
                            10480 ; 67   |typedef union               /* I2C Data Register */
                            10481 ; 68   |{
                            10482 ; 69   |    struct {
                            10483 ; 70   |         unsigned DATA :24; 
                            10484 ; 71   |    } B;
                            10485 ; 72   |    int I;
                            10486 ; 73   |    unsigned U;
                            10487 ; 74   |} i2cdatr_type;
                            10488 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers (I2CDAT)      */
                            10489 ; 76   |
                            10490 ; 77   |
                            10491 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                            10492 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                            10493 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                            10494 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
                            10495 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                            10496 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                            10497 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                            10498 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                            10499 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                            10500 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                            10501 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                            10502 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                            10503 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                            10504 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                            10505 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                            10506 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                            10507 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                            10508 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                            10509 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                            10510 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                            10511 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                            10512 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                            10513 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                            10514 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                            10515 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                            10516 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                            10517 ; 104  |
                            10518 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                            10519 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                            10520 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                            10521 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                            10522 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                            10523 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                            10524 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                            10525 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                            10526 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                            10527 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                            10528 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                            10529 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                            10530 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                            10531 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                            10532 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                            10533 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                            10534 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                            10535 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                            10536 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                            10537 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                            10538 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                            10539 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                            10540 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                            10541 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                            10542 ; 129  |
                            10543 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                            10544 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                            10545 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                            10546 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                            10547 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                            10548 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                            10549 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                            10550 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                            10551 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                            10552 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                            10553 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                            10554 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                            10555 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                            10556 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
                            10557 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                            10558 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                            10559 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                            10560 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                            10561 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                            10562 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                            10563 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                            10564 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                            10565 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                            10566 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                            10567 ; 154  |
                            10568 ; 155  |typedef union               /* I2C Control Register         */
                            10569 ; 156  |{
                            10570 ; 157  |    struct {
                            10571 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                            10572 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                            10573 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                            10574 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                            10575 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                            10576 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                            10577 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                            10578 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                            10579 ; 166  |       int RWN         :1; /* Read/Not Write           */
                            10580 ; 167  |       unsigned WL     :2; /* Word Length              */
                            10581 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                            10582 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                            10583 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                            10584 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                            10585 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                            10586 ; 173  |        int LWORD       :1; /* Last Word                */
                            10587 ; 174  |        int SUBA        :1; /* Sub Address              */
                            10588 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                            10589 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                            10590 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                            10591 ; 178  |    } B;
                            10592 ; 179  |    int I;
                            10593 ; 180  |    unsigned U;
                            10594 ; 181  |} i2ccsr_type;
                            10595 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status Register (I2CCSR) */
                            10596 ; 183  |
                            10597 ; 184  |#endif
                            10598 
                            10600 
                            10601 ; 24   |#include "regsi2s.h"
                            10602 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10604 
                            10605 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10606 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            10607 ; 3    |// Filename: regsi2s.inc
                            10608 ; 4    |// Description: Register definitions for I2S interface
                            10609 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10610 ; 6    |// The following naming conventions are followed in this file.
                            10611 ; 7    |// All registers are named using the format...
                            10612 ; 8    |//     HW_<module>_<regname>
                            10613 ; 9    |// where <module> is the module name which can be any of the following...
                            10614 ; 10   |//     USB20
                            10615 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10616 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10617 ; 13   |// that module)
                            10618 ; 14   |// <regname> is the specific register within that module
                            10619 ; 15   |// We also define the following...
                            10620 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10621 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10622 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10623 ; 19   |// which does something else, and
                            10624 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10625 ; 21   |// which does something else.
                            10626 ; 22   |// Other rules
                            10627 ; 23   |//     All caps
                            10628 ; 24   |//     Numeric identifiers start at 0
                            10629 ; 25   |#if !(defined(regsi2sinc))
                            10630 ; 26   |#define regsi2sinc 1
                            10631 ; 27   |
                            10632 ; 28   |#include "types.h"
                            10633 
                            10635 
                            10636 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10637 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10638 ; 3    |//
                            10639 ; 4    |// Filename: types.h
                            10640 ; 5    |// Description: Standard data types
                            10641 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10642 ; 7    |
                            10643 ; 8    |#ifndef _TYPES_H
                            10644 ; 9    |#define _TYPES_H
                            10645 ; 10   |
                            10646 ; 11   |// TODO:  move this outta here!
                            10647 ; 12   |#if !defined(NOERROR)
                            10648 ; 13   |#define NOERROR 0
                            10649 ; 14   |#define SUCCESS 0
                            10650 ; 15   |#endif 
                            10651 ; 16   |#if !defined(SUCCESS)
                            10652 ; 17   |#define SUCCESS  0
                            10653 ; 18   |#endif
                            10654 ; 19   |#if !defined(ERROR)
                            10655 ; 20   |#define ERROR   -1
                            10656 ; 21   |#endif
                            10657 ; 22   |#if !defined(FALSE)
                            10658 ; 23   |#define FALSE 0
                            10659 ; 24   |#endif
                            10660 ; 25   |#if !defined(TRUE)
                            10661 ; 26   |#define TRUE  1
                            10662 ; 27   |#endif
                            10663 ; 28   |
                            10664 ; 29   |#if !defined(NULL)
                            10665 ; 30   |#define NULL 0
                            10666 ; 31   |#endif
                            10667 ; 32   |
                            10668 ; 33   |#define MAX_INT     0x7FFFFF
                            10669 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10670 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10671 ; 36   |#define MAX_ULONG   (-1) 
                            10672 ; 37   |
                            10673 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10674 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10675 ; 40   |
                            10676 ; 41   |
                            10677 ; 42   |#define BYTE    unsigned char       // btVarName
                            10678 ; 43   |#define CHAR    signed char         // cVarName
                            10679 ; 44   |#define USHORT  unsigned short      // usVarName
                            10680 ; 45   |#define SHORT   unsigned short      // sVarName
                            10681 ; 46   |#define WORD    unsigned int        // wVarName
                            10682 ; 47   |#define INT     signed int          // iVarName
                            10683 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10684 ; 49   |#define LONG    signed long         // lVarName
                            10685 ; 50   |#define BOOL    unsigned int        // bVarName
                            10686 ; 51   |#define FRACT   _fract              // frVarName
                            10687 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10688 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10689 ; 54   |#define FLOAT   float               // fVarName
                            10690 ; 55   |#define DBL     double              // dVarName
                            10691 ; 56   |#define ENUM    enum                // eVarName
                            10692 ; 57   |#define CMX     _complex            // cmxVarName
                            10693 ; 58   |typedef WORD UCS3;                   // 
                            10694 ; 59   |
                            10695 ; 60   |#define UINT16  unsigned short
                            10696 ; 61   |#define UINT8   unsigned char   
                            10697 ; 62   |#define UINT32  unsigned long
                            10698 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10699 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10700 ; 65   |#define WCHAR   UINT16
                            10701 ; 66   |
                            10702 ; 67   |//UINT128 is 16 bytes or 6 words
                            10703 ; 68   |typedef struct UINT128_3500 {   
                            10704 ; 69   |    int val[6];     
                            10705 ; 70   |} UINT128_3500;
                            10706 ; 71   |
                            10707 ; 72   |#define UINT128   UINT128_3500
                            10708 ; 73   |
                            10709 ; 74   |// Little endian word packed byte strings:   
                            10710 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10711 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10712 ; 77   |// Little endian word packed byte strings:   
                            10713 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10714 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10715 ; 80   |
                            10716 ; 81   |// Declare Memory Spaces To Use When Coding
                            10717 ; 82   |// A. Sector Buffers
                            10718 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10719 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10720 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10721 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10722 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10723 ; 88   |// B. Media DDI Memory
                            10724 ; 89   |#define MEDIA_DDI_MEM _Y
                            10725 ; 90   |
                            10726 ; 91   |
                            10727 ; 92   |
                            10728 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10729 ; 94   |// Examples of circular pointers:
                            10730 ; 95   |//    INT CIRC cpiVarName
                            10731 ; 96   |//    DWORD CIRC cpdwVarName
                            10732 ; 97   |
                            10733 ; 98   |#define RETCODE INT                 // rcVarName
                            10734 ; 99   |
                            10735 ; 100  |// generic bitfield structure
                            10736 ; 101  |struct Bitfield {
                            10737 ; 102  |    unsigned int B0  :1;
                            10738 ; 103  |    unsigned int B1  :1;
                            10739 ; 104  |    unsigned int B2  :1;
                            10740 ; 105  |    unsigned int B3  :1;
                            10741 ; 106  |    unsigned int B4  :1;
                            10742 ; 107  |    unsigned int B5  :1;
                            10743 ; 108  |    unsigned int B6  :1;
                            10744 ; 109  |    unsigned int B7  :1;
                            10745 ; 110  |    unsigned int B8  :1;
                            10746 ; 111  |    unsigned int B9  :1;
                            10747 ; 112  |    unsigned int B10 :1;
                            10748 ; 113  |    unsigned int B11 :1;
                            10749 ; 114  |    unsigned int B12 :1;
                            10750 ; 115  |    unsigned int B13 :1;
                            10751 ; 116  |    unsigned int B14 :1;
                            10752 ; 117  |    unsigned int B15 :1;
                            10753 ; 118  |    unsigned int B16 :1;
                            10754 ; 119  |    unsigned int B17 :1;
                            10755 ; 120  |    unsigned int B18 :1;
                            10756 ; 121  |    unsigned int B19 :1;
                            10757 ; 122  |    unsigned int B20 :1;
                            10758 ; 123  |    unsigned int B21 :1;
                            10759 ; 124  |    unsigned int B22 :1;
                            10760 ; 125  |    unsigned int B23 :1;
                            10761 ; 126  |};
                            10762 ; 127  |
                            10763 ; 128  |union BitInt {
                            10764 ; 129  |        struct Bitfield B;
                            10765 ; 130  |        int        I;
                            10766 ; 131  |};
                            10767 ; 132  |
                            10768 ; 133  |#define MAX_MSG_LENGTH 10
                            10769 ; 134  |struct CMessage
                            10770 ; 135  |{
                            10771 ; 136  |        unsigned int m_uLength;
                            10772 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10773 ; 138  |};
                            10774 ; 139  |
                            10775 ; 140  |typedef struct {
                            10776 ; 141  |    WORD m_wLength;
                            10777 ; 142  |    WORD m_wMessage;
                            10778 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10779 ; 144  |} Message;
                            10780 ; 145  |
                            10781 ; 146  |struct MessageQueueDescriptor
                            10782 ; 147  |{
                            10783 ; 148  |        int *m_pBase;
                            10784 ; 149  |        int m_iModulo;
                            10785 ; 150  |        int m_iSize;
                            10786 ; 151  |        int *m_pHead;
                            10787 ; 152  |        int *m_pTail;
                            10788 ; 153  |};
                            10789 ; 154  |
                            10790 ; 155  |struct ModuleEntry
                            10791 ; 156  |{
                            10792 ; 157  |    int m_iSignaledEventMask;
                            10793 ; 158  |    int m_iWaitEventMask;
                            10794 ; 159  |    int m_iResourceOfCode;
                            10795 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10796 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10797 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10798 ; 163  |    int m_uTimeOutHigh;
                            10799 ; 164  |    int m_uTimeOutLow;
                            10800 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10801 ; 166  |};
                            10802 ; 167  |
                            10803 ; 168  |union WaitMask{
                            10804 ; 169  |    struct B{
                            10805 ; 170  |        unsigned int m_bNone     :1;
                            10806 ; 171  |        unsigned int m_bMessage  :1;
                            10807 ; 172  |        unsigned int m_bTimer    :1;
                            10808 ; 173  |        unsigned int m_bButton   :1;
                            10809 ; 174  |    } B;
                            10810 ; 175  |    int I;
                            10811 ; 176  |} ;
                            10812 ; 177  |
                            10813 ; 178  |
                            10814 ; 179  |struct Button {
                            10815 ; 180  |        WORD wButtonEvent;
                            10816 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10817 ; 182  |};
                            10818 ; 183  |
                            10819 ; 184  |struct Message {
                            10820 ; 185  |        WORD wMsgLength;
                            10821 ; 186  |        WORD wMsgCommand;
                            10822 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10823 ; 188  |};
                            10824 ; 189  |
                            10825 ; 190  |union EventTypes {
                            10826 ; 191  |        struct CMessage msg;
                            10827 ; 192  |        struct Button Button ;
                            10828 ; 193  |        struct Message Message;
                            10829 ; 194  |};
                            10830 ; 195  |
                            10831 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10832 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10833 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10834 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10835 ; 200  |
                            10836 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10837 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10838 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10839 ; 204  |
                            10840 ; 205  |#if DEBUG
                            10841 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10842 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10843 ; 208  |#else 
                            10844 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            10845 ; 210  |#define DebugBuildAssert(x)    
                            10846 ; 211  |#endif
                            10847 ; 212  |
                            10848 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10849 ; 214  |//  #pragma asm
                            10850 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10851 ; 216  |//  #pragma endasm
                            10852 ; 217  |
                            10853 ; 218  |
                            10854 ; 219  |#ifdef COLOR_262K
                            10855 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10856 ; 221  |#elif defined(COLOR_65K)
                            10857 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10858 ; 223  |#else
                            10859 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10860 ; 225  |#endif
                            10861 ; 226  |    
                            10862 ; 227  |#endif // #ifndef _TYPES_H
                            10863 
                            10865 
                            10866 ; 29   |
                            10867 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                            10868 ; 31   |////  I2S Registers (SAI)
                            10869 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                            10870 ; 33   |
                            10871 ; 34   |
                            10872 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                            10873 ; 36   |
                            10874 ; 37   |
                            10875 ; 38   |
                            10876 ; 39   |
                            10877 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                            10878 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                            10879 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                            10880 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                            10881 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                            10882 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                            10883 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                            10884 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                            10885 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                            10886 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                            10887 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                            10888 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                            10889 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                            10890 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                            10891 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                            10892 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                            10893 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                            10894 ; 57   |
                            10895 ; 58   |
                            10896 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                            10897 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                            10898 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                            10899 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                            10900 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                            10901 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                            10902 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                            10903 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                            10904 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                            10905 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                            10906 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                            10907 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                            10908 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                            10909 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                            10910 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                            10911 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                            10912 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                            10913 ; 76   |
                            10914 ; 77   |
                            10915 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                            10916 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                            10917 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                            10918 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                            10919 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                            10920 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                            10921 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                            10922 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                            10923 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                            10924 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                            10925 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                            10926 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                            10927 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                            10928 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                            10929 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                            10930 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                            10931 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                            10932 ; 95   |
                            10933 ; 96   |
                            10934 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                            10935 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                            10936 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                            10937 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                            10938 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                            10939 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                            10940 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                            10941 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                            10942 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                            10943 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                            10944 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                            10945 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                            10946 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                            10947 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                            10948 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                            10949 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                            10950 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                            10951 ; 114  |
                            10952 ; 115  |typedef union
                            10953 ; 116  |{
                            10954 ; 117  |    struct {
                            10955 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                            10956 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                            10957 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                            10958 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                            10959 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                            10960 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                            10961 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                            10962 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                            10963 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                            10964 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                            10965 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                            10966 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                            10967 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                            10968 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                            10969 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                            10970 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                            10971 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                            10972 ; 135  |    } B;
                            10973 ; 136  |    int I;
                            10974 ; 137  |    unsigned U;
                            10975 ; 138  |} saircsr_type;
                            10976 ; 139  |
                            10977 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive CSR         */
                            10978 ; 141  |
                            10979 ; 142  |typedef union
                            10980 ; 143  |{
                            10981 ; 144  |    struct {
                            10982 ; 145  |        unsigned SAI :24;
                            10983 ; 146  |    } B;
                            10984 ; 147  |    int I;
                            10985 ; 148  |    unsigned U;
                            10986 ; 149  |} saixr_type;
                            10987 ; 150  |
                            10988 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received data reg 0 */
                            10989 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received data reg 1 */
                            10990 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received data reg 2 */
                            10991 ; 154  |
                            10992 ; 155  |
                            10993 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                            10994 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                            10995 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                            10996 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                            10997 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                            10998 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                            10999 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                            11000 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                            11001 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                            11002 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                            11003 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                            11004 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                            11005 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                            11006 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                            11007 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                            11008 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                            11009 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                            11010 ; 173  |
                            11011 ; 174  |
                            11012 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                            11013 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                            11014 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                            11015 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                            11016 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                            11017 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                            11018 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                            11019 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                            11020 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                            11021 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                            11022 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                            11023 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                            11024 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                            11025 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                            11026 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                            11027 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                            11028 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                            11029 ; 192  |
                            11030 ; 193  |
                            11031 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                            11032 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                            11033 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                            11034 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                            11035 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                            11036 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                            11037 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                            11038 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                            11039 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                            11040 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                            11041 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                            11042 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                            11043 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                            11044 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                            11045 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                            11046 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                            11047 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                            11048 ; 211  |
                            11049 ; 212  |
                            11050 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                            11051 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                            11052 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                            11053 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                            11054 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                            11055 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                            11056 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                            11057 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                            11058 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                            11059 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                            11060 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                            11061 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                            11062 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                            11063 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                            11064 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                            11065 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                            11066 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                            11067 ; 230  |
                            11068 ; 231  |
                            11069 ; 232  |typedef union
                            11070 ; 233  |{
                            11071 ; 234  |    struct {
                            11072 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                            11073 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                            11074 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                            11075 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                            11076 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                            11077 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                            11078 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction 
                            11079 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                            11080 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                            11081 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                            11082 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justification
                            11083 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                            11084 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                            11085 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                            11086 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                            11087 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                            11088 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                            11089 ; 252  |    } B;
                            11090 ; 253  |    int I;
                            11091 ; 254  |    unsigned U;
                            11092 ; 255  |} saitcsr_type;
                            11093 ; 256  |
                            11094 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR      */
                            11095 ; 258  |
                            11096 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit data reg 0 */
                            11097 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit data reg 1 */
                            11098 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit data reg 2 */
                            11099 ; 262  |
                            11100 ; 263  |#endif
                            11101 
                            11103 
                            11104 ; 25   |#include "regsicoll.h"
                            11105 
                            11107 
                            11108 ; 1    |#if !defined(__REGS_ICOLL_INC)
                            11109 ; 2    |#define __REGS_ICOLL_INC 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11110 ; 3    |
                            11111 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                            11112 ; 5    |//  Interrupt Collector Registers
                            11113 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                            11114 ; 7    |
                            11115 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                            11116 ; 9    |
                            11117 ; 10   |
                            11118 ; 11   |
                            11119 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                            11120 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                            11121 ; 14   |
                            11122 ; 15   |typedef union
                            11123 ; 16   |{
                            11124 ; 17   |    struct {
                            11125 ; 18   |        int SEN0        :1;
                            11126 ; 19   |        int SEN1        :1;
                            11127 ; 20   |        int SEN2        :1;
                            11128 ; 21   |        int SEN3        :1;
                            11129 ; 22   |        int SEN4        :1;
                            11130 ; 23   |        int SEN5        :1;
                            11131 ; 24   |        int SEN6        :1;
                            11132 ; 25   |        int SEN7        :1;
                            11133 ; 26   |        int SEN8        :1;
                            11134 ; 27   |        int SEN9        :1;
                            11135 ; 28   |        int SEN10       :1;
                            11136 ; 29   |        int SEN11       :1;
                            11137 ; 30   |        int SEN12       :1;
                            11138 ; 31   |        int SEN13       :1;
                            11139 ; 32   |        int SEN14       :1;
                            11140 ; 33   |        int SEN15       :1;
                            11141 ; 34   |        int SEN16       :1;
                            11142 ; 35   |        int SEN17       :1;
                            11143 ; 36   |        int SEN18       :1;
                            11144 ; 37   |        int SEN19       :1;
                            11145 ; 38   |        int SEN20       :1;
                            11146 ; 39   |        int SEN21       :1;
                            11147 ; 40   |        int SEN22       :1;
                            11148 ; 41   |        int SEN23       :1;
                            11149 ; 42   |    } B;
                            11150 ; 43   |    int I;
                            11151 ; 44   |} iclenable0_type;
                            11152 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt Priority Register Core   */
                            11153 ; 46   |
                            11154 ; 47   |
                            11155 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                            11156 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                            11157 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                            11158 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                            11159 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                            11160 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                            11161 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                            11162 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                            11163 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                            11164 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                            11165 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                            11166 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                            11167 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                            11168 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                            11169 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                            11170 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                            11171 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                            11172 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                            11173 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                            11174 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                            11175 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                            11176 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                            11177 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                            11178 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                            11179 ; 72   |
                            11180 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                            11181 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                            11182 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                            11183 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                            11184 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                            11185 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                            11186 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                            11187 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                            11188 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                            11189 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                            11190 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                            11191 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                            11192 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                            11193 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                            11194 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                            11195 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                            11196 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                            11197 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                            11198 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                            11199 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                            11200 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                            11201 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                            11202 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                            11203 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                            11204 ; 97   |
                            11205 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                            11206 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                            11207 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                            11208 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                            11209 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                            11210 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                            11211 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                            11212 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                            11213 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                            11214 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                            11215 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                            11216 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                            11217 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                            11218 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                            11219 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                            11220 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                            11221 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                            11222 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                            11223 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                            11224 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                            11225 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                            11226 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                            11227 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                            11228 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                            11229 ; 122  |
                            11230 ; 123  |
                            11231 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                            11232 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                            11233 ; 126  |typedef union
                            11234 ; 127  |{
                            11235 ; 128  |    struct {
                            11236 ; 129  |        
                            11237 ; 130  |        int SEN24       :1;
                            11238 ; 131  |        int SEN25       :1;
                            11239 ; 132  |        int SEN26       :1;
                            11240 ; 133  |        int SEN27       :1;
                            11241 ; 134  |        int SEN28       :1;
                            11242 ; 135  |        int SEN29       :1;
                            11243 ; 136  |        int SEN30       :1;
                            11244 ; 137  |        int SEN31       :1;
                            11245 ; 138  |        int SEN32       :1;
                            11246 ; 139  |        int SEN33       :1;
                            11247 ; 140  |    } B;
                            11248 ; 141  |    int I;
                            11249 ; 142  |} iclenable1_type;
                            11250 ; 143  |
                            11251 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interrupt Priority Register Core    */
                            11252 ; 145  |
                            11253 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                            11254 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                            11255 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                            11256 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                            11257 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                            11258 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                            11259 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                            11260 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                            11261 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                            11262 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                            11263 ; 156  |
                            11264 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                            11265 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                            11266 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                            11267 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                            11268 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                            11269 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                            11270 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                            11271 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                            11272 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                            11273 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                            11274 ; 167  |
                            11275 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                            11276 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                            11277 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                            11278 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                            11279 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                            11280 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                            11281 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                            11282 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                            11283 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                            11284 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                            11285 ; 178  |
                            11286 ; 179  |
                            11287 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                            11288 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                            11289 ; 182  |typedef union
                            11290 ; 183  |{
                            11291 ; 184  |    struct {
                            11292 ; 185  |        int SST0        :1;
                            11293 ; 186  |        int SST1        :1;
                            11294 ; 187  |        int SST2        :1;
                            11295 ; 188  |        int SST3        :1;
                            11296 ; 189  |        int SST4        :1;
                            11297 ; 190  |        int SST5        :1;
                            11298 ; 191  |        int SST6        :1;
                            11299 ; 192  |        int SST7        :1;
                            11300 ; 193  |        int SST8        :1;
                            11301 ; 194  |        int SST9        :1;
                            11302 ; 195  |        int SST10       :1;
                            11303 ; 196  |        int SST11       :1;
                            11304 ; 197  |        int SST12       :1;
                            11305 ; 198  |        int SST13       :1;
                            11306 ; 199  |        int SST14       :1;
                            11307 ; 200  |        int SST15       :1;
                            11308 ; 201  |        int SST16       :1;
                            11309 ; 202  |        int SST17       :1;
                            11310 ; 203  |        int SST18       :1;
                            11311 ; 204  |        int SST19       :1;
                            11312 ; 205  |        int SST20       :1;
                            11313 ; 206  |        int SST21       :1;
                            11314 ; 207  |        int SST22       :1;
                            11315 ; 208  |        int SST23       :1;
                            11316 ; 209  |    } B;
                            11317 ; 210  |    int I;
                            11318 ; 211  |} iclstatus0_type;
                            11319 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interrupt Priority Register Core */
                            11320 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                            11321 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                            11322 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                            11323 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                            11324 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                            11325 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                            11326 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                            11327 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                            11328 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                            11329 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                            11330 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                            11331 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                            11332 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                            11333 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                            11334 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                            11335 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                            11336 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                            11337 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                            11338 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                            11339 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                            11340 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                            11341 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                            11342 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                            11343 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                            11344 ; 237  |
                            11345 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                            11346 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                            11347 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                            11348 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                            11349 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                            11350 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                            11351 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                            11352 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                            11353 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                            11354 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                            11355 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                            11356 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                            11357 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                            11358 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                            11359 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                            11360 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11361 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                            11362 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                            11363 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                            11364 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                            11365 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                            11366 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                            11367 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                            11368 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                            11369 ; 262  |
                            11370 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                            11371 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                            11372 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                            11373 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                            11374 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                            11375 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                            11376 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                            11377 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                            11378 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                            11379 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                            11380 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                            11381 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                            11382 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                            11383 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                            11384 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                            11385 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                            11386 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                            11387 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                            11388 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                            11389 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                            11390 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                            11391 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                            11392 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                            11393 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                            11394 ; 287  |
                            11395 ; 288  |
                            11396 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                            11397 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                            11398 ; 291  |typedef union
                            11399 ; 292  |{
                            11400 ; 293  |    struct {
                            11401 ; 294  |        int SST24       :1;
                            11402 ; 295  |        int SST25       :1;
                            11403 ; 296  |        int SST26       :1;
                            11404 ; 297  |        int SST27       :1;
                            11405 ; 298  |        int SST28       :1;
                            11406 ; 299  |        int SST29       :1;
                            11407 ; 300  |        int SST30       :1;
                            11408 ; 301  |        int SST31       :1;
                            11409 ; 302  |        int SST32       :1;
                            11410 ; 303  |        int SST33       :1;
                            11411 ; 304  |    } B;
                            11412 ; 305  |    int I;
                            11413 ; 306  |} iclstatus1_type;
                            11414 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interrupt Priority Register Core */
                            11415 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                            11416 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                            11417 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                            11418 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                            11419 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                            11420 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                            11421 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                            11422 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                            11423 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                            11424 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                            11425 ; 318  |
                            11426 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                            11427 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                            11428 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                            11429 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                            11430 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                            11431 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                            11432 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                            11433 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                            11434 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                            11435 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                            11436 ; 329  |
                            11437 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                            11438 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                            11439 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                            11440 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                            11441 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                            11442 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                            11443 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                            11444 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                            11445 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                            11446 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                            11447 ; 340  |
                            11448 ; 341  |
                            11449 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                            11450 ; 343  |//  Interrupt Collector Priority Defs
                            11451 ; 344  |typedef union
                            11452 ; 345  |{
                            11453 ; 346  |    struct {
                            11454 ; 347  |        unsigned S0P    :3;
                            11455 ; 348  |        unsigned S1P    :3;
                            11456 ; 349  |        unsigned S2P    :3;
                            11457 ; 350  |        unsigned S3P    :3;
                            11458 ; 351  |        unsigned S4P    :3;
                            11459 ; 352  |        unsigned S5P    :3;
                            11460 ; 353  |        unsigned S6P    :3;
                            11461 ; 354  |        unsigned S7P    :3;
                            11462 ; 355  |    } B;
                            11463 ; 356  |    int I;
                            11464 ; 357  |
                            11465 ; 358  |} iclprior0_type;
                            11466 ; 359  |
                            11467 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrupt Collector Register 0 Priority   */
                            11468 ; 361  |
                            11469 ; 362  |#define HW_ICLPRIORR_SP_0 0
                            11470 ; 363  |#define HW_ICLPRIORR_SP_1 1
                            11471 ; 364  |#define HW_ICLPRIORR_SP_2 2
                            11472 ; 365  |#define HW_ICLPRIORR_SP_3 3
                            11473 ; 366  |#define HW_ICLPRIORR_SP_4 4
                            11474 ; 367  |#define HW_ICLPRIORR_SP_5 5
                            11475 ; 368  |#define HW_ICLPRIORR_SP_6 6
                            11476 ; 369  |#define HW_ICLPRIORR_SP_7 7
                            11477 ; 370  |
                            11478 ; 371  |
                            11479 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                            11480 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                            11481 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                            11482 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                            11483 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                            11484 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                            11485 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                            11486 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                            11487 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                            11488 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                            11489 ; 382  |
                            11490 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                            11491 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                            11492 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                            11493 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                            11494 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                            11495 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                            11496 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                            11497 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                            11498 ; 391  |
                            11499 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                            11500 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                            11501 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                            11502 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                            11503 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                            11504 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                            11505 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                            11506 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                            11507 ; 400  |
                            11508 ; 401  |
                            11509 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                            11510 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                            11511 ; 404  |typedef union
                            11512 ; 405  |{
                            11513 ; 406  |    struct {
                            11514 ; 407  |        unsigned S8P    :3;
                            11515 ; 408  |        unsigned S9P    :3;
                            11516 ; 409  |        unsigned S10P   :3;
                            11517 ; 410  |        unsigned S11P   :3;
                            11518 ; 411  |        unsigned S12P   :3;
                            11519 ; 412  |        unsigned S13P   :3;
                            11520 ; 413  |        unsigned S14P   :3;
                            11521 ; 414  |        unsigned S15P   :3;
                            11522 ; 415  |    } B;
                            11523 ; 416  |    int I;
                            11524 ; 417  |} iclprior1_type;
                            11525 ; 418  |
                            11526 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrupt Collector Register 1 Priority   */
                            11527 ; 420  |
                            11528 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                            11529 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                            11530 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                            11531 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                            11532 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                            11533 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                            11534 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                            11535 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                            11536 ; 429  |
                            11537 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                            11538 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                            11539 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                            11540 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                            11541 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                            11542 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                            11543 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                            11544 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                            11545 ; 438  |
                            11546 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                            11547 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                            11548 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                            11549 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                            11550 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                            11551 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                            11552 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                            11553 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                            11554 ; 447  |
                            11555 ; 448  |
                            11556 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                            11557 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                            11558 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                            11559 ; 452  |{
                            11560 ; 453  |    struct {
                            11561 ; 454  |        unsigned S16P   :3;
                            11562 ; 455  |        unsigned S17P   :3;
                            11563 ; 456  |        unsigned S18P   :3;
                            11564 ; 457  |        unsigned S19P   :3;
                            11565 ; 458  |        unsigned S20P   :3;
                            11566 ; 459  |        unsigned S21P   :3;
                            11567 ; 460  |        unsigned S22P   :3;
                            11568 ; 461  |        unsigned S23P   :3;
                            11569 ; 462  |    } B;
                            11570 ; 463  |    int I;
                            11571 ; 464  |} iclprior2_type;
                            11572 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrupt Collector Register 2 Priority   */
                            11573 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                            11574 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                            11575 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                            11576 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                            11577 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                            11578 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                            11579 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                            11580 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                            11581 ; 474  |
                            11582 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                            11583 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                            11584 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                            11585 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                            11586 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                            11587 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                            11588 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                            11589 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                            11590 ; 483  |
                            11591 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                            11592 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                            11593 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                            11594 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                            11595 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                            11596 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                            11597 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                            11598 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                            11599 ; 492  |
                            11600 ; 493  |
                            11601 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                            11602 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                            11603 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                            11604 ; 497  |{
                            11605 ; 498  |    struct {
                            11606 ; 499  |        unsigned S24P   :3;
                            11607 ; 500  |        unsigned S25P   :3;
                            11608 ; 501  |        unsigned S26P   :3;
                            11609 ; 502  |        unsigned S27P   :3;
                            11610 ; 503  |        unsigned S28P   :3;
                            11611 ; 504  |        unsigned S29P   :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11612 ; 505  |        unsigned S30P   :3;
                            11613 ; 506  |        unsigned S31P   :3;
                            11614 ; 507  |    } B;
                            11615 ; 508  |    int I;
                            11616 ; 509  |} iclprior3_type;
                            11617 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrupt Collector Register 3 Priority   */
                            11618 ; 511  |
                            11619 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                            11620 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                            11621 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                            11622 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                            11623 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                            11624 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                            11625 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                            11626 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                            11627 ; 520  |
                            11628 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                            11629 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                            11630 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                            11631 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                            11632 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                            11633 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                            11634 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                            11635 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                            11636 ; 529  |
                            11637 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                            11638 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                            11639 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                            11640 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                            11641 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                            11642 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                            11643 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                            11644 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                            11645 ; 538  |
                            11646 ; 539  |
                            11647 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                            11648 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                            11649 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                            11650 ; 543  |{
                            11651 ; 544  |    struct {
                            11652 ; 545  |        unsigned S32P   :3;
                            11653 ; 546  |        unsigned S33P   :3;
                            11654 ; 547  |    } B;
                            11655 ; 548  |    int I;
                            11656 ; 549  |} iclprior4_type;
                            11657 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt Collector Register 4 Priority   */
                            11658 ; 551  |
                            11659 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                            11660 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                            11661 ; 554  |
                            11662 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                            11663 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                            11664 ; 557  |
                            11665 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                            11666 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                            11667 ; 560  |
                            11668 ; 561  |
                            11669 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                            11670 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                            11671 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                            11672 ; 565  |{
                            11673 ; 566  |    struct {
                            11674 ; 567  |        unsigned S0S    :2;
                            11675 ; 568  |        unsigned S1S    :2;
                            11676 ; 569  |        unsigned S2S    :2;
                            11677 ; 570  |        unsigned S3S    :2;
                            11678 ; 571  |        unsigned S4S    :2;
                            11679 ; 572  |        unsigned S5S    :2;
                            11680 ; 573  |        unsigned S6S    :2;
                            11681 ; 574  |        unsigned S7S    :2;
                            11682 ; 575  |        unsigned S8S    :2;
                            11683 ; 576  |        unsigned S9S    :2;
                            11684 ; 577  |        unsigned S10S   :2;
                            11685 ; 578  |        unsigned S11S   :2;
                            11686 ; 579  |    } B;
                            11687 ; 580  |    int I;
                            11688 ; 581  |} iclsteer0_type;
                            11689 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrupt Collector Steering Register 0   */
                            11690 ; 583  |
                            11691 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                            11692 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                            11693 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                            11694 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                            11695 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                            11696 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                            11697 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                            11698 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                            11699 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                            11700 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                            11701 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                            11702 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                            11703 ; 596  |
                            11704 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                            11705 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                            11706 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                            11707 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                            11708 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                            11709 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                            11710 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                            11711 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                            11712 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                            11713 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                            11714 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                            11715 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                            11716 ; 609  |
                            11717 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                            11718 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                            11719 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                            11720 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                            11721 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                            11722 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                            11723 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                            11724 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                            11725 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                            11726 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                            11727 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                            11728 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                            11729 ; 622  |
                            11730 ; 623  |
                            11731 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                            11732 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                            11733 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                            11734 ; 627  |{
                            11735 ; 628  |    struct {
                            11736 ; 629  |        unsigned S12S   :2;
                            11737 ; 630  |        unsigned S13S   :2;
                            11738 ; 631  |        unsigned S14S   :2;
                            11739 ; 632  |        unsigned S15S   :2;
                            11740 ; 633  |        unsigned S16S   :2;
                            11741 ; 634  |        unsigned S17S   :2;
                            11742 ; 635  |        unsigned S18S   :2;
                            11743 ; 636  |        unsigned S19S   :2;
                            11744 ; 637  |        unsigned S20S   :2;
                            11745 ; 638  |        unsigned S21S   :2;
                            11746 ; 639  |        unsigned S22S   :2;
                            11747 ; 640  |        unsigned S23S   :2;
                            11748 ; 641  |    } B;
                            11749 ; 642  |    int I;
                            11750 ; 643  |} iclsteer1_type;
                            11751 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrupt Collector Steering Register 1   */
                            11752 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                            11753 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                            11754 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                            11755 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                            11756 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                            11757 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                            11758 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                            11759 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                            11760 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                            11761 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                            11762 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                            11763 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                            11764 ; 657  |
                            11765 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                            11766 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                            11767 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                            11768 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                            11769 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                            11770 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                            11771 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                            11772 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                            11773 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                            11774 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                            11775 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                            11776 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                            11777 ; 670  |
                            11778 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                            11779 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                            11780 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                            11781 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                            11782 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                            11783 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                            11784 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                            11785 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                            11786 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                            11787 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                            11788 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                            11789 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                            11790 ; 683  |
                            11791 ; 684  |
                            11792 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                            11793 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                            11794 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                            11795 ; 688  |{
                            11796 ; 689  |    struct {
                            11797 ; 690  |        unsigned S24S   :2;
                            11798 ; 691  |        unsigned S25S   :2;
                            11799 ; 692  |        unsigned S26S   :2;
                            11800 ; 693  |        unsigned S27S   :2;
                            11801 ; 694  |        unsigned S28S   :2;
                            11802 ; 695  |        unsigned S29S   :2;
                            11803 ; 696  |        unsigned S30S   :2;
                            11804 ; 697  |        unsigned S31S   :2;
                            11805 ; 698  |        unsigned S32S   :2;
                            11806 ; 699  |        unsigned S33S   :2;
                            11807 ; 700  |    } B;
                            11808 ; 701  |    int I;
                            11809 ; 702  |} iclsteer2_type;
                            11810 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interrupt Collector Steering Register 2  */
                            11811 ; 704  |
                            11812 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                            11813 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                            11814 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                            11815 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                            11816 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                            11817 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                            11818 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                            11819 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                            11820 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                            11821 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                            11822 ; 715  |
                            11823 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                            11824 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                            11825 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                            11826 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                            11827 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                            11828 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                            11829 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                            11830 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                            11831 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                            11832 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                            11833 ; 726  |
                            11834 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                            11835 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                            11836 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                            11837 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                            11838 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                            11839 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                            11840 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                            11841 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                            11842 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                            11843 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                            11844 ; 737  |
                            11845 ; 738  |
                            11846 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                            11847 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                            11848 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                            11849 ; 742  |{
                            11850 ; 743  |    struct {
                            11851 ; 744  |        int S0FV        :1;
                            11852 ; 745  |        int S1FV        :1;
                            11853 ; 746  |        int S2FV        :1;
                            11854 ; 747  |        int S3FV        :1;
                            11855 ; 748  |        int S4FV        :1;
                            11856 ; 749  |        int S5FV        :1;
                            11857 ; 750  |        int S6FV        :1;
                            11858 ; 751  |        int S7FV        :1;
                            11859 ; 752  |        int S8FV        :1;
                            11860 ; 753  |        int S9FV        :1;
                            11861 ; 754  |        int S10FV       :1;
                            11862 ; 755  |        int S11FV       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11863 ; 756  |        int S12FV       :1;
                            11864 ; 757  |        int S13FV       :1;
                            11865 ; 758  |        int S14FV       :1;
                            11866 ; 759  |        int S15FV       :1;
                            11867 ; 760  |        int S16FV       :1;
                            11868 ; 761  |        int S17FV       :1;
                            11869 ; 762  |        int S18FV       :1;
                            11870 ; 763  |        int S19FV       :1;
                            11871 ; 764  |        int S20FV       :1;
                            11872 ; 765  |        int S21FV       :1;
                            11873 ; 766  |        int S22FV       :1;
                            11874 ; 767  |        int S23FV       :1;
                            11875 ; 768  |    } B;
                            11876 ; 769  |    int I;
                            11877 ; 770  |} iclforce0_type;
                            11878 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interrupt Collector Debug Force Register 0   */
                            11879 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                            11880 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                            11881 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                            11882 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                            11883 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                            11884 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                            11885 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                            11886 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                            11887 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                            11888 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                            11889 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                            11890 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                            11891 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                            11892 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                            11893 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                            11894 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                            11895 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                            11896 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                            11897 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                            11898 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                            11899 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                            11900 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                            11901 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                            11902 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                            11903 ; 796  |
                            11904 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                            11905 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                            11906 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                            11907 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                            11908 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                            11909 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                            11910 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                            11911 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                            11912 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                            11913 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                            11914 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                            11915 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                            11916 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                            11917 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                            11918 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                            11919 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                            11920 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                            11921 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                            11922 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                            11923 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                            11924 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                            11925 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                            11926 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                            11927 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                            11928 ; 821  |
                            11929 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                            11930 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                            11931 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                            11932 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                            11933 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                            11934 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                            11935 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                            11936 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                            11937 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                            11938 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                            11939 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                            11940 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                            11941 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                            11942 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                            11943 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                            11944 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                            11945 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                            11946 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                            11947 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                            11948 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                            11949 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                            11950 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                            11951 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                            11952 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                            11953 ; 846  |
                            11954 ; 847  |
                            11955 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                            11956 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                            11957 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                            11958 ; 851  |{
                            11959 ; 852  |    struct {
                            11960 ; 853  |        int S24FV       :1;
                            11961 ; 854  |        int S25FV       :1;
                            11962 ; 855  |        int S26FV       :1;
                            11963 ; 856  |        int S27FV       :1;
                            11964 ; 857  |        int S28FV       :1;
                            11965 ; 858  |        int S29FV       :1;
                            11966 ; 859  |        int S30FV       :1;
                            11967 ; 860  |        int S31FV       :1;
                            11968 ; 861  |        int S32FV       :1;
                            11969 ; 862  |        int S33FV       :1;
                            11970 ; 863  |    } B;
                            11971 ; 864  |    int I;
                            11972 ; 865  |} iclforce1_type;
                            11973 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interrupt Collector Debug Force Register 1   */
                            11974 ; 867  |
                            11975 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                            11976 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                            11977 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                            11978 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                            11979 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                            11980 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                            11981 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                            11982 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                            11983 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                            11984 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                            11985 ; 878  |
                            11986 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                            11987 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                            11988 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                            11989 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                            11990 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                            11991 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                            11992 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                            11993 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                            11994 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                            11995 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                            11996 ; 889  |
                            11997 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                            11998 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                            11999 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                            12000 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                            12001 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                            12002 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                            12003 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                            12004 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                            12005 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                            12006 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                            12007 ; 900  |
                            12008 ; 901  |
                            12009 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                            12010 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                            12011 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                            12012 ; 905  |{
                            12013 ; 906  |    struct {
                            12014 ; 907  |        int S0FE        :1;
                            12015 ; 908  |        int S1FE        :1;
                            12016 ; 909  |        int S2FE        :1;
                            12017 ; 910  |        int S3FE        :1;
                            12018 ; 911  |        int S4FE        :1;
                            12019 ; 912  |        int S5FE        :1;
                            12020 ; 913  |        int S6FE        :1;
                            12021 ; 914  |        int S7FE        :1;
                            12022 ; 915  |        int S8FE        :1;
                            12023 ; 916  |        int S9FE        :1;
                            12024 ; 917  |        int S10FE       :1;
                            12025 ; 918  |        int S11FE       :1;
                            12026 ; 919  |        int S12FE       :1;
                            12027 ; 920  |        int S13FE       :1;
                            12028 ; 921  |        int S14FE       :1;
                            12029 ; 922  |        int S15FE       :1;
                            12030 ; 923  |        int S16FE       :1;
                            12031 ; 924  |        int S17FE       :1;
                            12032 ; 925  |        int S18FE       :1;
                            12033 ; 926  |        int S19FE       :1;
                            12034 ; 927  |        int S20FE       :1;
                            12035 ; 928  |        int S21FE       :1;
                            12036 ; 929  |        int S22FE       :1;
                            12037 ; 930  |        int S23FE       :1;
                            12038 ; 931  |    } B;
                            12039 ; 932  |    int I;
                            12040 ; 933  |} iclfenable0_type;
                            12041 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Interrupt Collector Force Enable Register 0    */
                            12042 ; 935  |
                            12043 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                            12044 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                            12045 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                            12046 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                            12047 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                            12048 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                            12049 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                            12050 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                            12051 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                            12052 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                            12053 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                            12054 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                            12055 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                            12056 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                            12057 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                            12058 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                            12059 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                            12060 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                            12061 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                            12062 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                            12063 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                            12064 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                            12065 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                            12066 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                            12067 ; 960  |
                            12068 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                            12069 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                            12070 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                            12071 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                            12072 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                            12073 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                            12074 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                            12075 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                            12076 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                            12077 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                            12078 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                            12079 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                            12080 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                            12081 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                            12082 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                            12083 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                            12084 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                            12085 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                            12086 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                            12087 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                            12088 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                            12089 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                            12090 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                            12091 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                            12092 ; 985  |
                            12093 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                            12094 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                            12095 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                            12096 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                            12097 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                            12098 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                            12099 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                            12100 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                            12101 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                            12102 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                            12103 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                            12104 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                            12105 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                            12106 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                            12107 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                            12108 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                            12109 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                            12110 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                            12111 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                            12112 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                            12113 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12114 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                            12115 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                            12116 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                            12117 ; 1010 |
                            12118 ; 1011 |
                            12119 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                            12120 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                            12121 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                            12122 ; 1015 |{
                            12123 ; 1016 |    struct {
                            12124 ; 1017 |        int S24FE       :1;
                            12125 ; 1018 |        int S25FE       :1;
                            12126 ; 1019 |        int S26FE       :1;
                            12127 ; 1020 |        int S27FE       :1;
                            12128 ; 1021 |        int S28FE       :1;
                            12129 ; 1022 |        int S29FE       :1;
                            12130 ; 1023 |        int S30FE       :1;
                            12131 ; 1024 |        int S31FE       :1;
                            12132 ; 1025 |        int S32FE       :1;
                            12133 ; 1026 |        int S33FE       :1;
                            12134 ; 1027 |    } B;
                            12135 ; 1028 |    int I;
                            12136 ; 1029 |} iclfenable1_type;
                            12137 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Interrupt Collector Force Enable Register 1    */
                            12138 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                            12139 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                            12140 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                            12141 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                            12142 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                            12143 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                            12144 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                            12145 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                            12146 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                            12147 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                            12148 ; 1041 |
                            12149 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                            12150 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                            12151 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                            12152 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                            12153 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                            12154 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                            12155 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                            12156 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                            12157 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                            12158 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                            12159 ; 1052 |
                            12160 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                            12161 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                            12162 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                            12163 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                            12164 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                            12165 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                            12166 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                            12167 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                            12168 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                            12169 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                            12170 ; 1063 |
                            12171 ; 1064 |
                            12172 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                            12173 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                            12174 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                            12175 ; 1068 |{
                            12176 ; 1069 |    struct {
                            12177 ; 1070 |        unsigned RQ     :7;
                            12178 ; 1071 |        unsigned IVA    :7;
                            12179 ; 1072 |        unsigned IVB    :7;
                            12180 ; 1073 |    } B;
                            12181 ; 1074 |    int I;
                            12182 ; 1075 |} iclobsvz0_type;
                            12183 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interrupt Collector Observation Register 0   */
                            12184 ; 1077 |
                            12185 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                            12186 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                            12187 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                            12188 ; 1081 |
                            12189 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                            12190 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                            12191 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                            12192 ; 1085 |
                            12193 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                            12194 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                            12195 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                            12196 ; 1089 |
                            12197 ; 1090 |
                            12198 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                            12199 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                            12200 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                            12201 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                            12202 ; 1095 |
                            12203 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                            12204 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                            12205 ; 1098 |
                            12206 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                            12207 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                            12208 ; 1101 |
                            12209 ; 1102 |
                            12210 ; 1103 |
                            12211 ; 1104 |
                            12212 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                            12213 ; 1106 |//  Interrupt Vectors
                            12214 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                            12215 ; 1108 |// Reset Vector
                            12216 ; 1109 |#define HW_IVECRESET 0x0000           
                            12217 ; 1110 |// Stack Error
                            12218 ; 1111 |#define HW_IVECSTERR 0x0002           
                            12219 ; 1112 |// Trace
                            12220 ; 1113 |#define HW_IVECTRAC 0x0004           
                            12221 ; 1114 |// SWI
                            12222 ; 1115 |#define HW_IVECSWI 0x0006           
                            12223 ; 1116 |// ~IRQA
                            12224 ; 1117 |#define HW_IVECIRQA 0x0008           
                            12225 ; 1118 |// ~IRQB - BROWNOUT
                            12226 ; 1119 |#define HW_IVECIRQB 0x000A           
                            12227 ; 1120 |// Fatal Error
                            12228 ; 1121 |#define HW_IVECERROR 0x000C           
                            12229 ; 1122 |// SPI
                            12230 ; 1123 |#define HW_IVECSPI 0x000E           
                            12231 ; 1124 |// I2S TX Data Empty
                            12232 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                            12233 ; 1126 |// I2S TX Underflow
                            12234 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                            12235 ; 1128 |// I2S RX Data Full
                            12236 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                            12237 ; 1130 |// I2S RX Overflow
                            12238 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                            12239 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors here
                            12240 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors here
                            12241 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors here
                            12242 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                            12243 ; 1136 |// GPIO1
                            12244 ; 1137 |#define HW_IVECGPIO1 0x0020           
                            12245 ; 1138 |// GPIO2
                            12246 ; 1139 |#define HW_IVECGPIO2 0x0022           
                            12247 ; 1140 |// GPIO0
                            12248 ; 1141 |#define HW_IVECGPIO0 0x0024           
                            12249 ; 1142 |// TIMER0
                            12250 ; 1143 |#define HW_IVECTIMER0 0x0026           
                            12251 ; 1144 |// TIMER1
                            12252 ; 1145 |#define HW_IVECTIMER1 0x0028           
                            12253 ; 1146 |// TIMER2
                            12254 ; 1147 |#define HW_IVECTIMER2 0x002A           
                            12255 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors here
                            12256 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors here
                            12257 ; 1150 |// I2C RX Data Ready
                            12258 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                            12259 ; 1152 |// I2C RX Overflow
                            12260 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                            12261 ; 1154 |// I2C TX Data Empty
                            12262 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                            12263 ; 1156 |// I2C TX Underflow
                            12264 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                            12265 ; 1158 |// Illegal Instruction
                            12266 ; 1159 |#define HW_IVECILI 0x0038           
                            12267 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors here
                            12268 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                            12269 ; 1162 |#define HW_IVECDACE 0x003C           
                            12270 ; 1163 |// DAC Underflow ISR
                            12271 ; 1164 |#define HW_IVECDACUF 0x003E           
                            12272 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors here
                            12273 ; 1166 |// ADC Full ISR
                            12274 ; 1167 |#define HW_IVECADCF 0x0042           
                            12275 ; 1168 |// ADC Overflow ISR
                            12276 ; 1169 |#define HW_IVECADCOF 0x0044           
                            12277 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors here
                            12278 ; 1171 |// TIMER3
                            12279 ; 1172 |#define HW_IVECTIMER3 0x0048           
                            12280 ; 1173 |// GPIO3
                            12281 ; 1174 |#define HW_IVECGPIO3 0x004A           
                            12282 ; 1175 |// SDRAM
                            12283 ; 1176 |#define HW_IVECSDRAM 0x004C           
                            12284 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors here
                            12285 ; 1178 |// 5 volt power connected
                            12286 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                            12287 ; 1180 |// USB Controller
                            12288 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                            12289 ; 1182 |// USB Wakeup 
                            12290 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                            12291 ; 1184 |// 5 volt power disconnected
                            12292 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                            12293 ; 1186 |// enhanced SPI
                            12294 ; 1187 |#define HW_IVECESPI 0x0058           
                            12295 ; 1188 |// filter coprocessor
                            12296 ; 1189 |#define HW_IVECFILCO 0x005A           
                            12297 ; 1190 |// low res ADC #1
                            12298 ; 1191 |#define HW_IVECLRADC1 0x005C           
                            12299 ; 1192 |// real time clock alarm
                            12300 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                            12301 ; 1194 |// low res ADC #2
                            12302 ; 1195 |#define HW_IVECLRADC2 0x0060           
                            12303 ; 1196 |// flash hardware ECC
                            12304 ; 1197 |#define HW_IVECHWECC 0x0062           
                            12305 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors here
                            12306 ; 1199 |// CDSYNC Interrupt
                            12307 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                            12308 ; 1201 |// CDSYNC Exception
                            12309 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                            12310 ; 1203 |// RS
                            12311 ; 1204 |#define HW_IVECRS 0x006A           
                            12312 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors here
                            12313 ; 1206 |// Flash Done ISR
                            12314 ; 1207 |#define HW_IVECFD 0x006E           
                            12315 ; 1208 |// CompactFlash ISR
                            12316 ; 1209 |#define HW_IVECCF 0x0070           
                            12317 ; 1210 |// SmartMedia Timeout ISR
                            12318 ; 1211 |#define HW_IVECSMTO 0x0072           
                            12319 ; 1212 |// SmartMedia Invalid Programming
                            12320 ; 1213 |#define HW_IVECSMIP 0x0074           
                            12321 ; 1214 |// CompactFlash No Card ISR
                            12322 ; 1215 |#define HW_IVECCFNC 0x0076           
                            12323 ; 1216 |// CompactFlash Status Change ISR
                            12324 ; 1217 |#define HW_IVECCFSC 0x0078           
                            12325 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors here
                            12326 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors here
                            12327 ; 1220 |// CDI
                            12328 ; 1221 |#define HW_IVECCDI 0x007E           
                            12329 ; 1222 |
                            12330 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                            12331 ; 1224 |//  Interrupt Vectors
                            12332 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                            12333 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                            12334 ; 1227 |#define VECTOR(address,isr) \ 
                            12335 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                            12336 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                            12337 ; 1230 |
                            12338 ; 1231 |
                            12339 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                            12340 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                            12341 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                            12342 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                            12343 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                            12344 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                            12345 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                            12346 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                            12347 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                            12348 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                            12349 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                            12350 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                            12351 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                            12352 ; 1245 |
                            12353 ; 1246 |// Interrupt Disabled
                            12354 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                            12355 ; 1248 |// Interrupt Priority Level 0
                            12356 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                            12357 ; 1250 |// Interrupt Priority Level 1
                            12358 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                            12359 ; 1252 |// Interrupt Priority Level 2
                            12360 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                            12361 ; 1254 |
                            12362 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                            12363 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                            12364 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12365 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                            12366 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                            12367 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                            12368 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                            12369 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                            12370 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                            12371 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                            12372 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                            12373 ; 1266 |
                            12374 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                            12375 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                            12376 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                            12377 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                            12378 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                            12379 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                            12380 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                            12381 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                            12382 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                            12383 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                            12384 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                            12385 ; 1278 |
                            12386 ; 1279 |// Interrupt Priority register
                            12387 ; 1280 |typedef union               
                            12388 ; 1281 |{
                            12389 ; 1282 |    struct {
                            12390 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                            12391 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                            12392 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                            12393 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                            12394 ; 1287 |        int                 :4; /* Reserved */
                            12395 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                            12396 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                            12397 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                            12398 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                            12399 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                            12400 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                            12401 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                            12402 ; 1295 |    } B;
                            12403 ; 1296 |
                            12404 ; 1297 |    int I;
                            12405 ; 1298 |
                            12406 ; 1299 |} ipr_type;
                            12407 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                            12408 ; 1301 |
                            12409 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                            12410 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                            12411 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                            12412 ; 1305 |
                            12413 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                            12414 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                            12415 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                            12416 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                            12417 ; 1310 |
                            12418 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                            12419 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                            12420 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                            12421 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                            12422 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                            12423 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                            12424 ; 1317 |
                            12425 ; 1318 |#endif
                            12426 ; 1319 |
                            12427 
                            12429 
                            12430 ; 26   |#include "regslradc.h"
                            12431 
                            12433 
                            12434 ; 1    |#if !(defined(regslradcinc))
                            12435 ; 2    |
                            12436 ; 3    |#define regslradcinc 1
                            12437 ; 4    |
                            12438 ; 5    |#include "types.h"
                            12439 
                            12441 
                            12442 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            12443 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            12444 ; 3    |//
                            12445 ; 4    |// Filename: types.h
                            12446 ; 5    |// Description: Standard data types
                            12447 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            12448 ; 7    |
                            12449 ; 8    |#ifndef _TYPES_H
                            12450 ; 9    |#define _TYPES_H
                            12451 ; 10   |
                            12452 ; 11   |// TODO:  move this outta here!
                            12453 ; 12   |#if !defined(NOERROR)
                            12454 ; 13   |#define NOERROR 0
                            12455 ; 14   |#define SUCCESS 0
                            12456 ; 15   |#endif 
                            12457 ; 16   |#if !defined(SUCCESS)
                            12458 ; 17   |#define SUCCESS  0
                            12459 ; 18   |#endif
                            12460 ; 19   |#if !defined(ERROR)
                            12461 ; 20   |#define ERROR   -1
                            12462 ; 21   |#endif
                            12463 ; 22   |#if !defined(FALSE)
                            12464 ; 23   |#define FALSE 0
                            12465 ; 24   |#endif
                            12466 ; 25   |#if !defined(TRUE)
                            12467 ; 26   |#define TRUE  1
                            12468 ; 27   |#endif
                            12469 ; 28   |
                            12470 ; 29   |#if !defined(NULL)
                            12471 ; 30   |#define NULL 0
                            12472 ; 31   |#endif
                            12473 ; 32   |
                            12474 ; 33   |#define MAX_INT     0x7FFFFF
                            12475 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            12476 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            12477 ; 36   |#define MAX_ULONG   (-1) 
                            12478 ; 37   |
                            12479 ; 38   |#define WORD_SIZE   24              // word size in bits
                            12480 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            12481 ; 40   |
                            12482 ; 41   |
                            12483 ; 42   |#define BYTE    unsigned char       // btVarName
                            12484 ; 43   |#define CHAR    signed char         // cVarName
                            12485 ; 44   |#define USHORT  unsigned short      // usVarName
                            12486 ; 45   |#define SHORT   unsigned short      // sVarName
                            12487 ; 46   |#define WORD    unsigned int        // wVarName
                            12488 ; 47   |#define INT     signed int          // iVarName
                            12489 ; 48   |#define DWORD   unsigned long       // dwVarName
                            12490 ; 49   |#define LONG    signed long         // lVarName
                            12491 ; 50   |#define BOOL    unsigned int        // bVarName
                            12492 ; 51   |#define FRACT   _fract              // frVarName
                            12493 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            12494 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            12495 ; 54   |#define FLOAT   float               // fVarName
                            12496 ; 55   |#define DBL     double              // dVarName
                            12497 ; 56   |#define ENUM    enum                // eVarName
                            12498 ; 57   |#define CMX     _complex            // cmxVarName
                            12499 ; 58   |typedef WORD UCS3;                   // 
                            12500 ; 59   |
                            12501 ; 60   |#define UINT16  unsigned short
                            12502 ; 61   |#define UINT8   unsigned char   
                            12503 ; 62   |#define UINT32  unsigned long
                            12504 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            12505 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            12506 ; 65   |#define WCHAR   UINT16
                            12507 ; 66   |
                            12508 ; 67   |//UINT128 is 16 bytes or 6 words
                            12509 ; 68   |typedef struct UINT128_3500 {   
                            12510 ; 69   |    int val[6];     
                            12511 ; 70   |} UINT128_3500;
                            12512 ; 71   |
                            12513 ; 72   |#define UINT128   UINT128_3500
                            12514 ; 73   |
                            12515 ; 74   |// Little endian word packed byte strings:   
                            12516 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12517 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12518 ; 77   |// Little endian word packed byte strings:   
                            12519 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12520 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12521 ; 80   |
                            12522 ; 81   |// Declare Memory Spaces To Use When Coding
                            12523 ; 82   |// A. Sector Buffers
                            12524 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            12525 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            12526 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            12527 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            12528 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            12529 ; 88   |// B. Media DDI Memory
                            12530 ; 89   |#define MEDIA_DDI_MEM _Y
                            12531 ; 90   |
                            12532 ; 91   |
                            12533 ; 92   |
                            12534 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            12535 ; 94   |// Examples of circular pointers:
                            12536 ; 95   |//    INT CIRC cpiVarName
                            12537 ; 96   |//    DWORD CIRC cpdwVarName
                            12538 ; 97   |
                            12539 ; 98   |#define RETCODE INT                 // rcVarName
                            12540 ; 99   |
                            12541 ; 100  |// generic bitfield structure
                            12542 ; 101  |struct Bitfield {
                            12543 ; 102  |    unsigned int B0  :1;
                            12544 ; 103  |    unsigned int B1  :1;
                            12545 ; 104  |    unsigned int B2  :1;
                            12546 ; 105  |    unsigned int B3  :1;
                            12547 ; 106  |    unsigned int B4  :1;
                            12548 ; 107  |    unsigned int B5  :1;
                            12549 ; 108  |    unsigned int B6  :1;
                            12550 ; 109  |    unsigned int B7  :1;
                            12551 ; 110  |    unsigned int B8  :1;
                            12552 ; 111  |    unsigned int B9  :1;
                            12553 ; 112  |    unsigned int B10 :1;
                            12554 ; 113  |    unsigned int B11 :1;
                            12555 ; 114  |    unsigned int B12 :1;
                            12556 ; 115  |    unsigned int B13 :1;
                            12557 ; 116  |    unsigned int B14 :1;
                            12558 ; 117  |    unsigned int B15 :1;
                            12559 ; 118  |    unsigned int B16 :1;
                            12560 ; 119  |    unsigned int B17 :1;
                            12561 ; 120  |    unsigned int B18 :1;
                            12562 ; 121  |    unsigned int B19 :1;
                            12563 ; 122  |    unsigned int B20 :1;
                            12564 ; 123  |    unsigned int B21 :1;
                            12565 ; 124  |    unsigned int B22 :1;
                            12566 ; 125  |    unsigned int B23 :1;
                            12567 ; 126  |};
                            12568 ; 127  |
                            12569 ; 128  |union BitInt {
                            12570 ; 129  |        struct Bitfield B;
                            12571 ; 130  |        int        I;
                            12572 ; 131  |};
                            12573 ; 132  |
                            12574 ; 133  |#define MAX_MSG_LENGTH 10
                            12575 ; 134  |struct CMessage
                            12576 ; 135  |{
                            12577 ; 136  |        unsigned int m_uLength;
                            12578 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            12579 ; 138  |};
                            12580 ; 139  |
                            12581 ; 140  |typedef struct {
                            12582 ; 141  |    WORD m_wLength;
                            12583 ; 142  |    WORD m_wMessage;
                            12584 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            12585 ; 144  |} Message;
                            12586 ; 145  |
                            12587 ; 146  |struct MessageQueueDescriptor
                            12588 ; 147  |{
                            12589 ; 148  |        int *m_pBase;
                            12590 ; 149  |        int m_iModulo;
                            12591 ; 150  |        int m_iSize;
                            12592 ; 151  |        int *m_pHead;
                            12593 ; 152  |        int *m_pTail;
                            12594 ; 153  |};
                            12595 ; 154  |
                            12596 ; 155  |struct ModuleEntry
                            12597 ; 156  |{
                            12598 ; 157  |    int m_iSignaledEventMask;
                            12599 ; 158  |    int m_iWaitEventMask;
                            12600 ; 159  |    int m_iResourceOfCode;
                            12601 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            12602 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            12603 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            12604 ; 163  |    int m_uTimeOutHigh;
                            12605 ; 164  |    int m_uTimeOutLow;
                            12606 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            12607 ; 166  |};
                            12608 ; 167  |
                            12609 ; 168  |union WaitMask{
                            12610 ; 169  |    struct B{
                            12611 ; 170  |        unsigned int m_bNone     :1;
                            12612 ; 171  |        unsigned int m_bMessage  :1;
                            12613 ; 172  |        unsigned int m_bTimer    :1;
                            12614 ; 173  |        unsigned int m_bButton   :1;
                            12615 ; 174  |    } B;
                            12616 ; 175  |    int I;
                            12617 ; 176  |} ;
                            12618 ; 177  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12619 ; 178  |
                            12620 ; 179  |struct Button {
                            12621 ; 180  |        WORD wButtonEvent;
                            12622 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            12623 ; 182  |};
                            12624 ; 183  |
                            12625 ; 184  |struct Message {
                            12626 ; 185  |        WORD wMsgLength;
                            12627 ; 186  |        WORD wMsgCommand;
                            12628 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            12629 ; 188  |};
                            12630 ; 189  |
                            12631 ; 190  |union EventTypes {
                            12632 ; 191  |        struct CMessage msg;
                            12633 ; 192  |        struct Button Button ;
                            12634 ; 193  |        struct Message Message;
                            12635 ; 194  |};
                            12636 ; 195  |
                            12637 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            12638 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            12639 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            12640 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            12641 ; 200  |
                            12642 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            12643 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            12644 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            12645 ; 204  |
                            12646 ; 205  |#if DEBUG
                            12647 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12648 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12649 ; 208  |#else 
                            12650 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            12651 ; 210  |#define DebugBuildAssert(x)    
                            12652 ; 211  |#endif
                            12653 ; 212  |
                            12654 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12655 ; 214  |//  #pragma asm
                            12656 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12657 ; 216  |//  #pragma endasm
                            12658 ; 217  |
                            12659 ; 218  |
                            12660 ; 219  |#ifdef COLOR_262K
                            12661 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            12662 ; 221  |#elif defined(COLOR_65K)
                            12663 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            12664 ; 223  |#else
                            12665 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            12666 ; 225  |#endif
                            12667 ; 226  |    
                            12668 ; 227  |#endif // #ifndef _TYPES_H
                            12669 
                            12671 
                            12672 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12673 ; 7    |
                            12674 ; 8    |//   SYSTEM STMP Registers 
                            12675 ; 9    |//  Last Edited 6.26.2003 M. Henson
                            12676 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12677 ; 11   |
                            12678 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                            12679 ; 13   |
                            12680 ; 14   |
                            12681 ; 15   |
                            12682 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                            12683 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                            12684 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                            12685 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                            12686 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                            12687 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                            12688 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                            12689 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                            12690 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                            12691 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                            12692 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                            12693 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                            12694 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                            12695 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                            12696 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                            12697 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                            12698 ; 32   |
                            12699 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                            12700 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                            12701 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                            12702 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                            12703 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                            12704 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                            12705 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                            12706 ; 40   |
                            12707 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BATT_CTRL_INPUT_OFFSET_BITPOS)        
                            12708 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BATT_CTRL_HALF_CMP_PWR_BITPOS)        
                            12709 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_CTRL_INPUT_DIV2_BITPOS) 
                            12710 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_BITPOS) 
                            12711 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS) 
                            12712 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CLK_DIV_BITPOS)        
                            12713 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_REF_VAL_BITPOS)        
                            12714 ; 48   |
                            12715 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                            12716 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                            12717 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                            12718 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                            12719 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                            12720 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                            12721 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                            12722 ; 56   |
                            12723 ; 57   |typedef union               
                            12724 ; 58   |{
                            12725 ; 59   |    struct {
                            12726 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                            12727 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                            12728 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                            12729 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                            12730 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                            12731 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                            12732 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                            12733 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                            12734 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                            12735 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                            12736 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH;
                            12737 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH;
                            12738 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDTH;
                            12739 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_WIDTH;
                            12740 ; 74   |    } B;
                            12741 ; 75   |   unsigned int I;
                            12742 ; 76   |        unsigned int U;
                            12743 ; 77   |} lradc_ctrl_type;
                            12744 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Battery LRADC Control Register */
                            12745 ; 79   |
                            12746 ; 80   |
                            12747 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                            12748 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                            12749 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                            12750 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                            12751 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                            12752 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                            12753 ; 87   |
                            12754 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                            12755 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                            12756 ; 90   |
                            12757 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                            12758 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                            12759 ; 93   |
                            12760 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK)     
                            12761 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK)     
                            12762 ; 96   |
                            12763 ; 97   |
                            12764 ; 98   |typedef union               
                            12765 ; 99   |{
                            12766 ; 100  |    struct {
                            12767 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                            12768 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                            12769 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                            12770 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                            12771 ; 105  |    } B;
                            12772 ; 106  |    unsigned int I;
                            12773 ; 107  |} lradc_thrsh_type;
                            12774 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* Battery LRADC Threshold Register */
                            12775 ; 109  |
                            12776 ; 110  |
                            12777 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            12778 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                            12779 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                            12780 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                            12781 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                            12782 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                            12783 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                            12784 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                            12785 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                            12786 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                            12787 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                            12788 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                            12789 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                            12790 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                            12791 ; 125  |
                            12792 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                            12793 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                            12794 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                            12795 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                            12796 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                            12797 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                            12798 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                            12799 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                            12800 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                            12801 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                            12802 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                            12803 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                            12804 ; 138  |
                            12805 ; 139  |
                            12806 ; 140  |
                            12807 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT1_BITPOS)
                            12808 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT0_BITPOS)
                            12809 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT1_BITPOS)
                            12810 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT0_BITPOS)
                            12811 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT1_BITPOS)
                            12812 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT0_BITPOS)
                            12813 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_RSVD0_BITPOS)
                            12814 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_RESULT_DATA_OUT_BITPOS)
                            12815 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_RSVD1_BITPOS)
                            12816 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT0_BITPOS)
                            12817 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT1_BITPOS)
                            12818 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_RSVD2_BITPOS)
                            12819 ; 153  |
                            12820 ; 154  |
                            12821 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                            12822 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                            12823 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                            12824 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                            12825 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                            12826 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                            12827 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                            12828 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                            12829 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                            12830 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                            12831 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                            12832 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                            12833 ; 167  |
                            12834 ; 168  |typedef union               
                            12835 ; 169  |{
                            12836 ; 170  |    struct {
                            12837 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                            12838 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                            12839 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                            12840 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                            12841 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                            12842 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                            12843 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                            12844 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                            12845 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                            12846 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_IRQ_EVENT0_WIDTH;
                            12847 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_IRQ_EVENT1_WIDTH;                      
                            12848 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESULT_RSVD2_WIDTH;
                            12849 ; 183  |    } B;
                            12850 ; 184  |    unsigned int I;
                            12851 ; 185  |} lradc_result_type;
                            12852 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /* Battery LRADC Result Register */
                            12853 ; 187  |
                            12854 ; 188  |
                            12855 ; 189  |
                            12856 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                            12857 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                            12858 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                            12859 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                            12860 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                            12861 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                            12862 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                            12863 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                            12864 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                            12865 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                            12866 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                            12867 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                            12868 ; 202  |
                            12869 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                            12870 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12871 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                            12872 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                            12873 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                            12874 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                            12875 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                            12876 ; 210  |
                            12877 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                            12878 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                            12879 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_DIV2_BITPOS) 
                            12880 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_CLEAR_BITPOS) 
                            12881 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_BITPOS) 
                            12882 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_CTRL_CLK_DIV_BITPOS)        
                            12883 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_CTRL_REF_VAL_BITPOS)        
                            12884 ; 218  |
                            12885 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)     
                            12886 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)     
                            12887 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                            12888 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                            12889 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                            12890 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                            12891 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                            12892 ; 226  |
                            12893 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* LRADC1 Control Register */
                            12894 ; 228  |
                            12895 ; 229  |
                            12896 ; 230  |
                            12897 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            12898 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                            12899 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                            12900 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                            12901 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                            12902 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                            12903 ; 237  |
                            12904 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                            12905 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                            12906 ; 240  |
                            12907 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                            12908 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                            12909 ; 243  |
                            12910 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK)     
                            12911 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK)     
                            12912 ; 246  |
                            12913 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /* LRADC1 Threshold Register */
                            12914 ; 248  |
                            12915 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                            12916 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                            12917 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                            12918 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                            12919 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                            12920 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                            12921 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                            12922 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                            12923 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                            12924 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                            12925 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                            12926 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                            12927 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                            12928 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                            12929 ; 263  |
                            12930 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                            12931 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                            12932 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                            12933 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                            12934 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                            12935 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                            12936 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                            12937 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                            12938 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                            12939 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                            12940 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                            12941 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                            12942 ; 276  |
                            12943 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT1_BITPOS)
                            12944 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT0_BITPOS)
                            12945 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT1_BITPOS)
                            12946 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT0_BITPOS)
                            12947 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT1_BITPOS)
                            12948 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT0_BITPOS)
                            12949 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD0_BITPOS)
                            12950 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC1_RESULT_DATA_OUT_BITPOS)
                            12951 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD1_BITPOS)
                            12952 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                            12953 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                            12954 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD2_BITPOS)
                            12955 ; 289  |
                            12956 ; 290  |
                            12957 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                            12958 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                            12959 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                            12960 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                            12961 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                            12962 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                            12963 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                            12964 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                            12965 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                            12966 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                            12967 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                            12968 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                            12969 ; 303  |
                            12970 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))    /* LRADC1 Result Register */
                            12971 ; 305  |
                            12972 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                            12973 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                            12974 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                            12975 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                            12976 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                            12977 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                            12978 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                            12979 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                            12980 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                            12981 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                            12982 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                            12983 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                            12984 ; 318  |
                            12985 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                            12986 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                            12987 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                            12988 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                            12989 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                            12990 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                            12991 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                            12992 ; 326  |
                            12993 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                            12994 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                            12995 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                            12996 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS) 
                            12997 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_PWD_BITPOS) 
                            12998 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                            12999 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                            13000 ; 334  |
                            13001 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK)     
                            13002 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK)     
                            13003 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK) 
                            13004 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                            13005 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                            13006 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)     
                            13007 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)     
                            13008 ; 342  |
                            13009 ; 343  |
                            13010 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* LRADC2_CTRL Control Register */
                            13011 ; 345  |
                            13012 ; 346  |
                            13013 ; 347  |
                            13014 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                            13015 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                            13016 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                            13017 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                            13018 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                            13019 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                            13020 ; 354  |
                            13021 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                            13022 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                            13023 ; 357  |
                            13024 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                            13025 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                            13026 ; 360  |
                            13027 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK)     
                            13028 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK)     
                            13029 ; 363  |
                            13030 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /* LRADC2 Threshold Register */
                            13031 ; 365  |
                            13032 ; 366  |
                            13033 ; 367  |
                            13034 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                            13035 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                            13036 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                            13037 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                            13038 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                            13039 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                            13040 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                            13041 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                            13042 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                            13043 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                            13044 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                            13045 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                            13046 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                            13047 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                            13048 ; 382  |
                            13049 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                            13050 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                            13051 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                            13052 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                            13053 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                            13054 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                            13055 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                            13056 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                            13057 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                            13058 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                            13059 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                            13060 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                            13061 ; 395  |
                            13062 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT1_BITPOS)
                            13063 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT0_BITPOS)
                            13064 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT1_BITPOS)
                            13065 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT0_BITPOS)
                            13066 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT1_BITPOS)
                            13067 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT0_BITPOS)
                            13068 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD0_BITPOS)
                            13069 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC2_RESULT_DATA_OUT_BITPOS)
                            13070 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD1_BITPOS)
                            13071 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                            13072 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                            13073 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD2_BITPOS)
                            13074 ; 408  |
                            13075 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                            13076 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                            13077 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                            13078 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                            13079 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                            13080 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                            13081 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                            13082 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                            13083 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                            13084 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                            13085 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                            13086 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                            13087 ; 421  |
                            13088 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))    /* LRADC2 Result Register */
                            13089 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13090 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13091 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13092 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13093 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            13094 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            13095 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            13096 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            13097 ; 431  |#define HW_LRADC_RES_REF_0                              80
                            13098 ; 432  |#define HW_LRADC_RES_REF_1                              77
                            13099 ; 433  |#define HW_LRADC_RES_REF_2                              100
                            13100 ; 434  |#define HW_LRADC_RES_REF_3                              129
                            13101 ; 435  |#define HW_LRADC_RES_REF_4                              160
                            13102 ; 436  |#define HW_LRADC_RES_REF_5                              154
                            13103 ; 437  |#define HW_LRADC_RES_REF_6                              200
                            13104 ; 438  |#define HW_LRADC_RES_REF_7                              258
                            13105 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK          
                            13106 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementation
                            13107 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                            13108 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                            13109 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                            13110 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                            13111 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                            13112 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                            13113 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                            13114 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                            13115 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                            13116 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                            13117 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                            13118 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                            13119 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                            13120 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                            13121 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13122 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                            13123 ; 457  |
                            13124 ; 458  |//Needed by button.asm
                            13125 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                            13126 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                            13127 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                            13128 ; 462  |
                            13129 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13130 ; 464  |
                            13131 ; 465  |#endif
                            13132 ; 466  |
                            13133 ; 467  |
                            13134 
                            13136 
                            13137 ; 27   |#include "regspwm.h"
                            13138 
                            13140 
                            13141 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            13142 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            13143 ; 3    |// Filename: regspwm.inc
                            13144 ; 4    |// Description: Register definitions for PWM interface
                            13145 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            13146 ; 6    |// The following naming conventions are followed in this file.
                            13147 ; 7    |// All registers are named using the format...
                            13148 ; 8    |//     HW_<module>_<regname>
                            13149 ; 9    |// where <module> is the module name which can be any of the following...
                            13150 ; 10   |//     USB20
                            13151 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            13152 ; 12   |// module name includes a number starting from 0 for the first instance of
                            13153 ; 13   |// that module)
                            13154 ; 14   |// <regname> is the specific register within that module
                            13155 ; 15   |// We also define the following...
                            13156 ; 16   |//     HW_<module>_<regname>_BITPOS
                            13157 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            13158 ; 18   |//     HW_<module>_<regname>_SETMASK
                            13159 ; 19   |// which does something else, and
                            13160 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            13161 ; 21   |// which does something else.
                            13162 ; 22   |// Other rules
                            13163 ; 23   |//     All caps
                            13164 ; 24   |//     Numeric identifiers start at 0
                            13165 ; 25   |#if !(defined(regspwminc))
                            13166 ; 26   |#define regspwminc 1
                            13167 ; 27   |
                            13168 ; 28   |#include "types.h"
                            13169 
                            13171 
                            13172 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            13173 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            13174 ; 3    |//
                            13175 ; 4    |// Filename: types.h
                            13176 ; 5    |// Description: Standard data types
                            13177 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            13178 ; 7    |
                            13179 ; 8    |#ifndef _TYPES_H
                            13180 ; 9    |#define _TYPES_H
                            13181 ; 10   |
                            13182 ; 11   |// TODO:  move this outta here!
                            13183 ; 12   |#if !defined(NOERROR)
                            13184 ; 13   |#define NOERROR 0
                            13185 ; 14   |#define SUCCESS 0
                            13186 ; 15   |#endif 
                            13187 ; 16   |#if !defined(SUCCESS)
                            13188 ; 17   |#define SUCCESS  0
                            13189 ; 18   |#endif
                            13190 ; 19   |#if !defined(ERROR)
                            13191 ; 20   |#define ERROR   -1
                            13192 ; 21   |#endif
                            13193 ; 22   |#if !defined(FALSE)
                            13194 ; 23   |#define FALSE 0
                            13195 ; 24   |#endif
                            13196 ; 25   |#if !defined(TRUE)
                            13197 ; 26   |#define TRUE  1
                            13198 ; 27   |#endif
                            13199 ; 28   |
                            13200 ; 29   |#if !defined(NULL)
                            13201 ; 30   |#define NULL 0
                            13202 ; 31   |#endif
                            13203 ; 32   |
                            13204 ; 33   |#define MAX_INT     0x7FFFFF
                            13205 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            13206 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            13207 ; 36   |#define MAX_ULONG   (-1) 
                            13208 ; 37   |
                            13209 ; 38   |#define WORD_SIZE   24              // word size in bits
                            13210 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            13211 ; 40   |
                            13212 ; 41   |
                            13213 ; 42   |#define BYTE    unsigned char       // btVarName
                            13214 ; 43   |#define CHAR    signed char         // cVarName
                            13215 ; 44   |#define USHORT  unsigned short      // usVarName
                            13216 ; 45   |#define SHORT   unsigned short      // sVarName
                            13217 ; 46   |#define WORD    unsigned int        // wVarName
                            13218 ; 47   |#define INT     signed int          // iVarName
                            13219 ; 48   |#define DWORD   unsigned long       // dwVarName
                            13220 ; 49   |#define LONG    signed long         // lVarName
                            13221 ; 50   |#define BOOL    unsigned int        // bVarName
                            13222 ; 51   |#define FRACT   _fract              // frVarName
                            13223 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            13224 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            13225 ; 54   |#define FLOAT   float               // fVarName
                            13226 ; 55   |#define DBL     double              // dVarName
                            13227 ; 56   |#define ENUM    enum                // eVarName
                            13228 ; 57   |#define CMX     _complex            // cmxVarName
                            13229 ; 58   |typedef WORD UCS3;                   // 
                            13230 ; 59   |
                            13231 ; 60   |#define UINT16  unsigned short
                            13232 ; 61   |#define UINT8   unsigned char   
                            13233 ; 62   |#define UINT32  unsigned long
                            13234 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            13235 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            13236 ; 65   |#define WCHAR   UINT16
                            13237 ; 66   |
                            13238 ; 67   |//UINT128 is 16 bytes or 6 words
                            13239 ; 68   |typedef struct UINT128_3500 {   
                            13240 ; 69   |    int val[6];     
                            13241 ; 70   |} UINT128_3500;
                            13242 ; 71   |
                            13243 ; 72   |#define UINT128   UINT128_3500
                            13244 ; 73   |
                            13245 ; 74   |// Little endian word packed byte strings:   
                            13246 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13247 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13248 ; 77   |// Little endian word packed byte strings:   
                            13249 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13250 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13251 ; 80   |
                            13252 ; 81   |// Declare Memory Spaces To Use When Coding
                            13253 ; 82   |// A. Sector Buffers
                            13254 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            13255 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            13256 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            13257 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            13258 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            13259 ; 88   |// B. Media DDI Memory
                            13260 ; 89   |#define MEDIA_DDI_MEM _Y
                            13261 ; 90   |
                            13262 ; 91   |
                            13263 ; 92   |
                            13264 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            13265 ; 94   |// Examples of circular pointers:
                            13266 ; 95   |//    INT CIRC cpiVarName
                            13267 ; 96   |//    DWORD CIRC cpdwVarName
                            13268 ; 97   |
                            13269 ; 98   |#define RETCODE INT                 // rcVarName
                            13270 ; 99   |
                            13271 ; 100  |// generic bitfield structure
                            13272 ; 101  |struct Bitfield {
                            13273 ; 102  |    unsigned int B0  :1;
                            13274 ; 103  |    unsigned int B1  :1;
                            13275 ; 104  |    unsigned int B2  :1;
                            13276 ; 105  |    unsigned int B3  :1;
                            13277 ; 106  |    unsigned int B4  :1;
                            13278 ; 107  |    unsigned int B5  :1;
                            13279 ; 108  |    unsigned int B6  :1;
                            13280 ; 109  |    unsigned int B7  :1;
                            13281 ; 110  |    unsigned int B8  :1;
                            13282 ; 111  |    unsigned int B9  :1;
                            13283 ; 112  |    unsigned int B10 :1;
                            13284 ; 113  |    unsigned int B11 :1;
                            13285 ; 114  |    unsigned int B12 :1;
                            13286 ; 115  |    unsigned int B13 :1;
                            13287 ; 116  |    unsigned int B14 :1;
                            13288 ; 117  |    unsigned int B15 :1;
                            13289 ; 118  |    unsigned int B16 :1;
                            13290 ; 119  |    unsigned int B17 :1;
                            13291 ; 120  |    unsigned int B18 :1;
                            13292 ; 121  |    unsigned int B19 :1;
                            13293 ; 122  |    unsigned int B20 :1;
                            13294 ; 123  |    unsigned int B21 :1;
                            13295 ; 124  |    unsigned int B22 :1;
                            13296 ; 125  |    unsigned int B23 :1;
                            13297 ; 126  |};
                            13298 ; 127  |
                            13299 ; 128  |union BitInt {
                            13300 ; 129  |        struct Bitfield B;
                            13301 ; 130  |        int        I;
                            13302 ; 131  |};
                            13303 ; 132  |
                            13304 ; 133  |#define MAX_MSG_LENGTH 10
                            13305 ; 134  |struct CMessage
                            13306 ; 135  |{
                            13307 ; 136  |        unsigned int m_uLength;
                            13308 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            13309 ; 138  |};
                            13310 ; 139  |
                            13311 ; 140  |typedef struct {
                            13312 ; 141  |    WORD m_wLength;
                            13313 ; 142  |    WORD m_wMessage;
                            13314 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            13315 ; 144  |} Message;
                            13316 ; 145  |
                            13317 ; 146  |struct MessageQueueDescriptor
                            13318 ; 147  |{
                            13319 ; 148  |        int *m_pBase;
                            13320 ; 149  |        int m_iModulo;
                            13321 ; 150  |        int m_iSize;
                            13322 ; 151  |        int *m_pHead;
                            13323 ; 152  |        int *m_pTail;
                            13324 ; 153  |};
                            13325 ; 154  |
                            13326 ; 155  |struct ModuleEntry
                            13327 ; 156  |{
                            13328 ; 157  |    int m_iSignaledEventMask;
                            13329 ; 158  |    int m_iWaitEventMask;
                            13330 ; 159  |    int m_iResourceOfCode;
                            13331 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            13332 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            13333 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            13334 ; 163  |    int m_uTimeOutHigh;
                            13335 ; 164  |    int m_uTimeOutLow;
                            13336 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            13337 ; 166  |};
                            13338 ; 167  |
                            13339 ; 168  |union WaitMask{
                            13340 ; 169  |    struct B{
                            13341 ; 170  |        unsigned int m_bNone     :1;
                            13342 ; 171  |        unsigned int m_bMessage  :1;
                            13343 ; 172  |        unsigned int m_bTimer    :1;
                            13344 ; 173  |        unsigned int m_bButton   :1;
                            13345 ; 174  |    } B;
                            13346 ; 175  |    int I;
                            13347 ; 176  |} ;
                            13348 ; 177  |
                            13349 ; 178  |
                            13350 ; 179  |struct Button {
                            13351 ; 180  |        WORD wButtonEvent;
                            13352 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            13353 ; 182  |};
                            13354 ; 183  |
                            13355 ; 184  |struct Message {
                            13356 ; 185  |        WORD wMsgLength;
                            13357 ; 186  |        WORD wMsgCommand;
                            13358 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            13359 ; 188  |};
                            13360 ; 189  |
                            13361 ; 190  |union EventTypes {
                            13362 ; 191  |        struct CMessage msg;
                            13363 ; 192  |        struct Button Button ;
                            13364 ; 193  |        struct Message Message;
                            13365 ; 194  |};
                            13366 ; 195  |
                            13367 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            13368 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            13369 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            13370 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            13371 ; 200  |
                            13372 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            13373 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            13374 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            13375 ; 204  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13376 ; 205  |#if DEBUG
                            13377 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            13378 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            13379 ; 208  |#else 
                            13380 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            13381 ; 210  |#define DebugBuildAssert(x)    
                            13382 ; 211  |#endif
                            13383 ; 212  |
                            13384 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            13385 ; 214  |//  #pragma asm
                            13386 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            13387 ; 216  |//  #pragma endasm
                            13388 ; 217  |
                            13389 ; 218  |
                            13390 ; 219  |#ifdef COLOR_262K
                            13391 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            13392 ; 221  |#elif defined(COLOR_65K)
                            13393 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            13394 ; 223  |#else
                            13395 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            13396 ; 225  |#endif
                            13397 ; 226  |    
                            13398 ; 227  |#endif // #ifndef _TYPES_H
                            13399 
                            13401 
                            13402 ; 29   |
                            13403 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13404 ; 31   |//   Pulse Width Modulator STMP Registers 
                            13405 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13406 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                            13407 ; 34   |
                            13408 ; 35   |
                            13409 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            13410 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                            13411 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                            13412 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                            13413 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                            13414 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                            13415 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                            13416 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                            13417 ; 44   |
                            13418 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                            13419 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                            13420 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                            13421 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                            13422 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                            13423 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
                            13424 ; 51   |
                            13425 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_BITPOS)
                            13426 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_BITPOS)
                            13427 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_BITPOS)
                            13428 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_BITPOS)
                            13429 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                            13430 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_BITPOS)
                            13431 ; 58   |
                            13432 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                            13433 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                            13434 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                            13435 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                            13436 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                            13437 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                            13438 ; 65   |
                            13439 ; 66   |typedef union               
                            13440 ; 67   |{
                            13441 ; 68   |    struct {
                            13442 ; 69   |        int PWM0_EN                    :1;
                            13443 ; 70   |        int PWM1_EN                    :1;
                            13444 ; 71   |        int PWM2_EN                    :1;
                            13445 ; 72   |        int PWM3_EN                    :1;
                            13446 ; 73   |        int RSVD0                      :4;
                            13447 ; 74   |        int CDIV                       :2;
                            13448 ; 75   |        int RSVD1                      :13;
                            13449 ; 76   |        int MSTR_EN                    :1;
                            13450 ; 77   |    } B;
                            13451 ; 78   |    int I;
                            13452 ; 79   |} pwmcsr_type;
                            13453 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control Status Register */
                            13454 ; 81   |
                            13455 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                            13456 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                            13457 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                            13458 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                            13459 ; 86   |
                            13460 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                            13461 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                            13462 ; 89   |
                            13463 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTIVE_BITPOS)
                            13464 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_INACTIVE_BITPOS)
                            13465 ; 92   |
                            13466 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                            13467 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                            13468 ; 95   |
                            13469 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                            13470 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                            13471 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                            13472 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                            13473 ; 100  |
                            13474 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                            13475 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                            13476 ; 103  |
                            13477 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTIVE_BITPOS)
                            13478 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_INACTIVE_BITPOS)
                            13479 ; 106  |
                            13480 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
                            13481 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                            13482 ; 109  |
                            13483 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                            13484 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                            13485 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                            13486 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                            13487 ; 114  |
                            13488 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                            13489 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                            13490 ; 117  |
                            13491 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTIVE_BITPOS)
                            13492 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_INACTIVE_BITPOS)
                            13493 ; 120  |
                            13494 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                            13495 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                            13496 ; 123  |
                            13497 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                            13498 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                            13499 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                            13500 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                            13501 ; 128  |
                            13502 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                            13503 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                            13504 ; 131  |
                            13505 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTIVE_BITPOS)
                            13506 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_INACTIVE_BITPOS)
                            13507 ; 134  |
                            13508 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                            13509 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                            13510 ; 137  |
                            13511 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                            13512 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                            13513 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                            13514 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                            13515 ; 142  |
                            13516 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                            13517 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                            13518 ; 145  |
                            13519 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTIVE_BITPOS)
                            13520 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_INACTIVE_BITPOS)
                            13521 ; 148  |
                            13522 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                            13523 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                            13524 ; 151  |
                            13525 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                            13526 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                            13527 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                            13528 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                            13529 ; 156  |
                            13530 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                            13531 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                            13532 ; 159  |
                            13533 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTIVE_BITPOS)
                            13534 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_INACTIVE_BITPOS)
                            13535 ; 162  |
                            13536 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                            13537 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                            13538 ; 165  |
                            13539 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                            13540 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                            13541 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
                            13542 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                            13543 ; 170  |
                            13544 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                            13545 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                            13546 ; 173  |
                            13547 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTIVE_BITPOS)
                            13548 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_INACTIVE_BITPOS)
                            13549 ; 176  |
                            13550 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                            13551 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                            13552 ; 179  |
                            13553 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                            13554 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                            13555 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                            13556 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                            13557 ; 184  |
                            13558 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                            13559 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                            13560 ; 187  |
                            13561 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTIVE_BITPOS)
                            13562 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_INACTIVE_BITPOS)
                            13563 ; 190  |
                            13564 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                            13565 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                            13566 ; 193  |
                            13567 ; 194  |typedef union               
                            13568 ; 195  |{
                            13569 ; 196  |    struct {
                            13570 ; 197  |       int ACTIVE                    :12;
                            13571 ; 198  |       int INACTIVE                  :12;
                            13572 ; 199  |    } B;
                            13573 ; 200  |    int I;
                            13574 ; 201  |} pwmchan_type;
                            13575 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Channel 0 A Register */
                            13576 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Channel 0 B Register */
                            13577 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Channel 1 A Register */
                            13578 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Channel 1 B Register */
                            13579 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Channel 2 A Register */
                            13580 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Channel 2 B Register */
                            13581 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Channel 3 A Register */
                            13582 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Channel 3 B Register */
                            13583 ; 210  |
                            13584 ; 211  |#endif
                            13585 ; 212  |
                            13586 ; 213  |
                            13587 ; 214  |
                            13588 ; 215  |
                            13589 
                            13591 
                            13592 ; 28   |#include "regsrevision.h"
                            13593 
                            13595 
                            13596 ; 1    |#if !(defined(__HW_REVR))
                            13597 ; 2    |#define __HW_REVR 1
                            13598 ; 3    |
                            13599 ; 4    |
                            13600 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                            13601 ; 6    |
                            13602 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                            13603 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                            13604 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                            13605 ; 10   |
                            13606 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                            13607 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                            13608 ; 13   |
                            13609 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS)
                            13610 ; 15   |
                            13611 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                            13612 ; 17   |
                            13613 ; 18   |
                            13614 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                            13615 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                            13616 ; 21   |//  June15 2004: C struct updated to be correct: 
                            13617 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits.
                            13618 ; 23   |typedef union               
                            13619 ; 24   |{
                            13620 ; 25   |    struct {
                            13621 ; 26   |        unsigned RMN    :5;     //Minor Revision
                            13622 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapping
                            13623 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                            13624 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                            13625 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                            13626 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                            13627 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                            13628 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                            13629 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13630 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                            13631 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                            13632 ; 37   |        unsigned RMJ    :16;    //Major Revision
                            13633 ; 38   |    } B;
                            13634 ; 39   |
                            13635 ; 40   |    int I;
                            13636 ; 41   |
                            13637 ; 42   |} revr_type;
                            13638 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                            13639 ; 44   |
                            13640 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                            13641 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                            13642 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                            13643 ; 48   |
                            13644 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                            13645 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE_B0_BITPOS)
                            13646 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                            13647 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                            13648 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                            13649 ; 54   |
                            13650 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                            13651 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                            13652 ; 57   |
                            13653 ; 58   |#endif //!@def(__HW_REVR)
                            13654 ; 59   |
                            13655 
                            13657 
                            13658 ; 29   |#include "regsrtc.h"
                            13659 
                            13661 
                            13662 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            13663 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            13664 ; 3    |// Filename: regsrtc.inc
                            13665 ; 4    |// Description: Register definitions for RTC interface
                            13666 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            13667 ; 6    |// The following naming conventions are followed in this file.
                            13668 ; 7    |// All registers are named using the format...
                            13669 ; 8    |//     HW_<module>_<regname>
                            13670 ; 9    |// where <module> is the module name which can be any of the following...
                            13671 ; 10   |//     USB20
                            13672 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            13673 ; 12   |// module name includes a number starting from 0 for the first instance of
                            13674 ; 13   |// that module)
                            13675 ; 14   |// <regname> is the specific register within that module
                            13676 ; 15   |// We also define the following...
                            13677 ; 16   |//     HW_<module>_<regname>_BITPOS
                            13678 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            13679 ; 18   |//     HW_<module>_<regname>_SETMASK
                            13680 ; 19   |// which does something else, and
                            13681 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            13682 ; 21   |// which does something else.
                            13683 ; 22   |// Other rules
                            13684 ; 23   |//     All caps
                            13685 ; 24   |//     Numeric identifiers start at 0
                            13686 ; 25   |#if !(defined(regsrtcinc))
                            13687 ; 26   |#define regsrtcinc 1
                            13688 ; 27   |
                            13689 ; 28   |#include "types.h"
                            13690 
                            13692 
                            13693 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            13694 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            13695 ; 3    |//
                            13696 ; 4    |// Filename: types.h
                            13697 ; 5    |// Description: Standard data types
                            13698 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            13699 ; 7    |
                            13700 ; 8    |#ifndef _TYPES_H
                            13701 ; 9    |#define _TYPES_H
                            13702 ; 10   |
                            13703 ; 11   |// TODO:  move this outta here!
                            13704 ; 12   |#if !defined(NOERROR)
                            13705 ; 13   |#define NOERROR 0
                            13706 ; 14   |#define SUCCESS 0
                            13707 ; 15   |#endif 
                            13708 ; 16   |#if !defined(SUCCESS)
                            13709 ; 17   |#define SUCCESS  0
                            13710 ; 18   |#endif
                            13711 ; 19   |#if !defined(ERROR)
                            13712 ; 20   |#define ERROR   -1
                            13713 ; 21   |#endif
                            13714 ; 22   |#if !defined(FALSE)
                            13715 ; 23   |#define FALSE 0
                            13716 ; 24   |#endif
                            13717 ; 25   |#if !defined(TRUE)
                            13718 ; 26   |#define TRUE  1
                            13719 ; 27   |#endif
                            13720 ; 28   |
                            13721 ; 29   |#if !defined(NULL)
                            13722 ; 30   |#define NULL 0
                            13723 ; 31   |#endif
                            13724 ; 32   |
                            13725 ; 33   |#define MAX_INT     0x7FFFFF
                            13726 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            13727 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            13728 ; 36   |#define MAX_ULONG   (-1) 
                            13729 ; 37   |
                            13730 ; 38   |#define WORD_SIZE   24              // word size in bits
                            13731 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            13732 ; 40   |
                            13733 ; 41   |
                            13734 ; 42   |#define BYTE    unsigned char       // btVarName
                            13735 ; 43   |#define CHAR    signed char         // cVarName
                            13736 ; 44   |#define USHORT  unsigned short      // usVarName
                            13737 ; 45   |#define SHORT   unsigned short      // sVarName
                            13738 ; 46   |#define WORD    unsigned int        // wVarName
                            13739 ; 47   |#define INT     signed int          // iVarName
                            13740 ; 48   |#define DWORD   unsigned long       // dwVarName
                            13741 ; 49   |#define LONG    signed long         // lVarName
                            13742 ; 50   |#define BOOL    unsigned int        // bVarName
                            13743 ; 51   |#define FRACT   _fract              // frVarName
                            13744 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            13745 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            13746 ; 54   |#define FLOAT   float               // fVarName
                            13747 ; 55   |#define DBL     double              // dVarName
                            13748 ; 56   |#define ENUM    enum                // eVarName
                            13749 ; 57   |#define CMX     _complex            // cmxVarName
                            13750 ; 58   |typedef WORD UCS3;                   // 
                            13751 ; 59   |
                            13752 ; 60   |#define UINT16  unsigned short
                            13753 ; 61   |#define UINT8   unsigned char   
                            13754 ; 62   |#define UINT32  unsigned long
                            13755 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            13756 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            13757 ; 65   |#define WCHAR   UINT16
                            13758 ; 66   |
                            13759 ; 67   |//UINT128 is 16 bytes or 6 words
                            13760 ; 68   |typedef struct UINT128_3500 {   
                            13761 ; 69   |    int val[6];     
                            13762 ; 70   |} UINT128_3500;
                            13763 ; 71   |
                            13764 ; 72   |#define UINT128   UINT128_3500
                            13765 ; 73   |
                            13766 ; 74   |// Little endian word packed byte strings:   
                            13767 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13768 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13769 ; 77   |// Little endian word packed byte strings:   
                            13770 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13771 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13772 ; 80   |
                            13773 ; 81   |// Declare Memory Spaces To Use When Coding
                            13774 ; 82   |// A. Sector Buffers
                            13775 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            13776 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            13777 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            13778 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            13779 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            13780 ; 88   |// B. Media DDI Memory
                            13781 ; 89   |#define MEDIA_DDI_MEM _Y
                            13782 ; 90   |
                            13783 ; 91   |
                            13784 ; 92   |
                            13785 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            13786 ; 94   |// Examples of circular pointers:
                            13787 ; 95   |//    INT CIRC cpiVarName
                            13788 ; 96   |//    DWORD CIRC cpdwVarName
                            13789 ; 97   |
                            13790 ; 98   |#define RETCODE INT                 // rcVarName
                            13791 ; 99   |
                            13792 ; 100  |// generic bitfield structure
                            13793 ; 101  |struct Bitfield {
                            13794 ; 102  |    unsigned int B0  :1;
                            13795 ; 103  |    unsigned int B1  :1;
                            13796 ; 104  |    unsigned int B2  :1;
                            13797 ; 105  |    unsigned int B3  :1;
                            13798 ; 106  |    unsigned int B4  :1;
                            13799 ; 107  |    unsigned int B5  :1;
                            13800 ; 108  |    unsigned int B6  :1;
                            13801 ; 109  |    unsigned int B7  :1;
                            13802 ; 110  |    unsigned int B8  :1;
                            13803 ; 111  |    unsigned int B9  :1;
                            13804 ; 112  |    unsigned int B10 :1;
                            13805 ; 113  |    unsigned int B11 :1;
                            13806 ; 114  |    unsigned int B12 :1;
                            13807 ; 115  |    unsigned int B13 :1;
                            13808 ; 116  |    unsigned int B14 :1;
                            13809 ; 117  |    unsigned int B15 :1;
                            13810 ; 118  |    unsigned int B16 :1;
                            13811 ; 119  |    unsigned int B17 :1;
                            13812 ; 120  |    unsigned int B18 :1;
                            13813 ; 121  |    unsigned int B19 :1;
                            13814 ; 122  |    unsigned int B20 :1;
                            13815 ; 123  |    unsigned int B21 :1;
                            13816 ; 124  |    unsigned int B22 :1;
                            13817 ; 125  |    unsigned int B23 :1;
                            13818 ; 126  |};
                            13819 ; 127  |
                            13820 ; 128  |union BitInt {
                            13821 ; 129  |        struct Bitfield B;
                            13822 ; 130  |        int        I;
                            13823 ; 131  |};
                            13824 ; 132  |
                            13825 ; 133  |#define MAX_MSG_LENGTH 10
                            13826 ; 134  |struct CMessage
                            13827 ; 135  |{
                            13828 ; 136  |        unsigned int m_uLength;
                            13829 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            13830 ; 138  |};
                            13831 ; 139  |
                            13832 ; 140  |typedef struct {
                            13833 ; 141  |    WORD m_wLength;
                            13834 ; 142  |    WORD m_wMessage;
                            13835 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            13836 ; 144  |} Message;
                            13837 ; 145  |
                            13838 ; 146  |struct MessageQueueDescriptor
                            13839 ; 147  |{
                            13840 ; 148  |        int *m_pBase;
                            13841 ; 149  |        int m_iModulo;
                            13842 ; 150  |        int m_iSize;
                            13843 ; 151  |        int *m_pHead;
                            13844 ; 152  |        int *m_pTail;
                            13845 ; 153  |};
                            13846 ; 154  |
                            13847 ; 155  |struct ModuleEntry
                            13848 ; 156  |{
                            13849 ; 157  |    int m_iSignaledEventMask;
                            13850 ; 158  |    int m_iWaitEventMask;
                            13851 ; 159  |    int m_iResourceOfCode;
                            13852 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            13853 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            13854 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            13855 ; 163  |    int m_uTimeOutHigh;
                            13856 ; 164  |    int m_uTimeOutLow;
                            13857 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            13858 ; 166  |};
                            13859 ; 167  |
                            13860 ; 168  |union WaitMask{
                            13861 ; 169  |    struct B{
                            13862 ; 170  |        unsigned int m_bNone     :1;
                            13863 ; 171  |        unsigned int m_bMessage  :1;
                            13864 ; 172  |        unsigned int m_bTimer    :1;
                            13865 ; 173  |        unsigned int m_bButton   :1;
                            13866 ; 174  |    } B;
                            13867 ; 175  |    int I;
                            13868 ; 176  |} ;
                            13869 ; 177  |
                            13870 ; 178  |
                            13871 ; 179  |struct Button {
                            13872 ; 180  |        WORD wButtonEvent;
                            13873 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            13874 ; 182  |};
                            13875 ; 183  |
                            13876 ; 184  |struct Message {
                            13877 ; 185  |        WORD wMsgLength;
                            13878 ; 186  |        WORD wMsgCommand;
                            13879 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            13880 ; 188  |};
                            13881 ; 189  |
                            13882 ; 190  |union EventTypes {
                            13883 ; 191  |        struct CMessage msg;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13884 ; 192  |        struct Button Button ;
                            13885 ; 193  |        struct Message Message;
                            13886 ; 194  |};
                            13887 ; 195  |
                            13888 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            13889 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            13890 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            13891 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            13892 ; 200  |
                            13893 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            13894 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            13895 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            13896 ; 204  |
                            13897 ; 205  |#if DEBUG
                            13898 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            13899 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            13900 ; 208  |#else 
                            13901 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            13902 ; 210  |#define DebugBuildAssert(x)    
                            13903 ; 211  |#endif
                            13904 ; 212  |
                            13905 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            13906 ; 214  |//  #pragma asm
                            13907 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            13908 ; 216  |//  #pragma endasm
                            13909 ; 217  |
                            13910 ; 218  |
                            13911 ; 219  |#ifdef COLOR_262K
                            13912 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            13913 ; 221  |#elif defined(COLOR_65K)
                            13914 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            13915 ; 223  |#else
                            13916 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            13917 ; 225  |#endif
                            13918 ; 226  |    
                            13919 ; 227  |#endif // #ifndef _TYPES_H
                            13920 
                            13922 
                            13923 ; 29   |
                            13924 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13925 ; 31   |
                            13926 ; 32   |//   RTC STMP Registers 
                            13927 ; 33   |//   Edited 2/26/2002 J. Ferrara
                            13928 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13929 ; 35   |
                            13930 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                            13931 ; 37   |
                            13932 ; 38   |
                            13933 ; 39   |
                            13934 ; 40   |
                            13935 ; 41   |
                            13936 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                            13937 ; 43   |
                            13938 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                            13939 ; 45   |
                            13940 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                            13941 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                            13942 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                            13943 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                            13944 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                            13945 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                            13946 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                            13947 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                            13948 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                            13949 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                            13950 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                            13951 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                            13952 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                            13953 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                            13954 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                            13955 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                                           
                            13956 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                            13957 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                            13958 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                            13959 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                            13960 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                            13961 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                            13962 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                            13963 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                            13964 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                            13965 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                            13966 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                            13967 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                            13968 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                            13969 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                            13970 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                            13971 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                            13972 ; 78   |
                            13973 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMINT_BITPOS) 
                            13974 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_ALARMINTEN_BITPOS) 
                            13975 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WATCHDOGEN_BITPOS) 
                            13976 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS) 
                            13977 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STALEREGS_BITPOS) 
                            13978 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS) 
                            13979 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_BITPOS) 
                            13980 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                            13981 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                            13982 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                            13983 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                            13984 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                            13985 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS) 
                            13986 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS) 
                            13987 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS) 
                            13988 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BITPOS) 
                            13989 ; 95   |
                            13990 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                            13991 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                            13992 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                            13993 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                            13994 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                            13995 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                            13996 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                            13997 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                            13998 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                            13999 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                            14000 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                            14001 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                            14002 ; 108  |
                            14003 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                            14004 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                            14005 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                            14006 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                            14007 ; 113  |
                            14008 ; 114  |
                            14009 ; 115  |typedef union               
                            14010 ; 116  |{
                            14011 ; 117  |    struct {
                            14012 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                            14013 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                            14014 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                            14015 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                            14016 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                            14017 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                            14018 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                            14019 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                            14020 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                            14021 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                            14022 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                            14023 ; 129  |    } B;
                            14024 ; 130  |    int I;
                            14025 ; 131  |    unsigned int U;
                            14026 ; 132  |} rtc_csr_type;
                            14027 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Control / Status Register */
                            14028 ; 134  |
                            14029 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            14030 ; 136  |
                            14031 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                            14032 ; 138  |
                            14033 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                            14034 ; 140  |
                            14035 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                            14036 ; 142  |
                            14037 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<<HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                            14038 ; 144  |
                            14039 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                            14040 ; 146  |
                            14041 ; 147  |typedef union               
                            14042 ; 148  |{
                            14043 ; 149  |    struct {
                            14044 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                            14045 ; 151  |    } B;
                            14046 ; 152  |    int I;
                            14047 ; 153  |    unsigned int U;
                            14048 ; 154  |} rtc_mseconds0_type;
                            14049 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    /* RTC MSECONDS Lower Word Register */
                            14050 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                            14051 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                            14052 ; 158  |
                            14053 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                            14054 ; 160  |
                            14055 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                            14056 ; 162  |
                            14057 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                            14058 ; 164  |
                            14059 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1)<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                            14060 ; 166  |
                            14061 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK)
                            14062 ; 168  |
                            14063 ; 169  |typedef union               
                            14064 ; 170  |{
                            14065 ; 171  |    struct {
                            14066 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                            14067 ; 173  |    } B;
                            14068 ; 174  |    int I;
                            14069 ; 175  |    unsigned int U;
                            14070 ; 176  |} rtc_mseconds1_type;
                            14071 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    /* RTC MSECONDS Upper Word Register */
                            14072 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                            14073 ; 179  |
                            14074 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                            14075 ; 181  |#define HW_RTC_UP_OFFSET 2
                            14076 ; 182  |
                            14077 ; 183  |
                            14078 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                            14079 ; 185  |
                            14080 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                            14081 ; 187  |
                            14082 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                            14083 ; 189  |
                            14084 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                            14085 ; 191  |
                            14086 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                            14087 ; 193  |
                            14088 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                            14089 ; 195  |
                            14090 ; 196  |typedef union               
                            14091 ; 197  |{
                            14092 ; 198  |    struct {
                            14093 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                            14094 ; 200  |    } B;
                            14095 ; 201  |    int I;
                            14096 ; 202  |    unsigned int U;
                            14097 ; 203  |} rtc_watchdog_type;
                            14098 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* RTC Watchdog Timeout Register */
                            14099 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            14100 ; 206  |
                            14101 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                            14102 ; 208  |
                            14103 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                            14104 ; 210  |
                            14105 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                            14106 ; 212  |
                            14107 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALARM0_ALARMLOW_BITPOS) 
                            14108 ; 214  |
                            14109 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                            14110 ; 216  |
                            14111 ; 217  |typedef union               
                            14112 ; 218  |{
                            14113 ; 219  |    struct {
                            14114 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                            14115 ; 221  |    } B;
                            14116 ; 222  |    int I;
                            14117 ; 223  |    unsigned int U;
                            14118 ; 224  |} rtc_alarm0_type;
                            14119 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC ALARM Lower Word Register */
                            14120 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                            14121 ; 227  |
                            14122 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                            14123 ; 229  |
                            14124 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                            14125 ; 231  |
                            14126 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                            14127 ; 233  |
                            14128 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_ALARM1_ALARMHIGH_BITPOS) 
                            14129 ; 235  |
                            14130 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                            14131 ; 237  |
                            14132 ; 238  |typedef union               
                            14133 ; 239  |{
                            14134 ; 240  |    struct {
                            14135 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14136 ; 242  |    } B;
                            14137 ; 243  |    int I;
                            14138 ; 244  |    unsigned int U;
                            14139 ; 245  |} rtc_alarm1_type;
                            14140 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC ALARM Upper Word Register */
                            14141 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            14142 ; 248  |
                            14143 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                            14144 ; 250  |
                            14145 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                            14146 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                            14147 ; 253  |
                            14148 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                            14149 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                            14150 ; 256  |
                            14151 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                            14152 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS) 
                            14153 ; 259  |
                            14154 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                            14155 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                            14156 ; 262  |
                            14157 ; 263  |typedef union               
                            14158 ; 264  |{
                            14159 ; 265  |    struct {
                            14160 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                            14161 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                            14162 ; 268  |    } B;
                            14163 ; 269  |    int I;
                            14164 ; 270  |    unsigned int U;
                            14165 ; 271  |} rtc_xtaldivide_type;
                            14166 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* RTC Xtal-clock Pre-Divider Word Register */
                            14167 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                            14168 ; 274  |
                            14169 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                            14170 ; 276  |
                            14171 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                            14172 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                            14173 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                            14174 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                            14175 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                            14176 ; 282  |
                            14177 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                            14178 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                            14179 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                            14180 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                            14181 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                            14182 ; 288  |
                            14183 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMEN_BITPOS) 
                            14184 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                            14185 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                            14186 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<<HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                            14187 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT0_RSVD0_BITPOS) 
                            14188 ; 294  |
                            14189 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                            14190 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK)
                            14191 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                            14192 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                            14193 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                            14194 ; 300  |
                            14195 ; 301  |typedef union               
                            14196 ; 302  |{
                            14197 ; 303  |   struct {
                            14198 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                            14199 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                            14200 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                            14201 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                            14202 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                            14203 ; 309  |   } B;
                            14204 ; 310  |    int I;
                            14205 ; 311  |    unsigned int U;
                            14206 ; 312  |} rtc_PERSISTENT0_type;
                            14207 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /* RTC PERSISTENT Register0 */
                            14208 ; 314  |
                            14209 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                            14210 ; 316  |
                            14211 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                            14212 ; 318  |
                            14213 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                            14214 ; 320  |
                            14215 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                            14216 ; 322  |
                            14217 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT1_RSVD0_BITPOS) 
                            14218 ; 324  |
                            14219 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                            14220 ; 326  |
                            14221 ; 327  |
                            14222 ; 328  |typedef union               
                            14223 ; 329  |{
                            14224 ; 330  |    struct {
                            14225 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                            14226 ; 332  |    } B;
                            14227 ; 333  |    int I;
                            14228 ; 334  |    unsigned int U;
                            14229 ; 335  |} rtc_PERSISTENT1_type;
                            14230 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /* RTC PERSISTENT Register1 */
                            14231 ; 337  |
                            14232 ; 338  |
                            14233 ; 339  |#endif
                            14234 ; 340  |
                            14235 ; 341  |
                            14236 ; 342  |
                            14237 ; 343  |
                            14238 ; 344  |
                            14239 ; 345  |
                            14240 ; 346  |
                            14241 ; 347  |
                            14242 ; 348  |
                            14243 ; 349  |
                            14244 ; 350  |
                            14245 ; 351  |
                            14246 ; 352  |
                            14247 ; 353  |
                            14248 
                            14250 
                            14251 ; 30   |#include "regsspare.h"
                            14252 
                            14254 
                            14255 ; 1    |#if !(defined(RESGSSPARE_INC))
                            14256 ; 2    |#define RESGSSPARE_INC 1
                            14257 ; 3    |
                            14258 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                            14259 ; 5    |
                            14260 ; 6    |
                            14261 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                            14262 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                            14263 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                            14264 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                            14265 ; 11   |
                            14266 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                            14267 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                            14268 ; 14   |
                            14269 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                            14270 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                            14271 ; 17   |
                            14272 ; 18   |
                            14273 ; 19   |
                            14274 ; 20   |typedef union               
                            14275 ; 21   |{
                            14276 ; 22   |    struct {
                            14277 ; 23   |        int      I2SS       :1;     
                            14278 ; 24   |        int      USBSELECT  :1;     
                            14279 ; 25   |        unsigned            :6;
                            14280 ; 26   |        int      USBPLUGIN  :1;     
                            14281 ; 27   |        int      PSWITCH    :1;     
                            14282 ; 28   |    } B;
                            14283 ; 29   |
                            14284 ; 30   |    int I;
                            14285 ; 31   |
                            14286 ; 32   |} spare_type;
                            14287 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                            14288 ; 34   |
                            14289 ; 35   |
                            14290 ; 36   |
                            14291 ; 37   |#endif
                            14292 
                            14294 
                            14295 ; 31   |#include "regsspi.h"
                            14296 
                            14298 
                            14299 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14300 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                            14301 ; 3    |//;; Filename    : regsspi.inc
                            14302 ; 4    |//;; Description : Register definitions for SPI interface
                            14303 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14304 ; 6    |
                            14305 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                            14306 ; 8    |// The following naming conventions are followed in this file.
                            14307 ; 9    |// All registers are named using the format...
                            14308 ; 10   |//     HW_<module>_<regname>
                            14309 ; 11   |// where <module> is the module name which can be any of the following...
                            14310 ; 12   |//     USB20
                            14311 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            14312 ; 14   |// module name includes a number starting from 0 for the first instance of
                            14313 ; 15   |// that module)
                            14314 ; 16   |// <regname> is the specific register within that module
                            14315 ; 17   |// We also define the following...
                            14316 ; 18   |//     HW_<module>_<regname>_BITPOS
                            14317 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            14318 ; 20   |//     HW_<module>_<regname>_SETMASK
                            14319 ; 21   |// which does something else, and
                            14320 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            14321 ; 23   |// which does something else.
                            14322 ; 24   |// Other rules
                            14323 ; 25   |//     All caps
                            14324 ; 26   |//     Numeric identifiers start at 0
                            14325 ; 27   |#if !(defined(regsspiinc))
                            14326 ; 28   |#define regsspiinc 1
                            14327 ; 29   |
                            14328 ; 30   |#include "types.h"
                            14329 
                            14331 
                            14332 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            14333 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            14334 ; 3    |//
                            14335 ; 4    |// Filename: types.h
                            14336 ; 5    |// Description: Standard data types
                            14337 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14338 ; 7    |
                            14339 ; 8    |#ifndef _TYPES_H
                            14340 ; 9    |#define _TYPES_H
                            14341 ; 10   |
                            14342 ; 11   |// TODO:  move this outta here!
                            14343 ; 12   |#if !defined(NOERROR)
                            14344 ; 13   |#define NOERROR 0
                            14345 ; 14   |#define SUCCESS 0
                            14346 ; 15   |#endif 
                            14347 ; 16   |#if !defined(SUCCESS)
                            14348 ; 17   |#define SUCCESS  0
                            14349 ; 18   |#endif
                            14350 ; 19   |#if !defined(ERROR)
                            14351 ; 20   |#define ERROR   -1
                            14352 ; 21   |#endif
                            14353 ; 22   |#if !defined(FALSE)
                            14354 ; 23   |#define FALSE 0
                            14355 ; 24   |#endif
                            14356 ; 25   |#if !defined(TRUE)
                            14357 ; 26   |#define TRUE  1
                            14358 ; 27   |#endif
                            14359 ; 28   |
                            14360 ; 29   |#if !defined(NULL)
                            14361 ; 30   |#define NULL 0
                            14362 ; 31   |#endif
                            14363 ; 32   |
                            14364 ; 33   |#define MAX_INT     0x7FFFFF
                            14365 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            14366 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            14367 ; 36   |#define MAX_ULONG   (-1) 
                            14368 ; 37   |
                            14369 ; 38   |#define WORD_SIZE   24              // word size in bits
                            14370 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            14371 ; 40   |
                            14372 ; 41   |
                            14373 ; 42   |#define BYTE    unsigned char       // btVarName
                            14374 ; 43   |#define CHAR    signed char         // cVarName
                            14375 ; 44   |#define USHORT  unsigned short      // usVarName
                            14376 ; 45   |#define SHORT   unsigned short      // sVarName
                            14377 ; 46   |#define WORD    unsigned int        // wVarName
                            14378 ; 47   |#define INT     signed int          // iVarName
                            14379 ; 48   |#define DWORD   unsigned long       // dwVarName
                            14380 ; 49   |#define LONG    signed long         // lVarName
                            14381 ; 50   |#define BOOL    unsigned int        // bVarName
                            14382 ; 51   |#define FRACT   _fract              // frVarName
                            14383 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            14384 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            14385 ; 54   |#define FLOAT   float               // fVarName
                            14386 ; 55   |#define DBL     double              // dVarName
                            14387 ; 56   |#define ENUM    enum                // eVarName
                            14388 ; 57   |#define CMX     _complex            // cmxVarName
                            14389 ; 58   |typedef WORD UCS3;                   // 
                            14390 ; 59   |
                            14391 ; 60   |#define UINT16  unsigned short
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14392 ; 61   |#define UINT8   unsigned char   
                            14393 ; 62   |#define UINT32  unsigned long
                            14394 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            14395 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            14396 ; 65   |#define WCHAR   UINT16
                            14397 ; 66   |
                            14398 ; 67   |//UINT128 is 16 bytes or 6 words
                            14399 ; 68   |typedef struct UINT128_3500 {   
                            14400 ; 69   |    int val[6];     
                            14401 ; 70   |} UINT128_3500;
                            14402 ; 71   |
                            14403 ; 72   |#define UINT128   UINT128_3500
                            14404 ; 73   |
                            14405 ; 74   |// Little endian word packed byte strings:   
                            14406 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14407 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14408 ; 77   |// Little endian word packed byte strings:   
                            14409 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14410 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14411 ; 80   |
                            14412 ; 81   |// Declare Memory Spaces To Use When Coding
                            14413 ; 82   |// A. Sector Buffers
                            14414 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            14415 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            14416 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            14417 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            14418 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            14419 ; 88   |// B. Media DDI Memory
                            14420 ; 89   |#define MEDIA_DDI_MEM _Y
                            14421 ; 90   |
                            14422 ; 91   |
                            14423 ; 92   |
                            14424 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            14425 ; 94   |// Examples of circular pointers:
                            14426 ; 95   |//    INT CIRC cpiVarName
                            14427 ; 96   |//    DWORD CIRC cpdwVarName
                            14428 ; 97   |
                            14429 ; 98   |#define RETCODE INT                 // rcVarName
                            14430 ; 99   |
                            14431 ; 100  |// generic bitfield structure
                            14432 ; 101  |struct Bitfield {
                            14433 ; 102  |    unsigned int B0  :1;
                            14434 ; 103  |    unsigned int B1  :1;
                            14435 ; 104  |    unsigned int B2  :1;
                            14436 ; 105  |    unsigned int B3  :1;
                            14437 ; 106  |    unsigned int B4  :1;
                            14438 ; 107  |    unsigned int B5  :1;
                            14439 ; 108  |    unsigned int B6  :1;
                            14440 ; 109  |    unsigned int B7  :1;
                            14441 ; 110  |    unsigned int B8  :1;
                            14442 ; 111  |    unsigned int B9  :1;
                            14443 ; 112  |    unsigned int B10 :1;
                            14444 ; 113  |    unsigned int B11 :1;
                            14445 ; 114  |    unsigned int B12 :1;
                            14446 ; 115  |    unsigned int B13 :1;
                            14447 ; 116  |    unsigned int B14 :1;
                            14448 ; 117  |    unsigned int B15 :1;
                            14449 ; 118  |    unsigned int B16 :1;
                            14450 ; 119  |    unsigned int B17 :1;
                            14451 ; 120  |    unsigned int B18 :1;
                            14452 ; 121  |    unsigned int B19 :1;
                            14453 ; 122  |    unsigned int B20 :1;
                            14454 ; 123  |    unsigned int B21 :1;
                            14455 ; 124  |    unsigned int B22 :1;
                            14456 ; 125  |    unsigned int B23 :1;
                            14457 ; 126  |};
                            14458 ; 127  |
                            14459 ; 128  |union BitInt {
                            14460 ; 129  |        struct Bitfield B;
                            14461 ; 130  |        int        I;
                            14462 ; 131  |};
                            14463 ; 132  |
                            14464 ; 133  |#define MAX_MSG_LENGTH 10
                            14465 ; 134  |struct CMessage
                            14466 ; 135  |{
                            14467 ; 136  |        unsigned int m_uLength;
                            14468 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            14469 ; 138  |};
                            14470 ; 139  |
                            14471 ; 140  |typedef struct {
                            14472 ; 141  |    WORD m_wLength;
                            14473 ; 142  |    WORD m_wMessage;
                            14474 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            14475 ; 144  |} Message;
                            14476 ; 145  |
                            14477 ; 146  |struct MessageQueueDescriptor
                            14478 ; 147  |{
                            14479 ; 148  |        int *m_pBase;
                            14480 ; 149  |        int m_iModulo;
                            14481 ; 150  |        int m_iSize;
                            14482 ; 151  |        int *m_pHead;
                            14483 ; 152  |        int *m_pTail;
                            14484 ; 153  |};
                            14485 ; 154  |
                            14486 ; 155  |struct ModuleEntry
                            14487 ; 156  |{
                            14488 ; 157  |    int m_iSignaledEventMask;
                            14489 ; 158  |    int m_iWaitEventMask;
                            14490 ; 159  |    int m_iResourceOfCode;
                            14491 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            14492 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            14493 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            14494 ; 163  |    int m_uTimeOutHigh;
                            14495 ; 164  |    int m_uTimeOutLow;
                            14496 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            14497 ; 166  |};
                            14498 ; 167  |
                            14499 ; 168  |union WaitMask{
                            14500 ; 169  |    struct B{
                            14501 ; 170  |        unsigned int m_bNone     :1;
                            14502 ; 171  |        unsigned int m_bMessage  :1;
                            14503 ; 172  |        unsigned int m_bTimer    :1;
                            14504 ; 173  |        unsigned int m_bButton   :1;
                            14505 ; 174  |    } B;
                            14506 ; 175  |    int I;
                            14507 ; 176  |} ;
                            14508 ; 177  |
                            14509 ; 178  |
                            14510 ; 179  |struct Button {
                            14511 ; 180  |        WORD wButtonEvent;
                            14512 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            14513 ; 182  |};
                            14514 ; 183  |
                            14515 ; 184  |struct Message {
                            14516 ; 185  |        WORD wMsgLength;
                            14517 ; 186  |        WORD wMsgCommand;
                            14518 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            14519 ; 188  |};
                            14520 ; 189  |
                            14521 ; 190  |union EventTypes {
                            14522 ; 191  |        struct CMessage msg;
                            14523 ; 192  |        struct Button Button ;
                            14524 ; 193  |        struct Message Message;
                            14525 ; 194  |};
                            14526 ; 195  |
                            14527 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            14528 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            14529 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            14530 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            14531 ; 200  |
                            14532 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            14533 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            14534 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            14535 ; 204  |
                            14536 ; 205  |#if DEBUG
                            14537 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            14538 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            14539 ; 208  |#else 
                            14540 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            14541 ; 210  |#define DebugBuildAssert(x)    
                            14542 ; 211  |#endif
                            14543 ; 212  |
                            14544 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            14545 ; 214  |//  #pragma asm
                            14546 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            14547 ; 216  |//  #pragma endasm
                            14548 ; 217  |
                            14549 ; 218  |
                            14550 ; 219  |#ifdef COLOR_262K
                            14551 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            14552 ; 221  |#elif defined(COLOR_65K)
                            14553 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            14554 ; 223  |#else
                            14555 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            14556 ; 225  |#endif
                            14557 ; 226  |    
                            14558 ; 227  |#endif // #ifndef _TYPES_H
                            14559 
                            14561 
                            14562 ; 31   |
                            14563 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14564 ; 33   |
                            14565 ; 34   |//   SPI STMP3500 Registers 
                            14566 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                            14567 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14568 ; 37   |
                            14569 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                            14570 ; 39   |
                            14571 ; 40   |
                            14572 ; 41   |
                            14573 ; 42   |// /////////////////////////////////////////////
                            14574 ; 43   |// //  SPI Control/Status Register Bit Definitions
                            14575 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                            14576 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                            14577 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                            14578 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                            14579 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                            14580 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                            14581 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                            14582 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                            14583 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                            14584 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                            14585 ; 54   |
                            14586 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                            14587 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                            14588 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                            14589 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                            14590 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                            14591 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                            14592 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                            14593 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                            14594 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
                            14595 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                            14596 ; 65   |
                            14597 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                            14598 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                            14599 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                            14600 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                            14601 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                            14602 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                            14603 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                            14604 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                            14605 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                            14606 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                            14607 ; 76   |
                            14608 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                            14609 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                            14610 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                            14611 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                            14612 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                            14613 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                            14614 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                            14615 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                            14616 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                            14617 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                            14618 ; 87   |
                            14619 ; 88   |typedef union               
                            14620 ; 89   |{
                            14621 ; 90   |    struct {
                            14622 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                            14623 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                            14624 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                            14625 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                            14626 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                            14627 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                            14628 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                            14629 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                            14630 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                            14631 ; 100  |    } B;
                            14632 ; 101  |
                            14633 ; 102  |    int I;
                            14634 ; 103  |    unsigned int U;
                            14635 ; 104  |} spcsr_type;
                            14636 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / Status Register */
                            14637 ; 106  |
                            14638 ; 107  |// /////////////////////////////////////////////
                            14639 ; 108  |// //  SPI Data Register Bit Definitions
                            14640 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                            14641 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                            14642 ; 111  |
                            14643 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14644 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                            14645 ; 114  |
                            14646 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                            14647 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                            14648 ; 117  |
                            14649 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                            14650 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                            14651 ; 120  |
                            14652 ; 121  |typedef union               
                            14653 ; 122  |{
                            14654 ; 123  |    struct {
                            14655 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                            14656 ; 125  |    } B;
                            14657 ; 126  |
                            14658 ; 127  |    int I;
                            14659 ; 128  |    unsigned int U;
                            14660 ; 129  |} spdr_type;
                            14661 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Register */
                            14662 ; 131  |
                            14663 ; 132  |
                            14664 ; 133  |#endif
                            14665 ; 134  |
                            14666 ; 135  |
                            14667 
                            14669 
                            14670 ; 32   |#include "regsswizzle.h"
                            14671 
                            14673 
                            14674 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14675 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                            14676 ; 3    |//;; Filename    : regsswizzle.inc
                            14677 ; 4    |//;; Description : Register definitions for Swizzle interface
                            14678 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14679 ; 6    |
                            14680 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                            14681 ; 8    |// The following naming conventions are followed in this file.
                            14682 ; 9    |// All registers are named using the format...
                            14683 ; 10   |//     HW_<module>_<regname>
                            14684 ; 11   |// where <module> is the module name which can be any of the following...
                            14685 ; 12   |//     USB20
                            14686 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            14687 ; 14   |// module name includes a number starting from 0 for the first instance of
                            14688 ; 15   |// that module)
                            14689 ; 16   |// <regname> is the specific register within that module
                            14690 ; 17   |// We also define the following...
                            14691 ; 18   |//     HW_<module>_<regname>_BITPOS
                            14692 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            14693 ; 20   |//     HW_<module>_<regname>_SETMASK
                            14694 ; 21   |// which does something else, and
                            14695 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            14696 ; 23   |// which does something else.
                            14697 ; 24   |// Other rules
                            14698 ; 25   |//     All caps
                            14699 ; 26   |//     Numeric identifiers start at 0
                            14700 ; 27   |#if !(defined(regsswizzleinc))
                            14701 ; 28   |#define regsswizzleinc 1
                            14702 ; 29   |
                            14703 ; 30   |#include "types.h"
                            14704 
                            14706 
                            14707 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            14708 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            14709 ; 3    |//
                            14710 ; 4    |// Filename: types.h
                            14711 ; 5    |// Description: Standard data types
                            14712 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14713 ; 7    |
                            14714 ; 8    |#ifndef _TYPES_H
                            14715 ; 9    |#define _TYPES_H
                            14716 ; 10   |
                            14717 ; 11   |// TODO:  move this outta here!
                            14718 ; 12   |#if !defined(NOERROR)
                            14719 ; 13   |#define NOERROR 0
                            14720 ; 14   |#define SUCCESS 0
                            14721 ; 15   |#endif 
                            14722 ; 16   |#if !defined(SUCCESS)
                            14723 ; 17   |#define SUCCESS  0
                            14724 ; 18   |#endif
                            14725 ; 19   |#if !defined(ERROR)
                            14726 ; 20   |#define ERROR   -1
                            14727 ; 21   |#endif
                            14728 ; 22   |#if !defined(FALSE)
                            14729 ; 23   |#define FALSE 0
                            14730 ; 24   |#endif
                            14731 ; 25   |#if !defined(TRUE)
                            14732 ; 26   |#define TRUE  1
                            14733 ; 27   |#endif
                            14734 ; 28   |
                            14735 ; 29   |#if !defined(NULL)
                            14736 ; 30   |#define NULL 0
                            14737 ; 31   |#endif
                            14738 ; 32   |
                            14739 ; 33   |#define MAX_INT     0x7FFFFF
                            14740 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            14741 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            14742 ; 36   |#define MAX_ULONG   (-1) 
                            14743 ; 37   |
                            14744 ; 38   |#define WORD_SIZE   24              // word size in bits
                            14745 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            14746 ; 40   |
                            14747 ; 41   |
                            14748 ; 42   |#define BYTE    unsigned char       // btVarName
                            14749 ; 43   |#define CHAR    signed char         // cVarName
                            14750 ; 44   |#define USHORT  unsigned short      // usVarName
                            14751 ; 45   |#define SHORT   unsigned short      // sVarName
                            14752 ; 46   |#define WORD    unsigned int        // wVarName
                            14753 ; 47   |#define INT     signed int          // iVarName
                            14754 ; 48   |#define DWORD   unsigned long       // dwVarName
                            14755 ; 49   |#define LONG    signed long         // lVarName
                            14756 ; 50   |#define BOOL    unsigned int        // bVarName
                            14757 ; 51   |#define FRACT   _fract              // frVarName
                            14758 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            14759 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            14760 ; 54   |#define FLOAT   float               // fVarName
                            14761 ; 55   |#define DBL     double              // dVarName
                            14762 ; 56   |#define ENUM    enum                // eVarName
                            14763 ; 57   |#define CMX     _complex            // cmxVarName
                            14764 ; 58   |typedef WORD UCS3;                   // 
                            14765 ; 59   |
                            14766 ; 60   |#define UINT16  unsigned short
                            14767 ; 61   |#define UINT8   unsigned char   
                            14768 ; 62   |#define UINT32  unsigned long
                            14769 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            14770 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            14771 ; 65   |#define WCHAR   UINT16
                            14772 ; 66   |
                            14773 ; 67   |//UINT128 is 16 bytes or 6 words
                            14774 ; 68   |typedef struct UINT128_3500 {   
                            14775 ; 69   |    int val[6];     
                            14776 ; 70   |} UINT128_3500;
                            14777 ; 71   |
                            14778 ; 72   |#define UINT128   UINT128_3500
                            14779 ; 73   |
                            14780 ; 74   |// Little endian word packed byte strings:   
                            14781 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14782 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14783 ; 77   |// Little endian word packed byte strings:   
                            14784 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14785 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14786 ; 80   |
                            14787 ; 81   |// Declare Memory Spaces To Use When Coding
                            14788 ; 82   |// A. Sector Buffers
                            14789 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            14790 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            14791 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            14792 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            14793 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            14794 ; 88   |// B. Media DDI Memory
                            14795 ; 89   |#define MEDIA_DDI_MEM _Y
                            14796 ; 90   |
                            14797 ; 91   |
                            14798 ; 92   |
                            14799 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            14800 ; 94   |// Examples of circular pointers:
                            14801 ; 95   |//    INT CIRC cpiVarName
                            14802 ; 96   |//    DWORD CIRC cpdwVarName
                            14803 ; 97   |
                            14804 ; 98   |#define RETCODE INT                 // rcVarName
                            14805 ; 99   |
                            14806 ; 100  |// generic bitfield structure
                            14807 ; 101  |struct Bitfield {
                            14808 ; 102  |    unsigned int B0  :1;
                            14809 ; 103  |    unsigned int B1  :1;
                            14810 ; 104  |    unsigned int B2  :1;
                            14811 ; 105  |    unsigned int B3  :1;
                            14812 ; 106  |    unsigned int B4  :1;
                            14813 ; 107  |    unsigned int B5  :1;
                            14814 ; 108  |    unsigned int B6  :1;
                            14815 ; 109  |    unsigned int B7  :1;
                            14816 ; 110  |    unsigned int B8  :1;
                            14817 ; 111  |    unsigned int B9  :1;
                            14818 ; 112  |    unsigned int B10 :1;
                            14819 ; 113  |    unsigned int B11 :1;
                            14820 ; 114  |    unsigned int B12 :1;
                            14821 ; 115  |    unsigned int B13 :1;
                            14822 ; 116  |    unsigned int B14 :1;
                            14823 ; 117  |    unsigned int B15 :1;
                            14824 ; 118  |    unsigned int B16 :1;
                            14825 ; 119  |    unsigned int B17 :1;
                            14826 ; 120  |    unsigned int B18 :1;
                            14827 ; 121  |    unsigned int B19 :1;
                            14828 ; 122  |    unsigned int B20 :1;
                            14829 ; 123  |    unsigned int B21 :1;
                            14830 ; 124  |    unsigned int B22 :1;
                            14831 ; 125  |    unsigned int B23 :1;
                            14832 ; 126  |};
                            14833 ; 127  |
                            14834 ; 128  |union BitInt {
                            14835 ; 129  |        struct Bitfield B;
                            14836 ; 130  |        int        I;
                            14837 ; 131  |};
                            14838 ; 132  |
                            14839 ; 133  |#define MAX_MSG_LENGTH 10
                            14840 ; 134  |struct CMessage
                            14841 ; 135  |{
                            14842 ; 136  |        unsigned int m_uLength;
                            14843 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            14844 ; 138  |};
                            14845 ; 139  |
                            14846 ; 140  |typedef struct {
                            14847 ; 141  |    WORD m_wLength;
                            14848 ; 142  |    WORD m_wMessage;
                            14849 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            14850 ; 144  |} Message;
                            14851 ; 145  |
                            14852 ; 146  |struct MessageQueueDescriptor
                            14853 ; 147  |{
                            14854 ; 148  |        int *m_pBase;
                            14855 ; 149  |        int m_iModulo;
                            14856 ; 150  |        int m_iSize;
                            14857 ; 151  |        int *m_pHead;
                            14858 ; 152  |        int *m_pTail;
                            14859 ; 153  |};
                            14860 ; 154  |
                            14861 ; 155  |struct ModuleEntry
                            14862 ; 156  |{
                            14863 ; 157  |    int m_iSignaledEventMask;
                            14864 ; 158  |    int m_iWaitEventMask;
                            14865 ; 159  |    int m_iResourceOfCode;
                            14866 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            14867 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            14868 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            14869 ; 163  |    int m_uTimeOutHigh;
                            14870 ; 164  |    int m_uTimeOutLow;
                            14871 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            14872 ; 166  |};
                            14873 ; 167  |
                            14874 ; 168  |union WaitMask{
                            14875 ; 169  |    struct B{
                            14876 ; 170  |        unsigned int m_bNone     :1;
                            14877 ; 171  |        unsigned int m_bMessage  :1;
                            14878 ; 172  |        unsigned int m_bTimer    :1;
                            14879 ; 173  |        unsigned int m_bButton   :1;
                            14880 ; 174  |    } B;
                            14881 ; 175  |    int I;
                            14882 ; 176  |} ;
                            14883 ; 177  |
                            14884 ; 178  |
                            14885 ; 179  |struct Button {
                            14886 ; 180  |        WORD wButtonEvent;
                            14887 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            14888 ; 182  |};
                            14889 ; 183  |
                            14890 ; 184  |struct Message {
                            14891 ; 185  |        WORD wMsgLength;
                            14892 ; 186  |        WORD wMsgCommand;
                            14893 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            14894 ; 188  |};
                            14895 ; 189  |
                            14896 ; 190  |union EventTypes {
                            14897 ; 191  |        struct CMessage msg;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14898 ; 192  |        struct Button Button ;
                            14899 ; 193  |        struct Message Message;
                            14900 ; 194  |};
                            14901 ; 195  |
                            14902 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            14903 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            14904 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            14905 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            14906 ; 200  |
                            14907 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            14908 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            14909 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            14910 ; 204  |
                            14911 ; 205  |#if DEBUG
                            14912 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            14913 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            14914 ; 208  |#else 
                            14915 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            14916 ; 210  |#define DebugBuildAssert(x)    
                            14917 ; 211  |#endif
                            14918 ; 212  |
                            14919 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            14920 ; 214  |//  #pragma asm
                            14921 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            14922 ; 216  |//  #pragma endasm
                            14923 ; 217  |
                            14924 ; 218  |
                            14925 ; 219  |#ifdef COLOR_262K
                            14926 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            14927 ; 221  |#elif defined(COLOR_65K)
                            14928 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            14929 ; 223  |#else
                            14930 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            14931 ; 225  |#endif
                            14932 ; 226  |    
                            14933 ; 227  |#endif // #ifndef _TYPES_H
                            14934 
                            14936 
                            14937 ; 31   |
                            14938 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14939 ; 33   |
                            14940 ; 34   |//   SWIZZLE STMP3500 Registers 
                            14941 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                            14942 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14943 ; 37   |
                            14944 ; 38   |
                            14945 ; 39   |
                            14946 ; 40   |
                            14947 ; 41   |
                            14948 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                            14949 ; 43   |
                            14950 ; 44   |
                            14951 ; 45   |
                            14952 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                            14953 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                            14954 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                            14955 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                            14956 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                            14957 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                            14958 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                            14959 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                            14960 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                            14961 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                            14962 ; 56   |
                            14963 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                            14964 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                            14965 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                            14966 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                            14967 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                            14968 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                            14969 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                            14970 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                            14971 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                            14972 ; 66   |
                            14973 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITPOS)
                            14974 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITPOS)
                            14975 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_BITPOS)
                            14976 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIGN_BITPOS)
                            14977 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_SHIFT_BITPOS)
                            14978 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_BITPOS)
                            14979 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECSR1_CLK_OFF_BITPOS)
                            14980 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1_NEWADD_BITPOS)
                            14981 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSVD_BITPOS)
                            14982 ; 76   |
                            14983 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                            14984 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                            14985 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                            14986 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                            14987 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                            14988 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                            14989 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                            14990 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                            14991 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                            14992 ; 86   |
                            14993 ; 87   |////////////////////////////////////////////////////////////////////////////////
                            14994 ; 88   |//  Bit Manipulation Unit Registers
                            14995 ; 89   |////////////////////////////////////////////////////////////////////////////////
                            14996 ; 90   |typedef union
                            14997 ; 91   |{
                            14998 ; 92   |    struct
                            14999 ; 93   |    {
                            15000 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                            15001 ; 95   |    int LA      :1;     /* Left Align Data                          */
                            15002 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                            15003 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                            15004 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                            15005 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                            15006 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                            15007 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                            15008 ; 102  |    } B;
                            15009 ; 103  |    int I;
                            15010 ; 104  |    unsigned U;
                            15011 ; 105  |} swizzlecsr1_type;
                            15012 ; 106  |////////////////////////////////////////////////////////////////////////////////
                            15013 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* Swizzle Control & Status Register 1 */
                            15014 ; 108  |
                            15015 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                            15016 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                            15017 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                            15018 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                            15019 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                            15020 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                            15021 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                            15022 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                            15023 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                            15024 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                            15025 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                            15026 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                            15027 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                            15028 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                            15029 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                            15030 ; 124  |
                            15031 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                            15032 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                            15033 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                            15034 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                            15035 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                            15036 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                            15037 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                            15038 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                            15039 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                            15040 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                            15041 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                            15042 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                            15043 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                            15044 ; 138  |
                            15045 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KICK_BITPOS)
                            15046 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_SASEL_BITPOS)
                            15047 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECSR2_DESASEL_BITPOS)
                            15048 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIGE_BITPOS)
                            15049 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2_BITREV_BITPOS)
                            15050 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLSB_BITPOS)
                            15051 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMSB_BITPOS)
                            15052 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16L_BITPOS)
                            15053 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16I_BITPOS)
                            15054 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_BS_EN_BITPOS)
                            15055 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZLECSR2_SBYTEDEST_BITPOS)
                            15056 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2_UNKICK_BITPOS)
                            15057 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSVD_BITPOS)
                            15058 ; 152  |
                            15059 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                            15060 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                            15061 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                            15062 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                            15063 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                            15064 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                            15065 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                            15066 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                            15067 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                            15068 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                            15069 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                            15070 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                            15071 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                            15072 ; 166  |
                            15073 ; 167  |///////////////////////////////////////////////////////////////////////////////
                            15074 ; 168  |typedef union
                            15075 ; 169  |{
                            15076 ; 170  |    struct
                            15077 ; 171  |    {
                            15078 ; 172  |    int KICK    :1;         /* Start transfer                      */
                            15079 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                            15080 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                            15081 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                            15082 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                            15083 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                            15084 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                            15085 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                            15086 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                            15087 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                            15088 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                            15089 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                            15090 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                            15091 ; 185  |    } B;
                            15092 ; 186  |    unsigned int I;
                            15093 ; 187  |    unsigned int U;
                            15094 ; 188  |} swizzlecsr2_type;
                            15095 ; 189  |///////////////////////////////////////////////////////////////////////////////
                            15096 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* Swizzle Control & Status Register 2 */
                            15097 ; 191  |
                            15098 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                            15099 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                            15100 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                            15101 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                            15102 ; 196  |
                            15103 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                            15104 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                            15105 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                            15106 ; 200  |
                            15107 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_SIZE_BITPOS)
                            15108 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWIZZLESIZER_NEW_SHIFT_BITPOS)
                            15109 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_RSVD_BITPOS)
                            15110 ; 204  |
                            15111 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                            15112 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                            15113 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                            15114 ; 208  |
                            15115 ; 209  |///////////////////////////////////////////////////////////////////////////////
                            15116 ; 210  |typedef union
                            15117 ; 211  |{
                            15118 ; 212  |    struct
                            15119 ; 213  |    {
                            15120 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                            15121 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                            15122 ; 216  |    } B;
                            15123 ; 217  |    int I;
                            15124 ; 218  |    unsigned U;
                            15125 ; 219  |} swizzlesizer_type;
                            15126 ; 220  |///////////////////////////////////////////////////////////////////////////////
                            15127 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))        /* Swizzle Transfer Size Register */
                            15128 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* Swizzle Source Address Register */
                            15129 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* Swizzle Data1 Register */
                            15130 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* Swizzle Data2 Register */
                            15131 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* Swizzle Destination Address Register */
                            15132 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* Swizzle Big Endian Register */
                            15133 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* Swizzle BITREV Register */
                            15134 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* Swizzle Pass Least Significant Byte Register */
                            15135 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* Swizzle Pass Intermediate Byte Register */
                            15136 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* Swizzle Pass Most Significant Byte Register */
                            15137 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* Swizzle Pass Least Significant Word Register */
                            15138 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* Swizzle Pass Intermediate Significant Word Register */
                            15139 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* Swizzle Pass Most Significant Word Register */
                            15140 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Swizzle Barrel Shift Register */
                            15141 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swizzle Divide By 3 Lower Register */
                            15142 ; 236  |
                            15143 ; 237  |
                            15144 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                            15145 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                            15146 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                            15147 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                            15148 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                            15149 ; 243  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15150 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                            15151 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                            15152 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                            15153 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                            15154 ; 248  |
                            15155 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                            15156 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD0_BITPOS)
                            15157 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_REMAINDER_BITPOS)
                            15158 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD1_BITPOS)
                            15159 ; 253  |
                            15160 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                            15161 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                            15162 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                            15163 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                            15164 ; 258  |
                            15165 ; 259  |///////////////////////////////////////////////////////////////////////////////
                            15166 ; 260  |typedef union
                            15167 ; 261  |{
                            15168 ; 262  |    struct
                            15169 ; 263  |    {
                            15170 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                            15171 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                            15172 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                            15173 ; 267  |    } B;
                            15174 ; 268  |    int I;
                            15175 ; 269  |    unsigned U;
                            15176 ; 270  |} swizzlediv3ur_type;
                            15177 ; 271  |///////////////////////////////////////////////////////////////////////////////
                            15178 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    /* Swizzle Divide By 3 Upper Register */
                            15179 ; 273  |
                            15180 ; 274  |#endif
                            15181 ; 275  |
                            15182 
                            15184 
                            15185 ; 33   |#include "regssdram.h"
                            15186 
                            15188 
                            15189 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15190 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            15191 ; 3    |//;  File        : regssdram.inc
                            15192 ; 4    |//;  Description : Mixed Signal IP Register definition
                            15193 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15194 ; 6    |
                            15195 ; 7    |// The following naming conventions are followed in this file.
                            15196 ; 8    |// All registers are named using the format...
                            15197 ; 9    |//     HW_<module>_<regname>
                            15198 ; 10   |// where <module> is the module name which can be any of the following...
                            15199 ; 11   |//     SYSTEM
                            15200 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            15201 ; 13   |// module name includes a number starting from 0 for the first instance of
                            15202 ; 14   |// that module)
                            15203 ; 15   |// <regname> is the specific register within that module
                            15204 ; 16   |// We also define the following...
                            15205 ; 17   |//     HW_<module>_<regname>_BITPOS
                            15206 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            15207 ; 19   |//     HW_<module>_<regname>_SETMASK
                            15208 ; 20   |// which does something else, and
                            15209 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            15210 ; 22   |// which does something else.
                            15211 ; 23   |// Other rules
                            15212 ; 24   |//     All caps
                            15213 ; 25   |//     Numeric identifiers start at 0
                            15214 ; 26   |
                            15215 ; 27   |#if !(defined(regssdraminc))
                            15216 ; 28   |#define regssdraminc 1
                            15217 ; 29   |
                            15218 ; 30   |#include "types.h"
                            15219 
                            15221 
                            15222 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            15223 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            15224 ; 3    |//
                            15225 ; 4    |// Filename: types.h
                            15226 ; 5    |// Description: Standard data types
                            15227 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            15228 ; 7    |
                            15229 ; 8    |#ifndef _TYPES_H
                            15230 ; 9    |#define _TYPES_H
                            15231 ; 10   |
                            15232 ; 11   |// TODO:  move this outta here!
                            15233 ; 12   |#if !defined(NOERROR)
                            15234 ; 13   |#define NOERROR 0
                            15235 ; 14   |#define SUCCESS 0
                            15236 ; 15   |#endif 
                            15237 ; 16   |#if !defined(SUCCESS)
                            15238 ; 17   |#define SUCCESS  0
                            15239 ; 18   |#endif
                            15240 ; 19   |#if !defined(ERROR)
                            15241 ; 20   |#define ERROR   -1
                            15242 ; 21   |#endif
                            15243 ; 22   |#if !defined(FALSE)
                            15244 ; 23   |#define FALSE 0
                            15245 ; 24   |#endif
                            15246 ; 25   |#if !defined(TRUE)
                            15247 ; 26   |#define TRUE  1
                            15248 ; 27   |#endif
                            15249 ; 28   |
                            15250 ; 29   |#if !defined(NULL)
                            15251 ; 30   |#define NULL 0
                            15252 ; 31   |#endif
                            15253 ; 32   |
                            15254 ; 33   |#define MAX_INT     0x7FFFFF
                            15255 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            15256 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            15257 ; 36   |#define MAX_ULONG   (-1) 
                            15258 ; 37   |
                            15259 ; 38   |#define WORD_SIZE   24              // word size in bits
                            15260 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            15261 ; 40   |
                            15262 ; 41   |
                            15263 ; 42   |#define BYTE    unsigned char       // btVarName
                            15264 ; 43   |#define CHAR    signed char         // cVarName
                            15265 ; 44   |#define USHORT  unsigned short      // usVarName
                            15266 ; 45   |#define SHORT   unsigned short      // sVarName
                            15267 ; 46   |#define WORD    unsigned int        // wVarName
                            15268 ; 47   |#define INT     signed int          // iVarName
                            15269 ; 48   |#define DWORD   unsigned long       // dwVarName
                            15270 ; 49   |#define LONG    signed long         // lVarName
                            15271 ; 50   |#define BOOL    unsigned int        // bVarName
                            15272 ; 51   |#define FRACT   _fract              // frVarName
                            15273 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            15274 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            15275 ; 54   |#define FLOAT   float               // fVarName
                            15276 ; 55   |#define DBL     double              // dVarName
                            15277 ; 56   |#define ENUM    enum                // eVarName
                            15278 ; 57   |#define CMX     _complex            // cmxVarName
                            15279 ; 58   |typedef WORD UCS3;                   // 
                            15280 ; 59   |
                            15281 ; 60   |#define UINT16  unsigned short
                            15282 ; 61   |#define UINT8   unsigned char   
                            15283 ; 62   |#define UINT32  unsigned long
                            15284 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            15285 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            15286 ; 65   |#define WCHAR   UINT16
                            15287 ; 66   |
                            15288 ; 67   |//UINT128 is 16 bytes or 6 words
                            15289 ; 68   |typedef struct UINT128_3500 {   
                            15290 ; 69   |    int val[6];     
                            15291 ; 70   |} UINT128_3500;
                            15292 ; 71   |
                            15293 ; 72   |#define UINT128   UINT128_3500
                            15294 ; 73   |
                            15295 ; 74   |// Little endian word packed byte strings:   
                            15296 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15297 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15298 ; 77   |// Little endian word packed byte strings:   
                            15299 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15300 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15301 ; 80   |
                            15302 ; 81   |// Declare Memory Spaces To Use When Coding
                            15303 ; 82   |// A. Sector Buffers
                            15304 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            15305 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            15306 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            15307 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            15308 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            15309 ; 88   |// B. Media DDI Memory
                            15310 ; 89   |#define MEDIA_DDI_MEM _Y
                            15311 ; 90   |
                            15312 ; 91   |
                            15313 ; 92   |
                            15314 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            15315 ; 94   |// Examples of circular pointers:
                            15316 ; 95   |//    INT CIRC cpiVarName
                            15317 ; 96   |//    DWORD CIRC cpdwVarName
                            15318 ; 97   |
                            15319 ; 98   |#define RETCODE INT                 // rcVarName
                            15320 ; 99   |
                            15321 ; 100  |// generic bitfield structure
                            15322 ; 101  |struct Bitfield {
                            15323 ; 102  |    unsigned int B0  :1;
                            15324 ; 103  |    unsigned int B1  :1;
                            15325 ; 104  |    unsigned int B2  :1;
                            15326 ; 105  |    unsigned int B3  :1;
                            15327 ; 106  |    unsigned int B4  :1;
                            15328 ; 107  |    unsigned int B5  :1;
                            15329 ; 108  |    unsigned int B6  :1;
                            15330 ; 109  |    unsigned int B7  :1;
                            15331 ; 110  |    unsigned int B8  :1;
                            15332 ; 111  |    unsigned int B9  :1;
                            15333 ; 112  |    unsigned int B10 :1;
                            15334 ; 113  |    unsigned int B11 :1;
                            15335 ; 114  |    unsigned int B12 :1;
                            15336 ; 115  |    unsigned int B13 :1;
                            15337 ; 116  |    unsigned int B14 :1;
                            15338 ; 117  |    unsigned int B15 :1;
                            15339 ; 118  |    unsigned int B16 :1;
                            15340 ; 119  |    unsigned int B17 :1;
                            15341 ; 120  |    unsigned int B18 :1;
                            15342 ; 121  |    unsigned int B19 :1;
                            15343 ; 122  |    unsigned int B20 :1;
                            15344 ; 123  |    unsigned int B21 :1;
                            15345 ; 124  |    unsigned int B22 :1;
                            15346 ; 125  |    unsigned int B23 :1;
                            15347 ; 126  |};
                            15348 ; 127  |
                            15349 ; 128  |union BitInt {
                            15350 ; 129  |        struct Bitfield B;
                            15351 ; 130  |        int        I;
                            15352 ; 131  |};
                            15353 ; 132  |
                            15354 ; 133  |#define MAX_MSG_LENGTH 10
                            15355 ; 134  |struct CMessage
                            15356 ; 135  |{
                            15357 ; 136  |        unsigned int m_uLength;
                            15358 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            15359 ; 138  |};
                            15360 ; 139  |
                            15361 ; 140  |typedef struct {
                            15362 ; 141  |    WORD m_wLength;
                            15363 ; 142  |    WORD m_wMessage;
                            15364 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            15365 ; 144  |} Message;
                            15366 ; 145  |
                            15367 ; 146  |struct MessageQueueDescriptor
                            15368 ; 147  |{
                            15369 ; 148  |        int *m_pBase;
                            15370 ; 149  |        int m_iModulo;
                            15371 ; 150  |        int m_iSize;
                            15372 ; 151  |        int *m_pHead;
                            15373 ; 152  |        int *m_pTail;
                            15374 ; 153  |};
                            15375 ; 154  |
                            15376 ; 155  |struct ModuleEntry
                            15377 ; 156  |{
                            15378 ; 157  |    int m_iSignaledEventMask;
                            15379 ; 158  |    int m_iWaitEventMask;
                            15380 ; 159  |    int m_iResourceOfCode;
                            15381 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            15382 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            15383 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            15384 ; 163  |    int m_uTimeOutHigh;
                            15385 ; 164  |    int m_uTimeOutLow;
                            15386 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            15387 ; 166  |};
                            15388 ; 167  |
                            15389 ; 168  |union WaitMask{
                            15390 ; 169  |    struct B{
                            15391 ; 170  |        unsigned int m_bNone     :1;
                            15392 ; 171  |        unsigned int m_bMessage  :1;
                            15393 ; 172  |        unsigned int m_bTimer    :1;
                            15394 ; 173  |        unsigned int m_bButton   :1;
                            15395 ; 174  |    } B;
                            15396 ; 175  |    int I;
                            15397 ; 176  |} ;
                            15398 ; 177  |
                            15399 ; 178  |
                            15400 ; 179  |struct Button {
                            15401 ; 180  |        WORD wButtonEvent;
                            15402 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            15403 ; 182  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15404 ; 183  |
                            15405 ; 184  |struct Message {
                            15406 ; 185  |        WORD wMsgLength;
                            15407 ; 186  |        WORD wMsgCommand;
                            15408 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            15409 ; 188  |};
                            15410 ; 189  |
                            15411 ; 190  |union EventTypes {
                            15412 ; 191  |        struct CMessage msg;
                            15413 ; 192  |        struct Button Button ;
                            15414 ; 193  |        struct Message Message;
                            15415 ; 194  |};
                            15416 ; 195  |
                            15417 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            15418 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            15419 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            15420 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            15421 ; 200  |
                            15422 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            15423 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            15424 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            15425 ; 204  |
                            15426 ; 205  |#if DEBUG
                            15427 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            15428 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            15429 ; 208  |#else 
                            15430 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            15431 ; 210  |#define DebugBuildAssert(x)    
                            15432 ; 211  |#endif
                            15433 ; 212  |
                            15434 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            15435 ; 214  |//  #pragma asm
                            15436 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            15437 ; 216  |//  #pragma endasm
                            15438 ; 217  |
                            15439 ; 218  |
                            15440 ; 219  |#ifdef COLOR_262K
                            15441 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            15442 ; 221  |#elif defined(COLOR_65K)
                            15443 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            15444 ; 223  |#else
                            15445 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            15446 ; 225  |#endif
                            15447 ; 226  |    
                            15448 ; 227  |#endif // #ifndef _TYPES_H
                            15449 
                            15451 
                            15452 ; 31   |
                            15453 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                            15454 ; 33   |
                            15455 ; 34   |
                            15456 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                            15457 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                            15458 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                            15459 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                            15460 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
                            15461 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                            15462 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                            15463 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                            15464 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                            15465 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                            15466 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                            15467 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                            15468 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                            15469 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                            15470 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                            15471 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                            15472 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                            15473 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                            15474 ; 53   |
                            15475 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                            15476 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                            15477 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                            15478 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                            15479 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                            15480 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                            15481 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                            15482 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                            15483 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                            15484 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                            15485 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                            15486 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                            15487 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                            15488 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                            15489 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                            15490 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                            15491 ; 70   |
                            15492 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SDRAMEN_BITPOS)
                            15493 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                            15494 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS)
                            15495 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BITPOS)
                            15496 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                            15497 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_BITPOS)
                            15498 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BITPOS)
                            15499 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_BITPOS)
                            15500 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS)
                            15501 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BITPOS)
                            15502 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_BITPOS)
                            15503 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_BITPOS)
                            15504 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS)
                            15505 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_BITPOS)
                            15506 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_BITPOS)
                            15507 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BITPOS)
                            15508 ; 87   |
                            15509 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                            15510 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                            15511 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                            15512 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                            15513 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                            15514 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                            15515 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                            15516 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                            15517 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                            15518 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                            15519 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                            15520 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                            15521 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                            15522 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                            15523 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                            15524 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                            15525 ; 104  |
                            15526 ; 105  |typedef union               
                            15527 ; 106  |{
                            15528 ; 107  |    struct {
                            15529 ; 108  |        int SDRAMEN                     :1;
                            15530 ; 109  |        int IE                          :1;
                            15531 ; 110  |        int RNW                         :1;
                            15532 ; 111  |        int KICK                        :1;
                            15533 ; 112  |        int LM                          :1;
                            15534 ; 113  |        int ISTAT                       :1;
                            15535 ; 114  |        int PWDN                        :1;
                            15536 ; 115  |        int RSVD                        :1;
                            15537 ; 116  |        int SBYTE                       :2;
                            15538 ; 117  |        int MEM                         :2;
                            15539 ; 118  |        int BIGE                        :1;
                            15540 ; 119  |        int ASIZE                       :3;
                            15541 ; 120  |        int UKICK                       :1;
                            15542 ; 121  |        int DIV                         :4;
                            15543 ; 122  |        int MULTI                       :1;
                            15544 ; 123  |        int SDRAM                       :1;
                            15545 ; 124  |        int SIGN                        :1;
                            15546 ; 125  |    } B;
                            15547 ; 126  |    int I;
                            15548 ; 127  |} sdramcsr_type;
                            15549 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                            15550 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                            15551 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                            15552 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                            15553 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                            15554 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                            15555 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                            15556 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                            15557 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                            15558 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                            15559 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                            15560 ; 139  |
                            15561 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                            15562 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                            15563 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                            15564 ; 143  |
                            15565 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                            15566 ; 145  |
                            15567 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                            15568 ; 147  |
                            15569 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            15570 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                            15571 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                            15572 ; 151  |
                            15573 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                            15574 ; 153  |
                            15575 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                            15576 ; 155  |
                            15577 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                            15578 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                            15579 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                            15580 ; 159  |
                            15581 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                            15582 ; 161  |
                            15583 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                            15584 ; 163  |
                            15585 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                            15586 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                            15587 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                            15588 ; 167  |
                            15589 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                            15590 ; 169  |
                            15591 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                            15592 ; 171  |
                            15593 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                            15594 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                            15595 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                            15596 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                            15597 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                            15598 ; 177  |
                            15599 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                            15600 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                            15601 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                            15602 ; 181  |
                            15603 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1_INIT_BITPOS)
                            15604 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_TRP_BITPOS)
                            15605 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1_TRFC_BITPOS)
                            15606 ; 185  |
                            15607 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                            15608 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                            15609 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                            15610 ; 189  |
                            15611 ; 190  |typedef union               
                            15612 ; 191  |{
                            15613 ; 192  |    struct {
                            15614 ; 193  |        int INIT                :16;
                            15615 ; 194  |        int TRP                 :4;
                            15616 ; 195  |        int TRFC                :4;
                            15617 ; 196  |    } B;
                            15618 ; 197  |    int I;
                            15619 ; 198  |} sdramtimer1_type;
                            15620 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                            15621 ; 200  |
                            15622 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                            15623 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                            15624 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                            15625 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                            15626 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                            15627 ; 206  |
                            15628 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                            15629 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                            15630 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                            15631 ; 210  |
                            15632 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2_TXSR_BITPOS)
                            15633 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2_TREF_BITPOS)
                            15634 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2_TRCD_BITPOS)
                            15635 ; 214  |
                            15636 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                            15637 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                            15638 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                            15639 ; 218  |
                            15640 ; 219  |typedef union               
                            15641 ; 220  |{
                            15642 ; 221  |    struct {
                            15643 ; 222  |        int TXSR                :4;
                            15644 ; 223  |        int TREF                :12;
                            15645 ; 224  |        int TRCD                :4;
                            15646 ; 225  |        int RSVD                :4; 
                            15647 ; 226  |    } B;
                            15648 ; 227  |    int I;
                            15649 ; 228  |} sdramtimer2_type;
                            15650 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                            15651 ; 230  |
                            15652 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            15653 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                            15654 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                            15655 ; 234  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15656 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                            15657 ; 236  |
                            15658 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                            15659 ; 238  |
                            15660 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                            15661 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                            15662 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                            15663 ; 242  |
                            15664 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                            15665 ; 244  |
                            15666 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                            15667 ; 246  |
                            15668 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            15669 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                            15670 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                            15671 ; 250  |
                            15672 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                            15673 ; 252  |
                            15674 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS)
                            15675 ; 254  |
                            15676 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                            15677 ; 256  |
                            15678 ; 257  |typedef union               
                            15679 ; 258  |{
                            15680 ; 259  |    struct {
                            15681 ; 260  |        int VALUE               :14;
                            15682 ; 261  |        int RSVD                :10; 
                            15683 ; 262  |    } B;
                            15684 ; 263  |    int I;
                            15685 ; 264  |} sdrammode_type;
                            15686 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                            15687 ; 266  |
                            15688 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                            15689 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                            15690 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                            15691 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                            15692 ; 271  |
                            15693 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                            15694 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                            15695 ; 274  |
                            15696 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_COLWIDTH_BITPOS)
                            15697 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_ROWWIDTH_BITPOS)
                            15698 ; 277  |
                            15699 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                            15700 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                            15701 ; 280  |
                            15702 ; 281  |typedef union               
                            15703 ; 282  |{
                            15704 ; 283  |    struct {
                            15705 ; 284  |        int COLWIDTH               :4;
                            15706 ; 285  |        int ROWWIDTH               :4; 
                            15707 ; 286  |    } B;
                            15708 ; 287  |    int I;
                            15709 ; 288  |} sdramtype_type;
                            15710 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                            15711 ; 290  |
                            15712 ; 291  |#endif
                            15713 ; 292  |
                            15714 ; 293  |
                            15715 ; 294  |
                            15716 ; 295  |
                            15717 ; 296  |
                            15718 ; 297  |
                            15719 
                            15721 
                            15722 ; 34   |#include "regstb.h"
                            15723 
                            15725 
                            15726 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            15727 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            15728 ; 3    |// Filename: regstb.inc
                            15729 ; 4    |// Description: Register definitions for Trace Buffer
                            15730 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            15731 ; 6    |// The following naming conventions are followed in this file.
                            15732 ; 7    |// All registers are named using the format...
                            15733 ; 8    |//     HW_<module>_<regname>
                            15734 ; 9    |// where <module> is the module name which can be any of the following...
                            15735 ; 10   |//     USB20
                            15736 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            15737 ; 12   |// module name includes a number starting from 0 for the first instance of
                            15738 ; 13   |// that module)
                            15739 ; 14   |// <regname> is the specific register within that module
                            15740 ; 15   |// We also define the following...
                            15741 ; 16   |//     HW_<module>_<regname>_BITPOS
                            15742 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            15743 ; 18   |//     HW_<module>_<regname>_SETMASK
                            15744 ; 19   |// which does something else, and
                            15745 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            15746 ; 21   |// which does something else.
                            15747 ; 22   |// Other rules
                            15748 ; 23   |//     All caps
                            15749 ; 24   |//     Numeric identifiers start at 0
                            15750 ; 25   |#if !(defined(regstbinc))
                            15751 ; 26   |#define regstbinc 1
                            15752 ; 27   |
                            15753 ; 28   |#include "types.h"
                            15754 
                            15756 
                            15757 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            15758 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            15759 ; 3    |//
                            15760 ; 4    |// Filename: types.h
                            15761 ; 5    |// Description: Standard data types
                            15762 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            15763 ; 7    |
                            15764 ; 8    |#ifndef _TYPES_H
                            15765 ; 9    |#define _TYPES_H
                            15766 ; 10   |
                            15767 ; 11   |// TODO:  move this outta here!
                            15768 ; 12   |#if !defined(NOERROR)
                            15769 ; 13   |#define NOERROR 0
                            15770 ; 14   |#define SUCCESS 0
                            15771 ; 15   |#endif 
                            15772 ; 16   |#if !defined(SUCCESS)
                            15773 ; 17   |#define SUCCESS  0
                            15774 ; 18   |#endif
                            15775 ; 19   |#if !defined(ERROR)
                            15776 ; 20   |#define ERROR   -1
                            15777 ; 21   |#endif
                            15778 ; 22   |#if !defined(FALSE)
                            15779 ; 23   |#define FALSE 0
                            15780 ; 24   |#endif
                            15781 ; 25   |#if !defined(TRUE)
                            15782 ; 26   |#define TRUE  1
                            15783 ; 27   |#endif
                            15784 ; 28   |
                            15785 ; 29   |#if !defined(NULL)
                            15786 ; 30   |#define NULL 0
                            15787 ; 31   |#endif
                            15788 ; 32   |
                            15789 ; 33   |#define MAX_INT     0x7FFFFF
                            15790 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            15791 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            15792 ; 36   |#define MAX_ULONG   (-1) 
                            15793 ; 37   |
                            15794 ; 38   |#define WORD_SIZE   24              // word size in bits
                            15795 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            15796 ; 40   |
                            15797 ; 41   |
                            15798 ; 42   |#define BYTE    unsigned char       // btVarName
                            15799 ; 43   |#define CHAR    signed char         // cVarName
                            15800 ; 44   |#define USHORT  unsigned short      // usVarName
                            15801 ; 45   |#define SHORT   unsigned short      // sVarName
                            15802 ; 46   |#define WORD    unsigned int        // wVarName
                            15803 ; 47   |#define INT     signed int          // iVarName
                            15804 ; 48   |#define DWORD   unsigned long       // dwVarName
                            15805 ; 49   |#define LONG    signed long         // lVarName
                            15806 ; 50   |#define BOOL    unsigned int        // bVarName
                            15807 ; 51   |#define FRACT   _fract              // frVarName
                            15808 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            15809 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            15810 ; 54   |#define FLOAT   float               // fVarName
                            15811 ; 55   |#define DBL     double              // dVarName
                            15812 ; 56   |#define ENUM    enum                // eVarName
                            15813 ; 57   |#define CMX     _complex            // cmxVarName
                            15814 ; 58   |typedef WORD UCS3;                   // 
                            15815 ; 59   |
                            15816 ; 60   |#define UINT16  unsigned short
                            15817 ; 61   |#define UINT8   unsigned char   
                            15818 ; 62   |#define UINT32  unsigned long
                            15819 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            15820 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            15821 ; 65   |#define WCHAR   UINT16
                            15822 ; 66   |
                            15823 ; 67   |//UINT128 is 16 bytes or 6 words
                            15824 ; 68   |typedef struct UINT128_3500 {   
                            15825 ; 69   |    int val[6];     
                            15826 ; 70   |} UINT128_3500;
                            15827 ; 71   |
                            15828 ; 72   |#define UINT128   UINT128_3500
                            15829 ; 73   |
                            15830 ; 74   |// Little endian word packed byte strings:   
                            15831 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15832 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15833 ; 77   |// Little endian word packed byte strings:   
                            15834 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15835 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15836 ; 80   |
                            15837 ; 81   |// Declare Memory Spaces To Use When Coding
                            15838 ; 82   |// A. Sector Buffers
                            15839 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            15840 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            15841 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            15842 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            15843 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            15844 ; 88   |// B. Media DDI Memory
                            15845 ; 89   |#define MEDIA_DDI_MEM _Y
                            15846 ; 90   |
                            15847 ; 91   |
                            15848 ; 92   |
                            15849 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            15850 ; 94   |// Examples of circular pointers:
                            15851 ; 95   |//    INT CIRC cpiVarName
                            15852 ; 96   |//    DWORD CIRC cpdwVarName
                            15853 ; 97   |
                            15854 ; 98   |#define RETCODE INT                 // rcVarName
                            15855 ; 99   |
                            15856 ; 100  |// generic bitfield structure
                            15857 ; 101  |struct Bitfield {
                            15858 ; 102  |    unsigned int B0  :1;
                            15859 ; 103  |    unsigned int B1  :1;
                            15860 ; 104  |    unsigned int B2  :1;
                            15861 ; 105  |    unsigned int B3  :1;
                            15862 ; 106  |    unsigned int B4  :1;
                            15863 ; 107  |    unsigned int B5  :1;
                            15864 ; 108  |    unsigned int B6  :1;
                            15865 ; 109  |    unsigned int B7  :1;
                            15866 ; 110  |    unsigned int B8  :1;
                            15867 ; 111  |    unsigned int B9  :1;
                            15868 ; 112  |    unsigned int B10 :1;
                            15869 ; 113  |    unsigned int B11 :1;
                            15870 ; 114  |    unsigned int B12 :1;
                            15871 ; 115  |    unsigned int B13 :1;
                            15872 ; 116  |    unsigned int B14 :1;
                            15873 ; 117  |    unsigned int B15 :1;
                            15874 ; 118  |    unsigned int B16 :1;
                            15875 ; 119  |    unsigned int B17 :1;
                            15876 ; 120  |    unsigned int B18 :1;
                            15877 ; 121  |    unsigned int B19 :1;
                            15878 ; 122  |    unsigned int B20 :1;
                            15879 ; 123  |    unsigned int B21 :1;
                            15880 ; 124  |    unsigned int B22 :1;
                            15881 ; 125  |    unsigned int B23 :1;
                            15882 ; 126  |};
                            15883 ; 127  |
                            15884 ; 128  |union BitInt {
                            15885 ; 129  |        struct Bitfield B;
                            15886 ; 130  |        int        I;
                            15887 ; 131  |};
                            15888 ; 132  |
                            15889 ; 133  |#define MAX_MSG_LENGTH 10
                            15890 ; 134  |struct CMessage
                            15891 ; 135  |{
                            15892 ; 136  |        unsigned int m_uLength;
                            15893 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            15894 ; 138  |};
                            15895 ; 139  |
                            15896 ; 140  |typedef struct {
                            15897 ; 141  |    WORD m_wLength;
                            15898 ; 142  |    WORD m_wMessage;
                            15899 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            15900 ; 144  |} Message;
                            15901 ; 145  |
                            15902 ; 146  |struct MessageQueueDescriptor
                            15903 ; 147  |{
                            15904 ; 148  |        int *m_pBase;
                            15905 ; 149  |        int m_iModulo;
                            15906 ; 150  |        int m_iSize;
                            15907 ; 151  |        int *m_pHead;
                            15908 ; 152  |        int *m_pTail;
                            15909 ; 153  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15910 ; 154  |
                            15911 ; 155  |struct ModuleEntry
                            15912 ; 156  |{
                            15913 ; 157  |    int m_iSignaledEventMask;
                            15914 ; 158  |    int m_iWaitEventMask;
                            15915 ; 159  |    int m_iResourceOfCode;
                            15916 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            15917 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            15918 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            15919 ; 163  |    int m_uTimeOutHigh;
                            15920 ; 164  |    int m_uTimeOutLow;
                            15921 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            15922 ; 166  |};
                            15923 ; 167  |
                            15924 ; 168  |union WaitMask{
                            15925 ; 169  |    struct B{
                            15926 ; 170  |        unsigned int m_bNone     :1;
                            15927 ; 171  |        unsigned int m_bMessage  :1;
                            15928 ; 172  |        unsigned int m_bTimer    :1;
                            15929 ; 173  |        unsigned int m_bButton   :1;
                            15930 ; 174  |    } B;
                            15931 ; 175  |    int I;
                            15932 ; 176  |} ;
                            15933 ; 177  |
                            15934 ; 178  |
                            15935 ; 179  |struct Button {
                            15936 ; 180  |        WORD wButtonEvent;
                            15937 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            15938 ; 182  |};
                            15939 ; 183  |
                            15940 ; 184  |struct Message {
                            15941 ; 185  |        WORD wMsgLength;
                            15942 ; 186  |        WORD wMsgCommand;
                            15943 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            15944 ; 188  |};
                            15945 ; 189  |
                            15946 ; 190  |union EventTypes {
                            15947 ; 191  |        struct CMessage msg;
                            15948 ; 192  |        struct Button Button ;
                            15949 ; 193  |        struct Message Message;
                            15950 ; 194  |};
                            15951 ; 195  |
                            15952 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            15953 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            15954 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            15955 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            15956 ; 200  |
                            15957 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            15958 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            15959 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            15960 ; 204  |
                            15961 ; 205  |#if DEBUG
                            15962 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            15963 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            15964 ; 208  |#else 
                            15965 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            15966 ; 210  |#define DebugBuildAssert(x)    
                            15967 ; 211  |#endif
                            15968 ; 212  |
                            15969 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            15970 ; 214  |//  #pragma asm
                            15971 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            15972 ; 216  |//  #pragma endasm
                            15973 ; 217  |
                            15974 ; 218  |
                            15975 ; 219  |#ifdef COLOR_262K
                            15976 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            15977 ; 221  |#elif defined(COLOR_65K)
                            15978 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            15979 ; 223  |#else
                            15980 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            15981 ; 225  |#endif
                            15982 ; 226  |    
                            15983 ; 227  |#endif // #ifndef _TYPES_H
                            15984 
                            15986 
                            15987 ; 29   |
                            15988 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15989 ; 31   |
                            15990 ; 32   |//   Trace Buffer STMP Registers 
                            15991 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            15992 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15993 ; 35   |
                            15994 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            15995 ; 37   |
                            15996 ; 38   |
                            15997 ; 39   |
                            15998 ; 40   |
                            15999 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            16000 ; 42   |
                            16001 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            16002 ; 44   |
                            16003 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            16004 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            16005 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            16006 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            16007 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            16008 ; 50   |
                            16009 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            16010 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            16011 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                            16012 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            16013 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            16014 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            16015 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                            16016 ; 58   |
                            16017 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_ENABLE_BITPOS) 
                            16018 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS) 
                            16019 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            16020 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_BITPOS) 
                            16021 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_EVENT_BITPOS) 
                            16022 ; 64   |
                            16023 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            16024 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            16025 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            16026 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            16027 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            16028 ; 70   |
                            16029 ; 71   |typedef union               
                            16030 ; 72   |{
                            16031 ; 73   |    struct {
                            16032 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            16033 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            16034 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            16035 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            16036 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            16037 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            16038 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            16039 ; 81   |    } B;
                            16040 ; 82   |    int I;
                            16041 ; 83   |    unsigned int U;
                            16042 ; 84   |} tb_cfg_type;
                            16043 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer Configuration Register */
                            16044 ; 86   |
                            16045 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            16046 ; 88   |
                            16047 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            16048 ; 90   |
                            16049 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                            16050 ; 92   |
                            16051 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            16052 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            16053 ; 95   |
                            16054 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BITPOS) 
                            16055 ; 97   |
                            16056 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                            16057 ; 99   |
                            16058 ; 100  |typedef union               
                            16059 ; 101  |{
                            16060 ; 102  |    struct {
                            16061 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            16062 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            16063 ; 105  |    } B;
                            16064 ; 106  |    int I;
                            16065 ; 107  |    unsigned int U;
                            16066 ; 108  |} tb_bar_type;
                            16067 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer Base Address Register */
                            16068 ; 110  |
                            16069 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            16070 ; 112  |
                            16071 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            16072 ; 114  |
                            16073 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            16074 ; 116  |
                            16075 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            16076 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            16077 ; 119  |
                            16078 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BITPOS) 
                            16079 ; 121  |
                            16080 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            16081 ; 123  |
                            16082 ; 124  |typedef union               
                            16083 ; 125  |{
                            16084 ; 126  |    struct {
                            16085 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            16086 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                            16087 ; 129  |    } B;
                            16088 ; 130  |    int I;
                            16089 ; 131  |    unsigned int U;
                            16090 ; 132  |} tb_mod_type;
                            16091 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer Modulus Register */
                            16092 ; 134  |
                            16093 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            16094 ; 136  |
                            16095 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            16096 ; 138  |
                            16097 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            16098 ; 140  |
                            16099 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            16100 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            16101 ; 143  |
                            16102 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            16103 ; 145  |
                            16104 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            16105 ; 147  |
                            16106 ; 148  |typedef union               
                            16107 ; 149  |{
                            16108 ; 150  |    struct {
                            16109 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            16110 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            16111 ; 153  |    } B;
                            16112 ; 154  |    int I;
                            16113 ; 155  |    unsigned int U;
                            16114 ; 156  |} tb_cir_type;
                            16115 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer Current Index Register */
                            16116 ; 158  |
                            16117 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            16118 ; 160  |
                            16119 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            16120 ; 162  |
                            16121 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            16122 ; 164  |
                            16123 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            16124 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            16125 ; 167  |
                            16126 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            16127 ; 169  |
                            16128 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            16129 ; 171  |
                            16130 ; 172  |typedef union               
                            16131 ; 173  |{
                            16132 ; 174  |    struct {
                            16133 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            16134 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            16135 ; 177  |    } B;
                            16136 ; 178  |    int I;
                            16137 ; 179  |    unsigned int U;
                            16138 ; 180  |} tb_obc_type;
                            16139 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer one byte code Register */
                            16140 ; 182  |
                            16141 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            16142 ; 184  |
                            16143 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            16144 ; 186  |
                            16145 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            16146 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            16147 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            16148 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            16149 ; 191  |
                            16150 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            16151 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            16152 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            16153 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            16154 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            16155 ; 197  |
                            16156 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STYLE_BITPOS) 
                            16157 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLASS_BITPOS) 
                            16158 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLASS_BITPOS) 
                            16159 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS) 
                            16160 ; 202  |
                            16161 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16162 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            16163 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            16164 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            16165 ; 207  |
                            16166 ; 208  |typedef union               
                            16167 ; 209  |{
                            16168 ; 210  |    struct {
                            16169 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            16170 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            16171 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            16172 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            16173 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            16174 ; 216  |    } B;
                            16175 ; 217  |    int I;
                            16176 ; 218  |    unsigned int U;
                            16177 ; 219  |} tb_tcs_type;
                            16178 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffer Trigger Command Register */
                            16179 ; 221  |
                            16180 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            16181 ; 223  |
                            16182 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            16183 ; 225  |
                            16184 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            16185 ; 227  |
                            16186 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            16187 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            16188 ; 230  |
                            16189 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH_ADDR_BITPOS) 
                            16190 ; 232  |
                            16191 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            16192 ; 234  |
                            16193 ; 235  |typedef union               
                            16194 ; 236  |{
                            16195 ; 237  |    struct {
                            16196 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            16197 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            16198 ; 240  |    } B;
                            16199 ; 241  |    int I;
                            16200 ; 242  |    unsigned int U;
                            16201 ; 243  |} tb_tvr_type;
                            16202 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffer Trigger Value Register */
                            16203 ; 245  |
                            16204 ; 246  |
                            16205 ; 247  |
                            16206 ; 248  |#endif
                            16207 ; 249  |
                            16208 ; 250  |
                            16209 ; 251  |
                            16210 ; 252  |
                            16211 ; 253  |
                            16212 ; 254  |
                            16213 ; 255  |
                            16214 ; 256  |
                            16215 ; 257  |
                            16216 ; 258  |
                            16217 ; 259  |
                            16218 ; 260  |
                            16219 ; 261  |
                            16220 ; 262  |
                            16221 ; 263  |
                            16222 ; 264  |
                            16223 ; 265  |
                            16224 
                            16226 
                            16227 ; 35   |#include "regstimer.h"
                            16228 
                            16230 
                            16231 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            16232 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            16233 ; 3    |// Filename: regstimer.inc
                            16234 ; 4    |// Description: Register definitions for  Timers interface
                            16235 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            16236 ; 6    |// The following naming conventions are followed in this file.
                            16237 ; 7    |// All registers are named using the format...
                            16238 ; 8    |//     HW_<module>_<regname>
                            16239 ; 9    |// where <module> is the module name which can be any of the following...
                            16240 ; 10   |//     USB20
                            16241 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            16242 ; 12   |// module name includes a number starting from 0 for the first instance of
                            16243 ; 13   |// that module)
                            16244 ; 14   |// <regname> is the specific register within that module
                            16245 ; 15   |// We also define the following...
                            16246 ; 16   |//     HW_<module>_<regname>_BITPOS
                            16247 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            16248 ; 18   |//     HW_<module>_<regname>_SETMASK
                            16249 ; 19   |// which does something else, and
                            16250 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            16251 ; 21   |// which does something else.
                            16252 ; 22   |// Other rules
                            16253 ; 23   |//     All caps
                            16254 ; 24   |//     Numeric identifiers start at 0
                            16255 ; 25   |#if !(defined(regstimerinc))
                            16256 ; 26   |#define regstimerinc 1
                            16257 ; 27   |
                            16258 ; 28   |#include "types.h"
                            16259 
                            16261 
                            16262 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16263 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16264 ; 3    |//
                            16265 ; 4    |// Filename: types.h
                            16266 ; 5    |// Description: Standard data types
                            16267 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16268 ; 7    |
                            16269 ; 8    |#ifndef _TYPES_H
                            16270 ; 9    |#define _TYPES_H
                            16271 ; 10   |
                            16272 ; 11   |// TODO:  move this outta here!
                            16273 ; 12   |#if !defined(NOERROR)
                            16274 ; 13   |#define NOERROR 0
                            16275 ; 14   |#define SUCCESS 0
                            16276 ; 15   |#endif 
                            16277 ; 16   |#if !defined(SUCCESS)
                            16278 ; 17   |#define SUCCESS  0
                            16279 ; 18   |#endif
                            16280 ; 19   |#if !defined(ERROR)
                            16281 ; 20   |#define ERROR   -1
                            16282 ; 21   |#endif
                            16283 ; 22   |#if !defined(FALSE)
                            16284 ; 23   |#define FALSE 0
                            16285 ; 24   |#endif
                            16286 ; 25   |#if !defined(TRUE)
                            16287 ; 26   |#define TRUE  1
                            16288 ; 27   |#endif
                            16289 ; 28   |
                            16290 ; 29   |#if !defined(NULL)
                            16291 ; 30   |#define NULL 0
                            16292 ; 31   |#endif
                            16293 ; 32   |
                            16294 ; 33   |#define MAX_INT     0x7FFFFF
                            16295 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16296 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16297 ; 36   |#define MAX_ULONG   (-1) 
                            16298 ; 37   |
                            16299 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16300 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16301 ; 40   |
                            16302 ; 41   |
                            16303 ; 42   |#define BYTE    unsigned char       // btVarName
                            16304 ; 43   |#define CHAR    signed char         // cVarName
                            16305 ; 44   |#define USHORT  unsigned short      // usVarName
                            16306 ; 45   |#define SHORT   unsigned short      // sVarName
                            16307 ; 46   |#define WORD    unsigned int        // wVarName
                            16308 ; 47   |#define INT     signed int          // iVarName
                            16309 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16310 ; 49   |#define LONG    signed long         // lVarName
                            16311 ; 50   |#define BOOL    unsigned int        // bVarName
                            16312 ; 51   |#define FRACT   _fract              // frVarName
                            16313 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            16314 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            16315 ; 54   |#define FLOAT   float               // fVarName
                            16316 ; 55   |#define DBL     double              // dVarName
                            16317 ; 56   |#define ENUM    enum                // eVarName
                            16318 ; 57   |#define CMX     _complex            // cmxVarName
                            16319 ; 58   |typedef WORD UCS3;                   // 
                            16320 ; 59   |
                            16321 ; 60   |#define UINT16  unsigned short
                            16322 ; 61   |#define UINT8   unsigned char   
                            16323 ; 62   |#define UINT32  unsigned long
                            16324 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16325 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16326 ; 65   |#define WCHAR   UINT16
                            16327 ; 66   |
                            16328 ; 67   |//UINT128 is 16 bytes or 6 words
                            16329 ; 68   |typedef struct UINT128_3500 {   
                            16330 ; 69   |    int val[6];     
                            16331 ; 70   |} UINT128_3500;
                            16332 ; 71   |
                            16333 ; 72   |#define UINT128   UINT128_3500
                            16334 ; 73   |
                            16335 ; 74   |// Little endian word packed byte strings:   
                            16336 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16337 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16338 ; 77   |// Little endian word packed byte strings:   
                            16339 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16340 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16341 ; 80   |
                            16342 ; 81   |// Declare Memory Spaces To Use When Coding
                            16343 ; 82   |// A. Sector Buffers
                            16344 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            16345 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            16346 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            16347 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            16348 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            16349 ; 88   |// B. Media DDI Memory
                            16350 ; 89   |#define MEDIA_DDI_MEM _Y
                            16351 ; 90   |
                            16352 ; 91   |
                            16353 ; 92   |
                            16354 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            16355 ; 94   |// Examples of circular pointers:
                            16356 ; 95   |//    INT CIRC cpiVarName
                            16357 ; 96   |//    DWORD CIRC cpdwVarName
                            16358 ; 97   |
                            16359 ; 98   |#define RETCODE INT                 // rcVarName
                            16360 ; 99   |
                            16361 ; 100  |// generic bitfield structure
                            16362 ; 101  |struct Bitfield {
                            16363 ; 102  |    unsigned int B0  :1;
                            16364 ; 103  |    unsigned int B1  :1;
                            16365 ; 104  |    unsigned int B2  :1;
                            16366 ; 105  |    unsigned int B3  :1;
                            16367 ; 106  |    unsigned int B4  :1;
                            16368 ; 107  |    unsigned int B5  :1;
                            16369 ; 108  |    unsigned int B6  :1;
                            16370 ; 109  |    unsigned int B7  :1;
                            16371 ; 110  |    unsigned int B8  :1;
                            16372 ; 111  |    unsigned int B9  :1;
                            16373 ; 112  |    unsigned int B10 :1;
                            16374 ; 113  |    unsigned int B11 :1;
                            16375 ; 114  |    unsigned int B12 :1;
                            16376 ; 115  |    unsigned int B13 :1;
                            16377 ; 116  |    unsigned int B14 :1;
                            16378 ; 117  |    unsigned int B15 :1;
                            16379 ; 118  |    unsigned int B16 :1;
                            16380 ; 119  |    unsigned int B17 :1;
                            16381 ; 120  |    unsigned int B18 :1;
                            16382 ; 121  |    unsigned int B19 :1;
                            16383 ; 122  |    unsigned int B20 :1;
                            16384 ; 123  |    unsigned int B21 :1;
                            16385 ; 124  |    unsigned int B22 :1;
                            16386 ; 125  |    unsigned int B23 :1;
                            16387 ; 126  |};
                            16388 ; 127  |
                            16389 ; 128  |union BitInt {
                            16390 ; 129  |        struct Bitfield B;
                            16391 ; 130  |        int        I;
                            16392 ; 131  |};
                            16393 ; 132  |
                            16394 ; 133  |#define MAX_MSG_LENGTH 10
                            16395 ; 134  |struct CMessage
                            16396 ; 135  |{
                            16397 ; 136  |        unsigned int m_uLength;
                            16398 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            16399 ; 138  |};
                            16400 ; 139  |
                            16401 ; 140  |typedef struct {
                            16402 ; 141  |    WORD m_wLength;
                            16403 ; 142  |    WORD m_wMessage;
                            16404 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            16405 ; 144  |} Message;
                            16406 ; 145  |
                            16407 ; 146  |struct MessageQueueDescriptor
                            16408 ; 147  |{
                            16409 ; 148  |        int *m_pBase;
                            16410 ; 149  |        int m_iModulo;
                            16411 ; 150  |        int m_iSize;
                            16412 ; 151  |        int *m_pHead;
                            16413 ; 152  |        int *m_pTail;
                            16414 ; 153  |};
                            16415 ; 154  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16416 ; 155  |struct ModuleEntry
                            16417 ; 156  |{
                            16418 ; 157  |    int m_iSignaledEventMask;
                            16419 ; 158  |    int m_iWaitEventMask;
                            16420 ; 159  |    int m_iResourceOfCode;
                            16421 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            16422 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            16423 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            16424 ; 163  |    int m_uTimeOutHigh;
                            16425 ; 164  |    int m_uTimeOutLow;
                            16426 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            16427 ; 166  |};
                            16428 ; 167  |
                            16429 ; 168  |union WaitMask{
                            16430 ; 169  |    struct B{
                            16431 ; 170  |        unsigned int m_bNone     :1;
                            16432 ; 171  |        unsigned int m_bMessage  :1;
                            16433 ; 172  |        unsigned int m_bTimer    :1;
                            16434 ; 173  |        unsigned int m_bButton   :1;
                            16435 ; 174  |    } B;
                            16436 ; 175  |    int I;
                            16437 ; 176  |} ;
                            16438 ; 177  |
                            16439 ; 178  |
                            16440 ; 179  |struct Button {
                            16441 ; 180  |        WORD wButtonEvent;
                            16442 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            16443 ; 182  |};
                            16444 ; 183  |
                            16445 ; 184  |struct Message {
                            16446 ; 185  |        WORD wMsgLength;
                            16447 ; 186  |        WORD wMsgCommand;
                            16448 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            16449 ; 188  |};
                            16450 ; 189  |
                            16451 ; 190  |union EventTypes {
                            16452 ; 191  |        struct CMessage msg;
                            16453 ; 192  |        struct Button Button ;
                            16454 ; 193  |        struct Message Message;
                            16455 ; 194  |};
                            16456 ; 195  |
                            16457 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            16458 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            16459 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            16460 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            16461 ; 200  |
                            16462 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            16463 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            16464 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            16465 ; 204  |
                            16466 ; 205  |#if DEBUG
                            16467 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            16468 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            16469 ; 208  |#else 
                            16470 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            16471 ; 210  |#define DebugBuildAssert(x)    
                            16472 ; 211  |#endif
                            16473 ; 212  |
                            16474 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            16475 ; 214  |//  #pragma asm
                            16476 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            16477 ; 216  |//  #pragma endasm
                            16478 ; 217  |
                            16479 ; 218  |
                            16480 ; 219  |#ifdef COLOR_262K
                            16481 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            16482 ; 221  |#elif defined(COLOR_65K)
                            16483 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            16484 ; 223  |#else
                            16485 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            16486 ; 225  |#endif
                            16487 ; 226  |    
                            16488 ; 227  |#endif // #ifndef _TYPES_H
                            16489 
                            16491 
                            16492 ; 29   |
                            16493 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16494 ; 31   |//   TIMER STMP Registers 
                            16495 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16496 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            16497 ; 34   |
                            16498 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            16499 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            16500 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            16501 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            16502 ; 39   |
                            16503 ; 40   |#define HW_TIMER_NUMBER_0 0
                            16504 ; 41   |#define HW_TIMER_NUMBER_1 1
                            16505 ; 42   |#define HW_TIMER_NUMBER_2 2
                            16506 ; 43   |#define HW_TIMER_NUMBER_3 3
                            16507 ; 44   |
                            16508 ; 45   |#define HW_TMRCSR 0
                            16509 ; 46   |#define HW_TMRCNTR 1
                            16510 ; 47   |
                            16511 ; 48   |
                            16512 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            16513 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            16514 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            16515 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            16516 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            16517 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            16518 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            16519 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            16520 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            16521 ; 58   |
                            16522 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            16523 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            16524 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            16525 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            16526 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            16527 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            16528 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            16529 ; 66   |
                            16530 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CSR_TIMER_ENABLE_BITPOS)
                            16531 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CSR_TIMER_INT_EN_BITPOS)
                            16532 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BITPOS)
                            16533 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0CSR_TIMER_CONTROL_BITPOS)
                            16534 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CSR_TIMER_STATUS_BITPOS)
                            16535 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TIMER_MODE_BITPOS)
                            16536 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS)
                            16537 ; 74   |
                            16538 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            16539 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            16540 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            16541 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            16542 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            16543 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            16544 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            16545 ; 82   |
                            16546 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            16547 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            16548 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            16549 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            16550 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            16551 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            16552 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            16553 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            16554 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            16555 ; 92   |
                            16556 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            16557 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            16558 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            16559 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            16560 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            16561 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            16562 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            16563 ; 100  |
                            16564 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CSR_TIMER_ENABLE_BITPOS)
                            16565 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CSR_TIMER_INT_EN_BITPOS)
                            16566 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BITPOS)
                            16567 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1CSR_TIMER_CONTROL_BITPOS)
                            16568 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CSR_TIMER_STATUS_BITPOS)
                            16569 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TIMER_MODE_BITPOS)
                            16570 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS)
                            16571 ; 108  |
                            16572 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            16573 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            16574 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            16575 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            16576 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            16577 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            16578 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            16579 ; 116  |
                            16580 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            16581 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            16582 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            16583 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            16584 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            16585 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            16586 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            16587 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            16588 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            16589 ; 126  |
                            16590 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            16591 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            16592 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            16593 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            16594 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            16595 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            16596 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            16597 ; 134  |
                            16598 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CSR_TIMER_ENABLE_BITPOS)
                            16599 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CSR_TIMER_INT_EN_BITPOS)
                            16600 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BITPOS)
                            16601 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2CSR_TIMER_CONTROL_BITPOS)
                            16602 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CSR_TIMER_STATUS_BITPOS)
                            16603 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TIMER_MODE_BITPOS)
                            16604 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS)
                            16605 ; 142  |
                            16606 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            16607 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            16608 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            16609 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            16610 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            16611 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            16612 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            16613 ; 150  |
                            16614 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            16615 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            16616 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            16617 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            16618 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            16619 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            16620 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            16621 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            16622 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            16623 ; 160  |
                            16624 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            16625 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            16626 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            16627 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            16628 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            16629 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            16630 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            16631 ; 168  |
                            16632 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CSR_TIMER_ENABLE_BITPOS)
                            16633 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CSR_TIMER_INT_EN_BITPOS)
                            16634 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BITPOS)
                            16635 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3CSR_TIMER_CONTROL_BITPOS)
                            16636 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CSR_TIMER_STATUS_BITPOS)
                            16637 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TIMER_MODE_BITPOS)
                            16638 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS)
                            16639 ; 176  |
                            16640 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            16641 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            16642 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            16643 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            16644 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            16645 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            16646 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            16647 ; 184  |
                            16648 ; 185  |typedef union               
                            16649 ; 186  |{
                            16650 ; 187  |    struct {
                            16651 ; 188  |       int TIMER_ENABLE              :1;
                            16652 ; 189  |       int TIMER_INT_EN              :1;
                            16653 ; 190  |       int INVERT                    :1;
                            16654 ; 191  |       int TIMER_CONTROL             :3;
                            16655 ; 192  |       int RSVD0                     :1;
                            16656 ; 193  |       int TIMER_STATUS              :1;
                            16657 ; 194  |       int TIMER_MODE                :2;
                            16658 ; 195  |       int RSVD1                     :13;
                            16659 ; 196  |       int CLKGT                     :1;
                            16660 ; 197  |    } B;
                            16661 ; 198  |    int I;
                            16662 ; 199  |} timercsr_type;
                            16663 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /* Timer0 Control Status Register */
                            16664 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /* Timer1 Control Status Register */
                            16665 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /* Timer2 Control Status Register */
                            16666 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /* Timer3 Control Status Register */
                            16667 ; 204  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16668 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            16669 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            16670 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            16671 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            16672 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BITPOS)
                            16673 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            16674 ; 211  |
                            16675 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            16676 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            16677 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            16678 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            16679 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BITPOS)
                            16680 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            16681 ; 218  |
                            16682 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            16683 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            16684 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            16685 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            16686 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BITPOS)
                            16687 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            16688 ; 225  |
                            16689 ; 226  |typedef union               
                            16690 ; 227  |{
                            16691 ; 228  |    struct {
                            16692 ; 229  |       int COUNT                    :24;
                            16693 ; 230  |    } B;
                            16694 ; 231  |    int I;
                            16695 ; 232  |} tmrcntr_type;
                            16696 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /* Timer0 Count Register */
                            16697 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /* Timer1 Count Register */
                            16698 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /* Timer2 Count Register */
                            16699 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /* Timer3 Count Register */
                            16700 ; 237  |
                            16701 ; 238  |
                            16702 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                            16703 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                            16704 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            16705 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            16706 ; 243  |
                            16707 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            16708 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            16709 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            16710 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            16711 ; 248  |
                            16712 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            16713 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            16714 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            16715 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            16716 ; 253  |
                            16717 ; 254  |// Timer enable
                            16718 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            16719 ; 256  |// Timer clock gating control
                            16720 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            16721 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            16722 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            16723 ; 260  |#endif
                            16724 ; 261  |
                            16725 ; 262  |
                            16726 ; 263  |
                            16727 ; 264  |
                            16728 
                            16730 
                            16731 ; 36   |#include "regsusb20.h"
                            16732 
                            16734 
                            16735 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16736 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            16737 ; 3    |//;  File        : regsusb20ip.inc
                            16738 ; 4    |//;  Description : USB20 IP Register definition
                            16739 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16740 ; 6    |
                            16741 ; 7    |// The following naming conventions are followed in this file.
                            16742 ; 8    |// All registers are named using the format...
                            16743 ; 9    |//     HW_<module>_<regname>
                            16744 ; 10   |// where <module> is the module name which can be any of the following...
                            16745 ; 11   |//     USB20
                            16746 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            16747 ; 13   |// module name includes a number starting from 0 for the first instance of
                            16748 ; 14   |// that module)
                            16749 ; 15   |// <regname> is the specific register within that module
                            16750 ; 16   |// We also define the following...
                            16751 ; 17   |//     HW_<module>_<regname>_BITPOS
                            16752 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            16753 ; 19   |//     HW_<module>_<regname>_SETMASK
                            16754 ; 20   |// which does something else, and
                            16755 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            16756 ; 22   |// which does something else.
                            16757 ; 23   |// Other rules
                            16758 ; 24   |//     All caps
                            16759 ; 25   |//     Numeric identifiers start at 0
                            16760 ; 26   |
                            16761 ; 27   |#if !(defined(regsusb20inc))
                            16762 ; 28   |#define regsusb20inc 1
                            16763 ; 29   |
                            16764 ; 30   |#include "types.h"
                            16765 
                            16767 
                            16768 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16769 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16770 ; 3    |//
                            16771 ; 4    |// Filename: types.h
                            16772 ; 5    |// Description: Standard data types
                            16773 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16774 ; 7    |
                            16775 ; 8    |#ifndef _TYPES_H
                            16776 ; 9    |#define _TYPES_H
                            16777 ; 10   |
                            16778 ; 11   |// TODO:  move this outta here!
                            16779 ; 12   |#if !defined(NOERROR)
                            16780 ; 13   |#define NOERROR 0
                            16781 ; 14   |#define SUCCESS 0
                            16782 ; 15   |#endif 
                            16783 ; 16   |#if !defined(SUCCESS)
                            16784 ; 17   |#define SUCCESS  0
                            16785 ; 18   |#endif
                            16786 ; 19   |#if !defined(ERROR)
                            16787 ; 20   |#define ERROR   -1
                            16788 ; 21   |#endif
                            16789 ; 22   |#if !defined(FALSE)
                            16790 ; 23   |#define FALSE 0
                            16791 ; 24   |#endif
                            16792 ; 25   |#if !defined(TRUE)
                            16793 ; 26   |#define TRUE  1
                            16794 ; 27   |#endif
                            16795 ; 28   |
                            16796 ; 29   |#if !defined(NULL)
                            16797 ; 30   |#define NULL 0
                            16798 ; 31   |#endif
                            16799 ; 32   |
                            16800 ; 33   |#define MAX_INT     0x7FFFFF
                            16801 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16802 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16803 ; 36   |#define MAX_ULONG   (-1) 
                            16804 ; 37   |
                            16805 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16806 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16807 ; 40   |
                            16808 ; 41   |
                            16809 ; 42   |#define BYTE    unsigned char       // btVarName
                            16810 ; 43   |#define CHAR    signed char         // cVarName
                            16811 ; 44   |#define USHORT  unsigned short      // usVarName
                            16812 ; 45   |#define SHORT   unsigned short      // sVarName
                            16813 ; 46   |#define WORD    unsigned int        // wVarName
                            16814 ; 47   |#define INT     signed int          // iVarName
                            16815 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16816 ; 49   |#define LONG    signed long         // lVarName
                            16817 ; 50   |#define BOOL    unsigned int        // bVarName
                            16818 ; 51   |#define FRACT   _fract              // frVarName
                            16819 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            16820 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            16821 ; 54   |#define FLOAT   float               // fVarName
                            16822 ; 55   |#define DBL     double              // dVarName
                            16823 ; 56   |#define ENUM    enum                // eVarName
                            16824 ; 57   |#define CMX     _complex            // cmxVarName
                            16825 ; 58   |typedef WORD UCS3;                   // 
                            16826 ; 59   |
                            16827 ; 60   |#define UINT16  unsigned short
                            16828 ; 61   |#define UINT8   unsigned char   
                            16829 ; 62   |#define UINT32  unsigned long
                            16830 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16831 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16832 ; 65   |#define WCHAR   UINT16
                            16833 ; 66   |
                            16834 ; 67   |//UINT128 is 16 bytes or 6 words
                            16835 ; 68   |typedef struct UINT128_3500 {   
                            16836 ; 69   |    int val[6];     
                            16837 ; 70   |} UINT128_3500;
                            16838 ; 71   |
                            16839 ; 72   |#define UINT128   UINT128_3500
                            16840 ; 73   |
                            16841 ; 74   |// Little endian word packed byte strings:   
                            16842 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16843 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16844 ; 77   |// Little endian word packed byte strings:   
                            16845 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16846 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16847 ; 80   |
                            16848 ; 81   |// Declare Memory Spaces To Use When Coding
                            16849 ; 82   |// A. Sector Buffers
                            16850 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            16851 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            16852 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            16853 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            16854 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            16855 ; 88   |// B. Media DDI Memory
                            16856 ; 89   |#define MEDIA_DDI_MEM _Y
                            16857 ; 90   |
                            16858 ; 91   |
                            16859 ; 92   |
                            16860 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            16861 ; 94   |// Examples of circular pointers:
                            16862 ; 95   |//    INT CIRC cpiVarName
                            16863 ; 96   |//    DWORD CIRC cpdwVarName
                            16864 ; 97   |
                            16865 ; 98   |#define RETCODE INT                 // rcVarName
                            16866 ; 99   |
                            16867 ; 100  |// generic bitfield structure
                            16868 ; 101  |struct Bitfield {
                            16869 ; 102  |    unsigned int B0  :1;
                            16870 ; 103  |    unsigned int B1  :1;
                            16871 ; 104  |    unsigned int B2  :1;
                            16872 ; 105  |    unsigned int B3  :1;
                            16873 ; 106  |    unsigned int B4  :1;
                            16874 ; 107  |    unsigned int B5  :1;
                            16875 ; 108  |    unsigned int B6  :1;
                            16876 ; 109  |    unsigned int B7  :1;
                            16877 ; 110  |    unsigned int B8  :1;
                            16878 ; 111  |    unsigned int B9  :1;
                            16879 ; 112  |    unsigned int B10 :1;
                            16880 ; 113  |    unsigned int B11 :1;
                            16881 ; 114  |    unsigned int B12 :1;
                            16882 ; 115  |    unsigned int B13 :1;
                            16883 ; 116  |    unsigned int B14 :1;
                            16884 ; 117  |    unsigned int B15 :1;
                            16885 ; 118  |    unsigned int B16 :1;
                            16886 ; 119  |    unsigned int B17 :1;
                            16887 ; 120  |    unsigned int B18 :1;
                            16888 ; 121  |    unsigned int B19 :1;
                            16889 ; 122  |    unsigned int B20 :1;
                            16890 ; 123  |    unsigned int B21 :1;
                            16891 ; 124  |    unsigned int B22 :1;
                            16892 ; 125  |    unsigned int B23 :1;
                            16893 ; 126  |};
                            16894 ; 127  |
                            16895 ; 128  |union BitInt {
                            16896 ; 129  |        struct Bitfield B;
                            16897 ; 130  |        int        I;
                            16898 ; 131  |};
                            16899 ; 132  |
                            16900 ; 133  |#define MAX_MSG_LENGTH 10
                            16901 ; 134  |struct CMessage
                            16902 ; 135  |{
                            16903 ; 136  |        unsigned int m_uLength;
                            16904 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            16905 ; 138  |};
                            16906 ; 139  |
                            16907 ; 140  |typedef struct {
                            16908 ; 141  |    WORD m_wLength;
                            16909 ; 142  |    WORD m_wMessage;
                            16910 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            16911 ; 144  |} Message;
                            16912 ; 145  |
                            16913 ; 146  |struct MessageQueueDescriptor
                            16914 ; 147  |{
                            16915 ; 148  |        int *m_pBase;
                            16916 ; 149  |        int m_iModulo;
                            16917 ; 150  |        int m_iSize;
                            16918 ; 151  |        int *m_pHead;
                            16919 ; 152  |        int *m_pTail;
                            16920 ; 153  |};
                            16921 ; 154  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16922 ; 155  |struct ModuleEntry
                            16923 ; 156  |{
                            16924 ; 157  |    int m_iSignaledEventMask;
                            16925 ; 158  |    int m_iWaitEventMask;
                            16926 ; 159  |    int m_iResourceOfCode;
                            16927 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            16928 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            16929 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            16930 ; 163  |    int m_uTimeOutHigh;
                            16931 ; 164  |    int m_uTimeOutLow;
                            16932 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            16933 ; 166  |};
                            16934 ; 167  |
                            16935 ; 168  |union WaitMask{
                            16936 ; 169  |    struct B{
                            16937 ; 170  |        unsigned int m_bNone     :1;
                            16938 ; 171  |        unsigned int m_bMessage  :1;
                            16939 ; 172  |        unsigned int m_bTimer    :1;
                            16940 ; 173  |        unsigned int m_bButton   :1;
                            16941 ; 174  |    } B;
                            16942 ; 175  |    int I;
                            16943 ; 176  |} ;
                            16944 ; 177  |
                            16945 ; 178  |
                            16946 ; 179  |struct Button {
                            16947 ; 180  |        WORD wButtonEvent;
                            16948 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            16949 ; 182  |};
                            16950 ; 183  |
                            16951 ; 184  |struct Message {
                            16952 ; 185  |        WORD wMsgLength;
                            16953 ; 186  |        WORD wMsgCommand;
                            16954 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            16955 ; 188  |};
                            16956 ; 189  |
                            16957 ; 190  |union EventTypes {
                            16958 ; 191  |        struct CMessage msg;
                            16959 ; 192  |        struct Button Button ;
                            16960 ; 193  |        struct Message Message;
                            16961 ; 194  |};
                            16962 ; 195  |
                            16963 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            16964 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            16965 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            16966 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            16967 ; 200  |
                            16968 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            16969 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            16970 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            16971 ; 204  |
                            16972 ; 205  |#if DEBUG
                            16973 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            16974 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            16975 ; 208  |#else 
                            16976 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            16977 ; 210  |#define DebugBuildAssert(x)    
                            16978 ; 211  |#endif
                            16979 ; 212  |
                            16980 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            16981 ; 214  |//  #pragma asm
                            16982 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            16983 ; 216  |//  #pragma endasm
                            16984 ; 217  |
                            16985 ; 218  |
                            16986 ; 219  |#ifdef COLOR_262K
                            16987 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            16988 ; 221  |#elif defined(COLOR_65K)
                            16989 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            16990 ; 223  |#else
                            16991 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            16992 ; 225  |#endif
                            16993 ; 226  |    
                            16994 ; 227  |#endif // #ifndef _TYPES_H
                            16995 
                            16997 
                            16998 ; 31   |
                            16999 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17000 ; 33   |//   USB2.0 STMP Registers 
                            17001 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17002 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            17003 ; 36   |
                            17004 ; 37   |
                            17005 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            17006 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            17007 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            17008 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            17009 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            17010 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            17011 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            17012 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            17013 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            17014 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            17015 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            17016 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            17017 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            17018 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            17019 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            17020 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            17021 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            17022 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            17023 ; 56   |
                            17024 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            17025 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            17026 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            17027 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            17028 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            17029 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            17030 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            17031 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            17032 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            17033 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            17034 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            17035 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            17036 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            17037 ; 70   |
                            17038 ; 71   |
                            17039 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            17040 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            17041 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            17042 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            17043 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            17044 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            17045 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            17046 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            17047 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            17048 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            17049 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            17050 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            17051 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            17052 ; 85   |
                            17053 ; 86   |typedef union               
                            17054 ; 87   |{
                            17055 ; 88   |    struct {
                            17056 ; 89   |        int USBEN          :1;
                            17057 ; 90   |        int WAKEUPIRQ      :1;
                            17058 ; 91   |        int WAKEUPIE       :1;
                            17059 ; 92   |        int VBUSCXIRQ      :1;
                            17060 ; 93   |        int VBUSCXIE       :1;
                            17061 ; 94   |        int VBUSDISCXIRQ   :1;
                            17062 ; 95   |        int VBUSDISCXIE    :1;
                            17063 ; 96   |        int CLKOFF         :1;
                            17064 ; 97   |        int SUSP           :1;
                            17065 ; 98   |        int SUSPF          :1;
                            17066 ; 99   |        int UTMITST        :1;
                            17067 ; 100  |        int ARCCONNECT     :1;
                            17068 ; 101  |        int PLUGGEDIN_EN   :1;
                            17069 ; 102  |        int PLUGGEDIN      :1;
                            17070 ; 103  |        int                :8;
                            17071 ; 104  |        int HOSTDISCONNECT :1;
                            17072 ; 105  |        int VBUSSENSE      :1;
                            17073 ; 106  |    } B;
                            17074 ; 107  |    int I;
                            17075 ; 108  |} usbcsr_type;
                            17076 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control / Status Register */
                            17077 ; 110  |
                            17078 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            17079 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            17080 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            17081 ; 114  |
                            17082 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            17083 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            17084 ; 117  |
                            17085 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            17086 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            17087 ; 120  |
                            17088 ; 121  |typedef union               
                            17089 ; 122  |{
                            17090 ; 123  |    struct {
                            17091 ; 124  |        int ADD            :16;
                            17092 ; 125  |        int MEM            :2;
                            17093 ; 126  |        int                :6;
                            17094 ; 127  |    } B;
                            17095 ; 128  |    int I;
                            17096 ; 129  |} usbdmaoff_type;
                            17097 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            17098 ; 131  |
                            17099 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            17100 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            17101 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            17102 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            17103 ; 136  |
                            17104 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            17105 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            17106 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            17107 ; 140  |
                            17108 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            17109 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            17110 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            17111 ; 144  |
                            17112 ; 145  |typedef union               
                            17113 ; 146  |{
                            17114 ; 147  |    struct {
                            17115 ; 148  |        int ADD            :9;
                            17116 ; 149  |        int                :7;
                            17117 ; 150  |        int RWB            :1;
                            17118 ; 151  |        int                :14;
                            17119 ; 152  |        int KICK           :1;
                            17120 ; 153  |    } B;
                            17121 ; 154  |    int I;
                            17122 ; 155  |} usbarcaccess_type;
                            17123 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            17124 ; 157  |
                            17125 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            17126 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            17127 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            17128 ; 161  |
                            17129 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            17130 ; 163  |
                            17131 ; 164  |typedef union               
                            17132 ; 165  |{
                            17133 ; 166  |    struct {
                            17134 ; 167  |        int DATA           :16;
                            17135 ; 168  |        int                :8;
                            17136 ; 169  |    } B;
                            17137 ; 170  |    int I;
                            17138 ; 171  |} usbarcdatalow_type;
                            17139 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                            17140 ; 173  |
                            17141 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            17142 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            17143 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            17144 ; 177  |
                            17145 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            17146 ; 179  |
                            17147 ; 180  |typedef union               
                            17148 ; 181  |{
                            17149 ; 182  |    struct {
                            17150 ; 183  |        int DATA           :16;
                            17151 ; 184  |        int                :8;
                            17152 ; 185  |    } B;
                            17153 ; 186  |    int I;
                            17154 ; 187  |} usbarcdatahigh_type;
                            17155 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))    
                            17156 ; 189  |
                            17157 ; 190  |
                            17158 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17159 ; 192  |//   USB2.0 ARC Registers 
                            17160 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17161 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            17162 ; 195  |
                            17163 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            17164 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            17165 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            17166 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            17167 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            17168 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            17169 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            17170 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            17171 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            17172 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            17173 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17174 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            17175 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            17176 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            17177 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            17178 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            17179 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            17180 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            17181 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            17182 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            17183 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            17184 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            17185 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            17186 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            17187 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            17188 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            17189 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            17190 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            17191 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            17192 ; 225  |
                            17193 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            17194 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            17195 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            17196 ; 229  |
                            17197 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            17198 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            17199 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            17200 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            17201 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            17202 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            17203 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            17204 ; 237  |
                            17205 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            17206 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            17207 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            17208 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            17209 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            17210 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            17211 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            17212 ; 245  |
                            17213 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            17214 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            17215 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            17216 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            17217 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            17218 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            17219 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            17220 ; 253  |
                            17221 ; 254  |typedef union               
                            17222 ; 255  |{
                            17223 ; 256  |    struct {
                            17224 ; 257  |        int N_PORTS         :4;
                            17225 ; 258  |        int PPC             :1;
                            17226 ; 259  |        int                 :3;
                            17227 ; 260  |        int N_PCC           :4;
                            17228 ; 261  |        int N_CC            :4;
                            17229 ; 262  |        int PI              :1;
                            17230 ; 263  |        int                 :3;
                            17231 ; 264  |        int N_PTT           :4;
                            17232 ; 265  |        int N_TT            :4;
                            17233 ; 266  |        int                 :20;
                            17234 ; 267  |    } B;
                            17235 ; 268  |    DWORD I;
                            17236 ; 269  |} hcsparams_type;
                            17237 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            17238 ; 271  |
                            17239 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            17240 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            17241 ; 274  |
                            17242 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            17243 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            17244 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            17245 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            17246 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            17247 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            17248 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            17249 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            17250 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            17251 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            17252 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            17253 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            17254 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            17255 ; 288  |
                            17256 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            17257 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            17258 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            17259 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            17260 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            17261 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            17262 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            17263 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            17264 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            17265 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            17266 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            17267 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            17268 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            17269 ; 302  |
                            17270 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            17271 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            17272 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            17273 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            17274 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            17275 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            17276 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            17277 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            17278 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            17279 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            17280 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            17281 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            17282 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            17283 ; 316  |
                            17284 ; 317  |typedef union               
                            17285 ; 318  |{
                            17286 ; 319  |    struct {
                            17287 ; 320  |        int RS              :1;
                            17288 ; 321  |        int RST             :1;
                            17289 ; 322  |        int FS0             :1;
                            17290 ; 323  |        int FS1             :1;
                            17291 ; 324  |        int PSE             :1;
                            17292 ; 325  |        int ASE             :1;
                            17293 ; 326  |        int IAA             :1;
                            17294 ; 327  |        int LR              :1;
                            17295 ; 328  |        int ASP0            :1;
                            17296 ; 329  |        int ASP1            :1;
                            17297 ; 330  |        int                 :1;
                            17298 ; 331  |        int ASPE            :1;
                            17299 ; 332  |        int                 :3;
                            17300 ; 333  |        int FS2             :1;
                            17301 ; 334  |        int ITC             :8;
                            17302 ; 335  |        int                 :24;
                            17303 ; 336  |    } B;
                            17304 ; 337  |    DWORD I;
                            17305 ; 338  |} usbcmd_type;
                            17306 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            17307 ; 340  |
                            17308 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            17309 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            17310 ; 343  |
                            17311 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            17312 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            17313 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            17314 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            17315 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            17316 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            17317 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            17318 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            17319 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            17320 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            17321 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            17322 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            17323 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            17324 ; 357  |
                            17325 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            17326 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            17327 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            17328 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            17329 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            17330 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            17331 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            17332 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            17333 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            17334 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            17335 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            17336 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            17337 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            17338 ; 371  |
                            17339 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            17340 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            17341 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            17342 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            17343 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            17344 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            17345 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            17346 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            17347 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            17348 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            17349 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                            17350 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            17351 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            17352 ; 385  |
                            17353 ; 386  |
                            17354 ; 387  |typedef union               
                            17355 ; 388  |{
                            17356 ; 389  |    struct {
                            17357 ; 390  |        int UI              :1;
                            17358 ; 391  |        int UEI             :1;
                            17359 ; 392  |        int PCI             :1;
                            17360 ; 393  |        int FRI             :1;
                            17361 ; 394  |        int SEI             :1;
                            17362 ; 395  |        int AAI             :1;
                            17363 ; 396  |        int URI             :1;
                            17364 ; 397  |        int STI             :1;
                            17365 ; 398  |        int SLI             :1;
                            17366 ; 399  |        int                 :3;
                            17367 ; 400  |        int HCH             :1;
                            17368 ; 401  |        int RCL             :1;
                            17369 ; 402  |        int PS              :1;
                            17370 ; 403  |        int AS              :1;
                            17371 ; 404  |        int                 :24;
                            17372 ; 405  |    } B;
                            17373 ; 406  |    DWORD I;
                            17374 ; 407  |} usbsts_type;
                            17375 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            17376 ; 409  |
                            17377 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            17378 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            17379 ; 412  |
                            17380 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            17381 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            17382 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            17383 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            17384 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            17385 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            17386 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            17387 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            17388 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            17389 ; 422  |
                            17390 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            17391 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            17392 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            17393 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            17394 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            17395 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            17396 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            17397 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            17398 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            17399 ; 432  |
                            17400 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            17401 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            17402 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            17403 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            17404 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            17405 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            17406 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            17407 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            17408 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            17409 ; 442  |
                            17410 ; 443  |
                            17411 ; 444  |typedef union               
                            17412 ; 445  |{
                            17413 ; 446  |    struct {
                            17414 ; 447  |        int UE              :1;
                            17415 ; 448  |        int UEE             :1;
                            17416 ; 449  |        int PCE             :1;
                            17417 ; 450  |        int FRE             :1;
                            17418 ; 451  |        int SEE             :1;
                            17419 ; 452  |        int AAE             :1;
                            17420 ; 453  |        int URE             :1;
                            17421 ; 454  |        int STE             :1;
                            17422 ; 455  |        int SLE             :1;
                            17423 ; 456  |        int                 :39;
                            17424 ; 457  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17425 ; 458  |    DWORD I;
                            17426 ; 459  |} usbintr_type;
                            17427 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            17428 ; 461  |
                            17429 ; 462  |
                            17430 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            17431 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            17432 ; 465  |
                            17433 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            17434 ; 467  |
                            17435 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            17436 ; 469  |
                            17437 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            17438 ; 471  |
                            17439 ; 472  |typedef union               
                            17440 ; 473  |{
                            17441 ; 474  |    struct {
                            17442 ; 475  |        int                 :25;
                            17443 ; 476  |        int ADD             :7;
                            17444 ; 477  |        int                 :16;
                            17445 ; 478  |    } B;
                            17446 ; 479  |    DWORD I;
                            17447 ; 480  |} devaddr_type;
                            17448 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            17449 ; 482  |
                            17450 ; 483  |
                            17451 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            17452 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            17453 ; 486  |
                            17454 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            17455 ; 488  |
                            17456 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            17457 ; 490  |
                            17458 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            17459 ; 492  |
                            17460 ; 493  |typedef union               
                            17461 ; 494  |{
                            17462 ; 495  |    struct {
                            17463 ; 496  |        int                 :10;
                            17464 ; 497  |        int ADD             :22;
                            17465 ; 498  |        int                 :16;
                            17466 ; 499  |    } B;
                            17467 ; 500  |    DWORD I;
                            17468 ; 501  |} endptlistaddr_type;
                            17469 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158))    
                            17470 ; 503  |
                            17471 ; 504  |
                            17472 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            17473 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            17474 ; 507  |
                            17475 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            17476 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            17477 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            17478 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            17479 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            17480 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            17481 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            17482 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            17483 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            17484 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            17485 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            17486 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            17487 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            17488 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            17489 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            17490 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            17491 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            17492 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            17493 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            17494 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            17495 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            17496 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            17497 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            17498 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            17499 ; 532  |
                            17500 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            17501 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            17502 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            17503 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            17504 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            17505 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            17506 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            17507 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            17508 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            17509 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            17510 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            17511 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            17512 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            17513 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            17514 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            17515 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            17516 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            17517 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            17518 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            17519 ; 552  |
                            17520 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            17521 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            17522 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            17523 ; 556  |
                            17524 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            17525 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            17526 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            17527 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            17528 ; 561  |
                            17529 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            17530 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            17531 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            17532 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            17533 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            17534 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            17535 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            17536 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            17537 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            17538 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            17539 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            17540 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            17541 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            17542 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            17543 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            17544 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            17545 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            17546 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            17547 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            17548 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            17549 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            17550 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            17551 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            17552 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            17553 ; 586  |
                            17554 ; 587  |typedef union               
                            17555 ; 588  |{
                            17556 ; 589  |    struct {
                            17557 ; 590  |        int CCS             :1;
                            17558 ; 591  |        int CSC             :1;
                            17559 ; 592  |        int PE              :1;
                            17560 ; 593  |        int PEC             :1;
                            17561 ; 594  |        int OCA             :1;
                            17562 ; 595  |        int OCC             :1;
                            17563 ; 596  |        int FPR             :1;
                            17564 ; 597  |        int SUSP            :1;
                            17565 ; 598  |        int PR              :1;
                            17566 ; 599  |        int HSP             :1;
                            17567 ; 600  |        int LS              :2;
                            17568 ; 601  |        int PP              :1;
                            17569 ; 602  |        int PO              :1;
                            17570 ; 603  |        int PIC             :2;
                            17571 ; 604  |        int PTC             :4;
                            17572 ; 605  |        int WKCN            :1;
                            17573 ; 606  |        int WKDS            :1;
                            17574 ; 607  |        int WKOC            :1;
                            17575 ; 608  |        int PHCD            :1;
                            17576 ; 609  |        int PFSC            :1;
                            17577 ; 610  |        int                 :1;
                            17578 ; 611  |        int PSPD            :2;
                            17579 ; 612  |        int                 :1;
                            17580 ; 613  |        int PTW             :1;
                            17581 ; 614  |        int STS             :1;
                            17582 ; 615  |        int PTS             :1;
                            17583 ; 616  |        int                 :16;
                            17584 ; 617  |    } B;
                            17585 ; 618  |    DWORD I;
                            17586 ; 619  |} portsc1_type;
                            17587 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            17588 ; 621  |
                            17589 ; 622  |
                            17590 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            17591 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            17592 ; 625  |
                            17593 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            17594 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            17595 ; 628  |
                            17596 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            17597 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            17598 ; 631  |
                            17599 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            17600 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                            17601 ; 634  |
                            17602 ; 635  |typedef union               
                            17603 ; 636  |{
                            17604 ; 637  |    struct {
                            17605 ; 638  |        int CM              :2;
                            17606 ; 639  |        int ES              :1;
                            17607 ; 640  |        int                 :46;
                            17608 ; 641  |    } B;
                            17609 ; 642  |    DWORD I;
                            17610 ; 643  |} usbmode_type;
                            17611 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            17612 ; 645  |
                            17613 ; 646  |
                            17614 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            17615 ; 648  |//  The following endpoint equates are common for the following registers
                            17616 ; 649  |
                            17617 ; 650  |#define ENDPOINT0_BITPOS (0)
                            17618 ; 651  |#define ENDPOINT1_BITPOS (1)
                            17619 ; 652  |#define ENDPOINT2_BITPOS (2)
                            17620 ; 653  |#define ENDPOINT3_BITPOS (3)
                            17621 ; 654  |#define ENDPOINT4_BITPOS (4)
                            17622 ; 655  |#define ENDPOINT5_BITPOS (5)
                            17623 ; 656  |#define ENDPOINT6_BITPOS (6)
                            17624 ; 657  |#define ENDPOINT7_BITPOS (7)
                            17625 ; 658  |#define ENDPOINT8_BITPOS (8)
                            17626 ; 659  |#define ENDPOINT9_BITPOS (9)
                            17627 ; 660  |#define ENDPOINT10_BITPOS (10)
                            17628 ; 661  |#define ENDPOINT11_BITPOS (11)
                            17629 ; 662  |#define ENDPOINT12_BITPOS (12)
                            17630 ; 663  |#define ENDPOINT13_BITPOS (13)
                            17631 ; 664  |#define ENDPOINT14_BITPOS (14)
                            17632 ; 665  |#define ENDPOINT15_BITPOS (15)
                            17633 ; 666  |
                            17634 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            17635 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            17636 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            17637 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            17638 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            17639 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            17640 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            17641 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            17642 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            17643 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            17644 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            17645 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            17646 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            17647 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            17648 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            17649 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            17650 ; 683  |
                            17651 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            17652 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            17653 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            17654 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            17655 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            17656 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            17657 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            17658 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            17659 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            17660 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            17661 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            17662 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            17663 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            17664 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            17665 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            17666 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            17667 ; 700  |
                            17668 ; 701  |typedef union               
                            17669 ; 702  |{
                            17670 ; 703  |    struct {
                            17671 ; 704  |        int EP0              :1;
                            17672 ; 705  |        int EP1              :1;
                            17673 ; 706  |        int EP2              :1;
                            17674 ; 707  |        int EP3              :1;
                            17675 ; 708  |        int EP4              :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17676 ; 709  |        int EP5              :1;
                            17677 ; 710  |        int EP6              :1;
                            17678 ; 711  |        int EP7              :1;
                            17679 ; 712  |        int EP8              :1;
                            17680 ; 713  |        int EP9              :1;
                            17681 ; 714  |        int EP10             :1;
                            17682 ; 715  |        int EP11             :1;
                            17683 ; 716  |        int EP12             :1;
                            17684 ; 717  |        int EP13             :1;
                            17685 ; 718  |        int EP14             :1;
                            17686 ; 719  |        int EP15             :1;
                            17687 ; 720  |        int                  :32;
                            17688 ; 721  |    } B;
                            17689 ; 722  |    DWORD I;
                            17690 ; 723  |} endpsetupstat_type;
                            17691 ; 724  |
                            17692 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac))    
                            17693 ; 726  |
                            17694 ; 727  |typedef union               
                            17695 ; 728  |{
                            17696 ; 729  |    struct {
                            17697 ; 730  |        int EP0              :1;
                            17698 ; 731  |        int EP1              :1;
                            17699 ; 732  |        int EP2              :1;
                            17700 ; 733  |        int EP3              :1;
                            17701 ; 734  |        int EP4              :1;
                            17702 ; 735  |        int EP5              :1;
                            17703 ; 736  |        int EP6              :1;
                            17704 ; 737  |        int EP7              :1;
                            17705 ; 738  |        int EP8              :1;
                            17706 ; 739  |        int EP9              :1;
                            17707 ; 740  |        int EP10             :1;
                            17708 ; 741  |        int EP11             :1;
                            17709 ; 742  |        int EP12             :1;
                            17710 ; 743  |        int EP13             :1;
                            17711 ; 744  |        int EP14             :1;
                            17712 ; 745  |        int EP15             :1;
                            17713 ; 746  |        int                  :8;
                            17714 ; 747  |    } B;
                            17715 ; 748  |    WORD I;
                            17716 ; 749  |} endpt_type;
                            17717 
                            17755 
                            17756 ; 750  |
                            17757 ; 751  |typedef union
                            17758 ; 752  |{
                            17759 ; 753  |   struct {
                            17760 ; 754  |       endpt_type  RX;
                            17761 ; 755  |       endpt_type  TX;
                            17762 ; 756  |   } W;
                            17763 ; 757  |   DWORD DW;
                            17764 ; 758  |} endptrxtx_type;
                            17765 ; 759  |
                            17766 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))    
                            17767 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))    
                            17768 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))    
                            17769 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))    
                            17770 ; 764  |
                            17771 ; 765  |
                            17772 ; 766  |
                            17773 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            17774 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            17775 ; 769  |
                            17776 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            17777 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            17778 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            17779 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            17780 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            17781 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            17782 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            17783 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            17784 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            17785 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            17786 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            17787 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            17788 ; 782  |
                            17789 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            17790 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            17791 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            17792 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            17793 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            17794 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            17795 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            17796 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            17797 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            17798 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            17799 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            17800 ; 794  |
                            17801 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            17802 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            17803 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            17804 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            17805 ; 799  |
                            17806 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            17807 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            17808 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            17809 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            17810 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            17811 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            17812 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            17813 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            17814 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            17815 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            17816 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            17817 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            17818 ; 812  |
                            17819 ; 813  |
                            17820 ; 814  |typedef union               
                            17821 ; 815  |{
                            17822 ; 816  |    struct {
                            17823 ; 817  |        int RXS             :1;
                            17824 ; 818  |        int RXD             :1;
                            17825 ; 819  |        int RXT             :2;
                            17826 ; 820  |        int                 :1;
                            17827 ; 821  |        int RXI             :1;
                            17828 ; 822  |        int RXR             :1;
                            17829 ; 823  |        int RXE             :1;
                            17830 ; 824  |        int                 :8;
                            17831 ; 825  |        int TXS             :1;
                            17832 ; 826  |        int TXD             :1;
                            17833 ; 827  |        int TXT             :2;
                            17834 ; 828  |        int                 :1;
                            17835 ; 829  |        int TXI             :1;
                            17836 ; 830  |        int TXR             :1;
                            17837 ; 831  |        int TXE             :1;
                            17838 ; 832  |        int                 :24;
                            17839 ; 833  |    } B;
                            17840 ; 834  |    DWORD I;
                            17841 ; 835  |} endptctrl_type;
                            17842 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)))    
                            17843 ; 837  |
                            17844 ; 838  |#endif
                            17845 ; 839  |
                            17846 ; 840  |
                            17847 
                            17849 
                            17850 ; 37   |#include "regsusb20phy.h"
                            17851 
                            17853 
                            17854 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17855 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            17856 ; 3    |//;  File        : regsusbphy.inc
                            17857 ; 4    |//;  Description : USB20 PHY Register definition
                            17858 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            17859 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17860 ; 7    |
                            17861 ; 8    |// The following naming conventions are followed in this file.
                            17862 ; 9    |// All registers are named using the format...
                            17863 ; 10   |//     HW_<module>_<regname>
                            17864 ; 11   |// where <module> is the module name which can be any of the following...
                            17865 ; 12   |//     USB20
                            17866 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            17867 ; 14   |// module name includes a number starting from 0 for the first instance of
                            17868 ; 15   |// that module)
                            17869 ; 16   |// <regname> is the specific register within that module
                            17870 ; 17   |// We also define the following...
                            17871 ; 18   |//     HW_<module>_<regname>_BITPOS
                            17872 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            17873 ; 20   |//     HW_<module>_<regname>_SETMASK
                            17874 ; 21   |// which does something else, and
                            17875 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            17876 ; 23   |// which does something else.
                            17877 ; 24   |// Other rules
                            17878 ; 25   |//     All caps
                            17879 ; 26   |//     Numeric identifiers start at 0
                            17880 ; 27   |
                            17881 ; 28   |#if !(defined(regsusbphyinc))
                            17882 ; 29   |#define regsusbphyinc 1
                            17883 ; 30   |
                            17884 ; 31   |#include "types.h"
                            17885 
                            17887 
                            17888 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17889 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            17890 ; 3    |//
                            17891 ; 4    |// Filename: types.h
                            17892 ; 5    |// Description: Standard data types
                            17893 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17894 ; 7    |
                            17895 ; 8    |#ifndef _TYPES_H
                            17896 ; 9    |#define _TYPES_H
                            17897 ; 10   |
                            17898 ; 11   |// TODO:  move this outta here!
                            17899 ; 12   |#if !defined(NOERROR)
                            17900 ; 13   |#define NOERROR 0
                            17901 ; 14   |#define SUCCESS 0
                            17902 ; 15   |#endif 
                            17903 ; 16   |#if !defined(SUCCESS)
                            17904 ; 17   |#define SUCCESS  0
                            17905 ; 18   |#endif
                            17906 ; 19   |#if !defined(ERROR)
                            17907 ; 20   |#define ERROR   -1
                            17908 ; 21   |#endif
                            17909 ; 22   |#if !defined(FALSE)
                            17910 ; 23   |#define FALSE 0
                            17911 ; 24   |#endif
                            17912 ; 25   |#if !defined(TRUE)
                            17913 ; 26   |#define TRUE  1
                            17914 ; 27   |#endif
                            17915 ; 28   |
                            17916 ; 29   |#if !defined(NULL)
                            17917 ; 30   |#define NULL 0
                            17918 ; 31   |#endif
                            17919 ; 32   |
                            17920 ; 33   |#define MAX_INT     0x7FFFFF
                            17921 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            17922 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            17923 ; 36   |#define MAX_ULONG   (-1) 
                            17924 ; 37   |
                            17925 ; 38   |#define WORD_SIZE   24              // word size in bits
                            17926 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            17927 ; 40   |
                            17928 ; 41   |
                            17929 ; 42   |#define BYTE    unsigned char       // btVarName
                            17930 ; 43   |#define CHAR    signed char         // cVarName
                            17931 ; 44   |#define USHORT  unsigned short      // usVarName
                            17932 ; 45   |#define SHORT   unsigned short      // sVarName
                            17933 ; 46   |#define WORD    unsigned int        // wVarName
                            17934 ; 47   |#define INT     signed int          // iVarName
                            17935 ; 48   |#define DWORD   unsigned long       // dwVarName
                            17936 ; 49   |#define LONG    signed long         // lVarName
                            17937 ; 50   |#define BOOL    unsigned int        // bVarName
                            17938 ; 51   |#define FRACT   _fract              // frVarName
                            17939 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            17940 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            17941 ; 54   |#define FLOAT   float               // fVarName
                            17942 ; 55   |#define DBL     double              // dVarName
                            17943 ; 56   |#define ENUM    enum                // eVarName
                            17944 ; 57   |#define CMX     _complex            // cmxVarName
                            17945 ; 58   |typedef WORD UCS3;                   // 
                            17946 ; 59   |
                            17947 ; 60   |#define UINT16  unsigned short
                            17948 ; 61   |#define UINT8   unsigned char   
                            17949 ; 62   |#define UINT32  unsigned long
                            17950 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            17951 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            17952 ; 65   |#define WCHAR   UINT16
                            17953 ; 66   |
                            17954 ; 67   |//UINT128 is 16 bytes or 6 words
                            17955 ; 68   |typedef struct UINT128_3500 {   
                            17956 ; 69   |    int val[6];     
                            17957 ; 70   |} UINT128_3500;
                            17958 ; 71   |
                            17959 ; 72   |#define UINT128   UINT128_3500
                            17960 ; 73   |
                            17961 ; 74   |// Little endian word packed byte strings:   
                            17962 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17963 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17964 ; 77   |// Little endian word packed byte strings:   
                            17965 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17966 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17967 ; 80   |
                            17968 ; 81   |// Declare Memory Spaces To Use When Coding
                            17969 ; 82   |// A. Sector Buffers
                            17970 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            17971 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            17972 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            17973 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            17974 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            17975 ; 88   |// B. Media DDI Memory
                            17976 ; 89   |#define MEDIA_DDI_MEM _Y
                            17977 ; 90   |
                            17978 ; 91   |
                            17979 ; 92   |
                            17980 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            17981 ; 94   |// Examples of circular pointers:
                            17982 ; 95   |//    INT CIRC cpiVarName
                            17983 ; 96   |//    DWORD CIRC cpdwVarName
                            17984 ; 97   |
                            17985 ; 98   |#define RETCODE INT                 // rcVarName
                            17986 ; 99   |
                            17987 ; 100  |// generic bitfield structure
                            17988 ; 101  |struct Bitfield {
                            17989 ; 102  |    unsigned int B0  :1;
                            17990 ; 103  |    unsigned int B1  :1;
                            17991 ; 104  |    unsigned int B2  :1;
                            17992 ; 105  |    unsigned int B3  :1;
                            17993 ; 106  |    unsigned int B4  :1;
                            17994 ; 107  |    unsigned int B5  :1;
                            17995 ; 108  |    unsigned int B6  :1;
                            17996 ; 109  |    unsigned int B7  :1;
                            17997 ; 110  |    unsigned int B8  :1;
                            17998 ; 111  |    unsigned int B9  :1;
                            17999 ; 112  |    unsigned int B10 :1;
                            18000 ; 113  |    unsigned int B11 :1;
                            18001 ; 114  |    unsigned int B12 :1;
                            18002 ; 115  |    unsigned int B13 :1;
                            18003 ; 116  |    unsigned int B14 :1;
                            18004 ; 117  |    unsigned int B15 :1;
                            18005 ; 118  |    unsigned int B16 :1;
                            18006 ; 119  |    unsigned int B17 :1;
                            18007 ; 120  |    unsigned int B18 :1;
                            18008 ; 121  |    unsigned int B19 :1;
                            18009 ; 122  |    unsigned int B20 :1;
                            18010 ; 123  |    unsigned int B21 :1;
                            18011 ; 124  |    unsigned int B22 :1;
                            18012 ; 125  |    unsigned int B23 :1;
                            18013 ; 126  |};
                            18014 ; 127  |
                            18015 ; 128  |union BitInt {
                            18016 ; 129  |        struct Bitfield B;
                            18017 ; 130  |        int        I;
                            18018 ; 131  |};
                            18019 ; 132  |
                            18020 ; 133  |#define MAX_MSG_LENGTH 10
                            18021 ; 134  |struct CMessage
                            18022 ; 135  |{
                            18023 ; 136  |        unsigned int m_uLength;
                            18024 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            18025 ; 138  |};
                            18026 ; 139  |
                            18027 ; 140  |typedef struct {
                            18028 ; 141  |    WORD m_wLength;
                            18029 ; 142  |    WORD m_wMessage;
                            18030 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            18031 ; 144  |} Message;
                            18032 ; 145  |
                            18033 ; 146  |struct MessageQueueDescriptor
                            18034 ; 147  |{
                            18035 ; 148  |        int *m_pBase;
                            18036 ; 149  |        int m_iModulo;
                            18037 ; 150  |        int m_iSize;
                            18038 ; 151  |        int *m_pHead;
                            18039 ; 152  |        int *m_pTail;
                            18040 ; 153  |};
                            18041 ; 154  |
                            18042 ; 155  |struct ModuleEntry
                            18043 ; 156  |{
                            18044 ; 157  |    int m_iSignaledEventMask;
                            18045 ; 158  |    int m_iWaitEventMask;
                            18046 ; 159  |    int m_iResourceOfCode;
                            18047 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            18048 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            18049 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            18050 ; 163  |    int m_uTimeOutHigh;
                            18051 ; 164  |    int m_uTimeOutLow;
                            18052 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            18053 ; 166  |};
                            18054 ; 167  |
                            18055 ; 168  |union WaitMask{
                            18056 ; 169  |    struct B{
                            18057 ; 170  |        unsigned int m_bNone     :1;
                            18058 ; 171  |        unsigned int m_bMessage  :1;
                            18059 ; 172  |        unsigned int m_bTimer    :1;
                            18060 ; 173  |        unsigned int m_bButton   :1;
                            18061 ; 174  |    } B;
                            18062 ; 175  |    int I;
                            18063 ; 176  |} ;
                            18064 ; 177  |
                            18065 ; 178  |
                            18066 ; 179  |struct Button {
                            18067 ; 180  |        WORD wButtonEvent;
                            18068 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            18069 ; 182  |};
                            18070 ; 183  |
                            18071 ; 184  |struct Message {
                            18072 ; 185  |        WORD wMsgLength;
                            18073 ; 186  |        WORD wMsgCommand;
                            18074 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            18075 ; 188  |};
                            18076 ; 189  |
                            18077 ; 190  |union EventTypes {
                            18078 ; 191  |        struct CMessage msg;
                            18079 ; 192  |        struct Button Button ;
                            18080 ; 193  |        struct Message Message;
                            18081 ; 194  |};
                            18082 ; 195  |
                            18083 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            18084 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            18085 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            18086 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            18087 ; 200  |
                            18088 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            18089 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            18090 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            18091 ; 204  |
                            18092 ; 205  |#if DEBUG
                            18093 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            18094 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            18095 ; 208  |#else 
                            18096 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            18097 ; 210  |#define DebugBuildAssert(x)    
                            18098 ; 211  |#endif
                            18099 ; 212  |
                            18100 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            18101 ; 214  |//  #pragma asm
                            18102 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            18103 ; 216  |//  #pragma endasm
                            18104 ; 217  |
                            18105 ; 218  |
                            18106 ; 219  |#ifdef COLOR_262K
                            18107 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            18108 ; 221  |#elif defined(COLOR_65K)
                            18109 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            18110 ; 223  |#else
                            18111 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            18112 ; 225  |#endif
                            18113 ; 226  |    
                            18114 ; 227  |#endif // #ifndef _TYPES_H
                            18115 
                            18117 
                            18118 ; 32   |
                            18119 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18120 ; 34   |//   USB2.0 PHY STMP Registers 
                            18121 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18122 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            18123 ; 37   |
                            18124 ; 38   |
                            18125 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            18126 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            18127 ; 41   |
                            18128 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            18129 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            18130 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            18131 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            18132 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            18133 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            18134 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            18135 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            18136 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            18137 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            18138 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            18139 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            18140 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            18141 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            18142 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            18143 ; 57   |
                            18144 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            18145 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            18146 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            18147 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            18148 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            18149 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            18150 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            18151 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            18152 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            18153 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            18154 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            18155 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            18156 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            18157 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            18158 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            18159 ; 73   |
                            18160 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            18161 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            18162 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            18163 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            18164 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            18165 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            18166 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            18167 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            18168 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            18169 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            18170 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            18171 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            18172 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            18173 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            18174 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            18175 ; 89   |
                            18176 ; 90   |typedef union               
                            18177 ; 91   |{
                            18178 ; 92   |    struct {
                            18179 ; 93   |        int RSVD0          :5;
                            18180 ; 94   |        int TXDISCON1500   :1;
                            18181 ; 95   |        int PLLVCOPWD      :1;
                            18182 ; 96   |        int PLLVCPPWD      :1;
                            18183 ; 97   |        int RSVD1          :2;
                            18184 ; 98   |        int TXPWDFS        :1;
                            18185 ; 99   |        int TXPWDIBIAS     :1;
                            18186 ; 100  |        int TXPWDV2I       :1;
                            18187 ; 101  |        int TXPWDVBG       :1;
                            18188 ; 102  |        int TXPWDCOMP      :1;
                            18189 ; 103  |        int RSVD2          :1;
                            18190 ; 104  |        int RXPWDDISCONDET :1;
                            18191 ; 105  |        int RXPWDENV       :1;
                            18192 ; 106  |        int RXPWD1PT1      :1;
                            18193 ; 107  |        int RXPWDDIFF      :1;
                            18194 ; 108  |        int RXPWDRX        :1;
                            18195 ; 109  |        int RSVD3          :1;
                            18196 ; 110  |        int PWDIBIAS       :1;
                            18197 ; 111  |        int REGRESET       :1;
                            18198 ; 112  |    } B;
                            18199 ; 113  |    int I;
                            18200 ; 114  |} usbphypwd_type;
                            18201 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB PHY Powerdown Register */
                            18202 ; 116  |
                            18203 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            18204 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            18205 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            18206 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            18207 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            18208 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            18209 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            18210 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            18211 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            18212 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            18213 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            18214 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            18215 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            18216 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            18217 ; 131  |
                            18218 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18219 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            18220 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            18221 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            18222 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            18223 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            18224 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            18225 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            18226 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            18227 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            18228 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            18229 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            18230 ; 144  |
                            18231 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXCAL1500_BITPOS)
                            18232 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXENCAL1500_BITPOS)
                            18233 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXHSXCVR_BITPOS)
                            18234 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHYTX_TXCALIBRATE_BITPOS)
                            18235 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DN_BITPOS)
                            18236 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DN_BITPOS)
                            18237 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXHSTERM_BITPOS)
                            18238 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_BITPOS)
                            18239 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DP_BITPOS)
                            18240 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DP_BITPOS)
                            18241 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSHIZ_BITPOS)
                            18242 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_TXCOMPOUT_BITPOS)
                            18243 ; 157  |
                            18244 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            18245 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            18246 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            18247 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            18248 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            18249 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            18250 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            18251 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            18252 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            18253 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            18254 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            18255 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            18256 ; 170  |
                            18257 ; 171  |typedef union               
                            18258 ; 172  |{
                            18259 ; 173  |    struct {
                            18260 ; 174  |        int TXCAL1500          :4;
                            18261 ; 175  |        int RSVD0              :1;
                            18262 ; 176  |        int TXENCAL1500        :1;
                            18263 ; 177  |        int TXHSXCVR           :1;
                            18264 ; 178  |        int TXCALIBRATE        :1;
                            18265 ; 179  |        int TXCAL45DN          :4;
                            18266 ; 180  |        int RSVD1              :1;
                            18267 ; 181  |        int TXENCAL45DN        :1;
                            18268 ; 182  |        int TXHSTERM           :1;
                            18269 ; 183  |        int TXSKEW             :1;
                            18270 ; 184  |        int TXCAL45DP          :4;
                            18271 ; 185  |        int RSVD2              :1;
                            18272 ; 186  |        int TXENCAL45DP        :1;
                            18273 ; 187  |        int TXFSHIZ            :1;
                            18274 ; 188  |        int TXCOMPOUT          :1;
                            18275 ; 189  |    } B;
                            18276 ; 190  |    int I;
                            18277 ; 191  |} usbphytx_type;
                            18278 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            18279 ; 193  |
                            18280 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            18281 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            18282 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            18283 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            18284 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            18285 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            18286 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            18287 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            18288 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            18289 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            18290 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            18291 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            18292 ; 206  |
                            18293 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            18294 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            18295 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            18296 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                            18297 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            18298 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            18299 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            18300 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            18301 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            18302 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            18303 ; 217  |
                            18304 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPLL_PLLV2ISEL_BITPOS)
                            18305 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHYPLL_PLLCPDBLIP_BITPOS)
                            18306 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK2_BITPOS)
                            18307 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK24_BITPOS)
                            18308 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCPNSEL_BITPOS)
                            18309 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS)
                            18310 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPLL_PLLPFDRST_BITPOS)
                            18311 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            18312 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOKSTART_BITPOS)
                            18313 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            18314 ; 228  |
                            18315 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            18316 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            18317 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            18318 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            18319 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            18320 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            18321 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            18322 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            18323 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            18324 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            18325 ; 239  |
                            18326 ; 240  |typedef union               
                            18327 ; 241  |{
                            18328 ; 242  |    struct {
                            18329 ; 243  |        int PLLV2ISEL        :4;
                            18330 ; 244  |        int RSVD0            :1;
                            18331 ; 245  |        int PLLCPDBLIP       :1;
                            18332 ; 246  |        int PLLVCOCLK2       :1;
                            18333 ; 247  |        int PLLVCOCLK24      :1;
                            18334 ; 248  |        int PLLCPNSEL        :4;
                            18335 ; 249  |        int PLLCLKDIVSEL     :4;
                            18336 ; 250  |        int RSVD1            :4;
                            18337 ; 251  |        int PLLPFDRST        :1;
                            18338 ; 252  |        int PLLCPSHORTLFR    :1;
                            18339 ; 253  |        int PLLVCOKSTART     :1;
                            18340 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            18341 ; 255  |    } B;
                            18342 ; 256  |    int I;
                            18343 ; 257  |} usbphypll_type;
                            18344 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                            18345 ; 259  |
                            18346 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            18347 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            18348 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                            18349 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            18350 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            18351 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            18352 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            18353 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            18354 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            18355 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            18356 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            18357 ; 271  |
                            18358 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            18359 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            18360 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            18361 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            18362 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            18363 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            18364 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            18365 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            18366 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            18367 ; 281  |
                            18368 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            18369 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_BITPOS)
                            18370 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_BITPOS)
                            18371 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLLKTIMECTL_BITPOS)
                            18372 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKDIVCTL_BITPOS)
                            18373 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives actual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            18374 ; 288  |//              480Mhz/7 =68.57Mhz
                            18375 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            18376 ; 290  |
                            18377 ; 291  |//              480Mhz/8 ~60Mhz
                            18378 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            18379 ; 293  |
                            18380 ; 294  |//              480Mhz/9 =53.3Mhz
                            18381 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            18382 ; 296  |
                            18383 ; 297  |//              480Mhz/10 =48Mhz
                            18384 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            18385 ; 299  |
                            18386 ; 300  |
                            18387 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOSTMODETEST_BITPOS)
                            18388 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FSCKSOURCESEL_BITPOS)
                            18389 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGRXDBYPASS_BITPOS)
                            18390 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_BITPOS)
                            18391 ; 305  |
                            18392 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            18393 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            18394 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            18395 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            18396 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            18397 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                            18398 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            18399 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            18400 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            18401 ; 315  |
                            18402 ; 316  |typedef union               
                            18403 ; 317  |{
                            18404 ; 318  |    struct {
                            18405 ; 319  |     int ENVADJ               :4;
                            18406 ; 320  |     int DISCONADJ            :4;
                            18407 ; 321  |     int DEBUGMODE            :4;
                            18408 ; 322  |     int PLLLKTIMECTL         :4;
                            18409 ; 323  |     int PLLCKDIVCTL          :4;
                            18410 ; 324  |     int HOSTMODETEST         :1;
                            18411 ; 325  |     int FSCKSOURCESEL        :1;
                            18412 ; 326  |     int REGRXDBYPASS         :1;
                            18413 ; 327  |     int PLLLOCKED            :1;
                            18414 ; 328  |    } B;
                            18415 ; 329  |    int I;
                            18416 ; 330  |} usbphyrx_type;
                            18417 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            18418 ; 332  |
                            18419 ; 333  |#endif
                            18420 ; 334  |
                            18421 
                            18423 
                            18424 ; 38   |
                            18425 ; 39   |
                            18426 ; 40   |#endif // if (!@def(hwequ))
                            18427 ; 41   |
                            18428 
                            18430 
                            18431 ; 12   |
                            18432 ; 13   |// Initialize backlight state to true -- used when no settings are saved
                            18433 ; 14   |INT g_iBackLightState=BACKLIGHT_ON;
                            18434 
                            18435 
Y:0000                      18436         org     y,".ydatabacklightmenu",init:
                            18437 Fg_iBackLightState:
Y:0000 000001               18438         dc      $000001
                            18441 
                            18442 ; 15   |
                            18443 ; 16   |
                            18444 ; 17   |/////////////////////////////////////////////////////////////////////////////////////////
                            18445 ; 18   |//
                            18446 ; 19   |//>  Name:          int _reentrant BacklightMenu(int a, int b, int *pPtr)
                            18447 ; 20   |//
                            18448 ; 21   |//   Type:          Function (code bank callable)
                            18449 ; 22   |//
                            18450 ; 23   |//   Description:   This function is the backlight menu
                            18451 ; 24   |//
                            18452 ; 25   |//   Inputs:        none used.
                            18453 ; 26   |//
                            18454 ; 27   |//   Outputs:       messages
                            18455 ; 28   |//
                            18456 ; 29   |//   Notes:         Will stay here until menu button is pressed
                            18457 ; 30   |//<
                            18458 ; 31   |//////////////////////////////////////////////////////////////////////////////////////////
                            18459 ; 32   |int _reentrant BackLightMenu(int a, int b, int *pPtr)
                            18460 ; 33   |{
                            18461 
P:0000                      18462         org     p,".ptextbacklightmenu":
                            18469 FBackLightMenu:
P:0000 055F7C         2    218470         movec   ssh,y:(r7)+
P:0001 3F0500         2    418473         move    #5,n7
P:0002 000000         2    618474         nop
P:0003 204F00         2    818475         move    (r7)+n7
                            18540 
                            18541 ; 34   |        union DisplayHints DisplayHint;
                            18542 ; 35   |        INT  iEvent;
                            18543 ; 36   |    BOOL bDone = FALSE;
                            18544 
P:0004 260000         2   1018546         move    #0,y0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0005 77F400 FFFFFC  3   1318548         move    #-4,n7
P:0007 000000         2   1518549         nop
P:0008 4E6F00         4   1918550         move    y0,y:(r7+n7)
                            18555 
                            18556 ; 37   |    BOOL bSendToPlayerStateMachine;
                            18557 ; 38   |
                            18558 ; 39   |    // this is required to get the message into the playerstatemachine
                            18559 ; 40   |        // casted to avoid pointer mismatch warnings
                            18560 ; 41   |        pPtr = (int *) &gEventInfo;
                            18561 
P:0009 66F400 rrrrrr  3   2218563         move    #FgEventInfo,r6
P:000B 77F400 FFFFFD  3   2518566         move    #-3,n7
P:000D 000000         2   2718567         nop
P:000E 6E6F00         4   3118568         move    r6,y:(r7+n7)
                            18571 
                            18572 ; 42   |
                            18573 ; 43   |    a;b;//here to prevent parameter not used messages.
                            18574 ; 44   |
                            18575 ; 45   |    //Lets initially clear screen and display all
                            18576 ; 46   |    DisplayHint.I = CONTRAST_MENU_DISPLAY_ALL|(1<<DISPLAY_CLEAR_DISPLAY_BITPOS);
                            18577 
P:000F 54F400 707E11  3   3418579         move    #7372305,a1
P:0011 77F400 FFFFFB  3   3718580         move    #-5,n7
P:0013 000000         2   3918581         nop
P:0014 5C6F00         4   4318582         move    a1,y:(r7+n7)
                            18583 
                            18584 ; 47   |
                            18585 ; 48   |    while(!bDone)
                            18586 
P:0015 0AF080 rrrrrr  6   4918588         jmp     L42
                            18589 
                            18590 ; 49   |        {
                            18591 ; 50   |        
                            18592 ; 51   |        DisplayHint.I &= (CONTRAST_MENU_DISPLAY_ALL|(1<<DISPLAY_CLEAR_DISPLAY_BITPOS));
                            18593 
                            18595 L23:
P:0017 77F400 FFFFFB  3   5218598         move    #-5,n7
P:0019 000000         2   5418599         nop
P:001A 5FEF00         4   5818600         move    y:(r7+n7),b
P:001B 44F400 707E11  3   6118601         move    #7372305,x0
P:001D 20004E         2   6318602         and     x0,b
P:001E 5D6F00         4   6718604         move    b1,y:(r7+n7)
                            18605 
                            18606 ; 52   |        //wait on either a EVENT_BUTTON or EVENT_MESSAGE
                            18607 ; 53   |        iEvent = SysWaitOnEvent(EVENT_MESSAGE|EVENT_BUTTON,&gEventInfo.msg,DisplayHint.I ? 1 : -1);        
                            18608 
P:001F 2B0000         2   6918610         move    #0,b2
P:0020 20000B         2   7118611         tst     b
P:0021 57F400 000001  3   7418612         move    #>1,b
P:0023 0AF0A2 rrrrrr  6   8018613         jne     L44
P:0025 57F400 FFFFFF  3   8318614         move    #>-1,b
P:0027 77F400 FFFFFC  3   8618615 L44:    move    #-4,n7
P:0029 000000         2   8818616         nop
P:002A 5C6F00         4   9218617         move    a1,y:(r7+n7)
P:002B 60F400 rrrrrr  3   9518620         move    #FgEventInfo,r0
P:002D 56F400 00000A  3   9818621         move    #>10,a
P:002F 0BF080 rrrrrr  6  10418622         jsr     SysWaitOnEvent
                            18625 
                            18626 ; 54   |
                            18627 ; 55   |        //This block is for handling the player state machine related messages.  
                            18628 ; 56   |        bSendToPlayerStateMachine=TRUE;
                            18629 
P:0031 44F400 000001  3  10718631         move    #>1,x0
P:0033 47F400 707E10  3  11018633         move    #7372304,y1
                            18634 
                            18635 ; 57   |                switch(iEvent)
                            18636 
P:0035 200009         2  11218638         tfr     a,b
P:0036 21E500         2  11418639         move    b,x1
P:0037 46F400 000008  3  11718640         move    #>8,y0
P:0039 46F45D 000004  3  12018641         cmp     y0,b    #>4,y0
P:003B 0AF0AA rrrrrr  6  12618642         jeq     L25
P:003D 20005D         2  12818643         cmp     y0,b
P:003E 0AF0A2 rrrrrr  6  13418644         jne     L40
                            18645 
                            18646 ; 58   |                {
                            18647 ; 59   |                        case EVENT_TIMER:
                            18648 
P:0040 77F400 FFFFFE  3  13718650         move    #-2,n7
P:0042 000000         2  13918651         nop
P:0043 4D6F00         4  14318652         move    x1,y:(r7+n7)
                            18655 
                            18656 ; 60   |                SysCallFunction(RSRC_DISPLAY_CODE_BANK,RefreshDisplay,DisplayHint.I,1,0);
                            18657 
P:0044 77F400 FFFFFB  3  14618659         move    #-5,n7
P:0046 000000         2  14818660         nop
P:0047 5FEF00         4  15218661         move    y:(r7+n7),b
P:0048 3A0000         2  15418662         move    #0,n2
P:0049 56F400 000022  3  15718663         move    #>34,a
P:004B 235400         2  15918664         move    n2,r4
P:004C 60F400 rrrrrr  3  16218666         move    #FRefreshDisplay,r0
P:004E 21AF00         2  16418667         move    b1,b
P:004F 0BF080 rrrrrr  6  17018668         jsr     SysCallFunction
P:0051 340000         2  17218669         move    #0,r4
P:0052 56F400 000022  3  17518670         move    #>34,a
                            18671 
                            18672 ; 61   |                SysCallFunction(RSRC_DISPLAY_CODE_BANK,DisplayBacklight,TRUE, 0,0);
                            18673 
P:0054 240000         2  17718675         move    #0,x0
P:0055 57F400 000001  3  18018676         move    #>1,b
P:0057 60F400 rrrrrr  3  18318677         move    #FDisplayBacklight,r0
P:0059 0BF080 rrrrrr  6  18918678         jsr     SysCallFunction
P:005B 77F400 FFFFFE  3  19218679         move    #-2,n7
P:005D 000000         2  19418680         nop
P:005E 4DEF00         4  19818681         move    y:(r7+n7),x1
                            18684 
                            18685 ; 62   |
                            18686 ; 63   |                //after displaying, clear all display hints
                            18687 ; 64   |                DisplayHint.I=0;
                            18688 
P:005F 20001B         2  20018690         clr     b   
P:0060 77F400 FFFFFB  3  20318691         move    #-5,n7
P:0062 000000         2  20518692         nop
P:0063 5D6F00         4  20918693         move    b1,y:(r7+n7)
P:0064 47F400 707E10  3  21218694         move    #7372304,y1
                            18695 
                            18696 ; 65   |                bSendToPlayerStateMachine=FALSE;
                            18697 
P:0066 0AF080 rrrrrr  6  21818699         jmp     L37
                            18700 
                            18701 ; 66   |                                break;
                            18702 ; 67   |                case EVENT_BUTTON:
                            18703 
                            18705 L25:
P:0068 77F400 FFFFFE  3  22118707         move    #-2,n7
P:006A 000000         2  22318708         nop
P:006B 4D6F00         4  22718709         move    x1,y:(r7+n7)
P:006C 045FA0         2  22918712         movec   m0,n7
P:006D 000000         2  23118713         nop
P:006E 4C6F00         4  23518714         move    x0,y:(r7+n7)
                            18717 
                            18718 ; 68   |                        // button pressed, so restart timer if enabled
                            18719 ; 69   |                UpdateAutoShutdownTimer();
                            18720 
P:006F 0BF080 rrrrrr  6  24118722         jsr     FUpdateAutoShutdownTimer
P:0071 77F400 FFFFFE  3  24418723         move    #-2,n7
P:0073 000000         2  24618724         nop
P:0074 4DEF00         4  25018725         move    y:(r7+n7),x1
P:0075 045FA0         2  25218728         movec   m0,n7
P:0076 000000         2  25418729         nop
P:0077 4CEF00         4  25818730         move    y:(r7+n7),x0
                            18733 
                            18734 ; 70   |#ifdef BACKLIGHT
                            18735 ; 71   |                                // turn on backlight when button is pressed.
                            18736 ; 72   |                                if (g_iBackLightState==BACKLIGHT_ON)
                            18737 
P:0078 5EF000 rrrrrr  3  26118739         move    y:Fg_iBackLightState,a
P:007A 47F400 000001  3  26418740         move    #>1,y1
P:007C 200075         2  26618741         cmp     y1,a
P:007D 0AF0A2 rrrrrr  6  27218742         jne     L26
                            18747 
                            18748 ; 73   |                                {
                            18749 ; 74   |                        SysPostMessage(2,LCD_BACKLIGHT_ON);
                            18750 
P:007F 44F400 030010  3  27518752         move    #196624,x0
P:0081 4C5F00         2  27718753         move    x0,y:(r7)+
P:0082 290200         2  27918755         move    #2,b0
P:0083 595F00         2  28118756         move    b0,y:(r7)+
P:0084 0BF080 rrrrrr  6  28718758         jsr     FSysPostMessage
P:0086 205700         2  28918759         move    (r7)-
P:0087 205700         2  29118761         move    (r7)-
                            18763 
                            18764 ; 75   |                    SysPostMessage(6,SOFT_TIMER_SET_TIMER,TIMER_BACKLIGHT,1,BACKLIGHT_TIME,MENU_MSG_TURN_OFF_BACKLIGHT);
                            18765 
P:0088 2C0100         2  29318767         move    #1,a1
P:0089 57F400 06001A  3  29618768         move    #393242,b
P:008B 5F5F00         2  29818769         move    b,y:(r7)+
P:008C 50F400 001388  3  30118771         move    #5000,a0
P:008E 585F00         2  30318772         move    a0,y:(r7)+
P:008F 5C5F00         2  30518774         move    a1,y:(r7)+
P:0090 290500         2  30718776         move    #5,b0
P:0091 595F00         2  30918777         move    b0,y:(r7)+
P:0092 56F400 090001  3  31218779         move    #589825,a
P:0094 5E5F00         2  31418780         move    a,y:(r7)+
P:0095 290600         2  31618782         move    #6,b0
P:0096 595F00         2  31818783         move    b0,y:(r7)+
P:0097 0BF080 rrrrrr  6  32418785         jsr     FSysPostMessage
P:0099 3F0600         2  32618786         move    #6,n7
P:009A 000000         2  32818787         nop
P:009B 204700         2  33018788         move    (r7)-n7
                            18790 
                            18791 ; 76   |                    SysWaitOnEvent(0,0,0);
                            18792 
P:009C 300000         2  33218794         move    #0,r0
P:009D 200013         2  33418795         clr     a   
P:009E 20001B         2  33618796         clr     b   
P:009F 0BF080 rrrrrr  6  34218797         jsr     SysWaitOnEvent
P:00A1 77F400 FFFFFE  3  34518798         move    #-2,n7
P:00A3 000000         2  34718799         nop
P:00A4 4DEF00         4  35118800         move    y:(r7+n7),x1
P:00A5 045FA0         2  35318803         movec   m0,n7
P:00A6 000000         2  35518804         nop
P:00A7 4CEF00         4  35918805         move    y:(r7+n7),x0
                            18808 
                            18809 ; 77   |                                } 
                            18810 ; 78   |#endif
                            18811 ; 79   |                    //remember the last button event (mostly for coming out of FFWD and RWND)           
                            18812 ; 80   |                    switch(g_wLastButton = gEventInfo.Button.wButtonEvent)
                            18813 
P:00A8 5EF000 rrrrrr  3  36218815 L26:    move    y:FgEventInfo,a
P:00AA 5C7000 rrrrrr  3  36518816         move    a1,y:Fg_wLastButton
P:00AC 47F400 707E10  3  36818817         move    #7372304,y1
P:00AE 66F400 rrrrrr  3  37118818         move    #L45,r6
P:00B0 2A0000         2  37318819         move    #0,a2
P:00B1 57F400 00001A  3  37618820         move    #>26,b
P:00B3 21DE05         2  37818821         cmp     b,a     a,n6
P:00B4 0AF0A7 rrrrrr  6  38418822         jgt     L40
P:00B6 07EE96         8  39218823         movem   p:(r6+n6),r6
P:00B7 000000         2  39418824         nop
P:00B8 0AE680         4  39818825         jmp     (r6)
                            18826 
P:00B9 rrrrrr               18827 L45:    dc      L30     ; case 0:
P:00BA rrrrrr               18828         dc      L30     ; case 1:
P:00BB rrrrrr               18829         dc      L30     ; case 2:
P:00BC rrrrrr               18830         dc      L30     ; case 3:
P:00BD rrrrrr               18831         dc      L35     ; case 4:
P:00BE rrrrrr               18832         dc      L34     ; case 5:
P:00BF rrrrrr               18833         dc      L40     ; default:
P:00C0 rrrrrr               18834         dc      L40     ; default:
P:00C1 rrrrrr               18835         dc      L40     ; default:
P:00C2 rrrrrr               18836         dc      L40     ; default:
P:00C3 rrrrrr               18837         dc      L40     ; default:
P:00C4 rrrrrr               18838         dc      L40     ; default:
P:00C5 rrrrrr               18839         dc      L40     ; default:
P:00C6 rrrrrr               18840         dc      L40     ; default:
P:00C7 rrrrrr               18841         dc      L40     ; default:
P:00C8 rrrrrr               18842         dc      L40     ; default:
P:00C9 rrrrrr               18843         dc      L40     ; default:
P:00CA rrrrrr               18844         dc      L40     ; default:
P:00CB rrrrrr               18845         dc      L40     ; default:
P:00CC rrrrrr               18846         dc      L40     ; default:
P:00CD rrrrrr               18847         dc      L40     ; default:
P:00CE rrrrrr               18848         dc      L40     ; default:
P:00CF rrrrrr               18849         dc      L40     ; default:
P:00D0 rrrrrr               18850         dc      L40     ; default:
P:00D1 rrrrrr               18851         dc      L40     ; default:
P:00D2 rrrrrr               18852         dc      L40     ; default:
P:00D3 rrrrrr               18853         dc      L33     ; case 26:
                            18854 
                            18855 
                            18856 ; 81   |                    {
                            18857 ; 82   |                            case PH_FF:
                            18858 ; 83   |                            case PR_FF:
                            18859 ; 84   |                            case PH_RW:
                            18860 ; 85   |                            case PR_RW:
                            18861 ; 86   |                                                bSendToPlayerStateMachine=FALSE;        //Do not send to playerstatemachine
                            18862 
P:00D4 200013         2  40018864 L30:    clr     a   
P:00D5 260000         2  40218865         move    #0,y0
                            18868 
                            18869 ; 87   |                                        // toggle between on/off
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18870 ; 88   |                                        if (g_iBackLightState == BACKLIGHT_OFF)
                            18871 
P:00D6 5FF000 rrrrrr  3  40518873         move    y:Fg_iBackLightState,b
P:00D8 20000B         2  40718874         tst     b
P:00D9 0AF0A2 rrrrrr  6  41318875         jne     L31
P:00DB 77F400 FFFFFE  3  41618876         move    #-2,n7
P:00DD 000000         2  41818877         nop
P:00DE 4D6F00         4  42218878         move    x1,y:(r7+n7)
P:00DF 045FA0         2  42418881         movec   m0,n7
P:00E0 000000         2  42618882         nop
P:00E1 4E6F00         4  43018883         move    y0,y:(r7+n7)
                            18886 
                            18887 ; 89   |                                                {
                            18888 ; 90   |                                        g_iBackLightState = BACKLIGHT_ON;
                            18889 
P:00E2 290100         2  43218891         move    #1,b0
P:00E3 597000 rrrrrr  3  43518892         move    b0,y:Fg_iBackLightState
                            18893 
                            18894 ; 91   |                                SysPostMessage(2,LCD_BACKLIGHT_ON);
                            18895 
P:00E5 47F400 030010  3  43818897         move    #196624,y1
P:00E7 4F5F00         2  44018898         move    y1,y:(r7)+
P:00E8 290200         2  44218900         move    #2,b0
P:00E9 595F00         2  44418901         move    b0,y:(r7)+
P:00EA 0BF080 rrrrrr  6  45018903         jsr     FSysPostMessage
P:00EC 205700         2  45218904         move    (r7)-
P:00ED 205700         2  45418906         move    (r7)-
                            18908 
                            18909 ; 92   |                                        SysPostMessage(6,SOFT_TIMER_SET_TIMER,TIMER_BACKLIGHT,1,BACKLIGHT_TIME,MENU_MSG_TURN_OFF_BACKLIGHT);
                            18910 
P:00EE 280100         2  45618912         move    #1,a0
P:00EF 55F400 06001A  3  45918913         move    #393242,b1
P:00F1 5D5F00         2  46118914         move    b1,y:(r7)+
P:00F2 57F400 001388  3  46418916         move    #5000,b
P:00F4 5F5F00         2  46618917         move    b,y:(r7)+
P:00F5 585F00         2  46818919         move    a0,y:(r7)+
P:00F6 290500         2  47018921         move    #5,b0
P:00F7 595F00         2  47218922         move    b0,y:(r7)+
P:00F8 54F400 090001  3  47518924         move    #589825,a1
P:00FA 5C5F00         2  47718925         move    a1,y:(r7)+
P:00FB 290600         2  47918927         move    #6,b0
P:00FC 595F00         2  48118928         move    b0,y:(r7)+
P:00FD 0BF080 rrrrrr  6  48718930         jsr     FSysPostMessage
P:00FF 3F0600         2  48918931         move    #6,n7
P:0100 000000         2  49118932         nop
P:0101 204700         2  49318933         move    (r7)-n7
                            18935 
                            18936 ; 93   |                            SysWaitOnEvent(0,0,0);
                            18937 
P:0102 0AF080 rrrrrr  6  49918939         jmp     L32
                            18940 
                            18941 ; 94   |                                                }
                            18942 
                            18944 L31:
P:0104 77F400 FFFFFE  3  50218949         move    #-2,n7
P:0106 000000         2  50418950         nop
P:0107 4D6F00         4  50818951         move    x1,y:(r7+n7)
P:0108 045FA0         2  51018954         movec   m0,n7
P:0109 000000         2  51218955         nop
P:010A 4E6F00         4  51618956         move    y0,y:(r7+n7)
                            18959 
                            18960 ; 95   |                                        else            //backlight is already on, turn off.
                            18961 ; 96   |                                { 
                            18962 ; 97   |                                        g_iBackLightState = BACKLIGHT_OFF;
                            18963 
P:010B 5C7000 rrrrrr  3  51918965         move    a1,y:Fg_iBackLightState
                            18966 
                            18967 ; 98   |                                SysPostMessage(2,LCD_BACKLIGHT_OFF);
                            18968 
P:010D 46F400 030011  3  52218970         move    #196625,y0
P:010F 4E5F00         2  52418971         move    y0,y:(r7)+
P:0110 290200         2  52618973         move    #2,b0
P:0111 595F00         2  52818974         move    b0,y:(r7)+
P:0112 0BF080 rrrrrr  6  53418976         jsr     FSysPostMessage
P:0114 205700         2  53618977         move    (r7)-
P:0115 205700         2  53818979         move    (r7)-
                            18981 
                            18982 ; 99   |                            SysWaitOnEvent(0,0,0);
                            18983 
P:0116 300000         2  54018985 L32:    move    #0,r0
P:0117 200013         2  54218986         clr     a   
P:0118 20001B         2  54418987         clr     b   
P:0119 0BF080 rrrrrr  6  55018988         jsr     SysWaitOnEvent
P:011B 77F400 FFFFFE  3  55318989         move    #-2,n7
P:011D 000000         2  55518990         nop
P:011E 4DEF00         4  55918991         move    y:(r7+n7),x1
P:011F 045FA0         2  56118994         movec   m0,n7
P:0120 000000         2  56318995         nop
P:0121 4CEF00         4  56718996         move    y:(r7+n7),x0
                            18999 
                            19000 ; 100  |                                                }
                            19001 ; 101  |                                                DisplayHint.I |= CONTRAST_MENU_DISPLAY_ALL;
                            19002 
P:0122 77F400 FFFFFB  3  57019004         move    #-5,n7
P:0124 000000         2  57219005         nop
P:0125 5EEF00         4  57619006         move    y:(r7+n7),a
P:0126 47F400 707E10  3  57919007         move    #7372304,y1
P:0128 200072         2  58119008         or      y1,a
P:0129 5C6F00         4  58519009         move    a1,y:(r7+n7)
                            19010 
                            19011 ; 102  |                                break;
                            19012 
P:012A 0AF080 rrrrrr  6  59119014         jmp     L40
                            19015 
                            19016 ; 103  |
                            19017 ; 104  |                    case PH_STOP:
                            19018 
P:012C 77F400 FFFFFE  3  59419020 L33:    move    #-2,n7
P:012E 000000         2  59619021         nop
P:012F 4D6F00         4  60019022         move    x1,y:(r7+n7)
                            19025 
                            19026 ; 105  |                                //if the STOP button is held down, lets call the shutdown menu
                            19027 ; 106  |                                SysCallFunction(RSRC_MAIN_MENU_CODE_BANK,ShutdownMenu,USERSHUTDOWN,0,0);
                            19028 
P:0130 20001B         2  60219030         clr     b   
P:0131 340000         2  60419031         move    #0,r4
P:0132 240000         2  60619032         move    #0,x0
P:0133 56F400 000078  3  60919034         move    #>$78,a
P:0135 60F400 rrrrrr  3  61219035         move    #FShutdownMenu,r0
P:0137 0BF080 rrrrrr  6  61819036         jsr     SysCallFunction
P:0139 77F400 FFFFFE  3  62119037         move    #-2,n7
P:013B 000000         2  62319038         nop
P:013C 4DEF00         4  62719039         move    y:(r7+n7),x1
                            19042 
                            19043 ; 107  |                                // if returns update display  -- if doesn't return, powered down
                            19044 ; 108  |                                DisplayHint.I |= (MUSIC_MENU_DISPLAY_ALL|(1<<DISPLAY_CLEAR_DISPLAY_BITPOS)); 
                            19045 
P:013D 77F400 FFFFFB  3  63019047         move    #-5,n7
P:013F 000000         2  63219048         nop
P:0140 5CEF00         4  63619049         move    y:(r7+n7),a1
P:0141 46F400 77FF01  3  63919050         move    #7864065,y0
P:0143 200052         2  64119051         or      y0,a
P:0144 5C6F00         4  64519052         move    a1,y:(r7+n7)
P:0145 47F400 707E10  3  64819053         move    #7372304,y1
                            19054 
                            19055 ; 109  |                        bSendToPlayerStateMachine=FALSE;
                            19056 
P:0147 0AF080 rrrrrr  6  65419058         jmp     L37
                            19059 
                            19060 ; 110  |                                break;
                            19061 ; 111  |                                        case PH_MENU:
                            19062 ; 112  |                                                // allow user to escape to music mode
                            19063 ; 113  |                                                // set flag so PR_MENU in music mode will ignore
                            19064 ; 114  |                                                g_MenuFlags.MENU_FLAG_ESCAPE_TO_MUSIC = TRUE;
                            19065 
P:0149 0A7061 rrrrrr  6  66019067 L34:    bset    #1,y:Fg_MenuFlags
                            19068 
                            19069 ; 115  |                            case PR_MENU:
                            19070 ; 116  |                                //defaults to main menu when exiting.  No need to set a new menu.
                            19071 ; 117  |                                bDone = TRUE;
                            19072 
P:014B 280100         2  66219074 L35:    move    #1,a0
P:014C 77F400 FFFFFC  3  66519077         move    #-4,n7
P:014E 000000         2  66719078         nop
P:014F 586F00         4  67119079         move    a0,y:(r7+n7)
                            19082 
                            19083 ; 118  |                        bSendToPlayerStateMachine=FALSE;
                            19084 
P:0150 240000         2  67319086 L37:    move    #0,x0
                            19088 
                            19089 ; 119  |                                                break;
                            19090 ; 120  |                    }// end switch (button)
                            19091 ; 121  |                    break;
                            19092 ; 122  |                }       // end switch (iEvent)
                            19093 ; 123  |        if(bSendToPlayerStateMachine)
                            19094 
P:0151 200049         2  67519096 L40:    tfr     x0,b
P:0152 2B0000         2  67719097         move    #0,b2
P:0153 20000B         2  67919098         tst     b
P:0154 0AF0AA rrrrrr  6  68519101         jeq     L42
                            19102 
                            19103 ; 124  |            DisplayHint.I |= SysCallFunction(RSRC_PLAY_STATE_MACHINE_CODE_BANK,HandlePlayerStateMachine,iEvent,0,pPtr);
                            19104 
P:0156 77F400 FFFFFD  3  68819106         move    #-3,n7
P:0158 000000         2  69019107         nop
P:0159 6CEF00         4  69419108         move    y:(r7+n7),r4
P:015A 240000         2  69619111         move    #0,x0
P:015B 200069         2  69819112         tfr     x1,b
P:015C 56F400 000011  3  70119113         move    #>17,a
P:015E 60F400 rrrrrr  3  70419114         move    #FHandlePlayerStateMachine,r0
P:0160 0BF080 rrrrrr  6  71019115         jsr     SysCallFunction
P:0162 77F400 FFFFFB  3  71319122         move    #-5,n7
P:0164 000000         2  71519123         nop
P:0165 5DEF00         4  71919124         move    y:(r7+n7),b1
P:0166 21C400         2  72119125         move    a,x0
P:0167 20004A         2  72319126         or      x0,b
P:0168 5D6F00         4  72719127         move    b1,y:(r7+n7)
P:0169 77F400 FFFFFC  3  73019129 L42:    move    #-4,n7
P:016B 000000         2  73219130         nop
P:016C 5EEF00         4  73619131         move    y:(r7+n7),a
P:016D 2A0000         2  73819132         move    #0,a2
P:016E 200003         2  74019133         tst     a
P:016F 0AF0AA rrrrrr  6  74619136         jeq     L23
                            19137 
                            19138 ; 125  |
                            19139 ; 126  |        } // end while (!bDone)
                            19140 ; 127  |         
                            19141 ; 128  |    return MENU_BACKLIGHT;
                            19142 
P:0171 56F400 000004  3  74919144         move    #>4,a
                            19146 
                            19147 ; 129  |}
                            19148 
P:0173 77F400 FFFFFA  3  75219150         move    #-6,n7
P:0175 000000         2  75419151         nop
P:0176 05EF7C         4  75819152         movec   y:(r7+n7),ssh
P:0177 204F00         2  76019154         move    (r7)+n7
P:0178 00000C         4  76419156         rts
                            19159 
                            19160 ; 130  |
                            19161 ; 131  |#pragma asm
Y:0000                      19166     org y,"Player_settings_Y":
                            19167     extern y:Fg_iBackLightState
                            19168 
                            19169     SaveRange Fg_iBackLightState,1
                            19169 
                            19169 
Y:0000 rrrrrr               19169     dc      $400000|Fg_iBackLightState
                            19169 
                            19169 
                            19169 
                            19169 
Y:0001 000003               19169     dc      1*3
                            19170     
                            19171 ; 141  |#pragma endasm
                            19172 
                            19256 
                            19257         extern  SysCallFunction, SysWaitOnEvent, FDisplayBacklight
                            19258         extern  FHandlePlayerStateMachine, FRefreshDisplay, FShutdownMenu
                            19259         extern  FSysPostMessage, FUpdateAutoShutdownTimer, y:FgEventInfo
                            19260         extern  y:Fg_MenuFlags, y:Fg_wLastButton
                            19261 
                            19262         global  FBackLightMenu, Fg_iBackLightState
                            19263 
                            19264         local   L23, L25, L26, L30, L31, L32, L33, L34, L35, L37, L40, L42
                            19265         local   L44, L45
                            19266 
                            19267         calls   "BackLightMenu", "SysCallFunction", "SysPostMessage"
                            19268         calls   "BackLightMenu", "SysWaitOnEvent"
                            19269         calls   "BackLightMenu", "UpdateAutoShutdownTimer"
                            19270 
