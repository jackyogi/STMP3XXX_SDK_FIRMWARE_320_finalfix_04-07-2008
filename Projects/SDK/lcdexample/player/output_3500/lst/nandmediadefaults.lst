TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfc7c5b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;nandmediadefaul:
                               96 ; 1    |
                               97 ; 2    |#include "types.h"
                               98 
                              100 
                              101 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              102 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              103 ; 3    |//
                              104 ; 4    |// Filename: types.h
                              105 ; 5    |// Description: Standard data types
                              106 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              107 ; 7    |
                              108 ; 8    |#ifndef _TYPES_H
                              109 ; 9    |#define _TYPES_H
                              110 ; 10   |
                              111 ; 11   |// TODO:  move this outta here!
                              112 ; 12   |#if !defined(NOERROR)
                              113 ; 13   |#define NOERROR 0
                              114 ; 14   |#define SUCCESS 0
                              115 ; 15   |#endif 
                              116 ; 16   |#if !defined(SUCCESS)
                              117 ; 17   |#define SUCCESS  0
                              118 ; 18   |#endif
                              119 ; 19   |#if !defined(ERROR)
                              120 ; 20   |#define ERROR   -1
                              121 ; 21   |#endif
                              122 ; 22   |#if !defined(FALSE)
                              123 ; 23   |#define FALSE 0
                              124 ; 24   |#endif
                              125 ; 25   |#if !defined(TRUE)
                              126 ; 26   |#define TRUE  1
                              127 ; 27   |#endif
                              128 ; 28   |
                              129 ; 29   |#if !defined(NULL)
                              130 ; 30   |#define NULL 0
                              131 ; 31   |#endif
                              132 ; 32   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 33   |#define MAX_INT     0x7FFFFF
                              134 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              135 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              136 ; 36   |#define MAX_ULONG   (-1) 
                              137 ; 37   |
                              138 ; 38   |#define WORD_SIZE   24              // word size in bits
                              139 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              140 ; 40   |
                              141 ; 41   |
                              142 ; 42   |#define BYTE    unsigned char       // btVarName
                              143 ; 43   |#define CHAR    signed char         // cVarName
                              144 ; 44   |#define USHORT  unsigned short      // usVarName
                              145 ; 45   |#define SHORT   unsigned short      // sVarName
                              146 ; 46   |#define WORD    unsigned int        // wVarName
                              147 ; 47   |#define INT     signed int          // iVarName
                              148 ; 48   |#define DWORD   unsigned long       // dwVarName
                              149 ; 49   |#define LONG    signed long         // lVarName
                              150 ; 50   |#define BOOL    unsigned int        // bVarName
                              151 ; 51   |#define FRACT   _fract              // frVarName
                              152 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              153 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              154 ; 54   |#define FLOAT   float               // fVarName
                              155 ; 55   |#define DBL     double              // dVarName
                              156 ; 56   |#define ENUM    enum                // eVarName
                              157 ; 57   |#define CMX     _complex            // cmxVarName
                              158 ; 58   |typedef WORD UCS3;                   // 
                              159 ; 59   |
                              160 ; 60   |#define UINT16  unsigned short
                              161 ; 61   |#define UINT8   unsigned char   
                              162 ; 62   |#define UINT32  unsigned long
                              163 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              164 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              165 ; 65   |#define WCHAR   UINT16
                              166 ; 66   |
                              167 ; 67   |//UINT128 is 16 bytes or 6 words
                              168 ; 68   |typedef struct UINT128_3500 {   
                              169 ; 69   |    int val[6];     
                              170 ; 70   |} UINT128_3500;
                              171 ; 71   |
                              172 ; 72   |#define UINT128   UINT128_3500
                              173 ; 73   |
                              174 ; 74   |// Little endian word packed byte strings:   
                              175 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              176 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              177 ; 77   |// Little endian word packed byte strings:   
                              178 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              179 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              180 ; 80   |
                              181 ; 81   |// Declare Memory Spaces To Use When Coding
                              182 ; 82   |// A. Sector Buffers
                              183 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              184 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              185 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              186 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              187 
                              189 
                              190 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              191 ; 88   |// B. Media DDI Memory
                              192 ; 89   |#define MEDIA_DDI_MEM _Y
                              193 ; 90   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 91   |
                              195 ; 92   |
                              196 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              197 ; 94   |// Examples of circular pointers:
                              198 ; 95   |//    INT CIRC cpiVarName
                              199 ; 96   |//    DWORD CIRC cpdwVarName
                              200 ; 97   |
                              201 ; 98   |#define RETCODE INT                 // rcVarName
                              202 ; 99   |
                              203 ; 100  |// generic bitfield structure
                              204 ; 101  |struct Bitfield {
                              205 ; 102  |    unsigned int B0  :1;
                              206 ; 103  |    unsigned int B1  :1;
                              207 ; 104  |    unsigned int B2  :1;
                              208 ; 105  |    unsigned int B3  :1;
                              209 ; 106  |    unsigned int B4  :1;
                              210 ; 107  |    unsigned int B5  :1;
                              211 ; 108  |    unsigned int B6  :1;
                              212 ; 109  |    unsigned int B7  :1;
                              213 ; 110  |    unsigned int B8  :1;
                              214 ; 111  |    unsigned int B9  :1;
                              215 ; 112  |    unsigned int B10 :1;
                              216 ; 113  |    unsigned int B11 :1;
                              217 ; 114  |    unsigned int B12 :1;
                              218 ; 115  |    unsigned int B13 :1;
                              219 ; 116  |    unsigned int B14 :1;
                              220 ; 117  |    unsigned int B15 :1;
                              221 ; 118  |    unsigned int B16 :1;
                              222 ; 119  |    unsigned int B17 :1;
                              223 ; 120  |    unsigned int B18 :1;
                              224 ; 121  |    unsigned int B19 :1;
                              225 ; 122  |    unsigned int B20 :1;
                              226 ; 123  |    unsigned int B21 :1;
                              227 ; 124  |    unsigned int B22 :1;
                              228 ; 125  |    unsigned int B23 :1;
                              229 ; 126  |};
                              230 ; 127  |
                              231 ; 128  |union BitInt {
                              232 ; 129  |        struct Bitfield B;
                              233 ; 130  |        int        I;
                              234 ; 131  |};
                              235 ; 132  |
                              236 ; 133  |#define MAX_MSG_LENGTH 10
                              237 ; 134  |struct CMessage
                              238 ; 135  |{
                              239 ; 136  |        unsigned int m_uLength;
                              240 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              241 ; 138  |};
                              242 ; 139  |
                              243 ; 140  |typedef struct {
                              244 ; 141  |    WORD m_wLength;
                              245 ; 142  |    WORD m_wMessage;
                              246 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              247 ; 144  |} Message;
                              248 ; 145  |
                              249 ; 146  |struct MessageQueueDescriptor
                              250 ; 147  |{
                              251 ; 148  |        int *m_pBase;
                              252 ; 149  |        int m_iModulo;
                              253 ; 150  |        int m_iSize;
                              254 ; 151  |        int *m_pHead;
                              255 ; 152  |        int *m_pTail;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 153  |};
                              257 ; 154  |
                              258 ; 155  |struct ModuleEntry
                              259 ; 156  |{
                              260 ; 157  |    int m_iSignaledEventMask;
                              261 ; 158  |    int m_iWaitEventMask;
                              262 ; 159  |    int m_iResourceOfCode;
                              263 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              264 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              265 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              266 ; 163  |    int m_uTimeOutHigh;
                              267 ; 164  |    int m_uTimeOutLow;
                              268 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              269 ; 166  |};
                              270 ; 167  |
                              271 ; 168  |union WaitMask{
                              272 ; 169  |    struct B{
                              273 ; 170  |        unsigned int m_bNone     :1;
                              274 ; 171  |        unsigned int m_bMessage  :1;
                              275 ; 172  |        unsigned int m_bTimer    :1;
                              276 ; 173  |        unsigned int m_bButton   :1;
                              277 ; 174  |    } B;
                              278 ; 175  |    int I;
                              279 ; 176  |} ;
                              280 ; 177  |
                              281 ; 178  |
                              282 ; 179  |struct Button {
                              283 ; 180  |        WORD wButtonEvent;
                              284 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              285 ; 182  |};
                              286 ; 183  |
                              287 ; 184  |struct Message {
                              288 ; 185  |        WORD wMsgLength;
                              289 ; 186  |        WORD wMsgCommand;
                              290 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              291 ; 188  |};
                              292 ; 189  |
                              293 ; 190  |union EventTypes {
                              294 ; 191  |        struct CMessage msg;
                              295 ; 192  |        struct Button Button ;
                              296 ; 193  |        struct Message Message;
                              297 ; 194  |};
                              298 ; 195  |
                              299 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              300 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              301 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              302 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              303 ; 200  |
                              304 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              305 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              306 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              307 ; 204  |
                              308 ; 205  |#if DEBUG
                              309 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              310 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              311 ; 208  |#else 
                              312 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              313 ; 210  |#define DebugBuildAssert(x)    
                              314 ; 211  |#endif
                              315 ; 212  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              317 ; 214  |//  #pragma asm
                              318 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              319 ; 216  |//  #pragma endasm
                              320 ; 217  |
                              321 ; 218  |
                              322 ; 219  |#ifdef COLOR_262K
                              323 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              324 ; 221  |#elif defined(COLOR_65K)
                              325 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              326 ; 223  |#else
                              327 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              328 ; 225  |#endif
                              329 ; 226  |    
                              330 ; 227  |#endif // #ifndef _TYPES_H
                              331 
                              333 
                              334 ; 3    |#include "NANDDdi.h"
                              335 
                              337 
                              338 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              339 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                              340 ; 3    |//
                              341 ; 4    |// Filename: NANDDdi.h
                              342 ; 5    |// Description: 
                              343 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              344 ; 7    |
                              345 ; 8    |#ifndef _NANDDDI_H
                              346 ; 9    |#define _NANDDDI_H
                              347 ; 10   |
                              348 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              349 ; 12   |// Includes
                              350 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              351 ; 14   |
                              352 ; 15   |#include "ddildl_internal.h"
                              353 
                              355 
                              356 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              357 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                              358 ; 3    |//
                              359 ; 4    |// Filename: ddildl_internal.h
                              360 ; 5    |// Description: 
                              361 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              362 ; 7    |#ifndef _DDILDL_INTERNAL_H
                              363 ; 8    |#define _DDILDL_INTERNAL_H
                              364 ; 9    |
                              365 ; 10   |#include "ddildl.h"
                              366 
                              368 
                              369 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              370 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                              371 ; 3    |//
                              372 ; 4    |// Filename: ddildl.h
                              373 ; 5    |// Description: 
                              374 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              375 ; 7    |
                              376 ; 8    |#ifndef _DDILDL_H
                              377 ; 9    |#define _DDILDL_H
                              378 ; 10   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              379 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              380 ; 12   |// Includes
                              381 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              382 ; 14   |
                              383 ; 15   |///////////////////////////////////////////////////////////////////////////////
                              384 ; 16   |// Definitions
                              385 ; 17   |///////////////////////////////////////////////////////////////////////////////
                              386 ; 18   |// version before march 11 2005 
                              387 ; 19   |//#ifdef PLAYER_BUILD
                              388 ; 20   |//#define MAX_MEDIA_TABLE_ENTRIES                12
                              389 ; 21   |//#else
                              390 ; 22   |//#define MAX_MEDIA_TABLE_ENTRIES                14
                              391 ; 23   |//#endif
                              392 ; 24   |// Mar 14 2007: Only requires the maximum number of drives in one media
                              393 ; 25   |// NAND:(2 data drives + 9 system drives + 1 extra system drive in future) = 12
                              394 ; 26   |#define MAX_MEDIA_TABLE_ENTRIES                12
                              395 ; 27   |
                              396 ; 28   |#define MAX_LOGICAL_MEDIA                       2
                              397 ; 29   |
                              398 ; 30   |//
                              399 ; 31   |// WARNING
                              400 ; 32   |// The maximum number of drives needed for player, mtp and usbmsc 
                              401 ; 33   |// builds is currently the player build which has the largest number of drives = 12(NAND)+
                                  1(MMC).
                              402 ; 34   |// Private lib references to this change to use a ddiproject global that's init per projec
                                  t 
                              403 ; 35   |// instead so those plib references are no longer fixed at lib compile time. March 1 2005
                              404 ; 36   |#ifdef PLAYER_BUILD
                              405 ; 37   |#define MAX_LOGICAL_DRIVES                      13
                              406 ; 38   |#else // MTP_BUILD & USBMSC/updater need support for the ram drive used in msc
                              407 ; 39   |/********************************************************************************
                              408 ; 40   | * We have to define 2 more than the actually size for usbmsc case
                              409 ; 41   | * We have totally 9 system drives, 3 data drives, 1 extra system drive in future, 
                              410 ; 42   | * so the total number is 13. The max will be 13 + 2 = 15
                              411 ; 43   | ********************************************************************************/
                              412 ; 44   |#define MAX_LOGICAL_DRIVES                      15
                              413 ; 45   |#endif
                              414 ; 46   |
                              415 ; 47   |#define DDI_MAGIC_NUMBER                        0xADEADE
                              416 ; 48   |
                              417 ; 49   |///////////////////////////////////////////////////////////////////////////////
                              418 ; 50   |// Error codes
                              419 ; 51   |///////////////////////////////////////////////////////////////////////////////
                              420 ; 52   |
                              421 ; 53   |#include "errors.h"
                              422 
                              424 
                              425 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              426 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                              427 ; 3    |////
                              428 ; 4    |//// Filename: errors.inc
                              429 ; 5    |//// Description: 
                              430 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                              431 ; 7    |
                              432 ; 8    |#if (!defined(ERRORS_INC))
                              433 ; 9    |#define ERRORS_INC 1
                              434 ; 10   |
                              435 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                              436 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                              437 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                              438 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                              439 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              440 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                              441 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                              442 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                              443 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                              444 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                              445 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                              446 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                              447 ; 23   |// block in the device. The block was marked bad and tables updated.
                              448 ; 24   |// The application must start over.
                              449 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                              450 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                              451 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                              452 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                              453 ; 29   |
                              454 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                              455 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                              456 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                              457 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                              458 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                              459 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                              460 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                              461 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                              462 ; 38   |//Specific to NAND
                              463 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                              464 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                              465 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                              466 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                              467 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                              468 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                              469 ; 45   |
                              470 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                              471 ; 47   |
                              472 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                              473 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                              474 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                              475 ; 51   |
                              476 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                              477 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                              478 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                              479 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                              480 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                              481 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                              482 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                              483 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                              484 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                              485 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                              486 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                              487 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                              488 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                              489 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                              490 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                              491 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                              492 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                              493 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                              494 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                              495 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                              496 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                              497 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                              498 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                              499 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                              500 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                              501 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              502 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                              503 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                              504 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                              505 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                              506 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                              507 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                              508 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                              509 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                              510 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                              511 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                              512 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                              513 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                              514 ; 90   |
                              515 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                              516 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                              517 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                              518 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                              519 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                              520 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                              521 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                              522 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                              523 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                              524 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                              525 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                              526 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                              527 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                              528 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                              529 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                              530 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                              531 ; 107  |
                              532 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                              533 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                              534 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                              535 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                              536 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                              537 ; 113  |
                              538 ; 114  |// indicates that during the NandHalInit, the NandType did not
                              539 ; 115  |// match the previously initialized Nand chip type.
                              540 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                              541 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                              542 ; 118  |// Errors from calling HIL functions
                              543 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                              544 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                              545 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                              546 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                              547 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                              548 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                              549 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                              550 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                              551 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                              552 ; 128  |// for 3410 build
                              553 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                              554 ; 130  |// for 3410 build
                              555 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                              556 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                              557 ; 133  |
                              558 ; 134  |// indicates that the GetStatus returned a FAIL
                              559 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                              560 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                              561 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                              562 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                              563 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              564 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                              565 ; 141  |// indicates the NAND was already BUSY
                              566 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                              567 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                              568 ; 144  |// ECC Error Codes
                              569 ; 145  |// ECC Computation has successfully completed
                              570 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                              571 ; 147  |// ECC computation still busy
                              572 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                              573 ; 149  |// timed out while waiting on object
                              574 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                              575 ; 151  |// flag already set for SDK2.4 lock
                              576 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                              577 ; 153  |
                              578 ; 154  |#define NANDHAL_ECC_NOERROR 0
                              579 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                              580 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                              581 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                              582 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                              583 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                              584 ; 160  |
                              585 ; 161  |// MMC Errors
                              586 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                              587 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                              588 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                              589 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                              590 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                              591 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                              592 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                              593 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                              594 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                              595 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                              596 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                              597 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                              598 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                              599 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                              600 ; 176  |
                              601 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                              602 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                              603 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                              604 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                              605 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                              606 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                              607 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                              608 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                              609 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                              610 ; 186  |
                              611 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                              612 ; 188  |//// MMC HAL Error codes
                              613 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                              614 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                              615 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                              616 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                              617 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                              618 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                              619 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                              620 ; 196  |
                              621 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                              622 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                              623 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                              624 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                              625 ; 201  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              626 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                              627 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                              628 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                              629 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                              630 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                              631 ; 207  |
                              632 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                              633 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                              634 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                              635 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                              636 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                              637 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                              638 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                              639 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                              640 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                              641 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                              642 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                              643 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                              644 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                              645 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                              646 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                              647 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                              648 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                              649 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                              650 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                              651 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                              652 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                              653 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                              654 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                              655 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                              656 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                              657 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                              658 ; 234  |
                              659 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                              660 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                              661 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                              662 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                              663 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                              664 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                              665 ; 241  |
                              666 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                              667 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                              668 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                              669 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                              670 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                              671 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                              672 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                              673 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                              674 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                              675 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                              676 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                              677 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                              678 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                              679 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                              680 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                              681 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                              682 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                              683 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                              684 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                              685 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                              686 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                              687 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              688 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                              689 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                              690 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                              691 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                              692 ; 268  |
                              693 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                              694 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                              695 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                              696 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                              697 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                              698 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                              699 ; 275  |
                              700 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                              701 ; 277  |//MATH errors...
                              702 ; 278  |#define ERRZeroDivide 0x7FFFFF
                              703 ; 279  |
                              704 ; 280  |//Memory Pointer errors...
                              705 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                              706 ; 282  |//****************************************************************/
                              707 ; 283  |#if (!defined(NOERROR))
                              708 ; 284  |#define NOERROR 0
                              709 ; 285  |#endif
                              710 ; 286  |
                              711 ; 287  |////Added by RAKS
                              712 ; 288  |
                              713 ; 289  |#define ERRProgram 0x911111
                              714 ; 290  |#define ERRNoMedia 0x922222
                              715 ; 291  |#define ERRHwFail 0x933333   
                              716 ; 292  |#define ERRInvMedia 0x944444
                              717 ; 293  |#define ERRBlkFail 0x955555
                              718 ; 294  |#define ERRInvDataStatus 0x966666
                              719 ; 295  |#define ERRWriteFail 0x977777
                              720 ; 296  |#define ERRECCCorr 0x988888
                              721 ; 297  |#define ERRECCFail 0x999999
                              722 ; 298  |#define ERRZoneFull 0x9aaaaa
                              723 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                              724 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                              725 ; 301  |//invalid partition table signature. 
                              726 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                              727 ; 303  |//boot ID bad
                              728 ; 304  |#define ERRBootID 0x9BBBBB   
                              729 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                              730 ; 306  |////Nothing was here : RAKS
                              731 ; 307  |//JUMP instruction bad
                              732 ; 308  |#define ERRBootJump 0x9DDDDD  
                              733 ; 309  |//ID Byte bad
                              734 ; 310  |#define ERRIDByte 0x9EEEEE  
                              735 ; 311  |
                              736 ; 312  |
                              737 ; 313  |//****************************************************************
                              738 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                              739 ; 315  |//****************************************************************
                              740 ; 316  |// Master ERROR File
                              741 ; 317  |//****************************************************************/
                              742 ; 318  |// FAT File System Error Codes
                              743 ; 319  |// corrupt FAT
                              744 ; 320  |#define FATCorrupt -1        
                              745 ; 321  |// invalid FAT sector
                              746 ; 322  |#define DIRInvlaidSector -2        
                              747 ; 323  |
                              748 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                              749 ; 325  |#define FATwarningEndOfChain 0x0AECEC
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              750 ; 326  |#define FATwarningReservedCx 0x0A1111
                              751 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                              752 ; 328  |//FATcxsFree==0 
                              753 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                              754 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                              755 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                              756 ; 332  |
                              757 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                              758 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                              759 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                              760 ; 336  |
                              761 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                              762 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                              763 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                              764 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                              765 ; 341  |//No Free Cxs on FAT Scan!
                              766 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                              767 ; 343  |
                              768 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                              769 ; 345  |
                              770 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                              771 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                              772 ; 348  |
                              773 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                              774 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                              775 ; 351  |
                              776 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                              777 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                              778 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                              779 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                              780 ; 356  |
                              781 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                              782 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                              783 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                              784 ; 360  |
                              785 ; 361  |#define SEEKprefix 0x85
                              786 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                              787 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                              788 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                              789 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                              790 ; 366  |
                              791 ; 367  |#define READprefix 0x86
                              792 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                              793 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                              794 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                              795 ; 371  |#define READerrorAccessDenied 0x86ADAD
                              796 ; 372  |#define READerrorFreeCx 0x860000
                              797 ; 373  |#define READerrorEndOfChain 0x861111
                              798 ; 374  |#define READerrorReservedCx 0x862222
                              799 ; 375  |#define READerrorBadCx 0x863333
                              800 ; 376  |
                              801 ; 377  |#define WRITEprefix 0x87
                              802 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                              803 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                              804 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                              805 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                              806 ; 382  |#define WRITEerrorFreeCx 0x870000
                              807 ; 383  |#define WRITEerrorEndOfChain 0x871111
                              808 ; 384  |#define WRITEerrorReservedCx 0x872222
                              809 ; 385  |#define WRITEerrorBadCx 0x873333
                              810 ; 386  |
                              811 ; 387  |#define UTILprefix 0x88
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              812 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                              813 ; 389  |
                              814 ; 390  |// Directory Error Codes
                              815 ; 391  |
                              816 ; 392  |// invalid DIR sector specified
                              817 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                              818 ; 394  |// PATH search string has invlaid directory
                              819 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                              820 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                              821 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                              822 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                              823 ; 399  |// Bad cluster number
                              824 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                              825 ; 401  |// Can't open ROOT
                              826 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                              827 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                              828 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                              829 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                              830 ; 406  |// bad record number to read
                              831 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                              832 ; 408  |// record requeste not in range
                              833 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                              834 ; 410  |// record requeste past end of ROOT
                              835 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                              836 ; 412  |// device number invalid
                              837 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                              838 ; 414  |// FCB Does not popint to a sub-Directory entry
                              839 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                              840 ; 416  |// Path specified is invalid
                              841 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                              842 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                              843 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                              844 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                              845 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                              846 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                              847 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                              848 ; 424  |
                              849 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                              850 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                              851 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                              852 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                              853 ; 429  |// String Manipulation Error Codes
                              854 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                              855 ; 431  |
                              856 ; 432  |#endif //@DEF(ERRORS_INC)
                              857 ; 433  |
                              858 
                              860 
                              861 ; 54   |
                              862 ; 55   |///////////////////////////////////////////////////////////////////////////////
                              863 ; 56   |// Typedefs
                              864 ; 57   |///////////////////////////////////////////////////////////////////////////////
                              865 ; 58   |
                              866 ; 59   |typedef void (*MULTI_WRITE_CALLBACK_FUNCTION)(LONG lValue);
                              867 ; 60   |
                              868 ; 61   |#include "ddildl\ddildl_defs.h"
                              869 
                              871 
                              872 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              873 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                              874 ; 3    |//
                              875 ; 4    |// Filename: ddildl_defs.h
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              876 ; 5    |// Description: 
                              877 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              878 ; 7    |
                              879 ; 8    |#ifndef _DDILDL_DEFS_H
                              880 ; 9    |#define _DDILDL_DEFS_H
                              881 ; 10   |
                              882 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              883 ; 12   |// Typedefs
                              884 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              885 ; 14   |
                              886 ; 15   |typedef enum {
                              887 ; 16   |  MediaStateUnknown,
                              888 ; 17   |  MediaStateErased,
                              889 ; 18   |  MediaStateAllocated
                              890 ; 19   |} MEDIA_STATE, * P_MEDIA_STATE;
                              891 ; 20   |
                              892 ; 21   |typedef enum {
                              893 ; 22   |    MediaTypeNand = 0,
                              894 ; 23   |    MediaTypeMMC = 1,
                              895 ; 24   |    MediaTypeHDD = 2,
                              896 ; 25   |    MediaTypeRAM = 3
                              897 ; 26   |} PHYSICAL_MEDIA_TYPE, * P_PHYSICAL_MEDIA_TYPE;
                              898 ; 27   |
                              899 ; 28   |typedef enum {
                              900 ; 29   |    MediaInfoNumberOfDrives = 0,
                              901 ; 30   |    MediaInfoSizeInBytes = 1,
                              902 ; 31   |    MediaInfoAllocationUnitSizeInBytes = 2,
                              903 ; 32   |    MediaInfoIsInitialized = 3,
                              904 ; 33   |    MediaInfoMediaState = 4,
                              905 ; 34   |    MediaInfoIsWriteProtected = 5,
                              906 ; 35   |    MediaInfoPhysicalMediaType = 6,
                              907 ; 36   |    MediaInfoSizeOfSerialNumberInBytes = 7,
                              908 ; 37   |    MediaInfoSerialNumber = 8,
                              909 ; 38   |    MediaInfoIsSystemMedia = 9,
                              910 ; 39   |    MediaInfoIsMediaPresent = 10
                              911 ; 40   |} LOGICAL_MEDIA_INFO, * P_LOGICAL_MEDIA_INFO;
                              912 ; 41   |
                              913 ; 42   |#ifdef MFG_TOOL
                              914 ; 43   |  
                              915 ; 44   |typedef enum {
                              916 ; 45   |    SerialNoInfoSizeOfSerialNumberInBytes = 0,
                              917 ; 46   |    SerialNoInfoSerialNumber = 1
                              918 ; 47   |} SERIAL_NO_INFO, * P_SERIAL_NO_INFO;
                              919 ; 48   |#endif
                              920 ; 49   |
                              921 ; 50   |typedef enum {
                              922 ; 51   |    DriveInfoSectorSizeInBytes = 0,
                              923 ; 52   |    DriveInfoEraseSizeInBytes = 1,
                              924 ; 53   |    DriveInfoSizeInBytes = 2,
                              925 ; 54   |    DriveInfoSizeInMegaBytes = 3,
                              926 ; 55   |    DriveInfoSizeInSectors = 4,
                              927 ; 56   |    DriveInfoType = 5,
                              928 ; 57   |    DriveInfoTag = 6,
                              929 ; 58   |    DriveInfoComponentVersion = 7,
                              930 ; 59   |    DriveInfoProjectVersion = 8,
                              931 ; 60   |    DriveInfoIsWriteProtected = 9,
                              932 ; 61   |    DriveInfoSizeOfSerialNumberInBytes = 10,
                              933 ; 62   |    DriveInfoSerialNumber = 11,
                              934 ; 63   |    DriveInfoMediaPresent = 12,
                              935 ; 64   |    DriveInfoMediaChange = 13,
                              936 ; 65   |    DriveInfoSectorAllocation = 14
                              937 ; 66   |} LOGICAL_DRIVE_INFO, * P_LOGICAL_DRIVE_INFO;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              938 ; 67   |
                              939 ; 68   |#define DRIVE_TAG_STMPSYS_S         0x00        //!< player drive tag.
                              940 ; 69   |#define DRIVE_TAG_HOSTLINK_S        0x01        //!< UsbMscMtp drive tag, old name was DRI
                                  VE_TAG_USBMSC_S. 
                              941 ; 70   |#define DRIVE_TAG_RESOURCE_BIN      0x02        //!< player resource drive tag.
                              942 ; 71   |#define DRIVE_TAG_EXTRA_S           0x03        //!< the host has 0x03 reserved for an ext
                                  ra system drive.
                              943 ; 72   |// if you change line below, also change this equ: asm_DRIVE_TAG_RESOURCE1_BIN in player m
                                  ain.asm!! Values must match. 
                              944 ; 73   |#define DRIVE_TAG_RESOURCE1_BIN (DRIVE_TAG_RESOURCE_BIN+0x10)//<! was just 0x04. old comme
                                  nt"the host has 0x04 reserved for an extra system drive." May17'06 JLN: correction: ChrisW says 0x
                                  10+resource.bin tag is tag for 2nd ver of resource.bin in new 2.61x post sdkrelease updater. 
                              945 ; 74   |#define DRIVE_TAG_RESOURCE2_BIN (DRIVE_TAG_RESOURCE_BIN+0x20)// master has tag 0x22 (3rd c
                                  opy)
                              946 ; 75   |#define DRIVE_TAG_OTGHOST_S         0x05        //!< the host has 0x05 reserved for OTG dr
                                  ive.
                              947 ; 76   |#define DRIVE_TAG_HOSTRSC_BIN       0x06        //!< UsbMscMtp resource drive tag, old nam
                                  e was DRIVE_TAG_MTP_BIN.
                              948 ; 77   |#define DRIVE_TAG_DATA              0x0A        //!< data drive tag.
                              949 ; 78   |#define DRIVE_TAG_DATA_HIDDEN       0x0B        //!< hidden data drive tag, old name was D
                                  RIVE_TAG_HIDDEN
                              950 ; 79   |#define DRIVE_TAG_BOOTMANAGER_S     0x50        //!< boot manager drive tag
                              951 ; 80   |#define DRIVE_TAG_UPDATER_S         0xFF        //!< the host has 0xFF reserved for usbmsc
                                  .sb file used in recovery mode operation only.
                              952 ; 81   |#define DRIVE_TAG_HOSTRSC1_BIN      0x16        //!< back up resource for hostrsrc.bin.
                              953 ; 82   |#define DRIVE_TAG_HOSTRSC2_BIN      0x26        //!< MASTER COPY resource for hostrsrc.bin
                                  .
                              954 ; 83   |// Do not use this enum... use the defs above.  We need to use defs so customers
                              955 ; 84   |//  may extend the system drives without DDI source code.
                              956 ; 85   |/*
                              957 ; 86   |typedef enum {
                              958 ; 87   |    ResourceBinDriveTag = 0x00,
                              959 ; 88   |    BootManagerDriveTag = 0x50,
                              960 ; 89   |    StmpSysDriveTag = 0x01,
                              961 ; 90   |    UsbMscDriveTag = 0x02,
                              962 ; 91   |    DataDriveTag = 0x0A
                              963 ; 92   |} LOGICAL_DRIVE_TAG, * P_LOGICAL_DRIVE_TAG;
                              964 ; 93   |*/
                              965 ; 94   |
                              966 ; 95   |typedef enum {
                              967 ; 96   |    DriveTypeData = 0,
                              968 ; 97   |    DriveTypeSystem = 1,
                              969 ; 98   |    DriveTypeHidden = 2,
                              970 ; 99   |    DriveTypeUnknown = 3
                              971 ; 100  |} LOGICAL_DRIVE_TYPE, * P_LOGICAL_DRIVE_TYPE;
                              972 
                              979 
                              980 ; 101  |
                              981 ; 102  |typedef struct {
                              982 ; 103  |    WORD wDriveNumber;          // In reference to the entire system
                              983 ; 104  |    LOGICAL_DRIVE_TYPE Type;
                              984 ; 105  |    WORD wTag;
                              985 ; 106  |    DWORD dwSizeInBytes;
                              986 ; 107  |    BOOL bRequired;
                              987 ; 108  |} MEDIA_ALLOCATION_TABLE_ENTRY, * P_MEDIA_ALLOCATION_TABLE_ENTRY;
                              988 
                              996 
                              997 ; 109  |
                              998 ; 110  |typedef struct {
                              999 ; 111  |    WORD wNumEntries;
                             1000 ; 112  |    MEDIA_ALLOCATION_TABLE_ENTRY Entry[MAX_MEDIA_TABLE_ENTRIES];
                             1001 ; 113  |} MEDIA_ALLOCATION_TABLE, * P_MEDIA_ALLOCATION_TABLE;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1002 ; 114  |
                             1003 ; 115  |
                             1004 ; 116  |#define TA6_ROM_REV_ID  6
                             1005 ; 117  |#define ROM_REV_ID  (*((WORD _X *)0xFA02) & 0x0F)
                             1006 ; 118  |
                             1007 ; 119  | 
                             1008 ; 120  |typedef union {
                             1009 ; 121  |
                             1010 ; 122  |    struct {
                             1011 ; 123  |        WORD MinorL      : 8;
                             1012 ; 124  |        WORD MinorH      : 8;
                             1013 ; 125  |        WORD MiddleL     : 8;
                             1014 ; 126  |        WORD MiddleH     : 8;
                             1015 ; 127  |        WORD MajorL      : 8;
                             1016 ; 128  |        WORD MajorH      : 8;
                             1017 ; 129  |        } PARTIAL_VERSION;
                             1018 ; 130  |        
                             1019 ; 131  |    DWORD   Version;        
                             1020 ; 132  |
                             1021 ; 133  |} SYSTEM_VERSION;
                             1022 ; 134  |
                             1023 ; 135  |
                             1024 ; 136  |#endif // #ifndef _DDILDL_DEFS_H
                             1025 
                             1027 
                             1028 ; 62   |
                             1029 ; 63   |///////////////////////////////////////////////////////////////////////////////
                             1030 ; 64   |// Prototypes
                             1031 ; 65   |// Note that these are prototypes for the highest level access to the DDI.
                             1032 ; 66   |//  The LDL steering mechanism converts the wLogMediaNumber & wLogDriveNumber
                             1033 ; 67   |//  parameters & passes pointers to the media/drive desctriptrs to the DDIs.
                             1034 ; 68   |///////////////////////////////////////////////////////////////////////////////
                             1035 ; 69   |RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
                             1036 ; 70   |RETCODE _reentrant MediaAllocate(WORD wLogMediaNumber,
                             1037 
                             1045 
                             1046 ; 71   |    P_MEDIA_ALLOCATION_TABLE pMediaTable);
                             1047 ; 72   |RETCODE _reentrant MediaDiscoverAllocation(WORD wLogMediaNumber);
                             1048 ; 73   |RETCODE _reentrant MediaGetMediaTable(WORD wLogMediaNumber,
                             1049 ; 74   |    P_MEDIA_ALLOCATION_TABLE *pMediaTable);
                             1050 ; 75   |RETCODE _reentrant MediaGetInfo(WORD wLogMediaNumber, LOGICAL_MEDIA_INFO Type,
                             1051 
                             1065 
                             1066 ; 76   |    void * _Y pInfo);
                             1067 ; 77   |RETCODE _reentrant MediaErase(WORD wLogMediaNumber, WORD wMagicNumber);
                             1068 ; 78   |
                             1069 ; 79   |RETCODE _reentrant DriveInit(WORD wLogDriveNumber);
                             1070 ; 80   |RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             1071 
                             1089 
                             1090 ; 81   |    void * pInfo);
                             1091 ; 82   |RETCODE _reentrant DriveSetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             1092 ; 83   |    void * pInfo);
                             1093 ; 84   |RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             1094 
                             1098 
                             1099 ; 85   |    P_SECTOR_BUFFER pSectorData);
                             1100 ; 86   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             1101 ; 87   |    P_SECTOR_BUFFER pSectorData);
                             1102 ; 88   |RETCODE _reentrant DriveMultiWriteSetup(WORD wLogDriveNumber,
                             1103 ; 89   |    DWORD dwStartSectorNumber, WORD wSectorCount,
                             1104 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1109 
                             1110 ; 90   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
                             1111 ; 91   |RETCODE _reentrant DriveMultiWriteSector(WORD wLogDriveNumber,
                             1112 ; 92   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                             1113 ; 93   |RETCODE _reentrant DriveErase(WORD wLogDriveNumber, WORD wMagicNumber);
                             1114 ; 94   |RETCODE _reentrant DriveFlush(WORD wDriveNumber);
                             1115 ; 95   |
                             1116 ; 96   |RETCODE DdiInitAll(void);
                             1117 ; 97   |
                             1118 ; 98   |
                             1119 ; 99   |#endif // #ifndef _DDILDL_H
                             1120 
                             1133 
                             1134 ; 11   |
                             1135 ; 12   |///////////////////////////////////////
                             1136 ; 13   |// Logical Media structures
                             1137 ; 14   |///////////////////////////////////////
                             1138 ; 15   |
                             1139 ; 16   |typedef struct {
                             1140 ; 17   |    // Discovered at Run Time by MediaInit:
                             1141 ; 18   |    WORD    wMediaNumber;
                             1142 ; 19   |    BOOL    bInitialized;
                             1143 ; 20   |    MEDIA_STATE eState;
                             1144 ; 21   |    BOOL    bAllocated;
                             1145 ; 22   |    BOOL    bWriteProtected;
                             1146 ; 23   |    WORD    wNumberOfDrives;//on this media
                             1147 ; 24   |    DWORD   dwSizeInBytes;
                             1148 ; 25   |    WORD    wAllocationUnitSizeInBytes;
                             1149 ; 26   |    PHYSICAL_MEDIA_TYPE PhysicalType;
                             1150 ; 27   |    void * pMediaInfo;  // same as in LOGICAL_DRIVE_DESCRIPTOR
                             1151 ; 28   |} LOGICAL_MEDIA_DESCRIPTOR, * P_LOGICAL_MEDIA_DESCRIPTOR;
                             1152 
                             1169 
                             1170 ; 29   |
                             1171 ; 30   |// Logical Media API functions
                             1172 ; 31   |typedef _reentrant RETCODE (*P_MEDIA_INIT_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR);
                             1173 ; 32   |typedef RETCODE _reentrant (*P_MEDIA_ALLOCATE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             1174 ; 33   |    P_MEDIA_ALLOCATION_TABLE);
                             1175 ; 34   |typedef RETCODE _reentrant (*P_MEDIA_DISCOVER_ALLOCATION_FUNCTION)(P_LOGICAL_MEDIA_DESCRIP
                                  TOR);
                             1176 ; 35   |typedef RETCODE _reentrant (*P_MEDIA_GET_MEDIA_TABLE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                                  
                             1177 ; 36   |    P_MEDIA_ALLOCATION_TABLE);
                             1178 ; 37   |typedef RETCODE _reentrant (*P_MEDIA_GET_INFO_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             1179 ; 38   |    LOGICAL_MEDIA_INFO, void * _Y);
                             1180 ; 39   |typedef RETCODE _reentrant (*P_MEDIA_ERASE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             1181 ; 40   |    WORD wMagicNumber);
                             1182 
                             1207 
                             1208 ; 41   |
                             1209 ; 42   |typedef struct {
                             1210 ; 43   |    WORD wInitCodeBank;
                             1211 ; 44   |    P_MEDIA_INIT_FUNCTION pInit;
                             1212 ; 45   |    WORD wAllocateCodeBank;
                             1213 ; 46   |    P_MEDIA_ALLOCATE_FUNCTION pAllocate;
                             1214 ; 47   |    WORD wDiscoverAllocationCodeBank;
                             1215 ; 48   |    P_MEDIA_DISCOVER_ALLOCATION_FUNCTION pDiscoverAllocation;
                             1216 ; 49   |    WORD wGetMediaTableCodeBank;
                             1217 ; 50   |    P_MEDIA_GET_MEDIA_TABLE_FUNCTION pGetMediatable;
                             1218 ; 51   |    WORD wGetInfoCodeBank;
                             1219 ; 52   |    P_MEDIA_GET_INFO_FUNCTION pGetInfo;
                             1220 ; 53   |    WORD wEraseCodeBank;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1221 ; 54   |    P_MEDIA_ERASE_FUNCTION pErase;
                             1222 ; 55   |} LOGICAL_MEDIA_API, * P_LOGICAL_MEDIA_API;
                             1223 
                             1240 
                             1241 ; 56   |
                             1242 ; 57   |typedef struct {
                             1243 ; 58   |    P_LOGICAL_MEDIA_DESCRIPTOR pDescriptor;
                             1244 ; 59   |    P_LOGICAL_MEDIA_API pApi;
                             1245 ; 60   |} LOGICAL_MEDIA, * P_LOGICAL_MEDIA;
                             1246 
                             1264 
                             1265 ; 61   |
                             1266 ; 62   |///////////////////////////////////////
                             1267 ; 63   |// Logical Drive structures
                             1268 ; 64   |///////////////////////////////////////
                             1269 ; 65   |
                             1270 ; 66   |typedef struct {
                             1271 ; 67   |    // Discovered at Run Time by MediaDiscover
                             1272 ; 68   |    BOOL    bInitialized;
                             1273 ; 69   |    BOOL    bPresent;       // Indicates if a system drive is present
                             1274 ; 70   |                            // wTag from Config Block matches wTag from Drive
                             1275 ; 71   |                            // redundant area
                             1276 ; 72   |    BOOL    bErased;
                             1277 ; 73   |    BOOL    bWriteProtected;
                             1278 ; 74   |    DWORD   dwNumberOfSectors;
                             1279 ; 75   |    LOGICAL_DRIVE_TYPE Type;
                             1280 ; 76   |    WORD    wTag;
                             1281 ; 77   |    WORD    wDriveNumber;
                             1282 ; 78   |    DWORD   dwSizeInBytes;
                             1283 ; 79   |    WORD    wSectorSizeInBytes; // not included bad blocks (NAND media)
                             1284 ; 80   |    WORD    wEraseSizeInBytes;
                             1285 ; 81   |    SYSTEM_VERSION ProjectVersion;
                             1286 ; 82   |    SYSTEM_VERSION ComponentVersion;
                             1287 ; 83   |    P_LOGICAL_MEDIA_DESCRIPTOR pLogicalMediaDescriptor;
                             1288 ; 84   |    void * pMediaInfo;  // same as in LOGICAL_MEDIA_DESCRIPTOR
                             1289 ; 85   |    void * pDriveInfo;
                             1290 ; 86   |} LOGICAL_DRIVE_DESCRIPTOR, * P_LOGICAL_DRIVE_DESCRIPTOR;
                             1291 
                             1312 
                             1313 ; 87   |
                             1314 ; 88   |// Logical Drive API functions
                             1315 ; 89   |typedef RETCODE _reentrant (*P_DRIVE_INIT_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR);
                             1316 ; 90   |typedef RETCODE _reentrant (*P_DRIVE_GET_INFO_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             1317 ; 91   |    LOGICAL_DRIVE_INFO, void *);
                             1318 ; 92   |typedef RETCODE _reentrant (*P_DRIVE_SET_INFO_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             1319 ; 93   |    LOGICAL_DRIVE_INFO, void *);
                             1320 ; 94   |typedef RETCODE _reentrant (*P_DRIVE_READ_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             1321 ; 95   |    DWORD, P_SECTOR_BUFFER);
                             1322 ; 96   |typedef RETCODE _reentrant (*P_DRIVE_WRITE_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             1323 ; 97   |    DWORD, P_SECTOR_BUFFER);
                             1324 ; 98   |typedef RETCODE _reentrant (*P_DRIVE_MULTI_WRITE_SETUP_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTO
                                  R,
                             1325 ; 99   |    DWORD, WORD, MULTI_WRITE_CALLBACK_FUNCTION);
                             1326 ; 100  |typedef RETCODE _reentrant (*P_DRIVE_MULTI_WRITE_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPT
                                  OR,
                             1327 ; 101  |    P_SECTOR_BUFFER, LONG);
                             1328 ; 102  |typedef RETCODE _reentrant (*P_DRIVE_ERASE_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR, WORD);
                             1329 ; 103  |typedef RETCODE _reentrant (*P_DRIVE_FLUSH_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR);
                             1330 
                             1367 
                             1368 ; 104  |
                             1369 ; 105  |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1370 ; 106  |    WORD wInitCodeBank;
                             1371 ; 107  |    P_DRIVE_INIT_FUNCTION pInit;
                             1372 ; 108  |    WORD wGetInfoCodeBank;
                             1373 ; 109  |    P_DRIVE_GET_INFO_FUNCTION pGetInfo;
                             1374 ; 110  |    WORD wSetInfoCodeBank;
                             1375 ; 111  |    P_DRIVE_SET_INFO_FUNCTION pSetInfo;
                             1376 ; 112  |    WORD wReadSectorCodeBank;
                             1377 ; 113  |    P_DRIVE_READ_SECTOR_FUNCTION pReadSector;
                             1378 ; 114  |    WORD wWriteSectorCodeBank;
                             1379 ; 115  |    P_DRIVE_WRITE_SECTOR_FUNCTION pWriteSector;
                             1380 ; 116  |    WORD wMultiWriteSetupCodeBank;
                             1381 ; 117  |    P_DRIVE_MULTI_WRITE_SETUP_FUNCTION pMultiWriteSetup;
                             1382 ; 118  |    WORD wMultiWriteSectorCodeBank;
                             1383 ; 119  |    P_DRIVE_MULTI_WRITE_SECTOR_FUNCTION pMultiWriteSector;
                             1384 ; 120  |    WORD wEraseCodeBank;
                             1385 ; 121  |    P_DRIVE_ERASE_FUNCTION pErase;
                             1386 ; 122  |    WORD wFlushCodeBank;
                             1387 ; 123  |    P_DRIVE_FLUSH_FUNCTION pFlush;
                             1388 ; 124  |} LOGICAL_DRIVE_API, * P_LOGICAL_DRIVE_API;
                             1389 
                             1412 
                             1413 ; 125  |
                             1414 ; 126  |typedef struct {
                             1415 ; 127  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor;
                             1416 ; 128  |    P_LOGICAL_DRIVE_API pApi;
                             1417 ; 129  |} LOGICAL_DRIVE, * P_LOGICAL_DRIVE;
                             1418 
                             1420 
                             1421 ; 130  |
                             1422 ; 131  |///////////////////////////////////////////////////////////////////////////////
                             1423 ; 132  |// Global variables
                             1424 ; 133  |///////////////////////////////////////////////////////////////////////////////
                             1425 ; 134  |extern MEDIA_ALLOCATION_TABLE g_MediaAllocationTable[];
                             1426 
                             1428 
                             1429 ; 135  |extern LOGICAL_MEDIA_DESCRIPTOR g_MediaDescriptor[];
                             1430 
                             1435 
                             1436 ; 136  |extern LOGICAL_MEDIA g_Media[];
                             1437 ; 137  |extern WORD g_wNumMedia;
                             1438 
                             1440 
                             1441 ; 138  |extern LOGICAL_DRIVE_DESCRIPTOR g_DriveDescriptor[];
                             1442 
                             1447 
                             1448 ; 139  |extern LOGICAL_DRIVE g_Drive[];
                             1449 ; 140  |extern WORD g_wNumDrives;
                             1450 ; 141  |
                             1451 ; 142  |///////////////////////////////////////////////////////////////////////////////
                             1452 ; 143  |// SysCallFunction Variants
                             1453 ; 144  |///////////////////////////////////////////////////////////////////////////////
                             1454 ; 145  |RETCODE _asmfunc SysCallFunction_P_LOGICAL_MEDIA_DESCRIPTOR_f(WORD * RESOURCE,RETCODE _ree
                                  ntrant (int,int,int*),  int, int, int *);
                             1455 ; 146  |#define SysCallFunction_P_LOGICAL_MEDIA_DESCRIPTOR(rsrc,func,a,b,p) SysCallFunction_P_LOGI
                                  CAL_MEDIA_DESCRIPTOR_f((void*)rsrc,(func),(a),(b),(p))
                             1456 ; 147  |
                             1457 ; 148  |#endif
                             1458 
                             1460 
                             1461 ; 16   |#include "nandhal.h"
                             1462 
                             1464 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1465 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1466 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             1467 ; 3    |//
                             1468 ; 4    |// Filename:     NANDHal.h
                             1469 ; 5    |// Description:  Contains structs, prototypes, equates for the NAND Hal routines.
                             1470 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1471 ; 7    |
                             1472 ; 8    |#ifndef _NANDHAL_H
                             1473 ; 9    |#define _NANDHAL_H
                             1474 ; 10   |
                             1475 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1476 ; 12   |// Includes
                             1477 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1478 ; 14   |
                             1479 ; 15   |#include "errors.h"
                             1480 
                             1482 
                             1483 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1484 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                             1485 ; 3    |////
                             1486 ; 4    |//// Filename: errors.inc
                             1487 ; 5    |//// Description: 
                             1488 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             1489 ; 7    |
                             1490 ; 8    |#if (!defined(ERRORS_INC))
                             1491 ; 9    |#define ERRORS_INC 1
                             1492 ; 10   |
                             1493 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                             1494 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                             1495 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                             1496 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                             1497 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                             1498 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                             1499 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                             1500 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                             1501 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                             1502 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                             1503 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                             1504 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                             1505 ; 23   |// block in the device. The block was marked bad and tables updated.
                             1506 ; 24   |// The application must start over.
                             1507 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                             1508 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                             1509 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                             1510 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                             1511 ; 29   |
                             1512 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                             1513 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                             1514 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                             1515 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                             1516 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                             1517 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                             1518 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                             1519 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                             1520 ; 38   |//Specific to NAND
                             1521 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                             1522 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                             1523 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                             1524 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                             1525 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                             1526 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                             1527 ; 45   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1528 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                             1529 ; 47   |
                             1530 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                             1531 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                             1532 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                             1533 ; 51   |
                             1534 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                             1535 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                             1536 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                             1537 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                             1538 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                             1539 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                             1540 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                             1541 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                             1542 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                             1543 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                             1544 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                             1545 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                             1546 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                             1547 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                             1548 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                             1549 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                             1550 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                             1551 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                             1552 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                             1553 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                             1554 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                             1555 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                             1556 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                             1557 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                             1558 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                             1559 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                             1560 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                             1561 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                             1562 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                             1563 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                             1564 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                             1565 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                             1566 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                             1567 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                             1568 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                             1569 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                             1570 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                             1571 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                             1572 ; 90   |
                             1573 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                             1574 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                             1575 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                             1576 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                             1577 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                             1578 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                             1579 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                             1580 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                             1581 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                             1582 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                             1583 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                             1584 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                             1585 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                             1586 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                             1587 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                             1588 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                             1589 ; 107  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1590 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                             1591 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                             1592 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                             1593 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                             1594 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                             1595 ; 113  |
                             1596 ; 114  |// indicates that during the NandHalInit, the NandType did not
                             1597 ; 115  |// match the previously initialized Nand chip type.
                             1598 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                             1599 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                             1600 ; 118  |// Errors from calling HIL functions
                             1601 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                             1602 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                             1603 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                             1604 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                             1605 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                             1606 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                             1607 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                             1608 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                             1609 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                             1610 ; 128  |// for 3410 build
                             1611 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                             1612 ; 130  |// for 3410 build
                             1613 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                             1614 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                             1615 ; 133  |
                             1616 ; 134  |// indicates that the GetStatus returned a FAIL
                             1617 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                             1618 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                             1619 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                             1620 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                             1621 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                             1622 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                             1623 ; 141  |// indicates the NAND was already BUSY
                             1624 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                             1625 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                             1626 ; 144  |// ECC Error Codes
                             1627 ; 145  |// ECC Computation has successfully completed
                             1628 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                             1629 ; 147  |// ECC computation still busy
                             1630 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                             1631 ; 149  |// timed out while waiting on object
                             1632 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                             1633 ; 151  |// flag already set for SDK2.4 lock
                             1634 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                             1635 ; 153  |
                             1636 ; 154  |#define NANDHAL_ECC_NOERROR 0
                             1637 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                             1638 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                             1639 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                             1640 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                             1641 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                             1642 ; 160  |
                             1643 ; 161  |// MMC Errors
                             1644 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                             1645 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                             1646 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                             1647 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                             1648 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                             1649 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                             1650 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                             1651 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1652 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                             1653 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                             1654 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                             1655 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                             1656 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                             1657 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                             1658 ; 176  |
                             1659 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                             1660 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                             1661 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                             1662 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                             1663 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                             1664 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                             1665 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                             1666 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                             1667 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                             1668 ; 186  |
                             1669 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             1670 ; 188  |//// MMC HAL Error codes
                             1671 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                             1672 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                             1673 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                             1674 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                             1675 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                             1676 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                             1677 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                             1678 ; 196  |
                             1679 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                             1680 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                             1681 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                             1682 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                             1683 ; 201  |
                             1684 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                             1685 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                             1686 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                             1687 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                             1688 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                             1689 ; 207  |
                             1690 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                             1691 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                             1692 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                             1693 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                             1694 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                             1695 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                             1696 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                             1697 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                             1698 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                             1699 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                             1700 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                             1701 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                             1702 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                             1703 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                             1704 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                             1705 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                             1706 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                             1707 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                             1708 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                             1709 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                             1710 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                             1711 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                             1712 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                             1713 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1714 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                             1715 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                             1716 ; 234  |
                             1717 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                             1718 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                             1719 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                             1720 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                             1721 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                             1722 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                             1723 ; 241  |
                             1724 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                             1725 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                             1726 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                             1727 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                             1728 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                             1729 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                             1730 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                             1731 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                             1732 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                             1733 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                             1734 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                             1735 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                             1736 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                             1737 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                             1738 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                             1739 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                             1740 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                             1741 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                             1742 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                             1743 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                             1744 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                             1745 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                             1746 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                             1747 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                             1748 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                             1749 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                             1750 ; 268  |
                             1751 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                             1752 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                             1753 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                             1754 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                             1755 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                             1756 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                             1757 ; 275  |
                             1758 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                             1759 ; 277  |//MATH errors...
                             1760 ; 278  |#define ERRZeroDivide 0x7FFFFF
                             1761 ; 279  |
                             1762 ; 280  |//Memory Pointer errors...
                             1763 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                             1764 ; 282  |//****************************************************************/
                             1765 ; 283  |#if (!defined(NOERROR))
                             1766 ; 284  |#define NOERROR 0
                             1767 ; 285  |#endif
                             1768 ; 286  |
                             1769 ; 287  |////Added by RAKS
                             1770 ; 288  |
                             1771 ; 289  |#define ERRProgram 0x911111
                             1772 ; 290  |#define ERRNoMedia 0x922222
                             1773 ; 291  |#define ERRHwFail 0x933333   
                             1774 ; 292  |#define ERRInvMedia 0x944444
                             1775 ; 293  |#define ERRBlkFail 0x955555
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1776 ; 294  |#define ERRInvDataStatus 0x966666
                             1777 ; 295  |#define ERRWriteFail 0x977777
                             1778 ; 296  |#define ERRECCCorr 0x988888
                             1779 ; 297  |#define ERRECCFail 0x999999
                             1780 ; 298  |#define ERRZoneFull 0x9aaaaa
                             1781 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                             1782 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                             1783 ; 301  |//invalid partition table signature. 
                             1784 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                             1785 ; 303  |//boot ID bad
                             1786 ; 304  |#define ERRBootID 0x9BBBBB   
                             1787 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                             1788 ; 306  |////Nothing was here : RAKS
                             1789 ; 307  |//JUMP instruction bad
                             1790 ; 308  |#define ERRBootJump 0x9DDDDD  
                             1791 ; 309  |//ID Byte bad
                             1792 ; 310  |#define ERRIDByte 0x9EEEEE  
                             1793 ; 311  |
                             1794 ; 312  |
                             1795 ; 313  |//****************************************************************
                             1796 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                             1797 ; 315  |//****************************************************************
                             1798 ; 316  |// Master ERROR File
                             1799 ; 317  |//****************************************************************/
                             1800 ; 318  |// FAT File System Error Codes
                             1801 ; 319  |// corrupt FAT
                             1802 ; 320  |#define FATCorrupt -1        
                             1803 ; 321  |// invalid FAT sector
                             1804 ; 322  |#define DIRInvlaidSector -2        
                             1805 ; 323  |
                             1806 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                             1807 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                             1808 ; 326  |#define FATwarningReservedCx 0x0A1111
                             1809 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                             1810 ; 328  |//FATcxsFree==0 
                             1811 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                             1812 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                             1813 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                             1814 ; 332  |
                             1815 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                             1816 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                             1817 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                             1818 ; 336  |
                             1819 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                             1820 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                             1821 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                             1822 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                             1823 ; 341  |//No Free Cxs on FAT Scan!
                             1824 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                             1825 ; 343  |
                             1826 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                             1827 ; 345  |
                             1828 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                             1829 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                             1830 ; 348  |
                             1831 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                             1832 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                             1833 ; 351  |
                             1834 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                             1835 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                             1836 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                             1837 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1838 ; 356  |
                             1839 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                             1840 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                             1841 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                             1842 ; 360  |
                             1843 ; 361  |#define SEEKprefix 0x85
                             1844 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                             1845 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                             1846 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                             1847 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                             1848 ; 366  |
                             1849 ; 367  |#define READprefix 0x86
                             1850 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                             1851 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                             1852 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                             1853 ; 371  |#define READerrorAccessDenied 0x86ADAD
                             1854 ; 372  |#define READerrorFreeCx 0x860000
                             1855 ; 373  |#define READerrorEndOfChain 0x861111
                             1856 ; 374  |#define READerrorReservedCx 0x862222
                             1857 ; 375  |#define READerrorBadCx 0x863333
                             1858 ; 376  |
                             1859 ; 377  |#define WRITEprefix 0x87
                             1860 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                             1861 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                             1862 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                             1863 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                             1864 ; 382  |#define WRITEerrorFreeCx 0x870000
                             1865 ; 383  |#define WRITEerrorEndOfChain 0x871111
                             1866 ; 384  |#define WRITEerrorReservedCx 0x872222
                             1867 ; 385  |#define WRITEerrorBadCx 0x873333
                             1868 ; 386  |
                             1869 ; 387  |#define UTILprefix 0x88
                             1870 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                             1871 ; 389  |
                             1872 ; 390  |// Directory Error Codes
                             1873 ; 391  |
                             1874 ; 392  |// invalid DIR sector specified
                             1875 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                             1876 ; 394  |// PATH search string has invlaid directory
                             1877 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                             1878 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                             1879 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                             1880 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                             1881 ; 399  |// Bad cluster number
                             1882 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                             1883 ; 401  |// Can't open ROOT
                             1884 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                             1885 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                             1886 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                             1887 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                             1888 ; 406  |// bad record number to read
                             1889 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                             1890 ; 408  |// record requeste not in range
                             1891 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                             1892 ; 410  |// record requeste past end of ROOT
                             1893 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                             1894 ; 412  |// device number invalid
                             1895 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                             1896 ; 414  |// FCB Does not popint to a sub-Directory entry
                             1897 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                             1898 ; 416  |// Path specified is invalid
                             1899 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1900 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                             1901 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                             1902 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                             1903 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                             1904 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                             1905 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                             1906 ; 424  |
                             1907 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                             1908 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                             1909 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                             1910 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                             1911 ; 429  |// String Manipulation Error Codes
                             1912 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                             1913 ; 431  |
                             1914 ; 432  |#endif //@DEF(ERRORS_INC)
                             1915 ; 433  |
                             1916 
                             1918 
                             1919 ; 16   |#include "sectordef.h"
                             1920 
                             1922 
                             1923 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1924 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             1925 ; 3    |//
                             1926 ; 4    |// Filename:     sectordef.h
                             1927 ; 5    |// Description:  Contains structs, prototypes, equates for the NAND Hal & other 
                             1928 ; 6    |//               routines.
                             1929 ; 7    |////////////////////////////////////////////////////////////////////////////////
                             1930 ; 8    |
                             1931 ; 9    |#ifndef _SECTORDEF_H
                             1932 ; 10   |#define _SECTORDEF_H
                             1933 ; 11   |
                             1934 ; 12   |    #define RAM_SECTOR_TOTAL_SIZE                 (528)
                             1935 ; 13   |    #define RAM_SECTOR_DATA_SIZE                  (512)
                             1936 ; 14   |    #define RAM_SECTOR_REDUNDANT_SIZE             (16)
                             1937 ; 15   |
                             1938 ; 16   |
                             1939 ; 17   |    #define MMC_SECTOR_TOTAL_SIZE                 (528)
                             1940 ; 18   |    #define MMC_SECTOR_DATA_SIZE                  (512)
                             1941 ; 19   |    #define MMC_SECTOR_REDUNDANT_SIZE             (16)
                             1942 ; 20   |
                             1943 ; 21   |
                             1944 ; 22   |    #define SSFDC_SECTOR_TOTAL_SIZE                 (528)
                             1945 ; 23   |    #define SSFDC_SECTOR_DATA_SIZE                  (512)
                             1946 ; 24   |    #define SSFDC_SECTOR_REDUNDANT_SIZE             (16)
                             1947 ; 25   |
                             1948 ; 26   | // Define large sector macros as small ones so sdk3.x fits in ram and mtp with small 
                             1949 ; 27   | // sector flash gets the performance boosts from optimized nand timings, etc. 
                             1950 ; 28   | // TOVERIFY: Comment out the next macro def when you want large sector support as 
                             1951 ; 29   | // in sdk2.6 and you can find the free data RAM. Or uncomment if you want to save data ra
                                  m
                             1952 ; 30   | // and only support 512 byte sectors and their associated flash types. 
                             1953 ; 31   |//#define LARGE_SECTOR_DEFS_AS_SMALL_SECTOR
                             1954 ; 32   |#ifdef LARGE_SECTOR_DEFS_AS_SMALL_SECTOR 
                             1955 ; 33   |    #define LARGE_SECTOR_TOTAL_SIZE                 (528)
                             1956 ; 34   |    #define LARGE_SECTOR_DATA_SIZE                  (512)
                             1957 ; 35   |    #define LARGE_SECTOR_REDUNDANT_SIZE             (16)
                             1958 ; 36   |#else
                             1959 ; 37   |    // Real large sector defines to use when large sector flash support is desired.
                             1960 ; 38   |    #define LARGE_SECTOR_TOTAL_SIZE                 (2112)
                             1961 ; 39   |    #define LARGE_SECTOR_DATA_SIZE                  (2048)
                             1962 ; 40   |    #define LARGE_SECTOR_REDUNDANT_SIZE             (64)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1963 ; 41   |#endif
                             1964 ; 42   |    
                             1965 ; 43   |    // round up to the nearest WORD, then add one to pad for the ECC DMA bug
                             1966 ; 44   |    #define SECTOR_BUFFER_ALLOC_SIZE(a)             (((a+2)/3)+1)
                             1967 ; 45   |
                             1968 ; 46   |
                             1969 ; 47   |    // These are moved here from chkdsk.h     TOVERIFY. 
                             1970 ; 48   |    #define SEC_512_BYTES_PER_SECTOR                        SSFDC_SECTOR_DATA_SIZE
                             1971 ; 49   |        #define SEC_512_BYTES_TOTAL_SIZE                                                SS
                                  FDC_SECTOR_TOTAL_SIZE
                             1972 ; 50   |        #define SEC_512_WORDS_TOTAL_SIZE                                                17
                                  6
                             1973 ; 51   |    #define SEC_512_BYTES_CLUSTER_ENTRY_PER_SECTOR_SHIFT    12
                             1974 ; 52   |    #define SEC_512_BYTES_DIR_REC_PER_SECTOR                16
                             1975 ; 53   |    #define SEC_512_BYTES_WORDS_PER_SECTOR                  177
                             1976 ; 54   |    #define SEC_2K_BYTES_PER_SECTOR                         LARGE_SECTOR_DATA_SIZE
                             1977 ; 55   |        #define SEC_2K_BYTES_TOTAL_SIZE                                                 LA
                                  RGE_SECTOR_TOTAL_SIZE
                             1978 ; 56   |    #define SEC_2K_BYTES_CLUSTER_ENTRY_PER_SECTOR_SHIFT     12
                             1979 ; 57   |    #define SEC_2K_BYTES_DIR_REC_PER_SECTOR                 64
                             1980 ; 58   |    #define SEC_2K_BYTES_WORDS_PER_SECTOR                   705
                             1981 ; 59   |    #define SEC_2K_BYTES_WORDS_PER_SECTOR_NO_RA             683
                             1982 ; 60   |
                             1983 ; 61   |    // Next 5 lines imported from nandsystemdrivewritesector.c
                             1984 ; 62   |    #define RA_ATTR_MEMORY_OFFSET           682
                             1985 ; 63   |    #define NUMBER_OF_WORDS_IN_512BYTES     171
                             1986 ; 64   |    #define NUM_ECC_DATA_IN_WORDS           3
                             1987 ; 65   |    #define SEC_512_WORD1_RA_SWAP           171
                             1988 ; 66   |    #define SEC_512_WORD2_RA_SWAP           173
                             1989 ; 67   |
                             1990 ; 68   |#endif  // _SECTORDEF_H
                             1991 ; 69   |
                             1992 
                             1994 
                             1995 ; 17   |
                             1996 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             1997 ; 19   |// Definitions
                             1998 ; 20   |///////////////////////////////////////////////////////////////////////////////
                             1999 ; 21   |// Can disable ECC interrupt for testing
                             2000 ; 22   |#if 0 
                             2001 ; 23   |#define ECC_POLLING
                             2002 ; 24   |#endif
                             2003 ; 25   |
                             2004 ; 26   |#define RSECC_DELAY_COUNTER_VALUE 1000
                             2005 ; 27   |
                             2006 ; 28   |//-------------------------------
                             2007 ; 29   |// these byte values are also seen in device ID in nandtables.h and nanddesc.c for bootmgr
                                  .
                             2008 ; 30   |#define STMakerID    0x20
                             2009 ; 31   |#define HynixMakerID 0xAD
                             2010 ; 32   |
                             2011 ; 33   |#define SAMSUNG_MAKER_ID 0xEC
                             2012 ; 34   |#define MICRON_MAKER_ID   0x2c
                             2013 ; 35   |
                             2014 ; 36   |#define ToshibaMakerID        0x98
                             2015 ; 37   |#define RENESAS_MAKER_ID  0x07
                             2016 ; 38   |//#define SandiskMakerID 0x000045
                             2017 ; 39   |//-------------------------------
                             2018 ; 40   |// place the tables in X space.
                             2019 ; 41   |#define NAND_TABLES_MEMSPACE _X
                             2020 ; 42   |
                             2021 ; 43   |#define NANDHAL_MEM_X _X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2022 ; 44   |#define NANDHAL_MEM_Y _Y
                             2023 ; 45   |#define NANDHAL_MEM NANDHAL_MEM_Y    // ***** IF THIS CHANGES, YOU MUST UPDATE NANDHal.inc
                                   to MATCH!!!!
                             2024 ; 46   |
                             2025 ; 47   |#define LEAVE_CE_PIN_ASSERTED 0  // formerly FALSE
                             2026 ; 48   |#define DEASSERT_CE_PIN       1  // formerly TRUE
                             2027 ; 49   |
                             2028 ; 50   |// These are for readfunctions -- to ease readability
                             2029 ; 51   |#define wColumnByteZero 0
                             2030 ; 52   |#define wColumnAddrZero 0
                             2031 ; 53   |#define wRowByteZero    0
                             2032 ; 54   |#define wRowByteOne     1
                             2033 ; 55   |#define wRowAddrZero    0
                             2034 ; 56   |#define wReadZeroBytes  0
                             2035 ; 57   |#define wReadOneByte    1
                             2036 ; 58   |#define wReadTwoBytes   2
                             2037 ; 59   |#define wReadThreeBytes 3
                             2038 ; 60   |#define wReadSixBytes   6
                             2039 ; 61   |#define wByteOffsetZero 0
                             2040 ; 62   |
                             2041 ; 63   |// Timeouts -- TBD -- These either get replaced altogether, or go somewhere else.
                             2042 ; 64   |// WaitForREADY() timeout counts
                             2043 ; 65   |// These control how long we will wait for the NAND to finish some internal operation
                             2044 ; 66   |// (e.g. Read Page (to cache), Program Page (from cache), Erase Block, Reset).
                             2045 ; 67   |// NOTE: For timeouts, each "count" is on the order of 50 nsec.
                             2046 ; 68   |// (<10 instructions, at a few 10s of nanosecs each)
                             2047 ; 69   |// The settings below are probably very conservative, but still short in human time
                             2048 ; 70   |// (e.g. 2000000 counts is approx. 100 msec)
                             2049 ; 71   |#define NAND_READ_PAGE_TIMEOUT          (2000000)
                             2050 ; 72   |#define NAND_READ_REDUNDANT_TIMEOUT     (2000000)
                             2051 ; 73   |#define NAND_RESET_TIMEOUT              (2000000)
                             2052 ; 74   |#define NAND_WRITE_PAGE_TIMEOUT         (2000000)
                             2053 ; 75   |#define NAND_ERASE_BLOCK_TIMEOUT        (2000000)
                             2054 ; 76   |
                             2055 ; 77   |// Read Status Register Masks
                             2056 ; 78   |// commented out with definition of new API
                             2057 ; 79   |// #define NAND_SR_PASS_MASK           0x000001
                             2058 ; 80   |// #define NAND_SR_CACHEPASS_MASK      0x000002
                             2059 ; 81   |// #define NAND_SR_READY_MASK          0x000060
                             2060 ; 82   |// //#define NAND_SR_READY_MASK          0x000040
                             2061 ; 83   |// #define NAND_SR_WRITEPROTECT_MASK   0x000080
                             2062 ; 84   |
                             2063 ; 85   |// new definitions for standardized API
                             2064 ; 86   |#define NAND_STATUS_PASS_MASK                   0x000001
                             2065 ; 87   |#define NAND_STATUS_DISTRICT_0_PASS_MASK        0x000002
                             2066 ; 88   |#define NAND_STATUS_DISTRICT_1_PASS_MASK        0x000004
                             2067 ; 89   |#define NAND_STATUS_DISTRICT_2_PASS_MASK        0x000008
                             2068 ; 90   |#define NAND_STATUS_DISTRICT_3_PASS_MASK        0x000010
                             2069 ; 91   |#define NAND_STATUS_TRUE_READY_MASK             0x000020
                             2070 ; 92   |#define NAND_STATUS_CACHE_READY_MASK            0x000040
                             2071 ; 93   |#define NAND_STATUS_WRITE_PROTECT_MASK          0x000080
                             2072 ; 94   |#define NAND_STATUS_CACHE_PREVIOUS_PASS_MASK    0x000100
                             2073 ; 95   |// The next 3 are used for Renesas part.
                             2074 ; 96   |#define NAND_STATUS_PROGRAM_CHECK_PASS_MASK     0x000008
                             2075 ; 97   |#define NAND_STATUS_ERASE_CHECK_PASS_MASK       0x000010
                             2076 ; 98   |#define NAND_STATUS_ECC_CORRECTABLE_MASK        0x000020
                             2077 ; 99   |#define NAND_STATUS_INVALID_MASK                0x800000
                             2078 ; 100  |
                             2079 ; 101  |#define NAND_STATUS_PASS_VALUE                  0x000001
                             2080 ; 102  |#define NAND_STATUS_DISTRICT_0_PASS_VALUE       0x000002
                             2081 ; 103  |#define NAND_STATUS_DISTRICT_1_PASS_VALUE       0x000004
                             2082 ; 104  |#define NAND_STATUS_DISTRICT_2_PASS_VALUE       0x000008
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2083 ; 105  |#define NAND_STATUS_DISTRICT_3_PASS_VALUE       0x000010
                             2084 ; 106  |#define NAND_STATUS_TRUE_READY_VALUE            0x000020
                             2085 ; 107  |#define NAND_STATUS_CACHE_READY_VALUE           0x000040
                             2086 ; 108  |#define NAND_STATUS_WRITE_PROTECT_VALUE         0x000080
                             2087 ; 109  |#define NAND_STATUS_CACHE_PREVIOUS_PASS_VALUE   0x000100
                             2088 ; 110  |
                             2089 ; 111  |#define NAND_STATUS_PROGRAM_CHECK_PASS_VALUE    0x000008
                             2090 ; 112  |#define NAND_STATUS_ERASE_CHECK_PASS_VALUE      0x000010
                             2091 ; 113  |#define NAND_STATUS_ECC_CORRECTABLE             0x000020
                             2092 ; 114  |
                             2093 ; 115  |#define WP_NAND_INTERNAL    0   // write protect line for internal
                             2094 ; 116  |#define WP_EXTERNAL         1   // write protect line for external
                             2095 ; 117  |
                             2096 ; 118  |#define MakerIDMask 0x0000ff
                             2097 ; 119  |#define INVALID_SECTOR_ADDRESS     (0xFFFFF0) // FFFFF0 is a dummy value intended to be an
                                   invalid sector address
                             2098 ; 120  |
                             2099 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             2100 ; 122  |//  Macros
                             2101 ; 123  |/////////////////////////////////////////////////////////////////////////////////
                             2102 ; 124  |
                             2103 ; 125  |//////////////////////////////////////////
                             2104 ; 126  |// NAND-Specific Physical Media structures
                             2105 ; 127  |//////////////////////////////////////////
                             2106 ; 128  |typedef enum {
                             2107 ; 129  |  // NOTE: NandHalInit checks for zero to see if initialization needed.
                             2108 ; 130  |  // Therefore, do not use a ZERO in the typedef.
                             2109 ; 131  |  eNandTypeUnknown = 0, // use for init
                             2110 ; 132  |  eNandType1 = 1,
                             2111 ; 133  |  eNandType2 = 2,
                             2112 ; 134  |  eNandType4 = 4,
                             2113 ; 135  |  eNandType5 = 5,
                             2114 ; 136  |  eNandType6 = 6,
                             2115 ; 137  |  eNandType7 = 7
                             2116 ; 138  |} NAND_TYPE;
                             2117 ; 139  |
                             2118 ; 140  |typedef enum {
                             2119 ; 141  |  eNandLockStateFree   = 0,
                             2120 ; 142  |  eNandLockStateLocked = 1
                             2121 ; 143  |} NAND_LOCK_STATE;
                             2122 ; 144  |
                             2123 ; 145  |typedef enum {
                             2124 ; 146  |    eNandProgCmdReadID                    = 0x000090,
                             2125 ; 147  |    eNandProgCmdReadID2                   = 0x000091,
                             2126 ; 148  |    eNandProgCmdReadStatus                = 0x000070,
                             2127 ; 149  |    eNandProgCmdReset                     = 0x0000ff,
                             2128 ; 150  |    eNandProgCmdSerialDataInput           = 0x000080,   // Page Program/Cache Program
                             2129 ; 151  |    eNandProgCmdRead1                     = 0x000000,   // Read or Read for CopyBack
                             2130 ; 152  |    eNandProgCmdRead1_2ndCycle            = 0x000030,   // Second Cycle for Read (Type 2 N
                                  ANDs)
                             2131 ; 153  |    eNandProgCmdReadForCopyBack_2ndCycle  = 0x000035,   // Second Cycle for Read for Copy 
                                  Back
                             2132 ; 154  |    eNandProgCmdReadForCacheCopyback_2nd  = 0x00003A,
                             2133 ; 155  |    eNandProgCmdRead2                     = 0x000001,
                             2134 ; 156  |    eNandProgCmdRead3                     = 0x000050,
                             2135 ; 157  |    eNandProgCmdPageProgram               = 0x000010,   // Second cycle for wSerialDataInp
                                  ut for Page Program
                             2136 ; 158  |    eNandProgCmdCacheProgram              = 0x000015,   // Second cycle for wSerialDataInp
                                  ut for Cache Program
                             2137 ; 159  |    eNandProgCmdCopyBackProgram           = 0x000085,
                             2138 ; 160  |    eNandProgCmdCopyBack2Program          = 0x00008C,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2139 ; 161  |    eNandProgCmdCopyBackProgram_2ndCycle  = 0x000010,   // Second cycle for Copy Back Prog
                                  ram
                             2140 ; 162  |    eNandProgCmdBlockErase                = 0x000060,
                             2141 ; 163  |    eNandProgCmdBlockErase_2ndCycle       = 0x0000d0,
                             2142 ; 164  |    eNandProgCmdRandomDataIn              = 0x000085,
                             2143 ; 165  |    eNandProgCmdRandomDataOut             = 0x000005,
                             2144 ; 166  |    eNandProgCmdRandomDataOut_2ndCycle    = 0x0000E0,
                             2145 ; 167  |    eNandProgCmdReadMultiPlaneStatus      = 0x000071,   // MLC MultiPlane
                             2146 ; 168  |    eNandProgCmdReadErrorStatus           = 0x000072,   // MLC Single Plane Error Status
                             2147 ; 169  |    eNandProgCmdReadMultiPlaneErrorStatus = 0x000073,   // MLC MultiPlane Error Status.
                             2148 ; 170  |    eNandProgCmdMultiPlaneWrite           = 0x000011,
                             2149 ; 171  |    eNandProgCmdStatusModeReset           = 0x00007F,
                             2150 ; 172  |    eNandProgCmdMultiPlaneRead_2ndCycle   = 0x000031,
                             2151 ; 173  |    eNandProgCmdPageDataOutput            = 0x000006,
                             2152 ; 174  |    eNandProgCmdMultiPlaneVerifyErased    = 0x0000D3,
                             2153 ; 175  |    eNandProgCmdMultiPlaneBlockErase      = 0x00ffff,   // TBD !!! Need code for this.
                             2154 ; 176  |    eNandProgCmdNone                      = 0x7FFFFF,   // invalid entry
                             2155 ; 177  |    eNandProgCmdDummyProgram              = 0x6FFFFF    // invalid entry
                             2156 ; 178  |} NAND_PROGRAM_CODES;
                             2157 ; 179  |
                             2158 ; 180  |
                             2159 ; 181  |
                             2160 ; 182  |// NAND Physical Media API functions
                             2161 ; 183  |typedef RETCODE (*P_HAL_READ_SECTOR_FUNCTION)(struct NandPhysicalMediaTag *, WORD, P_SECTO
                                  R_BUFFER);
                             2162 ; 184  |typedef RETCODE (*P_HAL_READ_SECTOR_REDUNDANT_FUNCTION)(struct NandPhysicalMediaTag *, WOR
                                  D, P_SECTOR_BUFFER, BOOL);
                             2163 ; 185  |typedef RETCODE (*P_HAL_ENABLE_WRITES_FUNCTION)(WORD);
                             2164 ; 186  |typedef RETCODE (*P_HAL_DISABLE_WRITES_FUNCTION)(WORD);
                             2165 ; 187  |typedef RETCODE (*P_HAL_WRITE_SECTOR_FUNCTION)(struct NandPhysicalMediaTag *, WORD, P_SECT
                                  OR_BUFFER);
                             2166 ; 188  |typedef RETCODE (*P_HAL_WRITE_SECTOR_REDUNDANT_FUNCTION)(struct NandPhysicalMediaTag *, WO
                                  RD, P_SECTOR_BUFFER);
                             2167 ; 189  |typedef RETCODE (*P_HAL_ERASE_BLOCK_FUNCTION)(struct NandPhysicalMediaTag *, WORD);
                             2168 ; 190  |typedef RETCODE (*P_HAL_ERASE_BLOCK_ASYNC_FUNCTION)(struct NandPhysicalMediaTag *, WORD);
                             2169 ; 191  |typedef RETCODE (*P_HAL_COPY_SECTORS_FUNCTION)(struct NandPhysicalMediaTag *, WORD, WORD, 
                                  WORD);
                             2170 ; 192  |typedef RETCODE (*P_HAL_GET_STATUS_FUNCTION)(struct NandPhysicalMediaTag *, WORD *, WORD);
                                  
                             2171 ; 193  |typedef RETCODE (*P_HAL_SETUP_WRITE_SECTOR_FUNCTION)(struct NandPhysicalMediaTag *, WORD);
                                  
                             2172 ; 194  |typedef RETCODE (*P_HAL_SETUP_WRITE_SECTOR_REDUNDANT_FUNCTION)(struct NandPhysicalMediaTag
                                   *, WORD);
                             2173 ; 195  |typedef RETCODE (*P_HAL_SEND_SECTOR_DATA_FUNCTION)(struct NandPhysicalMediaTag *, P_SECTOR
                                  _BUFFER);
                             2174 ; 196  |typedef RETCODE (*P_HAL_SEND_PROGRAM_COMMAND_FUNCTION)(struct NandPhysicalMediaTag *, NAND
                                  _PROGRAM_CODES);
                             2175 
                             2210 
                             2211 ; 197  |typedef RETCODE (*P_HAL_GET_DMA_STATUS_FUNCTION)(struct NandPhysicalMediaTag *);
                             2212 ; 198  |typedef RETCODE (*P_HAL_LOCK_INTERFACE_PORT_FUNCTION)(void);
                             2213 ; 199  |typedef RETCODE (*P_HAL_RELEASE_INTERFACE_PORT_FUNCTION)(void);
                             2214 ; 200  |typedef RETCODE (*P_HAL_LOCK_NAND_FUNCTION)(struct NandPhysicalMediaTag *);
                             2215 ; 201  |typedef RETCODE (*P_HAL_RELEASE_NAND_FUNCTION)(struct NandPhysicalMediaTag *);
                             2216 ; 202  |typedef RETCODE (*P_HAL_START_COMPUTE_ECC_FUNCTION)(P_SECTOR_BUFFER,WORD);
                             2217 ; 203  |typedef RETCODE (*P_HAL_COMPUTE_ECC_GET_STATUS_FUNCTION)(void);
                             2218 ; 204  |typedef RETCODE (*P_HAL_CORRECT_ECC_FUNCTION)(P_SECTOR_BUFFER);
                             2219 ; 205  |typedef BOOL    (*P_BUSYDONE_CALLBACK_FUNCTION)(int, void*);
                             2220 ; 206  |typedef RETCODE (*P_HAL_MSW_SECTOR_COMMIT)(struct NandPhysicalMediaTag *);
                             2221 ; 207  |typedef RETCODE (*P_HAL_MSW_PAGE_COMMIT)(struct NandPhysicalMediaTag *);
                             2222 
                             2303 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2304 ; 208  |
                             2305 ; 209  |
                             2306 ; 210  |typedef struct {
                             2307 ; 211  |    WORD wReadSectorCodeBank;
                             2308 ; 212  |    P_HAL_READ_SECTOR_FUNCTION pReadSector;
                             2309 ; 213  |    WORD wReadSectorRedundantCodeBank;
                             2310 ; 214  |    P_HAL_READ_SECTOR_REDUNDANT_FUNCTION pReadSectorRedundant;
                             2311 ; 215  |    WORD wGetStatusCodeBank;
                             2312 ; 216  |    P_HAL_GET_STATUS_FUNCTION pGetStatus;
                             2313 ; 217  |    WORD wEnableWritesCodeBank;
                             2314 ; 218  |    P_HAL_ENABLE_WRITES_FUNCTION pEnableWrites;
                             2315 ; 219  |    WORD wDisableWritesCodeBank;
                             2316 ; 220  |    P_HAL_DISABLE_WRITES_FUNCTION pDisableWrites;
                             2317 ; 221  |    WORD wWriteSectorCodeBank;
                             2318 ; 222  |    P_HAL_WRITE_SECTOR_FUNCTION pWriteSector;
                             2319 ; 223  |    WORD wWriteSectorRedundantCodeBank;
                             2320 ; 224  |    P_HAL_WRITE_SECTOR_REDUNDANT_FUNCTION pWriteSectorRedundant;
                             2321 ; 225  |    WORD wEraseBlockCodeBank;
                             2322 ; 226  |    P_HAL_ERASE_BLOCK_FUNCTION pEraseBlock;
                             2323 ; 227  |    WORD wEraseBlockAsyncCodeBank;
                             2324 ; 228  |    P_HAL_ERASE_BLOCK_ASYNC_FUNCTION pEraseBlockAsync;
                             2325 ; 229  |    WORD wCopySectorsCodeBank;
                             2326 ; 230  |    P_HAL_COPY_SECTORS_FUNCTION pCopySectors;
                             2327 ; 231  |    WORD wSetupWriteSectorCodeBank;
                             2328 ; 232  |    P_HAL_SETUP_WRITE_SECTOR_FUNCTION pSetupWriteSector;
                             2329 ; 233  |    WORD wSetupWriteSectorRedundantCodeBank;
                             2330 ; 234  |    P_HAL_SETUP_WRITE_SECTOR_REDUNDANT_FUNCTION pSetupWriteSectorRedundant;
                             2331 ; 235  |    WORD wSendSectorDataCodeBank;
                             2332 ; 236  |    P_HAL_SEND_SECTOR_DATA_FUNCTION pSendSectorData;
                             2333 ; 237  |    WORD wSendProgramCommandCodeBank;
                             2334 ; 238  |    P_HAL_SEND_PROGRAM_COMMAND_FUNCTION pSendProgramCommand;
                             2335 ; 239  |    WORD wStartComputeECCCodeBank;
                             2336 ; 240  |    P_HAL_START_COMPUTE_ECC_FUNCTION pStartComputeECC;
                             2337 ; 241  |    WORD wComputeECCGetStatusCodeBank;
                             2338 ; 242  |    P_HAL_COMPUTE_ECC_GET_STATUS_FUNCTION pComputeECCGetStatus;
                             2339 ; 243  |    WORD wCorrectECCCodeBank;
                             2340 ; 244  |    P_HAL_CORRECT_ECC_FUNCTION pCorrectECC;
                             2341 ; 245  |    WORD wSectorCommitBank;
                             2342 ; 246  |    P_HAL_MSW_SECTOR_COMMIT pCommitSector;
                             2343 ; 247  |    WORD wPageCommitBank;
                             2344 ; 248  |    P_HAL_MSW_PAGE_COMMIT pCommitPage;
                             2345 ; 249  |
                             2346 ; 250  |} NANDHAL_API_DESCRIPTOR, * P_NANDHAL_API_DESCRIPTOR;
                             2347 
                             2399 
                             2400 ; 251  |
                             2401 ; 252  |typedef struct {
                             2402 ; 253  |    P_NANDHAL_API_DESCRIPTOR pNandHalApi;
                             2403 ; 254  |    NAND_TYPE                NandType;
                             2404 ; 255  |
                             2405 ; 256  |    // SECTOR PARAMETERS
                             2406 ; 257  |    WORD wSectorTotalSize;              // Total sector size (Data + Redundant Area)
                             2407 ; 258  |    WORD wSectorDataSize;               // Number of Data Bytes per Page
                             2408 ; 259  |    WORD wRedundantAreaSize;            // Number of Bytes per Redundant/Spare Area
                             2409 ; 260  |    // A physical Page may contain multiple Sectors.
                             2410 ; 261  |    // It is assumed that the number or Sectors per Page is always
                             2411 ; 262  |    // a power of 2 (i.e. 1,2,4...)
                             2412 ; 263  |    // The following elements are used to help address the Sectors within a Page
                             2413 ; 264  |    WORD wSectorToPageShift;            // Number of right shifts to compute Page Num from
                                   Sector Num
                             2414 ; 265  |    WORD wSectorInPageMask;             // Mask to extract "relative sector in Page" from 
                                  absolute Sector Num
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2415 ; 266  |
                             2416 ; 267  |    // BLOCK PARAMETERS
                             2417 ; 268  |    WORD wSectorsToBlockShift;
                             2418 ; 269  |    WORD wSectorsPerBlockMask;
                             2419 ; 270  |    WORD wNumberSectorsPerBlock;
                             2420 ; 271  |    WORD wPagesPerBlock;
                             2421 ; 272  |
                             2422 ; 273  |    // DEVICE ADDRESSING PARAMETERS
                             2423 ; 274  |    WORD wNumColumnBytes;
                             2424 ; 275  |    WORD wNumRowBytes;
                             2425 ; 276  |    BOOL bSendAddressForEachSector;
                             2426 ; 277  |} NAND_PARAMETERS_DESCRIPTOR, * P_NAND_PARAMETERS_DESCRIPTOR;
                             2427 
                             2454 
                             2455 ; 278  |
                             2456 ; 279  |typedef struct NandPhysicalMediaTag{
                             2457 ; 280  |    P_NAND_PARAMETERS_DESCRIPTOR pNANDParams;
                             2458 ; 281  |    WORD                         wChipNumber;
                             2459 ; 282  |    NAND_LOCK_STATE              Lock;
                             2460 ; 283  |    BOOL                         bNANDIsBusy;              // Used for SetNANDBusy and NAN
                                  DIsReady
                             2461 ; 284  |    P_BUSYDONE_CALLBACK_FUNCTION pBusyDoneCallbackFunction;// Used for SetNANDBusy and NAN
                                  DIsReady
                             2462 ; 285  |    void                      *  pBusyArg;                 // Used for SetNANDBusy and NAN
                                  DIsReady
                             2463 ; 286  |    WORD                         wTotalSectors;
                             2464 ; 287  |    WORD                         wTotalBlocks;
                             2465 ; 288  |    WORD                         wTotalInternalDice;       // (1/2/4/...) - number of chip
                                  s pretending to be a single chip
                             2466 ; 289  |    WORD                         wBlocksPerDie;            // (wTotalBlocks / wTotalIntern
                                  alDice )
                             2467 ; 290  |} NAND_PHYSICAL_MEDIA_DESCRIPTOR, * P_NAND_PHYSICAL_MEDIA_DESCRIPTOR;
                             2468 
                             2480 
                             2481 ; 291  |
                             2482 ; 292  |
                             2483 ; 293  |// These are physical parameters that can be overruled in NAND_INIT_DESCRIPTOR
                             2484 ; 294  |// by analyzing the data read during read IDs command.
                             2485 ; 295  |typedef struct {
                             2486 ; 296  |    WORD                     wTotalInternalDice;       // (1/2/4/...) - number of chips pr
                                  etending to be a single chip
                             2487 ; 297  |    WORD                     wBlocksPerDie;            // (wTotalBlocks / wTotalInternalDi
                                  ce)
                             2488 ; 298  |
                             2489 ; 299  |} NAND_OVER_RULED_PARAMTERS;
                             2490 ; 300  |
                             2491 ; 301  |// These are used by the TypeNDescriptor files -- use for copying.
                             2492 ; 302  |typedef struct {
                             2493 ; 303  |    WORD wSectorTotalSize;       // Total sector size (Data + Redundant Area)
                             2494 ; 304  |    // A physical Page may contain multiple Sectors.
                             2495 ; 305  |    // It is assumed that the number or Sectors per Page is always
                             2496 ; 306  |    // a power of 2 (i.e. 1,2,4...)
                             2497 ; 307  |    // The following elements are used to help address the Sectors within a Page
                             2498 ; 308  |    BOOL bSendAddressForEachSector; // FALSE if sectors in Page can be DMA'd without new s
                                  etup
                             2499 ; 309  |} NAND_SECTOR_DESCRIPTOR, * P_NAND_SECTOR_DESCRIPTOR;
                             2500 ; 310  |
                             2501 ; 311  |typedef struct {
                             2502 ; 312  |    WORD wNumberSectorsPerBlock;
                             2503 ; 313  |    WORD wPagesPerBlock;
                             2504 ; 314  |} NAND_BLOCK_DESCRIPTOR, * P_NAND_BLOCK_DESCRIPTOR;
                             2505 ; 315  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2506 ; 316  |typedef struct {
                             2507 ; 317  |    WORD wNumColumnBytes;
                             2508 ; 318  |    WORD wNumRowBytes;
                             2509 ; 319  |} NAND_DEVICE_ADDR_DESCRIPTOR, * P_NAND_DEVICE_ADDR_DESCRIPTOR;
                             2510 
                             2523 
                             2524 ; 320  |
                             2525 ; 321  |typedef struct {
                             2526 ; 322  |    // at init -- these are copied to NAND_PARAMETERS_DESCRIPTOR
                             2527 ; 323  |    NAND_SECTOR_DESCRIPTOR NAND_TABLES_MEMSPACE *         pSectorDescriptor;
                             2528 ; 324  |    NAND_BLOCK_DESCRIPTOR  NAND_TABLES_MEMSPACE *         pBlockDescriptor;
                             2529 ; 325  |    NAND_DEVICE_ADDR_DESCRIPTOR NAND_TABLES_MEMSPACE *    pDeviceAddressingDescriptor;
                             2530 ; 326  |    P_NANDHAL_API_DESCRIPTOR pNandHalApi;
                             2531 ; 327  |    NAND_TYPE                NandType;
                             2532 ; 328  |} NAND_DESCRIPTOR_SUB_STRUCT, * P_NAND_DESCRIPTOR_SUB_STRUCT;
                             2533 
                             2547 
                             2548 ; 329  |
                             2549 ; 330  |typedef struct {
                             2550 ; 331  |    // at init -- these are copied to NAND_PARAMETERS_DESCRIPTOR
                             2551 ; 332  |    NAND_DESCRIPTOR_SUB_STRUCT NAND_TABLES_MEMSPACE * pNandDescriptorSubStruct;
                             2552 ; 333  |    // at init -- these are copied to NAND_PHYSICAL_MEDIA_DESCRIPTOR
                             2553 ; 334  |    WORD                     wTotalBlocks;
                             2554 ; 335  |    WORD                     wTotalInternalDice;       // (1/2/4/...) - number of chips pr
                                  etending to be a single chip
                             2555 ; 336  |} NAND_INIT_DESCRIPTOR, * P_NAND_INIT_DESCRIPTOR;
                             2556 ; 337  |
                             2557 ; 338  |typedef union {                     // All fields in nanoseconds
                             2558 ; 339  |
                             2559 ; 340  |    // By placing this word before the bitfield it allows structure copies to be done
                             2560 ; 341  |    //  safely by assignment rather than by memcpy.
                             2561 ; 342  |
                             2562 ; 343  |    WORD initializer;
                             2563 ; 344  |
                             2564 ; 345  |    // These field lengths are arbitrary... they only need to be large enough to hold
                             2565 ; 346  |    //  the values.  Possible optimization by using enumerations rather than the actual
                             2566 ; 347  |    //  values here and teaching NANDHalSetGPFlashTiming how to interpret them.
                             2567 ; 348  |
                             2568 ; 349  |    struct {
                             2569 ; 350  |        WORD TDH    :7;                         // tWH, tREH, tDH
                             2570 ; 351  |        WORD TDS    :7;                         // tWP, tDS
                             2571 ; 352  |        WORD THOLD  :5;                         // tCLH, tCH, tALH, tDH
                             2572 ; 353  |        WORD TSU    :5;                         // tCLS, tCS, tALS
                             2573 ; 354  |    } decode;
                             2574 ; 355  |} NAND_TIMINGS;
                             2575 ; 356  |
                             2576 ; 357  |// Special types to aid in absolute vs relative block address confusion  
                             2577 ; 358  |typedef WORD REGION_RELATIVE_BLK_ADDR;  
                             2578 ; 359  |typedef WORD ABSOLUTE_BLK_ADDR;  
                             2579 ; 360  |
                             2580 ; 361  |#define MK_NAND_TIMINGS_REAL( tsu, thold, tds, tdh )             ( ((tsu   & 0x1F) << 19) 
                                    \ 
                             2581 ; 362  |                                                                 | ((thold & 0x1F) << 14) 
                                    \ 
                             2582 ; 363  |                                                                 | ((tds   & 0x7F) << 7)  
                                    \ 
                             2583 ; 364  |                                                                 |  (tdh   & 0x7F) )
                             2584 ; 365  |
                             2585 ; 366  |//!! The max value for an unsigned 7 bit number is 2^7 - 1 = 127 so don't use any value >1
                                  27 for tdh & tds (macro param 3&4), else overflow & crash occurs. 
                             2586 ; 367  |//!! The max value for an unsigned 5 bit number is 2^5 - 1 = 31  so don't use any value >3
                                  1  for           (macro param 1&2), else overflow & crash can occur. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2587 ; 368  |
                             2588 ; 369  |#if DEBUG
                             2589 ; 370  |    //  NAND1 and NAND2 get optimized timings.  NAND3 and NAND4 get failsafe timings.
                             2590 ; 371  |    #ifdef NAND1
                             2591 ; 372  |        #define NAND_FAILSAFE_TIMINGS                   MK_NAND_TIMINGS_REAL( 0, 10, 45, 3
                                  0 )
                             2592 ; 373  |        #define MK_NAND_TIMINGS(a,b,c,d)        MK_NAND_TIMINGS_REAL(a,b,c,d)
                             2593 ; 374  |    #else
                             2594 ; 375  |        #ifdef NAND2
                             2595 ; 376  |            #define NAND_FAILSAFE_TIMINGS                       MK_NAND_TIMINGS_REAL( 0, 1
                                  0, 61, 48 )
                             2596 ; 377  |            #define MK_NAND_TIMINGS(a,b,c,d)        MK_NAND_TIMINGS_REAL(a,b,c,d)
                             2597 ; 378  |        #else
                             2598 ; 379  |            #ifdef NAND3
                             2599 ; 380  |                #define NAND_FAILSAFE_TIMINGS                   MK_NAND_TIMINGS_REAL( 0, 1
                                  0, 82, 48 )
                             2600 ; 381  |                #define MK_NAND_TIMINGS(a,b,c,d)        NAND_FAILSAFE_TIMINGS
                             2601 ; 382  |            #else
                             2602 ; 383  |                #ifdef NAND4
                             2603 ; 384  |                    #define NAND_FAILSAFE_TIMINGS                       MK_NAND_TIMINGS_RE
                                  AL( 0, 10, 82, 48 )
                             2604 ; 385  |                    #define MK_NAND_TIMINGS(a,b,c,d)        NAND_FAILSAFE_TIMINGS
                             2605 ; 386  |                #else
                             2606 ; 387  |                    // DEBUG defined but not (NAND1 NAND2 NAND3 or NAND4)
                             2607 ; 388  |                    #define NAND_FAILSAFE_TIMINGS                       MK_NAND_TIMINGS_RE
                                  AL( 0, 10, 45, 30 )
                             2608 ; 389  |                    #define MK_NAND_TIMINGS(a,b,c,d)        MK_NAND_TIMINGS_REAL(a,b,c,d)
                             2609 ; 390  |                #endif
                             2610 ; 391  |            #endif
                             2611 ; 392  |        #endif
                             2612 ; 393  |    #endif
                             2613 ; 394  |#else
                             2614 ; 395  |    // Retail builds get full speed timings
                             2615 ; 396  |    // non DEBUG (RETAIL) builds (non engr board layouts) get one best case timing set.
                             2616 ; 397  |    // You may be able to reduce these values per your flash datasheet to increase perform
                                  ance.
                             2617 ; 398  |    #define MK_NAND_TIMINGS(a,b,c,d)        MK_NAND_TIMINGS_REAL((a),(b),(c),(d))
                             2618 ; 399  |    #define NAND_FAILSAFE_TIMINGS                       MK_NAND_TIMINGS_REAL( 0, 10, 45, 3
                                  0 )
                             2619 ; 400  |#endif
                             2620 
                             2641 
                             2642 ; 401  |
                             2643 ; 402  |typedef struct {
                             2644 ; 403  |  WORD                                        DeviceManufacturerCode;   // 00:Device:Manuf
                                  acturer
                             2645 ; 404  |  NAND_TIMINGS                                NandTimings;
                             2646 ; 405  |  NAND_INIT_DESCRIPTOR NAND_TABLES_MEMSPACE * pNANDInitDescriptor;
                             2647 ; 406  |} NAND_DEVICECODE_MAP, * P_NAND_DEVICECODE_MAP;
                             2648 ; 407  |
                             2649 ; 408  |typedef union
                             2650 ; 409  |{
                             2651 ; 410  |   SECTOR_BUFFER singleLargeSector[SECTOR_BUFFER_ALLOC_SIZE(LARGE_SECTOR_TOTAL_SIZE)];
                             2652 ; 411  |   SECTOR_BUFFER singleSmallSector[SECTOR_BUFFER_ALLOC_SIZE(SSFDC_SECTOR_TOTAL_SIZE)];
                             2653 ; 412  |} _X NAND_COPY_BUFFER;
                             2654 ; 413  |
                             2655 ; 414  |typedef struct
                             2656 ; 415  |{
                             2657 ; 416  |    WORD SectorDataSizeInBytes;
                             2658 ; 417  |    WORD SectorDataSizeInWords;
                             2659 ; 418  |    WORD SectorRedundantSizeInBytes;
                             2660 ; 419  |    WORD SectorRedundantSizeInWords;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2661 ; 420  |    WORD SectorTotalSizeInBytes;
                             2662 ; 421  |    WORD SectorTotalSizeInWords;
                             2663 ; 422  |} NAND_OUT_OF_CONTEXT_DATA;
                             2664 ; 423  |
                             2665 ; 424  |
                             2666 ; 425  |typedef enum
                             2667 ; 426  |{
                             2668 ; 427  |    WRITE_MODE_NONE,
                             2669 ; 428  |    WRITE_MODE_SINGLE,
                             2670 ; 429  |    WRITE_MODE_MULTI
                             2671 ; 430  |} NAND_WRITE_MODE;
                             2672 ; 431  |
                             2673 ; 432  |typedef struct _id_decode
                             2674 ; 433  |{
                             2675 ; 434  |    // Read ID Byte 1
                             2676 ; 435  |    WORD MakerCode              : 8;
                             2677 ; 436  |    // Read ID Byte 2
                             2678 ; 437  |    WORD DeviceCode             : 8;
                             2679 ; 438  |    // Read ID Byte 3
                             2680 ; 439  |    WORD InternalChipNumber     : 2;        // Number of die = (1 << n)
                             2681 ; 440  |    WORD CellType               : 2;        // Number of bits per memory cell = ( 1 << (n+
                                  1) ) // may 2005: 2 bits per cell for today's mlc.
                             2682 ; 441  |    WORD VendorSpecific0        : 3;
                             2683 ; 442  |    WORD CacheProgram           : 1;        // 0 == Not supported
                             2684 ; 443  |    // Read ID Byte 4
                             2685 ; 444  |    WORD PageSize               : 2;        // Page size in bytes = (1 << n) * 1024
                             2686 ; 445  |    WORD RedundantAreaSize      : 1;        // Redundant area bytes per 512 data bytes = 8
                                   * (1 << n)
                             2687 ; 446  |    WORD Reserved0              : 1;
                             2688 ; 447  |    WORD BlockSize              : 2;        // Block size in bytes = 64 * 1024 * (1 << n)
                             2689 ; 448  |    WORD Organization           : 1;        // 0 == x8, 1 == x16
                             2690 ; 449  |    WORD SamsungHSSerialAccess  : 1;        // 0 == 50/30ns, 1 == 25ns
                             2691 ; 450  |    // Read ID Byte 5
                             2692 ; 451  |    WORD VendorSpecific1        : 2;
                             2693 ; 452  |    WORD PlaneNumber            : 2;        // # of planes total (see note below) = (1 << 
                                  n)
                             2694 ; 453  |    WORD PlaneSize              : 3;        // # of bytes per plane = 64 * 1024 * 1024 * (
                                  1 << n)
                             2695 ; 454  |    WORD Reserved4              : 1;
                             2696 ; 455  |    // Read ID Byte 6
                             2697 ; 456  |    WORD Reserved5              : 3;
                             2698 ; 457  |    WORD ToshibaHighSpeedMode   : 1;        // 0 == Not supported
                             2699 ; 458  |    WORD Reserved6              : 4;
                             2700 ; 459  |}t_id_decode;
                             2701 
                             2703 
                             2704 ; 460  |
                             2705 ; 461  |// Note on # of planes for all Large Page Devices (SLC and MLC)
                             2706 ; 462  |//  This field will contain the number of planes per die * the number of die on a per chip
                                   enable basis.
                             2707 ; 463  |//    Examples;  1 plane, 1 die; value = 1
                             2708 ; 464  |//      2 plane, 1 die; value = 2
                             2709 ; 465  |//      2 plane, 2 die; value = 4
                             2710 ; 466  |//      2 plane, 2 die, 2 chip enable; value = 2
                             2711 ; 467  |
                             2712 ; 468  |//  In case of multi-stacked device, the "plane number" will show the total number of plan
                                  es of the packaged
                             2713 ; 469  |//  device and not the number of planes per die. (e.g. If 2 pieces of device that has 2 pl
                                  anes were stacked
                             2714 ; 470  |//  in a package, the plane number will show "4")
                             2715 ; 471  |
                             2716 ; 472  |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2717 ; 473  |// Prototypes
                             2718 ; 474  |///////////////////////////////////////////////////////////////////////////////
                             2719 ; 475  |RETCODE _reentrant Type1_GetStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD 
                                  * pStatus, WORD Mask);
                             2720 ; 476  |RETCODE _reentrant Type1_CopySectors(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             2721 ; 477  |                                     WORD wSourceStartSectorNum, WORD wTargetStartSectorNu
                                  m, WORD wNumSectors);
                             2722 ; 478  |RETCODE _reentrant Type1_CommitSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             2723 ; 479  |RETCODE _reentrant Type1_CommitPage(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             2724 ; 480  |
                             2725 ; 481  |
                             2726 ; 482  |RETCODE _reentrant Type2_CopySectors(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             2727 ; 483  |                                     WORD wSourceStartSectorNum, WORD wTargetStartSectorNu
                                  m, WORD wNumSectors);
                             2728 ; 484  |RETCODE _reentrant Type2_GetStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD 
                                  * pStatus, WORD Mask);
                             2729 ; 485  |RETCODE _reentrant Type2_CommitSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             2730 ; 486  |RETCODE _reentrant Type2_CommitPage(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             2731 ; 487  |
                             2732 ; 488  |
                             2733 ; 489  |RETCODE _reentrant Type4_GetStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD 
                                  * pStatus, WORD Mask);
                             2734 ; 490  |RETCODE _reentrant Type4_EraseBlockAsync(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                                    WORD wBlockNum);
                             2735 ; 491  |RETCODE _reentrant Type4_CopySectors(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             2736 ; 492  |                                     WORD wSourceStartSectorNum, WORD wTargetStartSectorNu
                                  m, WORD wNumSectors);
                             2737 ; 493  |RETCODE _reentrant Type4_CommitSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             2738 ; 494  |
                             2739 ; 495  |
                             2740 ; 496  |RETCODE _reentrant Type5_CopySectors(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             2741 ; 497  |                                     WORD wSourceStartSectorNum, WORD wTargetStartSectorNu
                                  m, WORD wNumSectors);
                             2742 ; 498  |
                             2743 ; 499  |
                             2744 ; 500  |void _reentrant TypeX_FlushReadCache(short);
                             2745 ; 501  |void _reentrant TypeX_ReadForCopyback( P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, W
                                  ORD wSourceStartSectorNum, WORD readCommand );
                             2746 ; 502  |void _reentrant TypeX_CopybackProgram( P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, W
                                  ORD wTargetStartSectorNum, WORD firstProgCmd, WORD secondProgCmd, P_SECTOR_BUFFER pBuf );
                             2747 ; 503  |RETCODE _reentrant TypeX_SetupWriteSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor
                                  ,  WORD wSectorNum);
                             2748 ; 504  |RETCODE _reentrant TypeX_SetupWriteSectorRedundant(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDD
                                  escriptor,  WORD wSectorNum);
                             2749 ; 505  |WORD _reentrant TypeX_ComputeCol(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD wB
                                  yteOffset);
                             2750 ; 506  |RETCODE _reentrant TypeX_ReadSectorData(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             2751 ; 507  |                        WORD iSectorNum, P_SECTOR_BUFFER pBuf);
                             2752 ; 508  |RETCODE _reentrant TypeX_ReadSectorRedundant(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescrip
                                  tor,
                             2753 ; 509  |                         WORD iSectorNum, P_SECTOR_BUFFER pSectorBuf, BOOL crcCorrect);
                             2754 ; 510  |RETCODE _reentrant TypeX_WaitForProgramDone(
                             2755 ; 511  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             2756 ; 512  |RETCODE _reentrant TypeX_SendSectorData(
                             2757 ; 513  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             2758 ; 514  |                  P_SECTOR_BUFFER pBuf);
                             2759 ; 515  |RETCODE _reentrant TypeX_SendSectorRedundantArea(
                             2760 ; 516  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             2761 ; 517  |                  P_SECTOR_BUFFER pBuf);
                             2762 ; 518  |RETCODE _reentrant TypeX_SendProgramCommand(
                             2763 ; 519  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             2764 ; 520  |                  NAND_PROGRAM_CODES eCommandCode);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2765 ; 521  |RETCODE _reentrant TypeX_WriteSector(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             2766 ; 522  |                                     WORD wSectorNum, P_SECTOR_BUFFER pBuf);
                             2767 ; 523  |RETCODE _reentrant TypeX_WriteSectorRedundant(
                             2768 ; 524  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             2769 ; 525  |                  WORD wSectorNum, P_SECTOR_BUFFER pBuf);
                             2770 ; 526  |RETCODE _reentrant TypeX_EraseBlock(
                             2771 ; 527  |                  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD wBlockNum);
                             2772 ; 528  |RETCODE _reentrant TypeX_EraseBlockAsync(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                                  
                             2773 ; 529  |                                         WORD wBlockNum);
                             2774 ; 530  |
                             2775 ; 531  |RETCODE _reentrant NANDHALCommon_EnableWrites(WORD wWPn);
                             2776 ; 532  |RETCODE _reentrant NANDHALCommon_DisableWrites(WORD wWPn);
                             2777 ; 533  |
                             2778 ; 534  |RETCODE _reentrant NANDHalStartComputeECC_1Bit(P_SECTOR_BUFFER pCompleteSectorBuf, WORD wW
                                  hichHalf);
                             2779 ; 535  |RETCODE _reentrant NANDHalStartComputeECC_4Bit(P_SECTOR_BUFFER pCompleteSectorBuf, WORD wW
                                  hichHalf);
                             2780 ; 536  |RETCODE _reentrant NANDHalCorrectECC_1Bit(P_SECTOR_BUFFER pCompleteSectorBuf);
                             2781 ; 537  |RETCODE _reentrant NANDHalCorrectECC_4Bit(P_SECTOR_BUFFER pCompleteSectorBuf);
                             2782 ; 538  |
                             2783 ; 539  |// These functions are all direct-callable. Do not need to go through struct de-referencin
                                  g.
                             2784 ; 540  |RETCODE _reentrant NANDHalLockInterfacePort(void);
                             2785 ; 541  |RETCODE _reentrant NANDHalReleaseInterfacePort(void);
                             2786 ; 542  |RETCODE _reentrant NANDHalLockNand(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             2787 ; 543  |RETCODE _reentrant NANDHalReleaseNand(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             2788 ; 544  |RETCODE _reentrant NANDHalComputeECCGetStatus(void);
                             2789 ; 545  |WORD _reentrant CRC8(WORD _X * wData, WORD wOffset, WORD wBcount);
                             2790 ; 546  |void _reentrant NandReset(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             2791 ; 547  |RETCODE _reentrant NandHalInit(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, NAND_TIMI
                                  NGS * timings );
                             2792 ; 548  |RETCODE _reentrant NANDHalSetNandBusy(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             2793 ; 549  |                                      BOOL (* pCallbackFun)(int iStatus, void * pObj), voi
                                  d * pArg);
                             2794 ; 550  |BOOL _reentrant bNANDHalNandIsReady(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             2795 ; 551  |RETCODE _reentrant NANDHalWaitForAsync(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor);
                             2796 ; 552  |RETCODE _reentrant HALMarkBlockBadInRA(
                             2797 ; 553  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor,
                             2798 
                             2800 
                             2801 ; 554  |    ABSOLUTE_BLK_ADDR wBlockAddr);
                             2802 ; 555  |RETCODE _reentrant NANDHilInit(WORD wDeviceNum);
                             2803 ; 556  |RETCODE _reentrant NANDHalWaitForTrueReady(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescripto
                                  r, WORD * pStatus);
                             2804 ; 557  |RETCODE _reentrant NANDHalWaitForCacheReady(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescript
                                  or, WORD * pStatus);
                             2805 ; 558  |void _reentrant NANDHalDblChkStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDescriptor, WORD
                                   wMask, WORD *pwStatus);
                             2806 ; 559  |RETCODE _reentrant NANDHalSetGPFlashTiming( NAND_TIMINGS const * pNT );
                             2807 
                             2809 
                             2810 ; 560  |///////////////////////////////////////////////////////////////////////////////
                             2811 ; 561  |// Externs
                             2812 ; 562  |///////////////////////////////////////////////////////////////////////////////
                             2813 ; 563  |extern NANDHAL_MEM NANDHAL_API_DESCRIPTOR Type1_NANDHALApiDescriptor;
                             2814 ; 564  |extern NANDHAL_MEM NANDHAL_API_DESCRIPTOR Type2_NANDHALApiDescriptor;
                             2815 ; 565  |extern NANDHAL_MEM NANDHAL_API_DESCRIPTOR Type4_NANDHALApiDescriptor;
                             2816 ; 566  |extern NANDHAL_MEM NANDHAL_API_DESCRIPTOR Type5_NANDHALApiDescriptor;
                             2817 ; 567  |extern NANDHAL_MEM WORD g_iCachedPageNumInNAND[];
                             2818 ; 568  |#define INVALID_SECTOR_ADDRESS     (0xFFFFF0) // FFFFF0 is a dummy value intended to be an
                                   invalid sector address
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2819 
                             2826 
                             2827 ; 569  |
                             2828 ; 570  |extern NAND_COPY_BUFFER wCopyBuffer;
                             2829 
                             2838 
                             2839 ; 571  |
                             2840 ; 572  |extern NAND_OUT_OF_CONTEXT_DATA g_NandAuxData;
                             2841 ; 573  |//extern NAND_WRITE_MODE g_WriteMode;  // can enable this line later. sdk 2.610 has it. 
                             2842 ; 574  |extern WORD g_maker_code;
                             2843 ; 575  |extern WORD g_CellType;
                             2844 ; 576  |extern WORD g_VendorSpecific1;
                             2845 ; 577  |extern WORD g_device_code;
                             2846 
                             2887 
                             2888 ; 578  |
                             2889 ; 579  |extern t_id_decode SECTOR_BUFFER_MEM * pReadIDDecode;
                             2890 ; 580  |#if 1 // TOVERIFY2: 
                             2891 ; 581  |///////////////////////////////////////////////////////////////////////////////
                             2892 ; 582  |// Macros
                             2893 ; 583  |///////////////////////////////////////////////////////////////////////////////
                             2894 ; 584  |//On NAND4 builds, if less than 4 Nands are used, then the ID structure gets overwritten w
                                  ith garbage
                             2895 ; 585  |//( zeros?),whenever the empty slots are probed. But we need to preserve the Maker code
                             2896 ; 586  |//for Hynix and ST Micro Nands.
                             2897 ; 587  |#define _nand_hal_preserve_data();\ 
                             2898 ; 588  |{                                          \ 
                             2899 ; 589  |  g_maker_code = pReadIDDecode->MakerCode; \ 
                             2900 ; 590  |  g_CellType = pReadIDDecode->CellType; \ 
                             2901 ; 591  |  g_device_code = pReadIDDecode->DeviceCode;\ 
                             2902 ; 592  |  g_VendorSpecific1 = pReadIDDecode->VendorSpecific1; \ 
                             2903 ; 593  |} // cell type backed up to glob so it's not lost during 2nd call to DetermineNandType in 
                                  a multi CE present case. We call that > once only when >1 CE present.
                             2904 ; 594  |#else // old ver
                             2905 ; 595  |extern WORD NANDHAL_MEM wID1;
                             2906 ; 596  |//On NAND4 builds, if less than 4 Nands are used, then the ID structure gets overwritten w
                                  ith garbage 
                             2907 ; 597  |//( zeros?),whenever the empty slots are probed. But we need to preserve the Maker code an
                                  d cell type
                             2908 ; 598  |//for Hynix and ST Micro and other Nands. 
                             2909 ; 599  |#define _nand_hal_preserve_data();\ 
                             2910 ; 600  |{                                          \ 
                             2911 ; 601  |  g_maker_code = (wID1 & MakerIDMask); \ 
                             2912 ; 602  |  //g_CellType = pReadIDDecode->CellType; \  /* should save this and uncomment this line t
                                  oo if you ever revert to this old way */
                             2913 ; 603  |  //g_VendorSpecific1 = pReadIDDecode->VendorSpecific1; \  /* should save this and uncomme
                                  nt this line too if you ever revert to this old way */
                             2914 ; 604  |}
                             2915 ; 605  |#endif
                             2916 ; 606  |
                             2917 ; 607  |#endif // #ifndef _NANDHAL_H
                             2918 ; 608  |
                             2919 ; 609  |
                             2920 
                             2922 
                             2923 ; 17   |
                             2924 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             2925 ; 19   |// Definitions
                             2926 ; 20   |///////////////////////////////////////////////////////////////////////////////
                             2927 ; 21   |
                             2928 ; 22   |#define ECC_TIMEOUT                         1000
                             2929 ; 23   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2930 ; 24   |// ECC & DMA get status functions return SUCCESS when completed successfully
                             2931 ; 25   |#define ECC_STATUS_BUSY                     0x006000
                             2932 ; 26   |#define ECC_STATUE_TIMEOUT                  0x006001
                             2933 ; 27   |#define DMA_STATUS_BUSY                     0x006001
                             2934 ; 28   |#define DMA_STATUE_TIMEOUT                  0x006002
                             2935 ; 29   |#define NAND_PROGRAM_STATUS_BUSY            0x006003
                             2936 ; 30   |#define NAND_PROGRAM_STATUS_TIMEOUT         0x006004
                             2937 ; 31   |#define NAND_PROGRAM_STATUS_FAILED          0x006005
                             2938 ; 32   |
                             2939 ; 33   |// Errors generated in Media Driver
                             2940 ; 34   |#define NAND_READ_SECTOR_FAIL               0x006006
                             2941 ; 35   |#define NAND_CONFIG_BLOCK_NOT_FOUND         0x006007
                             2942 ; 36   |
                             2943 ; 37   |
                             2944 ; 38   |#define MAX_CHIPS                           4   // Maximum number of chips 
                             2945 ; 39   |                                                // supported in a multi nand
                             2946 ; 40   |                                                // configuration
                             2947 ; 41   |
                             2948 ; 42   |#define NUM_PAGES_MARKED_BAD_IN_BLOCK       4   // Number of pages marked bad
                             2949 ; 43   |                                                // once a block is found Bad. 
                             2950 ; 44   |                                                // We decided to attempt to mark 
                             2951 ; 45   |                                                // 4 pages bad in case the status
                             2952 ; 46   |                                                // information does not stick.
                             2953 ; 47   |
                             2954 ; 48   |///////////////////////////////////////////////////////////////////////////
                             2955 ; 49   |// BAD BLOCK TABLE ENTRIES
                             2956 ; 50   |//
                             2957 ; 51   |// A BBTABLE_ENTRY may be FREE, meaning it is not associated with any Bad Block, 
                             2958 ; 52   |// yet (but may be in the future), or it may be NOT_ASSIGNED, meaning it is
                             2959 ; 53   |// associated with a Bad Block but no Data Drive RBlock has been assigned to
                             2960 ; 54   |// it (e.g. it may be a System Drive block), or it may have both a Bad Block
                             2961 ; 55   |// and an RBlock assigned to it.
                             2962 ; 56   |///////////////////////////////////////////////////////////////////////////
                             2963 ; 57   |#define BBTBL_FREE (-1)
                             2964 ; 58   |#define BBTBL_NOT_ASSIGNED (-1)
                             2965 ; 59   |//sdk3.110 requirement said to leave this as 14 and 10 bits but when we add renesas this m
                                  ust change to 15 and 9 bits as described in next comment.
                             2966 ; 60   |typedef struct NandBbTableEntryStruct {  // 16k quantity of superblocks on 2Gbit renesas, 
                                  so first field below needs max value of 16383. 2^14 -1 = 16383.  
                             2967 ; 61   |    INT iBBPhysicalAddress       :   15;    // Physical address of Bad Block  // Dec19'05:
                                   changed both from INT to WORD & changed bitsz from 14 to 15 and 10 to 9 to prevent Renesas defect
                                  . Jan18'06 back to INT solves 9793 in sdk2.610 prerelease. No defect in sdk3.
                             2968 ; 62   |                                            // (relative to Chip) || BBTBL_FREE
                             2969 ; 63   |    INT iRblkIdx                 :   9;    // Index of Region's assigned Rblock. num R blk
                                  s is 1.5% of tot blocks by default so 9 signed bits is enough to store max which is <256. 
                             2970 ; 64   |                                            // (for Data Drive) || BBTBL_NOT_ASSIGNED
                             2971 ; 65   | 
                             2972 ; 66   |} NAND_BBTABLE_ENTRY_T;
                             2973 ; 67   |// These allow declarations and externs to use the define below and we
                             2974 ; 68   |// specify _X or _Y here only. If X, BBTable defaults to x_sys cluster.
                             2975 ; 69   |// If _Y used below, BBTable section will default to y_extra cluster.
                             2976 ; 70   |#define NAND_BBTABLE_ENTRY      NAND_BBTABLE_ENTRY_T _Y
                             2977 ; 71   |#define P_NAND_BBTABLE_ENTRY    NAND_BBTABLE_ENTRY_T _Y *
                             2978 ; 72   |#define P_NAND_BBTABLE          NAND_BBTABLE_ENTRY_T _Y *
                             2979 ; 73   |
                             2980 ; 74   |
                             2981 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             2982 ; 76   |//  UPDATES TABLE
                             2983 ; 77   |//
                             2984 ; 78   |// Each Region has an Updates Table (UTbl), which is a subset of the Data Drive's
                             2985 ; 79   |// Master Updates Table.
                             2986 ; 80   |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2987 ; 81   |// The Region knows the max size (iNumUBlks), which is exactly the number of UBlocks
                             2988 ; 82   |// in the Region, and has a pointer to the table entries, an array of 
                             2989 ; 83   |// NAND_UPDATES_ENTRYs.
                             2990 ; 84   |//
                             2991 ; 85   |// The NAND_UPDATES_ENTRY has two fields:
                             2992 ; 86   |//
                             2993 ; 87   |// iHBlkAddr is the physical address (14 bits worth, relative to the chip) of the 
                             2994 ; 88   |// HBlock which is being Updated.  If the Update Entry is not is use, this value is
                             2995 ; 89   |// UTBL_ERASED, if the UBlock pointed to by iUBlkIdx has been erased, or UTBL_FREE.
                             2996 ; 90   |// 
                             2997 ; 91   |// iUBlkIdx is the index of the UBlock which is being used to Update the HBlock.
                             2998 ; 92   |// This value is always present and unique, even if the Update is marked as UTBL_FREE
                             2999 ; 93   |// or UTBL_ERASED.  That is, THERE IS ALWAYS AN ENTRY FOR EVERY UBLOCK IN THE UPDATES
                             3000 ; 94   |// TABLE.  This allows us to search for an unused UBlock, by finding a UTbl entry
                             3001 ; 95   |// with iHBlkAddr set to UTBL_FREE or UTBL_ERASED and grabbing the iUBlkIdx field's
                             3002 ; 96   |// value.
                             3003 ; 97   |//
                             3004 ; 98   |// To get the physical address of the UBlock, add UBlkIdx to pRegion->iUBlksPhysAddr.
                             3005 ; 99   |//
                             3006 ; 100  |// Entries in the UTbl are kept sorted by the iHBlkAddr fields (UTBL_FREE and 
                             3007 ; 101  |// UTBL_ERASED are moved to the end of the table).  This allows fast searches for
                             3008 ; 102  |// HBlk addresses, an operation which occurs very often.
                             3009 ; 103  |//
                             3010 ; 104  |// When a new entry  is added to the table, it must be inserted into the sort order,
                             3011 ; 105  |// which may require moving some other entries down.
                             3012 ; 106  |//
                             3013 ; 107  |// See also: Update Sectors Map
                             3014 ; 108  |//
                             3015 ; 109  |/////////////////////////////////////////////////////////////////////////////////
                             3016 ; 110  |// Any iHBlkAddr value >= UTBL_SPECIAL_CODES is a special code, instead of an address
                             3017 ; 111  |#define UPDATE_TABLE_SPECIAL_CODES (0x3ffd)
                             3018 ; 112  |#define UPDATE_TABLE_ERASED (0x3fff)
                             3019 ; 113  |#define UPDATE_TABLE_FREE   (0x3ffe)
                             3020 ; 114  |#define UPDATE_TABLE_BAD    (0x3ffd)
                             3021 ; 115  |
                             3022 ; 116  |
                             3023 ; 117  |
                             3024 ; 118  |typedef struct {
                             3025 ; 119  |  WORD wHBlkAddr                 :   14;    // Physiscal address of Home Block
                             3026 ; 120  |                                            // (relative to chip) being Updated
                             3027 ; 121  |                                            // || UPDATE_TABLE_FREE  || UPDATE_TABLE_BAD
                             3028 ; 122  |  WORD wUBlkIdx                  :   10;    // Index of Region's assigned UBlock
                             3029 ; 123  |                                            // ALL UBlk INDICES ARE PRESENT,
                             3030 ; 124  |                                            // even if iHBlkAddr = UTBL_FREE || UTBL_ERASE
                                  D
                             3031 ; 125  |} NAND_UPDATES_ENTRY, * P_NAND_UPDATES_ENTRY, * P_UTABLE;
                             3032 
                             3047 
                             3048 ; 126  |
                             3049 ; 127  |
                             3050 ; 128  |
                             3051 ; 129  |/////////////////////////////////////////////////////////////////////////////////
                             3052 ; 130  |// NAND Region Info Struct
                             3053 ; 131  |/////////////////////////////////////////////////////////////////////////////////
                             3054 ; 132  |typedef struct RegionInfoStruct {
                             3055 ; 133  |
                             3056 ; 134  |  int                                iChip;                // Index of NAND Chip containin
                                  g this Region
                             3057 ; 135  |  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR   pNANDDesc;            // NAND descriptor
                             3058 ; 136  |  P_NAND_PARAMETERS_DESCRIPTOR       pNANDParms;           // NAND parameters (shortcut)
                             3059 ; 137  |  P_LOGICAL_DRIVE_DESCRIPTOR         pLogicalDrive;        // Pointer back to our grandpar
                                  ent
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3060 ; 138  |
                             3061 ; 139  |  LOGICAL_DRIVE_TYPE                 eDriveType;           // Some System Drive, or Data D
                                  rive
                             3062 ; 140  |  WORD                               wTag;                 // Drive Tag
                             3063 ; 141  |
                             3064 ; 142  |  int                                iStartPhysAddr;       // Starting Block number for Re
                                  gion
                             3065 ; 143  |                                                           // relative to chip 
                             3066 ; 144  |  int                                iNumBlks;             // Size, in blocks, of whole Re
                                  gion
                             3067 ; 145  |                                                           // Size includes embedded Bad B
                                  locks
                             3068 ; 146  |
                             3069 ; 147  |
                             3070 ; 148  |            ////////////////////////////////////////////////////////////////
                             3071 ; 149  |            // The following elements, relating to HBlocks, are set and used
                             3072 ; 150  |            // by the Data Drive, only.  They are included in this structure
                             3073 ; 151  |            // for convenience.
                             3074 ; 152  |
                             3075 ; 153  |  int                                iHBlksPhysAddr;       // Starting Physical Block numb
                                  er for 
                             3076 ; 154  |                                                           // Home Blocks.
                             3077 ; 155  |  int                                iNumHBlks;            // Size, in blocks, of Home Blo
                                  cks area.
                             3078 ; 156  |                                                           // Size includes embedded Bad B
                                  locks
                             3079 ; 157  |
                             3080 ; 158  |  int                                iHBlksLogBlkAddr;     // Starting Logical Block numbe
                                  r
                             3081 ; 159  |
                             3082 ; 160  |  DWORD                              dwHBlks1stLogSector;  // Staring Logical Sector Numbe
                                  r
                             3083 ; 161  |  DWORD                              dwNumHSectors;        // Number of Sectors in the HBl
                                  ocks in
                             3084 ; 162  |                                                           // this Region. (Includes Bad B
                                  locks.)
                             3085 ; 163  |            ////////////////////////////////////////////////////////////////
                             3086 ; 164  |
                             3087 ; 165  |
                             3088 ; 166  |  int                                iUBlksPhysAddr;       // Starting Block number for UB
                                  locks
                             3089 ; 167  |  int                                iNumUBlks;            // For non-Data Drive, should =
                                   0
                             3090 ; 168  |                                                           // Size includes embedded Bad B
                                  locks
                             3091 ; 169  |  P_UTABLE                           pUTable;              // Pointer to Updates Table (ar
                                  ray)
                             3092 ; 170  |  WORD                               *pFreshList;          // Pointer to Updates Fresh Lis
                                  t for Region
                             3093 ; 171  |  WORD                               wFreshListHead;       // Head pointer (index) for Fre
                                  shList
                             3094 ; 172  |
                             3095 ; 173  |  int                                iRBlksPhysAddr;       // Starting Block number for RB
                                  locks
                             3096 ; 174  |  int                                iNumRBlks;            // For non-Data Drive, should =
                                   0
                             3097 ; 175  |                                                           // Size includes embedded Bad B
                                  locks
                             3098 ; 176  |
                             3099 ; 177  |
                             3100 ; 178  |  int                                iNumBadBlks;          // Number Bad Blocks in this Re
                                  gion
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3101 ; 179  |  int                                iMaxBadBlks;          // Max for this Region (i.e. ho
                                  w
                             3102 ; 180  |                                                           // much padding is there for "n
                                  ew"
                             3103 ; 181  |                                                           // Bad Blocks?)
                             3104 ; 182  |
                             3105 ; 183  |  P_NAND_BBTABLE                     pBBTable;             // Table of Bad Blocks for this
                                   Region
                             3106 ; 184  |                                                           // (This is just a pointer into
                                   a
                             3107 ; 185  |                                                           // subset of the BadBlocksTable
                                   in
                             3108 ; 186  |                                                           // a (the) NAND_MEDIA_INFO stru
                                  cture
                             3109 ; 187  |                                                           // (below).
                             3110 ; 188  |  BOOL                               bRegionInfoDirty;     // If TRUE, the bad block infor
                                  mation
                             3111 ; 189  |                                                           // has updates                 
                                                                            
                             3112 ; 190  |} NAND_REGION_INFO, *P_NAND_REGION_INFO;
                             3113 
                             3144 
                             3145 ; 191  |
                             3146 ; 192  |/////////////////////////////////////////////////////////////////////////////////
                             3147 ; 193  |// NAND Media Physial Media Struct
                             3148 ; 194  |//
                             3149 ; 195  |// This structure contains all of the information about a (the) NAND Media.
                             3150 ; 196  |// It has a table of all of the Chips' NANDDescriptors, the addresses of the
                             3151 ; 197  |// Configuration Block for each chip, a table of all of the Regions
                             3152 ; 198  |// on those chips, and a table of all of the Bad Blocks on those chips.
                             3153 ; 199  |//
                             3154 ; 200  |// There will typically be *one* of these structures, and it will be pointed 
                             3155 ; 201  |// to by the "PhysMediaTypeStruct" element of the LOGICAL_MEDIA_DESCRIPTOR and 
                             3156 ; 202  |// LOGICAL_DRIVE_DESCRIPTOR's for the NAND Media.
                             3157 ; 203  |//
                             3158 ; 204  |// Note: The array sizes, MAX_NAND_CHIPS, MAX_NAND_REGIONS and 
                             3159 ; 205  |// NAND_MEDIA_MAX_BAD_BLOCKS are meant to be Project-specific.  So the actual
                             3160 ; 206  |// arrays must be allocated in a Project-specific source (e.g. project.c).
                             3161 ; 207  |// The NAND_MEDIA_INFO (assuming there's only one) can also be allocated there,
                             3162 ; 208  |// with initial values pointing to the arrays (and initial counts of zero).
                             3163 ; 209  |//
                             3164 ; 210  |/////////////////////////////////////////////////////////////////////////////////
                             3165 ; 211  |
                             3166 ; 212  |typedef struct {
                             3167 ; 213  |
                             3168 ; 214  |  int                                   iNumNANDChips;
                             3169 ; 215  |  P_NAND_PHYSICAL_MEDIA_DESCRIPTOR      pNANDDesc;          // NANDDesc[MAX_NAND_CHIPS]
                             3170 ; 216  |
                             3171 ; 217  |  int                                   ConfigBlkAddr[MAX_CHIPS];     // ConfigBlkAddr[MAX
                                  _NAND_CHIPS]
                             3172 ; 218  |
                             3173 ; 219  |  int                                   iNumRegions;
                             3174 ; 220  |  P_NAND_REGION_INFO                    pRegionInfo;        // RegionInfo[MAX_NAND_REGIONS
                                  ];
                             3175 ; 221  |
                             3176 ; 222  |  int                                   iNumBadBlks;
                             3177 ; 223  |  P_NAND_BBTABLE                        pMasterBBTable;     // MasterBBTable[NAND_MEDIA_MA
                                  X_BAD_BLOCKS]
                             3178 ; 224  |
                             3179 ; 225  |} NAND_MEDIA_INFO, * P_NAND_MEDIA_INFO;
                             3180 ; 226  |
                             3181 ; 227  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3182 ; 228  |// Config Block Region Info
                             3183 ; 229  |/////////////////////////////////////////////////////////////////////////////////
                             3184 ; 230  |typedef struct {
                             3185 ; 231  |  LOGICAL_DRIVE_TYPE         eDriveType;       // Some System Drive, or Data Drive
                             3186 ; 232  |  WORD                       wTag;              // Drive Tag
                             3187 ; 233  |
                             3188 ; 234  |//  DataDriveMultiNANDConfig   eMultiNANDConfig; // CONCATENATED_MULTI_NAND | STRIPED_MULT
                                  I_NAND
                             3189 ; 235  |
                             3190 ; 236  |//  DataDriveAddressing        eAddressing;      // NAND_LINEAR_ADDRESSING | NAND_MULTI_PL
                                  ANE_ADDRESSING
                             3191 ; 237  |
                             3192 ; 238  |  int                        iNumBlks;         // Size, in blocks, of whole Region
                             3193 ; 239  |                                               // Size includes embedded Bad Blocks
                             3194 ; 240  |
                             3195 ; 241  |  int                        iNumUBlks;        // For non-Data Drive, this should = 0
                             3196 ; 242  |                                               // Size includes embedded Bad Blocks
                             3197 ; 243  |
                             3198 ; 244  |  int                        iNumRBlks;        // For non-Data Drive, this should = 0
                             3199 ; 245  |                                               // Size includes embedded Bad Blocks
                             3200 ; 246  |
                             3201 ; 247  |} NAND_CFG_BLK_REGION_INFO, * P_NAND_CFG_BLK_REGION_INFO;
                             3202 
                             3210 
                             3211 ; 248  |
                             3212 ; 249  |
                             3213 ; 250  |
                             3214 ; 251  |
                             3215 ; 252  |/////////////////////////////////////////////////////////////////////////////////
                             3216 ; 253  |// Configuration Block Info Sector
                             3217 ; 254  |//
                             3218 ; 255  |// Note: The array size, NAND_MEDIA_MAX_REGIONS, is meant to be project-specfic.
                             3219 ; 256  |// So, in this structure, a array of size, 1, is defined.  This structure will
                             3220 ; 257  |// not typically be allocated anywhere - it's just used to cast a pointer onto
                             3221 ; 258  |// a Sector buffer.  So, with the array at the end of the structure, we can merrily
                             3222 ; 259  |// read beyond the stated size (1), as long as we don't go off the end of the
                             3223 ; 260  |// Sector.  A NAND_CFG_BLK_REGION_INFO is only 4 WORDs (12 bytes) long, so we
                             3224 ; 261  |// can go on for 41 Regions before we run off the edge.  That's way more Regions 
                             3225 ; 262  |// than we should ever have.  (So the day this statement becomes false, I'll
                             3226 ; 263  |// have to come back and fix this some other way.)
                             3227 ; 264  |//
                             3228 ; 265  |/////////////////////////////////////////////////////////////////////////////////
                             3229 ; 266  |typedef struct {
                             3230 ; 267  |  int                        iMagicCookie;
                             3231 ; 268  |  int                        iVersionNum;
                             3232 ; 269  |
                             3233 ; 270  |  int                        iNumBadBlks;        // Number Bad Blocks on this Chip
                             3234 ; 271  |
                             3235 ; 272  |  int                        iNumRegions;
                             3236 ; 273  |  NAND_CFG_BLK_REGION_INFO   Regions[1];         // Regions[NAND_MEDIA_MAX_REGIONS]
                             3237 ; 274  |
                             3238 ; 275  |} NAND_CFG_BLK_INFO, * P_NAND_CFG_BLK_INFO;
                             3239 ; 276  |
                             3240 ; 277  |#define RelativeSectorToPhysical(pNandParameters, iBlkNum, iRelSector) \ 
                             3241 ; 278  |     ((iRelSector) + (iBlkNum) * ((pNandParameters)->wNumberSectorsPerBlock))
                             3242 ; 279  |
                             3243 ; 280  |///////////////////////////////////////////////////////////////////////////////
                             3244 ; 281  |// Error codes
                             3245 ; 282  |///////////////////////////////////////////////////////////////////////////////
                             3246 ; 283  |
                             3247 ; 284  |///////////////////////////////////////////////////////////////////////////////
                             3248 ; 285  |// Typedefs
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3249 ; 286  |///////////////////////////////////////////////////////////////////////////////
                             3250 ; 287  |
                             3251 ; 288  |
                             3252 ; 289  |///////////////////////////////////////////////////////////////////////////////
                             3253 ; 290  |// Prototypes
                             3254 ; 291  |///////////////////////////////////////////////////////////////////////////////
                             3255 ; 292  |RETCODE _reentrant NANDCalculateCompleteEccSync(
                             3256 ; 293  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             3257 ; 294  |    P_SECTOR_BUFFER pBuffer);
                             3258 ; 295  |
                             3259 ; 296  |#if 0
                             3260 ; 297  |// No longer used
                             3261 ; 298  |RETCODE _reentrant NANDCalculatePartialEccSync(
                             3262 ; 299  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             3263 ; 300  |    P_SECTOR_BUFFER pBuffer);
                             3264 ; 301  |
                             3265 ; 302  |RETCODE _reentrant NANDStartEcc(
                             3266 ; 303  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             3267 ; 304  |    P_SECTOR_BUFFER pBuffer,
                             3268 ; 305  |    WORD wWhich);
                             3269 ; 306  |#endif
                             3270 ; 307  |RETCODE _reentrant NANDGetEccStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             3271 ; 308  |
                             3272 ; 309  |RETCODE _reentrant NANDWritePageStartDmaSync(
                             3273 ; 310  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             3274 ; 311  |    WORD wAbsoluteSectorNum,
                             3275 ; 312  |    P_SECTOR_BUFFER pBuffer);
                             3276 ; 313  |RETCODE _reentrant NANDGetDmaStatus(P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             3277 ; 314  |RETCODE _reentrant NANDWriteStartPageProgramSync(
                             3278 ; 315  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             3279 ; 316  |RETCODE _reentrant NANDWriteStartCachePageProgramSync(
                             3280 ; 317  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             3281 ; 318  |RETCODE _reentrant NANDWriteStartMultiPageProgramSync(
                             3282 ; 319  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             3283 ; 320  |RETCODE _reentrant NANDGetPageProgramStatus(
                             3284 ; 321  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             3285 ; 322  |RETCODE _reentrant NANDGetCachePageProgramStatus(
                             3286 ; 323  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc,
                             3287 ; 324  |    WORD * wStatus);
                             3288 ; 325  |
                             3289 ; 326  |RETCODE _reentrant NANDSetSectorLba(
                             3290 ; 327  |    WORD wBlockNumber,
                             3291 ; 328  |    WORD wSectorOffset,
                             3292 ; 329  |    P_SECTOR_BUFFER pBuffer);
                             3293 ; 330  |
                             3294 ; 331  |RETCODE NANDRecoverHardwareFromEraseFailure(
                             3295 ; 332  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc);
                             3296 
                             3298 
                             3299 ; 333  |
                             3300 ; 334  |///////////////////////////////////////////////////////////////////////////////
                             3301 ; 335  |// Global variables
                             3302 ; 336  |///////////////////////////////////////////////////////////////////////////////
                             3303 ; 337  |extern LOGICAL_MEDIA_API NANDMediaApi;
                             3304 
                             3315 
                             3316 ; 338  |extern NAND_MEDIA_INFO g_NANDMediaInfo[];
                             3317 
                             3319 
                             3320 ; 339  |
                             3321 ; 340  |extern LOGICAL_DRIVE_API NANDDataDriveApi;
                             3322 ; 341  |extern LOGICAL_DRIVE_API NANDSystemDriveApi;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3323 ; 342  |
                             3324 ; 343  |
                             3325 ; 344  |#endif // #ifndef _NANDDDI_H
                             3326 
                             3328 
                             3329 ; 4    |#include "nanddatadrive.h"
                             3330 
                             3332 
                             3333 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3334 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             3335 ; 3    |//
                             3336 ; 4    |// Filename: NANDDataDrive.h
                             3337 ; 5    |// Description: Contains OEM customizable flash driver options that were previously
                             3338 ; 6    |//              in nandmediadefaults.c (see that file also)
                             3339 ; 7    |////////////////////////////////////////////////////////////////////////////////
                             3340 ; 8    |
                             3341 ; 9    |#ifndef _NANDDATADRIVE_H
                             3342 ; 10   |#define _NANDDATADRIVE_H
                             3343 ; 11   |
                             3344 ; 12   |///////////////////////////////////////////////////////////////////////////////
                             3345 ; 13   |// Includes
                             3346 ; 14   |///////////////////////////////////////////////////////////////////////////////
                             3347 ; 15   |
                             3348 ; 16   |///////////////////////////////////////////////////////////////////////////////
                             3349 ; 17   |// Definitions
                             3350 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             3351 ; 19   |
                             3352 ; 20   |/////////////////////////////////////////////////////////////////////////////////
                             3353 ; 21   |// You may have up to 4 NAND chips, used as a Concatenated MultiNAND or a Striped
                             3354 ; 22   |// MultiNAND.  To have an external NAND drive, you must set MAX_NAND_CHIPS to less 
                             3355 ; 23   |// than 4.  If you will never have more than "n" chips, set MAX_NAND_CHIPS to "n"
                             3356 ; 24   |// to save RAM, unless this is MLC which needs high # of BB handling.
                             3357 ; 25   |/////////////////////////////////////////////////////////////////////////////////
                             3358 ; 26   |// Set to 1 to enable or 0 to disable. Only enable one of 2 defines below. 
                             3359 ; 27   |// If the following 3 defines are all 0, config is auto set to 2 die per chipSelect & 4 ch
                                  ips max, 
                             3360 ; 28   |// so 8 data drive regions (NAND4). 
                             3361 ; 29   |// 46 words of data RAM used for each additional die's datadrive region & region array +)
                             3362 ; 30   |
                             3363 ; 31   |// The 8 die config below uses 108 words of additional data RAM beyond 6 die config.  
                             3364 ; 32   |#define SUPPORT_QUAD_DIE_NAND2          0  /* Untested but expected to function. 8 total d
                                  ie config for 2 Chip Enables  */
                             3365 ; 33   |#define SUPPORT_OCTAL_DIE_NAND1         0  /* Only enable if you wish to support 8-die sin
                                  gle-ChipEnable cases. */
                             3366 ; 34   |
                             3367 ; 35   |#define EIGHTDIEMAX 1   /* to support 8 die total, uncomment this line or for 6 die max to
                                   save ram, comment out this line */
                             3368 ; 36   |// ifdef allow 8 total die, else default limit to 6 die max to save ram
                             3369 ; 37   |#ifdef EIGHTDIEMAX
                             3370 ; 38   |#define LIMIT_TO_6_DIE_CONFIG_MAX       0  /* 8 total die supported */
                             3371 ; 39   |#elif SUPPORT_QUAD_DIE_NAND2
                             3372 ; 40   |#define LIMIT_TO_6_DIE_CONFIG_MAX       0  /* 8 total die supported */
                             3373 ; 41   |#elif SUPPORT_OCTAL_DIE_NAND1
                             3374 ; 42   |#define LIMIT_TO_6_DIE_CONFIG_MAX       0  /* 8 total die supported */
                             3375 ; 43   |#else
                             3376 ; 44   |// LIMIT_TO_6_DIE_CONFIG_MAX when defined as 1, supports a single quad die (1 Chip Enable)
                                  , or 
                             3377 ; 45   |// dual die in 1x/2x/3x physical config but not 4x physical config since 8 dice unsupporte
                                  d. 
                             3378 ; 46   |#define LIMIT_TO_6_DIE_CONFIG_MAX       1  /* Emulate previous configs & uses no additiona
                                  l data RAM. */
                             3379 ; 47   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3380 ; 48   |
                             3381 ; 49   |
                             3382 ; 50   |// Note: if plib has hard coded references to this, you may need to use our 6 die max defa
                                  ult above.
                             3383 ; 51   |#if SUPPORT_QUAD_DIE_NAND2
                             3384 ; 52   | // If 4 die nand packages (or needs to be treated as one like toshiba w/ inter-zone page 
                                  copy restriction), 
                             3385 ; 53   | // this supports 2 ChipEnables max to save ram. 
                             3386 ; 54   | #define MAX_NAND_CHIPS 2  /* 2 here gives 8 dice config max & 8 data drives for dice */
                             3387 ; 55   |#elif SUPPORT_OCTAL_DIE_NAND1
                             3388 ; 56   | // OCTAL die       multinand not supported by default due to desired ram usage.
                             3389 ; 57   | #define MAX_NAND_CHIPS 1  /* 1 here gives 8 dice config max & 8 data drives for dice */
                             3390 ; 58   |#else
                             3391 ; 59   | // default: 2 die packages can use 3 or 4 chips here (issue: ram amount used. SDK2.521 ha
                                  d MAX_NAND_CHIPS 4)
                             3392 ; 60   | #define MAX_NAND_CHIPS 4
                             3393 ; 61   |#endif // since we added a hidden data drive and 1 system drive for sdk3.0 suggest 3 2die 
                                  chips max instead of 4 to save ram.
                             3394 ; 62   |
                             3395 ; 63   |// if the limit define above is disabled, nandmediadefaults auto multiplies macros (this f
                                  ile 3 pages down):
                             3396 ; 64   |// numDiePerChip *  chosenMaxNumChipsForYramDesired   =  max num data drive regions result
                                  ing
                             3397 ; 65   |//  2                   4     as previously.          =  8
                             3398 ; 66   |//  4 (new)             2                             =  8
                             3399 ; 67   |//  8 (new)             1                             =  8
                             3400 ; 68   |
                             3401 ; 69   |/////////////////////////////////////////////////////////////////////////////////
                             3402 ; 70   |//  Each chip may have one or more Data Regions.  One reason to
                             3403 ; 71   |//  have more than one Data Region per chip is to allow MultiPlane addressing for
                             3404 ; 72   |//  an 8-plane 128 MByte NAND. TODO UPDATE PREVIOUS COMMENT. Such a NAND is organized as t
                                  wo 4-plane blocks.
                             3405 ; 73   |//  Making each block part of a different Region allows MultiPlane features to
                             3406 ; 74   |//  be exploited.
                             3407 ; 75   |//  Note that the value following is not used if LIMIT_TO_6_DICE_CONFIG_MAX is enabled.
                             3408 ; 76   |//  A very few flash packages need 8 here since they have 8 die/districts/regions per chip
                                   enable. 
                             3409 ; 77   |//  Sets 4 here if you enabled support of 2 quad-die configurations each with a chipEnable
                                   (multnand). 
                             3410 ; 78   |//  Or default sets 2 for 2-die packages (except: toshiba 512MB w/ page copy restriction t
                                  hat needs 4 here)
                             3411 ; 79   |#if SUPPORT_QUAD_DIE_NAND2
                             3412 ; 80   |#define MAX_DATA_REGIONS_PER_CHIP 4
                             3413 ; 81   |#elif SUPPORT_OCTAL_DIE_NAND1
                             3414 ; 82   |#define MAX_DATA_REGIONS_PER_CHIP 8
                             3415 ; 83   |#else
                             3416 ; 84   |// default as in sdk 2.521 (most nand flash today have 2 die per ChipEnable (march 2005)
                             3417 ; 85   |#define MAX_DATA_REGIONS_PER_CHIP 2 
                             3418 ; 86   |#endif
                             3419 ; 87   |
                             3420 ; 88   |////////////////////////////////////////////////////////////////////////////////////////
                             3421 ; 89   |// A typical SDK3.0 system has the following System Drives:
                             3422 ; 90   |//        bootmanager.sb    hostlink.sb   hostrsc.bin   StmpSys.sb  resource.bin
                             3423 ; 91   |//        Note: updater.sb is not flashed & is only used during usb boot (firmware recover
                                  y mode). 
                             3424 ; 92   |// Adding any vendor-specific drives will require increasing MAX_NAND_SYSTEM_DRIVES.
                             3425 ; 93   |// There are 5 system drives in sdk3.x, 4 sys drives in sdk 2.521. 
                             3426 ; 94   |#define MAX_NAND_SYSTEM_DRIVES 9 
                             3427 ; 95   |
                             3428 ; 96   |////////////////////////////////////////////////////////////////////////////////////////
                             3429 ; 97   |// A typical system will have just one hidden data Drives:
                             3430 ; 98   |// Adding any vendor-specific drives will require increasing MAX_NAND_HIDDEN_DRIVES.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3431 ; 99   |#define MAX_NAND_HIDDEN_DRIVES 1 
                             3432 ; 100  |
                             3433 ; 101  |/////////////////////////////////////////////////////////////////////////////////
                             3434 ; 102  |// The Master Bad Block Table (in RAM) must be allocated at compile-time.  Each
                             3435 ; 103  |// Region on each NAND gets a portion of this table to track the Bad Blocks in
                             3436 ; 104  |// that Region.  The actual size of the Region's portion depends on the actual
                             3437 ; 105  |// number of Bad Blocks in that Region, plus other factors, so different Regions
                             3438 ; 106  |// may get different size allocations.  The total size allocation, for the Master
                             3439 ; 107  |// Bad Block Table allows for each NAND to get the following number of entries,
                             3440 ; 108  |// "on average".  Your mileage may vary. 
                             3441 ; 109  |/////////////////////////////////////////////////////////////////////////////////
                             3442 ; 110  |// JLN: Toshiba MLC 512 MByte datasheet says <= 720 Bad Blocks guaranteed for new device. 
                                  
                             3443 ; 111  |//      Toshiba MLC 256 MByte datasheet says <= 360 Bad Blocks guaranteed. 
                             3444 ; 112  |//      Toshiba MLC 128 MByte datasheet says <= 180 Bad Blocks guaranteed. 
                             3445 ; 113  |//                2x256 MByte                <= 720 Bad Blocks guaranteed. 
                             3446 ; 114  |//                2x128 MByte                <= 360 Bad Blocks guaranteed.
                             3447 ; 115  |// Note that that we instead specify quad blocks as bad if one of the quad is bad.
                             3448 ; 116  |// 360 BB case is fully handled by BB per chip*4 below, but if you want to completely hand
                                  le 
                             3449 ; 117  |// the 720 bad quad block case, more y mem can be allocated here if you export more 
                             3450 ; 118  |// data (y_extra) sections to elsewhere.
                             3451 ; 119  |// To reduce data mem usage, set this define to 0 if you won't use MLC. Only used here cur
                                  rently.
                             3452 ; 120  |// SDK 3.000 CAN NOT SUPPORT MLC SO LEAVE 0. 3.1 planned to support large block MLC aka ty
                                  pe 5 flash.
                             3453 ; 121  |
                             3454 ; 122  |//DS: Enabled the directive below, in order to increase the number of Bad Block entries. 
                             3455 ; 123  |#define SUPPORT_MLC 1
                             3456 ; 124  |
                             3457 ; 125  |#if SUPPORT_MLC
                             3458 ; 126  |// Uses much data memory. Likely multiplied by 4 chips max when allocating actual BB table
                                  .
                             3459 ; 127  |//the following are the number of Bad Block entries currently allocated for the player and
                                   mtp builds.
                             3460 ; 128  |#ifdef PLAYER
                             3461 ; 129  |#define MAX_AVG_NAND_BAD_BLOCKS_PER_CHIP 56 // 56*4=224  for 4 chips
                             3462 ; 130  |#else
                             3463 ; 131  |#define MAX_AVG_NAND_BAD_BLOCKS_PER_CHIP 76 // 76*4=304  for 4 chips
                             3464 ; 132  |#endif
                             3465 ; 133  |#else
                             3466 ; 134  |#define MAX_AVG_NAND_BAD_BLOCKS_PER_CHIP 38 // 38*4=152 word 
                             3467 ; 135  |#endif
                             3468 ; 136  |
                             3469 ; 137  |
                             3470 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             3471 ; 139  |//  FRACTION_RBLOCKS tells what minimal part of each Region should be allocated as 
                             3472 ; 140  |//  Replacement Blocks - blocks used to substitute for Home Blocks (HBlocks) which 
                             3473 ; 141  |//  are bad.  This number is typically something like 10/1024, i.e. reserve 10 
                             3474 ; 142  |//  blocks out of every 1024.  This determines the initial number of RBlocks allocated
                             3475 ; 143  |//  when there are few known Bad Blocks.  Later, MIN_SPARE_RBLOCKS_PER_REGION (below)
                             3476 ; 144  |//  kicks in.
                             3477 ; 145  |//  As Type 3 NANDs (MLC) typically need more RBlocks to function well, for
                             3478 ; 146  |//  Type 3s, the number of RBlocks will be scaled up by TYPE3_RBLOCKS_SCALER.
                             3479 ; 147  |//  This define allows Type 3s to be scaled up without punishing other NAND types
                             3480 ; 148  |//  by forcing them to have more RBlocks than they need.
                             3481 ; 149  |/////////////////////////////////////////////////////////////////////////////////
                             3482 ; 150  |#define FRACTION_RBLOCKS 0.025
                             3483 ; 151  |#define TYPE3_RBLOCKS_SCALER 6.7
                             3484 ; 152  |
                             3485 ; 153  |/////////////////////////////////////////////////////////////////////////////////
                             3486 ; 154  |//  MIN_SPARE_RBLOCKS_PER_REGION specifies the minimum number of "spare" RBlocks
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3487 ; 155  |//  get allocated for a Region when the number of known Bad Blocks in that Region,
                             3488 ; 156  |//  plus MIN_SPARE_RBLOCKS_PER_REGION, is greater than FRACTION_RBLOCKS * RegionSize.
                             3489 ; 157  |//
                             3490 ; 158  |//  As the NAND ages and new Bad Blocks are discovered, the initial pool of Rblocks
                             3491 ; 159  |//  (FRACTION_RBLOCKS * RegionSize) gets used up.  A new allocation will see that
                             3492 ; 160  |//  there are few spare RBlocks (or none!), and will steal blocks from the HBlocks
                             3493 ; 161  |//  to increase the RBlock pool.
                             3494 ; 162  |//
                             3495 ; 163  |//  The minimum spare RBlocks allocation will be scaled up by TYPE3_RBLOCKS_SCALER,
                             3496 ; 164  |//  for Type 3 NANDs.
                             3497 ; 165  |/////////////////////////////////////////////////////////////////////////////////
                             3498 ; 166  |#define MIN_SPARE_RBLOCKS_PER_REGION 4
                             3499 ; 167  |
                             3500 ; 168  |/////////////////////////////////////////////////////////////////////////////////
                             3501 ; 169  |//  Each Data Drive Region has an Updates Table, listing all of the UBlocks and
                             3502 ; 170  |//  their mappings/status.  The number of UBlocks of each Region is given in the
                             3503 ; 171  |//  Configuration Block, on the NAND.  The total number of UBlocks there must be
                             3504 ; 172  |//  less than or equal to the number of Data Drive Regions times the number given
                             3505 ; 173  |//  below (AVG_UPDATE_BLOCKS_PER_REGION);  otherwise, DataDriveInit() will fail
                             3506 ; 174  |//  and a full update (new MediaAllocate()) must be performed.  This should only
                             3507 ; 175  |//  happen if the firmware is changed without re-allocating the NANDs.
                             3508 ; 176  |//
                             3509 ; 177  |//  As Type 3 NANDs (SB-MLC now unsupported) typically need more UBlocks to function well 
                                  
                             3510 ; 178  |//  (as do type5 LB-MLC), for Type 3s, the number of UBlocks will be scaled up by TYPE3_UB
                                  LOCKS_SCALER.
                             3511 ; 179  |//  This define allows Type 3s to be scaled up without punishing other NAND types
                             3512 ; 180  |//  by forcing them to have more UBlocks than they need.
                             3513 ; 181  |/////////////////////////////////////////////////////////////////////////////////
                             3514 ; 182  |// more u block allocation. For 2 year player life.
                             3515 ; 183  |#define AVG_UPDATE_BLOCKS_PER_REGION  31 
                             3516 ; 184  |
                             3517 ; 185  |// This is unused in the SDK currently. 
                             3518 ; 186  |#define TYPE3_UBLOCKS_SCALER 3.
                             3519 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             3520 ; 188  |// REVIEW: comment below appears to be in error:
                             3521 ; 189  |//  AVG_UPDATE_BLOCKS_PER_REGION is good for drives that have blocks greater than
                             3522 ; 190  |//  2*(AVG_UPDATE_BLOCKS_PER_REGION + MIN_SPARE_RBLOCKS_PER_REGION) but for drives
                             3523 ; 191  |//  that are too small with fewer blocks we need another define for minimum blocks
                             3524 ; 192  |//  per region.  (this is basically just for 8MByte and smaller flash or regions like the 
                                  hidden drive)
                             3525 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                             3526 ; 194  |#define MIN_UPDATE_BLOCKS_PER_REGION  MIN_SPARE_RBLOCKS_PER_REGION
                             3527 ; 195  |
                             3528 ; 196  |/////////////////////////////////////////////////////////////////////////////////
                             3529 ; 197  |//  Using MIN_UPDATE_BLOCKS_PER_REGION and MIN_SPARE_RBLOCKS_PER_REGION we can 
                             3530 ; 198  |//  define minimum size required for a small size data drive.
                             3531 ; 199  |/////////////////////////////////////////////////////////////////////////////////
                             3532 ; 200  |#define MIN_DATA_DRIVE_SIZE ( 2 * ( MIN_UPDATE_BLOCKS_PER_REGION + MIN_SPARE_RBLOCKS_PER_R
                                  EGION ) )
                             3533 ; 201  |
                             3534 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                             3535 ; 203  |//  HIDDEN_DRIVE_PERCENTAGE gives the percentage of data drive to be allocated
                             3536 ; 204  |//  for hidden drive.
                             3537 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             3538 ; 206  |//#define HIDDEN_DRIVE_PERCENTAGE (0.01) 
                             3539 ; 207  |
                             3540 ; 208  |// Making the HIDDEN_DRIVE_PERCENTAGE 0 will cause it 
                             3541 ; 209  |// to default to a minimum block size.  Right now that
                             3542 ; 210  |// block size is 16 blocks.
                             3543 ; 211  |#define HIDDEN_DRIVE_PERCENTAGE 0
                             3544 ; 212  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3545 ; 213  |/////////////////////////////////////////////////////////////////////////////////
                             3546 ; 214  |//  Update Sectors Maps allocation
                             3547 ; 215  |//  This is just a crude version, allowing for 6 maps of 256-Sector UBlocks.
                             3548 ; 216  |/////////////////////////////////////////////////////////////////////////////////
                             3549 ; 217  |#define NUM_OF_MAX_SIZE_USECTORS_MAPS 6
                             3550 ; 218  |#define MAX_USECTORS_PER_BLOCK  256
                             3551 ; 219  |#define MAX_WORDS_FOR_UPDATE_SECTOR_MAPS  (NUM_OF_MAX_SIZE_USECTORS_MAPS * ((MAX_USECTORS_
                                  PER_BLOCK+2)/3 + sizeof(UPDATE_SECTORS_MAP_DESCRIPTOR)))
                             3552 ; 220  |
                             3553 ; 221  |
                             3554 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             3555 ; 223  |//  Garbage Collector Configuration
                             3556 ; 224  |//
                             3557 ; 225  |/////////////////////////////////////////////////////////////////////////////////
                             3558 ; 226  |
                             3559 ; 227  |#define NUM_FRESH_LISTEES 6
                             3560 ; 228  |
                             3561 ; 229  |
                             3562 ; 230  |
                             3563 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             3564 ; 232  |/////////////////////////////////////////////////////////////////////////////////
                             3565 ; 233  |//  SIGMATEL CUSTOMERS SHOULD NOT MODIFY ANYTHING BELOW THIS LINE *********
                             3566 ; 234  |/////////////////////////////////////////////////////////////////////////////////
                             3567 ; 235  |/////////////////////////////////////////////////////////////////////////////////
                             3568 ; 236  |
                             3569 ; 237  |
                             3570 ; 238  |
                             3571 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                             3572 ; 240  |// Each chip will have MAX_DATA_REGIONS_PER_CHIP Data Drive Regions (e.g. 2 to 
                             3573 ; 241  |// cover 8-plane 128MB NANDs).
                             3574 ; 242  |// Each System Drive also uses one Region
                             3575 ; 243  |/////////////////////////////////////////////////////////////////////////////////
                             3576 ; 244  |// DO NOT CHANGE THIS. ENABLE/DISABLE DEFs AT TOP OF FILE TO SUPPORT 2, 4, OR 8 DIE FLASH.
                                  
                             3577 ; 245  |// SDK3.0 IS CAN DEFAULT ABOVE TO ENABLE ONLY 6 DICE TOTAL OR A CALCULATED TOTAL SUCH AS 8
                                  . 
                             3578 ; 246  |//    DON'T CHANGE THIS TO RM A WARNING UNLESS .ybssnandmediadefaults size is unchanged.
                             3579 ; 247  |#if LIMIT_TO_6_DIE_CONFIG_MAX
                             3580 ; 248  |// SDK3.0 default stays at 6 max data drive regions so no RAM growth                      
                                      
                             3581 ; 249  |// 6 supports 3 dual-die ChipEnables max. Or 1 4-die configured nand.
                             3582 ; 250  |#define MAX_DATA_DRIVE_REGIONS (                          6               ) 
                             3583 ; 251  |#else
                             3584 ; 252  |// sdk2.5x                            2                   *     4        =  8
                             3585 ; 253  |// sdk3.0 default:                   {2,2,4,8}            *    {4,3,2,1} = {8,6,8,8}
                             3586 ; 254  |#define MAX_DATA_DRIVE_REGIONS (MAX_DATA_REGIONS_PER_CHIP * MAX_NAND_CHIPS)
                             3587 ; 255  |#endif
                             3588 ; 256  |
                             3589 ; 257  |// sdk2.5x                               8       +           4            + 0             
                                         =  12
                             3590 ; 258  |// sdk3.0 default:                {8,6,8,8}      +           5            + 1             
                                         = {14,12,14,14}
                             3591 ; 259  |#define MAX_NAND_REGIONS (MAX_DATA_DRIVE_REGIONS + MAX_NAND_SYSTEM_DRIVES + MAX_NAND_HIDDE
                                  N_DRIVES) 
                             3592 ; 260  |
                             3593 ; 261  |
                             3594 ; 262  |
                             3595 ; 263  |#define MAX_NAND_BAD_BLOCKS  (MAX_NAND_CHIPS * MAX_AVG_NAND_BAD_BLOCKS_PER_CHIP)
                             3596 ; 264  |
                             3597 ; 265  |#if 1 
                             3598 ; 266  |// update line: in sdk3.110 this change to no longer allocate ram for u block for sys driv
                                  es (which don't use u blocks)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3599 ; 267  |// is just a mem savings since we kept just 20 u blocks per drive region. 3.120 is higher.
                                   
                             3600 ; 268  |// New approach for sdk3.110 (and 2.610) excludes sys drives & allocates no more ram.     
                                              
                             3601 ; 269  |// This can give at least 50% more u blocks per region in the same RAM. In 3.120 & 2.610 m
                                  ore % increase above this is done in nandmediaallocate at stupdater time.
                             3602 ; 270  |// HDS is said to be only 4 u blocks. Verify if 4 u blocks is enough. Some said it is writ
                                  ten infrequently so probably ok. 
                             3603 ; 271  |#define MAX_UPDATE_BLOCKS ((AVG_UPDATE_BLOCKS_PER_REGION*(MAX_DATA_DRIVE_REGIONS+MAX_NAND_
                                  HIDDEN_DRIVES))+MAX_DATA_DRIVE_REGIONS)
                             3604 ; 272  |#else
                             3605 ; 273  |// Add a constant MAX_DATA_DRIVE_REGIONS for growth.
                             3606 ; 274  |#define MAX_UPDATE_BLOCKS ((AVG_UPDATE_BLOCKS_PER_REGION * MAX_NAND_REGIONS)+MAX_DATA_DRIV
                                  E_REGIONS)
                             3607 ; 275  |#endif
                             3608 ; 276  |
                             3609 ; 277  |#define NUM_BBTABLE_ENTRIES_PER_REGION  12
                             3610 ; 278  |#define NUM_BAD_BLOCKS_REGION_0         9
                             3611 ; 279  |#define NUM_BAD_BLOCKS_REGION_1         9
                             3612 ; 280  |#define NUM_BAD_BLOCKS_REGION_2         9
                             3613 ; 281  |#define NUM_BAD_BLOCKS_REGION_3         9
                             3614 ; 282  |
                             3615 ; 283  |///////////////////////////////////////////////////////////////////////////////
                             3616 ; 284  |// Error codes
                             3617 ; 285  |///////////////////////////////////////////////////////////////////////////////
                             3618 ; 286  |
                             3619 ; 287  |#include "errors.h"
                             3620 
                             3622 
                             3623 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             3624 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                             3625 ; 3    |////
                             3626 ; 4    |//// Filename: errors.inc
                             3627 ; 5    |//// Description: 
                             3628 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             3629 ; 7    |
                             3630 ; 8    |#if (!defined(ERRORS_INC))
                             3631 ; 9    |#define ERRORS_INC 1
                             3632 ; 10   |
                             3633 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                             3634 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                             3635 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                             3636 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                             3637 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                             3638 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                             3639 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                             3640 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                             3641 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                             3642 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                             3643 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                             3644 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                             3645 ; 23   |// block in the device. The block was marked bad and tables updated.
                             3646 ; 24   |// The application must start over.
                             3647 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                             3648 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                             3649 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                             3650 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                             3651 ; 29   |
                             3652 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                             3653 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                             3654 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                             3655 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3656 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                             3657 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                             3658 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                             3659 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                             3660 ; 38   |//Specific to NAND
                             3661 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                             3662 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                             3663 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                             3664 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                             3665 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                             3666 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                             3667 ; 45   |
                             3668 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                             3669 ; 47   |
                             3670 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                             3671 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                             3672 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                             3673 ; 51   |
                             3674 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                             3675 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                             3676 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                             3677 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                             3678 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                             3679 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                             3680 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                             3681 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                             3682 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                             3683 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                             3684 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                             3685 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                             3686 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                             3687 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                             3688 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                             3689 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                             3690 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                             3691 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                             3692 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                             3693 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                             3694 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                             3695 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                             3696 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                             3697 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                             3698 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                             3699 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                             3700 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                             3701 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                             3702 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                             3703 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                             3704 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                             3705 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                             3706 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                             3707 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                             3708 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                             3709 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                             3710 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                             3711 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                             3712 ; 90   |
                             3713 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                             3714 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                             3715 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                             3716 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                             3717 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3718 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                             3719 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                             3720 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                             3721 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                             3722 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                             3723 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                             3724 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                             3725 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                             3726 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                             3727 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                             3728 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                             3729 ; 107  |
                             3730 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                             3731 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                             3732 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                             3733 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                             3734 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                             3735 ; 113  |
                             3736 ; 114  |// indicates that during the NandHalInit, the NandType did not
                             3737 ; 115  |// match the previously initialized Nand chip type.
                             3738 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                             3739 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                             3740 ; 118  |// Errors from calling HIL functions
                             3741 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                             3742 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                             3743 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                             3744 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                             3745 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                             3746 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                             3747 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                             3748 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                             3749 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                             3750 ; 128  |// for 3410 build
                             3751 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                             3752 ; 130  |// for 3410 build
                             3753 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                             3754 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                             3755 ; 133  |
                             3756 ; 134  |// indicates that the GetStatus returned a FAIL
                             3757 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                             3758 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                             3759 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                             3760 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                             3761 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                             3762 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                             3763 ; 141  |// indicates the NAND was already BUSY
                             3764 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                             3765 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                             3766 ; 144  |// ECC Error Codes
                             3767 ; 145  |// ECC Computation has successfully completed
                             3768 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                             3769 ; 147  |// ECC computation still busy
                             3770 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                             3771 ; 149  |// timed out while waiting on object
                             3772 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                             3773 ; 151  |// flag already set for SDK2.4 lock
                             3774 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                             3775 ; 153  |
                             3776 ; 154  |#define NANDHAL_ECC_NOERROR 0
                             3777 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                             3778 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                             3779 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3780 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                             3781 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                             3782 ; 160  |
                             3783 ; 161  |// MMC Errors
                             3784 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                             3785 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                             3786 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                             3787 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                             3788 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                             3789 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                             3790 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                             3791 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                             3792 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                             3793 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                             3794 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                             3795 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                             3796 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                             3797 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                             3798 ; 176  |
                             3799 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                             3800 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                             3801 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                             3802 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                             3803 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                             3804 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                             3805 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                             3806 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                             3807 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                             3808 ; 186  |
                             3809 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             3810 ; 188  |//// MMC HAL Error codes
                             3811 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                             3812 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                             3813 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                             3814 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                             3815 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                             3816 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                             3817 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                             3818 ; 196  |
                             3819 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                             3820 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                             3821 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                             3822 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                             3823 ; 201  |
                             3824 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                             3825 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                             3826 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                             3827 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                             3828 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                             3829 ; 207  |
                             3830 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                             3831 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                             3832 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                             3833 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                             3834 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                             3835 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                             3836 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                             3837 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                             3838 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                             3839 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                             3840 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                             3841 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3842 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                             3843 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                             3844 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                             3845 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                             3846 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                             3847 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                             3848 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                             3849 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                             3850 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                             3851 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                             3852 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                             3853 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                             3854 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                             3855 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                             3856 ; 234  |
                             3857 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                             3858 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                             3859 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                             3860 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                             3861 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                             3862 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                             3863 ; 241  |
                             3864 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                             3865 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                             3866 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                             3867 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                             3868 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                             3869 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                             3870 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                             3871 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                             3872 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                             3873 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                             3874 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                             3875 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                             3876 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                             3877 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                             3878 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                             3879 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                             3880 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                             3881 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                             3882 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                             3883 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                             3884 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                             3885 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                             3886 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                             3887 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                             3888 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                             3889 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                             3890 ; 268  |
                             3891 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                             3892 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                             3893 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                             3894 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                             3895 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                             3896 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                             3897 ; 275  |
                             3898 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                             3899 ; 277  |//MATH errors...
                             3900 ; 278  |#define ERRZeroDivide 0x7FFFFF
                             3901 ; 279  |
                             3902 ; 280  |//Memory Pointer errors...
                             3903 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3904 ; 282  |//****************************************************************/
                             3905 ; 283  |#if (!defined(NOERROR))
                             3906 ; 284  |#define NOERROR 0
                             3907 ; 285  |#endif
                             3908 ; 286  |
                             3909 ; 287  |////Added by RAKS
                             3910 ; 288  |
                             3911 ; 289  |#define ERRProgram 0x911111
                             3912 ; 290  |#define ERRNoMedia 0x922222
                             3913 ; 291  |#define ERRHwFail 0x933333   
                             3914 ; 292  |#define ERRInvMedia 0x944444
                             3915 ; 293  |#define ERRBlkFail 0x955555
                             3916 ; 294  |#define ERRInvDataStatus 0x966666
                             3917 ; 295  |#define ERRWriteFail 0x977777
                             3918 ; 296  |#define ERRECCCorr 0x988888
                             3919 ; 297  |#define ERRECCFail 0x999999
                             3920 ; 298  |#define ERRZoneFull 0x9aaaaa
                             3921 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                             3922 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                             3923 ; 301  |//invalid partition table signature. 
                             3924 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                             3925 ; 303  |//boot ID bad
                             3926 ; 304  |#define ERRBootID 0x9BBBBB   
                             3927 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                             3928 ; 306  |////Nothing was here : RAKS
                             3929 ; 307  |//JUMP instruction bad
                             3930 ; 308  |#define ERRBootJump 0x9DDDDD  
                             3931 ; 309  |//ID Byte bad
                             3932 ; 310  |#define ERRIDByte 0x9EEEEE  
                             3933 ; 311  |
                             3934 ; 312  |
                             3935 ; 313  |//****************************************************************
                             3936 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                             3937 ; 315  |//****************************************************************
                             3938 ; 316  |// Master ERROR File
                             3939 ; 317  |//****************************************************************/
                             3940 ; 318  |// FAT File System Error Codes
                             3941 ; 319  |// corrupt FAT
                             3942 ; 320  |#define FATCorrupt -1        
                             3943 ; 321  |// invalid FAT sector
                             3944 ; 322  |#define DIRInvlaidSector -2        
                             3945 ; 323  |
                             3946 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                             3947 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                             3948 ; 326  |#define FATwarningReservedCx 0x0A1111
                             3949 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                             3950 ; 328  |//FATcxsFree==0 
                             3951 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                             3952 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                             3953 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                             3954 ; 332  |
                             3955 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                             3956 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                             3957 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                             3958 ; 336  |
                             3959 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                             3960 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                             3961 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                             3962 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                             3963 ; 341  |//No Free Cxs on FAT Scan!
                             3964 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                             3965 ; 343  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3966 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                             3967 ; 345  |
                             3968 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                             3969 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                             3970 ; 348  |
                             3971 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                             3972 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                             3973 ; 351  |
                             3974 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                             3975 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                             3976 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                             3977 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                             3978 ; 356  |
                             3979 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                             3980 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                             3981 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                             3982 ; 360  |
                             3983 ; 361  |#define SEEKprefix 0x85
                             3984 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                             3985 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                             3986 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                             3987 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                             3988 ; 366  |
                             3989 ; 367  |#define READprefix 0x86
                             3990 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                             3991 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                             3992 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                             3993 ; 371  |#define READerrorAccessDenied 0x86ADAD
                             3994 ; 372  |#define READerrorFreeCx 0x860000
                             3995 ; 373  |#define READerrorEndOfChain 0x861111
                             3996 ; 374  |#define READerrorReservedCx 0x862222
                             3997 ; 375  |#define READerrorBadCx 0x863333
                             3998 ; 376  |
                             3999 ; 377  |#define WRITEprefix 0x87
                             4000 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                             4001 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                             4002 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                             4003 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                             4004 ; 382  |#define WRITEerrorFreeCx 0x870000
                             4005 ; 383  |#define WRITEerrorEndOfChain 0x871111
                             4006 ; 384  |#define WRITEerrorReservedCx 0x872222
                             4007 ; 385  |#define WRITEerrorBadCx 0x873333
                             4008 ; 386  |
                             4009 ; 387  |#define UTILprefix 0x88
                             4010 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                             4011 ; 389  |
                             4012 ; 390  |// Directory Error Codes
                             4013 ; 391  |
                             4014 ; 392  |// invalid DIR sector specified
                             4015 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                             4016 ; 394  |// PATH search string has invlaid directory
                             4017 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                             4018 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                             4019 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                             4020 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                             4021 ; 399  |// Bad cluster number
                             4022 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                             4023 ; 401  |// Can't open ROOT
                             4024 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                             4025 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                             4026 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                             4027 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4028 ; 406  |// bad record number to read
                             4029 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                             4030 ; 408  |// record requeste not in range
                             4031 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                             4032 ; 410  |// record requeste past end of ROOT
                             4033 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                             4034 ; 412  |// device number invalid
                             4035 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                             4036 ; 414  |// FCB Does not popint to a sub-Directory entry
                             4037 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                             4038 ; 416  |// Path specified is invalid
                             4039 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                             4040 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                             4041 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                             4042 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                             4043 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                             4044 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                             4045 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                             4046 ; 424  |
                             4047 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                             4048 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                             4049 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                             4050 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                             4051 ; 429  |// String Manipulation Error Codes
                             4052 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                             4053 ; 431  |
                             4054 ; 432  |#endif //@DEF(ERRORS_INC)
                             4055 ; 433  |
                             4056 
                             4058 
                             4059 ; 288  |
                             4060 ; 289  |
                             4061 ; 290  |///////////////////////////////////////////////////////////////////////////////
                             4062 ; 291  |// Typedefs
                             4063 ; 292  |///////////////////////////////////////////////////////////////////////////////
                             4064 ; 293  |
                             4065 ; 294  |typedef struct {
                             4066 ; 295  |    P_NAND_REGION_INFO pRegion;
                             4067 ; 296  |    WORD wUBlkAddr;
                             4068 ; 297  |} ASYNC_ERASE_CALLBACK_PARAMS, * P_ASYNC_ERASE_CALLBACK_PARAMS;
                             4069 ; 298  |
                             4070 ; 299  |    #ifdef NDD_STRESS_TEST
                             4071 ; 300  |// This is used by the nand data drive stress test.
                             4072 ; 301  |// It is externed in nddAddBlkToBBTbl.c
                             4073 ; 302  |typedef struct {
                             4074 ; 303  |    WORD wNumBadBlocks;
                             4075 ; 304  |    WORD wBadBlockAddr[50];
                             4076 ; 305  |    WORD wChip[50];
                             4077 ; 306  |} STRESS_TEST_UPDATE_BB, * P_STRESS_TEST_UPDATE_BB;
                             4078 ; 307  |    #endif
                             4079 ; 308  |
                             4080 ; 309  |/////////////////////////////////////////////////////////////////////////////////
                             4081 ; 310  |//  UPDATE SECTORS MAPS
                             4082 ; 311  |//
                             4083 ; 312  |//  An array of Update Sector Maps are shared by all Data Drive Regions, to hold
                             4084 ; 313  |//  a mapping between HBlock Sectors and UBlock Sectors, in RAM, for HBlocks which 
                             4085 ; 314  |//  have open Updates.
                             4086 ; 315  |//
                             4087 ; 316  |//  Some Update Sectors Maps can consume a large amount of memory (depending on the
                             4088 ; 317  |//  number of Sectors per Block), so we have only a limited number of them.  There 
                             4089 ; 318  |//  may be many more Open Updates than Update Sectors Maps, so only a few Updates 
                             4090 ; 319  |//  are mapped, in RAM, at any one time.  Other Updates are mapped only by their 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4091 ; 320  |//  Logical Block Address (LBA) and Logical Sector Address (LSA) fields in the 
                             4092 ; 321  |//  Redundant Areas of the USectors on NAND.  
                             4093 ; 322  |//
                             4094 ; 323  |//  When a needed Update Sectors Map is not in RAM, it can built built, on demand,
                             4095 ; 324  |//  by reading the Redundant Areas off NAND and filling in one of the shared Update 
                             4096 ; 325  |//  Sectors Maps in the RAM array.  (Another map may have to be discarded to make
                             4097 ; 326  |//  room;  it can be rebuilt when needed.  Obviously, you want to have as many
                             4098 ; 327  |//  Update Sectors Maps in RAM as you can afford, to reduce "thrashing".)
                             4099 ; 328  |//
                             4100 ; 329  |//  An Update Sectors Map in the array is associated with a particular Update through
                             4101 ; 330  |//  the pRegion and iUBlkIdx elements.  These identify the Region and give the 
                             4102 ; 331  |//  index of the UBlock used for the Update.  To find the Updates Sector Map for a 
                             4103 ; 332  |//  particular Update for a given Region, you have to search the shared Update 
                             4104 ; 333  |//  Sectors Maps for a match;  there is no forward pointer (from the Updates Table), 
                             4105 ; 334  |//  to save memory.  Since there are a small number of Update Sectors Maps, this 
                             4106 ; 335  |//  should not be too many CPU cycles.  
                             4107 ; 336  |//
                             4108 ; 337  |//  Note the Updates Table gets resorted whenever an Update gets opened or closed, 
                             4109 ; 338  |//  so the index into the Updates Table is not a robust way to link the USectors Maps 
                             4110 ; 339  |//  to the Updates Table.  Instead, we use the UBlock index, which is fixed until the 
                             4111 ; 340  |//  Update gets closed.  Setting the Block Index to USECTORS_MAP_NOT_MAPPED clears the
                             4112 ; 341  |//  USectorMap entry.
                             4113 ; 342  |//
                             4114 ; 343  |//  pSectorsMap points at the actual Sector mappings.  It is an array of WORDS, but
                             4115 ; 344  |//  it is accessed on a byte basis, using a "mod 3" function.  Each byte, by index,
                             4116 ; 345  |//  corresponds to a particular HSector.  The contents of the byte is either a USector
                             4117 ; 346  |//  index or iSectorsPerBlock (which is greater than any USector index).  A value of
                             4118 ; 347  |//  iSectorsPerBlock (MAX+1) means that the HBlock has not been updated.
                             4119 ; 348  |//
                             4120 ; 349  |//  USectors are written sequentially into the UBlock, and iUpdatedSectorsCnt keeps 
                             4121 ; 350  |//  track of how many have been written (and what the next write index is).
                             4122 ; 351  |//
                             4123 ; 352  |//  iSectorsPerBlock will be a power of two, ranging from 32 to 256.
                             4124 ; 353  |//
                             4125 ; 354  |//  The Sector Maps can be defined, dynamically, from a fixed-sized reserved area,
                             4126 ; 355  |//  such that the number of maps depends on the Sectors per Block.  For large blocks,
                             4127 ; 356  |//  you'd have a small number of maps, but for small blocks, you could have more
                             4128 ; 357  |//  maps.  More maps means less "trashing".
                             4129 ; 358  |//
                             4130 ; 359  |//  The DataDrive needs to keep a pointer to the array of Sector Maps, and it probably 
                             4131 ; 360  |//  defines them, in DataDriveInit.
                             4132 ; 361  |//
                             4133 ; 362  |/////////////////////////////////////////////////////////////////////////////////
                             4134 ; 363  |
                             4135 ; 364  |#define USECTORS_MAP_FREE  (0xffffff)
                             4136 ; 365  |
                             4137 ; 366  |// Using the last valid index here is ok because we never completely fill an update block
                             4138 ; 367  |#define USECTORS_MAP_MAX_SECTOR_INDEX (0xFF)
                             4139 ; 368  |#define USECTORS_THREE_UNMAPPED_SECTOR_INDICES (0xFFFFFF)
                             4140 ; 369  |
                             4141 ; 370  |typedef WORD * UPDATE_SECTORS_MAP_BYTES, * P_UPDATE_SECTORS_MAP_BYTES;
                             4142 
                             4144 
                             4145 ; 371  |
                             4146 ; 372  |typedef struct {
                             4147 ; 373  |
                             4148 ; 374  |  P_NAND_REGION_INFO       pRegion;                // Which Region and
                             4149 ; 375  |  WORD                     wUBlkIdx;               // which Update Block this Map goes wit
                                  h OR USECTORS_MAP_NOT_MAPPED
                             4150 ; 376  |
                             4151 ; 377  |  int                      iUpdatedSectorsCnt;     // The number of actual USectors that h
                                  ave been 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4152 ; 378  |                                                   // written to the UBlock.  They are wri
                                  tten 
                             4153 ; 379  |                                                   // sequentially, so this is also the in
                                  dex for
                             4154 ; 380  |                                                   // the next USector write
                             4155 ; 381  |
                             4156 ; 382  |  P_UPDATE_SECTORS_MAP_BYTES pSectorsMapBytes;     // array of Update Sector Mappings
                             4157 ; 383  |
                             4158 ; 384  |} UPDATE_SECTORS_MAP_DESCRIPTOR, * P_UPDATE_SECTORS_MAP_DESCRIPTOR;
                             4159 
                             4168 
                             4169 ; 385  |
                             4170 ; 386  |
                             4171 ; 387  |
                             4172 ; 388  |
                             4173 ; 389  |
                             4174 ; 390  |
                             4175 ; 391  |typedef struct {
                             4176 ; 392  |  WORD wNumRegions;
                             4177 ; 393  |  P_NAND_REGION_INFO *ppRegion;
                             4178 ; 394  |    
                             4179 ; 395  |  WORD iNumUSectorsMaps;
                             4180 ; 396  |  P_UPDATE_SECTORS_MAP_DESCRIPTOR pUSectorsMaps;
                             4181 ; 397  |  int iLastUSectorsMapIdxTouched;
                             4182 ; 398  |
                             4183 ; 399  |} NAND_DATA_DRIVE_INFO, * P_NAND_DATA_DRIVE_INFO;
                             4184 ; 400  |
                             4185 ; 401  |
                             4186 ; 402  |    #ifdef NDD_COUNT_ROUTINES
                             4187 ; 403  |typedef struct {
                             4188 ; 404  |    WORD AddUSector;
                             4189 ; 405  |    WORD BuildUSectorsMap;
                             4190 ; 406  |    WORD CloseUpdate;
                             4191 ; 407  |    WORD CloseUpdate_PreserveHSectors;
                             4192 ; 408  |    WORD GetFreeErasedUBlock;
                             4193 ; 409  |    WORD GetRecycledUBlock;
                             4194 ; 410  |    WORD GetUSectorsMap;
                             4195 ; 411  |    WORD KillUpdate;
                             4196 ; 412  |    WORD KillUSector;
                             4197 ; 413  |    WORD LookupUBlock;
                             4198 ; 414  |    WORD LookupUSector;
                             4199 ; 415  |    WORD ProtectUBlock;
                             4200 ; 416  |    WORD RecoverBadUBlock;
                             4201 ; 417  |    WORD StartNewUpdate;
                             4202 ; 418  |    WORD AddBlkToBBTbl;
                             4203 ; 419  |    WORD CopySectors;
                             4204 ; 420  |    WORD GetFreeErasedRBlock;
                             4205 ; 421  |    WORD LookupRBlock;
                             4206 ; 422  |    WORD RecoverBadHBlock;
                             4207 ; 423  |    WORD RecoverBadRBlock;
                             4208 ; 424  |    WORD SearchBBTableForPhysBlock;
                             4209 ; 425  |    WORD write_in_place;
                             4210 ; 426  |    WORD pin_allocation;
                             4211 ; 427  |} NDD_ROUTINE_COUNT, * P_NDD_ROUTINE_COUNT;
                             4212 ; 428  |    #endif
                             4213 ; 429  |
                             4214 ; 430  |
                             4215 ; 431  |
                             4216 ; 432  |///////////////////////////////////////////////////////////////////////////////
                             4217 ; 433  |// Prototypes
                             4218 ; 434  |///////////////////////////////////////////////////////////////////////////////
                             4219 ; 435  |RETCODE _reentrant NANDDataDriveInit(P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4220 ; 436  |
                             4221 ; 437  |RETCODE _reentrant NANDDataDriveGetInfo(
                             4222 ; 438  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             4223 ; 439  |    LOGICAL_DRIVE_INFO Type,
                             4224 ; 440  |    void * pInfo);
                             4225 
                             4237 
                             4238 ; 441  |
                             4239 ; 442  |RETCODE NANDDataDriveConvertLogicalToRelative(
                             4240 ; 443  |    P_NAND_DATA_DRIVE_INFO pDriveInfo,
                             4241 ; 444  |    DWORD dwLogicalSectorNum,
                             4242 ; 445  |    P_NAND_REGION_INFO *hRegion,
                             4243 ; 446  |    WORD *pwRelativeSectorNum);
                             4244 ; 447  |    
                             4245 ; 448  |RETCODE NANDDataDriveConvertRelativeToPhysical(
                             4246 ; 449  |    P_NAND_REGION_INFO pRegion,
                             4247 ; 450  |    WORD wRelativeSectorNum,
                             4248 ; 451  |    WORD *pwHBlockAddr,
                             4249 ; 452  |    WORD *pwHSectorIdx);
                             4250 ; 453  |    
                             4251 ; 454  |RETCODE NANDDataDriveLinearConvertRelativeToPhysical(
                             4252 ; 455  |    P_NAND_REGION_INFO pRegion,
                             4253 ; 456  |    WORD wRelativeSectorNum,
                             4254 ; 457  |    WORD *pwHBlkAddr,
                             4255 ; 458  |    WORD *pwHSectorIdx);
                             4256 ; 459  |    
                             4257 ; 460  |RETCODE NANDDataDriveMPConvertRelativeToPhysical(
                             4258 ; 461  |    P_NAND_REGION_INFO pRegion,
                             4259 ; 462  |    WORD wRelativeSectorNum,
                             4260 ; 463  |    WORD *pwHBlkAddr,
                             4261 ; 464  |    WORD *pwHSectorIdx);
                             4262 ; 465  |    
                             4263 ; 466  |RETCODE NANDDataDriveLookupRBlock(
                             4264 ; 467  |    P_NAND_REGION_INFO pRegion,
                             4265 ; 468  |    WORD HBlkAddr,
                             4266 ; 469  |    WORD *pRBlkAddr);
                             4267 ; 470  |    
                             4268 ; 471  |RETCODE NANDDataDriveSearchBBTableForPhysBlock(
                             4269 ; 472  |    P_NAND_REGION_INFO pRegion,
                             4270 ; 473  |    WORD wPhysBlkNum, 
                             4271 ; 474  |    WORD *pwBBIdx);
                             4272 ; 475  |
                             4273 ; 476  |RETCODE NANDDataDriveGetFreeErasedRBlock(
                             4274 ; 477  |    P_NAND_REGION_INFO pRegion,
                             4275 ; 478  |    WORD wOldBlockAddr,
                             4276 ; 479  |    WORD * pwRBlockAddr);
                             4277 ; 480  |
                             4278 ; 481  |RETCODE NANDDataDriveLinearGetFreeErasedRBlock(
                             4279 ; 482  |    P_NAND_REGION_INFO pRegion,
                             4280 ; 483  |    WORD wOldBlockAddr,
                             4281 ; 484  |    WORD * pwRBlockAddr);
                             4282 ; 485  |    
                             4283 ; 486  |RETCODE NANDDataDriveMPGetFreeErasedRBlock(
                             4284 ; 487  |    P_NAND_REGION_INFO pRegion,
                             4285 ; 488  |    WORD wOldBlockAddr,
                             4286 ; 489  |    WORD * pwRBlockAddr);
                             4287 ; 490  |
                             4288 ; 491  |RETCODE NANDDataDriveAddBlkToBBTbl(
                             4289 ; 492  |    P_NAND_REGION_INFO pRegion,
                             4290 ; 493  |    int iBlkAddr,
                             4291 ; 494  |    int iMapping);
                             4292 ; 495  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4293 ; 496  |
                             4294 ; 497  |RETCODE NANDDataDriveRecoverBadHBlock(
                             4295 ; 498  |    P_NAND_REGION_INFO pRegion,
                             4296 ; 499  |    WORD wHBlockAddr,
                             4297 ; 500  |    WORD wNumSectors,
                             4298 ; 501  |    WORD *pwNewRBlockAddr);
                             4299 ; 502  |
                             4300 ; 503  |RETCODE NANDDataDriveRecoverBadRBlock(
                             4301 ; 504  |    P_NAND_REGION_INFO pRegion,
                             4302 ; 505  |    WORD wHBlockAddr,
                             4303 ; 506  |    WORD wRBlockAddr,
                             4304 ; 507  |    WORD wNumSectors,
                             4305 ; 508  |    WORD *pwNewRBlockAddr);
                             4306 ; 509  |
                             4307 ; 510  |RETCODE NANDDataDriveEraseBlock(
                             4308 ; 511  |    P_NAND_REGION_INFO pRegion, 
                             4309 ; 512  |    WORD wBlockAddr);
                             4310 ; 513  |
                             4311 ; 514  |RETCODE _reentrant NANDDataDriveWriteSector(
                             4312 ; 515  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             4313 ; 516  |    DWORD dwSectorNumber,
                             4314 ; 517  |    P_SECTOR_BUFFER pSectorData);
                             4315 ; 518  |
                             4316 ; 519  |RETCODE _reentrant nddWriteSector(
                             4317 ; 520  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             4318 ; 521  |    DWORD dwSectorNumber,
                             4319 ; 522  |    P_SECTOR_BUFFER pSectorData);
                             4320 ; 523  |
                             4321 ; 524  |//#ifdef k_opt_performance_enhancement
                             4322 ; 525  |// this perf opt code block stays on even when perf opt is disabled.
                             4323 ; 526  |// the reason is to keep the stub of ndd_write_sector_in_place
                             4324 ; 527  |// in the build to prevent having to build with different .dsc files.
                             4325 ; 528  |RETCODE _reentrant ndd_write_sector_in_place(
                             4326 ; 529  |                                            P_LOGICAL_DRIVE_DESCRIPTOR p_descriptor,
                             4327 ; 530  |                                            DWORD dw_sector_number,
                             4328 ; 531  |                                            P_SECTOR_BUFFER p_sector_data);
                             4329 ; 532  |//#endif // k_opt_performance_enhancement
                             4330 ; 533  |
                             4331 ; 534  |
                             4332 ; 535  |RETCODE _reentrant NANDDataDriveReadSector(
                             4333 ; 536  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor,
                             4334 ; 537  |    DWORD dwSectorNumber,
                             4335 ; 538  |    P_SECTOR_BUFFER pSectorData);
                             4336 ; 539  |
                             4337 ; 540  |
                             4338 ; 541  |RETCODE NANDDataDriveCopySectors(P_NAND_REGION_INFO pRegion, 
                             4339 ; 542  |                                 WORD wSrcBlkAddr, 
                             4340 ; 543  |                                 WORD wSrcSectorIdx, 
                             4341 ; 544  |                                 WORD wDestBlkAddr, 
                             4342 ; 545  |                                 WORD wDestSectorIdx, 
                             4343 ; 546  |                                 WORD wNumSectorsToCopy);
                             4344 ; 547  |
                             4345 ; 548  |_reentrant BOOL NANDDataDriveAsyncEraseUBlkCallback(int iStatus, void *pObj);
                             4346 ; 549  |
                             4347 ; 550  |// Garbage Collecotr API
                             4348 ; 551  |RETCODE NANDForegroundGarbageCollector(P_LOGICAL_DRIVE_DESCRIPTOR pLogicalDataDrive);
                             4349 ; 552  |RETCODE NANDBackgroundGarbageCollector(P_LOGICAL_DRIVE_DESCRIPTOR pLogicalDataDrive);
                             4350 ; 553  |RETCODE NANDBackgroundGarbageCollectorEnable(P_LOGICAL_DRIVE_DESCRIPTOR pLogicalDataDrive)
                                  ;
                             4351 ; 554  |RETCODE NANDBackgroundGarbageCollectorDisable(P_LOGICAL_DRIVE_DESCRIPTOR pLogicalDataDrive
                                  );
                             4352 ; 555  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4353 ; 556  |
                             4354 ; 557  |
                             4355 ; 558  |///////////////////////////////////////////////////////////////////////////////
                             4356 ; 559  |// Global variables
                             4357 ; 560  |///////////////////////////////////////////////////////////////////////////////
                             4358 ; 561  |extern BOOL g_bMultiWriteStarted;
                             4359 
                             4361 
                             4362 ; 562  |extern NAND_DATA_DRIVE_INFO g_NANDDriveInfo[];
                             4363 
                             4365 
                             4366 ; 563  |
                             4367 ; 564  |
                             4368 ; 565  |
                             4369 ; 566  |extern NAND_REGION_INFO                g_aInternalNANDRegionInfoStructs[];
                             4370 ; 567  |extern int                             g_iMaxNANDRegions;
                             4371 ; 568  |
                             4372 ; 569  |extern P_NAND_REGION_INFO              g_apInternalDataDriveRegions[];
                             4373 ; 570  |extern P_NAND_REGION_INFO              g_apInternalHiddenDriveRegion[];
                             4374 ; 571  |extern int                             g_iMaxNANDDataDriveRegions;
                             4375 ; 572  |
                             4376 ; 573  |extern NAND_BBTABLE_ENTRY              g_aInternalNANDMasterBBTable[];
                             4377 ; 574  |extern int                             g_iMaxNANDBadBlocks;
                             4378 
                             4380 
                             4381 ; 575  |
                             4382 ; 576  |extern NAND_UPDATES_ENTRY              g_aInternalNANDMasterUpdatesTable[];
                             4383 ; 577  |extern int                             g_iMaxNANDUpdateBlocks;
                             4384 ; 578  |
                             4385 ; 579  |extern WORD                            g_UpdateSectorsMapsMemory[];
                             4386 ; 580  |extern int                             g_iMaxWORDsForUpdateSectorsMaps;
                             4387 ; 581  |
                             4388 ; 582  |    #ifdef NDD_COUNT_ROUTINES
                             4389 ; 583  |extern NDD_ROUTINE_COUNT               g_NddRoutineCount;
                             4390 ; 584  |    #endif
                             4391 ; 585  |
                             4392 ; 586  |/////////////////////////////////////////////////////////////////////////////////
                             4393 ; 587  |//  TEST CODE
                             4394 ; 588  |/////////////////////////////////////////////////////////////////////////////////
                             4395 ; 589  |
                             4396 ; 590  |typedef enum {
                             4397 ; 591  |  USECTORS_TEST_NO_SECTORS,
                             4398 ; 592  |  USECTORS_TEST_FIRST_HSECTOR,
                             4399 ; 593  |  USECTORS_TEST_LAST_HSECTOR,
                             4400 ; 594  |  USECTORS_TEST_MIDDLE_HSECTOR,
                             4401 ; 595  |  USECTORS_TEST_ALL_HSECTORS,
                             4402 ; 596  |  USECTORS_TEST_HALF_HSECTORS,
                             4403 ; 597  |  USECTORS_TEST_FAIL
                             4404 ; 598  |} USECTORS_TEST;
                             4405 ; 599  |
                             4406 ; 600  |// TT - use MJ's method to debug MultiWrites. 
                             4407 ; 601  |// JN: Change default to undefined by commenting line below.
                             4408 ; 602  |//  #define DEBUG_MULTIWRITE 1
                             4409 ; 603  |  #ifdef DEBUG_MULTIWRITE
                             4410 ; 604  |    #define DebugMultiWrite() SystemHalt()
                             4411 ; 605  |  #else
                             4412 ; 606  |    #define DebugMultiWrite()
                             4413 ; 607  |  #endif
                             4414 
                             4424 
                             4425 ; 608  |
                             4426 ; 609  |extern USECTORS_TEST g_eUSECTORS_TEST;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4427 
                             4432 
                             4433 ; 610  |extern ASYNC_ERASE_CALLBACK_PARAMS g_AsyncEraseCallBackParam;
                             4434 ; 611  |
                             4435 ; 612  |// Must be a power of 2
                             4436 ; 613  |#define MAX_MULTI_WRITE_INFO    8
                             4437 ; 614  |#define MULTI_WRITE_FIFO_MODULO (MAX_MULTI_WRITE_INFO-1)
                             4438 ; 615  |
                             4439 ; 616  |typedef enum {
                             4440 ; 617  |    MultiWriteBlockTypeHBlock = 0,
                             4441 ; 618  |    MultiWriteBlockTypeUBlock = 1,
                             4442 ; 619  |    MultiWriteBlockTypeRBlock = 2
                             4443 ; 620  |} MULTI_WRITE_BLOCK_TYPE;
                             4444 ; 621  |    
                             4445 ; 622  |typedef enum {
                             4446 ; 623  |    MultiWritePipelineSectorFree = 0,
                             4447 ; 624  |    MultiWritePipelineSectorEccInProgress = 1,
                             4448 ; 625  |    MultiWritePipelineSectorDmaInProgress = 2,
                             4449 ; 626  |    MultiWritePipelineSectorProgramInProgress = 3,
                             4450 ; 627  |    MultiWritePipelineSectorReleasePending = 4
                             4451 ; 628  |} MULTI_WRITE_SECTOR_STATUS, * P_MULTI_WRITE_SECTOR_STATUS;
                             4452 
                             4463 
                             4464 ; 629  |
                             4465 ; 630  |typedef struct {
                             4466 ; 631  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor;
                             4467 ; 632  |    P_NAND_MEDIA_INFO pNandMediaInfo;
                             4468 ; 633  |    P_NAND_DATA_DRIVE_INFO pNandDriveInfo;
                             4469 ; 634  |    P_NAND_PHYSICAL_MEDIA_DESCRIPTOR pNANDDesc;
                             4470 ; 635  |    P_NAND_PARAMETERS_DESCRIPTOR pNANDParms;
                             4471 ; 636  |    P_NANDHAL_API_DESCRIPTOR pNandHalApi;
                             4472 ; 637  |    DWORD dwSectorNumber;
                             4473 ; 638  |    P_SECTOR_BUFFER pSectorData;
                             4474 ; 639  |    LONG lCallBackParameter;
                             4475 ; 640  |    // also need the block number?
                             4476 ; 641  |    MULTI_WRITE_SECTOR_STATUS eStatus;
                             4477 ; 642  |    RETCODE rtCode;
                             4478 ; 643  |} MULTI_WRITE_INFO, * P_MULTI_WRITE_INFO;
                             4479 ; 644  |
                             4480 ; 645  |typedef RETCODE (*DUMB_MULTIWRITE_PIPELINE_FUNCTION)(void);
                             4481 ; 646  |
                             4482 ; 647  |//#define DEBUG_MWRITE_CACHE 1
                             4483 ; 648  |#ifdef DEBUG_MWRITE_CACHE
                             4484 ; 649  |    #define DebugMwriteCache() SystemHalt()
                             4485 ; 650  |#else
                             4486 ; 651  |    #define DebugMwriteCache()
                             4487 ; 652  |#endif
                             4488 ; 653  |
                             4489 ; 654  |RETCODE _reentrant NANDDataDriveRecoverMultiWriteBlock(void);
                             4490 ; 655  |RETCODE _reentrant MultiWriteSectorRelease(
                             4491 ; 656  |    WORD wOffset,
                             4492 ; 657  |    RETCODE rtCode);
                             4493 
                             4509 
                             4510 ; 658  |RETCODE _reentrant MultiWriteCreateSectorInfo(P_MULTI_WRITE_INFO *hMultiWriteSectorInfo);
                             4511 ; 659  |RETCODE _reentrant MultiWriteRemoveSectorInfo(void);
                             4512 ; 660  |RETCODE _reentrant MultiWriteFetchSectorInfo(
                             4513 ; 661  |    WORD wOffset,
                             4514 ; 662  |    P_MULTI_WRITE_INFO * hMultiWriteSectorInfo);
                             4515 ; 663  |RETCODE _reentrant MWDCleanupFatalError(
                             4516 ; 664  |    BOOL bCallBacks,
                             4517 ; 665  |    LONG lCallBackParam);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4518 ; 666  |
                             4519 ; 667  |#endif // #ifndef _NANDDATADRIVE_H
                             4520 
                             4522 
                             4523 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4524 ; 6    |// Copyright(C) SigmaTel, Inc. 2000-2005
                             4525 ; 7    |//
                             4526 ; 8    |// Filename: nandmediadefaults.c 
                             4527 ; 9    |// Description: Project-specific definitions and declarations for 
                             4528 ; 10   |//              Internal NAND Media DDI
                             4529 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             4530 ; 12   |
                             4531 ; 13   |
                             4532 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             4533 ; 15   |// The global arrays below are referenced by MediaDiscoverAllocation(), and 
                             4534 ; 16   |// pointers to them  are stuffed into the NAND_MEDIA_INFO structure for the Internal 
                             4535 ; 17   |// NAND DDI. Their names are CRITICAL.
                             4536 ; 18   |//
                             4537 ; 19   |// The other globals below make the project-specific MAX sizes available to the 
                             4538 ; 20   |// library routines.  Their names are CRITICAL.
                             4539 ; 21   |/////////////////////////////////////////////////////////////////////////////////
                             4540 ; 22   |/* The following have moved to nandhalproject.c:
                             4541 ; 23   |
                             4542 ; 24   |NAND_PHYSICAL_MEDIA_DESCRIPTOR         g_aInternalNANDDescriptors[MAX_NAND_CHIPS];
                             4543 ; 25   |int                                    g_iMaxNANDChips = MAX_NAND_CHIPS;
                             4544 ; 26   |
                             4545 ; 27   |*/
                             4546 ; 28   |
                             4547 ; 29   |/* The following was folded into the MEDIA_INFO structure, always having 4 entries.
                             4548 ; 30   |int                                    g_aiConfigBlkPhysAddr[MAX_NAND_CHIPS];
                             4549 ; 31   |*/
                             4550 ; 32   |
                             4551 ; 33   |
                             4552 ; 34   |NAND_REGION_INFO                       g_aInternalNANDRegionInfoStructs[MAX_NAND_REGIONS];
                                  
                             4553 ; 35   |int                                    g_iMaxNANDRegions = MAX_NAND_REGIONS;
                             4554 
                             4555 
Y:0000                       4556         org     y,".ydatanandmediadefaults",init:
                             4557 Fg_iMaxNANDRegions:
Y:0000 000012                4558         dc      $000012
                             4561 
                             4562 ; 36   |
                             4563 ; 37   |P_NAND_REGION_INFO                     g_apInternalDataDriveRegions[MAX_DATA_DRIVE_REGIONS
                                  ];
                             4564 ; 38   |P_NAND_REGION_INFO                     g_apInternalHiddenDriveRegion[1];
                             4565 ; 39   |
                             4566 ; 40   |int                                    g_iMaxNANDDataDriveRegions = MAX_DATA_DRIVE_REGIONS
                                  ;
                             4567 
                             4568 Fg_iMaxNANDDataDriveRegions:
Y:0001 000008                4569         dc      $000008
                             4572 
                             4573 ; 41   |
                             4574 ; 42   |
                             4575 ; 43   |
                             4576 ; 44   |WORD                                   g_NANDDataDriveNumFreshListees = NUM_FRESH_LISTEES;
                                  
                             4577 
                             4578 Fg_NANDDataDriveNumFreshListees:
Y:0002 000006                4579         dc      $000006
                             4582 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4583 ; 45   |
                             4584 ; 46   |
                             4585 ; 47   |/*
                             4586 ; 48   |NAND_PARAMETERS_DESCRIPTOR             g_InternalNANDSharedNANDParams;              // Thi
                                  s doesn't have to be a Project struct
                             4587 ; 49   |*/
                             4588 ; 50   |
                             4589 ; 51   |WORD                                   g_NANDDataDriveFreshList[MAX_DATA_DRIVE_REGIONS*NUM
                                  _FRESH_LISTEES];
                             4590 ; 52   |WORD                                   g_NANDHiddenDriveFreshList[NUM_FRESH_LISTEES];
                             4591 ; 53   |NAND_BBTABLE_ENTRY                     g_aInternalNANDMasterBBTable[MAX_NAND_BAD_BLOCKS];
                             4592 ; 54   |int                                    g_iMaxNANDBadBlocks = MAX_NAND_BAD_BLOCKS;
                             4593 
                             4594 Fg_iMaxNANDBadBlocks:
Y:0003 0000E0                4595         dc      $0000e0
                             4598 
                             4599 ; 55   |
                             4600 ; 56   |
                             4601 ; 57   |// TBD: In many cases, the number of cells allocated in the Master Updates Table will
                             4602 ; 58   |// be more than is needed, because the number of actual Data Drive Regions will be less
                             4603 ; 59   |// than the maximum allowed (because there are fewer than the maximum number of chips
                             4604 ; 60   |// or regions per chip).  In this case, the extra space, allocated below, is wasted.
                             4605 ; 61   |//
                             4606 ; 62   |// It would be nice to allow that extra space to be used to increase the Update Sectors
                             4607 ; 63   |// Map memory, to allow more USectorsMaps wo reside in RAM at the same time.  This should
                             4608 ; 64   |// improve write performance, when you're skipping around a lot on the NANDs.
                             4609 ; 65   |NAND_UPDATES_ENTRY                     g_aInternalNANDMasterUpdatesTable[MAX_UPDATE_BLOCKS
                                  ];
                             4610 
                             4612 
                             4613 ; 66   |//WORD                                   g_wGuardWordToCheckOflow=0xeedeaf; // comment out
                                   unless debugging
                             4614 ; 67   |
                             4615 ; 68   |WORD                                   g_UpdateSectorsMapsMemory[MAX_WORDS_FOR_UPDATE_SECT
                                  OR_MAPS];
                             4616 ; 69   |
                             4617 ; 70   |#ifdef MMC
                             4618 ; 71   |NAND_DATA_DRIVE_INFO                   g_NANDDriveInfo[3];      //CHANGE FROM 2 TO 3 taken
                                   care of janus drive in MMC build
                             4619 ; 72   |#else
                             4620 ; 73   |NAND_DATA_DRIVE_INFO                   g_NANDDriveInfo[2];      //non MMC
                             4621 ; 74   |#endif
                             4622 ; 75   |
                             4623 ; 76   |P_UPDATE_SECTORS_MAP_DESCRIPTOR        g_pUpdateSectorsMapsMemory = (P_UPDATE_SECTORS_MAP_
                                  DESCRIPTOR)g_UpdateSectorsMapsMemory;
                             4624 
                             4625 Fg_pUpdateSectorsMapsMemory:
Y:0004 rrrrrr                4626         dc      Fg_UpdateSectorsMapsMemory
                             4629 
                             4630 ; 77   |int                                    g_iMaxNANDUpdateBlocks = MAX_UPDATE_BLOCKS;
                             4631 
                             4632 Fg_iMaxNANDUpdateBlocks:
Y:0005 00011F                4633         dc      $00011f
                             4636 
                             4637 ; 78   |int                                    g_iMaxWORDsForUpdateSectorsMaps = MAX_WORDS_FOR_UPD
                                  ATE_SECTOR_MAPS;
                             4638 
                             4639 Fg_iMaxWORDsForUpdateSectorsMaps:
Y:0006 00021C                4640         dc      $00021c
                             4643 
                             4644 ; 79   |
                             4645 ; 80   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4646 ; 81   |FLOAT g_fMinFractionRBlocks = FRACTION_RBLOCKS;
                             4647 
                             4648 Fg_fMinFractionRBlocks:
Y:0007 00007A 666666         4649         dc      $00007a,$666666
                             4652 
                             4653 ; 82   |
                             4654 ; 83   |
                             4655 ; 84   |INT g_iMinSpareRBlocksPerRegion = MIN_SPARE_RBLOCKS_PER_REGION;
                             4656 
                             4657 Fg_iMinSpareRBlocksPerRegion:
Y:0009 000004                4658         dc      $000004
                             4661 
                             4662 ; 85   |INT g_MaxAvgUBlksPerRegion = AVG_UPDATE_BLOCKS_PER_REGION;
                             4663 
                             4664 Fg_MaxAvgUBlksPerRegion:
Y:000A 00001F                4665         dc      $00001f
                             4668 
                             4669 ; 86   |INT g_MinUBlksPerRegion = MIN_UPDATE_BLOCKS_PER_REGION;
                             4670 
                             4671 Fg_MinUBlksPerRegion:
Y:000B 000004                4672         dc      $000004
                             4675 
                             4676 ; 87   |INT g_MinDataDriveSize = MIN_DATA_DRIVE_SIZE;
                             4677 
                             4678 Fg_MinDataDriveSize:
Y:000C 000010                4679         dc      $000010
                             4682 
                             4683 ; 88   |FLOAT g_fHiddenDriveFraction = HIDDEN_DRIVE_PERCENTAGE;
                             4684 
                             4685 Fg_fHiddenDriveFraction:
Y:000D 000000 000000         4686         dc      $000000,$000000
                             4689 
                             4690 ; 89   |
                             4691 ; 90   |
                             4692 ; 91   |// Renesas NAND uses the WP# line to drive both the WP# and RES# lines.  If
                             4693 ; 92   |// this behavior is not desired, change the following line to FALSE.
                             4694 ; 93   |// Note - parts other than Renesas are not affected by this flag.
                             4695 ; 94   |#define USE_WP_FOR_RESET    TRUE
                             4696 ; 95   |WORD g_UseWP_asRenesasReset = USE_WP_FOR_RESET;
                             4697 
                             4698 Fg_UseWP_asRenesasReset:
Y:000F 000001                4699         dc      $000001
                             4702 
                             4703 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                             4704 ; 97   |/////////////////////////////////////////////////////////////////////////////////
                             4705 ; 98   |/////////////////////////////////////////////////////////////////////////////////
                             4706 ; 99   |
                             4707 ; 100  |
                             4708 
                             4710 
                             4714 
Y:0000                       4715         org     y,".ybssnandmediadefaults",bss:
                             4716 Fg_apInternalDataDriveRegions:
Y:0000                       4717         ds      8
   |   RESERVED                   
Y:0007
                             4721 Fg_aInternalNANDMasterBBTable:
Y:0008                       4722         ds      224
   |   RESERVED                   
Y:00E7
                             4726 Fg_aInternalNANDMasterUpdatesTable:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
Y:00E8                       4727         ds      287
   |   RESERVED                   
Y:0206
                             4731 Fg_NANDDataDriveFreshList:
Y:0207                       4732         ds      48
   |   RESERVED                   
Y:0236
                             4736 Fg_UpdateSectorsMapsMemory:
Y:0237                       4737         ds      540
   |   RESERVED                   
Y:0452
                             4741 Fg_aInternalNANDRegionInfoStructs:
Y:0453                       4742         ds      468
   |   RESERVED                   
Y:0626
                             4746 Fg_apInternalHiddenDriveRegion:
Y:0627 RESERVED              4747         ds      1
Y:0627
                             4751 Fg_NANDHiddenDriveFreshList:
Y:0628                       4752         ds      6
   |   RESERVED                   
Y:062D
                             4756 Fg_NANDDriveInfo:
Y:062E                       4757         ds      15
   |   RESERVED                   
Y:063C
                             4758 
                             4759         global  Fg_MaxAvgUBlksPerRegion, Fg_MinDataDriveSize
                             4760         global  Fg_MinUBlksPerRegion, Fg_NANDDataDriveFreshList
                             4761         global  Fg_NANDDataDriveNumFreshListees, Fg_NANDDriveInfo
                             4762         global  Fg_NANDHiddenDriveFreshList, Fg_UpdateSectorsMapsMemory
                             4763         global  Fg_UseWP_asRenesasReset, Fg_aInternalNANDMasterBBTable
                             4764         global  Fg_aInternalNANDMasterUpdatesTable
                             4765         global  Fg_aInternalNANDRegionInfoStructs
                             4766         global  Fg_apInternalDataDriveRegions
                             4767         global  Fg_apInternalHiddenDriveRegion, Fg_fHiddenDriveFraction
                             4768         global  Fg_fMinFractionRBlocks, Fg_iMaxNANDBadBlocks
                             4769         global  Fg_iMaxNANDDataDriveRegions, Fg_iMaxNANDRegions
                             4770         global  Fg_iMaxNANDUpdateBlocks, Fg_iMaxWORDsForUpdateSectorsMaps
                             4771         global  Fg_iMinSpareRBlocksPerRegion, Fg_pUpdateSectorsMapsMemory
                             4772 
