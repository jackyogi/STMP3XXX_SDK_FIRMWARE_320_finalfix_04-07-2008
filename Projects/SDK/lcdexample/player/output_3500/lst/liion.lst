TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfd23ab.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;        liion.c:
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                               98 ; 3    |//
                               99 ; 4    |// Filename: liion.c
                              100 ; 5    |// Description: The lithium  ion specific implementation of the battery charging 
                              101 ; 6    |//              algorithms
                              102 ; 7    |////////////////////////////////////////////////////////////////////////////////
                              103 ; 8    |
                              104 ; 9    |
                              105 ; 10   |////////////////////////////////////////////////////////////////////////////////
                              106 ; 11   |//   Includes and external references
                              107 ; 12   |////////////////////////////////////////////////////////////////////////////////
                              108 ; 13   |#include "types.h"
                              109 
                              111 
                              112 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              113 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              114 ; 3    |//
                              115 ; 4    |// Filename: types.h
                              116 ; 5    |// Description: Standard data types
                              117 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              118 ; 7    |
                              119 ; 8    |#ifndef _TYPES_H
                              120 ; 9    |#define _TYPES_H
                              121 ; 10   |
                              122 ; 11   |// TODO:  move this outta here!
                              123 ; 12   |#if !defined(NOERROR)
                              124 ; 13   |#define NOERROR 0
                              125 ; 14   |#define SUCCESS 0
                              126 ; 15   |#endif 
                              127 ; 16   |#if !defined(SUCCESS)
                              128 ; 17   |#define SUCCESS  0
                              129 ; 18   |#endif
                              130 ; 19   |#if !defined(ERROR)
                              131 ; 20   |#define ERROR   -1
                              132 ; 21   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 22   |#if !defined(FALSE)
                              134 ; 23   |#define FALSE 0
                              135 ; 24   |#endif
                              136 ; 25   |#if !defined(TRUE)
                              137 ; 26   |#define TRUE  1
                              138 ; 27   |#endif
                              139 ; 28   |
                              140 ; 29   |#if !defined(NULL)
                              141 ; 30   |#define NULL 0
                              142 ; 31   |#endif
                              143 ; 32   |
                              144 ; 33   |#define MAX_INT     0x7FFFFF
                              145 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              146 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              147 ; 36   |#define MAX_ULONG   (-1) 
                              148 ; 37   |
                              149 ; 38   |#define WORD_SIZE   24              // word size in bits
                              150 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              151 ; 40   |
                              152 ; 41   |
                              153 ; 42   |#define BYTE    unsigned char       // btVarName
                              154 ; 43   |#define CHAR    signed char         // cVarName
                              155 ; 44   |#define USHORT  unsigned short      // usVarName
                              156 ; 45   |#define SHORT   unsigned short      // sVarName
                              157 ; 46   |#define WORD    unsigned int        // wVarName
                              158 ; 47   |#define INT     signed int          // iVarName
                              159 ; 48   |#define DWORD   unsigned long       // dwVarName
                              160 ; 49   |#define LONG    signed long         // lVarName
                              161 ; 50   |#define BOOL    unsigned int        // bVarName
                              162 ; 51   |#define FRACT   _fract              // frVarName
                              163 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              164 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              165 ; 54   |#define FLOAT   float               // fVarName
                              166 ; 55   |#define DBL     double              // dVarName
                              167 ; 56   |#define ENUM    enum                // eVarName
                              168 ; 57   |#define CMX     _complex            // cmxVarName
                              169 ; 58   |typedef WORD UCS3;                   // 
                              170 ; 59   |
                              171 ; 60   |#define UINT16  unsigned short
                              172 ; 61   |#define UINT8   unsigned char   
                              173 ; 62   |#define UINT32  unsigned long
                              174 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              175 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              176 ; 65   |#define WCHAR   UINT16
                              177 ; 66   |
                              178 ; 67   |//UINT128 is 16 bytes or 6 words
                              179 ; 68   |typedef struct UINT128_3500 {   
                              180 ; 69   |    int val[6];     
                              181 ; 70   |} UINT128_3500;
                              182 ; 71   |
                              183 ; 72   |#define UINT128   UINT128_3500
                              184 ; 73   |
                              185 ; 74   |// Little endian word packed byte strings:   
                              186 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              187 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              188 ; 77   |// Little endian word packed byte strings:   
                              189 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              190 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              191 ; 80   |
                              192 ; 81   |// Declare Memory Spaces To Use When Coding
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              193 ; 82   |// A. Sector Buffers
                              194 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              195 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              196 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              197 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              198 
                              200 
                              201 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              202 ; 88   |// B. Media DDI Memory
                              203 ; 89   |#define MEDIA_DDI_MEM _Y
                              204 ; 90   |
                              205 ; 91   |
                              206 ; 92   |
                              207 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              208 ; 94   |// Examples of circular pointers:
                              209 ; 95   |//    INT CIRC cpiVarName
                              210 ; 96   |//    DWORD CIRC cpdwVarName
                              211 ; 97   |
                              212 ; 98   |#define RETCODE INT                 // rcVarName
                              213 ; 99   |
                              214 ; 100  |// generic bitfield structure
                              215 ; 101  |struct Bitfield {
                              216 ; 102  |    unsigned int B0  :1;
                              217 ; 103  |    unsigned int B1  :1;
                              218 ; 104  |    unsigned int B2  :1;
                              219 ; 105  |    unsigned int B3  :1;
                              220 ; 106  |    unsigned int B4  :1;
                              221 ; 107  |    unsigned int B5  :1;
                              222 ; 108  |    unsigned int B6  :1;
                              223 ; 109  |    unsigned int B7  :1;
                              224 ; 110  |    unsigned int B8  :1;
                              225 ; 111  |    unsigned int B9  :1;
                              226 ; 112  |    unsigned int B10 :1;
                              227 ; 113  |    unsigned int B11 :1;
                              228 ; 114  |    unsigned int B12 :1;
                              229 ; 115  |    unsigned int B13 :1;
                              230 ; 116  |    unsigned int B14 :1;
                              231 ; 117  |    unsigned int B15 :1;
                              232 ; 118  |    unsigned int B16 :1;
                              233 ; 119  |    unsigned int B17 :1;
                              234 ; 120  |    unsigned int B18 :1;
                              235 ; 121  |    unsigned int B19 :1;
                              236 ; 122  |    unsigned int B20 :1;
                              237 ; 123  |    unsigned int B21 :1;
                              238 ; 124  |    unsigned int B22 :1;
                              239 ; 125  |    unsigned int B23 :1;
                              240 ; 126  |};
                              241 ; 127  |
                              242 ; 128  |union BitInt {
                              243 ; 129  |        struct Bitfield B;
                              244 ; 130  |        int        I;
                              245 ; 131  |};
                              246 ; 132  |
                              247 ; 133  |#define MAX_MSG_LENGTH 10
                              248 ; 134  |struct CMessage
                              249 ; 135  |{
                              250 ; 136  |        unsigned int m_uLength;
                              251 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              252 ; 138  |};
                              253 ; 139  |
                              254 ; 140  |typedef struct {
                              255 ; 141  |    WORD m_wLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 142  |    WORD m_wMessage;
                              257 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              258 ; 144  |} Message;
                              259 ; 145  |
                              260 ; 146  |struct MessageQueueDescriptor
                              261 ; 147  |{
                              262 ; 148  |        int *m_pBase;
                              263 ; 149  |        int m_iModulo;
                              264 ; 150  |        int m_iSize;
                              265 ; 151  |        int *m_pHead;
                              266 ; 152  |        int *m_pTail;
                              267 ; 153  |};
                              268 ; 154  |
                              269 ; 155  |struct ModuleEntry
                              270 ; 156  |{
                              271 ; 157  |    int m_iSignaledEventMask;
                              272 ; 158  |    int m_iWaitEventMask;
                              273 ; 159  |    int m_iResourceOfCode;
                              274 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              275 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              276 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              277 ; 163  |    int m_uTimeOutHigh;
                              278 ; 164  |    int m_uTimeOutLow;
                              279 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              280 ; 166  |};
                              281 ; 167  |
                              282 ; 168  |union WaitMask{
                              283 ; 169  |    struct B{
                              284 ; 170  |        unsigned int m_bNone     :1;
                              285 ; 171  |        unsigned int m_bMessage  :1;
                              286 ; 172  |        unsigned int m_bTimer    :1;
                              287 ; 173  |        unsigned int m_bButton   :1;
                              288 ; 174  |    } B;
                              289 ; 175  |    int I;
                              290 ; 176  |} ;
                              291 ; 177  |
                              292 ; 178  |
                              293 ; 179  |struct Button {
                              294 ; 180  |        WORD wButtonEvent;
                              295 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              296 ; 182  |};
                              297 ; 183  |
                              298 ; 184  |struct Message {
                              299 ; 185  |        WORD wMsgLength;
                              300 ; 186  |        WORD wMsgCommand;
                              301 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              302 ; 188  |};
                              303 ; 189  |
                              304 ; 190  |union EventTypes {
                              305 ; 191  |        struct CMessage msg;
                              306 ; 192  |        struct Button Button ;
                              307 ; 193  |        struct Message Message;
                              308 ; 194  |};
                              309 ; 195  |
                              310 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              311 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              312 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              313 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              314 ; 200  |
                              315 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              316 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              317 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              318 ; 204  |
                              319 ; 205  |#if DEBUG
                              320 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              321 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              322 ; 208  |#else 
                              323 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              324 ; 210  |#define DebugBuildAssert(x)    
                              325 ; 211  |#endif
                              326 ; 212  |
                              327 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              328 ; 214  |//  #pragma asm
                              329 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              330 ; 216  |//  #pragma endasm
                              331 ; 217  |
                              332 ; 218  |
                              333 ; 219  |#ifdef COLOR_262K
                              334 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              335 ; 221  |#elif defined(COLOR_65K)
                              336 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              337 ; 223  |#else
                              338 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              339 ; 225  |#endif
                              340 ; 226  |    
                              341 ; 227  |#endif // #ifndef _TYPES_H
                              342 
                              344 
                              345 ; 14   |#include "project.h"
                              346 
                              348 
                              349 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              350 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              351 ; 3    |//  Filename: project.inc
                              352 ; 4    |//  Description: 
                              353 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              354 ; 6    |
                              355 ; 7    |#if (!defined(_PROJECT_INC))
                              356 ; 8    |#define _PROJECT_INC 1
                              357 ; 9    |
                              358 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              359 ; 11   |#include "hwequ.h"
                              360 
                              362 
                              363 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              364 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                              365 ; 3    |//  File        : hwequ.inc
                              366 ; 4    |//  Description : STMP Hardware Constants
                              367 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              368 ; 6    |
                              369 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                              370 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                              371 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                              372 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                              373 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                              374 ; 12   |
                              375 ; 13   |#if (!defined(HWEQU_INC))
                              376 ; 14   |#define HWEQU_INC 1
                              377 ; 15   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              378 ; 16   |#include "types.h"
                              379 
                              381 
                              382 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              383 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              384 ; 3    |//
                              385 ; 4    |// Filename: types.h
                              386 ; 5    |// Description: Standard data types
                              387 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              388 ; 7    |
                              389 ; 8    |#ifndef _TYPES_H
                              390 ; 9    |#define _TYPES_H
                              391 ; 10   |
                              392 ; 11   |// TODO:  move this outta here!
                              393 ; 12   |#if !defined(NOERROR)
                              394 ; 13   |#define NOERROR 0
                              395 ; 14   |#define SUCCESS 0
                              396 ; 15   |#endif 
                              397 ; 16   |#if !defined(SUCCESS)
                              398 ; 17   |#define SUCCESS  0
                              399 ; 18   |#endif
                              400 ; 19   |#if !defined(ERROR)
                              401 ; 20   |#define ERROR   -1
                              402 ; 21   |#endif
                              403 ; 22   |#if !defined(FALSE)
                              404 ; 23   |#define FALSE 0
                              405 ; 24   |#endif
                              406 ; 25   |#if !defined(TRUE)
                              407 ; 26   |#define TRUE  1
                              408 ; 27   |#endif
                              409 ; 28   |
                              410 ; 29   |#if !defined(NULL)
                              411 ; 30   |#define NULL 0
                              412 ; 31   |#endif
                              413 ; 32   |
                              414 ; 33   |#define MAX_INT     0x7FFFFF
                              415 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              416 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              417 ; 36   |#define MAX_ULONG   (-1) 
                              418 ; 37   |
                              419 ; 38   |#define WORD_SIZE   24              // word size in bits
                              420 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              421 ; 40   |
                              422 ; 41   |
                              423 ; 42   |#define BYTE    unsigned char       // btVarName
                              424 ; 43   |#define CHAR    signed char         // cVarName
                              425 ; 44   |#define USHORT  unsigned short      // usVarName
                              426 ; 45   |#define SHORT   unsigned short      // sVarName
                              427 ; 46   |#define WORD    unsigned int        // wVarName
                              428 ; 47   |#define INT     signed int          // iVarName
                              429 ; 48   |#define DWORD   unsigned long       // dwVarName
                              430 ; 49   |#define LONG    signed long         // lVarName
                              431 ; 50   |#define BOOL    unsigned int        // bVarName
                              432 ; 51   |#define FRACT   _fract              // frVarName
                              433 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              434 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              435 ; 54   |#define FLOAT   float               // fVarName
                              436 ; 55   |#define DBL     double              // dVarName
                              437 ; 56   |#define ENUM    enum                // eVarName
                              438 ; 57   |#define CMX     _complex            // cmxVarName
                              439 ; 58   |typedef WORD UCS3;                   // 
                              440 ; 59   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              441 ; 60   |#define UINT16  unsigned short
                              442 ; 61   |#define UINT8   unsigned char   
                              443 ; 62   |#define UINT32  unsigned long
                              444 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              445 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              446 ; 65   |#define WCHAR   UINT16
                              447 ; 66   |
                              448 ; 67   |//UINT128 is 16 bytes or 6 words
                              449 ; 68   |typedef struct UINT128_3500 {   
                              450 ; 69   |    int val[6];     
                              451 ; 70   |} UINT128_3500;
                              452 ; 71   |
                              453 ; 72   |#define UINT128   UINT128_3500
                              454 ; 73   |
                              455 ; 74   |// Little endian word packed byte strings:   
                              456 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              457 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              458 ; 77   |// Little endian word packed byte strings:   
                              459 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              460 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              461 ; 80   |
                              462 ; 81   |// Declare Memory Spaces To Use When Coding
                              463 ; 82   |// A. Sector Buffers
                              464 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              465 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              466 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              467 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              468 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              469 ; 88   |// B. Media DDI Memory
                              470 ; 89   |#define MEDIA_DDI_MEM _Y
                              471 ; 90   |
                              472 ; 91   |
                              473 ; 92   |
                              474 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              475 ; 94   |// Examples of circular pointers:
                              476 ; 95   |//    INT CIRC cpiVarName
                              477 ; 96   |//    DWORD CIRC cpdwVarName
                              478 ; 97   |
                              479 ; 98   |#define RETCODE INT                 // rcVarName
                              480 ; 99   |
                              481 ; 100  |// generic bitfield structure
                              482 ; 101  |struct Bitfield {
                              483 ; 102  |    unsigned int B0  :1;
                              484 ; 103  |    unsigned int B1  :1;
                              485 ; 104  |    unsigned int B2  :1;
                              486 ; 105  |    unsigned int B3  :1;
                              487 ; 106  |    unsigned int B4  :1;
                              488 ; 107  |    unsigned int B5  :1;
                              489 ; 108  |    unsigned int B6  :1;
                              490 ; 109  |    unsigned int B7  :1;
                              491 ; 110  |    unsigned int B8  :1;
                              492 ; 111  |    unsigned int B9  :1;
                              493 ; 112  |    unsigned int B10 :1;
                              494 ; 113  |    unsigned int B11 :1;
                              495 ; 114  |    unsigned int B12 :1;
                              496 ; 115  |    unsigned int B13 :1;
                              497 ; 116  |    unsigned int B14 :1;
                              498 ; 117  |    unsigned int B15 :1;
                              499 ; 118  |    unsigned int B16 :1;
                              500 ; 119  |    unsigned int B17 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              501 ; 120  |    unsigned int B18 :1;
                              502 ; 121  |    unsigned int B19 :1;
                              503 ; 122  |    unsigned int B20 :1;
                              504 ; 123  |    unsigned int B21 :1;
                              505 ; 124  |    unsigned int B22 :1;
                              506 ; 125  |    unsigned int B23 :1;
                              507 ; 126  |};
                              508 ; 127  |
                              509 ; 128  |union BitInt {
                              510 ; 129  |        struct Bitfield B;
                              511 ; 130  |        int        I;
                              512 ; 131  |};
                              513 ; 132  |
                              514 ; 133  |#define MAX_MSG_LENGTH 10
                              515 ; 134  |struct CMessage
                              516 ; 135  |{
                              517 ; 136  |        unsigned int m_uLength;
                              518 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              519 ; 138  |};
                              520 ; 139  |
                              521 ; 140  |typedef struct {
                              522 ; 141  |    WORD m_wLength;
                              523 ; 142  |    WORD m_wMessage;
                              524 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              525 ; 144  |} Message;
                              526 ; 145  |
                              527 ; 146  |struct MessageQueueDescriptor
                              528 ; 147  |{
                              529 ; 148  |        int *m_pBase;
                              530 ; 149  |        int m_iModulo;
                              531 ; 150  |        int m_iSize;
                              532 ; 151  |        int *m_pHead;
                              533 ; 152  |        int *m_pTail;
                              534 ; 153  |};
                              535 ; 154  |
                              536 ; 155  |struct ModuleEntry
                              537 ; 156  |{
                              538 ; 157  |    int m_iSignaledEventMask;
                              539 ; 158  |    int m_iWaitEventMask;
                              540 ; 159  |    int m_iResourceOfCode;
                              541 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              542 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              543 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              544 ; 163  |    int m_uTimeOutHigh;
                              545 ; 164  |    int m_uTimeOutLow;
                              546 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              547 ; 166  |};
                              548 ; 167  |
                              549 ; 168  |union WaitMask{
                              550 ; 169  |    struct B{
                              551 ; 170  |        unsigned int m_bNone     :1;
                              552 ; 171  |        unsigned int m_bMessage  :1;
                              553 ; 172  |        unsigned int m_bTimer    :1;
                              554 ; 173  |        unsigned int m_bButton   :1;
                              555 ; 174  |    } B;
                              556 ; 175  |    int I;
                              557 ; 176  |} ;
                              558 ; 177  |
                              559 ; 178  |
                              560 ; 179  |struct Button {
                              561 ; 180  |        WORD wButtonEvent;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              562 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              563 ; 182  |};
                              564 ; 183  |
                              565 ; 184  |struct Message {
                              566 ; 185  |        WORD wMsgLength;
                              567 ; 186  |        WORD wMsgCommand;
                              568 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              569 ; 188  |};
                              570 ; 189  |
                              571 ; 190  |union EventTypes {
                              572 ; 191  |        struct CMessage msg;
                              573 ; 192  |        struct Button Button ;
                              574 ; 193  |        struct Message Message;
                              575 ; 194  |};
                              576 ; 195  |
                              577 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              578 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              579 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              580 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              581 ; 200  |
                              582 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              583 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              584 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              585 ; 204  |
                              586 ; 205  |#if DEBUG
                              587 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              588 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              589 ; 208  |#else 
                              590 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              591 ; 210  |#define DebugBuildAssert(x)    
                              592 ; 211  |#endif
                              593 ; 212  |
                              594 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              595 ; 214  |//  #pragma asm
                              596 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              597 ; 216  |//  #pragma endasm
                              598 ; 217  |
                              599 ; 218  |
                              600 ; 219  |#ifdef COLOR_262K
                              601 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              602 ; 221  |#elif defined(COLOR_65K)
                              603 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              604 ; 223  |#else
                              605 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              606 ; 225  |#endif
                              607 ; 226  |    
                              608 ; 227  |#endif // #ifndef _TYPES_H
                              609 
                              611 
                              612 ; 17   |#include "regsclkctrl.h"
                              613 
                              615 
                              616 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                              617 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                              618 ; 3    |
                              619 ; 4    |
                              620 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              621 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              622 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                              623 ; 8    |#define HW_CCR_LTC_BITPOS 1
                              624 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                              625 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                              626 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                              627 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                              628 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                              629 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                              630 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                              631 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                              632 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                              633 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                              634 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                              635 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                              636 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                              637 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                              638 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                              639 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                              640 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                              641 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                              642 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                              643 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                              644 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                              645 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                              646 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                              647 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                              648 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                              649 ; 34   |
                              650 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                              651 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                              652 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                              653 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                              654 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                              655 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                              656 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                              657 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                              658 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                              659 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                              660 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                              661 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                              662 ; 47   |
                              663 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                              664 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                              665 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                              666 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                              667 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                              668 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                              669 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                              670 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                              671 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                              672 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                              673 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                              674 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                              675 ; 60   |
                              676 ; 61   |typedef union               
                              677 ; 62   |{
                              678 ; 63   |    struct
                              679 ; 64   |    {
                              680 ; 65   |        int CKRST       :1; // Clock Reset
                              681 ; 66   |        int LTC         :1;
                              682 ; 67   |        int PLLEN       :1;
                              683 ; 68   |        int XTLEN       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              684 ; 69   |        int FLB         :1;
                              685 ; 70   |        unsigned ADIV   :3;
                              686 ; 71   |        int CKSRC       :1;
                              687 ; 72   |        unsigned DDIV   :3;
                              688 ; 73   |        unsigned PDIV   :5;
                              689 ; 74   |        int PWDN        :1;
                              690 ; 75   |        int ACKEN       :1;
                              691 ; 76   |        int LOCK        :1;
                              692 ; 77   |        unsigned ADIV1  :3;
                              693 ; 78   |        unsigned DDIV_MSB:1;
                              694 ; 79   |    } B;
                              695 ; 80   |
                              696 ; 81   |    int I;
                              697 ; 82   |    unsigned int U;
                              698 ; 83   |
                              699 ; 84   |} ccr_type;
                              700 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                              701 ; 86   |
                              702 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              703 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                              704 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                              705 ; 90   |#define HW_RCR_SRST_BITPOS 4
                              706 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                              707 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                              708 ; 93   |#define HW_RCR_NMI_BITPOS 10
                              709 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                              710 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                              711 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                              712 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                              713 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                              714 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                              715 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                              716 ; 101  |
                              717 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                              718 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                              719 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                              720 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                              721 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                              722 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                              723 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                              724 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                              725 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                              726 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                              727 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                              728 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                              729 ; 114  |
                              730 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                              731 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                              732 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                              733 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                              734 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                              735 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                              736 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                              737 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                              738 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                              739 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                              740 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                              741 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                              742 ; 127  |
                              743 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                              744 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                              745 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              746 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                              747 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                              748 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                              749 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                              750 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                              751 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                              752 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                              753 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                              754 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                              755 ; 140  |
                              756 ; 141  |typedef union               
                              757 ; 142  |{
                              758 ; 143  |    struct
                              759 ; 144  |   {
                              760 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                              761 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                              762 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                              763 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                              764 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                              765 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                              766 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                              767 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                              768 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                              769 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                              770 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                              771 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                              772 ; 157  |    } B;
                              773 ; 158  |
                              774 ; 159  |    int I;
                              775 ; 160  |    unsigned int U;
                              776 ; 161  |
                              777 ; 162  |} rcr_type;
                              778 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                              779 ; 164  |
                              780 ; 165  |
                              781 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                              782 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                              783 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                              784 ; 169  |
                              785 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                              786 ; 171  |
                              787 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                              788 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                              789 ; 174  |typedef union               
                              790 ; 175  |{
                              791 ; 176  |    struct
                              792 ; 177  |   {
                              793 ; 178  |        int LOW;
                              794 ; 179  |    } B;
                              795 ; 180  |
                              796 ; 181  |    int I;
                              797 ; 182  |    unsigned int U;
                              798 ; 183  |
                              799 ; 184  |} dclkcntl_type;
                              800 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                              801 ; 186  |
                              802 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                              803 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                              804 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                              805 ; 190  |
                              806 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                              807 ; 192  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              808 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS
                                  ) 
                              809 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                              810 ; 195  |typedef union               
                              811 ; 196  |{
                              812 ; 197  |    struct
                              813 ; 198  |   {
                              814 ; 199  |        int HIGH;
                              815 ; 200  |    } B;
                              816 ; 201  |
                              817 ; 202  |    int I;
                              818 ; 203  |    unsigned int U;
                              819 ; 204  |
                              820 ; 205  |} dclkcntu_type;
                              821 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                              822 ; 207  |
                              823 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                              824 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                              825 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                              826 ; 211  |
                              827 ; 212  |// Clock count register (lower)
                              828 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                              829 ; 214  |// Clock count register (upper)
                              830 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                              831 ; 216  |// Cycle steal count register
                              832 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                              833 ; 218  |
                              834 ; 219  |#endif
                              835 ; 220  |
                              836 ; 221  |
                              837 
                              839 
                              840 ; 18   |#include "regscore.h"
                              841 
                              843 
                              844 ; 1    |#if !(defined(__REGS_STATUS_INC))
                              845 ; 2    |#define __REGS_STATUS_INC 1
                              846 ; 3    |
                              847 ; 4    |
                              848 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              849 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                              850 ; 7    |#define HW_OMR_MA_BITPOS 0
                              851 ; 8    |#define HW_OMR_MB_BITPOS 1
                              852 ; 9    |#define HW_OMR_DE_BITPOS 2
                              853 ; 10   |#define HW_OMR_YE_BITPOS 3
                              854 ; 11   |#define HW_OMR_MC_BITPOS 4
                              855 ; 12   |#define HW_OMR_SD_BITPOS 6
                              856 ; 13   |
                              857 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                              858 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                              859 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                              860 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                              861 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                              862 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                              863 ; 20   |
                              864 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                              865 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                              866 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                              867 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                              868 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              869 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                              870 ; 27   |
                              871 ; 28   |
                              872 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                              873 ; 30   |//  Status Register (HW_SR) Bit Positions
                              874 ; 31   |#define HW_SR_C_BITPOS 0
                              875 ; 32   |#define HW_SR_O_BITPOS 1
                              876 ; 33   |#define HW_SR_Z_BITPOS 2
                              877 ; 34   |#define HW_SR_N_BITPOS 3
                              878 ; 35   |#define HW_SR_U_BITPOS 4
                              879 ; 36   |#define HW_SR_E_BITPOS 5
                              880 ; 37   |#define HW_SR_L_BITPOS 6
                              881 ; 38   |#define HW_SR_IM_BITPOS 8
                              882 ; 39   |#define HW_SR_IM0_BITPOS 8
                              883 ; 40   |#define HW_SR_IM1_BITPOS 9
                              884 ; 41   |#define HW_SR_SM_BITPOS 10
                              885 ; 42   |#define HW_SR_SM0_BITPOS 10
                              886 ; 43   |#define HW_SR_SM1_BITPOS 11
                              887 ; 44   |#define HW_SR_TM_BITPOS 13
                              888 ; 45   |#define HW_SR_DP_BITPOS 14
                              889 ; 46   |#define HW_SR_LOOP_BITPOS 15
                              890 ; 47   |
                              891 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                              892 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                              893 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                              894 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                              895 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                              896 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                              897 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                              898 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                              899 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                              900 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                              901 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                              902 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                              903 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                              904 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                              905 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                              906 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                              907 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                              908 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                              909 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                              910 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                              911 ; 68   |
                              912 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                              913 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                              914 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                              915 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                              916 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                              917 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                              918 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                              919 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                              920 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                              921 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                              922 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                              923 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                              924 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                              925 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                              926 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                              927 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                              928 ; 85   |
                              929 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                              930 ; 87   |//  RAM/ROM Config Register Bit Positions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              931 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                              932 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                              933 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                              934 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                              935 ; 92   |#endif
                              936 ; 93   |
                              937 ; 94   |
                              938 
                              940 
                              941 ; 19   |#include "regscodec.h"
                              942 
                              944 
                              945 ; 1    |#if !(defined(regscodecinc))
                              946 ; 2    |#define regscodecinc 1
                              947 ; 3    |
                              948 ; 4    |
                              949 ; 5    |
                              950 ; 6    |#include "types.h"
                              951 
                              953 
                              954 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              955 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              956 ; 3    |//
                              957 ; 4    |// Filename: types.h
                              958 ; 5    |// Description: Standard data types
                              959 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              960 ; 7    |
                              961 ; 8    |#ifndef _TYPES_H
                              962 ; 9    |#define _TYPES_H
                              963 ; 10   |
                              964 ; 11   |// TODO:  move this outta here!
                              965 ; 12   |#if !defined(NOERROR)
                              966 ; 13   |#define NOERROR 0
                              967 ; 14   |#define SUCCESS 0
                              968 ; 15   |#endif 
                              969 ; 16   |#if !defined(SUCCESS)
                              970 ; 17   |#define SUCCESS  0
                              971 ; 18   |#endif
                              972 ; 19   |#if !defined(ERROR)
                              973 ; 20   |#define ERROR   -1
                              974 ; 21   |#endif
                              975 ; 22   |#if !defined(FALSE)
                              976 ; 23   |#define FALSE 0
                              977 ; 24   |#endif
                              978 ; 25   |#if !defined(TRUE)
                              979 ; 26   |#define TRUE  1
                              980 ; 27   |#endif
                              981 ; 28   |
                              982 ; 29   |#if !defined(NULL)
                              983 ; 30   |#define NULL 0
                              984 ; 31   |#endif
                              985 ; 32   |
                              986 ; 33   |#define MAX_INT     0x7FFFFF
                              987 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              988 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              989 ; 36   |#define MAX_ULONG   (-1) 
                              990 ; 37   |
                              991 ; 38   |#define WORD_SIZE   24              // word size in bits
                              992 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              993 ; 40   |
                              994 ; 41   |
                              995 ; 42   |#define BYTE    unsigned char       // btVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              996 ; 43   |#define CHAR    signed char         // cVarName
                              997 ; 44   |#define USHORT  unsigned short      // usVarName
                              998 ; 45   |#define SHORT   unsigned short      // sVarName
                              999 ; 46   |#define WORD    unsigned int        // wVarName
                             1000 ; 47   |#define INT     signed int          // iVarName
                             1001 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1002 ; 49   |#define LONG    signed long         // lVarName
                             1003 ; 50   |#define BOOL    unsigned int        // bVarName
                             1004 ; 51   |#define FRACT   _fract              // frVarName
                             1005 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1006 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1007 ; 54   |#define FLOAT   float               // fVarName
                             1008 ; 55   |#define DBL     double              // dVarName
                             1009 ; 56   |#define ENUM    enum                // eVarName
                             1010 ; 57   |#define CMX     _complex            // cmxVarName
                             1011 ; 58   |typedef WORD UCS3;                   // 
                             1012 ; 59   |
                             1013 ; 60   |#define UINT16  unsigned short
                             1014 ; 61   |#define UINT8   unsigned char   
                             1015 ; 62   |#define UINT32  unsigned long
                             1016 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1017 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1018 ; 65   |#define WCHAR   UINT16
                             1019 ; 66   |
                             1020 ; 67   |//UINT128 is 16 bytes or 6 words
                             1021 ; 68   |typedef struct UINT128_3500 {   
                             1022 ; 69   |    int val[6];     
                             1023 ; 70   |} UINT128_3500;
                             1024 ; 71   |
                             1025 ; 72   |#define UINT128   UINT128_3500
                             1026 ; 73   |
                             1027 ; 74   |// Little endian word packed byte strings:   
                             1028 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1029 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1030 ; 77   |// Little endian word packed byte strings:   
                             1031 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1032 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1033 ; 80   |
                             1034 ; 81   |// Declare Memory Spaces To Use When Coding
                             1035 ; 82   |// A. Sector Buffers
                             1036 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1037 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1038 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1039 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1040 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1041 ; 88   |// B. Media DDI Memory
                             1042 ; 89   |#define MEDIA_DDI_MEM _Y
                             1043 ; 90   |
                             1044 ; 91   |
                             1045 ; 92   |
                             1046 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1047 ; 94   |// Examples of circular pointers:
                             1048 ; 95   |//    INT CIRC cpiVarName
                             1049 ; 96   |//    DWORD CIRC cpdwVarName
                             1050 ; 97   |
                             1051 ; 98   |#define RETCODE INT                 // rcVarName
                             1052 ; 99   |
                             1053 ; 100  |// generic bitfield structure
                             1054 ; 101  |struct Bitfield {
                             1055 ; 102  |    unsigned int B0  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1056 ; 103  |    unsigned int B1  :1;
                             1057 ; 104  |    unsigned int B2  :1;
                             1058 ; 105  |    unsigned int B3  :1;
                             1059 ; 106  |    unsigned int B4  :1;
                             1060 ; 107  |    unsigned int B5  :1;
                             1061 ; 108  |    unsigned int B6  :1;
                             1062 ; 109  |    unsigned int B7  :1;
                             1063 ; 110  |    unsigned int B8  :1;
                             1064 ; 111  |    unsigned int B9  :1;
                             1065 ; 112  |    unsigned int B10 :1;
                             1066 ; 113  |    unsigned int B11 :1;
                             1067 ; 114  |    unsigned int B12 :1;
                             1068 ; 115  |    unsigned int B13 :1;
                             1069 ; 116  |    unsigned int B14 :1;
                             1070 ; 117  |    unsigned int B15 :1;
                             1071 ; 118  |    unsigned int B16 :1;
                             1072 ; 119  |    unsigned int B17 :1;
                             1073 ; 120  |    unsigned int B18 :1;
                             1074 ; 121  |    unsigned int B19 :1;
                             1075 ; 122  |    unsigned int B20 :1;
                             1076 ; 123  |    unsigned int B21 :1;
                             1077 ; 124  |    unsigned int B22 :1;
                             1078 ; 125  |    unsigned int B23 :1;
                             1079 ; 126  |};
                             1080 ; 127  |
                             1081 ; 128  |union BitInt {
                             1082 ; 129  |        struct Bitfield B;
                             1083 ; 130  |        int        I;
                             1084 ; 131  |};
                             1085 ; 132  |
                             1086 ; 133  |#define MAX_MSG_LENGTH 10
                             1087 ; 134  |struct CMessage
                             1088 ; 135  |{
                             1089 ; 136  |        unsigned int m_uLength;
                             1090 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1091 ; 138  |};
                             1092 ; 139  |
                             1093 ; 140  |typedef struct {
                             1094 ; 141  |    WORD m_wLength;
                             1095 ; 142  |    WORD m_wMessage;
                             1096 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1097 ; 144  |} Message;
                             1098 ; 145  |
                             1099 ; 146  |struct MessageQueueDescriptor
                             1100 ; 147  |{
                             1101 ; 148  |        int *m_pBase;
                             1102 ; 149  |        int m_iModulo;
                             1103 ; 150  |        int m_iSize;
                             1104 ; 151  |        int *m_pHead;
                             1105 ; 152  |        int *m_pTail;
                             1106 ; 153  |};
                             1107 ; 154  |
                             1108 ; 155  |struct ModuleEntry
                             1109 ; 156  |{
                             1110 ; 157  |    int m_iSignaledEventMask;
                             1111 ; 158  |    int m_iWaitEventMask;
                             1112 ; 159  |    int m_iResourceOfCode;
                             1113 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1114 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1115 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1116 ; 163  |    int m_uTimeOutHigh;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1117 ; 164  |    int m_uTimeOutLow;
                             1118 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1119 ; 166  |};
                             1120 ; 167  |
                             1121 ; 168  |union WaitMask{
                             1122 ; 169  |    struct B{
                             1123 ; 170  |        unsigned int m_bNone     :1;
                             1124 ; 171  |        unsigned int m_bMessage  :1;
                             1125 ; 172  |        unsigned int m_bTimer    :1;
                             1126 ; 173  |        unsigned int m_bButton   :1;
                             1127 ; 174  |    } B;
                             1128 ; 175  |    int I;
                             1129 ; 176  |} ;
                             1130 ; 177  |
                             1131 ; 178  |
                             1132 ; 179  |struct Button {
                             1133 ; 180  |        WORD wButtonEvent;
                             1134 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1135 ; 182  |};
                             1136 ; 183  |
                             1137 ; 184  |struct Message {
                             1138 ; 185  |        WORD wMsgLength;
                             1139 ; 186  |        WORD wMsgCommand;
                             1140 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1141 ; 188  |};
                             1142 ; 189  |
                             1143 ; 190  |union EventTypes {
                             1144 ; 191  |        struct CMessage msg;
                             1145 ; 192  |        struct Button Button ;
                             1146 ; 193  |        struct Message Message;
                             1147 ; 194  |};
                             1148 ; 195  |
                             1149 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1150 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1151 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1152 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1153 ; 200  |
                             1154 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1155 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1156 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1157 ; 204  |
                             1158 ; 205  |#if DEBUG
                             1159 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1160 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1161 ; 208  |#else 
                             1162 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1163 ; 210  |#define DebugBuildAssert(x)    
                             1164 ; 211  |#endif
                             1165 ; 212  |
                             1166 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1167 ; 214  |//  #pragma asm
                             1168 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1169 ; 216  |//  #pragma endasm
                             1170 ; 217  |
                             1171 ; 218  |
                             1172 ; 219  |#ifdef COLOR_262K
                             1173 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1174 ; 221  |#elif defined(COLOR_65K)
                             1175 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1176 ; 223  |#else
                             1177 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1178 ; 225  |#endif
                             1179 ; 226  |    
                             1180 ; 227  |#endif // #ifndef _TYPES_H
                             1181 
                             1183 
                             1184 ; 7    |
                             1185 ; 8    |
                             1186 ; 9    |
                             1187 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1188 ; 11   |
                             1189 ; 12   |//   SYSTEM STMP Registers 
                             1190 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             1191 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1192 ; 15   |
                             1193 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             1194 ; 17   |
                             1195 ; 18   |
                             1196 ; 19   |
                             1197 ; 20   |
                             1198 ; 21   |
                             1199 ; 22   |
                             1200 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             1201 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             1202 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             1203 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             1204 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             1205 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             1206 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             1207 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             1208 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             1209 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             1210 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             1211 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             1212 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             1213 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             1214 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             1215 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             1216 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             1217 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             1218 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             1219 ; 42   |
                             1220 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             1221 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             1222 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             1223 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             1224 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             1225 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             1226 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             1227 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             1228 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             1229 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             1230 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             1231 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             1232 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             1233 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             1234 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             1235 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             1236 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             1237 ; 60   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1238 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             1239 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             1240 ; 63   |
                             1241 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1242 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1243 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1244 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1245 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1246 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1247 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1248 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1249 ; 72   |
                             1250 ; 73   |#if defined(CAPLESS_HP)
                             1251 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             1252 ; 75   |#else 
                             1253 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             1254 ; 77   |#endif
                             1255 ; 78   |
                             1256 ; 79   |// Headphone control register
                             1257 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             1258 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1259 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             1260 ; 83   |typedef union               
                             1261 ; 84   |{
                             1262 ; 85   |    struct {
                             1263 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             1264 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             1265 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             1266 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             1267 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             1268 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             1269 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             1270 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             1271 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             1272 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             1273 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             1274 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             1275 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             1276 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             1277 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             1278 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             1279 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             1280 ; 103  |    } B;
                             1281 ; 104  |    int I;
                             1282 ; 105  |    unsigned int U;
                             1283 ; 106  |} hpctrl_type;
                             1284 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             1285 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             1286 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             1287 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             1288 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             1289 ; 112  |
                             1290 ; 113  |
                             1291 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             1292 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             1293 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             1294 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             1295 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             1296 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             1297 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             1298 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             1299 ; 122  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1300 ; 123  |
                             1301 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             1302 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             1303 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             1304 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             1305 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             1306 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             1307 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             1308 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             1309 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             1310 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             1311 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             1312 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             1313 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             1314 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             1315 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             1316 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             1317 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             1318 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             1319 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             1320 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             1321 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             1322 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             1323 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             1324 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             1325 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             1326 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             1327 ; 150  |
                             1328 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             1329 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             1330 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             1331 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             1332 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             1333 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             1334 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             1335 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             1336 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             1337 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             1338 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             1339 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             1340 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             1341 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             1342 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             1343 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             1344 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             1345 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             1346 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             1347 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             1348 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             1349 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             1350 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             1351 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             1352 ; 175  |
                             1353 ; 176  |
                             1354 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             1355 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             1356 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             1357 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             1358 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             1359 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             1360 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             1361 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1362 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             1363 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             1364 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             1365 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             1366 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             1367 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             1368 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             1369 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             1370 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             1371 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             1372 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             1373 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             1374 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             1375 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             1376 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             1377 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             1378 ; 201  |
                             1379 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             1380 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             1381 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             1382 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             1383 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             1384 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             1385 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             1386 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             1387 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             1388 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             1389 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             1390 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             1391 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             1392 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             1393 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             1394 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             1395 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             1396 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             1397 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             1398 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             1399 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             1400 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             1401 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             1402 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             1403 ; 226  |
                             1404 ; 227  |typedef union               
                             1405 ; 228  |{
                             1406 ; 229  |    struct {
                             1407 ; 230  |        int INV_USB_CLK            : 1;
                             1408 ; 231  |        int USB_DFF_BYPASS         : 1;
                             1409 ; 232  |        int HOLD_GND               : 1;
                             1410 ; 233  |        int ACKI                   : 1;
                             1411 ; 234  |        int ASD2X                  : 1;
                             1412 ; 235  |        int PCPCU                  : 1;
                             1413 ; 236  |        int PCPCD                  : 1;
                             1414 ; 237  |        int DCKI                   : 1;
                             1415 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             1416 ; 239  |        int PSRN                   : 1;
                             1417 ; 240  |        int FX2                    : 1;
                             1418 ; 241  |        int VCOS                   : 1;
                             1419 ; 242  |        int XBCO                   : 1;
                             1420 ; 243  |        int XBGC                   : 1;
                             1421 ; 244  |        int ADTHD                  : 1;
                             1422 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             1423 ; 246  |        int PWDADC                 : 1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1424 ; 247  |        int MICBIAS1               : 1;
                             1425 ; 248  |        int EZD                    : 1;
                             1426 ; 249  |        int DZCDA                  : 1;
                             1427 ; 250  |        int DZCFM                  : 1;
                             1428 ; 251  |        int DZCLI                  : 1;
                             1429 ; 252  |        int DZCMI                  : 1;
                             1430 ; 253  |        int DZCMA                  : 1;
                             1431 ; 254  |    } B;
                             1432 ; 255  |    int I;
                             1433 ; 256  |    unsigned int U;
                             1434 ; 257  |} mix_tbr_type;
                             1435 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             1436 ; 259  |
                             1437 ; 260  |
                             1438 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             1439 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1440 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             1441 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             1442 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             1443 ; 266  |
                             1444 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             1445 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             1446 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             1447 ; 270  |
                             1448 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             1449 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             1450 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             1451 ; 274  |
                             1452 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             1453 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             1454 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             1455 ; 278  |
                             1456 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             1457 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             1458 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             1459 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             1460 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             1461 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             1462 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             1463 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             1464 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             1465 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             1466 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             1467 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             1468 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             1469 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             1470 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             1471 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             1472 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             1473 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             1474 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             1475 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             1476 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             1477 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             1478 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             1479 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             1480 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             1481 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             1482 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             1483 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             1484 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             1485 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1486 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             1487 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             1488 ; 311  |
                             1489 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             1490 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             1491 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             1492 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             1493 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             1494 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             1495 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             1496 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             1497 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             1498 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             1499 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             1500 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             1501 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             1502 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             1503 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             1504 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             1505 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             1506 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             1507 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             1508 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             1509 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             1510 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             1511 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             1512 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             1513 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             1514 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             1515 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             1516 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             1517 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             1518 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             1519 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             1520 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             1521 ; 344  |
                             1522 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             1523 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1524 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             1525 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             1526 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             1527 ; 350  |
                             1528 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             1529 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             1530 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             1531 ; 354  |
                             1532 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             1533 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             1534 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             1535 ; 358  |
                             1536 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             1537 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             1538 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             1539 ; 362  |
                             1540 ; 363  |
                             1541 ; 364  |typedef union               
                             1542 ; 365  |{
                             1543 ; 366  |    struct
                             1544 ; 367  |    {
                             1545 ; 368  |        unsigned MR :5;
                             1546 ; 369  |        int         :3;
                             1547 ; 370  |        unsigned ML :5;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1548 ; 371  |        int         :2;
                             1549 ; 372  |        int MUTE    :1;
                             1550 ; 373  |    } B;
                             1551 ; 374  |    int I;
                             1552 ; 375  |    unsigned int U;
                             1553 ; 376  |} mix_mastervr_type;
                             1554 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             1555 ; 378  |
                             1556 ; 379  |
                             1557 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             1558 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             1559 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             1560 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             1561 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             1562 ; 385  |
                             1563 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             1564 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             1565 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             1566 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             1567 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             1568 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             1569 ; 392  |
                             1570 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             1571 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             1572 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             1573 ; 396  |
                             1574 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             1575 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             1576 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             1577 ; 400  |
                             1578 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             1579 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             1580 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             1581 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             1582 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             1583 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             1584 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             1585 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             1586 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             1587 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             1588 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             1589 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             1590 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             1591 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             1592 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             1593 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             1594 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             1595 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             1596 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             1597 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             1598 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             1599 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             1600 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             1601 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             1602 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             1603 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             1604 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             1605 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             1606 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             1607 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             1608 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             1609 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1610 ; 433  |
                             1611 ; 434  |typedef union               
                             1612 ; 435  |{
                             1613 ; 436  |    struct {
                             1614 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             1615 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             1616 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             1617 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             1618 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             1619 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             1620 ; 443  |    } B;
                             1621 ; 444  |    int I;
                             1622 ; 445  |    unsigned int U;
                             1623 ; 446  |} mix_micinvr_type;
                             1624 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             1625 ; 448  |
                             1626 ; 449  |
                             1627 ; 450  |
                             1628 ; 451  |
                             1629 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             1630 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             1631 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             1632 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             1633 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             1634 ; 457  |
                             1635 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             1636 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             1637 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             1638 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             1639 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             1640 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             1641 ; 464  |
                             1642 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             1643 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             1644 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             1645 ; 468  |
                             1646 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             1647 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             1648 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             1649 ; 472  |
                             1650 ; 473  |typedef union               
                             1651 ; 474  |{
                             1652 ; 475  |    struct {
                             1653 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             1654 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             1655 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             1656 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             1657 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             1658 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             1659 ; 482  |    } B;
                             1660 ; 483  |    int I;
                             1661 ; 484  |    unsigned int U;
                             1662 ; 485  |} mix_line1invr_type;
                             1663 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             1664 ; 487  |
                             1665 ; 488  |
                             1666 ; 489  |
                             1667 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             1668 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             1669 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             1670 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             1671 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1672 ; 495  |
                             1673 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             1674 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             1675 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             1676 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             1677 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             1678 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             1679 ; 502  |
                             1680 ; 503  |
                             1681 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             1682 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             1683 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             1684 ; 507  |
                             1685 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             1686 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             1687 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             1688 ; 511  |
                             1689 ; 512  |typedef union               
                             1690 ; 513  |{
                             1691 ; 514  |    struct {
                             1692 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             1693 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             1694 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             1695 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             1696 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             1697 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             1698 ; 521  |    } B;
                             1699 ; 522  |    int I;
                             1700 ; 523  |    unsigned int U;
                             1701 ; 524  |} mix_line2invr_type;
                             1702 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             1703 ; 526  |
                             1704 ; 527  |
                             1705 ; 528  |
                             1706 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             1707 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             1708 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             1709 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             1710 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             1711 ; 534  |
                             1712 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             1713 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             1714 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             1715 ; 538  |
                             1716 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             1717 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             1718 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             1719 ; 542  |
                             1720 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             1721 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             1722 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             1723 ; 546  |
                             1724 ; 547  |typedef union               
                             1725 ; 548  |{
                             1726 ; 549  |    struct {
                             1727 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             1728 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             1729 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             1730 ; 553  |    } B;
                             1731 ; 554  |    int I;
                             1732 ; 555  |    unsigned int U;
                             1733 ; 556  |} mix_dacinvr_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1734 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             1735 ; 558  |
                             1736 ; 559  |
                             1737 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             1738 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             1739 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             1740 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             1741 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             1742 ; 565  |
                             1743 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             1744 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             1745 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             1746 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             1747 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             1748 ; 571  |
                             1749 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             1750 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             1751 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             1752 ; 575  |
                             1753 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             1754 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             1755 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             1756 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             1757 ; 580  |
                             1758 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             1759 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             1760 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             1761 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             1762 ; 585  |
                             1763 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             1764 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             1765 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETM
                                  ASK)
                             1766 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             1767 ; 590  |
                             1768 ; 591  |typedef union               
                             1769 ; 592  |{
                             1770 ; 593  |    struct {
                             1771 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             1772 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             1773 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             1774 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             1775 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             1776 ; 599  |    } B;
                             1777 ; 600  |    int I;
                             1778 ; 601  |    unsigned int U;
                             1779 ; 602  |} mix_recselr_type;
                             1780 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             1781 ; 604  |
                             1782 ; 605  |
                             1783 ; 606  |
                             1784 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             1785 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             1786 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             1787 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             1788 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             1789 ; 612  |
                             1790 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             1791 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             1792 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             1793 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             1794 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1795 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             1796 ; 619  |
                             1797 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             1798 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             1799 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             1800 ; 623  |
                             1801 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             1802 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             1803 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             1804 ; 627  |
                             1805 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             1806 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             1807 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             1808 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             1809 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             1810 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             1811 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             1812 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             1813 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             1814 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             1815 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             1816 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             1817 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             1818 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             1819 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             1820 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             1821 ; 644  |
                             1822 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             1823 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             1824 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             1825 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             1826 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             1827 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             1828 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             1829 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             1830 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             1831 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             1832 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             1833 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             1834 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             1835 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             1836 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             1837 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             1838 ; 661  |
                             1839 ; 662  |typedef union               
                             1840 ; 663  |{
                             1841 ; 664  |    struct {
                             1842 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             1843 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             1844 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             1845 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             1846 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             1847 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             1848 ; 671  |    } B;
                             1849 ; 672  |    int I;
                             1850 ; 673  |    unsigned int U;
                             1851 ; 674  |} mix_adcgainr_type;
                             1852 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             1853 ; 676  |
                             1854 ; 677  |
                             1855 ; 678  |
                             1856 ; 679  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1857 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             1858 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             1859 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             1860 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             1861 ; 684  |
                             1862 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             1863 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             1864 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             1865 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             1866 ; 689  |
                             1867 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             1868 ; 691  |
                             1869 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             1870 ; 693  |
                             1871 ; 694  |typedef union               
                             1872 ; 695  |{
                             1873 ; 696  |    struct {
                             1874 ; 697  |                int                     : 9;
                             1875 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             1876 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             1877 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             1878 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             1879 ; 702  |    } B;
                             1880 ; 703  |    int I;
                             1881 ; 704  |    unsigned int U;
                             1882 ; 705  |} mix_pwrdnr_type;
                             1883 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             1884 ; 707  |
                             1885 ; 708  |
                             1886 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             1887 ; 710  |
                             1888 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             1889 ; 712  |
                             1890 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             1891 ; 714  |
                             1892 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             1893 ; 716  |
                             1894 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             1895 ; 718  |
                             1896 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             1897 ; 720  |
                             1898 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             1899 ; 722  |
                             1900 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             1901 ; 724  |
                             1902 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             1903 ; 726  |
                             1904 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             1905 ; 728  |
                             1906 ; 729  |
                             1907 ; 730  |
                             1908 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             1909 ; 732  |
                             1910 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             1911 ; 734  |
                             1912 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             1913 ; 736  |
                             1914 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             1915 ; 738  |
                             1916 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             1917 ; 740  |
                             1918 ; 741  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1919 ; 742  |
                             1920 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_
                                  TEST_DAC_CHOP_CLK_BITPOS)        
                             1921 ; 744  |
                             1922 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<H
                                  W_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             1923 ; 746  |
                             1924 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_
                                  MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             1925 ; 748  |
                             1926 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_C
                                  FG_BITPOS) 
                             1927 ; 750  |
                             1928 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_
                                  BITPOS) 
                             1929 ; 752  |
                             1930 ; 753  |
                             1931 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             1932 ; 755  |
                             1933 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)  
                                     
                             1934 ; 757  |
                             1935 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             1936 ; 759  |
                             1937 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             1938 ; 761  |
                             1939 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             1940 ; 763  |
                             1941 ; 764  |
                             1942 ; 765  |typedef union               
                             1943 ; 766  |{
                             1944 ; 767  |    struct {
                             1945 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             1946 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             1947 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             1948 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             1949 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             1950 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             1951 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             1952 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             1953 ; 776  |    } B;
                             1954 ; 777  |    int I;
                             1955 ; 778  |    unsigned int U;
                             1956 ; 779  |} mix_test_type;
                             1957 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Anal
                                  og Persistent Config Register */
                             1958 ; 781  |
                             1959 ; 782  |
                             1960 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             1961 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             1962 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             1963 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             1964 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             1965 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             1966 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             1967 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             1968 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             1969 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             1970 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             1971 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             1972 ; 795  |
                             1973 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1974 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             1975 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             1976 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             1977 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             1978 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             1979 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             1980 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             1981 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             1982 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             1983 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             1984 ; 807  |
                             1985 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_D
                                  ACVBGVAL_BITPOS)
                             1986 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_
                                  BITPOS)
                             1987 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_
                                  BITPOS)
                             1988 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS
                                  )
                             1989 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCRE
                                  FV_BITPOS)
                             1990 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_
                                  BITPOS)
                             1991 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDW
                                  NS_BITPOS)
                             1992 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BIT
                                  POS)
                             1993 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BIT
                                  POS)
                             1994 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_P
                                  WR_BITPOS)
                             1995 ; 818  |
                             1996 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             1997 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             1998 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             1999 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             2000 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             2001 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             2002 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             2003 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             2004 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             2005 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             2006 ; 829  |
                             2007 ; 830  |typedef union               
                             2008 ; 831  |{
                             2009 ; 832  |    struct {
                             2010 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             2011 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             2012 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             2013 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             2014 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             2015 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             2016 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             2017 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             2018 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             2019 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             2020 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             2021 ; 844  |    } B;
                             2022 ; 845  |    int I;
                             2023 ; 846  |    unsigned int U;
                             2024 ; 847  |} ref_ctrl_type;
                             2025 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2026 ; 849  |
                             2027 ; 850  |
                             2028 ; 851  |
                             2029 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             2030 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             2031 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             2032 ; 855  |//////  DAC Registers
                             2033 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             2034 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             2035 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             2036 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             2037 ; 860  |
                             2038 ; 861  |
                             2039 ; 862  |
                             2040 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             2041 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             2042 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             2043 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             2044 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             2045 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             2046 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             2047 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             2048 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             2049 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             2050 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             2051 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             2052 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             2053 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             2054 ; 877  |
                             2055 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             2056 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             2057 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             2058 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             2059 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             2060 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             2061 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             2062 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             2063 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             2064 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             2065 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             2066 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             2067 ; 890  |
                             2068 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             2069 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             2070 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             2071 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             2072 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             2073 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             2074 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             2075 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             2076 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             2077 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             2078 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             2079 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             2080 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             2081 ; 904  |
                             2082 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             2083 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             2084 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             2085 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             2086 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             2087 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2088 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             2089 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             2090 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             2091 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             2092 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             2093 ; 916  |
                             2094 ; 917  |
                             2095 ; 918  |typedef union               
                             2096 ; 919  |{
                             2097 ; 920  |    struct {
                             2098 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             2099 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             2100 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             2101 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             2102 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             2103 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             2104 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             2105 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             2106 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             2107 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             2108 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             2109 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             2110 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             2111 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             2112 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             2113 ; 936  |    } B;
                             2114 ; 937  |    int I;
                             2115 ; 938  |    unsigned int U;
                             2116 ; 939  |} dac_csr_type;
                             2117 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             2118 ; 941  |
                             2119 ; 942  |
                             2120 ; 943  |
                             2121 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             2122 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             2123 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             2124 ; 947  |
                             2125 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             2126 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             2127 ; 950  |
                             2128 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             2129 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             2130 ; 953  |
                             2131 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             2132 ; 955  |
                             2133 ; 956  |typedef union               
                             2134 ; 957  |{
                             2135 ; 958  |    struct {
                             2136 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             2137 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             2138 ; 961  |    } B;
                             2139 ; 962  |    int I;
                             2140 ; 963  |    unsigned int U;
                             2141 ; 964  |} dac_srr_type;
                             2142 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             2143 ; 966  |
                             2144 ; 967  |
                             2145 ; 968  |
                             2146 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             2147 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             2148 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             2149 ; 972  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2150 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             2151 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             2152 ; 975  |
                             2153 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             2154 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                                  
                             2155 ; 978  |
                             2156 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             2157 ; 980  |
                             2158 ; 981  |typedef union               
                             2159 ; 982  |{
                             2160 ; 983  |    struct {
                             2161 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             2162 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             2163 ; 986  |    } B;
                             2164 ; 987  |    int I;
                             2165 ; 988  |    unsigned int U;
                             2166 ; 989  |} dac_wcr_type;
                             2167 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             2168 ; 991  |
                             2169 ; 992  |
                             2170 ; 993  |
                             2171 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             2172 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             2173 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             2174 ; 997  |
                             2175 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             2176 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             2177 ; 1000 |
                             2178 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             2179 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                                  
                             2180 ; 1003 |
                             2181 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             2182 ; 1005 |
                             2183 ; 1006 |typedef union               
                             2184 ; 1007 |{
                             2185 ; 1008 |    struct {
                             2186 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             2187 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             2188 ; 1011 |    } B;
                             2189 ; 1012 |    int I;
                             2190 ; 1013 |    unsigned int U;
                             2191 ; 1014 |} dac_cpr_type;
                             2192 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             2193 ; 1016 |
                             2194 ; 1017 |
                             2195 ; 1018 |
                             2196 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             2197 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             2198 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             2199 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             2200 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             2201 ; 1024 |
                             2202 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             2203 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             2204 ; 1027 |
                             2205 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             2206 ; 1029 |
                             2207 ; 1030 |typedef union               
                             2208 ; 1031 |{
                             2209 ; 1032 |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2210 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             2211 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             2212 ; 1035 |    } B;
                             2213 ; 1036 |    int I;
                             2214 ; 1037 |    unsigned int U;
                             2215 ; 1038 |} dac_mr_type;
                             2216 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             2217 ; 1040 |
                             2218 ; 1041 |
                             2219 ; 1042 |
                             2220 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             2221 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             2222 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             2223 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             2224 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             2225 ; 1048 |
                             2226 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             2227 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                                  
                             2228 ; 1051 |
                             2229 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             2230 ; 1053 |
                             2231 ; 1054 |typedef union               
                             2232 ; 1055 |{
                             2233 ; 1056 |    struct {
                             2234 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             2235 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             2236 ; 1059 |    } B;
                             2237 ; 1060 |    int I;
                             2238 ; 1061 |    unsigned int U;
                             2239 ; 1062 |} dac_bar_type;
                             2240 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             2241 ; 1064 |
                             2242 ; 1065 |
                             2243 ; 1066 |
                             2244 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             2245 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             2246 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             2247 ; 1070 |
                             2248 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             2249 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             2250 ; 1073 |
                             2251 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                                  
                             2252 ; 1075 |
                             2253 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             2254 ; 1077 |
                             2255 ; 1078 |typedef union               
                             2256 ; 1079 |{
                             2257 ; 1080 |    struct {
                             2258 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             2259 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             2260 ; 1083 |    } B;
                             2261 ; 1084 |    int I;
                             2262 ; 1085 |    unsigned int U;
                             2263 ; 1086 |} dac_icr_type;
                             2264 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             2265 ; 1088 |
                             2266 ; 1089 |
                             2267 ; 1090 |
                             2268 ; 1091 |
                             2269 ; 1092 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2270 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             2271 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             2272 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             2273 ; 1096 |//////  ADC Registers
                             2274 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             2275 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             2276 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             2277 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             2278 ; 1101 |
                             2279 ; 1102 |
                             2280 ; 1103 |
                             2281 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             2282 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             2283 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             2284 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             2285 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             2286 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             2287 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             2288 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             2289 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             2290 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             2291 ; 1114 |
                             2292 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             2293 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             2294 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             2295 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             2296 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             2297 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             2298 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             2299 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             2300 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             2301 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             2302 ; 1125 |
                             2303 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             2304 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             2305 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             2306 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             2307 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             2308 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS
                                  )        
                             2309 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BIT
                                  POS)        
                             2310 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             2311 ; 1134 |
                             2312 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             2313 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             2314 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             2315 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             2316 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             2317 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             2318 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             2319 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             2320 ; 1143 |
                             2321 ; 1144 |typedef union               
                             2322 ; 1145 |{
                             2323 ; 1146 |    struct {
                             2324 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             2325 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             2326 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             2327 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             2328 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             2329 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2330 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             2331 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             2332 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             2333 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             2334 ; 1157 |    } B;
                             2335 ; 1158 |    int I;
                             2336 ; 1159 |    unsigned int U;
                             2337 ; 1160 |} adc_csr_type;
                             2338 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             2339 ; 1162 |
                             2340 ; 1163 |
                             2341 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             2342 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             2343 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             2344 ; 1167 |
                             2345 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             2346 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             2347 ; 1170 |
                             2348 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                                  
                             2349 ; 1172 |
                             2350 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             2351 ; 1174 |
                             2352 ; 1175 |typedef union               
                             2353 ; 1176 |{
                             2354 ; 1177 |    struct {
                             2355 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             2356 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             2357 ; 1180 |    } B;
                             2358 ; 1181 |    int I;
                             2359 ; 1182 |    unsigned int U;
                             2360 ; 1183 |} adc_wcr_type;
                             2361 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             2362 ; 1185 |
                             2363 ; 1186 |
                             2364 ; 1187 |
                             2365 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             2366 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             2367 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             2368 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             2369 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             2370 ; 1193 |
                             2371 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             2372 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                                  
                             2373 ; 1196 |
                             2374 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             2375 ; 1198 |
                             2376 ; 1199 |typedef union               
                             2377 ; 1200 |{
                             2378 ; 1201 |    struct {
                             2379 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             2380 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             2381 ; 1204 |    } B;
                             2382 ; 1205 |    int I;
                             2383 ; 1206 |    unsigned int U;
                             2384 ; 1207 |} adc_bar_type;
                             2385 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             2386 ; 1209 |
                             2387 ; 1210 |
                             2388 ; 1211 |
                             2389 ; 1212 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2390 ; 1213 |
                             2391 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             2392 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             2393 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             2394 ; 1217 |
                             2395 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             2396 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             2397 ; 1220 |
                             2398 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                                  
                             2399 ; 1222 |
                             2400 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             2401 ; 1224 |
                             2402 ; 1225 |typedef union               
                             2403 ; 1226 |{
                             2404 ; 1227 |    struct {
                             2405 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             2406 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             2407 ; 1230 |    } B;
                             2408 ; 1231 |    int I;
                             2409 ; 1232 |    unsigned int U;
                             2410 ; 1233 |} adc_cpr_type;
                             2411 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             2412 ; 1235 |
                             2413 ; 1236 |
                             2414 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             2415 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             2416 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             2417 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             2418 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             2419 ; 1242 |
                             2420 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             2421 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             2422 ; 1245 |
                             2423 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             2424 ; 1247 |
                             2425 ; 1248 |typedef union               
                             2426 ; 1249 |{
                             2427 ; 1250 |    struct {
                             2428 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             2429 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             2430 ; 1253 |    } B;
                             2431 ; 1254 |    int I;
                             2432 ; 1255 |    unsigned int U;
                             2433 ; 1256 |} adc_mr_type;
                             2434 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             2435 ; 1258 |
                             2436 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             2437 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             2438 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             2439 ; 1262 |
                             2440 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             2441 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             2442 ; 1265 |
                             2443 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             2444 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             2445 ; 1268 |
                             2446 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             2447 ; 1270 |
                             2448 ; 1271 |typedef union               
                             2449 ; 1272 |{
                             2450 ; 1273 |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2451 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             2452 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             2453 ; 1276 |    } B;
                             2454 ; 1277 |    int I;
                             2455 ; 1278 |    unsigned int U;
                             2456 ; 1279 |} adc_srr_type;
                             2457 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             2458 ; 1281 |
                             2459 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             2460 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             2461 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             2462 ; 1285 |
                             2463 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             2464 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             2465 ; 1288 |
                             2466 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                                  
                             2467 ; 1290 |
                             2468 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             2469 ; 1292 |
                             2470 ; 1293 |typedef union               
                             2471 ; 1294 |{
                             2472 ; 1295 |    struct {
                             2473 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             2474 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             2475 ; 1298 |    } B;
                             2476 ; 1299 |    int I;
                             2477 ; 1300 |    unsigned int U;
                             2478 ; 1301 |} adc_icr_type;
                             2479 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             2480 ; 1303 |
                             2481 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             2482 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             2483 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             2484 ; 1307 |
                             2485 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             2486 ; 1309 |
                             2487 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             2488 ; 1311 |
                             2489 ; 1312 |#endif
                             2490 ; 1313 |
                             2491 
                             2493 
                             2494 ; 20   |#include "regsdcdc.h"
                             2495 
                             2497 
                             2498 ; 1    |#if !(defined(regsdcdcinc))
                             2499 ; 2    |
                             2500 ; 3    |#define regssysteminc 1
                             2501 ; 4    |
                             2502 ; 5    |
                             2503 ; 6    |
                             2504 ; 7    |#include "types.h"
                             2505 
                             2507 
                             2508 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2509 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2510 ; 3    |//
                             2511 ; 4    |// Filename: types.h
                             2512 ; 5    |// Description: Standard data types
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2513 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2514 ; 7    |
                             2515 ; 8    |#ifndef _TYPES_H
                             2516 ; 9    |#define _TYPES_H
                             2517 ; 10   |
                             2518 ; 11   |// TODO:  move this outta here!
                             2519 ; 12   |#if !defined(NOERROR)
                             2520 ; 13   |#define NOERROR 0
                             2521 ; 14   |#define SUCCESS 0
                             2522 ; 15   |#endif 
                             2523 ; 16   |#if !defined(SUCCESS)
                             2524 ; 17   |#define SUCCESS  0
                             2525 ; 18   |#endif
                             2526 ; 19   |#if !defined(ERROR)
                             2527 ; 20   |#define ERROR   -1
                             2528 ; 21   |#endif
                             2529 ; 22   |#if !defined(FALSE)
                             2530 ; 23   |#define FALSE 0
                             2531 ; 24   |#endif
                             2532 ; 25   |#if !defined(TRUE)
                             2533 ; 26   |#define TRUE  1
                             2534 ; 27   |#endif
                             2535 ; 28   |
                             2536 ; 29   |#if !defined(NULL)
                             2537 ; 30   |#define NULL 0
                             2538 ; 31   |#endif
                             2539 ; 32   |
                             2540 ; 33   |#define MAX_INT     0x7FFFFF
                             2541 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2542 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2543 ; 36   |#define MAX_ULONG   (-1) 
                             2544 ; 37   |
                             2545 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2546 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2547 ; 40   |
                             2548 ; 41   |
                             2549 ; 42   |#define BYTE    unsigned char       // btVarName
                             2550 ; 43   |#define CHAR    signed char         // cVarName
                             2551 ; 44   |#define USHORT  unsigned short      // usVarName
                             2552 ; 45   |#define SHORT   unsigned short      // sVarName
                             2553 ; 46   |#define WORD    unsigned int        // wVarName
                             2554 ; 47   |#define INT     signed int          // iVarName
                             2555 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2556 ; 49   |#define LONG    signed long         // lVarName
                             2557 ; 50   |#define BOOL    unsigned int        // bVarName
                             2558 ; 51   |#define FRACT   _fract              // frVarName
                             2559 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2560 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2561 ; 54   |#define FLOAT   float               // fVarName
                             2562 ; 55   |#define DBL     double              // dVarName
                             2563 ; 56   |#define ENUM    enum                // eVarName
                             2564 ; 57   |#define CMX     _complex            // cmxVarName
                             2565 ; 58   |typedef WORD UCS3;                   // 
                             2566 ; 59   |
                             2567 ; 60   |#define UINT16  unsigned short
                             2568 ; 61   |#define UINT8   unsigned char   
                             2569 ; 62   |#define UINT32  unsigned long
                             2570 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2571 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2572 ; 65   |#define WCHAR   UINT16
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2573 ; 66   |
                             2574 ; 67   |//UINT128 is 16 bytes or 6 words
                             2575 ; 68   |typedef struct UINT128_3500 {   
                             2576 ; 69   |    int val[6];     
                             2577 ; 70   |} UINT128_3500;
                             2578 ; 71   |
                             2579 ; 72   |#define UINT128   UINT128_3500
                             2580 ; 73   |
                             2581 ; 74   |// Little endian word packed byte strings:   
                             2582 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2583 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2584 ; 77   |// Little endian word packed byte strings:   
                             2585 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2586 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2587 ; 80   |
                             2588 ; 81   |// Declare Memory Spaces To Use When Coding
                             2589 ; 82   |// A. Sector Buffers
                             2590 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2591 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2592 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2593 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2594 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2595 ; 88   |// B. Media DDI Memory
                             2596 ; 89   |#define MEDIA_DDI_MEM _Y
                             2597 ; 90   |
                             2598 ; 91   |
                             2599 ; 92   |
                             2600 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2601 ; 94   |// Examples of circular pointers:
                             2602 ; 95   |//    INT CIRC cpiVarName
                             2603 ; 96   |//    DWORD CIRC cpdwVarName
                             2604 ; 97   |
                             2605 ; 98   |#define RETCODE INT                 // rcVarName
                             2606 ; 99   |
                             2607 ; 100  |// generic bitfield structure
                             2608 ; 101  |struct Bitfield {
                             2609 ; 102  |    unsigned int B0  :1;
                             2610 ; 103  |    unsigned int B1  :1;
                             2611 ; 104  |    unsigned int B2  :1;
                             2612 ; 105  |    unsigned int B3  :1;
                             2613 ; 106  |    unsigned int B4  :1;
                             2614 ; 107  |    unsigned int B5  :1;
                             2615 ; 108  |    unsigned int B6  :1;
                             2616 ; 109  |    unsigned int B7  :1;
                             2617 ; 110  |    unsigned int B8  :1;
                             2618 ; 111  |    unsigned int B9  :1;
                             2619 ; 112  |    unsigned int B10 :1;
                             2620 ; 113  |    unsigned int B11 :1;
                             2621 ; 114  |    unsigned int B12 :1;
                             2622 ; 115  |    unsigned int B13 :1;
                             2623 ; 116  |    unsigned int B14 :1;
                             2624 ; 117  |    unsigned int B15 :1;
                             2625 ; 118  |    unsigned int B16 :1;
                             2626 ; 119  |    unsigned int B17 :1;
                             2627 ; 120  |    unsigned int B18 :1;
                             2628 ; 121  |    unsigned int B19 :1;
                             2629 ; 122  |    unsigned int B20 :1;
                             2630 ; 123  |    unsigned int B21 :1;
                             2631 ; 124  |    unsigned int B22 :1;
                             2632 ; 125  |    unsigned int B23 :1;
                             2633 ; 126  |};
                             2634 ; 127  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2635 ; 128  |union BitInt {
                             2636 ; 129  |        struct Bitfield B;
                             2637 ; 130  |        int        I;
                             2638 ; 131  |};
                             2639 ; 132  |
                             2640 ; 133  |#define MAX_MSG_LENGTH 10
                             2641 ; 134  |struct CMessage
                             2642 ; 135  |{
                             2643 ; 136  |        unsigned int m_uLength;
                             2644 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2645 ; 138  |};
                             2646 ; 139  |
                             2647 ; 140  |typedef struct {
                             2648 ; 141  |    WORD m_wLength;
                             2649 ; 142  |    WORD m_wMessage;
                             2650 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2651 ; 144  |} Message;
                             2652 ; 145  |
                             2653 ; 146  |struct MessageQueueDescriptor
                             2654 ; 147  |{
                             2655 ; 148  |        int *m_pBase;
                             2656 ; 149  |        int m_iModulo;
                             2657 ; 150  |        int m_iSize;
                             2658 ; 151  |        int *m_pHead;
                             2659 ; 152  |        int *m_pTail;
                             2660 ; 153  |};
                             2661 ; 154  |
                             2662 ; 155  |struct ModuleEntry
                             2663 ; 156  |{
                             2664 ; 157  |    int m_iSignaledEventMask;
                             2665 ; 158  |    int m_iWaitEventMask;
                             2666 ; 159  |    int m_iResourceOfCode;
                             2667 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2668 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2669 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2670 ; 163  |    int m_uTimeOutHigh;
                             2671 ; 164  |    int m_uTimeOutLow;
                             2672 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2673 ; 166  |};
                             2674 ; 167  |
                             2675 ; 168  |union WaitMask{
                             2676 ; 169  |    struct B{
                             2677 ; 170  |        unsigned int m_bNone     :1;
                             2678 ; 171  |        unsigned int m_bMessage  :1;
                             2679 ; 172  |        unsigned int m_bTimer    :1;
                             2680 ; 173  |        unsigned int m_bButton   :1;
                             2681 ; 174  |    } B;
                             2682 ; 175  |    int I;
                             2683 ; 176  |} ;
                             2684 ; 177  |
                             2685 ; 178  |
                             2686 ; 179  |struct Button {
                             2687 ; 180  |        WORD wButtonEvent;
                             2688 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2689 ; 182  |};
                             2690 ; 183  |
                             2691 ; 184  |struct Message {
                             2692 ; 185  |        WORD wMsgLength;
                             2693 ; 186  |        WORD wMsgCommand;
                             2694 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2695 ; 188  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2696 ; 189  |
                             2697 ; 190  |union EventTypes {
                             2698 ; 191  |        struct CMessage msg;
                             2699 ; 192  |        struct Button Button ;
                             2700 ; 193  |        struct Message Message;
                             2701 ; 194  |};
                             2702 ; 195  |
                             2703 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2704 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2705 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2706 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2707 ; 200  |
                             2708 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2709 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2710 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2711 ; 204  |
                             2712 ; 205  |#if DEBUG
                             2713 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2714 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2715 ; 208  |#else 
                             2716 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2717 ; 210  |#define DebugBuildAssert(x)    
                             2718 ; 211  |#endif
                             2719 ; 212  |
                             2720 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2721 ; 214  |//  #pragma asm
                             2722 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2723 ; 216  |//  #pragma endasm
                             2724 ; 217  |
                             2725 ; 218  |
                             2726 ; 219  |#ifdef COLOR_262K
                             2727 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2728 ; 221  |#elif defined(COLOR_65K)
                             2729 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2730 ; 223  |#else
                             2731 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2732 ; 225  |#endif
                             2733 ; 226  |    
                             2734 ; 227  |#endif // #ifndef _TYPES_H
                             2735 
                             2737 
                             2738 ; 8    |
                             2739 ; 9    |
                             2740 ; 10   |
                             2741 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2742 ; 12   |
                             2743 ; 13   |//   SYSTEM STMP Registers 
                             2744 ; 14   |//      Last Edited 2.19.2003 M. May
                             2745 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2746 ; 16   |
                             2747 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             2748 ; 18   |
                             2749 ; 19   |
                             2750 ; 20   |
                             2751 ; 21   |
                             2752 ; 22   |
                             2753 ; 23   |
                             2754 ; 24   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2755 ; 25   |
                             2756 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             2757 ; 27   |
                             2758 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             2759 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             2760 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             2761 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             2762 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             2763 ; 33   |
                             2764 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             2765 ; 35   |
                             2766 ; 36   |
                             2767 ; 37   |
                             2768 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             2769 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             2770 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             2771 ; 41   |
                             2772 ; 42   |
                             2773 ; 43   |
                             2774 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                             2775 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                             2776 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
                             2777 ; 47   |
                             2778 ; 48   |
                             2779 ; 49   |
                             2780 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             2781 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             2782 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             2783 ; 53   |
                             2784 ; 54   |
                             2785 ; 55   |
                             2786 ; 56   |
                             2787 ; 57   |
                             2788 ; 58   |typedef union               
                             2789 ; 59   |{
                             2790 ; 60   |    struct {
                             2791 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             2792 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             2793 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             2794 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             2795 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             2796 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             2797 ; 67   |    } B;
                             2798 ; 68   |    unsigned int I;
                             2799 ; 69   |} dcdc1_ctrl0_type;
                             2800 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                             2801 ; 71   |
                             2802 ; 72   |
                             2803 ; 73   |
                             2804 ; 74   |
                             2805 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             2806 ; 76   |
                             2807 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             2808 ; 78   |
                             2809 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             2810 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             2811 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             2812 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2813 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             2814 ; 84   |
                             2815 ; 85   |
                             2816 ; 86   |
                             2817 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             2818 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             2819 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             2820 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             2821 ; 91   |
                             2822 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                             2823 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                             2824 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                             2825 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                             2826 ; 96   |
                             2827 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             2828 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             2829 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             2830 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             2831 ; 101  |
                             2832 ; 102  |
                             2833 ; 103  |typedef union               
                             2834 ; 104  |{
                             2835 ; 105  |    struct {
                             2836 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             2837 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             2838 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2839 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             2840 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2841 ; 111  |    } B;
                             2842 ; 112  |    unsigned int I;
                             2843 ; 113  |} dcdc1_ctrl1_type;
                             2844 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                             2845 ; 115  |
                             2846 ; 116  |
                             2847 ; 117  |
                             2848 ; 118  |
                             2849 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             2850 ; 120  |
                             2851 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             2852 ; 122  |
                             2853 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             2854 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             2855 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             2856 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             2857 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             2858 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             2859 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             2860 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             2861 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             2862 ; 132  |
                             2863 ; 133  |
                             2864 ; 134  |
                             2865 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             2866 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             2867 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             2868 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             2869 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2870 ; 140  |
                             2871 ; 141  |
                             2872 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             2873 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             2874 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             2875 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             2876 ; 146  |
                             2877 ; 147  |
                             2878 ; 148  |
                             2879 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                             2880 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                             2881 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
                             2882 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                             2883 ; 153  |
                             2884 ; 154  |
                             2885 ; 155  |typedef union               
                             2886 ; 156  |{
                             2887 ; 157  |    struct {
                             2888 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             2889 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             2890 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             2891 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             2892 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             2893 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             2894 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             2895 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             2896 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             2897 ; 167  |    } B;
                             2898 ; 168  |    unsigned int I;
                             2899 ; 169  |} dcdc_vddio_type;
                             2900 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                             2901 ; 171  |
                             2902 ; 172  |
                             2903 ; 173  |
                             2904 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             2905 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             2906 ; 176  |
                             2907 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             2908 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             2909 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             2910 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             2911 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             2912 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             2913 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             2914 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             2915 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             2916 ; 186  |
                             2917 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             2918 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             2919 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             2920 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             2921 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2922 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             2923 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             2924 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             2925 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             2926 ; 196  |
                             2927 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                             2928 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             2929 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                             2930 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                             2931 ; 201  |
                             2932 ; 202  |typedef union               
                             2933 ; 203  |{
                             2934 ; 204  |    struct {
                             2935 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             2936 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             2937 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             2938 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             2939 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             2940 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             2941 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             2942 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             2943 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             2944 ; 214  |    } B;
                             2945 ; 215  |   unsigned int I;
                             2946 ; 216  |        unsigned U;
                             2947 ; 217  |} dcdc_vddd_type;
                             2948 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                             2949 ; 219  |
                             2950 ; 220  |
                             2951 ; 221  |
                             2952 ; 222  |
                             2953 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             2954 ; 224  |
                             2955 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             2956 ; 226  |
                             2957 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             2958 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             2959 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             2960 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             2961 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             2962 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             2963 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             2964 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             2965 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             2966 ; 236  |
                             2967 ; 237  |
                             2968 ; 238  |
                             2969 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             2970 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             2971 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             2972 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             2973 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             2974 ; 244  |
                             2975 ; 245  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2976 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             2977 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             2978 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             2979 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             2980 ; 250  |
                             2981 ; 251  |
                             2982 ; 252  |
                             2983 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                             2984 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             2985 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                             2986 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                             2987 ; 257  |
                             2988 ; 258  |
                             2989 ; 259  |typedef union               
                             2990 ; 260  |{
                             2991 ; 261  |    struct {
                             2992 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             2993 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             2994 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             2995 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             2996 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             2997 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             2998 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             2999 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             3000 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             3001 ; 271  |    } B;
                             3002 ; 272  |    unsigned int I;
                             3003 ; 273  |} dcdc_vdda_type;
                             3004 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                             3005 ; 275  |
                             3006 ; 276  |
                             3007 ; 277  |
                             3008 ; 278  |
                             3009 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             3010 ; 280  |
                             3011 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             3012 ; 282  |
                             3013 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             3014 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             3015 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             3016 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             3017 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             3018 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             3019 ; 289  |
                             3020 ; 290  |
                             3021 ; 291  |
                             3022 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             3023 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             3024 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             3025 ; 295  |
                             3026 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                             3027 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3028 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
                             3029 ; 299  |
                             3030 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             3031 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             3032 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             3033 ; 303  |
                             3034 ; 304  |
                             3035 ; 305  |typedef union               
                             3036 ; 306  |{
                             3037 ; 307  |    struct {
                             3038 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             3039 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             3040 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             3041 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             3042 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             3043 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             3044 ; 314  |    } B;
                             3045 ; 315  |    unsigned int I;
                             3046 ; 316  |} dcdc2_ctrl0_type; 
                             3047 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                             3048 ; 318  |
                             3049 ; 319  |
                             3050 ; 320  |
                             3051 ; 321  |
                             3052 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             3053 ; 323  |
                             3054 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             3055 ; 325  |
                             3056 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             3057 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             3058 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             3059 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             3060 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             3061 ; 331  |
                             3062 ; 332  |
                             3063 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             3064 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             3065 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             3066 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             3067 ; 337  |
                             3068 ; 338  |
                             3069 ; 339  |
                             3070 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                             3071 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
                             3072 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                             3073 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
                             3074 ; 344  |
                             3075 ; 345  |
                             3076 ; 346  |
                             3077 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             3078 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             3079 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             3080 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             3081 ; 351  |
                             3082 ; 352  |
                             3083 ; 353  |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3084 ; 354  |{
                             3085 ; 355  |    struct {
                             3086 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             3087 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                             3088 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3089 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             3090 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3091 ; 361  |    } B;
                             3092 ; 362  |    unsigned int I;
                             3093 ; 363  |} dcdc2_ctrl1_type;
                             3094 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                             3095 ; 365  |
                             3096 ; 366  |
                             3097 ; 367  |
                             3098 ; 368  |
                             3099 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             3100 ; 370  |
                             3101 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             3102 ; 372  |
                             3103 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             3104 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             3105 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             3106 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             3107 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             3108 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             3109 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             3110 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             3111 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             3112 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             3113 ; 383  |
                             3114 ; 384  |
                             3115 ; 385  |
                             3116 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             3117 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             3118 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             3119 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             3120 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             3121 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             3122 ; 392  |
                             3123 ; 393  |
                             3124 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
                             3125 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                             3126 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
                             3127 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                             3128 ; 398  |
                             3129 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
                             3130 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                             3131 ; 401  |
                             3132 ; 402  |
                             3133 ; 403  |
                             3134 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             3135 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             3136 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             3137 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             3138 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3139 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             3140 ; 410  |
                             3141 ; 411  |
                             3142 ; 412  |typedef union               
                             3143 ; 413  |{
                             3144 ; 414  |    struct {
                             3145 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             3146 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             3147 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             3148 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             3149 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             3150 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             3151 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             3152 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             3153 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             3154 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             3155 ; 425  |    } B;
                             3156 ; 426  |    unsigned int I;
                             3157 ; 427  |} speed_type;
                             3158 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                             3159 ; 429  |
                             3160 ; 430  |
                             3161 ; 431  |
                             3162 ; 432  |
                             3163 ; 433  |
                             3164 ; 434  |
                             3165 ; 435  |
                             3166 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             3167 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             3168 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             3169 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             3170 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             3171 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             3172 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             3173 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             3174 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             3175 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             3176 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             3177 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             3178 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             3179 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             3180 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             3181 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             3182 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             3183 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             3184 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             3185 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             3186 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             3187 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             3188 ; 458  |
                             3189 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             3190 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             3191 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             3192 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             3193 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             3194 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             3195 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             3196 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             3197 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             3198 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             3199 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3200 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             3201 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             3202 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             3203 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             3204 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             3205 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             3206 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             3207 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             3208 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             3209 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             3210 ; 480  |
                             3211 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                             3212 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             3213 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             3214 ; 484  |
                             3215 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             3216 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             3217 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                             3218 ; 488  |
                             3219 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
                             3220 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             3221 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             3222 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             3223 ; 493  |
                             3224 ; 494  |typedef union               
                             3225 ; 495  |{
                             3226 ; 496  |    struct {
                             3227 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             3228 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             3229 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             3230 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             3231 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             3232 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             3233 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             3234 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             3235 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             3236 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             3237 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             3238 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             3239 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             3240 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             3241 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             3242 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             3243 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             3244 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             3245 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             3246 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             3247 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             3248 ; 518  |    } B;
                             3249 ; 519  |    unsigned int I;
                             3250 ; 520  |} usb_dcdctbr_type;
                             3251 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3252 ; 522  |
                             3253 ; 523  |
                             3254 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             3255 ; 525  |
                             3256 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             3257 ; 527  |
                             3258 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             3259 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             3260 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             3261 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             3262 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             3263 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             3264 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             3265 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             3266 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             3267 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             3268 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             3269 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             3270 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             3271 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             3272 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             3273 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             3274 ; 544  |
                             3275 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             3276 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             3277 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             3278 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             3279 ; 549  |
                             3280 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             3281 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             3282 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             3283 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             3284 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             3285 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             3286 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             3287 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             3288 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             3289 ; 559  |
                             3290 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             3291 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
                             3292 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                             3293 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
                             3294 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             3295 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             3296 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             3297 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             3298 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             3299 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             3300 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             3301 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3302 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             3303 ; 573  |
                             3304 ; 574  |
                             3305 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                             3306 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             3307 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             3308 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             3309 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             3310 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                             3311 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                             3312 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                             3313 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
                             3314 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                             3315 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                             3316 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
                             3317 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                             3318 ; 588  |
                             3319 ; 589  |typedef union               
                             3320 ; 590  |{
                             3321 ; 591  |    struct {
                             3322 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             3323 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             3324 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             3325 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             3326 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             3327 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             3328 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                             3329 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                             3330 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             3331 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             3332 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             3333 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             3334 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             3335 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                             3336 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             3337 ; 607  |    } B;
                             3338 ; 608  |    unsigned int I;
                             3339 ; 609  |} usb_pwr_charge_type;
                             3340 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                             3341 ; 611  |
                             3342 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             3343 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             3344 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             3345 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             3346 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             3347 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             3348 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             3349 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3350 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             3351 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             3352 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             3353 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             3354 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             3355 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             3356 ; 626  |
                             3357 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             3358 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             3359 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             3360 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             3361 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             3362 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             3363 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             3364 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             3365 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             3366 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             3367 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             3368 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             3369 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             3370 ; 640  |
                             3371 ; 641  |typedef union               
                             3372 ; 642  |{
                             3373 ; 643  |    struct {       
                             3374 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             3375 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             3376 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             3377 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             3378 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             3379 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             3380 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             3381 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             3382 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             3383 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             3384 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             3385 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                             3386 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             3387 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             3388 ; 658  |    } B;
                             3389 ; 659  |    int I;
                             3390 ; 660  |} usb_dcdcpersist_type;
                             3391 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                             3392 ; 662  |
                             3393 ; 663  |
                             3394 ; 664  |
                             3395 ; 665  |#endif
                             3396 ; 666  |
                             3397 ; 667  |
                             3398 ; 668  |
                             3399 
                             3401 
                             3402 ; 21   |#include "regsemc.h"
                             3403 
                             3405 
                             3406 ; 1    |#if !(defined(__REGS_EMC_INC))
                             3407 ; 2    |#define __REGS_EMC_INC 1
                             3408 ; 3    |
                             3409 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             3410 ; 5    |//   Module base addresses
                             3411 ; 6    |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3412 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             3413 ; 8    |
                             3414 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             3415 ; 10   |//  EMC Registers
                             3416 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             3417 ; 12   |
                             3418 ; 13   |
                             3419 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             3420 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             3421 ; 16   |
                             3422 ; 17   |typedef union               /*Flash Control Register*/
                             3423 ; 18   |{
                             3424 ; 19   |    struct
                             3425 ; 20   |    {
                             3426 ; 21   |    int KICK        :1;
                             3427 ; 22   |    int RW          :1;
                             3428 ; 23   |    int TCIE        :1;
                             3429 ; 24   |    int IRQP        :1;
                             3430 ; 25   |    unsigned MMD    :2;
                             3431 ; 26   |    unsigned NB     :11;
                             3432 ; 27   |    unsigned RSVD   :4;
                             3433 ; 28   |    int SRST        :1;
                             3434 ; 29   |    } B;
                             3435 ; 30   |    int I;
                             3436 ; 31   |} flcr_type;
                             3437 ; 32   |
                             3438 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             3439 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             3440 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             3441 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             3442 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             3443 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             3444 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             3445 ; 40   |
                             3446 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             3447 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             3448 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             3449 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             3450 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             3451 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             3452 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             3453 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             3454 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             3455 ; 50   |
                             3456 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             3457 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             3458 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             3459 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             3460 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             3461 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             3462 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             3463 ; 58   |
                             3464 ; 59   |
                             3465 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             3466 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             3467 ; 62   |
                             3468 ; 63   |typedef union           /* Flash Start Address Low*/
                             3469 ; 64   |{
                             3470 ; 65   |    struct
                             3471 ; 66   |    {
                             3472 ; 67   |    unsigned XA     : 24;
                             3473 ; 68   |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3474 ; 69   |    int I;
                             3475 ; 70   |} flsalr_type;
                             3476 ; 71   |
                             3477 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                             3478 ; 73   |
                             3479 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             3480 ; 75   |
                             3481 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             3482 ; 77   |
                             3483 ; 78   |
                             3484 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             3485 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             3486 ; 81   |
                             3487 ; 82   |typedef union           /* Flash Start Address High*/
                             3488 ; 83   |{
                             3489 ; 84   |    struct
                             3490 ; 85   |    {
                             3491 ; 86   |    unsigned XA     :8;
                             3492 ; 87   |    unsigned DA     :16;
                             3493 ; 88   |    } B;
                             3494 ; 89   |    int I;
                             3495 ; 90   |} flsahr_type;
                             3496 ; 91   |
                             3497 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             3498 ; 93   |
                             3499 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             3500 ; 95   |
                             3501 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             3502 ; 97   |
                             3503 ; 98   |
                             3504 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             3505 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             3506 ; 101  |
                             3507 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             3508 ; 103  |{
                             3509 ; 104  |    struct
                             3510 ; 105  |    {
                             3511 ; 106  |        int WP          :1;
                             3512 ; 107  |        int CDP         :1;
                             3513 ; 108  |        unsigned SM     :2;
                             3514 ; 109  |        int XATTR       :1;
                             3515 ; 110  |        int CRST        :1;
                             3516 ; 111  |        int XWT         :1;
                             3517 ; 112  |        int RI          :1;
                             3518 ; 113  |        int IFCE        :1;
                             3519 ; 114  |        int ISCE        :1;
                             3520 ; 115  |        int INCE        :1;
                             3521 ; 116  |        int IFCS        :1;
                             3522 ; 117  |        int ISCS        :1;
                             3523 ; 118  |        int INCS        :1;
                             3524 ; 119  |        unsigned CFAI   :2;
                             3525 ; 120  |        int XDDI        :1;
                             3526 ; 121  |        unsigned CS     :2;
                             3527 ; 122  |        int CRE         :1;
                             3528 ; 123  |        unsigned VS     :2;
                             3529 ; 124  |        int DASP        :1;
                             3530 ; 125  |        int MODE16      :1; 
                             3531 ; 126  |    } B;
                             3532 ; 127  |    int I;
                             3533 ; 128  |} flcfcr_type;
                             3534 ; 129  |
                             3535 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3536 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             3537 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             3538 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             3539 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
                             3540 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             3541 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             3542 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             3543 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             3544 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             3545 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             3546 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             3547 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             3548 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             3549 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             3550 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             3551 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             3552 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             3553 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             3554 ; 149  |
                             3555 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             3556 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             3557 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             3558 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             3559 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             3560 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             3561 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             3562 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             3563 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             3564 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             3565 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             3566 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             3567 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             3568 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             3569 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             3570 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             3571 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             3572 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             3573 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             3574 ; 169  |
                             3575 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             3576 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             3577 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             3578 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             3579 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             3580 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             3581 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             3582 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             3583 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             3584 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             3585 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             3586 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             3587 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             3588 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             3589 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             3590 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             3591 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             3592 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             3593 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             3594 ; 189  |
                             3595 ; 190  |
                             3596 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             3597 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3598 ; 193  |
                             3599 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             3600 ; 195  |{
                             3601 ; 196  |    struct
                             3602 ; 197  |    {
                             3603 ; 198  |        unsigned TRWSU  :5;
                             3604 ; 199  |        unsigned TRPW   :7;
                             3605 ; 200  |        unsigned TWPW   :7;
                             3606 ; 201  |        unsigned TRWH   :5;
                             3607 ; 202  |    } B;
                             3608 ; 203  |    int I;
                             3609 ; 204  |} flcftmr1r_type;
                             3610 ; 205  |
                             3611 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             3612 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             3613 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             3614 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             3615 ; 210  |
                             3616 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             3617 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             3618 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             3619 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             3620 ; 215  |
                             3621 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             3622 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             3623 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             3624 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             3625 ; 220  |
                             3626 ; 221  |
                             3627 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             3628 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             3629 ; 224  |
                             3630 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             3631 ; 226  |{
                             3632 ; 227  |    struct
                             3633 ; 228  |    {
                             3634 ; 229  |        unsigned TWW    :4;
                             3635 ; 230  |        unsigned TWTO   :10;
                             3636 ; 231  |        unsigned THW    :5; 
                             3637 ; 232  |        unsigned TRAQ   :5;
                             3638 ; 233  |    } B;
                             3639 ; 234  |    int I;
                             3640 ; 235  |} flcftmr2r_type;
                             3641 ; 236  |
                             3642 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             3643 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             3644 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             3645 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             3646 ; 241  |
                             3647 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             3648 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             3649 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             3650 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             3651 ; 246  |
                             3652 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             3653 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             3654 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             3655 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             3656 ; 251  |
                             3657 ; 252  |
                             3658 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             3659 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3660 ; 255  |
                             3661 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             3662 ; 257  |{
                             3663 ; 258  |    struct
                             3664 ; 259  |    {
                             3665 ; 260  |        unsigned CS     :2;
                             3666 ; 261  |        int SE          :1;
                             3667 ; 262  |        int WP          :1;
                             3668 ; 263  |        int SIZE        :1;
                             3669 ; 264  |        int ICMD        :8;
                             3670 ; 265  |        int TOIE        :1;
                             3671 ; 266  |        int BPIE        :1;
                             3672 ; 267  |        int TOIRQ       :1;
                             3673 ; 268  |        int BPIRQ       :1;
                             3674 ; 269  |    } B;
                             3675 ; 270  |    int I;
                             3676 ; 271  |} flsmcr_type;
                             3677 ; 272  |
                             3678 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             3679 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             3680 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             3681 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             3682 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             3683 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             3684 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             3685 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             3686 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             3687 ; 282  |
                             3688 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             3689 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             3690 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             3691 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             3692 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             3693 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             3694 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             3695 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             3696 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             3697 ; 292  |
                             3698 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             3699 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             3700 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             3701 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             3702 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             3703 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             3704 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             3705 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             3706 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             3707 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             3708 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             3709 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             3710 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             3711 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             3712 ; 307  |
                             3713 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             3714 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             3715 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             3716 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             3717 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             3718 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             3719 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             3720 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             3721 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3722 ; 317  |
                             3723 ; 318  |
                             3724 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             3725 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                             3726 ; 321  |
                             3727 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             3728 ; 323  |{
                             3729 ; 324  |    struct
                             3730 ; 325  |    {
                             3731 ; 326  |        unsigned TRWSU  :5;
                             3732 ; 327  |        unsigned TRPW   :6;
                             3733 ; 328  |        unsigned TWPW   :6;
                             3734 ; 329  |        unsigned TRWH   :5;
                             3735 ; 330  |    } B;
                             3736 ; 331  |    int I;
                             3737 ; 332  |} flsmtmr1r_type;
                             3738 ; 333  |
                             3739 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             3740 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             3741 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             3742 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             3743 ; 338  |
                             3744 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             3745 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             3746 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             3747 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             3748 ; 343  |
                             3749 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             3750 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             3751 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             3752 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             3753 ; 348  |
                             3754 ; 349  |
                             3755 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             3756 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             3757 ; 352  |
                             3758 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             3759 ; 354  |{
                             3760 ; 355  |    struct
                             3761 ; 356  |    {
                             3762 ; 357  |        unsigned TWT    :6;
                             3763 ; 358  |        unsigned TWTO   :18;
                             3764 ; 359  |    } B;
                             3765 ; 360  |    int I;
                             3766 ; 361  |} flsmtmr2r_type;
                             3767 ; 362  |
                             3768 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             3769 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             3770 ; 365  |
                             3771 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             3772 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             3773 ; 368  |
                             3774 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             3775 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             3776 ; 371  |
                             3777 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             3778 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             3779 ; 374  |typedef union 
                             3780 ; 375  |{
                             3781 ; 376  |  struct
                             3782 ; 377  |  {
                             3783 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3784 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers
                                   */
                             3785 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers
                                   */
                             3786 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             3787 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             3788 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             3789 ; 384  |    int PAD0          :17;    
                             3790 ; 385  |  } B;
                             3791 ; 386  |  int I;
                             3792 ; 387  |} flcr2_type;
                             3793 ; 388  |
                             3794 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             3795 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             3796 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             3797 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             3798 ; 393  |
                             3799 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Co
                                  ntrol Register */
                             3800 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash St
                                  art Address Low Register */
                             3801 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash St
                                  art Address High Register */
                             3802 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             3803 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Co
                                  ntrol Register2 */
                             3804 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash Co
                                  mpactFlash Control Register*/
                             3805 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Co
                                  mpact Flash Timer1 Register*/
                             3806 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Co
                                  mpact Flash Timer2 Register*/
                             3807 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash Sm
                                  artMedia Control Register*/
                             3808 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash Sm
                                  artMedia Timer1 Register*/
                             3809 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash Sm
                                  artMedia Timer2 Register*/
                             3810 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             3811 ; 406  |
                             3812 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             3813 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             3814 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             3815 ; 410  |
                             3816 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             3817 ; 412  |
                             3818 ; 413  |#endif
                             3819 ; 414  |
                             3820 
                             3822 
                             3823 ; 22   |#include "regsgpio.h"
                             3824 
                             3826 
                             3827 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             3828 ; 2    |#define __REGS_GPIO_INC 1
                             3829 ; 3    |
                             3830 ; 4    |#include "types.h"
                             3831 
                             3833 
                             3834 ; 1    |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3835 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3836 ; 3    |//
                             3837 ; 4    |// Filename: types.h
                             3838 ; 5    |// Description: Standard data types
                             3839 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3840 ; 7    |
                             3841 ; 8    |#ifndef _TYPES_H
                             3842 ; 9    |#define _TYPES_H
                             3843 ; 10   |
                             3844 ; 11   |// TODO:  move this outta here!
                             3845 ; 12   |#if !defined(NOERROR)
                             3846 ; 13   |#define NOERROR 0
                             3847 ; 14   |#define SUCCESS 0
                             3848 ; 15   |#endif 
                             3849 ; 16   |#if !defined(SUCCESS)
                             3850 ; 17   |#define SUCCESS  0
                             3851 ; 18   |#endif
                             3852 ; 19   |#if !defined(ERROR)
                             3853 ; 20   |#define ERROR   -1
                             3854 ; 21   |#endif
                             3855 ; 22   |#if !defined(FALSE)
                             3856 ; 23   |#define FALSE 0
                             3857 ; 24   |#endif
                             3858 ; 25   |#if !defined(TRUE)
                             3859 ; 26   |#define TRUE  1
                             3860 ; 27   |#endif
                             3861 ; 28   |
                             3862 ; 29   |#if !defined(NULL)
                             3863 ; 30   |#define NULL 0
                             3864 ; 31   |#endif
                             3865 ; 32   |
                             3866 ; 33   |#define MAX_INT     0x7FFFFF
                             3867 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3868 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3869 ; 36   |#define MAX_ULONG   (-1) 
                             3870 ; 37   |
                             3871 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3872 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3873 ; 40   |
                             3874 ; 41   |
                             3875 ; 42   |#define BYTE    unsigned char       // btVarName
                             3876 ; 43   |#define CHAR    signed char         // cVarName
                             3877 ; 44   |#define USHORT  unsigned short      // usVarName
                             3878 ; 45   |#define SHORT   unsigned short      // sVarName
                             3879 ; 46   |#define WORD    unsigned int        // wVarName
                             3880 ; 47   |#define INT     signed int          // iVarName
                             3881 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3882 ; 49   |#define LONG    signed long         // lVarName
                             3883 ; 50   |#define BOOL    unsigned int        // bVarName
                             3884 ; 51   |#define FRACT   _fract              // frVarName
                             3885 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3886 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3887 ; 54   |#define FLOAT   float               // fVarName
                             3888 ; 55   |#define DBL     double              // dVarName
                             3889 ; 56   |#define ENUM    enum                // eVarName
                             3890 ; 57   |#define CMX     _complex            // cmxVarName
                             3891 ; 58   |typedef WORD UCS3;                   // 
                             3892 ; 59   |
                             3893 ; 60   |#define UINT16  unsigned short
                             3894 ; 61   |#define UINT8   unsigned char   
                             3895 ; 62   |#define UINT32  unsigned long
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3896 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3897 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3898 ; 65   |#define WCHAR   UINT16
                             3899 ; 66   |
                             3900 ; 67   |//UINT128 is 16 bytes or 6 words
                             3901 ; 68   |typedef struct UINT128_3500 {   
                             3902 ; 69   |    int val[6];     
                             3903 ; 70   |} UINT128_3500;
                             3904 ; 71   |
                             3905 ; 72   |#define UINT128   UINT128_3500
                             3906 ; 73   |
                             3907 ; 74   |// Little endian word packed byte strings:   
                             3908 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3909 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3910 ; 77   |// Little endian word packed byte strings:   
                             3911 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3912 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3913 ; 80   |
                             3914 ; 81   |// Declare Memory Spaces To Use When Coding
                             3915 ; 82   |// A. Sector Buffers
                             3916 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3917 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3918 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3919 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3920 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3921 ; 88   |// B. Media DDI Memory
                             3922 ; 89   |#define MEDIA_DDI_MEM _Y
                             3923 ; 90   |
                             3924 ; 91   |
                             3925 ; 92   |
                             3926 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3927 ; 94   |// Examples of circular pointers:
                             3928 ; 95   |//    INT CIRC cpiVarName
                             3929 ; 96   |//    DWORD CIRC cpdwVarName
                             3930 ; 97   |
                             3931 ; 98   |#define RETCODE INT                 // rcVarName
                             3932 ; 99   |
                             3933 ; 100  |// generic bitfield structure
                             3934 ; 101  |struct Bitfield {
                             3935 ; 102  |    unsigned int B0  :1;
                             3936 ; 103  |    unsigned int B1  :1;
                             3937 ; 104  |    unsigned int B2  :1;
                             3938 ; 105  |    unsigned int B3  :1;
                             3939 ; 106  |    unsigned int B4  :1;
                             3940 ; 107  |    unsigned int B5  :1;
                             3941 ; 108  |    unsigned int B6  :1;
                             3942 ; 109  |    unsigned int B7  :1;
                             3943 ; 110  |    unsigned int B8  :1;
                             3944 ; 111  |    unsigned int B9  :1;
                             3945 ; 112  |    unsigned int B10 :1;
                             3946 ; 113  |    unsigned int B11 :1;
                             3947 ; 114  |    unsigned int B12 :1;
                             3948 ; 115  |    unsigned int B13 :1;
                             3949 ; 116  |    unsigned int B14 :1;
                             3950 ; 117  |    unsigned int B15 :1;
                             3951 ; 118  |    unsigned int B16 :1;
                             3952 ; 119  |    unsigned int B17 :1;
                             3953 ; 120  |    unsigned int B18 :1;
                             3954 ; 121  |    unsigned int B19 :1;
                             3955 ; 122  |    unsigned int B20 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3956 ; 123  |    unsigned int B21 :1;
                             3957 ; 124  |    unsigned int B22 :1;
                             3958 ; 125  |    unsigned int B23 :1;
                             3959 ; 126  |};
                             3960 ; 127  |
                             3961 ; 128  |union BitInt {
                             3962 ; 129  |        struct Bitfield B;
                             3963 ; 130  |        int        I;
                             3964 ; 131  |};
                             3965 ; 132  |
                             3966 ; 133  |#define MAX_MSG_LENGTH 10
                             3967 ; 134  |struct CMessage
                             3968 ; 135  |{
                             3969 ; 136  |        unsigned int m_uLength;
                             3970 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3971 ; 138  |};
                             3972 ; 139  |
                             3973 ; 140  |typedef struct {
                             3974 ; 141  |    WORD m_wLength;
                             3975 ; 142  |    WORD m_wMessage;
                             3976 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3977 ; 144  |} Message;
                             3978 ; 145  |
                             3979 ; 146  |struct MessageQueueDescriptor
                             3980 ; 147  |{
                             3981 ; 148  |        int *m_pBase;
                             3982 ; 149  |        int m_iModulo;
                             3983 ; 150  |        int m_iSize;
                             3984 ; 151  |        int *m_pHead;
                             3985 ; 152  |        int *m_pTail;
                             3986 ; 153  |};
                             3987 ; 154  |
                             3988 ; 155  |struct ModuleEntry
                             3989 ; 156  |{
                             3990 ; 157  |    int m_iSignaledEventMask;
                             3991 ; 158  |    int m_iWaitEventMask;
                             3992 ; 159  |    int m_iResourceOfCode;
                             3993 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3994 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3995 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3996 ; 163  |    int m_uTimeOutHigh;
                             3997 ; 164  |    int m_uTimeOutLow;
                             3998 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3999 ; 166  |};
                             4000 ; 167  |
                             4001 ; 168  |union WaitMask{
                             4002 ; 169  |    struct B{
                             4003 ; 170  |        unsigned int m_bNone     :1;
                             4004 ; 171  |        unsigned int m_bMessage  :1;
                             4005 ; 172  |        unsigned int m_bTimer    :1;
                             4006 ; 173  |        unsigned int m_bButton   :1;
                             4007 ; 174  |    } B;
                             4008 ; 175  |    int I;
                             4009 ; 176  |} ;
                             4010 ; 177  |
                             4011 ; 178  |
                             4012 ; 179  |struct Button {
                             4013 ; 180  |        WORD wButtonEvent;
                             4014 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4015 ; 182  |};
                             4016 ; 183  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4017 ; 184  |struct Message {
                             4018 ; 185  |        WORD wMsgLength;
                             4019 ; 186  |        WORD wMsgCommand;
                             4020 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4021 ; 188  |};
                             4022 ; 189  |
                             4023 ; 190  |union EventTypes {
                             4024 ; 191  |        struct CMessage msg;
                             4025 ; 192  |        struct Button Button ;
                             4026 ; 193  |        struct Message Message;
                             4027 ; 194  |};
                             4028 ; 195  |
                             4029 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4030 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4031 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4032 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4033 ; 200  |
                             4034 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4035 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4036 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4037 ; 204  |
                             4038 ; 205  |#if DEBUG
                             4039 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4040 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4041 ; 208  |#else 
                             4042 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             4043 ; 210  |#define DebugBuildAssert(x)    
                             4044 ; 211  |#endif
                             4045 ; 212  |
                             4046 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4047 ; 214  |//  #pragma asm
                             4048 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4049 ; 216  |//  #pragma endasm
                             4050 ; 217  |
                             4051 ; 218  |
                             4052 ; 219  |#ifdef COLOR_262K
                             4053 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             4054 ; 221  |#elif defined(COLOR_65K)
                             4055 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             4056 ; 223  |#else
                             4057 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             4058 ; 225  |#endif
                             4059 ; 226  |    
                             4060 ; 227  |#endif // #ifndef _TYPES_H
                             4061 
                             4063 
                             4064 ; 5    |
                             4065 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4066 ; 7    |//  Interrupt Collector Registers
                             4067 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             4068 ; 9    |
                             4069 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             4070 ; 11   |
                             4071 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             4072 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             4073 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             4074 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             4075 ; 16   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4076 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             4077 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             4078 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             4079 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             4080 ; 21   |
                             4081 ; 22   |#define HW_GPB_GPENR 0
                             4082 ; 23   |#define HW_GPB_GPDOR 1
                             4083 ; 24   |#define HW_GPB_GPDIR 2
                             4084 ; 25   |#define HW_GPB_GPDOER 3
                             4085 ; 26   |#define HW_GPB_GPIPENR 4
                             4086 ; 27   |#define HW_GPB_GPIENR 5
                             4087 ; 28   |#define HW_GPB_GPILVLR 6
                             4088 ; 29   |#define HW_GPB_GPIPOLR 7
                             4089 ; 30   |#define HW_GPB_GPISTATR 8
                             4090 ; 31   |#define HW_GPB_GPPWR 9
                             4091 ; 32   |#define HW_GPB_GP8MA 10
                             4092 ; 33   |
                             4093 ; 34   |
                             4094 ; 35   |
                             4095 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             4096 ; 37   |//  GPIO Register Bit Positions
                             4097 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             4098 ; 39   |{
                             4099 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             4100 ; 41   |    unsigned int I;
                             4101 ; 42   |    unsigned int U;
                             4102 ; 43   |} gpr_type;
                             4103 ; 44   |
                             4104 ; 45   |#define HW_GP_B0_BITPOS 0
                             4105 ; 46   |#define HW_GP_B1_BITPOS 1
                             4106 ; 47   |#define HW_GP_B2_BITPOS 2
                             4107 ; 48   |#define HW_GP_B3_BITPOS 3
                             4108 ; 49   |#define HW_GP_B4_BITPOS 4
                             4109 ; 50   |#define HW_GP_B5_BITPOS 5
                             4110 ; 51   |#define HW_GP_B6_BITPOS 6
                             4111 ; 52   |#define HW_GP_B7_BITPOS 7
                             4112 ; 53   |#define HW_GP_B8_BITPOS 8
                             4113 ; 54   |#define HW_GP_B9_BITPOS 9
                             4114 ; 55   |#define HW_GP_B10_BITPOS 10
                             4115 ; 56   |#define HW_GP_B11_BITPOS 11
                             4116 ; 57   |#define HW_GP_B12_BITPOS 12
                             4117 ; 58   |#define HW_GP_B13_BITPOS 13
                             4118 ; 59   |#define HW_GP_B14_BITPOS 14
                             4119 ; 60   |#define HW_GP_B15_BITPOS 15
                             4120 ; 61   |#define HW_GP_B16_BITPOS 16
                             4121 ; 62   |#define HW_GP_B17_BITPOS 17
                             4122 ; 63   |#define HW_GP_B18_BITPOS 18
                             4123 ; 64   |#define HW_GP_B19_BITPOS 19
                             4124 ; 65   |#define HW_GP_B20_BITPOS 20
                             4125 ; 66   |#define HW_GP_B21_BITPOS 21
                             4126 ; 67   |#define HW_GP_B22_BITPOS 22
                             4127 ; 68   |#define HW_GP_B23_BITPOS 23
                             4128 ; 69   |
                             4129 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             4130 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             4131 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             4132 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             4133 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             4134 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             4135 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             4136 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             4137 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4138 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             4139 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             4140 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             4141 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             4142 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             4143 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             4144 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             4145 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             4146 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             4147 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             4148 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             4149 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             4150 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             4151 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             4152 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             4153 ; 94   |
                             4154 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             4155 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             4156 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             4157 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             4158 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             4159 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             4160 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             4161 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             4162 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             4163 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             4164 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             4165 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             4166 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             4167 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             4168 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             4169 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             4170 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             4171 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             4172 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             4173 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             4174 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             4175 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             4176 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             4177 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             4178 ; 119  |
                             4179 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             4180 ; 121  |//  GPIO 8mA Register Bit Positions
                             4181 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             4182 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             4183 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             4184 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             4185 ; 126  |
                             4186 ; 127  |
                             4187 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             4188 ; 129  |//  Logical GPIO numbers
                             4189 ; 130  |#define HW_GPIO_000 0
                             4190 ; 131  |#define HW_GPIO_001 1
                             4191 ; 132  |#define HW_GPIO_002 2
                             4192 ; 133  |#define HW_GPIO_003 3
                             4193 ; 134  |#define HW_GPIO_004 4
                             4194 ; 135  |#define HW_GPIO_005 5
                             4195 ; 136  |#define HW_GPIO_006 6
                             4196 ; 137  |#define HW_GPIO_007 7
                             4197 ; 138  |#define HW_GPIO_008 8
                             4198 ; 139  |#define HW_GPIO_009 9
                             4199 ; 140  |#define HW_GPIO_010 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4200 ; 141  |#define HW_GPIO_011 11
                             4201 ; 142  |#define HW_GPIO_012 12
                             4202 ; 143  |#define HW_GPIO_013 13
                             4203 ; 144  |#define HW_GPIO_014 14
                             4204 ; 145  |#define HW_GPIO_015 15
                             4205 ; 146  |#define HW_GPIO_016 16
                             4206 ; 147  |#define HW_GPIO_017 17
                             4207 ; 148  |#define HW_GPIO_018 18
                             4208 ; 149  |#define HW_GPIO_019 19
                             4209 ; 150  |#define HW_GPIO_020 20
                             4210 ; 151  |#define HW_GPIO_021 21
                             4211 ; 152  |#define HW_GPIO_022 22
                             4212 ; 153  |#define HW_GPIO_023 23
                             4213 ; 154  |#define HW_GPIO_024 24
                             4214 ; 155  |#define HW_GPIO_025 25
                             4215 ; 156  |#define HW_GPIO_026 26
                             4216 ; 157  |#define HW_GPIO_027 27
                             4217 ; 158  |#define HW_GPIO_028 28
                             4218 ; 159  |#define HW_GPIO_029 29
                             4219 ; 160  |#define HW_GPIO_030 30
                             4220 ; 161  |#define HW_GPIO_031 31
                             4221 ; 162  |#define HW_GPIO_032 32
                             4222 ; 163  |#define HW_GPIO_033 33
                             4223 ; 164  |#define HW_GPIO_034 34
                             4224 ; 165  |#define HW_GPIO_035 35
                             4225 ; 166  |#define HW_GPIO_036 36
                             4226 ; 167  |#define HW_GPIO_037 37
                             4227 ; 168  |#define HW_GPIO_038 38
                             4228 ; 169  |#define HW_GPIO_039 39
                             4229 ; 170  |#define HW_GPIO_040 40
                             4230 ; 171  |#define HW_GPIO_041 41
                             4231 ; 172  |#define HW_GPIO_042 42
                             4232 ; 173  |#define HW_GPIO_043 43
                             4233 ; 174  |#define HW_GPIO_044 44
                             4234 ; 175  |#define HW_GPIO_045 45
                             4235 ; 176  |#define HW_GPIO_046 46
                             4236 ; 177  |#define HW_GPIO_047 47
                             4237 ; 178  |#define HW_GPIO_048 48
                             4238 ; 179  |#define HW_GPIO_049 49
                             4239 ; 180  |#define HW_GPIO_050 50
                             4240 ; 181  |#define HW_GPIO_051 51
                             4241 ; 182  |#define HW_GPIO_052 52
                             4242 ; 183  |#define HW_GPIO_053 53
                             4243 ; 184  |#define HW_GPIO_054 54
                             4244 ; 185  |#define HW_GPIO_055 55
                             4245 ; 186  |#define HW_GPIO_056 56
                             4246 ; 187  |#define HW_GPIO_057 57
                             4247 ; 188  |#define HW_GPIO_058 58
                             4248 ; 189  |#define HW_GPIO_059 59
                             4249 ; 190  |#define HW_GPIO_060 60
                             4250 ; 191  |#define HW_GPIO_061 61
                             4251 ; 192  |#define HW_GPIO_062 62
                             4252 ; 193  |#define HW_GPIO_063 63
                             4253 ; 194  |#define HW_GPIO_064 64
                             4254 ; 195  |#define HW_GPIO_065 65
                             4255 ; 196  |#define HW_GPIO_066 66
                             4256 ; 197  |#define HW_GPIO_067 67
                             4257 ; 198  |#define HW_GPIO_068 68
                             4258 ; 199  |#define HW_GPIO_069 69
                             4259 ; 200  |#define HW_GPIO_070 70
                             4260 ; 201  |#define HW_GPIO_071 71
                             4261 ; 202  |#define HW_GPIO_072 72
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4262 ; 203  |#define HW_GPIO_073 73
                             4263 ; 204  |#define HW_GPIO_074 74
                             4264 ; 205  |#define HW_GPIO_075 75
                             4265 ; 206  |#define HW_GPIO_076 76
                             4266 ; 207  |#define HW_GPIO_077 77
                             4267 ; 208  |#define HW_GPIO_078 78
                             4268 ; 209  |#define HW_GPIO_079 79
                             4269 ; 210  |#define HW_GPIO_080 80
                             4270 ; 211  |#define HW_GPIO_081 81
                             4271 ; 212  |#define HW_GPIO_082 82
                             4272 ; 213  |#define HW_GPIO_083 83
                             4273 ; 214  |#define HW_GPIO_084 84
                             4274 ; 215  |#define HW_GPIO_085 85
                             4275 ; 216  |#define HW_GPIO_086 86
                             4276 ; 217  |#define HW_GPIO_087 87
                             4277 ; 218  |#define HW_GPIO_088 88
                             4278 ; 219  |#define HW_GPIO_089 89
                             4279 ; 220  |#define HW_GPIO_090 90
                             4280 ; 221  |#define HW_GPIO_091 91
                             4281 ; 222  |#define HW_GPIO_092 92
                             4282 ; 223  |#define HW_GPIO_093 93
                             4283 ; 224  |#define HW_GPIO_094 94
                             4284 ; 225  |#define HW_GPIO_095 95
                             4285 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             4286 ; 227  |
                             4287 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                             4288 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                             4289 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                             4290 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                             4291 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                             4292 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                             4293 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                             4294 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                             4295 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                             4296 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4297 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             4298 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                             4299 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                             4300 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                             4301 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                             4302 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                             4303 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                             4304 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                             4305 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4306 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                             4307 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4308 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             4309 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4310 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4311 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4312 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4313 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4314 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4315 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4316 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4317 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4318 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4319 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             4320 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4321 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4322 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4323 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4324 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4325 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4326 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4327 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4328 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4329 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4330 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             4331 ; 272  |
                             4332 ; 273  |#endif
                             4333 ; 274  |
                             4334 
                             4336 
                             4337 ; 23   |#include "regsi2c.h"
                             4338 
                             4340 
                             4341 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4342 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4343 ; 3    |// Filename: regsI2C.inc
                             4344 ; 4    |// Description: Register definitions for GPFLASH interface
                             4345 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4346 ; 6    |// The following naming conventions are followed in this file.
                             4347 ; 7    |// All registers are named using the format...
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4348 ; 8    |//     HW_<module>_<regname>
                             4349 ; 9    |// where <module> is the module name which can be any of the following...
                             4350 ; 10   |//     USB20
                             4351 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4352 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4353 ; 13   |// that module)
                             4354 ; 14   |// <regname> is the specific register within that module
                             4355 ; 15   |// We also define the following...
                             4356 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4357 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4358 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4359 ; 19   |// which does something else, and
                             4360 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4361 ; 21   |// which does something else.
                             4362 ; 22   |// Other rules
                             4363 ; 23   |//     All caps
                             4364 ; 24   |//     Numeric identifiers start at 0
                             4365 ; 25   |#if !(defined(regsi2cinc))
                             4366 ; 26   |#define regsi2cinc 1
                             4367 ; 27   |
                             4368 ; 28   |#include "types.h"
                             4369 
                             4371 
                             4372 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4373 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4374 ; 3    |//
                             4375 ; 4    |// Filename: types.h
                             4376 ; 5    |// Description: Standard data types
                             4377 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4378 ; 7    |
                             4379 ; 8    |#ifndef _TYPES_H
                             4380 ; 9    |#define _TYPES_H
                             4381 ; 10   |
                             4382 ; 11   |// TODO:  move this outta here!
                             4383 ; 12   |#if !defined(NOERROR)
                             4384 ; 13   |#define NOERROR 0
                             4385 ; 14   |#define SUCCESS 0
                             4386 ; 15   |#endif 
                             4387 ; 16   |#if !defined(SUCCESS)
                             4388 ; 17   |#define SUCCESS  0
                             4389 ; 18   |#endif
                             4390 ; 19   |#if !defined(ERROR)
                             4391 ; 20   |#define ERROR   -1
                             4392 ; 21   |#endif
                             4393 ; 22   |#if !defined(FALSE)
                             4394 ; 23   |#define FALSE 0
                             4395 ; 24   |#endif
                             4396 ; 25   |#if !defined(TRUE)
                             4397 ; 26   |#define TRUE  1
                             4398 ; 27   |#endif
                             4399 ; 28   |
                             4400 ; 29   |#if !defined(NULL)
                             4401 ; 30   |#define NULL 0
                             4402 ; 31   |#endif
                             4403 ; 32   |
                             4404 ; 33   |#define MAX_INT     0x7FFFFF
                             4405 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4406 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4407 ; 36   |#define MAX_ULONG   (-1) 
                             4408 ; 37   |
                             4409 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4410 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4411 ; 40   |
                             4412 ; 41   |
                             4413 ; 42   |#define BYTE    unsigned char       // btVarName
                             4414 ; 43   |#define CHAR    signed char         // cVarName
                             4415 ; 44   |#define USHORT  unsigned short      // usVarName
                             4416 ; 45   |#define SHORT   unsigned short      // sVarName
                             4417 ; 46   |#define WORD    unsigned int        // wVarName
                             4418 ; 47   |#define INT     signed int          // iVarName
                             4419 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4420 ; 49   |#define LONG    signed long         // lVarName
                             4421 ; 50   |#define BOOL    unsigned int        // bVarName
                             4422 ; 51   |#define FRACT   _fract              // frVarName
                             4423 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4424 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4425 ; 54   |#define FLOAT   float               // fVarName
                             4426 ; 55   |#define DBL     double              // dVarName
                             4427 ; 56   |#define ENUM    enum                // eVarName
                             4428 ; 57   |#define CMX     _complex            // cmxVarName
                             4429 ; 58   |typedef WORD UCS3;                   // 
                             4430 ; 59   |
                             4431 ; 60   |#define UINT16  unsigned short
                             4432 ; 61   |#define UINT8   unsigned char   
                             4433 ; 62   |#define UINT32  unsigned long
                             4434 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4435 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4436 ; 65   |#define WCHAR   UINT16
                             4437 ; 66   |
                             4438 ; 67   |//UINT128 is 16 bytes or 6 words
                             4439 ; 68   |typedef struct UINT128_3500 {   
                             4440 ; 69   |    int val[6];     
                             4441 ; 70   |} UINT128_3500;
                             4442 ; 71   |
                             4443 ; 72   |#define UINT128   UINT128_3500
                             4444 ; 73   |
                             4445 ; 74   |// Little endian word packed byte strings:   
                             4446 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4447 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4448 ; 77   |// Little endian word packed byte strings:   
                             4449 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4450 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4451 ; 80   |
                             4452 ; 81   |// Declare Memory Spaces To Use When Coding
                             4453 ; 82   |// A. Sector Buffers
                             4454 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4455 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4456 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4457 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4458 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4459 ; 88   |// B. Media DDI Memory
                             4460 ; 89   |#define MEDIA_DDI_MEM _Y
                             4461 ; 90   |
                             4462 ; 91   |
                             4463 ; 92   |
                             4464 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4465 ; 94   |// Examples of circular pointers:
                             4466 ; 95   |//    INT CIRC cpiVarName
                             4467 ; 96   |//    DWORD CIRC cpdwVarName
                             4468 ; 97   |
                             4469 ; 98   |#define RETCODE INT                 // rcVarName
                             4470 ; 99   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4471 ; 100  |// generic bitfield structure
                             4472 ; 101  |struct Bitfield {
                             4473 ; 102  |    unsigned int B0  :1;
                             4474 ; 103  |    unsigned int B1  :1;
                             4475 ; 104  |    unsigned int B2  :1;
                             4476 ; 105  |    unsigned int B3  :1;
                             4477 ; 106  |    unsigned int B4  :1;
                             4478 ; 107  |    unsigned int B5  :1;
                             4479 ; 108  |    unsigned int B6  :1;
                             4480 ; 109  |    unsigned int B7  :1;
                             4481 ; 110  |    unsigned int B8  :1;
                             4482 ; 111  |    unsigned int B9  :1;
                             4483 ; 112  |    unsigned int B10 :1;
                             4484 ; 113  |    unsigned int B11 :1;
                             4485 ; 114  |    unsigned int B12 :1;
                             4486 ; 115  |    unsigned int B13 :1;
                             4487 ; 116  |    unsigned int B14 :1;
                             4488 ; 117  |    unsigned int B15 :1;
                             4489 ; 118  |    unsigned int B16 :1;
                             4490 ; 119  |    unsigned int B17 :1;
                             4491 ; 120  |    unsigned int B18 :1;
                             4492 ; 121  |    unsigned int B19 :1;
                             4493 ; 122  |    unsigned int B20 :1;
                             4494 ; 123  |    unsigned int B21 :1;
                             4495 ; 124  |    unsigned int B22 :1;
                             4496 ; 125  |    unsigned int B23 :1;
                             4497 ; 126  |};
                             4498 ; 127  |
                             4499 ; 128  |union BitInt {
                             4500 ; 129  |        struct Bitfield B;
                             4501 ; 130  |        int        I;
                             4502 ; 131  |};
                             4503 ; 132  |
                             4504 ; 133  |#define MAX_MSG_LENGTH 10
                             4505 ; 134  |struct CMessage
                             4506 ; 135  |{
                             4507 ; 136  |        unsigned int m_uLength;
                             4508 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4509 ; 138  |};
                             4510 ; 139  |
                             4511 ; 140  |typedef struct {
                             4512 ; 141  |    WORD m_wLength;
                             4513 ; 142  |    WORD m_wMessage;
                             4514 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4515 ; 144  |} Message;
                             4516 ; 145  |
                             4517 ; 146  |struct MessageQueueDescriptor
                             4518 ; 147  |{
                             4519 ; 148  |        int *m_pBase;
                             4520 ; 149  |        int m_iModulo;
                             4521 ; 150  |        int m_iSize;
                             4522 ; 151  |        int *m_pHead;
                             4523 ; 152  |        int *m_pTail;
                             4524 ; 153  |};
                             4525 ; 154  |
                             4526 ; 155  |struct ModuleEntry
                             4527 ; 156  |{
                             4528 ; 157  |    int m_iSignaledEventMask;
                             4529 ; 158  |    int m_iWaitEventMask;
                             4530 ; 159  |    int m_iResourceOfCode;
                             4531 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4532 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             4533 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4534 ; 163  |    int m_uTimeOutHigh;
                             4535 ; 164  |    int m_uTimeOutLow;
                             4536 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4537 ; 166  |};
                             4538 ; 167  |
                             4539 ; 168  |union WaitMask{
                             4540 ; 169  |    struct B{
                             4541 ; 170  |        unsigned int m_bNone     :1;
                             4542 ; 171  |        unsigned int m_bMessage  :1;
                             4543 ; 172  |        unsigned int m_bTimer    :1;
                             4544 ; 173  |        unsigned int m_bButton   :1;
                             4545 ; 174  |    } B;
                             4546 ; 175  |    int I;
                             4547 ; 176  |} ;
                             4548 ; 177  |
                             4549 ; 178  |
                             4550 ; 179  |struct Button {
                             4551 ; 180  |        WORD wButtonEvent;
                             4552 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4553 ; 182  |};
                             4554 ; 183  |
                             4555 ; 184  |struct Message {
                             4556 ; 185  |        WORD wMsgLength;
                             4557 ; 186  |        WORD wMsgCommand;
                             4558 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4559 ; 188  |};
                             4560 ; 189  |
                             4561 ; 190  |union EventTypes {
                             4562 ; 191  |        struct CMessage msg;
                             4563 ; 192  |        struct Button Button ;
                             4564 ; 193  |        struct Message Message;
                             4565 ; 194  |};
                             4566 ; 195  |
                             4567 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4568 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4569 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4570 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4571 ; 200  |
                             4572 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4573 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4574 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4575 ; 204  |
                             4576 ; 205  |#if DEBUG
                             4577 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4578 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4579 ; 208  |#else 
                             4580 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             4581 ; 210  |#define DebugBuildAssert(x)    
                             4582 ; 211  |#endif
                             4583 ; 212  |
                             4584 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4585 ; 214  |//  #pragma asm
                             4586 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4587 ; 216  |//  #pragma endasm
                             4588 ; 217  |
                             4589 ; 218  |
                             4590 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4591 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             4592 ; 221  |#elif defined(COLOR_65K)
                             4593 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             4594 ; 223  |#else
                             4595 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             4596 ; 225  |#endif
                             4597 ; 226  |    
                             4598 ; 227  |#endif // #ifndef _TYPES_H
                             4599 
                             4601 
                             4602 ; 29   |
                             4603 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             4604 ; 31   |////   I2C STMP Registers
                             4605 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             4606 ; 33   |
                             4607 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                             4608 ; 35   |
                             4609 ; 36   |
                             4610 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                             4611 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                             4612 ; 39   |
                             4613 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                             4614 ; 41   |
                             4615 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                             4616 ; 43   |
                             4617 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                             4618 ; 45   |
                             4619 ; 46   |typedef union               /* I2C Clock Divider Register */
                             4620 ; 47   |{
                             4621 ; 48   |    struct {
                             4622 ; 49   |        int                :1; 
                             4623 ; 50   |        unsigned FACT      :8;
                             4624 ; 51   |    } B;
                             4625 ; 52   |    int I;
                             4626 ; 53   |    unsigned U;
                             4627 ; 54   |} i2cdivr_type;
                             4628 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Re
                                  gisters        */
                             4629 ; 56   |
                             4630 ; 57   |
                             4631 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                             4632 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                             4633 ; 60   |
                             4634 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                             4635 ; 62   |
                             4636 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                             4637 ; 64   |
                             4638 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                             4639 ; 66   |
                             4640 ; 67   |typedef union               /* I2C Data Register */
                             4641 ; 68   |{
                             4642 ; 69   |    struct {
                             4643 ; 70   |         unsigned DATA :24; 
                             4644 ; 71   |    } B;
                             4645 ; 72   |    int I;
                             4646 ; 73   |    unsigned U;
                             4647 ; 74   |} i2cdatr_type;
                             4648 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers
                                   (I2CDAT)      */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4649 ; 76   |
                             4650 ; 77   |
                             4651 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                             4652 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                             4653 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                             4654 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
                             4655 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                             4656 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                             4657 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                             4658 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                             4659 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                             4660 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                             4661 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                             4662 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                             4663 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                             4664 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                             4665 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                             4666 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                             4667 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                             4668 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                             4669 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                             4670 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                             4671 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                             4672 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                             4673 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                             4674 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                             4675 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                             4676 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                             4677 ; 104  |
                             4678 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                             4679 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                             4680 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                             4681 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                             4682 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                             4683 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                             4684 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                             4685 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                             4686 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                             4687 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                             4688 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                             4689 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                             4690 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                             4691 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                             4692 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                             4693 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                             4694 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                             4695 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                             4696 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                             4697 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                             4698 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                             4699 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                             4700 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                             4701 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                             4702 ; 129  |
                             4703 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                             4704 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                             4705 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                             4706 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                             4707 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                             4708 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                             4709 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                             4710 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4711 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                             4712 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                             4713 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                             4714 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                             4715 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                             4716 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
                             4717 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                             4718 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                             4719 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                             4720 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                             4721 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                             4722 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                             4723 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                             4724 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                             4725 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                             4726 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                             4727 ; 154  |
                             4728 ; 155  |typedef union               /* I2C Control Register         */
                             4729 ; 156  |{
                             4730 ; 157  |    struct {
                             4731 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                             4732 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                             4733 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                             4734 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                             4735 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                             4736 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                             4737 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                             4738 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                             4739 ; 166  |       int RWN         :1; /* Read/Not Write           */
                             4740 ; 167  |       unsigned WL     :2; /* Word Length              */
                             4741 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                             4742 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                             4743 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                             4744 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                             4745 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                             4746 ; 173  |        int LWORD       :1; /* Last Word                */
                             4747 ; 174  |        int SUBA        :1; /* Sub Address              */
                             4748 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                             4749 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                             4750 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                             4751 ; 178  |    } B;
                             4752 ; 179  |    int I;
                             4753 ; 180  |    unsigned U;
                             4754 ; 181  |} i2ccsr_type;
                             4755 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status 
                                  Register (I2CCSR) */
                             4756 ; 183  |
                             4757 ; 184  |#endif
                             4758 
                             4760 
                             4761 ; 24   |#include "regsi2s.h"
                             4762 
                             4764 
                             4765 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4766 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4767 ; 3    |// Filename: regsi2s.inc
                             4768 ; 4    |// Description: Register definitions for I2S interface
                             4769 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4770 ; 6    |// The following naming conventions are followed in this file.
                             4771 ; 7    |// All registers are named using the format...
                             4772 ; 8    |//     HW_<module>_<regname>
                             4773 ; 9    |// where <module> is the module name which can be any of the following...
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4774 ; 10   |//     USB20
                             4775 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4776 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4777 ; 13   |// that module)
                             4778 ; 14   |// <regname> is the specific register within that module
                             4779 ; 15   |// We also define the following...
                             4780 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4781 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4782 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4783 ; 19   |// which does something else, and
                             4784 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4785 ; 21   |// which does something else.
                             4786 ; 22   |// Other rules
                             4787 ; 23   |//     All caps
                             4788 ; 24   |//     Numeric identifiers start at 0
                             4789 ; 25   |#if !(defined(regsi2sinc))
                             4790 ; 26   |#define regsi2sinc 1
                             4791 ; 27   |
                             4792 ; 28   |#include "types.h"
                             4793 
                             4795 
                             4796 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4797 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4798 ; 3    |//
                             4799 ; 4    |// Filename: types.h
                             4800 ; 5    |// Description: Standard data types
                             4801 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4802 ; 7    |
                             4803 ; 8    |#ifndef _TYPES_H
                             4804 ; 9    |#define _TYPES_H
                             4805 ; 10   |
                             4806 ; 11   |// TODO:  move this outta here!
                             4807 ; 12   |#if !defined(NOERROR)
                             4808 ; 13   |#define NOERROR 0
                             4809 ; 14   |#define SUCCESS 0
                             4810 ; 15   |#endif 
                             4811 ; 16   |#if !defined(SUCCESS)
                             4812 ; 17   |#define SUCCESS  0
                             4813 ; 18   |#endif
                             4814 ; 19   |#if !defined(ERROR)
                             4815 ; 20   |#define ERROR   -1
                             4816 ; 21   |#endif
                             4817 ; 22   |#if !defined(FALSE)
                             4818 ; 23   |#define FALSE 0
                             4819 ; 24   |#endif
                             4820 ; 25   |#if !defined(TRUE)
                             4821 ; 26   |#define TRUE  1
                             4822 ; 27   |#endif
                             4823 ; 28   |
                             4824 ; 29   |#if !defined(NULL)
                             4825 ; 30   |#define NULL 0
                             4826 ; 31   |#endif
                             4827 ; 32   |
                             4828 ; 33   |#define MAX_INT     0x7FFFFF
                             4829 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4830 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4831 ; 36   |#define MAX_ULONG   (-1) 
                             4832 ; 37   |
                             4833 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4834 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4835 ; 40   |
                             4836 ; 41   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4837 ; 42   |#define BYTE    unsigned char       // btVarName
                             4838 ; 43   |#define CHAR    signed char         // cVarName
                             4839 ; 44   |#define USHORT  unsigned short      // usVarName
                             4840 ; 45   |#define SHORT   unsigned short      // sVarName
                             4841 ; 46   |#define WORD    unsigned int        // wVarName
                             4842 ; 47   |#define INT     signed int          // iVarName
                             4843 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4844 ; 49   |#define LONG    signed long         // lVarName
                             4845 ; 50   |#define BOOL    unsigned int        // bVarName
                             4846 ; 51   |#define FRACT   _fract              // frVarName
                             4847 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4848 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4849 ; 54   |#define FLOAT   float               // fVarName
                             4850 ; 55   |#define DBL     double              // dVarName
                             4851 ; 56   |#define ENUM    enum                // eVarName
                             4852 ; 57   |#define CMX     _complex            // cmxVarName
                             4853 ; 58   |typedef WORD UCS3;                   // 
                             4854 ; 59   |
                             4855 ; 60   |#define UINT16  unsigned short
                             4856 ; 61   |#define UINT8   unsigned char   
                             4857 ; 62   |#define UINT32  unsigned long
                             4858 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4859 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4860 ; 65   |#define WCHAR   UINT16
                             4861 ; 66   |
                             4862 ; 67   |//UINT128 is 16 bytes or 6 words
                             4863 ; 68   |typedef struct UINT128_3500 {   
                             4864 ; 69   |    int val[6];     
                             4865 ; 70   |} UINT128_3500;
                             4866 ; 71   |
                             4867 ; 72   |#define UINT128   UINT128_3500
                             4868 ; 73   |
                             4869 ; 74   |// Little endian word packed byte strings:   
                             4870 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4871 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4872 ; 77   |// Little endian word packed byte strings:   
                             4873 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4874 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4875 ; 80   |
                             4876 ; 81   |// Declare Memory Spaces To Use When Coding
                             4877 ; 82   |// A. Sector Buffers
                             4878 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4879 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4880 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4881 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4882 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4883 ; 88   |// B. Media DDI Memory
                             4884 ; 89   |#define MEDIA_DDI_MEM _Y
                             4885 ; 90   |
                             4886 ; 91   |
                             4887 ; 92   |
                             4888 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4889 ; 94   |// Examples of circular pointers:
                             4890 ; 95   |//    INT CIRC cpiVarName
                             4891 ; 96   |//    DWORD CIRC cpdwVarName
                             4892 ; 97   |
                             4893 ; 98   |#define RETCODE INT                 // rcVarName
                             4894 ; 99   |
                             4895 ; 100  |// generic bitfield structure
                             4896 ; 101  |struct Bitfield {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4897 ; 102  |    unsigned int B0  :1;
                             4898 ; 103  |    unsigned int B1  :1;
                             4899 ; 104  |    unsigned int B2  :1;
                             4900 ; 105  |    unsigned int B3  :1;
                             4901 ; 106  |    unsigned int B4  :1;
                             4902 ; 107  |    unsigned int B5  :1;
                             4903 ; 108  |    unsigned int B6  :1;
                             4904 ; 109  |    unsigned int B7  :1;
                             4905 ; 110  |    unsigned int B8  :1;
                             4906 ; 111  |    unsigned int B9  :1;
                             4907 ; 112  |    unsigned int B10 :1;
                             4908 ; 113  |    unsigned int B11 :1;
                             4909 ; 114  |    unsigned int B12 :1;
                             4910 ; 115  |    unsigned int B13 :1;
                             4911 ; 116  |    unsigned int B14 :1;
                             4912 ; 117  |    unsigned int B15 :1;
                             4913 ; 118  |    unsigned int B16 :1;
                             4914 ; 119  |    unsigned int B17 :1;
                             4915 ; 120  |    unsigned int B18 :1;
                             4916 ; 121  |    unsigned int B19 :1;
                             4917 ; 122  |    unsigned int B20 :1;
                             4918 ; 123  |    unsigned int B21 :1;
                             4919 ; 124  |    unsigned int B22 :1;
                             4920 ; 125  |    unsigned int B23 :1;
                             4921 ; 126  |};
                             4922 ; 127  |
                             4923 ; 128  |union BitInt {
                             4924 ; 129  |        struct Bitfield B;
                             4925 ; 130  |        int        I;
                             4926 ; 131  |};
                             4927 ; 132  |
                             4928 ; 133  |#define MAX_MSG_LENGTH 10
                             4929 ; 134  |struct CMessage
                             4930 ; 135  |{
                             4931 ; 136  |        unsigned int m_uLength;
                             4932 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4933 ; 138  |};
                             4934 ; 139  |
                             4935 ; 140  |typedef struct {
                             4936 ; 141  |    WORD m_wLength;
                             4937 ; 142  |    WORD m_wMessage;
                             4938 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4939 ; 144  |} Message;
                             4940 ; 145  |
                             4941 ; 146  |struct MessageQueueDescriptor
                             4942 ; 147  |{
                             4943 ; 148  |        int *m_pBase;
                             4944 ; 149  |        int m_iModulo;
                             4945 ; 150  |        int m_iSize;
                             4946 ; 151  |        int *m_pHead;
                             4947 ; 152  |        int *m_pTail;
                             4948 ; 153  |};
                             4949 ; 154  |
                             4950 ; 155  |struct ModuleEntry
                             4951 ; 156  |{
                             4952 ; 157  |    int m_iSignaledEventMask;
                             4953 ; 158  |    int m_iWaitEventMask;
                             4954 ; 159  |    int m_iResourceOfCode;
                             4955 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4956 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             4957 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4958 ; 163  |    int m_uTimeOutHigh;
                             4959 ; 164  |    int m_uTimeOutLow;
                             4960 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4961 ; 166  |};
                             4962 ; 167  |
                             4963 ; 168  |union WaitMask{
                             4964 ; 169  |    struct B{
                             4965 ; 170  |        unsigned int m_bNone     :1;
                             4966 ; 171  |        unsigned int m_bMessage  :1;
                             4967 ; 172  |        unsigned int m_bTimer    :1;
                             4968 ; 173  |        unsigned int m_bButton   :1;
                             4969 ; 174  |    } B;
                             4970 ; 175  |    int I;
                             4971 ; 176  |} ;
                             4972 ; 177  |
                             4973 ; 178  |
                             4974 ; 179  |struct Button {
                             4975 ; 180  |        WORD wButtonEvent;
                             4976 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4977 ; 182  |};
                             4978 ; 183  |
                             4979 ; 184  |struct Message {
                             4980 ; 185  |        WORD wMsgLength;
                             4981 ; 186  |        WORD wMsgCommand;
                             4982 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4983 ; 188  |};
                             4984 ; 189  |
                             4985 ; 190  |union EventTypes {
                             4986 ; 191  |        struct CMessage msg;
                             4987 ; 192  |        struct Button Button ;
                             4988 ; 193  |        struct Message Message;
                             4989 ; 194  |};
                             4990 ; 195  |
                             4991 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4992 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4993 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4994 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4995 ; 200  |
                             4996 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4997 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4998 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4999 ; 204  |
                             5000 ; 205  |#if DEBUG
                             5001 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5002 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5003 ; 208  |#else 
                             5004 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5005 ; 210  |#define DebugBuildAssert(x)    
                             5006 ; 211  |#endif
                             5007 ; 212  |
                             5008 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5009 ; 214  |//  #pragma asm
                             5010 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5011 ; 216  |//  #pragma endasm
                             5012 ; 217  |
                             5013 ; 218  |
                             5014 ; 219  |#ifdef COLOR_262K
                             5015 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5016 ; 221  |#elif defined(COLOR_65K)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5017 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5018 ; 223  |#else
                             5019 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5020 ; 225  |#endif
                             5021 ; 226  |    
                             5022 ; 227  |#endif // #ifndef _TYPES_H
                             5023 
                             5025 
                             5026 ; 29   |
                             5027 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                             5028 ; 31   |////  I2S Registers (SAI)
                             5029 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                             5030 ; 33   |
                             5031 ; 34   |
                             5032 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                             5033 ; 36   |
                             5034 ; 37   |
                             5035 ; 38   |
                             5036 ; 39   |
                             5037 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                             5038 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                             5039 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                             5040 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                             5041 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                             5042 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                             5043 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                             5044 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                             5045 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                             5046 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                             5047 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                             5048 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                             5049 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                             5050 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                             5051 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                             5052 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                             5053 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                             5054 ; 57   |
                             5055 ; 58   |
                             5056 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                             5057 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                             5058 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                             5059 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                             5060 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                             5061 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                             5062 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                             5063 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                             5064 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                             5065 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                             5066 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                             5067 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                             5068 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                             5069 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                             5070 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                             5071 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                             5072 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                             5073 ; 76   |
                             5074 ; 77   |
                             5075 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                             5076 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                             5077 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5078 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                             5079 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                                  
                             5080 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                             5081 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                             5082 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                             5083 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                             5084 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                             5085 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                             5086 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                             5087 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                                  
                             5088 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                             5089 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                             5090 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                                  
                             5091 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                                  
                             5092 ; 95   |
                             5093 ; 96   |
                             5094 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                             5095 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                             5096 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                             5097 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                             5098 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                             5099 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                             5100 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                             5101 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                             5102 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                             5103 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                             5104 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                             5105 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                             5106 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                             5107 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                             5108 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                             5109 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                             5110 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                             5111 ; 114  |
                             5112 ; 115  |typedef union
                             5113 ; 116  |{
                             5114 ; 117  |    struct {
                             5115 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                             5116 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                             5117 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                             5118 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                             5119 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                             5120 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                             5121 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                             5122 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                             5123 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                             5124 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                             5125 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                                  
                             5126 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                             5127 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                             5128 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                             5129 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                             5130 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                             5131 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                             5132 ; 135  |    } B;
                             5133 ; 136  |    int I;
                             5134 ; 137  |    unsigned U;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5135 ; 138  |} saircsr_type;
                             5136 ; 139  |
                             5137 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive C
                                  SR         */
                             5138 ; 141  |
                             5139 ; 142  |typedef union
                             5140 ; 143  |{
                             5141 ; 144  |    struct {
                             5142 ; 145  |        unsigned SAI :24;
                             5143 ; 146  |    } B;
                             5144 ; 147  |    int I;
                             5145 ; 148  |    unsigned U;
                             5146 ; 149  |} saixr_type;
                             5147 ; 150  |
                             5148 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received
                                   data reg 0 */
                             5149 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received
                                   data reg 1 */
                             5150 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received
                                   data reg 2 */
                             5151 ; 154  |
                             5152 ; 155  |
                             5153 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                             5154 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                             5155 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                             5156 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                             5157 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                             5158 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                             5159 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                             5160 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                             5161 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                             5162 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                             5163 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                             5164 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                             5165 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                             5166 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                             5167 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                             5168 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                             5169 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                             5170 ; 173  |
                             5171 ; 174  |
                             5172 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                             5173 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                             5174 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                             5175 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                             5176 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                             5177 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                             5178 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                             5179 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                             5180 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                             5181 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                             5182 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                             5183 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                             5184 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                             5185 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                             5186 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                             5187 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                             5188 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                             5189 ; 192  |
                             5190 ; 193  |
                             5191 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                             5192 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5193 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                             5194 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                             5195 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                                  
                             5196 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                             5197 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                             5198 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                             5199 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                             5200 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                             5201 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                             5202 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                             5203 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                                  
                             5204 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                             5205 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                             5206 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                                  
                             5207 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                                  
                             5208 ; 211  |
                             5209 ; 212  |
                             5210 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                             5211 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                             5212 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                             5213 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                             5214 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                             5215 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                             5216 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                             5217 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                             5218 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                             5219 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                             5220 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                             5221 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                             5222 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                             5223 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                             5224 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                             5225 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                             5226 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                             5227 ; 230  |
                             5228 ; 231  |
                             5229 ; 232  |typedef union
                             5230 ; 233  |{
                             5231 ; 234  |    struct {
                             5232 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                             5233 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                             5234 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                             5235 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                             5236 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                             5237 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                             5238 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction
                                   
                             5239 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                             5240 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                             5241 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                             5242 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justificat
                                  ion
                             5243 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                             5244 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                             5245 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                             5246 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                             5247 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                             5248 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5249 ; 252  |    } B;
                             5250 ; 253  |    int I;
                             5251 ; 254  |    unsigned U;
                             5252 ; 255  |} saitcsr_type;
                             5253 ; 256  |
                             5254 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR 
                                       */
                             5255 ; 258  |
                             5256 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit
                                   data reg 0 */
                             5257 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit
                                   data reg 1 */
                             5258 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit
                                   data reg 2 */
                             5259 ; 262  |
                             5260 ; 263  |#endif
                             5261 
                             5263 
                             5264 ; 25   |#include "regsicoll.h"
                             5265 
                             5267 
                             5268 ; 1    |#if !defined(__REGS_ICOLL_INC)
                             5269 ; 2    |#define __REGS_ICOLL_INC 1
                             5270 ; 3    |
                             5271 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             5272 ; 5    |//  Interrupt Collector Registers
                             5273 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             5274 ; 7    |
                             5275 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                             5276 ; 9    |
                             5277 ; 10   |
                             5278 ; 11   |
                             5279 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                             5280 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                             5281 ; 14   |
                             5282 ; 15   |typedef union
                             5283 ; 16   |{
                             5284 ; 17   |    struct {
                             5285 ; 18   |        int SEN0        :1;
                             5286 ; 19   |        int SEN1        :1;
                             5287 ; 20   |        int SEN2        :1;
                             5288 ; 21   |        int SEN3        :1;
                             5289 ; 22   |        int SEN4        :1;
                             5290 ; 23   |        int SEN5        :1;
                             5291 ; 24   |        int SEN6        :1;
                             5292 ; 25   |        int SEN7        :1;
                             5293 ; 26   |        int SEN8        :1;
                             5294 ; 27   |        int SEN9        :1;
                             5295 ; 28   |        int SEN10       :1;
                             5296 ; 29   |        int SEN11       :1;
                             5297 ; 30   |        int SEN12       :1;
                             5298 ; 31   |        int SEN13       :1;
                             5299 ; 32   |        int SEN14       :1;
                             5300 ; 33   |        int SEN15       :1;
                             5301 ; 34   |        int SEN16       :1;
                             5302 ; 35   |        int SEN17       :1;
                             5303 ; 36   |        int SEN18       :1;
                             5304 ; 37   |        int SEN19       :1;
                             5305 ; 38   |        int SEN20       :1;
                             5306 ; 39   |        int SEN21       :1;
                             5307 ; 40   |        int SEN22       :1;
                             5308 ; 41   |        int SEN23       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5309 ; 42   |    } B;
                             5310 ; 43   |    int I;
                             5311 ; 44   |} iclenable0_type;
                             5312 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt
                                   Priority Register Core   */
                             5313 ; 46   |
                             5314 ; 47   |
                             5315 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                             5316 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                             5317 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                             5318 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                             5319 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                             5320 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                             5321 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                             5322 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                             5323 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                             5324 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                             5325 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                             5326 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                             5327 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                             5328 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                             5329 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                             5330 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                             5331 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                             5332 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                             5333 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                             5334 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                             5335 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                             5336 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                             5337 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                             5338 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                             5339 ; 72   |
                             5340 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                             5341 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                             5342 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                             5343 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                             5344 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                             5345 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                             5346 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                             5347 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                             5348 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                             5349 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                             5350 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                             5351 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                             5352 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                             5353 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                             5354 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                             5355 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                             5356 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                             5357 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                             5358 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                             5359 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                             5360 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                             5361 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                             5362 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                             5363 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                             5364 ; 97   |
                             5365 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                             5366 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                             5367 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                             5368 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                             5369 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5370 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                             5371 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                             5372 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                             5373 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                             5374 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                             5375 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                             5376 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                             5377 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                             5378 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                             5379 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                             5380 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                             5381 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                             5382 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                             5383 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                             5384 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                             5385 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                             5386 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                             5387 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                             5388 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                             5389 ; 122  |
                             5390 ; 123  |
                             5391 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             5392 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                             5393 ; 126  |typedef union
                             5394 ; 127  |{
                             5395 ; 128  |    struct {
                             5396 ; 129  |        
                             5397 ; 130  |        int SEN24       :1;
                             5398 ; 131  |        int SEN25       :1;
                             5399 ; 132  |        int SEN26       :1;
                             5400 ; 133  |        int SEN27       :1;
                             5401 ; 134  |        int SEN28       :1;
                             5402 ; 135  |        int SEN29       :1;
                             5403 ; 136  |        int SEN30       :1;
                             5404 ; 137  |        int SEN31       :1;
                             5405 ; 138  |        int SEN32       :1;
                             5406 ; 139  |        int SEN33       :1;
                             5407 ; 140  |    } B;
                             5408 ; 141  |    int I;
                             5409 ; 142  |} iclenable1_type;
                             5410 ; 143  |
                             5411 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interru
                                  pt Priority Register Core    */
                             5412 ; 145  |
                             5413 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                             5414 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                             5415 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                             5416 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                             5417 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                             5418 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                             5419 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                             5420 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                             5421 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                             5422 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                             5423 ; 156  |
                             5424 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                             5425 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                             5426 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                             5427 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                             5428 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                             5429 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                             5430 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5431 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                             5432 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                             5433 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                             5434 ; 167  |
                             5435 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                             5436 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                             5437 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                             5438 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                             5439 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                             5440 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                             5441 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                             5442 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                             5443 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                             5444 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                             5445 ; 178  |
                             5446 ; 179  |
                             5447 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             5448 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                             5449 ; 182  |typedef union
                             5450 ; 183  |{
                             5451 ; 184  |    struct {
                             5452 ; 185  |        int SST0        :1;
                             5453 ; 186  |        int SST1        :1;
                             5454 ; 187  |        int SST2        :1;
                             5455 ; 188  |        int SST3        :1;
                             5456 ; 189  |        int SST4        :1;
                             5457 ; 190  |        int SST5        :1;
                             5458 ; 191  |        int SST6        :1;
                             5459 ; 192  |        int SST7        :1;
                             5460 ; 193  |        int SST8        :1;
                             5461 ; 194  |        int SST9        :1;
                             5462 ; 195  |        int SST10       :1;
                             5463 ; 196  |        int SST11       :1;
                             5464 ; 197  |        int SST12       :1;
                             5465 ; 198  |        int SST13       :1;
                             5466 ; 199  |        int SST14       :1;
                             5467 ; 200  |        int SST15       :1;
                             5468 ; 201  |        int SST16       :1;
                             5469 ; 202  |        int SST17       :1;
                             5470 ; 203  |        int SST18       :1;
                             5471 ; 204  |        int SST19       :1;
                             5472 ; 205  |        int SST20       :1;
                             5473 ; 206  |        int SST21       :1;
                             5474 ; 207  |        int SST22       :1;
                             5475 ; 208  |        int SST23       :1;
                             5476 ; 209  |    } B;
                             5477 ; 210  |    int I;
                             5478 ; 211  |} iclstatus0_type;
                             5479 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interru
                                  pt Priority Register Core */
                             5480 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                             5481 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                             5482 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                             5483 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                             5484 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                             5485 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                             5486 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                             5487 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                             5488 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                             5489 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                             5490 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                             5491 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5492 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                             5493 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                             5494 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                             5495 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                             5496 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                             5497 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                             5498 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                             5499 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                             5500 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                             5501 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                             5502 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                             5503 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                             5504 ; 237  |
                             5505 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                             5506 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                             5507 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                             5508 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                             5509 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                             5510 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                             5511 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                             5512 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                             5513 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                             5514 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                             5515 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                             5516 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                             5517 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                             5518 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                             5519 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                             5520 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                             5521 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                             5522 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                             5523 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                             5524 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                             5525 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                             5526 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                             5527 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                             5528 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                             5529 ; 262  |
                             5530 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                             5531 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                             5532 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                             5533 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                             5534 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                             5535 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                             5536 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                             5537 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                             5538 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                             5539 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                             5540 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                             5541 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                             5542 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                             5543 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                             5544 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                             5545 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                             5546 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                             5547 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                             5548 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                             5549 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                             5550 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                             5551 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                             5552 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                             5553 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5554 ; 287  |
                             5555 ; 288  |
                             5556 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                             5557 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                             5558 ; 291  |typedef union
                             5559 ; 292  |{
                             5560 ; 293  |    struct {
                             5561 ; 294  |        int SST24       :1;
                             5562 ; 295  |        int SST25       :1;
                             5563 ; 296  |        int SST26       :1;
                             5564 ; 297  |        int SST27       :1;
                             5565 ; 298  |        int SST28       :1;
                             5566 ; 299  |        int SST29       :1;
                             5567 ; 300  |        int SST30       :1;
                             5568 ; 301  |        int SST31       :1;
                             5569 ; 302  |        int SST32       :1;
                             5570 ; 303  |        int SST33       :1;
                             5571 ; 304  |    } B;
                             5572 ; 305  |    int I;
                             5573 ; 306  |} iclstatus1_type;
                             5574 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interru
                                  pt Priority Register Core */
                             5575 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                             5576 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                             5577 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                             5578 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                             5579 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                             5580 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                             5581 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                             5582 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                             5583 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                             5584 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                             5585 ; 318  |
                             5586 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                             5587 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                             5588 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                             5589 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                             5590 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                             5591 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                             5592 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                             5593 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                             5594 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                             5595 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                             5596 ; 329  |
                             5597 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                             5598 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                             5599 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                             5600 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                             5601 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                             5602 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                             5603 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                             5604 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                             5605 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                             5606 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                             5607 ; 340  |
                             5608 ; 341  |
                             5609 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                             5610 ; 343  |//  Interrupt Collector Priority Defs
                             5611 ; 344  |typedef union
                             5612 ; 345  |{
                             5613 ; 346  |    struct {
                             5614 ; 347  |        unsigned S0P    :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5615 ; 348  |        unsigned S1P    :3;
                             5616 ; 349  |        unsigned S2P    :3;
                             5617 ; 350  |        unsigned S3P    :3;
                             5618 ; 351  |        unsigned S4P    :3;
                             5619 ; 352  |        unsigned S5P    :3;
                             5620 ; 353  |        unsigned S6P    :3;
                             5621 ; 354  |        unsigned S7P    :3;
                             5622 ; 355  |    } B;
                             5623 ; 356  |    int I;
                             5624 ; 357  |
                             5625 ; 358  |} iclprior0_type;
                             5626 ; 359  |
                             5627 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrup
                                  t Collector Register 0 Priority   */
                             5628 ; 361  |
                             5629 ; 362  |#define HW_ICLPRIORR_SP_0 0
                             5630 ; 363  |#define HW_ICLPRIORR_SP_1 1
                             5631 ; 364  |#define HW_ICLPRIORR_SP_2 2
                             5632 ; 365  |#define HW_ICLPRIORR_SP_3 3
                             5633 ; 366  |#define HW_ICLPRIORR_SP_4 4
                             5634 ; 367  |#define HW_ICLPRIORR_SP_5 5
                             5635 ; 368  |#define HW_ICLPRIORR_SP_6 6
                             5636 ; 369  |#define HW_ICLPRIORR_SP_7 7
                             5637 ; 370  |
                             5638 ; 371  |
                             5639 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                             5640 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                             5641 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                             5642 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                             5643 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                             5644 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                             5645 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                             5646 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                             5647 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                             5648 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                             5649 ; 382  |
                             5650 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                             5651 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                             5652 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                             5653 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                             5654 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                             5655 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                             5656 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                             5657 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                             5658 ; 391  |
                             5659 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                             5660 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                             5661 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                             5662 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                             5663 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                             5664 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                             5665 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                             5666 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                             5667 ; 400  |
                             5668 ; 401  |
                             5669 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                             5670 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                             5671 ; 404  |typedef union
                             5672 ; 405  |{
                             5673 ; 406  |    struct {
                             5674 ; 407  |        unsigned S8P    :3;
                             5675 ; 408  |        unsigned S9P    :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5676 ; 409  |        unsigned S10P   :3;
                             5677 ; 410  |        unsigned S11P   :3;
                             5678 ; 411  |        unsigned S12P   :3;
                             5679 ; 412  |        unsigned S13P   :3;
                             5680 ; 413  |        unsigned S14P   :3;
                             5681 ; 414  |        unsigned S15P   :3;
                             5682 ; 415  |    } B;
                             5683 ; 416  |    int I;
                             5684 ; 417  |} iclprior1_type;
                             5685 ; 418  |
                             5686 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrup
                                  t Collector Register 1 Priority   */
                             5687 ; 420  |
                             5688 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                             5689 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                             5690 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                             5691 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                             5692 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                             5693 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                             5694 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                             5695 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                             5696 ; 429  |
                             5697 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                             5698 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                             5699 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                             5700 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                             5701 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                             5702 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                             5703 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                             5704 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                             5705 ; 438  |
                             5706 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                             5707 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                             5708 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                             5709 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                             5710 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                             5711 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                             5712 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                             5713 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                             5714 ; 447  |
                             5715 ; 448  |
                             5716 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                             5717 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                             5718 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                             5719 ; 452  |{
                             5720 ; 453  |    struct {
                             5721 ; 454  |        unsigned S16P   :3;
                             5722 ; 455  |        unsigned S17P   :3;
                             5723 ; 456  |        unsigned S18P   :3;
                             5724 ; 457  |        unsigned S19P   :3;
                             5725 ; 458  |        unsigned S20P   :3;
                             5726 ; 459  |        unsigned S21P   :3;
                             5727 ; 460  |        unsigned S22P   :3;
                             5728 ; 461  |        unsigned S23P   :3;
                             5729 ; 462  |    } B;
                             5730 ; 463  |    int I;
                             5731 ; 464  |} iclprior2_type;
                             5732 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrup
                                  t Collector Register 2 Priority   */
                             5733 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                             5734 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                             5735 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5736 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                             5737 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                             5738 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                             5739 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                             5740 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                             5741 ; 474  |
                             5742 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                             5743 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                             5744 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                             5745 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                             5746 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                             5747 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                             5748 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                             5749 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                             5750 ; 483  |
                             5751 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                             5752 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                             5753 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                             5754 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                             5755 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                             5756 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                             5757 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                             5758 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                             5759 ; 492  |
                             5760 ; 493  |
                             5761 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                             5762 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                             5763 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5764 ; 497  |{
                             5765 ; 498  |    struct {
                             5766 ; 499  |        unsigned S24P   :3;
                             5767 ; 500  |        unsigned S25P   :3;
                             5768 ; 501  |        unsigned S26P   :3;
                             5769 ; 502  |        unsigned S27P   :3;
                             5770 ; 503  |        unsigned S28P   :3;
                             5771 ; 504  |        unsigned S29P   :3;
                             5772 ; 505  |        unsigned S30P   :3;
                             5773 ; 506  |        unsigned S31P   :3;
                             5774 ; 507  |    } B;
                             5775 ; 508  |    int I;
                             5776 ; 509  |} iclprior3_type;
                             5777 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrup
                                  t Collector Register 3 Priority   */
                             5778 ; 511  |
                             5779 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                             5780 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             5781 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             5782 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             5783 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             5784 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             5785 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             5786 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             5787 ; 520  |
                             5788 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             5789 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                             5790 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             5791 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             5792 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             5793 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                             5794 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             5795 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             5796 ; 529  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5797 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             5798 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             5799 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             5800 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             5801 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             5802 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             5803 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                             5804 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             5805 ; 538  |
                             5806 ; 539  |
                             5807 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             5808 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             5809 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5810 ; 543  |{
                             5811 ; 544  |    struct {
                             5812 ; 545  |        unsigned S32P   :3;
                             5813 ; 546  |        unsigned S33P   :3;
                             5814 ; 547  |    } B;
                             5815 ; 548  |    int I;
                             5816 ; 549  |} iclprior4_type;
                             5817 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt
                                   Collector Register 4 Priority   */
                             5818 ; 551  |
                             5819 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             5820 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             5821 ; 554  |
                             5822 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             5823 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                             5824 ; 557  |
                             5825 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             5826 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             5827 ; 560  |
                             5828 ; 561  |
                             5829 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             5830 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             5831 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             5832 ; 565  |{
                             5833 ; 566  |    struct {
                             5834 ; 567  |        unsigned S0S    :2;
                             5835 ; 568  |        unsigned S1S    :2;
                             5836 ; 569  |        unsigned S2S    :2;
                             5837 ; 570  |        unsigned S3S    :2;
                             5838 ; 571  |        unsigned S4S    :2;
                             5839 ; 572  |        unsigned S5S    :2;
                             5840 ; 573  |        unsigned S6S    :2;
                             5841 ; 574  |        unsigned S7S    :2;
                             5842 ; 575  |        unsigned S8S    :2;
                             5843 ; 576  |        unsigned S9S    :2;
                             5844 ; 577  |        unsigned S10S   :2;
                             5845 ; 578  |        unsigned S11S   :2;
                             5846 ; 579  |    } B;
                             5847 ; 580  |    int I;
                             5848 ; 581  |} iclsteer0_type;
                             5849 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrup
                                  t Collector Steering Register 0   */
                             5850 ; 583  |
                             5851 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             5852 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             5853 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                             5854 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             5855 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             5856 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5857 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             5858 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             5859 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             5860 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             5861 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             5862 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             5863 ; 596  |
                             5864 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             5865 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             5866 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                             5867 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             5868 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             5869 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             5870 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             5871 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             5872 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             5873 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             5874 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             5875 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             5876 ; 609  |
                             5877 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             5878 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             5879 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             5880 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             5881 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             5882 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             5883 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             5884 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                             5885 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             5886 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             5887 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             5888 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             5889 ; 622  |
                             5890 ; 623  |
                             5891 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             5892 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             5893 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             5894 ; 627  |{
                             5895 ; 628  |    struct {
                             5896 ; 629  |        unsigned S12S   :2;
                             5897 ; 630  |        unsigned S13S   :2;
                             5898 ; 631  |        unsigned S14S   :2;
                             5899 ; 632  |        unsigned S15S   :2;
                             5900 ; 633  |        unsigned S16S   :2;
                             5901 ; 634  |        unsigned S17S   :2;
                             5902 ; 635  |        unsigned S18S   :2;
                             5903 ; 636  |        unsigned S19S   :2;
                             5904 ; 637  |        unsigned S20S   :2;
                             5905 ; 638  |        unsigned S21S   :2;
                             5906 ; 639  |        unsigned S22S   :2;
                             5907 ; 640  |        unsigned S23S   :2;
                             5908 ; 641  |    } B;
                             5909 ; 642  |    int I;
                             5910 ; 643  |} iclsteer1_type;
                             5911 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrup
                                  t Collector Steering Register 1   */
                             5912 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             5913 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             5914 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                             5915 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             5916 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             5917 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5918 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             5919 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             5920 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             5921 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             5922 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             5923 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             5924 ; 657  |
                             5925 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             5926 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             5927 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             5928 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             5929 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             5930 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             5931 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             5932 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             5933 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             5934 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             5935 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             5936 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             5937 ; 670  |
                             5938 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             5939 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             5940 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             5941 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             5942 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             5943 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             5944 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             5945 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             5946 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             5947 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             5948 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             5949 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             5950 ; 683  |
                             5951 ; 684  |
                             5952 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             5953 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             5954 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             5955 ; 688  |{
                             5956 ; 689  |    struct {
                             5957 ; 690  |        unsigned S24S   :2;
                             5958 ; 691  |        unsigned S25S   :2;
                             5959 ; 692  |        unsigned S26S   :2;
                             5960 ; 693  |        unsigned S27S   :2;
                             5961 ; 694  |        unsigned S28S   :2;
                             5962 ; 695  |        unsigned S29S   :2;
                             5963 ; 696  |        unsigned S30S   :2;
                             5964 ; 697  |        unsigned S31S   :2;
                             5965 ; 698  |        unsigned S32S   :2;
                             5966 ; 699  |        unsigned S33S   :2;
                             5967 ; 700  |    } B;
                             5968 ; 701  |    int I;
                             5969 ; 702  |} iclsteer2_type;
                             5970 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interru
                                  pt Collector Steering Register 2  */
                             5971 ; 704  |
                             5972 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             5973 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             5974 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             5975 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             5976 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             5977 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             5978 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5979 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             5980 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             5981 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             5982 ; 715  |
                             5983 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             5984 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             5985 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                             5986 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             5987 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             5988 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             5989 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             5990 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             5991 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             5992 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             5993 ; 726  |
                             5994 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             5995 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             5996 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             5997 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             5998 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             5999 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             6000 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             6001 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             6002 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             6003 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             6004 ; 737  |
                             6005 ; 738  |
                             6006 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             6007 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             6008 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             6009 ; 742  |{
                             6010 ; 743  |    struct {
                             6011 ; 744  |        int S0FV        :1;
                             6012 ; 745  |        int S1FV        :1;
                             6013 ; 746  |        int S2FV        :1;
                             6014 ; 747  |        int S3FV        :1;
                             6015 ; 748  |        int S4FV        :1;
                             6016 ; 749  |        int S5FV        :1;
                             6017 ; 750  |        int S6FV        :1;
                             6018 ; 751  |        int S7FV        :1;
                             6019 ; 752  |        int S8FV        :1;
                             6020 ; 753  |        int S9FV        :1;
                             6021 ; 754  |        int S10FV       :1;
                             6022 ; 755  |        int S11FV       :1;
                             6023 ; 756  |        int S12FV       :1;
                             6024 ; 757  |        int S13FV       :1;
                             6025 ; 758  |        int S14FV       :1;
                             6026 ; 759  |        int S15FV       :1;
                             6027 ; 760  |        int S16FV       :1;
                             6028 ; 761  |        int S17FV       :1;
                             6029 ; 762  |        int S18FV       :1;
                             6030 ; 763  |        int S19FV       :1;
                             6031 ; 764  |        int S20FV       :1;
                             6032 ; 765  |        int S21FV       :1;
                             6033 ; 766  |        int S22FV       :1;
                             6034 ; 767  |        int S23FV       :1;
                             6035 ; 768  |    } B;
                             6036 ; 769  |    int I;
                             6037 ; 770  |} iclforce0_type;
                             6038 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interru
                                  pt Collector Debug Force Register 0   */
                             6039 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6040 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             6041 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             6042 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             6043 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             6044 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             6045 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             6046 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                             6047 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             6048 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             6049 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             6050 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             6051 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             6052 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             6053 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             6054 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             6055 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             6056 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             6057 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             6058 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             6059 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             6060 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             6061 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             6062 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             6063 ; 796  |
                             6064 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             6065 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             6066 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             6067 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             6068 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             6069 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             6070 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             6071 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             6072 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             6073 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             6074 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             6075 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             6076 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             6077 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             6078 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             6079 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             6080 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             6081 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             6082 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             6083 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             6084 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             6085 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             6086 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             6087 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             6088 ; 821  |
                             6089 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             6090 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             6091 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             6092 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             6093 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             6094 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             6095 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             6096 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             6097 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             6098 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             6099 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             6100 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             6101 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6102 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             6103 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             6104 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             6105 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             6106 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             6107 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             6108 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                             6109 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             6110 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             6111 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             6112 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             6113 ; 846  |
                             6114 ; 847  |
                             6115 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             6116 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             6117 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             6118 ; 851  |{
                             6119 ; 852  |    struct {
                             6120 ; 853  |        int S24FV       :1;
                             6121 ; 854  |        int S25FV       :1;
                             6122 ; 855  |        int S26FV       :1;
                             6123 ; 856  |        int S27FV       :1;
                             6124 ; 857  |        int S28FV       :1;
                             6125 ; 858  |        int S29FV       :1;
                             6126 ; 859  |        int S30FV       :1;
                             6127 ; 860  |        int S31FV       :1;
                             6128 ; 861  |        int S32FV       :1;
                             6129 ; 862  |        int S33FV       :1;
                             6130 ; 863  |    } B;
                             6131 ; 864  |    int I;
                             6132 ; 865  |} iclforce1_type;
                             6133 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interru
                                  pt Collector Debug Force Register 1   */
                             6134 ; 867  |
                             6135 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             6136 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             6137 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             6138 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             6139 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             6140 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             6141 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             6142 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             6143 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             6144 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             6145 ; 878  |
                             6146 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             6147 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             6148 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             6149 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             6150 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             6151 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             6152 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             6153 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             6154 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             6155 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             6156 ; 889  |
                             6157 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             6158 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             6159 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             6160 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             6161 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             6162 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6163 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             6164 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             6165 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             6166 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             6167 ; 900  |
                             6168 ; 901  |
                             6169 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                             6170 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             6171 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             6172 ; 905  |{
                             6173 ; 906  |    struct {
                             6174 ; 907  |        int S0FE        :1;
                             6175 ; 908  |        int S1FE        :1;
                             6176 ; 909  |        int S2FE        :1;
                             6177 ; 910  |        int S3FE        :1;
                             6178 ; 911  |        int S4FE        :1;
                             6179 ; 912  |        int S5FE        :1;
                             6180 ; 913  |        int S6FE        :1;
                             6181 ; 914  |        int S7FE        :1;
                             6182 ; 915  |        int S8FE        :1;
                             6183 ; 916  |        int S9FE        :1;
                             6184 ; 917  |        int S10FE       :1;
                             6185 ; 918  |        int S11FE       :1;
                             6186 ; 919  |        int S12FE       :1;
                             6187 ; 920  |        int S13FE       :1;
                             6188 ; 921  |        int S14FE       :1;
                             6189 ; 922  |        int S15FE       :1;
                             6190 ; 923  |        int S16FE       :1;
                             6191 ; 924  |        int S17FE       :1;
                             6192 ; 925  |        int S18FE       :1;
                             6193 ; 926  |        int S19FE       :1;
                             6194 ; 927  |        int S20FE       :1;
                             6195 ; 928  |        int S21FE       :1;
                             6196 ; 929  |        int S22FE       :1;
                             6197 ; 930  |        int S23FE       :1;
                             6198 ; 931  |    } B;
                             6199 ; 932  |    int I;
                             6200 ; 933  |} iclfenable0_type;
                             6201 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Inter
                                  rupt Collector Force Enable Register 0    */
                             6202 ; 935  |
                             6203 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             6204 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             6205 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             6206 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             6207 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             6208 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             6209 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             6210 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             6211 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             6212 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             6213 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             6214 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             6215 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             6216 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             6217 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             6218 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             6219 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             6220 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             6221 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             6222 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             6223 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6224 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             6225 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             6226 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             6227 ; 960  |
                             6228 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             6229 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             6230 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             6231 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             6232 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             6233 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             6234 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             6235 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             6236 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             6237 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             6238 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             6239 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             6240 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             6241 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             6242 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             6243 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             6244 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             6245 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             6246 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             6247 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             6248 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             6249 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             6250 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             6251 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             6252 ; 985  |
                             6253 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             6254 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             6255 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             6256 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             6257 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             6258 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             6259 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             6260 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             6261 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             6262 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             6263 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             6264 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             6265 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             6266 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             6267 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             6268 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             6269 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             6270 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             6271 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             6272 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             6273 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             6274 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             6275 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             6276 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             6277 ; 1010 |
                             6278 ; 1011 |
                             6279 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             6280 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             6281 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             6282 ; 1015 |{
                             6283 ; 1016 |    struct {
                             6284 ; 1017 |        int S24FE       :1;
                             6285 ; 1018 |        int S25FE       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6286 ; 1019 |        int S26FE       :1;
                             6287 ; 1020 |        int S27FE       :1;
                             6288 ; 1021 |        int S28FE       :1;
                             6289 ; 1022 |        int S29FE       :1;
                             6290 ; 1023 |        int S30FE       :1;
                             6291 ; 1024 |        int S31FE       :1;
                             6292 ; 1025 |        int S32FE       :1;
                             6293 ; 1026 |        int S33FE       :1;
                             6294 ; 1027 |    } B;
                             6295 ; 1028 |    int I;
                             6296 ; 1029 |} iclfenable1_type;
                             6297 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Inter
                                  rupt Collector Force Enable Register 1    */
                             6298 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             6299 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             6300 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             6301 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             6302 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             6303 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             6304 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             6305 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             6306 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             6307 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             6308 ; 1041 |
                             6309 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             6310 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             6311 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             6312 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             6313 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             6314 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             6315 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             6316 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             6317 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             6318 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             6319 ; 1052 |
                             6320 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             6321 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             6322 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             6323 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             6324 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             6325 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             6326 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             6327 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             6328 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             6329 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                             6330 ; 1063 |
                             6331 ; 1064 |
                             6332 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             6333 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             6334 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             6335 ; 1068 |{
                             6336 ; 1069 |    struct {
                             6337 ; 1070 |        unsigned RQ     :7;
                             6338 ; 1071 |        unsigned IVA    :7;
                             6339 ; 1072 |        unsigned IVB    :7;
                             6340 ; 1073 |    } B;
                             6341 ; 1074 |    int I;
                             6342 ; 1075 |} iclobsvz0_type;
                             6343 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interru
                                  pt Collector Observation Register 0   */
                             6344 ; 1077 |
                             6345 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6346 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             6347 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             6348 ; 1081 |
                             6349 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             6350 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             6351 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             6352 ; 1085 |
                             6353 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             6354 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             6355 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             6356 ; 1089 |
                             6357 ; 1090 |
                             6358 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             6359 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             6360 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             6361 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             6362 ; 1095 |
                             6363 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             6364 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             6365 ; 1098 |
                             6366 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             6367 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             6368 ; 1101 |
                             6369 ; 1102 |
                             6370 ; 1103 |
                             6371 ; 1104 |
                             6372 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             6373 ; 1106 |//  Interrupt Vectors
                             6374 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             6375 ; 1108 |// Reset Vector
                             6376 ; 1109 |#define HW_IVECRESET 0x0000           
                             6377 ; 1110 |// Stack Error
                             6378 ; 1111 |#define HW_IVECSTERR 0x0002           
                             6379 ; 1112 |// Trace
                             6380 ; 1113 |#define HW_IVECTRAC 0x0004           
                             6381 ; 1114 |// SWI
                             6382 ; 1115 |#define HW_IVECSWI 0x0006           
                             6383 ; 1116 |// ~IRQA
                             6384 ; 1117 |#define HW_IVECIRQA 0x0008           
                             6385 ; 1118 |// ~IRQB - BROWNOUT
                             6386 ; 1119 |#define HW_IVECIRQB 0x000A           
                             6387 ; 1120 |// Fatal Error
                             6388 ; 1121 |#define HW_IVECERROR 0x000C           
                             6389 ; 1122 |// SPI
                             6390 ; 1123 |#define HW_IVECSPI 0x000E           
                             6391 ; 1124 |// I2S TX Data Empty
                             6392 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             6393 ; 1126 |// I2S TX Underflow
                             6394 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             6395 ; 1128 |// I2S RX Data Full
                             6396 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             6397 ; 1130 |// I2S RX Overflow
                             6398 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             6399 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors 
                                  here
                             6400 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors 
                                  here
                             6401 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors 
                                  here
                             6402 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             6403 ; 1136 |// GPIO1
                             6404 ; 1137 |#define HW_IVECGPIO1 0x0020           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6405 ; 1138 |// GPIO2
                             6406 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             6407 ; 1140 |// GPIO0
                             6408 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             6409 ; 1142 |// TIMER0
                             6410 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             6411 ; 1144 |// TIMER1
                             6412 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             6413 ; 1146 |// TIMER2
                             6414 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             6415 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors 
                                  here
                             6416 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors 
                                  here
                             6417 ; 1150 |// I2C RX Data Ready
                             6418 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             6419 ; 1152 |// I2C RX Overflow
                             6420 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             6421 ; 1154 |// I2C TX Data Empty
                             6422 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             6423 ; 1156 |// I2C TX Underflow
                             6424 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             6425 ; 1158 |// Illegal Instruction
                             6426 ; 1159 |#define HW_IVECILI 0x0038           
                             6427 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors 
                                  here
                             6428 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             6429 ; 1162 |#define HW_IVECDACE 0x003C           
                             6430 ; 1163 |// DAC Underflow ISR
                             6431 ; 1164 |#define HW_IVECDACUF 0x003E           
                             6432 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors 
                                  here
                             6433 ; 1166 |// ADC Full ISR
                             6434 ; 1167 |#define HW_IVECADCF 0x0042           
                             6435 ; 1168 |// ADC Overflow ISR
                             6436 ; 1169 |#define HW_IVECADCOF 0x0044           
                             6437 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors 
                                  here
                             6438 ; 1171 |// TIMER3
                             6439 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             6440 ; 1173 |// GPIO3
                             6441 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             6442 ; 1175 |// SDRAM
                             6443 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             6444 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors 
                                  here
                             6445 ; 1178 |// 5 volt power connected
                             6446 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             6447 ; 1180 |// USB Controller
                             6448 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             6449 ; 1182 |// USB Wakeup 
                             6450 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             6451 ; 1184 |// 5 volt power disconnected
                             6452 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             6453 ; 1186 |// enhanced SPI
                             6454 ; 1187 |#define HW_IVECESPI 0x0058           
                             6455 ; 1188 |// filter coprocessor
                             6456 ; 1189 |#define HW_IVECFILCO 0x005A           
                             6457 ; 1190 |// low res ADC #1
                             6458 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             6459 ; 1192 |// real time clock alarm
                             6460 ; 1193 |#define HW_IVECRTCALARM 0x005E           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6461 ; 1194 |// low res ADC #2
                             6462 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             6463 ; 1196 |// flash hardware ECC
                             6464 ; 1197 |#define HW_IVECHWECC 0x0062           
                             6465 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors 
                                  here
                             6466 ; 1199 |// CDSYNC Interrupt
                             6467 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             6468 ; 1201 |// CDSYNC Exception
                             6469 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             6470 ; 1203 |// RS
                             6471 ; 1204 |#define HW_IVECRS 0x006A           
                             6472 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors 
                                  here
                             6473 ; 1206 |// Flash Done ISR
                             6474 ; 1207 |#define HW_IVECFD 0x006E           
                             6475 ; 1208 |// CompactFlash ISR
                             6476 ; 1209 |#define HW_IVECCF 0x0070           
                             6477 ; 1210 |// SmartMedia Timeout ISR
                             6478 ; 1211 |#define HW_IVECSMTO 0x0072           
                             6479 ; 1212 |// SmartMedia Invalid Programming
                             6480 ; 1213 |#define HW_IVECSMIP 0x0074           
                             6481 ; 1214 |// CompactFlash No Card ISR
                             6482 ; 1215 |#define HW_IVECCFNC 0x0076           
                             6483 ; 1216 |// CompactFlash Status Change ISR
                             6484 ; 1217 |#define HW_IVECCFSC 0x0078           
                             6485 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors 
                                  here
                             6486 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors 
                                  here
                             6487 ; 1220 |// CDI
                             6488 ; 1221 |#define HW_IVECCDI 0x007E           
                             6489 ; 1222 |
                             6490 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             6491 ; 1224 |//  Interrupt Vectors
                             6492 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             6493 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             6494 ; 1227 |#define VECTOR(address,isr) \ 
                             6495 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             6496 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             6497 ; 1230 |
                             6498 ; 1231 |
                             6499 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             6500 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             6501 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             6502 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             6503 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             6504 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             6505 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             6506 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             6507 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             6508 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             6509 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             6510 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             6511 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             6512 ; 1245 |
                             6513 ; 1246 |// Interrupt Disabled
                             6514 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             6515 ; 1248 |// Interrupt Priority Level 0
                             6516 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             6517 ; 1250 |// Interrupt Priority Level 1
                             6518 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6519 ; 1252 |// Interrupt Priority Level 2
                             6520 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             6521 ; 1254 |
                             6522 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             6523 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             6524 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             6525 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                             6526 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             6527 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             6528 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             6529 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             6530 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             6531 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             6532 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             6533 ; 1266 |
                             6534 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             6535 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             6536 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             6537 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             6538 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             6539 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             6540 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             6541 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             6542 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             6543 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             6544 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             6545 ; 1278 |
                             6546 ; 1279 |// Interrupt Priority register
                             6547 ; 1280 |typedef union               
                             6548 ; 1281 |{
                             6549 ; 1282 |    struct {
                             6550 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             6551 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             6552 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             6553 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             6554 ; 1287 |        int                 :4; /* Reserved */
                             6555 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             6556 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             6557 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             6558 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             6559 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             6560 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             6561 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             6562 ; 1295 |    } B;
                             6563 ; 1296 |
                             6564 ; 1297 |    int I;
                             6565 ; 1298 |
                             6566 ; 1299 |} ipr_type;
                             6567 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             6568 ; 1301 |
                             6569 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             6570 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             6571 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             6572 ; 1305 |
                             6573 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             6574 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             6575 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             6576 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             6577 ; 1310 |
                             6578 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6579 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             6580 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             6581 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             6582 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             6583 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             6584 ; 1317 |
                             6585 ; 1318 |#endif
                             6586 ; 1319 |
                             6587 
                             6589 
                             6590 ; 26   |#include "regslradc.h"
                             6591 
                             6593 
                             6594 ; 1    |#if !(defined(regslradcinc))
                             6595 ; 2    |
                             6596 ; 3    |#define regslradcinc 1
                             6597 ; 4    |
                             6598 ; 5    |#include "types.h"
                             6599 
                             6601 
                             6602 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6603 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6604 ; 3    |//
                             6605 ; 4    |// Filename: types.h
                             6606 ; 5    |// Description: Standard data types
                             6607 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6608 ; 7    |
                             6609 ; 8    |#ifndef _TYPES_H
                             6610 ; 9    |#define _TYPES_H
                             6611 ; 10   |
                             6612 ; 11   |// TODO:  move this outta here!
                             6613 ; 12   |#if !defined(NOERROR)
                             6614 ; 13   |#define NOERROR 0
                             6615 ; 14   |#define SUCCESS 0
                             6616 ; 15   |#endif 
                             6617 ; 16   |#if !defined(SUCCESS)
                             6618 ; 17   |#define SUCCESS  0
                             6619 ; 18   |#endif
                             6620 ; 19   |#if !defined(ERROR)
                             6621 ; 20   |#define ERROR   -1
                             6622 ; 21   |#endif
                             6623 ; 22   |#if !defined(FALSE)
                             6624 ; 23   |#define FALSE 0
                             6625 ; 24   |#endif
                             6626 ; 25   |#if !defined(TRUE)
                             6627 ; 26   |#define TRUE  1
                             6628 ; 27   |#endif
                             6629 ; 28   |
                             6630 ; 29   |#if !defined(NULL)
                             6631 ; 30   |#define NULL 0
                             6632 ; 31   |#endif
                             6633 ; 32   |
                             6634 ; 33   |#define MAX_INT     0x7FFFFF
                             6635 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6636 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6637 ; 36   |#define MAX_ULONG   (-1) 
                             6638 ; 37   |
                             6639 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6640 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6641 ; 40   |
                             6642 ; 41   |
                             6643 ; 42   |#define BYTE    unsigned char       // btVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6644 ; 43   |#define CHAR    signed char         // cVarName
                             6645 ; 44   |#define USHORT  unsigned short      // usVarName
                             6646 ; 45   |#define SHORT   unsigned short      // sVarName
                             6647 ; 46   |#define WORD    unsigned int        // wVarName
                             6648 ; 47   |#define INT     signed int          // iVarName
                             6649 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6650 ; 49   |#define LONG    signed long         // lVarName
                             6651 ; 50   |#define BOOL    unsigned int        // bVarName
                             6652 ; 51   |#define FRACT   _fract              // frVarName
                             6653 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6654 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6655 ; 54   |#define FLOAT   float               // fVarName
                             6656 ; 55   |#define DBL     double              // dVarName
                             6657 ; 56   |#define ENUM    enum                // eVarName
                             6658 ; 57   |#define CMX     _complex            // cmxVarName
                             6659 ; 58   |typedef WORD UCS3;                   // 
                             6660 ; 59   |
                             6661 ; 60   |#define UINT16  unsigned short
                             6662 ; 61   |#define UINT8   unsigned char   
                             6663 ; 62   |#define UINT32  unsigned long
                             6664 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             6665 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             6666 ; 65   |#define WCHAR   UINT16
                             6667 ; 66   |
                             6668 ; 67   |//UINT128 is 16 bytes or 6 words
                             6669 ; 68   |typedef struct UINT128_3500 {   
                             6670 ; 69   |    int val[6];     
                             6671 ; 70   |} UINT128_3500;
                             6672 ; 71   |
                             6673 ; 72   |#define UINT128   UINT128_3500
                             6674 ; 73   |
                             6675 ; 74   |// Little endian word packed byte strings:   
                             6676 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6677 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6678 ; 77   |// Little endian word packed byte strings:   
                             6679 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6680 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6681 ; 80   |
                             6682 ; 81   |// Declare Memory Spaces To Use When Coding
                             6683 ; 82   |// A. Sector Buffers
                             6684 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6685 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6686 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6687 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6688 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6689 ; 88   |// B. Media DDI Memory
                             6690 ; 89   |#define MEDIA_DDI_MEM _Y
                             6691 ; 90   |
                             6692 ; 91   |
                             6693 ; 92   |
                             6694 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6695 ; 94   |// Examples of circular pointers:
                             6696 ; 95   |//    INT CIRC cpiVarName
                             6697 ; 96   |//    DWORD CIRC cpdwVarName
                             6698 ; 97   |
                             6699 ; 98   |#define RETCODE INT                 // rcVarName
                             6700 ; 99   |
                             6701 ; 100  |// generic bitfield structure
                             6702 ; 101  |struct Bitfield {
                             6703 ; 102  |    unsigned int B0  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6704 ; 103  |    unsigned int B1  :1;
                             6705 ; 104  |    unsigned int B2  :1;
                             6706 ; 105  |    unsigned int B3  :1;
                             6707 ; 106  |    unsigned int B4  :1;
                             6708 ; 107  |    unsigned int B5  :1;
                             6709 ; 108  |    unsigned int B6  :1;
                             6710 ; 109  |    unsigned int B7  :1;
                             6711 ; 110  |    unsigned int B8  :1;
                             6712 ; 111  |    unsigned int B9  :1;
                             6713 ; 112  |    unsigned int B10 :1;
                             6714 ; 113  |    unsigned int B11 :1;
                             6715 ; 114  |    unsigned int B12 :1;
                             6716 ; 115  |    unsigned int B13 :1;
                             6717 ; 116  |    unsigned int B14 :1;
                             6718 ; 117  |    unsigned int B15 :1;
                             6719 ; 118  |    unsigned int B16 :1;
                             6720 ; 119  |    unsigned int B17 :1;
                             6721 ; 120  |    unsigned int B18 :1;
                             6722 ; 121  |    unsigned int B19 :1;
                             6723 ; 122  |    unsigned int B20 :1;
                             6724 ; 123  |    unsigned int B21 :1;
                             6725 ; 124  |    unsigned int B22 :1;
                             6726 ; 125  |    unsigned int B23 :1;
                             6727 ; 126  |};
                             6728 ; 127  |
                             6729 ; 128  |union BitInt {
                             6730 ; 129  |        struct Bitfield B;
                             6731 ; 130  |        int        I;
                             6732 ; 131  |};
                             6733 ; 132  |
                             6734 ; 133  |#define MAX_MSG_LENGTH 10
                             6735 ; 134  |struct CMessage
                             6736 ; 135  |{
                             6737 ; 136  |        unsigned int m_uLength;
                             6738 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6739 ; 138  |};
                             6740 ; 139  |
                             6741 ; 140  |typedef struct {
                             6742 ; 141  |    WORD m_wLength;
                             6743 ; 142  |    WORD m_wMessage;
                             6744 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6745 ; 144  |} Message;
                             6746 ; 145  |
                             6747 ; 146  |struct MessageQueueDescriptor
                             6748 ; 147  |{
                             6749 ; 148  |        int *m_pBase;
                             6750 ; 149  |        int m_iModulo;
                             6751 ; 150  |        int m_iSize;
                             6752 ; 151  |        int *m_pHead;
                             6753 ; 152  |        int *m_pTail;
                             6754 ; 153  |};
                             6755 ; 154  |
                             6756 ; 155  |struct ModuleEntry
                             6757 ; 156  |{
                             6758 ; 157  |    int m_iSignaledEventMask;
                             6759 ; 158  |    int m_iWaitEventMask;
                             6760 ; 159  |    int m_iResourceOfCode;
                             6761 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6762 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             6763 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6764 ; 163  |    int m_uTimeOutHigh;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6765 ; 164  |    int m_uTimeOutLow;
                             6766 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6767 ; 166  |};
                             6768 ; 167  |
                             6769 ; 168  |union WaitMask{
                             6770 ; 169  |    struct B{
                             6771 ; 170  |        unsigned int m_bNone     :1;
                             6772 ; 171  |        unsigned int m_bMessage  :1;
                             6773 ; 172  |        unsigned int m_bTimer    :1;
                             6774 ; 173  |        unsigned int m_bButton   :1;
                             6775 ; 174  |    } B;
                             6776 ; 175  |    int I;
                             6777 ; 176  |} ;
                             6778 ; 177  |
                             6779 ; 178  |
                             6780 ; 179  |struct Button {
                             6781 ; 180  |        WORD wButtonEvent;
                             6782 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6783 ; 182  |};
                             6784 ; 183  |
                             6785 ; 184  |struct Message {
                             6786 ; 185  |        WORD wMsgLength;
                             6787 ; 186  |        WORD wMsgCommand;
                             6788 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6789 ; 188  |};
                             6790 ; 189  |
                             6791 ; 190  |union EventTypes {
                             6792 ; 191  |        struct CMessage msg;
                             6793 ; 192  |        struct Button Button ;
                             6794 ; 193  |        struct Message Message;
                             6795 ; 194  |};
                             6796 ; 195  |
                             6797 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6798 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6799 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6800 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6801 ; 200  |
                             6802 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6803 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6804 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6805 ; 204  |
                             6806 ; 205  |#if DEBUG
                             6807 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6808 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             6809 ; 208  |#else 
                             6810 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             6811 ; 210  |#define DebugBuildAssert(x)    
                             6812 ; 211  |#endif
                             6813 ; 212  |
                             6814 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6815 ; 214  |//  #pragma asm
                             6816 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6817 ; 216  |//  #pragma endasm
                             6818 ; 217  |
                             6819 ; 218  |
                             6820 ; 219  |#ifdef COLOR_262K
                             6821 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             6822 ; 221  |#elif defined(COLOR_65K)
                             6823 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6824 ; 223  |#else
                             6825 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             6826 ; 225  |#endif
                             6827 ; 226  |    
                             6828 ; 227  |#endif // #ifndef _TYPES_H
                             6829 
                             6831 
                             6832 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6833 ; 7    |
                             6834 ; 8    |//   SYSTEM STMP Registers 
                             6835 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             6836 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6837 ; 11   |
                             6838 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             6839 ; 13   |
                             6840 ; 14   |
                             6841 ; 15   |
                             6842 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             6843 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             6844 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             6845 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             6846 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6847 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             6848 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             6849 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             6850 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             6851 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             6852 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             6853 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             6854 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             6855 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             6856 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             6857 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             6858 ; 32   |
                             6859 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             6860 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6861 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             6862 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             6863 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             6864 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             6865 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             6866 ; 40   |
                             6867 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             6868 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             6869 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             6870 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             6871 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             6872 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             6873 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             6874 ; 48   |
                             6875 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             6876 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             6877 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             6878 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6879 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             6880 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             6881 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             6882 ; 56   |
                             6883 ; 57   |typedef union               
                             6884 ; 58   |{
                             6885 ; 59   |    struct {
                             6886 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             6887 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             6888 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             6889 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             6890 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             6891 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             6892 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             6893 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             6894 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             6895 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             6896 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                             6897 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             6898 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             6899 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             6900 ; 74   |    } B;
                             6901 ; 75   |   unsigned int I;
                             6902 ; 76   |        unsigned int U;
                             6903 ; 77   |} lradc_ctrl_type;
                             6904 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             6905 ; 79   |
                             6906 ; 80   |
                             6907 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             6908 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             6909 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             6910 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             6911 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             6912 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             6913 ; 87   |
                             6914 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             6915 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             6916 ; 90   |
                             6917 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             6918 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             6919 ; 93   |
                             6920 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             6921 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             6922 ; 96   |
                             6923 ; 97   |
                             6924 ; 98   |typedef union               
                             6925 ; 99   |{
                             6926 ; 100  |    struct {
                             6927 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             6928 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             6929 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             6930 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             6931 ; 105  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6932 ; 106  |    unsigned int I;
                             6933 ; 107  |} lradc_thrsh_type;
                             6934 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             6935 ; 109  |
                             6936 ; 110  |
                             6937 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             6938 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             6939 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             6940 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             6941 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             6942 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             6943 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             6944 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             6945 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             6946 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             6947 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             6948 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             6949 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             6950 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             6951 ; 125  |
                             6952 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             6953 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             6954 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             6955 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             6956 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             6957 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             6958 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             6959 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             6960 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             6961 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             6962 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             6963 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             6964 ; 138  |
                             6965 ; 139  |
                             6966 ; 140  |
                             6967 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             6968 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             6969 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             6970 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             6971 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             6972 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             6973 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             6974 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             6975 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             6976 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             6977 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             6978 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             6979 ; 153  |
                             6980 ; 154  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6981 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             6982 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             6983 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             6984 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             6985 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             6986 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             6987 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             6988 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             6989 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             6990 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             6991 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             6992 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             6993 ; 167  |
                             6994 ; 168  |typedef union               
                             6995 ; 169  |{
                             6996 ; 170  |    struct {
                             6997 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             6998 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             6999 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             7000 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             7001 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             7002 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             7003 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             7004 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             7005 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             7006 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             7007 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             7008 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             7009 ; 183  |    } B;
                             7010 ; 184  |    unsigned int I;
                             7011 ; 185  |} lradc_result_type;
                             7012 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             7013 ; 187  |
                             7014 ; 188  |
                             7015 ; 189  |
                             7016 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             7017 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             7018 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             7019 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             7020 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7021 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             7022 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             7023 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             7024 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             7025 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             7026 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             7027 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             7028 ; 202  |
                             7029 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             7030 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7031 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             7032 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             7033 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             7034 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             7035 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             7036 ; 210  |
                             7037 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7038 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             7039 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             7040 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                             7041 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             7042 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             7043 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             7044 ; 218  |
                             7045 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             7046 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             7047 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             7048 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             7049 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             7050 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             7051 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             7052 ; 226  |
                             7053 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             7054 ; 228  |
                             7055 ; 229  |
                             7056 ; 230  |
                             7057 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             7058 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             7059 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7060 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             7061 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7062 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             7063 ; 237  |
                             7064 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7065 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7066 ; 240  |
                             7067 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             7068 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             7069 ; 243  |
                             7070 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7071 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7072 ; 246  |
                             7073 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             7074 ; 248  |
                             7075 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             7076 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             7077 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             7078 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             7079 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             7080 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             7081 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             7082 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             7083 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             7084 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             7085 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7086 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             7087 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             7088 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             7089 ; 263  |
                             7090 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             7091 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             7092 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             7093 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             7094 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             7095 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             7096 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             7097 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             7098 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             7099 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             7100 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             7101 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             7102 ; 276  |
                             7103 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             7104 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             7105 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             7106 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             7107 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             7108 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             7109 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             7110 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             7111 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             7112 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             7113 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             7114 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             7115 ; 289  |
                             7116 ; 290  |
                             7117 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             7118 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             7119 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             7120 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             7121 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             7122 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             7123 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             7124 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             7125 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             7126 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             7127 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             7128 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             7129 ; 303  |
                             7130 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             7131 ; 305  |
                             7132 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             7133 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             7134 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7135 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             7136 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7137 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             7138 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             7139 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             7140 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             7141 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             7142 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             7143 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             7144 ; 318  |
                             7145 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             7146 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7147 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             7148 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             7149 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             7150 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             7151 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             7152 ; 326  |
                             7153 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             7154 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             7155 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             7156 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             7157 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             7158 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             7159 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             7160 ; 334  |
                             7161 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             7162 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             7163 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             7164 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             7165 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             7166 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             7167 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             7168 ; 342  |
                             7169 ; 343  |
                             7170 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             7171 ; 345  |
                             7172 ; 346  |
                             7173 ; 347  |
                             7174 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             7175 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             7176 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7177 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             7178 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7179 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             7180 ; 354  |
                             7181 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7182 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7183 ; 357  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7184 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             7185 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             7186 ; 360  |
                             7187 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7188 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7189 ; 363  |
                             7190 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             7191 ; 365  |
                             7192 ; 366  |
                             7193 ; 367  |
                             7194 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             7195 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             7196 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             7197 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             7198 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             7199 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             7200 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             7201 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             7202 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             7203 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             7204 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             7205 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             7206 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             7207 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             7208 ; 382  |
                             7209 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             7210 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             7211 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             7212 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             7213 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             7214 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             7215 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             7216 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             7217 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             7218 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             7219 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             7220 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             7221 ; 395  |
                             7222 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             7223 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             7224 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             7225 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             7226 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             7227 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             7228 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             7229 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             7230 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7231 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             7232 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             7233 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                             7234 ; 408  |
                             7235 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             7236 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             7237 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             7238 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             7239 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             7240 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             7241 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             7242 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             7243 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             7244 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             7245 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             7246 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             7247 ; 421  |
                             7248 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             7249 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7250 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7251 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7252 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7253 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7254 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7255 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7256 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7257 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             7258 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             7259 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             7260 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             7261 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             7262 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             7263 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             7264 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             7265 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             7266 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             7267 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             7268 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             7269 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             7270 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             7271 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             7272 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             7273 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             7274 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             7275 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             7276 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             7277 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             7278 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             7279 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             7280 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             7281 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             7282 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 124

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7283 ; 457  |
                             7284 ; 458  |//Needed by button.asm
                             7285 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             7286 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             7287 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             7288 ; 462  |
                             7289 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7290 ; 464  |
                             7291 ; 465  |#endif
                             7292 ; 466  |
                             7293 ; 467  |
                             7294 
                             7296 
                             7297 ; 27   |#include "regspwm.h"
                             7298 
                             7300 
                             7301 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7302 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             7303 ; 3    |// Filename: regspwm.inc
                             7304 ; 4    |// Description: Register definitions for PWM interface
                             7305 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7306 ; 6    |// The following naming conventions are followed in this file.
                             7307 ; 7    |// All registers are named using the format...
                             7308 ; 8    |//     HW_<module>_<regname>
                             7309 ; 9    |// where <module> is the module name which can be any of the following...
                             7310 ; 10   |//     USB20
                             7311 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7312 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7313 ; 13   |// that module)
                             7314 ; 14   |// <regname> is the specific register within that module
                             7315 ; 15   |// We also define the following...
                             7316 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7317 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7318 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7319 ; 19   |// which does something else, and
                             7320 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7321 ; 21   |// which does something else.
                             7322 ; 22   |// Other rules
                             7323 ; 23   |//     All caps
                             7324 ; 24   |//     Numeric identifiers start at 0
                             7325 ; 25   |#if !(defined(regspwminc))
                             7326 ; 26   |#define regspwminc 1
                             7327 ; 27   |
                             7328 ; 28   |#include "types.h"
                             7329 
                             7331 
                             7332 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7333 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7334 ; 3    |//
                             7335 ; 4    |// Filename: types.h
                             7336 ; 5    |// Description: Standard data types
                             7337 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7338 ; 7    |
                             7339 ; 8    |#ifndef _TYPES_H
                             7340 ; 9    |#define _TYPES_H
                             7341 ; 10   |
                             7342 ; 11   |// TODO:  move this outta here!
                             7343 ; 12   |#if !defined(NOERROR)
                             7344 ; 13   |#define NOERROR 0
                             7345 ; 14   |#define SUCCESS 0
                             7346 ; 15   |#endif 
                             7347 ; 16   |#if !defined(SUCCESS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 125

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7348 ; 17   |#define SUCCESS  0
                             7349 ; 18   |#endif
                             7350 ; 19   |#if !defined(ERROR)
                             7351 ; 20   |#define ERROR   -1
                             7352 ; 21   |#endif
                             7353 ; 22   |#if !defined(FALSE)
                             7354 ; 23   |#define FALSE 0
                             7355 ; 24   |#endif
                             7356 ; 25   |#if !defined(TRUE)
                             7357 ; 26   |#define TRUE  1
                             7358 ; 27   |#endif
                             7359 ; 28   |
                             7360 ; 29   |#if !defined(NULL)
                             7361 ; 30   |#define NULL 0
                             7362 ; 31   |#endif
                             7363 ; 32   |
                             7364 ; 33   |#define MAX_INT     0x7FFFFF
                             7365 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7366 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7367 ; 36   |#define MAX_ULONG   (-1) 
                             7368 ; 37   |
                             7369 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7370 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7371 ; 40   |
                             7372 ; 41   |
                             7373 ; 42   |#define BYTE    unsigned char       // btVarName
                             7374 ; 43   |#define CHAR    signed char         // cVarName
                             7375 ; 44   |#define USHORT  unsigned short      // usVarName
                             7376 ; 45   |#define SHORT   unsigned short      // sVarName
                             7377 ; 46   |#define WORD    unsigned int        // wVarName
                             7378 ; 47   |#define INT     signed int          // iVarName
                             7379 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7380 ; 49   |#define LONG    signed long         // lVarName
                             7381 ; 50   |#define BOOL    unsigned int        // bVarName
                             7382 ; 51   |#define FRACT   _fract              // frVarName
                             7383 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7384 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7385 ; 54   |#define FLOAT   float               // fVarName
                             7386 ; 55   |#define DBL     double              // dVarName
                             7387 ; 56   |#define ENUM    enum                // eVarName
                             7388 ; 57   |#define CMX     _complex            // cmxVarName
                             7389 ; 58   |typedef WORD UCS3;                   // 
                             7390 ; 59   |
                             7391 ; 60   |#define UINT16  unsigned short
                             7392 ; 61   |#define UINT8   unsigned char   
                             7393 ; 62   |#define UINT32  unsigned long
                             7394 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7395 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7396 ; 65   |#define WCHAR   UINT16
                             7397 ; 66   |
                             7398 ; 67   |//UINT128 is 16 bytes or 6 words
                             7399 ; 68   |typedef struct UINT128_3500 {   
                             7400 ; 69   |    int val[6];     
                             7401 ; 70   |} UINT128_3500;
                             7402 ; 71   |
                             7403 ; 72   |#define UINT128   UINT128_3500
                             7404 ; 73   |
                             7405 ; 74   |// Little endian word packed byte strings:   
                             7406 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7407 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 126

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7408 ; 77   |// Little endian word packed byte strings:   
                             7409 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7410 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7411 ; 80   |
                             7412 ; 81   |// Declare Memory Spaces To Use When Coding
                             7413 ; 82   |// A. Sector Buffers
                             7414 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7415 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7416 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7417 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7418 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7419 ; 88   |// B. Media DDI Memory
                             7420 ; 89   |#define MEDIA_DDI_MEM _Y
                             7421 ; 90   |
                             7422 ; 91   |
                             7423 ; 92   |
                             7424 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7425 ; 94   |// Examples of circular pointers:
                             7426 ; 95   |//    INT CIRC cpiVarName
                             7427 ; 96   |//    DWORD CIRC cpdwVarName
                             7428 ; 97   |
                             7429 ; 98   |#define RETCODE INT                 // rcVarName
                             7430 ; 99   |
                             7431 ; 100  |// generic bitfield structure
                             7432 ; 101  |struct Bitfield {
                             7433 ; 102  |    unsigned int B0  :1;
                             7434 ; 103  |    unsigned int B1  :1;
                             7435 ; 104  |    unsigned int B2  :1;
                             7436 ; 105  |    unsigned int B3  :1;
                             7437 ; 106  |    unsigned int B4  :1;
                             7438 ; 107  |    unsigned int B5  :1;
                             7439 ; 108  |    unsigned int B6  :1;
                             7440 ; 109  |    unsigned int B7  :1;
                             7441 ; 110  |    unsigned int B8  :1;
                             7442 ; 111  |    unsigned int B9  :1;
                             7443 ; 112  |    unsigned int B10 :1;
                             7444 ; 113  |    unsigned int B11 :1;
                             7445 ; 114  |    unsigned int B12 :1;
                             7446 ; 115  |    unsigned int B13 :1;
                             7447 ; 116  |    unsigned int B14 :1;
                             7448 ; 117  |    unsigned int B15 :1;
                             7449 ; 118  |    unsigned int B16 :1;
                             7450 ; 119  |    unsigned int B17 :1;
                             7451 ; 120  |    unsigned int B18 :1;
                             7452 ; 121  |    unsigned int B19 :1;
                             7453 ; 122  |    unsigned int B20 :1;
                             7454 ; 123  |    unsigned int B21 :1;
                             7455 ; 124  |    unsigned int B22 :1;
                             7456 ; 125  |    unsigned int B23 :1;
                             7457 ; 126  |};
                             7458 ; 127  |
                             7459 ; 128  |union BitInt {
                             7460 ; 129  |        struct Bitfield B;
                             7461 ; 130  |        int        I;
                             7462 ; 131  |};
                             7463 ; 132  |
                             7464 ; 133  |#define MAX_MSG_LENGTH 10
                             7465 ; 134  |struct CMessage
                             7466 ; 135  |{
                             7467 ; 136  |        unsigned int m_uLength;
                             7468 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7469 ; 138  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 127

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7470 ; 139  |
                             7471 ; 140  |typedef struct {
                             7472 ; 141  |    WORD m_wLength;
                             7473 ; 142  |    WORD m_wMessage;
                             7474 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7475 ; 144  |} Message;
                             7476 ; 145  |
                             7477 ; 146  |struct MessageQueueDescriptor
                             7478 ; 147  |{
                             7479 ; 148  |        int *m_pBase;
                             7480 ; 149  |        int m_iModulo;
                             7481 ; 150  |        int m_iSize;
                             7482 ; 151  |        int *m_pHead;
                             7483 ; 152  |        int *m_pTail;
                             7484 ; 153  |};
                             7485 ; 154  |
                             7486 ; 155  |struct ModuleEntry
                             7487 ; 156  |{
                             7488 ; 157  |    int m_iSignaledEventMask;
                             7489 ; 158  |    int m_iWaitEventMask;
                             7490 ; 159  |    int m_iResourceOfCode;
                             7491 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7492 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             7493 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7494 ; 163  |    int m_uTimeOutHigh;
                             7495 ; 164  |    int m_uTimeOutLow;
                             7496 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7497 ; 166  |};
                             7498 ; 167  |
                             7499 ; 168  |union WaitMask{
                             7500 ; 169  |    struct B{
                             7501 ; 170  |        unsigned int m_bNone     :1;
                             7502 ; 171  |        unsigned int m_bMessage  :1;
                             7503 ; 172  |        unsigned int m_bTimer    :1;
                             7504 ; 173  |        unsigned int m_bButton   :1;
                             7505 ; 174  |    } B;
                             7506 ; 175  |    int I;
                             7507 ; 176  |} ;
                             7508 ; 177  |
                             7509 ; 178  |
                             7510 ; 179  |struct Button {
                             7511 ; 180  |        WORD wButtonEvent;
                             7512 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7513 ; 182  |};
                             7514 ; 183  |
                             7515 ; 184  |struct Message {
                             7516 ; 185  |        WORD wMsgLength;
                             7517 ; 186  |        WORD wMsgCommand;
                             7518 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7519 ; 188  |};
                             7520 ; 189  |
                             7521 ; 190  |union EventTypes {
                             7522 ; 191  |        struct CMessage msg;
                             7523 ; 192  |        struct Button Button ;
                             7524 ; 193  |        struct Message Message;
                             7525 ; 194  |};
                             7526 ; 195  |
                             7527 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7528 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7529 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7530 ; 199  |#define BUILD_TYPE_PLAYER   0x102
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 128

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7531 ; 200  |
                             7532 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7533 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7534 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7535 ; 204  |
                             7536 ; 205  |#if DEBUG
                             7537 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7538 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7539 ; 208  |#else 
                             7540 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             7541 ; 210  |#define DebugBuildAssert(x)    
                             7542 ; 211  |#endif
                             7543 ; 212  |
                             7544 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7545 ; 214  |//  #pragma asm
                             7546 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7547 ; 216  |//  #pragma endasm
                             7548 ; 217  |
                             7549 ; 218  |
                             7550 ; 219  |#ifdef COLOR_262K
                             7551 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             7552 ; 221  |#elif defined(COLOR_65K)
                             7553 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             7554 ; 223  |#else
                             7555 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             7556 ; 225  |#endif
                             7557 ; 226  |    
                             7558 ; 227  |#endif // #ifndef _TYPES_H
                             7559 
                             7561 
                             7562 ; 29   |
                             7563 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7564 ; 31   |//   Pulse Width Modulator STMP Registers 
                             7565 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7566 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                             7567 ; 34   |
                             7568 ; 35   |
                             7569 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             7570 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                             7571 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                             7572 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                             7573 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                             7574 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                             7575 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                             7576 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                             7577 ; 44   |
                             7578 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                             7579 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                             7580 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                             7581 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                             7582 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                             7583 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
                             7584 ; 51   |
                             7585 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_
                                  BITPOS)
                             7586 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_
                                  BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 129

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7587 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_
                                  BITPOS)
                             7588 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_
                                  BITPOS)
                             7589 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                             7590 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_
                                  BITPOS)
                             7591 ; 58   |
                             7592 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                             7593 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                             7594 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                             7595 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                             7596 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                             7597 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                             7598 ; 65   |
                             7599 ; 66   |typedef union               
                             7600 ; 67   |{
                             7601 ; 68   |    struct {
                             7602 ; 69   |        int PWM0_EN                    :1;
                             7603 ; 70   |        int PWM1_EN                    :1;
                             7604 ; 71   |        int PWM2_EN                    :1;
                             7605 ; 72   |        int PWM3_EN                    :1;
                             7606 ; 73   |        int RSVD0                      :4;
                             7607 ; 74   |        int CDIV                       :2;
                             7608 ; 75   |        int RSVD1                      :13;
                             7609 ; 76   |        int MSTR_EN                    :1;
                             7610 ; 77   |    } B;
                             7611 ; 78   |    int I;
                             7612 ; 79   |} pwmcsr_type;
                             7613 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control 
                                  Status Register */
                             7614 ; 81   |
                             7615 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                             7616 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                             7617 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                             7618 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                             7619 ; 86   |
                             7620 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                             7621 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                             7622 ; 89   |
                             7623 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTI
                                  VE_BITPOS)
                             7624 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_
                                  INACTIVE_BITPOS)
                             7625 ; 92   |
                             7626 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                             7627 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                             7628 ; 95   |
                             7629 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                             7630 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                             7631 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                             7632 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                             7633 ; 100  |
                             7634 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                             7635 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                             7636 ; 103  |
                             7637 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTI
                                  VE_BITPOS)
                             7638 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_
                                  INACTIVE_BITPOS)
                             7639 ; 106  |
                             7640 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 130

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7641 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                             7642 ; 109  |
                             7643 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                             7644 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                             7645 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                             7646 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                             7647 ; 114  |
                             7648 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                             7649 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                             7650 ; 117  |
                             7651 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTI
                                  VE_BITPOS)
                             7652 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_
                                  INACTIVE_BITPOS)
                             7653 ; 120  |
                             7654 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                             7655 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                             7656 ; 123  |
                             7657 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             7658 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                             7659 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                             7660 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                             7661 ; 128  |
                             7662 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                             7663 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                             7664 ; 131  |
                             7665 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTI
                                  VE_BITPOS)
                             7666 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_
                                  INACTIVE_BITPOS)
                             7667 ; 134  |
                             7668 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                             7669 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                             7670 ; 137  |
                             7671 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             7672 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                             7673 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                             7674 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                             7675 ; 142  |
                             7676 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                             7677 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                             7678 ; 145  |
                             7679 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTI
                                  VE_BITPOS)
                             7680 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_
                                  INACTIVE_BITPOS)
                             7681 ; 148  |
                             7682 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                             7683 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                             7684 ; 151  |
                             7685 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             7686 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                             7687 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                             7688 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                             7689 ; 156  |
                             7690 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                             7691 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                             7692 ; 159  |
                             7693 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTI
                                  VE_BITPOS)
                             7694 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_
                                  INACTIVE_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 131

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7695 ; 162  |
                             7696 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                             7697 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                             7698 ; 165  |
                             7699 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             7700 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                             7701 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
                             7702 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                             7703 ; 170  |
                             7704 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                             7705 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                             7706 ; 173  |
                             7707 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTI
                                  VE_BITPOS)
                             7708 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_
                                  INACTIVE_BITPOS)
                             7709 ; 176  |
                             7710 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                             7711 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                             7712 ; 179  |
                             7713 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             7714 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                             7715 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                             7716 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                             7717 ; 184  |
                             7718 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                             7719 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                             7720 ; 187  |
                             7721 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTI
                                  VE_BITPOS)
                             7722 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_
                                  INACTIVE_BITPOS)
                             7723 ; 190  |
                             7724 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                             7725 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                             7726 ; 193  |
                             7727 ; 194  |typedef union               
                             7728 ; 195  |{
                             7729 ; 196  |    struct {
                             7730 ; 197  |       int ACTIVE                    :12;
                             7731 ; 198  |       int INACTIVE                  :12;
                             7732 ; 199  |    } B;
                             7733 ; 200  |    int I;
                             7734 ; 201  |} pwmchan_type;
                             7735 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Cha
                                  nnel 0 A Register */
                             7736 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Cha
                                  nnel 0 B Register */
                             7737 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Cha
                                  nnel 1 A Register */
                             7738 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Cha
                                  nnel 1 B Register */
                             7739 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Cha
                                  nnel 2 A Register */
                             7740 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Cha
                                  nnel 2 B Register */
                             7741 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Cha
                                  nnel 3 A Register */
                             7742 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Cha
                                  nnel 3 B Register */
                             7743 ; 210  |
                             7744 ; 211  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 132

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7745 ; 212  |
                             7746 ; 213  |
                             7747 ; 214  |
                             7748 ; 215  |
                             7749 
                             7751 
                             7752 ; 28   |#include "regsrevision.h"
                             7753 
                             7755 
                             7756 ; 1    |#if !(defined(__HW_REVR))
                             7757 ; 2    |#define __HW_REVR 1
                             7758 ; 3    |
                             7759 ; 4    |
                             7760 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             7761 ; 6    |
                             7762 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             7763 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             7764 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             7765 ; 10   |
                             7766 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                             7767 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             7768 ; 13   |
                             7769 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS
                                  )
                             7770 ; 15   |
                             7771 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                             7772 ; 17   |
                             7773 ; 18   |
                             7774 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             7775 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             7776 ; 21   |//  June15 2004: C struct updated to be correct: 
                             7777 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits
                                  .
                             7778 ; 23   |typedef union               
                             7779 ; 24   |{
                             7780 ; 25   |    struct {
                             7781 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             7782 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapp
                                  ing
                             7783 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             7784 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             7785 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                             7786 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             7787 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                             7788 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             7789 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                             7790 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                             7791 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                             7792 ; 37   |        unsigned RMJ    :16;    //Major Revision
                             7793 ; 38   |    } B;
                             7794 ; 39   |
                             7795 ; 40   |    int I;
                             7796 ; 41   |
                             7797 ; 42   |} revr_type;
                             7798 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                             7799 ; 44   |
                             7800 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                             7801 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                             7802 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                             7803 ; 48   |
                             7804 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 133

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7805 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE
                                  _B0_BITPOS)
                             7806 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                             7807 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                             7808 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                             7809 ; 54   |
                             7810 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                             7811 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                             7812 ; 57   |
                             7813 ; 58   |#endif //!@def(__HW_REVR)
                             7814 ; 59   |
                             7815 
                             7817 
                             7818 ; 29   |#include "regsrtc.h"
                             7819 
                             7821 
                             7822 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7823 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7824 ; 3    |// Filename: regsrtc.inc
                             7825 ; 4    |// Description: Register definitions for RTC interface
                             7826 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7827 ; 6    |// The following naming conventions are followed in this file.
                             7828 ; 7    |// All registers are named using the format...
                             7829 ; 8    |//     HW_<module>_<regname>
                             7830 ; 9    |// where <module> is the module name which can be any of the following...
                             7831 ; 10   |//     USB20
                             7832 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7833 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7834 ; 13   |// that module)
                             7835 ; 14   |// <regname> is the specific register within that module
                             7836 ; 15   |// We also define the following...
                             7837 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7838 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7839 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7840 ; 19   |// which does something else, and
                             7841 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7842 ; 21   |// which does something else.
                             7843 ; 22   |// Other rules
                             7844 ; 23   |//     All caps
                             7845 ; 24   |//     Numeric identifiers start at 0
                             7846 ; 25   |#if !(defined(regsrtcinc))
                             7847 ; 26   |#define regsrtcinc 1
                             7848 ; 27   |
                             7849 ; 28   |#include "types.h"
                             7850 
                             7852 
                             7853 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7854 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7855 ; 3    |//
                             7856 ; 4    |// Filename: types.h
                             7857 ; 5    |// Description: Standard data types
                             7858 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7859 ; 7    |
                             7860 ; 8    |#ifndef _TYPES_H
                             7861 ; 9    |#define _TYPES_H
                             7862 ; 10   |
                             7863 ; 11   |// TODO:  move this outta here!
                             7864 ; 12   |#if !defined(NOERROR)
                             7865 ; 13   |#define NOERROR 0
                             7866 ; 14   |#define SUCCESS 0
                             7867 ; 15   |#endif 
                             7868 ; 16   |#if !defined(SUCCESS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 134

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7869 ; 17   |#define SUCCESS  0
                             7870 ; 18   |#endif
                             7871 ; 19   |#if !defined(ERROR)
                             7872 ; 20   |#define ERROR   -1
                             7873 ; 21   |#endif
                             7874 ; 22   |#if !defined(FALSE)
                             7875 ; 23   |#define FALSE 0
                             7876 ; 24   |#endif
                             7877 ; 25   |#if !defined(TRUE)
                             7878 ; 26   |#define TRUE  1
                             7879 ; 27   |#endif
                             7880 ; 28   |
                             7881 ; 29   |#if !defined(NULL)
                             7882 ; 30   |#define NULL 0
                             7883 ; 31   |#endif
                             7884 ; 32   |
                             7885 ; 33   |#define MAX_INT     0x7FFFFF
                             7886 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7887 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7888 ; 36   |#define MAX_ULONG   (-1) 
                             7889 ; 37   |
                             7890 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7891 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7892 ; 40   |
                             7893 ; 41   |
                             7894 ; 42   |#define BYTE    unsigned char       // btVarName
                             7895 ; 43   |#define CHAR    signed char         // cVarName
                             7896 ; 44   |#define USHORT  unsigned short      // usVarName
                             7897 ; 45   |#define SHORT   unsigned short      // sVarName
                             7898 ; 46   |#define WORD    unsigned int        // wVarName
                             7899 ; 47   |#define INT     signed int          // iVarName
                             7900 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7901 ; 49   |#define LONG    signed long         // lVarName
                             7902 ; 50   |#define BOOL    unsigned int        // bVarName
                             7903 ; 51   |#define FRACT   _fract              // frVarName
                             7904 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7905 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7906 ; 54   |#define FLOAT   float               // fVarName
                             7907 ; 55   |#define DBL     double              // dVarName
                             7908 ; 56   |#define ENUM    enum                // eVarName
                             7909 ; 57   |#define CMX     _complex            // cmxVarName
                             7910 ; 58   |typedef WORD UCS3;                   // 
                             7911 ; 59   |
                             7912 ; 60   |#define UINT16  unsigned short
                             7913 ; 61   |#define UINT8   unsigned char   
                             7914 ; 62   |#define UINT32  unsigned long
                             7915 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7916 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7917 ; 65   |#define WCHAR   UINT16
                             7918 ; 66   |
                             7919 ; 67   |//UINT128 is 16 bytes or 6 words
                             7920 ; 68   |typedef struct UINT128_3500 {   
                             7921 ; 69   |    int val[6];     
                             7922 ; 70   |} UINT128_3500;
                             7923 ; 71   |
                             7924 ; 72   |#define UINT128   UINT128_3500
                             7925 ; 73   |
                             7926 ; 74   |// Little endian word packed byte strings:   
                             7927 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7928 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 135

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7929 ; 77   |// Little endian word packed byte strings:   
                             7930 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7931 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7932 ; 80   |
                             7933 ; 81   |// Declare Memory Spaces To Use When Coding
                             7934 ; 82   |// A. Sector Buffers
                             7935 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7936 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7937 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7938 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7939 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7940 ; 88   |// B. Media DDI Memory
                             7941 ; 89   |#define MEDIA_DDI_MEM _Y
                             7942 ; 90   |
                             7943 ; 91   |
                             7944 ; 92   |
                             7945 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7946 ; 94   |// Examples of circular pointers:
                             7947 ; 95   |//    INT CIRC cpiVarName
                             7948 ; 96   |//    DWORD CIRC cpdwVarName
                             7949 ; 97   |
                             7950 ; 98   |#define RETCODE INT                 // rcVarName
                             7951 ; 99   |
                             7952 ; 100  |// generic bitfield structure
                             7953 ; 101  |struct Bitfield {
                             7954 ; 102  |    unsigned int B0  :1;
                             7955 ; 103  |    unsigned int B1  :1;
                             7956 ; 104  |    unsigned int B2  :1;
                             7957 ; 105  |    unsigned int B3  :1;
                             7958 ; 106  |    unsigned int B4  :1;
                             7959 ; 107  |    unsigned int B5  :1;
                             7960 ; 108  |    unsigned int B6  :1;
                             7961 ; 109  |    unsigned int B7  :1;
                             7962 ; 110  |    unsigned int B8  :1;
                             7963 ; 111  |    unsigned int B9  :1;
                             7964 ; 112  |    unsigned int B10 :1;
                             7965 ; 113  |    unsigned int B11 :1;
                             7966 ; 114  |    unsigned int B12 :1;
                             7967 ; 115  |    unsigned int B13 :1;
                             7968 ; 116  |    unsigned int B14 :1;
                             7969 ; 117  |    unsigned int B15 :1;
                             7970 ; 118  |    unsigned int B16 :1;
                             7971 ; 119  |    unsigned int B17 :1;
                             7972 ; 120  |    unsigned int B18 :1;
                             7973 ; 121  |    unsigned int B19 :1;
                             7974 ; 122  |    unsigned int B20 :1;
                             7975 ; 123  |    unsigned int B21 :1;
                             7976 ; 124  |    unsigned int B22 :1;
                             7977 ; 125  |    unsigned int B23 :1;
                             7978 ; 126  |};
                             7979 ; 127  |
                             7980 ; 128  |union BitInt {
                             7981 ; 129  |        struct Bitfield B;
                             7982 ; 130  |        int        I;
                             7983 ; 131  |};
                             7984 ; 132  |
                             7985 ; 133  |#define MAX_MSG_LENGTH 10
                             7986 ; 134  |struct CMessage
                             7987 ; 135  |{
                             7988 ; 136  |        unsigned int m_uLength;
                             7989 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7990 ; 138  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 136

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7991 ; 139  |
                             7992 ; 140  |typedef struct {
                             7993 ; 141  |    WORD m_wLength;
                             7994 ; 142  |    WORD m_wMessage;
                             7995 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7996 ; 144  |} Message;
                             7997 ; 145  |
                             7998 ; 146  |struct MessageQueueDescriptor
                             7999 ; 147  |{
                             8000 ; 148  |        int *m_pBase;
                             8001 ; 149  |        int m_iModulo;
                             8002 ; 150  |        int m_iSize;
                             8003 ; 151  |        int *m_pHead;
                             8004 ; 152  |        int *m_pTail;
                             8005 ; 153  |};
                             8006 ; 154  |
                             8007 ; 155  |struct ModuleEntry
                             8008 ; 156  |{
                             8009 ; 157  |    int m_iSignaledEventMask;
                             8010 ; 158  |    int m_iWaitEventMask;
                             8011 ; 159  |    int m_iResourceOfCode;
                             8012 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8013 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8014 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8015 ; 163  |    int m_uTimeOutHigh;
                             8016 ; 164  |    int m_uTimeOutLow;
                             8017 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8018 ; 166  |};
                             8019 ; 167  |
                             8020 ; 168  |union WaitMask{
                             8021 ; 169  |    struct B{
                             8022 ; 170  |        unsigned int m_bNone     :1;
                             8023 ; 171  |        unsigned int m_bMessage  :1;
                             8024 ; 172  |        unsigned int m_bTimer    :1;
                             8025 ; 173  |        unsigned int m_bButton   :1;
                             8026 ; 174  |    } B;
                             8027 ; 175  |    int I;
                             8028 ; 176  |} ;
                             8029 ; 177  |
                             8030 ; 178  |
                             8031 ; 179  |struct Button {
                             8032 ; 180  |        WORD wButtonEvent;
                             8033 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8034 ; 182  |};
                             8035 ; 183  |
                             8036 ; 184  |struct Message {
                             8037 ; 185  |        WORD wMsgLength;
                             8038 ; 186  |        WORD wMsgCommand;
                             8039 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8040 ; 188  |};
                             8041 ; 189  |
                             8042 ; 190  |union EventTypes {
                             8043 ; 191  |        struct CMessage msg;
                             8044 ; 192  |        struct Button Button ;
                             8045 ; 193  |        struct Message Message;
                             8046 ; 194  |};
                             8047 ; 195  |
                             8048 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8049 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8050 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8051 ; 199  |#define BUILD_TYPE_PLAYER   0x102
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 137

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8052 ; 200  |
                             8053 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8054 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8055 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8056 ; 204  |
                             8057 ; 205  |#if DEBUG
                             8058 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8059 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8060 ; 208  |#else 
                             8061 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8062 ; 210  |#define DebugBuildAssert(x)    
                             8063 ; 211  |#endif
                             8064 ; 212  |
                             8065 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8066 ; 214  |//  #pragma asm
                             8067 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8068 ; 216  |//  #pragma endasm
                             8069 ; 217  |
                             8070 ; 218  |
                             8071 ; 219  |#ifdef COLOR_262K
                             8072 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8073 ; 221  |#elif defined(COLOR_65K)
                             8074 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8075 ; 223  |#else
                             8076 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8077 ; 225  |#endif
                             8078 ; 226  |    
                             8079 ; 227  |#endif // #ifndef _TYPES_H
                             8080 
                             8082 
                             8083 ; 29   |
                             8084 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8085 ; 31   |
                             8086 ; 32   |//   RTC STMP Registers 
                             8087 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             8088 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8089 ; 35   |
                             8090 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             8091 ; 37   |
                             8092 ; 38   |
                             8093 ; 39   |
                             8094 ; 40   |
                             8095 ; 41   |
                             8096 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             8097 ; 43   |
                             8098 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             8099 ; 45   |
                             8100 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             8101 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             8102 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             8103 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             8104 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             8105 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             8106 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             8107 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             8108 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             8109 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             8110 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 138

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8111 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             8112 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             8113 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             8114 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             8115 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                             8116 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             8117 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             8118 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             8119 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             8120 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             8121 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             8122 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             8123 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             8124 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             8125 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             8126 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             8127 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             8128 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             8129 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             8130 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             8131 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             8132 ; 78   |
                             8133 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                             8134 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                             8135 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                             8136 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                             8137 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                             8138 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                             8139 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                             8140 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             8141 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             8142 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             8143 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             8144 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             8145 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                             8146 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                             8147 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                             8148 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                             8149 ; 95   |
                             8150 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             8151 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             8152 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             8153 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             8154 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             8155 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 139

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8156 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             8157 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             8158 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             8159 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                             8160 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             8161 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             8162 ; 108  |
                             8163 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             8164 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             8165 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             8166 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             8167 ; 113  |
                             8168 ; 114  |
                             8169 ; 115  |typedef union               
                             8170 ; 116  |{
                             8171 ; 117  |    struct {
                             8172 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             8173 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             8174 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             8175 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             8176 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             8177 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             8178 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             8179 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             8180 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             8181 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             8182 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             8183 ; 129  |    } B;
                             8184 ; 130  |    int I;
                             8185 ; 131  |    unsigned int U;
                             8186 ; 132  |} rtc_csr_type;
                             8187 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                             8188 ; 134  |
                             8189 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             8190 ; 136  |
                             8191 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             8192 ; 138  |
                             8193 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             8194 ; 140  |
                             8195 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             8196 ; 142  |
                             8197 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             8198 ; 144  |
                             8199 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                             8200 ; 146  |
                             8201 ; 147  |typedef union               
                             8202 ; 148  |{
                             8203 ; 149  |    struct {
                             8204 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             8205 ; 151  |    } B;
                             8206 ; 152  |    int I;
                             8207 ; 153  |    unsigned int U;
                             8208 ; 154  |} rtc_mseconds0_type;
                             8209 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                             8210 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             8211 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             8212 ; 158  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 140

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8213 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             8214 ; 160  |
                             8215 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             8216 ; 162  |
                             8217 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             8218 ; 164  |
                             8219 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             8220 ; 166  |
                             8221 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                             8222 ; 168  |
                             8223 ; 169  |typedef union               
                             8224 ; 170  |{
                             8225 ; 171  |    struct {
                             8226 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             8227 ; 173  |    } B;
                             8228 ; 174  |    int I;
                             8229 ; 175  |    unsigned int U;
                             8230 ; 176  |} rtc_mseconds1_type;
                             8231 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                             8232 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             8233 ; 179  |
                             8234 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             8235 ; 181  |#define HW_RTC_UP_OFFSET 2
                             8236 ; 182  |
                             8237 ; 183  |
                             8238 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             8239 ; 185  |
                             8240 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             8241 ; 187  |
                             8242 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             8243 ; 189  |
                             8244 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             8245 ; 191  |
                             8246 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             8247 ; 193  |
                             8248 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             8249 ; 195  |
                             8250 ; 196  |typedef union               
                             8251 ; 197  |{
                             8252 ; 198  |    struct {
                             8253 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             8254 ; 200  |    } B;
                             8255 ; 201  |    int I;
                             8256 ; 202  |    unsigned int U;
                             8257 ; 203  |} rtc_watchdog_type;
                             8258 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                             8259 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             8260 ; 206  |
                             8261 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             8262 ; 208  |
                             8263 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             8264 ; 210  |
                             8265 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             8266 ; 212  |
                             8267 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                             8268 ; 214  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 141

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8269 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             8270 ; 216  |
                             8271 ; 217  |typedef union               
                             8272 ; 218  |{
                             8273 ; 219  |    struct {
                             8274 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             8275 ; 221  |    } B;
                             8276 ; 222  |    int I;
                             8277 ; 223  |    unsigned int U;
                             8278 ; 224  |} rtc_alarm0_type;
                             8279 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                             8280 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             8281 ; 227  |
                             8282 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             8283 ; 229  |
                             8284 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             8285 ; 231  |
                             8286 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             8287 ; 233  |
                             8288 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                             8289 ; 235  |
                             8290 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             8291 ; 237  |
                             8292 ; 238  |typedef union               
                             8293 ; 239  |{
                             8294 ; 240  |    struct {
                             8295 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             8296 ; 242  |    } B;
                             8297 ; 243  |    int I;
                             8298 ; 244  |    unsigned int U;
                             8299 ; 245  |} rtc_alarm1_type;
                             8300 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                             8301 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             8302 ; 248  |
                             8303 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             8304 ; 250  |
                             8305 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             8306 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             8307 ; 253  |
                             8308 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             8309 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             8310 ; 256  |
                             8311 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             8312 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                             8313 ; 259  |
                             8314 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             8315 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             8316 ; 262  |
                             8317 ; 263  |typedef union               
                             8318 ; 264  |{
                             8319 ; 265  |    struct {
                             8320 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             8321 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             8322 ; 268  |    } B;
                             8323 ; 269  |    int I;
                             8324 ; 270  |    unsigned int U;
                             8325 ; 271  |} rtc_xtaldivide_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 142

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8326 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                             8327 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             8328 ; 274  |
                             8329 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             8330 ; 276  |
                             8331 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             8332 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             8333 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             8334 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             8335 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             8336 ; 282  |
                             8337 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             8338 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             8339 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             8340 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             8341 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             8342 ; 288  |
                             8343 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             8344 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             8345 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             8346 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             8347 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                             8348 ; 294  |
                             8349 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             8350 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                             8351 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                             8352 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                             8353 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             8354 ; 300  |
                             8355 ; 301  |typedef union               
                             8356 ; 302  |{
                             8357 ; 303  |   struct {
                             8358 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             8359 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             8360 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             8361 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             8362 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             8363 ; 309  |   } B;
                             8364 ; 310  |    int I;
                             8365 ; 311  |    unsigned int U;
                             8366 ; 312  |} rtc_PERSISTENT0_type;
                             8367 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                             8368 ; 314  |
                             8369 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             8370 ; 316  |
                             8371 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             8372 ; 318  |
                             8373 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             8374 ; 320  |
                             8375 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             8376 ; 322  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 143

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8377 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                             8378 ; 324  |
                             8379 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             8380 ; 326  |
                             8381 ; 327  |
                             8382 ; 328  |typedef union               
                             8383 ; 329  |{
                             8384 ; 330  |    struct {
                             8385 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             8386 ; 332  |    } B;
                             8387 ; 333  |    int I;
                             8388 ; 334  |    unsigned int U;
                             8389 ; 335  |} rtc_PERSISTENT1_type;
                             8390 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                             8391 ; 337  |
                             8392 ; 338  |
                             8393 ; 339  |#endif
                             8394 ; 340  |
                             8395 ; 341  |
                             8396 ; 342  |
                             8397 ; 343  |
                             8398 ; 344  |
                             8399 ; 345  |
                             8400 ; 346  |
                             8401 ; 347  |
                             8402 ; 348  |
                             8403 ; 349  |
                             8404 ; 350  |
                             8405 ; 351  |
                             8406 ; 352  |
                             8407 ; 353  |
                             8408 
                             8410 
                             8411 ; 30   |#include "regsspare.h"
                             8412 
                             8414 
                             8415 ; 1    |#if !(defined(RESGSSPARE_INC))
                             8416 ; 2    |#define RESGSSPARE_INC 1
                             8417 ; 3    |
                             8418 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                             8419 ; 5    |
                             8420 ; 6    |
                             8421 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                             8422 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                             8423 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                             8424 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                             8425 ; 11   |
                             8426 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                             8427 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                             8428 ; 14   |
                             8429 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                             8430 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                             8431 ; 17   |
                             8432 ; 18   |
                             8433 ; 19   |
                             8434 ; 20   |typedef union               
                             8435 ; 21   |{
                             8436 ; 22   |    struct {
                             8437 ; 23   |        int      I2SS       :1;     
                             8438 ; 24   |        int      USBSELECT  :1;     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 144

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8439 ; 25   |        unsigned            :6;
                             8440 ; 26   |        int      USBPLUGIN  :1;     
                             8441 ; 27   |        int      PSWITCH    :1;     
                             8442 ; 28   |    } B;
                             8443 ; 29   |
                             8444 ; 30   |    int I;
                             8445 ; 31   |
                             8446 ; 32   |} spare_type;
                             8447 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                             8448 ; 34   |
                             8449 ; 35   |
                             8450 ; 36   |
                             8451 ; 37   |#endif
                             8452 
                             8454 
                             8455 ; 31   |#include "regsspi.h"
                             8456 
                             8458 
                             8459 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8460 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8461 ; 3    |//;; Filename    : regsspi.inc
                             8462 ; 4    |//;; Description : Register definitions for SPI interface
                             8463 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8464 ; 6    |
                             8465 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8466 ; 8    |// The following naming conventions are followed in this file.
                             8467 ; 9    |// All registers are named using the format...
                             8468 ; 10   |//     HW_<module>_<regname>
                             8469 ; 11   |// where <module> is the module name which can be any of the following...
                             8470 ; 12   |//     USB20
                             8471 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8472 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8473 ; 15   |// that module)
                             8474 ; 16   |// <regname> is the specific register within that module
                             8475 ; 17   |// We also define the following...
                             8476 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8477 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8478 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8479 ; 21   |// which does something else, and
                             8480 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8481 ; 23   |// which does something else.
                             8482 ; 24   |// Other rules
                             8483 ; 25   |//     All caps
                             8484 ; 26   |//     Numeric identifiers start at 0
                             8485 ; 27   |#if !(defined(regsspiinc))
                             8486 ; 28   |#define regsspiinc 1
                             8487 ; 29   |
                             8488 ; 30   |#include "types.h"
                             8489 
                             8491 
                             8492 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8493 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8494 ; 3    |//
                             8495 ; 4    |// Filename: types.h
                             8496 ; 5    |// Description: Standard data types
                             8497 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8498 ; 7    |
                             8499 ; 8    |#ifndef _TYPES_H
                             8500 ; 9    |#define _TYPES_H
                             8501 ; 10   |
                             8502 ; 11   |// TODO:  move this outta here!
                             8503 ; 12   |#if !defined(NOERROR)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 145

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8504 ; 13   |#define NOERROR 0
                             8505 ; 14   |#define SUCCESS 0
                             8506 ; 15   |#endif 
                             8507 ; 16   |#if !defined(SUCCESS)
                             8508 ; 17   |#define SUCCESS  0
                             8509 ; 18   |#endif
                             8510 ; 19   |#if !defined(ERROR)
                             8511 ; 20   |#define ERROR   -1
                             8512 ; 21   |#endif
                             8513 ; 22   |#if !defined(FALSE)
                             8514 ; 23   |#define FALSE 0
                             8515 ; 24   |#endif
                             8516 ; 25   |#if !defined(TRUE)
                             8517 ; 26   |#define TRUE  1
                             8518 ; 27   |#endif
                             8519 ; 28   |
                             8520 ; 29   |#if !defined(NULL)
                             8521 ; 30   |#define NULL 0
                             8522 ; 31   |#endif
                             8523 ; 32   |
                             8524 ; 33   |#define MAX_INT     0x7FFFFF
                             8525 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8526 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8527 ; 36   |#define MAX_ULONG   (-1) 
                             8528 ; 37   |
                             8529 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8530 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8531 ; 40   |
                             8532 ; 41   |
                             8533 ; 42   |#define BYTE    unsigned char       // btVarName
                             8534 ; 43   |#define CHAR    signed char         // cVarName
                             8535 ; 44   |#define USHORT  unsigned short      // usVarName
                             8536 ; 45   |#define SHORT   unsigned short      // sVarName
                             8537 ; 46   |#define WORD    unsigned int        // wVarName
                             8538 ; 47   |#define INT     signed int          // iVarName
                             8539 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8540 ; 49   |#define LONG    signed long         // lVarName
                             8541 ; 50   |#define BOOL    unsigned int        // bVarName
                             8542 ; 51   |#define FRACT   _fract              // frVarName
                             8543 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8544 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8545 ; 54   |#define FLOAT   float               // fVarName
                             8546 ; 55   |#define DBL     double              // dVarName
                             8547 ; 56   |#define ENUM    enum                // eVarName
                             8548 ; 57   |#define CMX     _complex            // cmxVarName
                             8549 ; 58   |typedef WORD UCS3;                   // 
                             8550 ; 59   |
                             8551 ; 60   |#define UINT16  unsigned short
                             8552 ; 61   |#define UINT8   unsigned char   
                             8553 ; 62   |#define UINT32  unsigned long
                             8554 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8555 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8556 ; 65   |#define WCHAR   UINT16
                             8557 ; 66   |
                             8558 ; 67   |//UINT128 is 16 bytes or 6 words
                             8559 ; 68   |typedef struct UINT128_3500 {   
                             8560 ; 69   |    int val[6];     
                             8561 ; 70   |} UINT128_3500;
                             8562 ; 71   |
                             8563 ; 72   |#define UINT128   UINT128_3500
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 146

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8564 ; 73   |
                             8565 ; 74   |// Little endian word packed byte strings:   
                             8566 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8567 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8568 ; 77   |// Little endian word packed byte strings:   
                             8569 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8570 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8571 ; 80   |
                             8572 ; 81   |// Declare Memory Spaces To Use When Coding
                             8573 ; 82   |// A. Sector Buffers
                             8574 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8575 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8576 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8577 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8578 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8579 ; 88   |// B. Media DDI Memory
                             8580 ; 89   |#define MEDIA_DDI_MEM _Y
                             8581 ; 90   |
                             8582 ; 91   |
                             8583 ; 92   |
                             8584 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8585 ; 94   |// Examples of circular pointers:
                             8586 ; 95   |//    INT CIRC cpiVarName
                             8587 ; 96   |//    DWORD CIRC cpdwVarName
                             8588 ; 97   |
                             8589 ; 98   |#define RETCODE INT                 // rcVarName
                             8590 ; 99   |
                             8591 ; 100  |// generic bitfield structure
                             8592 ; 101  |struct Bitfield {
                             8593 ; 102  |    unsigned int B0  :1;
                             8594 ; 103  |    unsigned int B1  :1;
                             8595 ; 104  |    unsigned int B2  :1;
                             8596 ; 105  |    unsigned int B3  :1;
                             8597 ; 106  |    unsigned int B4  :1;
                             8598 ; 107  |    unsigned int B5  :1;
                             8599 ; 108  |    unsigned int B6  :1;
                             8600 ; 109  |    unsigned int B7  :1;
                             8601 ; 110  |    unsigned int B8  :1;
                             8602 ; 111  |    unsigned int B9  :1;
                             8603 ; 112  |    unsigned int B10 :1;
                             8604 ; 113  |    unsigned int B11 :1;
                             8605 ; 114  |    unsigned int B12 :1;
                             8606 ; 115  |    unsigned int B13 :1;
                             8607 ; 116  |    unsigned int B14 :1;
                             8608 ; 117  |    unsigned int B15 :1;
                             8609 ; 118  |    unsigned int B16 :1;
                             8610 ; 119  |    unsigned int B17 :1;
                             8611 ; 120  |    unsigned int B18 :1;
                             8612 ; 121  |    unsigned int B19 :1;
                             8613 ; 122  |    unsigned int B20 :1;
                             8614 ; 123  |    unsigned int B21 :1;
                             8615 ; 124  |    unsigned int B22 :1;
                             8616 ; 125  |    unsigned int B23 :1;
                             8617 ; 126  |};
                             8618 ; 127  |
                             8619 ; 128  |union BitInt {
                             8620 ; 129  |        struct Bitfield B;
                             8621 ; 130  |        int        I;
                             8622 ; 131  |};
                             8623 ; 132  |
                             8624 ; 133  |#define MAX_MSG_LENGTH 10
                             8625 ; 134  |struct CMessage
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 147

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8626 ; 135  |{
                             8627 ; 136  |        unsigned int m_uLength;
                             8628 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8629 ; 138  |};
                             8630 ; 139  |
                             8631 ; 140  |typedef struct {
                             8632 ; 141  |    WORD m_wLength;
                             8633 ; 142  |    WORD m_wMessage;
                             8634 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8635 ; 144  |} Message;
                             8636 ; 145  |
                             8637 ; 146  |struct MessageQueueDescriptor
                             8638 ; 147  |{
                             8639 ; 148  |        int *m_pBase;
                             8640 ; 149  |        int m_iModulo;
                             8641 ; 150  |        int m_iSize;
                             8642 ; 151  |        int *m_pHead;
                             8643 ; 152  |        int *m_pTail;
                             8644 ; 153  |};
                             8645 ; 154  |
                             8646 ; 155  |struct ModuleEntry
                             8647 ; 156  |{
                             8648 ; 157  |    int m_iSignaledEventMask;
                             8649 ; 158  |    int m_iWaitEventMask;
                             8650 ; 159  |    int m_iResourceOfCode;
                             8651 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8652 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8653 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8654 ; 163  |    int m_uTimeOutHigh;
                             8655 ; 164  |    int m_uTimeOutLow;
                             8656 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8657 ; 166  |};
                             8658 ; 167  |
                             8659 ; 168  |union WaitMask{
                             8660 ; 169  |    struct B{
                             8661 ; 170  |        unsigned int m_bNone     :1;
                             8662 ; 171  |        unsigned int m_bMessage  :1;
                             8663 ; 172  |        unsigned int m_bTimer    :1;
                             8664 ; 173  |        unsigned int m_bButton   :1;
                             8665 ; 174  |    } B;
                             8666 ; 175  |    int I;
                             8667 ; 176  |} ;
                             8668 ; 177  |
                             8669 ; 178  |
                             8670 ; 179  |struct Button {
                             8671 ; 180  |        WORD wButtonEvent;
                             8672 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8673 ; 182  |};
                             8674 ; 183  |
                             8675 ; 184  |struct Message {
                             8676 ; 185  |        WORD wMsgLength;
                             8677 ; 186  |        WORD wMsgCommand;
                             8678 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8679 ; 188  |};
                             8680 ; 189  |
                             8681 ; 190  |union EventTypes {
                             8682 ; 191  |        struct CMessage msg;
                             8683 ; 192  |        struct Button Button ;
                             8684 ; 193  |        struct Message Message;
                             8685 ; 194  |};
                             8686 ; 195  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 148

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8687 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8688 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8689 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8690 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8691 ; 200  |
                             8692 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8693 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8694 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8695 ; 204  |
                             8696 ; 205  |#if DEBUG
                             8697 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8698 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8699 ; 208  |#else 
                             8700 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8701 ; 210  |#define DebugBuildAssert(x)    
                             8702 ; 211  |#endif
                             8703 ; 212  |
                             8704 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8705 ; 214  |//  #pragma asm
                             8706 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8707 ; 216  |//  #pragma endasm
                             8708 ; 217  |
                             8709 ; 218  |
                             8710 ; 219  |#ifdef COLOR_262K
                             8711 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8712 ; 221  |#elif defined(COLOR_65K)
                             8713 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8714 ; 223  |#else
                             8715 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8716 ; 225  |#endif
                             8717 ; 226  |    
                             8718 ; 227  |#endif // #ifndef _TYPES_H
                             8719 
                             8721 
                             8722 ; 31   |
                             8723 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8724 ; 33   |
                             8725 ; 34   |//   SPI STMP3500 Registers 
                             8726 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                             8727 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8728 ; 37   |
                             8729 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                             8730 ; 39   |
                             8731 ; 40   |
                             8732 ; 41   |
                             8733 ; 42   |// /////////////////////////////////////////////
                             8734 ; 43   |// //  SPI Control/Status Register Bit Definitions
                             8735 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                             8736 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                             8737 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                             8738 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                             8739 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                             8740 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                             8741 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                             8742 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                             8743 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                             8744 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                             8745 ; 54   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 149

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8746 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                             8747 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                             8748 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                             8749 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                             8750 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                             8751 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                             8752 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                             8753 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                             8754 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
                             8755 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                             8756 ; 65   |
                             8757 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                             8758 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                             8759 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                             8760 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                             8761 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                             8762 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                             8763 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                             8764 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                             8765 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                             8766 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                             8767 ; 76   |
                             8768 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                             8769 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                             8770 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                             8771 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                             8772 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                             8773 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                             8774 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                             8775 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                             8776 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                             8777 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                             8778 ; 87   |
                             8779 ; 88   |typedef union               
                             8780 ; 89   |{
                             8781 ; 90   |    struct {
                             8782 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                             8783 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                             8784 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                             8785 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                             8786 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                             8787 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                             8788 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                             8789 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                             8790 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                             8791 ; 100  |    } B;
                             8792 ; 101  |
                             8793 ; 102  |    int I;
                             8794 ; 103  |    unsigned int U;
                             8795 ; 104  |} spcsr_type;
                             8796 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / S
                                  tatus Register */
                             8797 ; 106  |
                             8798 ; 107  |// /////////////////////////////////////////////
                             8799 ; 108  |// //  SPI Data Register Bit Definitions
                             8800 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                             8801 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                             8802 ; 111  |
                             8803 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                             8804 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                             8805 ; 114  |
                             8806 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 150

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8807 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                             8808 ; 117  |
                             8809 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                             8810 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                             8811 ; 120  |
                             8812 ; 121  |typedef union               
                             8813 ; 122  |{
                             8814 ; 123  |    struct {
                             8815 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                             8816 ; 125  |    } B;
                             8817 ; 126  |
                             8818 ; 127  |    int I;
                             8819 ; 128  |    unsigned int U;
                             8820 ; 129  |} spdr_type;
                             8821 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Regist
                                  er */
                             8822 ; 131  |
                             8823 ; 132  |
                             8824 ; 133  |#endif
                             8825 ; 134  |
                             8826 ; 135  |
                             8827 
                             8829 
                             8830 ; 32   |#include "regsswizzle.h"
                             8831 
                             8833 
                             8834 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8835 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8836 ; 3    |//;; Filename    : regsswizzle.inc
                             8837 ; 4    |//;; Description : Register definitions for Swizzle interface
                             8838 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8839 ; 6    |
                             8840 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8841 ; 8    |// The following naming conventions are followed in this file.
                             8842 ; 9    |// All registers are named using the format...
                             8843 ; 10   |//     HW_<module>_<regname>
                             8844 ; 11   |// where <module> is the module name which can be any of the following...
                             8845 ; 12   |//     USB20
                             8846 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8847 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8848 ; 15   |// that module)
                             8849 ; 16   |// <regname> is the specific register within that module
                             8850 ; 17   |// We also define the following...
                             8851 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8852 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8853 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8854 ; 21   |// which does something else, and
                             8855 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8856 ; 23   |// which does something else.
                             8857 ; 24   |// Other rules
                             8858 ; 25   |//     All caps
                             8859 ; 26   |//     Numeric identifiers start at 0
                             8860 ; 27   |#if !(defined(regsswizzleinc))
                             8861 ; 28   |#define regsswizzleinc 1
                             8862 ; 29   |
                             8863 ; 30   |#include "types.h"
                             8864 
                             8866 
                             8867 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8868 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8869 ; 3    |//
                             8870 ; 4    |// Filename: types.h
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 151

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8871 ; 5    |// Description: Standard data types
                             8872 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8873 ; 7    |
                             8874 ; 8    |#ifndef _TYPES_H
                             8875 ; 9    |#define _TYPES_H
                             8876 ; 10   |
                             8877 ; 11   |// TODO:  move this outta here!
                             8878 ; 12   |#if !defined(NOERROR)
                             8879 ; 13   |#define NOERROR 0
                             8880 ; 14   |#define SUCCESS 0
                             8881 ; 15   |#endif 
                             8882 ; 16   |#if !defined(SUCCESS)
                             8883 ; 17   |#define SUCCESS  0
                             8884 ; 18   |#endif
                             8885 ; 19   |#if !defined(ERROR)
                             8886 ; 20   |#define ERROR   -1
                             8887 ; 21   |#endif
                             8888 ; 22   |#if !defined(FALSE)
                             8889 ; 23   |#define FALSE 0
                             8890 ; 24   |#endif
                             8891 ; 25   |#if !defined(TRUE)
                             8892 ; 26   |#define TRUE  1
                             8893 ; 27   |#endif
                             8894 ; 28   |
                             8895 ; 29   |#if !defined(NULL)
                             8896 ; 30   |#define NULL 0
                             8897 ; 31   |#endif
                             8898 ; 32   |
                             8899 ; 33   |#define MAX_INT     0x7FFFFF
                             8900 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8901 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8902 ; 36   |#define MAX_ULONG   (-1) 
                             8903 ; 37   |
                             8904 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8905 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8906 ; 40   |
                             8907 ; 41   |
                             8908 ; 42   |#define BYTE    unsigned char       // btVarName
                             8909 ; 43   |#define CHAR    signed char         // cVarName
                             8910 ; 44   |#define USHORT  unsigned short      // usVarName
                             8911 ; 45   |#define SHORT   unsigned short      // sVarName
                             8912 ; 46   |#define WORD    unsigned int        // wVarName
                             8913 ; 47   |#define INT     signed int          // iVarName
                             8914 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8915 ; 49   |#define LONG    signed long         // lVarName
                             8916 ; 50   |#define BOOL    unsigned int        // bVarName
                             8917 ; 51   |#define FRACT   _fract              // frVarName
                             8918 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8919 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8920 ; 54   |#define FLOAT   float               // fVarName
                             8921 ; 55   |#define DBL     double              // dVarName
                             8922 ; 56   |#define ENUM    enum                // eVarName
                             8923 ; 57   |#define CMX     _complex            // cmxVarName
                             8924 ; 58   |typedef WORD UCS3;                   // 
                             8925 ; 59   |
                             8926 ; 60   |#define UINT16  unsigned short
                             8927 ; 61   |#define UINT8   unsigned char   
                             8928 ; 62   |#define UINT32  unsigned long
                             8929 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8930 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 152

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8931 ; 65   |#define WCHAR   UINT16
                             8932 ; 66   |
                             8933 ; 67   |//UINT128 is 16 bytes or 6 words
                             8934 ; 68   |typedef struct UINT128_3500 {   
                             8935 ; 69   |    int val[6];     
                             8936 ; 70   |} UINT128_3500;
                             8937 ; 71   |
                             8938 ; 72   |#define UINT128   UINT128_3500
                             8939 ; 73   |
                             8940 ; 74   |// Little endian word packed byte strings:   
                             8941 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8942 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8943 ; 77   |// Little endian word packed byte strings:   
                             8944 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8945 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8946 ; 80   |
                             8947 ; 81   |// Declare Memory Spaces To Use When Coding
                             8948 ; 82   |// A. Sector Buffers
                             8949 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8950 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8951 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8952 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8953 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8954 ; 88   |// B. Media DDI Memory
                             8955 ; 89   |#define MEDIA_DDI_MEM _Y
                             8956 ; 90   |
                             8957 ; 91   |
                             8958 ; 92   |
                             8959 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8960 ; 94   |// Examples of circular pointers:
                             8961 ; 95   |//    INT CIRC cpiVarName
                             8962 ; 96   |//    DWORD CIRC cpdwVarName
                             8963 ; 97   |
                             8964 ; 98   |#define RETCODE INT                 // rcVarName
                             8965 ; 99   |
                             8966 ; 100  |// generic bitfield structure
                             8967 ; 101  |struct Bitfield {
                             8968 ; 102  |    unsigned int B0  :1;
                             8969 ; 103  |    unsigned int B1  :1;
                             8970 ; 104  |    unsigned int B2  :1;
                             8971 ; 105  |    unsigned int B3  :1;
                             8972 ; 106  |    unsigned int B4  :1;
                             8973 ; 107  |    unsigned int B5  :1;
                             8974 ; 108  |    unsigned int B6  :1;
                             8975 ; 109  |    unsigned int B7  :1;
                             8976 ; 110  |    unsigned int B8  :1;
                             8977 ; 111  |    unsigned int B9  :1;
                             8978 ; 112  |    unsigned int B10 :1;
                             8979 ; 113  |    unsigned int B11 :1;
                             8980 ; 114  |    unsigned int B12 :1;
                             8981 ; 115  |    unsigned int B13 :1;
                             8982 ; 116  |    unsigned int B14 :1;
                             8983 ; 117  |    unsigned int B15 :1;
                             8984 ; 118  |    unsigned int B16 :1;
                             8985 ; 119  |    unsigned int B17 :1;
                             8986 ; 120  |    unsigned int B18 :1;
                             8987 ; 121  |    unsigned int B19 :1;
                             8988 ; 122  |    unsigned int B20 :1;
                             8989 ; 123  |    unsigned int B21 :1;
                             8990 ; 124  |    unsigned int B22 :1;
                             8991 ; 125  |    unsigned int B23 :1;
                             8992 ; 126  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 153

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8993 ; 127  |
                             8994 ; 128  |union BitInt {
                             8995 ; 129  |        struct Bitfield B;
                             8996 ; 130  |        int        I;
                             8997 ; 131  |};
                             8998 ; 132  |
                             8999 ; 133  |#define MAX_MSG_LENGTH 10
                             9000 ; 134  |struct CMessage
                             9001 ; 135  |{
                             9002 ; 136  |        unsigned int m_uLength;
                             9003 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9004 ; 138  |};
                             9005 ; 139  |
                             9006 ; 140  |typedef struct {
                             9007 ; 141  |    WORD m_wLength;
                             9008 ; 142  |    WORD m_wMessage;
                             9009 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9010 ; 144  |} Message;
                             9011 ; 145  |
                             9012 ; 146  |struct MessageQueueDescriptor
                             9013 ; 147  |{
                             9014 ; 148  |        int *m_pBase;
                             9015 ; 149  |        int m_iModulo;
                             9016 ; 150  |        int m_iSize;
                             9017 ; 151  |        int *m_pHead;
                             9018 ; 152  |        int *m_pTail;
                             9019 ; 153  |};
                             9020 ; 154  |
                             9021 ; 155  |struct ModuleEntry
                             9022 ; 156  |{
                             9023 ; 157  |    int m_iSignaledEventMask;
                             9024 ; 158  |    int m_iWaitEventMask;
                             9025 ; 159  |    int m_iResourceOfCode;
                             9026 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9027 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9028 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9029 ; 163  |    int m_uTimeOutHigh;
                             9030 ; 164  |    int m_uTimeOutLow;
                             9031 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9032 ; 166  |};
                             9033 ; 167  |
                             9034 ; 168  |union WaitMask{
                             9035 ; 169  |    struct B{
                             9036 ; 170  |        unsigned int m_bNone     :1;
                             9037 ; 171  |        unsigned int m_bMessage  :1;
                             9038 ; 172  |        unsigned int m_bTimer    :1;
                             9039 ; 173  |        unsigned int m_bButton   :1;
                             9040 ; 174  |    } B;
                             9041 ; 175  |    int I;
                             9042 ; 176  |} ;
                             9043 ; 177  |
                             9044 ; 178  |
                             9045 ; 179  |struct Button {
                             9046 ; 180  |        WORD wButtonEvent;
                             9047 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9048 ; 182  |};
                             9049 ; 183  |
                             9050 ; 184  |struct Message {
                             9051 ; 185  |        WORD wMsgLength;
                             9052 ; 186  |        WORD wMsgCommand;
                             9053 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 154

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9054 ; 188  |};
                             9055 ; 189  |
                             9056 ; 190  |union EventTypes {
                             9057 ; 191  |        struct CMessage msg;
                             9058 ; 192  |        struct Button Button ;
                             9059 ; 193  |        struct Message Message;
                             9060 ; 194  |};
                             9061 ; 195  |
                             9062 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9063 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9064 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9065 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9066 ; 200  |
                             9067 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9068 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9069 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9070 ; 204  |
                             9071 ; 205  |#if DEBUG
                             9072 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9073 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9074 ; 208  |#else 
                             9075 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9076 ; 210  |#define DebugBuildAssert(x)    
                             9077 ; 211  |#endif
                             9078 ; 212  |
                             9079 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9080 ; 214  |//  #pragma asm
                             9081 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9082 ; 216  |//  #pragma endasm
                             9083 ; 217  |
                             9084 ; 218  |
                             9085 ; 219  |#ifdef COLOR_262K
                             9086 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9087 ; 221  |#elif defined(COLOR_65K)
                             9088 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9089 ; 223  |#else
                             9090 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9091 ; 225  |#endif
                             9092 ; 226  |    
                             9093 ; 227  |#endif // #ifndef _TYPES_H
                             9094 
                             9096 
                             9097 ; 31   |
                             9098 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9099 ; 33   |
                             9100 ; 34   |//   SWIZZLE STMP3500 Registers 
                             9101 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                             9102 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9103 ; 37   |
                             9104 ; 38   |
                             9105 ; 39   |
                             9106 ; 40   |
                             9107 ; 41   |
                             9108 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                             9109 ; 43   |
                             9110 ; 44   |
                             9111 ; 45   |
                             9112 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 155

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9113 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                             9114 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                             9115 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                             9116 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                             9117 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                             9118 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                             9119 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                             9120 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                             9121 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                             9122 ; 56   |
                             9123 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                             9124 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                             9125 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                             9126 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                             9127 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                             9128 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                             9129 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                             9130 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                             9131 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                             9132 ; 66   |
                             9133 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITP
                                  OS)
                             9134 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITP
                                  OS)
                             9135 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_B
                                  ITPOS)
                             9136 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIG
                                  N_BITPOS)
                             9137 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_S
                                  HIFT_BITPOS)
                             9138 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_B
                                  ITPOS)
                             9139 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECS
                                  R1_CLK_OFF_BITPOS)
                             9140 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1
                                  _NEWADD_BITPOS)
                             9141 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSV
                                  D_BITPOS)
                             9142 ; 76   |
                             9143 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                             9144 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                             9145 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                             9146 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                             9147 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                             9148 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                             9149 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                             9150 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                             9151 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                             9152 ; 86   |
                             9153 ; 87   |////////////////////////////////////////////////////////////////////////////////
                             9154 ; 88   |//  Bit Manipulation Unit Registers
                             9155 ; 89   |////////////////////////////////////////////////////////////////////////////////
                             9156 ; 90   |typedef union
                             9157 ; 91   |{
                             9158 ; 92   |    struct
                             9159 ; 93   |    {
                             9160 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                             9161 ; 95   |    int LA      :1;     /* Left Align Data                          */
                             9162 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                             9163 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                             9164 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                             9165 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 156

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9166 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                             9167 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                             9168 ; 102  |    } B;
                             9169 ; 103  |    int I;
                             9170 ; 104  |    unsigned U;
                             9171 ; 105  |} swizzlecsr1_type;
                             9172 ; 106  |////////////////////////////////////////////////////////////////////////////////
                             9173 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* S
                                  wizzle Control & Status Register 1 */
                             9174 ; 108  |
                             9175 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                             9176 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                             9177 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                             9178 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                             9179 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                             9180 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                             9181 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                             9182 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                             9183 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                             9184 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                             9185 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                             9186 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                             9187 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                             9188 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                             9189 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                             9190 ; 124  |
                             9191 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                             9192 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                             9193 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                             9194 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                             9195 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                             9196 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                             9197 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                             9198 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                             9199 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                             9200 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                             9201 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                             9202 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                             9203 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                             9204 ; 138  |
                             9205 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KIC
                                  K_BITPOS)
                             9206 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_S
                                  ASEL_BITPOS)
                             9207 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECS
                                  R2_DESASEL_BITPOS)
                             9208 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIG
                                  E_BITPOS)
                             9209 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _BITREV_BITPOS)
                             9210 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLS
                                  B_BITPOS)
                             9211 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMS
                                  B_BITPOS)
                             9212 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  L_BITPOS)
                             9213 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  I_BITPOS)
                             9214 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_B
                                  S_EN_BITPOS)
                             9215 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZ
                                  LECSR2_SBYTEDEST_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 157

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9216 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _UNKICK_BITPOS)
                             9217 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSV
                                  D_BITPOS)
                             9218 ; 152  |
                             9219 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                             9220 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                             9221 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                             9222 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                             9223 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                             9224 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                             9225 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                             9226 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                             9227 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                             9228 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                             9229 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                             9230 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                             9231 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                             9232 ; 166  |
                             9233 ; 167  |///////////////////////////////////////////////////////////////////////////////
                             9234 ; 168  |typedef union
                             9235 ; 169  |{
                             9236 ; 170  |    struct
                             9237 ; 171  |    {
                             9238 ; 172  |    int KICK    :1;         /* Start transfer                      */
                             9239 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                             9240 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                             9241 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                             9242 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                             9243 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                             9244 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                             9245 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                             9246 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                             9247 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                             9248 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                             9249 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                             9250 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                             9251 ; 185  |    } B;
                             9252 ; 186  |    unsigned int I;
                             9253 ; 187  |    unsigned int U;
                             9254 ; 188  |} swizzlecsr2_type;
                             9255 ; 189  |///////////////////////////////////////////////////////////////////////////////
                             9256 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* S
                                  wizzle Control & Status Register 2 */
                             9257 ; 191  |
                             9258 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                             9259 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                             9260 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                             9261 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                             9262 ; 196  |
                             9263 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                             9264 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                             9265 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                             9266 ; 200  |
                             9267 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  SIZE_BITPOS)
                             9268 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWI
                                  ZZLESIZER_NEW_SHIFT_BITPOS)
                             9269 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  RSVD_BITPOS)
                             9270 ; 204  |
                             9271 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 158

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9272 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                             9273 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                             9274 ; 208  |
                             9275 ; 209  |///////////////////////////////////////////////////////////////////////////////
                             9276 ; 210  |typedef union
                             9277 ; 211  |{
                             9278 ; 212  |    struct
                             9279 ; 213  |    {
                             9280 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                             9281 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                             9282 ; 216  |    } B;
                             9283 ; 217  |    int I;
                             9284 ; 218  |    unsigned U;
                             9285 ; 219  |} swizzlesizer_type;
                             9286 ; 220  |///////////////////////////////////////////////////////////////////////////////
                             9287 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))       
                                   /* Swizzle Transfer Size Register */
                             9288 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* S
                                  wizzle Source Address Register */
                             9289 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* S
                                  wizzle Data1 Register */
                             9290 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* S
                                  wizzle Data2 Register */
                             9291 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* S
                                  wizzle Destination Address Register */
                             9292 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* S
                                  wizzle Big Endian Register */
                             9293 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* S
                                  wizzle BITREV Register */
                             9294 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* S
                                  wizzle Pass Least Significant Byte Register */
                             9295 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* S
                                  wizzle Pass Intermediate Byte Register */
                             9296 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* S
                                  wizzle Pass Most Significant Byte Register */
                             9297 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* S
                                  wizzle Pass Least Significant Word Register */
                             9298 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* S
                                  wizzle Pass Intermediate Significant Word Register */
                             9299 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* S
                                  wizzle Pass Most Significant Word Register */
                             9300 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Sw
                                  izzle Barrel Shift Register */
                             9301 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swi
                                  zzle Divide By 3 Lower Register */
                             9302 ; 236  |
                             9303 ; 237  |
                             9304 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                             9305 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                             9306 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                             9307 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                             9308 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                             9309 ; 243  |
                             9310 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                             9311 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                             9312 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                             9313 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                             9314 ; 248  |
                             9315 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW
                                  _SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                             9316 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD0_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 159

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9317 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_S
                                  WIZZLEDIV3UR_REMAINDER_BITPOS)
                             9318 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD1_BITPOS)
                             9319 ; 253  |
                             9320 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                             9321 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                             9322 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                             9323 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                             9324 ; 258  |
                             9325 ; 259  |///////////////////////////////////////////////////////////////////////////////
                             9326 ; 260  |typedef union
                             9327 ; 261  |{
                             9328 ; 262  |    struct
                             9329 ; 263  |    {
                             9330 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                             9331 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                             9332 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                             9333 ; 267  |    } B;
                             9334 ; 268  |    int I;
                             9335 ; 269  |    unsigned U;
                             9336 ; 270  |} swizzlediv3ur_type;
                             9337 ; 271  |///////////////////////////////////////////////////////////////////////////////
                             9338 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    
                                  /* Swizzle Divide By 3 Upper Register */
                             9339 ; 273  |
                             9340 ; 274  |#endif
                             9341 ; 275  |
                             9342 
                             9344 
                             9345 ; 33   |#include "regssdram.h"
                             9346 
                             9348 
                             9349 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9350 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                             9351 ; 3    |//;  File        : regssdram.inc
                             9352 ; 4    |//;  Description : Mixed Signal IP Register definition
                             9353 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9354 ; 6    |
                             9355 ; 7    |// The following naming conventions are followed in this file.
                             9356 ; 8    |// All registers are named using the format...
                             9357 ; 9    |//     HW_<module>_<regname>
                             9358 ; 10   |// where <module> is the module name which can be any of the following...
                             9359 ; 11   |//     SYSTEM
                             9360 ; 12   |// (Note that when there is more than one copy of a particular module, the
                             9361 ; 13   |// module name includes a number starting from 0 for the first instance of
                             9362 ; 14   |// that module)
                             9363 ; 15   |// <regname> is the specific register within that module
                             9364 ; 16   |// We also define the following...
                             9365 ; 17   |//     HW_<module>_<regname>_BITPOS
                             9366 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9367 ; 19   |//     HW_<module>_<regname>_SETMASK
                             9368 ; 20   |// which does something else, and
                             9369 ; 21   |//     HW_<module>_<regname>_CLRMASK
                             9370 ; 22   |// which does something else.
                             9371 ; 23   |// Other rules
                             9372 ; 24   |//     All caps
                             9373 ; 25   |//     Numeric identifiers start at 0
                             9374 ; 26   |
                             9375 ; 27   |#if !(defined(regssdraminc))
                             9376 ; 28   |#define regssdraminc 1
                             9377 ; 29   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 160

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9378 ; 30   |#include "types.h"
                             9379 
                             9381 
                             9382 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9383 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9384 ; 3    |//
                             9385 ; 4    |// Filename: types.h
                             9386 ; 5    |// Description: Standard data types
                             9387 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9388 ; 7    |
                             9389 ; 8    |#ifndef _TYPES_H
                             9390 ; 9    |#define _TYPES_H
                             9391 ; 10   |
                             9392 ; 11   |// TODO:  move this outta here!
                             9393 ; 12   |#if !defined(NOERROR)
                             9394 ; 13   |#define NOERROR 0
                             9395 ; 14   |#define SUCCESS 0
                             9396 ; 15   |#endif 
                             9397 ; 16   |#if !defined(SUCCESS)
                             9398 ; 17   |#define SUCCESS  0
                             9399 ; 18   |#endif
                             9400 ; 19   |#if !defined(ERROR)
                             9401 ; 20   |#define ERROR   -1
                             9402 ; 21   |#endif
                             9403 ; 22   |#if !defined(FALSE)
                             9404 ; 23   |#define FALSE 0
                             9405 ; 24   |#endif
                             9406 ; 25   |#if !defined(TRUE)
                             9407 ; 26   |#define TRUE  1
                             9408 ; 27   |#endif
                             9409 ; 28   |
                             9410 ; 29   |#if !defined(NULL)
                             9411 ; 30   |#define NULL 0
                             9412 ; 31   |#endif
                             9413 ; 32   |
                             9414 ; 33   |#define MAX_INT     0x7FFFFF
                             9415 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9416 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9417 ; 36   |#define MAX_ULONG   (-1) 
                             9418 ; 37   |
                             9419 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9420 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9421 ; 40   |
                             9422 ; 41   |
                             9423 ; 42   |#define BYTE    unsigned char       // btVarName
                             9424 ; 43   |#define CHAR    signed char         // cVarName
                             9425 ; 44   |#define USHORT  unsigned short      // usVarName
                             9426 ; 45   |#define SHORT   unsigned short      // sVarName
                             9427 ; 46   |#define WORD    unsigned int        // wVarName
                             9428 ; 47   |#define INT     signed int          // iVarName
                             9429 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9430 ; 49   |#define LONG    signed long         // lVarName
                             9431 ; 50   |#define BOOL    unsigned int        // bVarName
                             9432 ; 51   |#define FRACT   _fract              // frVarName
                             9433 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9434 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9435 ; 54   |#define FLOAT   float               // fVarName
                             9436 ; 55   |#define DBL     double              // dVarName
                             9437 ; 56   |#define ENUM    enum                // eVarName
                             9438 ; 57   |#define CMX     _complex            // cmxVarName
                             9439 ; 58   |typedef WORD UCS3;                   // 
                             9440 ; 59   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 161

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9441 ; 60   |#define UINT16  unsigned short
                             9442 ; 61   |#define UINT8   unsigned char   
                             9443 ; 62   |#define UINT32  unsigned long
                             9444 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9445 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9446 ; 65   |#define WCHAR   UINT16
                             9447 ; 66   |
                             9448 ; 67   |//UINT128 is 16 bytes or 6 words
                             9449 ; 68   |typedef struct UINT128_3500 {   
                             9450 ; 69   |    int val[6];     
                             9451 ; 70   |} UINT128_3500;
                             9452 ; 71   |
                             9453 ; 72   |#define UINT128   UINT128_3500
                             9454 ; 73   |
                             9455 ; 74   |// Little endian word packed byte strings:   
                             9456 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9457 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9458 ; 77   |// Little endian word packed byte strings:   
                             9459 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9460 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9461 ; 80   |
                             9462 ; 81   |// Declare Memory Spaces To Use When Coding
                             9463 ; 82   |// A. Sector Buffers
                             9464 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9465 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9466 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9467 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9468 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9469 ; 88   |// B. Media DDI Memory
                             9470 ; 89   |#define MEDIA_DDI_MEM _Y
                             9471 ; 90   |
                             9472 ; 91   |
                             9473 ; 92   |
                             9474 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9475 ; 94   |// Examples of circular pointers:
                             9476 ; 95   |//    INT CIRC cpiVarName
                             9477 ; 96   |//    DWORD CIRC cpdwVarName
                             9478 ; 97   |
                             9479 ; 98   |#define RETCODE INT                 // rcVarName
                             9480 ; 99   |
                             9481 ; 100  |// generic bitfield structure
                             9482 ; 101  |struct Bitfield {
                             9483 ; 102  |    unsigned int B0  :1;
                             9484 ; 103  |    unsigned int B1  :1;
                             9485 ; 104  |    unsigned int B2  :1;
                             9486 ; 105  |    unsigned int B3  :1;
                             9487 ; 106  |    unsigned int B4  :1;
                             9488 ; 107  |    unsigned int B5  :1;
                             9489 ; 108  |    unsigned int B6  :1;
                             9490 ; 109  |    unsigned int B7  :1;
                             9491 ; 110  |    unsigned int B8  :1;
                             9492 ; 111  |    unsigned int B9  :1;
                             9493 ; 112  |    unsigned int B10 :1;
                             9494 ; 113  |    unsigned int B11 :1;
                             9495 ; 114  |    unsigned int B12 :1;
                             9496 ; 115  |    unsigned int B13 :1;
                             9497 ; 116  |    unsigned int B14 :1;
                             9498 ; 117  |    unsigned int B15 :1;
                             9499 ; 118  |    unsigned int B16 :1;
                             9500 ; 119  |    unsigned int B17 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 162

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9501 ; 120  |    unsigned int B18 :1;
                             9502 ; 121  |    unsigned int B19 :1;
                             9503 ; 122  |    unsigned int B20 :1;
                             9504 ; 123  |    unsigned int B21 :1;
                             9505 ; 124  |    unsigned int B22 :1;
                             9506 ; 125  |    unsigned int B23 :1;
                             9507 ; 126  |};
                             9508 ; 127  |
                             9509 ; 128  |union BitInt {
                             9510 ; 129  |        struct Bitfield B;
                             9511 ; 130  |        int        I;
                             9512 ; 131  |};
                             9513 ; 132  |
                             9514 ; 133  |#define MAX_MSG_LENGTH 10
                             9515 ; 134  |struct CMessage
                             9516 ; 135  |{
                             9517 ; 136  |        unsigned int m_uLength;
                             9518 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9519 ; 138  |};
                             9520 ; 139  |
                             9521 ; 140  |typedef struct {
                             9522 ; 141  |    WORD m_wLength;
                             9523 ; 142  |    WORD m_wMessage;
                             9524 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9525 ; 144  |} Message;
                             9526 ; 145  |
                             9527 ; 146  |struct MessageQueueDescriptor
                             9528 ; 147  |{
                             9529 ; 148  |        int *m_pBase;
                             9530 ; 149  |        int m_iModulo;
                             9531 ; 150  |        int m_iSize;
                             9532 ; 151  |        int *m_pHead;
                             9533 ; 152  |        int *m_pTail;
                             9534 ; 153  |};
                             9535 ; 154  |
                             9536 ; 155  |struct ModuleEntry
                             9537 ; 156  |{
                             9538 ; 157  |    int m_iSignaledEventMask;
                             9539 ; 158  |    int m_iWaitEventMask;
                             9540 ; 159  |    int m_iResourceOfCode;
                             9541 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9542 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9543 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9544 ; 163  |    int m_uTimeOutHigh;
                             9545 ; 164  |    int m_uTimeOutLow;
                             9546 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9547 ; 166  |};
                             9548 ; 167  |
                             9549 ; 168  |union WaitMask{
                             9550 ; 169  |    struct B{
                             9551 ; 170  |        unsigned int m_bNone     :1;
                             9552 ; 171  |        unsigned int m_bMessage  :1;
                             9553 ; 172  |        unsigned int m_bTimer    :1;
                             9554 ; 173  |        unsigned int m_bButton   :1;
                             9555 ; 174  |    } B;
                             9556 ; 175  |    int I;
                             9557 ; 176  |} ;
                             9558 ; 177  |
                             9559 ; 178  |
                             9560 ; 179  |struct Button {
                             9561 ; 180  |        WORD wButtonEvent;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 163

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9562 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9563 ; 182  |};
                             9564 ; 183  |
                             9565 ; 184  |struct Message {
                             9566 ; 185  |        WORD wMsgLength;
                             9567 ; 186  |        WORD wMsgCommand;
                             9568 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9569 ; 188  |};
                             9570 ; 189  |
                             9571 ; 190  |union EventTypes {
                             9572 ; 191  |        struct CMessage msg;
                             9573 ; 192  |        struct Button Button ;
                             9574 ; 193  |        struct Message Message;
                             9575 ; 194  |};
                             9576 ; 195  |
                             9577 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9578 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9579 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9580 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9581 ; 200  |
                             9582 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9583 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9584 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9585 ; 204  |
                             9586 ; 205  |#if DEBUG
                             9587 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9588 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9589 ; 208  |#else 
                             9590 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9591 ; 210  |#define DebugBuildAssert(x)    
                             9592 ; 211  |#endif
                             9593 ; 212  |
                             9594 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9595 ; 214  |//  #pragma asm
                             9596 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9597 ; 216  |//  #pragma endasm
                             9598 ; 217  |
                             9599 ; 218  |
                             9600 ; 219  |#ifdef COLOR_262K
                             9601 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9602 ; 221  |#elif defined(COLOR_65K)
                             9603 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9604 ; 223  |#else
                             9605 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9606 ; 225  |#endif
                             9607 ; 226  |    
                             9608 ; 227  |#endif // #ifndef _TYPES_H
                             9609 
                             9611 
                             9612 ; 31   |
                             9613 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                             9614 ; 33   |
                             9615 ; 34   |
                             9616 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                             9617 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                             9618 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                             9619 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                             9620 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 164

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9621 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                             9622 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                             9623 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                             9624 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                             9625 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                             9626 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                             9627 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                             9628 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                             9629 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                             9630 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                             9631 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                             9632 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                             9633 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                             9634 ; 53   |
                             9635 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                             9636 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                             9637 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                             9638 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                             9639 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                             9640 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                             9641 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                             9642 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                             9643 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                             9644 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                             9645 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                             9646 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                             9647 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                             9648 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                             9649 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                             9650 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                             9651 ; 70   |
                             9652 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SD
                                  RAMEN_BITPOS)
                             9653 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                             9654 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS
                                  )
                             9655 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BIT
                                  POS)
                             9656 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                             9657 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_
                                  BITPOS)
                             9658 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BIT
                                  POS)
                             9659 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_
                                  BITPOS)
                             9660 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS
                                  )
                             9661 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BIT
                                  POS)
                             9662 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_
                                  BITPOS)
                             9663 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_
                                  BITPOS)
                             9664 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS
                                  )
                             9665 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_
                                  BITPOS)
                             9666 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_
                                  BITPOS)
                             9667 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BIT
                                  POS)
                             9668 ; 87   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 165

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9669 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                             9670 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                             9671 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                             9672 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                             9673 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                             9674 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                             9675 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                             9676 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                             9677 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                             9678 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                             9679 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                             9680 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                             9681 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                             9682 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                             9683 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                             9684 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                             9685 ; 104  |
                             9686 ; 105  |typedef union               
                             9687 ; 106  |{
                             9688 ; 107  |    struct {
                             9689 ; 108  |        int SDRAMEN                     :1;
                             9690 ; 109  |        int IE                          :1;
                             9691 ; 110  |        int RNW                         :1;
                             9692 ; 111  |        int KICK                        :1;
                             9693 ; 112  |        int LM                          :1;
                             9694 ; 113  |        int ISTAT                       :1;
                             9695 ; 114  |        int PWDN                        :1;
                             9696 ; 115  |        int RSVD                        :1;
                             9697 ; 116  |        int SBYTE                       :2;
                             9698 ; 117  |        int MEM                         :2;
                             9699 ; 118  |        int BIGE                        :1;
                             9700 ; 119  |        int ASIZE                       :3;
                             9701 ; 120  |        int UKICK                       :1;
                             9702 ; 121  |        int DIV                         :4;
                             9703 ; 122  |        int MULTI                       :1;
                             9704 ; 123  |        int SDRAM                       :1;
                             9705 ; 124  |        int SIGN                        :1;
                             9706 ; 125  |    } B;
                             9707 ; 126  |    int I;
                             9708 ; 127  |} sdramcsr_type;
                             9709 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                             9710 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                             9711 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                             9712 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                             9713 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                             9714 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                             9715 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                             9716 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                             9717 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                             9718 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                             9719 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                             9720 ; 139  |
                             9721 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                             9722 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                             9723 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                             9724 ; 143  |
                             9725 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                             9726 ; 145  |
                             9727 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                             9728 ; 147  |
                             9729 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                             9730 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 166

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9731 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                             9732 ; 151  |
                             9733 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                             9734 ; 153  |
                             9735 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                             9736 ; 155  |
                             9737 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                             9738 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                             9739 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                             9740 ; 159  |
                             9741 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                             9742 ; 161  |
                             9743 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                             9744 ; 163  |
                             9745 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                             9746 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                             9747 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                             9748 ; 167  |
                             9749 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                             9750 ; 169  |
                             9751 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                             9752 ; 171  |
                             9753 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                             9754 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                             9755 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                             9756 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                             9757 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                             9758 ; 177  |
                             9759 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                             9760 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                             9761 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                             9762 ; 181  |
                             9763 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _INIT_BITPOS)
                             9764 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_T
                                  RP_BITPOS)
                             9765 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _TRFC_BITPOS)
                             9766 ; 185  |
                             9767 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                             9768 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                             9769 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                             9770 ; 189  |
                             9771 ; 190  |typedef union               
                             9772 ; 191  |{
                             9773 ; 192  |    struct {
                             9774 ; 193  |        int INIT                :16;
                             9775 ; 194  |        int TRP                 :4;
                             9776 ; 195  |        int TRFC                :4;
                             9777 ; 196  |    } B;
                             9778 ; 197  |    int I;
                             9779 ; 198  |} sdramtimer1_type;
                             9780 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                             9781 ; 200  |
                             9782 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                             9783 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                             9784 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                             9785 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                             9786 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                             9787 ; 206  |
                             9788 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                             9789 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 167

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9790 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                             9791 ; 210  |
                             9792 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TXSR_BITPOS)
                             9793 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TREF_BITPOS)
                             9794 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TRCD_BITPOS)
                             9795 ; 214  |
                             9796 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                             9797 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                             9798 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                             9799 ; 218  |
                             9800 ; 219  |typedef union               
                             9801 ; 220  |{
                             9802 ; 221  |    struct {
                             9803 ; 222  |        int TXSR                :4;
                             9804 ; 223  |        int TREF                :12;
                             9805 ; 224  |        int TRCD                :4;
                             9806 ; 225  |        int RSVD                :4; 
                             9807 ; 226  |    } B;
                             9808 ; 227  |    int I;
                             9809 ; 228  |} sdramtimer2_type;
                             9810 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                             9811 ; 230  |
                             9812 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             9813 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                             9814 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                             9815 ; 234  |
                             9816 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                             9817 ; 236  |
                             9818 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                             9819 ; 238  |
                             9820 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                             9821 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                             9822 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                             9823 ; 242  |
                             9824 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                             9825 ; 244  |
                             9826 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                             9827 ; 246  |
                             9828 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             9829 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                             9830 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                             9831 ; 250  |
                             9832 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                             9833 ; 252  |
                             9834 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS
                                  )
                             9835 ; 254  |
                             9836 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                             9837 ; 256  |
                             9838 ; 257  |typedef union               
                             9839 ; 258  |{
                             9840 ; 259  |    struct {
                             9841 ; 260  |        int VALUE               :14;
                             9842 ; 261  |        int RSVD                :10; 
                             9843 ; 262  |    } B;
                             9844 ; 263  |    int I;
                             9845 ; 264  |} sdrammode_type;
                             9846 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                             9847 ; 266  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 168

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9848 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                             9849 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                             9850 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                             9851 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                             9852 ; 271  |
                             9853 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                             9854 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                             9855 ; 274  |
                             9856 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_COLWIDTH_BITPOS)
                             9857 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_ROWWIDTH_BITPOS)
                             9858 ; 277  |
                             9859 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                             9860 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                             9861 ; 280  |
                             9862 ; 281  |typedef union               
                             9863 ; 282  |{
                             9864 ; 283  |    struct {
                             9865 ; 284  |        int COLWIDTH               :4;
                             9866 ; 285  |        int ROWWIDTH               :4; 
                             9867 ; 286  |    } B;
                             9868 ; 287  |    int I;
                             9869 ; 288  |} sdramtype_type;
                             9870 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                             9871 ; 290  |
                             9872 ; 291  |#endif
                             9873 ; 292  |
                             9874 ; 293  |
                             9875 ; 294  |
                             9876 ; 295  |
                             9877 ; 296  |
                             9878 ; 297  |
                             9879 
                             9881 
                             9882 ; 34   |#include "regstb.h"
                             9883 
                             9885 
                             9886 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             9887 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             9888 ; 3    |// Filename: regstb.inc
                             9889 ; 4    |// Description: Register definitions for Trace Buffer
                             9890 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             9891 ; 6    |// The following naming conventions are followed in this file.
                             9892 ; 7    |// All registers are named using the format...
                             9893 ; 8    |//     HW_<module>_<regname>
                             9894 ; 9    |// where <module> is the module name which can be any of the following...
                             9895 ; 10   |//     USB20
                             9896 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             9897 ; 12   |// module name includes a number starting from 0 for the first instance of
                             9898 ; 13   |// that module)
                             9899 ; 14   |// <regname> is the specific register within that module
                             9900 ; 15   |// We also define the following...
                             9901 ; 16   |//     HW_<module>_<regname>_BITPOS
                             9902 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9903 ; 18   |//     HW_<module>_<regname>_SETMASK
                             9904 ; 19   |// which does something else, and
                             9905 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             9906 ; 21   |// which does something else.
                             9907 ; 22   |// Other rules
                             9908 ; 23   |//     All caps
                             9909 ; 24   |//     Numeric identifiers start at 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 169

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9910 ; 25   |#if !(defined(regstbinc))
                             9911 ; 26   |#define regstbinc 1
                             9912 ; 27   |
                             9913 ; 28   |#include "types.h"
                             9914 
                             9916 
                             9917 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9918 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9919 ; 3    |//
                             9920 ; 4    |// Filename: types.h
                             9921 ; 5    |// Description: Standard data types
                             9922 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9923 ; 7    |
                             9924 ; 8    |#ifndef _TYPES_H
                             9925 ; 9    |#define _TYPES_H
                             9926 ; 10   |
                             9927 ; 11   |// TODO:  move this outta here!
                             9928 ; 12   |#if !defined(NOERROR)
                             9929 ; 13   |#define NOERROR 0
                             9930 ; 14   |#define SUCCESS 0
                             9931 ; 15   |#endif 
                             9932 ; 16   |#if !defined(SUCCESS)
                             9933 ; 17   |#define SUCCESS  0
                             9934 ; 18   |#endif
                             9935 ; 19   |#if !defined(ERROR)
                             9936 ; 20   |#define ERROR   -1
                             9937 ; 21   |#endif
                             9938 ; 22   |#if !defined(FALSE)
                             9939 ; 23   |#define FALSE 0
                             9940 ; 24   |#endif
                             9941 ; 25   |#if !defined(TRUE)
                             9942 ; 26   |#define TRUE  1
                             9943 ; 27   |#endif
                             9944 ; 28   |
                             9945 ; 29   |#if !defined(NULL)
                             9946 ; 30   |#define NULL 0
                             9947 ; 31   |#endif
                             9948 ; 32   |
                             9949 ; 33   |#define MAX_INT     0x7FFFFF
                             9950 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9951 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9952 ; 36   |#define MAX_ULONG   (-1) 
                             9953 ; 37   |
                             9954 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9955 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9956 ; 40   |
                             9957 ; 41   |
                             9958 ; 42   |#define BYTE    unsigned char       // btVarName
                             9959 ; 43   |#define CHAR    signed char         // cVarName
                             9960 ; 44   |#define USHORT  unsigned short      // usVarName
                             9961 ; 45   |#define SHORT   unsigned short      // sVarName
                             9962 ; 46   |#define WORD    unsigned int        // wVarName
                             9963 ; 47   |#define INT     signed int          // iVarName
                             9964 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9965 ; 49   |#define LONG    signed long         // lVarName
                             9966 ; 50   |#define BOOL    unsigned int        // bVarName
                             9967 ; 51   |#define FRACT   _fract              // frVarName
                             9968 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9969 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9970 ; 54   |#define FLOAT   float               // fVarName
                             9971 ; 55   |#define DBL     double              // dVarName
                             9972 ; 56   |#define ENUM    enum                // eVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 170

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9973 ; 57   |#define CMX     _complex            // cmxVarName
                             9974 ; 58   |typedef WORD UCS3;                   // 
                             9975 ; 59   |
                             9976 ; 60   |#define UINT16  unsigned short
                             9977 ; 61   |#define UINT8   unsigned char   
                             9978 ; 62   |#define UINT32  unsigned long
                             9979 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9980 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9981 ; 65   |#define WCHAR   UINT16
                             9982 ; 66   |
                             9983 ; 67   |//UINT128 is 16 bytes or 6 words
                             9984 ; 68   |typedef struct UINT128_3500 {   
                             9985 ; 69   |    int val[6];     
                             9986 ; 70   |} UINT128_3500;
                             9987 ; 71   |
                             9988 ; 72   |#define UINT128   UINT128_3500
                             9989 ; 73   |
                             9990 ; 74   |// Little endian word packed byte strings:   
                             9991 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9992 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9993 ; 77   |// Little endian word packed byte strings:   
                             9994 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9995 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9996 ; 80   |
                             9997 ; 81   |// Declare Memory Spaces To Use When Coding
                             9998 ; 82   |// A. Sector Buffers
                             9999 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10000 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10001 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10002 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10003 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10004 ; 88   |// B. Media DDI Memory
                            10005 ; 89   |#define MEDIA_DDI_MEM _Y
                            10006 ; 90   |
                            10007 ; 91   |
                            10008 ; 92   |
                            10009 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10010 ; 94   |// Examples of circular pointers:
                            10011 ; 95   |//    INT CIRC cpiVarName
                            10012 ; 96   |//    DWORD CIRC cpdwVarName
                            10013 ; 97   |
                            10014 ; 98   |#define RETCODE INT                 // rcVarName
                            10015 ; 99   |
                            10016 ; 100  |// generic bitfield structure
                            10017 ; 101  |struct Bitfield {
                            10018 ; 102  |    unsigned int B0  :1;
                            10019 ; 103  |    unsigned int B1  :1;
                            10020 ; 104  |    unsigned int B2  :1;
                            10021 ; 105  |    unsigned int B3  :1;
                            10022 ; 106  |    unsigned int B4  :1;
                            10023 ; 107  |    unsigned int B5  :1;
                            10024 ; 108  |    unsigned int B6  :1;
                            10025 ; 109  |    unsigned int B7  :1;
                            10026 ; 110  |    unsigned int B8  :1;
                            10027 ; 111  |    unsigned int B9  :1;
                            10028 ; 112  |    unsigned int B10 :1;
                            10029 ; 113  |    unsigned int B11 :1;
                            10030 ; 114  |    unsigned int B12 :1;
                            10031 ; 115  |    unsigned int B13 :1;
                            10032 ; 116  |    unsigned int B14 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 171

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10033 ; 117  |    unsigned int B15 :1;
                            10034 ; 118  |    unsigned int B16 :1;
                            10035 ; 119  |    unsigned int B17 :1;
                            10036 ; 120  |    unsigned int B18 :1;
                            10037 ; 121  |    unsigned int B19 :1;
                            10038 ; 122  |    unsigned int B20 :1;
                            10039 ; 123  |    unsigned int B21 :1;
                            10040 ; 124  |    unsigned int B22 :1;
                            10041 ; 125  |    unsigned int B23 :1;
                            10042 ; 126  |};
                            10043 ; 127  |
                            10044 ; 128  |union BitInt {
                            10045 ; 129  |        struct Bitfield B;
                            10046 ; 130  |        int        I;
                            10047 ; 131  |};
                            10048 ; 132  |
                            10049 ; 133  |#define MAX_MSG_LENGTH 10
                            10050 ; 134  |struct CMessage
                            10051 ; 135  |{
                            10052 ; 136  |        unsigned int m_uLength;
                            10053 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10054 ; 138  |};
                            10055 ; 139  |
                            10056 ; 140  |typedef struct {
                            10057 ; 141  |    WORD m_wLength;
                            10058 ; 142  |    WORD m_wMessage;
                            10059 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10060 ; 144  |} Message;
                            10061 ; 145  |
                            10062 ; 146  |struct MessageQueueDescriptor
                            10063 ; 147  |{
                            10064 ; 148  |        int *m_pBase;
                            10065 ; 149  |        int m_iModulo;
                            10066 ; 150  |        int m_iSize;
                            10067 ; 151  |        int *m_pHead;
                            10068 ; 152  |        int *m_pTail;
                            10069 ; 153  |};
                            10070 ; 154  |
                            10071 ; 155  |struct ModuleEntry
                            10072 ; 156  |{
                            10073 ; 157  |    int m_iSignaledEventMask;
                            10074 ; 158  |    int m_iWaitEventMask;
                            10075 ; 159  |    int m_iResourceOfCode;
                            10076 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10077 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10078 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10079 ; 163  |    int m_uTimeOutHigh;
                            10080 ; 164  |    int m_uTimeOutLow;
                            10081 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10082 ; 166  |};
                            10083 ; 167  |
                            10084 ; 168  |union WaitMask{
                            10085 ; 169  |    struct B{
                            10086 ; 170  |        unsigned int m_bNone     :1;
                            10087 ; 171  |        unsigned int m_bMessage  :1;
                            10088 ; 172  |        unsigned int m_bTimer    :1;
                            10089 ; 173  |        unsigned int m_bButton   :1;
                            10090 ; 174  |    } B;
                            10091 ; 175  |    int I;
                            10092 ; 176  |} ;
                            10093 ; 177  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 172

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10094 ; 178  |
                            10095 ; 179  |struct Button {
                            10096 ; 180  |        WORD wButtonEvent;
                            10097 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10098 ; 182  |};
                            10099 ; 183  |
                            10100 ; 184  |struct Message {
                            10101 ; 185  |        WORD wMsgLength;
                            10102 ; 186  |        WORD wMsgCommand;
                            10103 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10104 ; 188  |};
                            10105 ; 189  |
                            10106 ; 190  |union EventTypes {
                            10107 ; 191  |        struct CMessage msg;
                            10108 ; 192  |        struct Button Button ;
                            10109 ; 193  |        struct Message Message;
                            10110 ; 194  |};
                            10111 ; 195  |
                            10112 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10113 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10114 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10115 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10116 ; 200  |
                            10117 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10118 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10119 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10120 ; 204  |
                            10121 ; 205  |#if DEBUG
                            10122 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10123 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10124 ; 208  |#else 
                            10125 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10126 ; 210  |#define DebugBuildAssert(x)    
                            10127 ; 211  |#endif
                            10128 ; 212  |
                            10129 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10130 ; 214  |//  #pragma asm
                            10131 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10132 ; 216  |//  #pragma endasm
                            10133 ; 217  |
                            10134 ; 218  |
                            10135 ; 219  |#ifdef COLOR_262K
                            10136 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10137 ; 221  |#elif defined(COLOR_65K)
                            10138 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10139 ; 223  |#else
                            10140 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10141 ; 225  |#endif
                            10142 ; 226  |    
                            10143 ; 227  |#endif // #ifndef _TYPES_H
                            10144 
                            10146 
                            10147 ; 29   |
                            10148 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10149 ; 31   |
                            10150 ; 32   |//   Trace Buffer STMP Registers 
                            10151 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            10152 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 173

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10153 ; 35   |
                            10154 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            10155 ; 37   |
                            10156 ; 38   |
                            10157 ; 39   |
                            10158 ; 40   |
                            10159 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            10160 ; 42   |
                            10161 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            10162 ; 44   |
                            10163 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            10164 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            10165 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            10166 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            10167 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            10168 ; 50   |
                            10169 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            10170 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            10171 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                            10172 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            10173 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            10174 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            10175 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                            10176 ; 58   |
                            10177 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_E
                                  NABLE_BITPOS) 
                            10178 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS
                                  ) 
                            10179 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            10180 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_
                                  BITPOS) 
                            10181 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_
                                  EVENT_BITPOS) 
                            10182 ; 64   |
                            10183 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            10184 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            10185 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            10186 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            10187 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            10188 ; 70   |
                            10189 ; 71   |typedef union               
                            10190 ; 72   |{
                            10191 ; 73   |    struct {
                            10192 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            10193 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            10194 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            10195 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            10196 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            10197 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            10198 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            10199 ; 81   |    } B;
                            10200 ; 82   |    int I;
                            10201 ; 83   |    unsigned int U;
                            10202 ; 84   |} tb_cfg_type;
                            10203 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer
                                   Configuration Register */
                            10204 ; 86   |
                            10205 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            10206 ; 88   |
                            10207 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            10208 ; 90   |
                            10209 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 174

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10210 ; 92   |
                            10211 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            10212 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            10213 ; 95   |
                            10214 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BIT
                                  POS) 
                            10215 ; 97   |
                            10216 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                            10217 ; 99   |
                            10218 ; 100  |typedef union               
                            10219 ; 101  |{
                            10220 ; 102  |    struct {
                            10221 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            10222 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            10223 ; 105  |    } B;
                            10224 ; 106  |    int I;
                            10225 ; 107  |    unsigned int U;
                            10226 ; 108  |} tb_bar_type;
                            10227 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer
                                   Base Address Register */
                            10228 ; 110  |
                            10229 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            10230 ; 112  |
                            10231 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            10232 ; 114  |
                            10233 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            10234 ; 116  |
                            10235 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            10236 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            10237 ; 119  |
                            10238 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BIT
                                  POS) 
                            10239 ; 121  |
                            10240 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            10241 ; 123  |
                            10242 ; 124  |typedef union               
                            10243 ; 125  |{
                            10244 ; 126  |    struct {
                            10245 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            10246 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                            10247 ; 129  |    } B;
                            10248 ; 130  |    int I;
                            10249 ; 131  |    unsigned int U;
                            10250 ; 132  |} tb_mod_type;
                            10251 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer
                                   Modulus Register */
                            10252 ; 134  |
                            10253 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            10254 ; 136  |
                            10255 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            10256 ; 138  |
                            10257 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            10258 ; 140  |
                            10259 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            10260 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            10261 ; 143  |
                            10262 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            10263 ; 145  |
                            10264 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            10265 ; 147  |
                            10266 ; 148  |typedef union               
                            10267 ; 149  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 175

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10268 ; 150  |    struct {
                            10269 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            10270 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            10271 ; 153  |    } B;
                            10272 ; 154  |    int I;
                            10273 ; 155  |    unsigned int U;
                            10274 ; 156  |} tb_cir_type;
                            10275 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer
                                   Current Index Register */
                            10276 ; 158  |
                            10277 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            10278 ; 160  |
                            10279 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            10280 ; 162  |
                            10281 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            10282 ; 164  |
                            10283 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            10284 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            10285 ; 167  |
                            10286 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            10287 ; 169  |
                            10288 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            10289 ; 171  |
                            10290 ; 172  |typedef union               
                            10291 ; 173  |{
                            10292 ; 174  |    struct {
                            10293 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            10294 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            10295 ; 177  |    } B;
                            10296 ; 178  |    int I;
                            10297 ; 179  |    unsigned int U;
                            10298 ; 180  |} tb_obc_type;
                            10299 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer
                                   one byte code Register */
                            10300 ; 182  |
                            10301 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            10302 ; 184  |
                            10303 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            10304 ; 186  |
                            10305 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            10306 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            10307 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            10308 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            10309 ; 191  |
                            10310 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            10311 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            10312 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            10313 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            10314 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            10315 ; 197  |
                            10316 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STY
                                  LE_BITPOS) 
                            10317 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLA
                                  SS_BITPOS) 
                            10318 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLA
                                  SS_BITPOS) 
                            10319 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS
                                  ) 
                            10320 ; 202  |
                            10321 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            10322 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            10323 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 176

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10324 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            10325 ; 207  |
                            10326 ; 208  |typedef union               
                            10327 ; 209  |{
                            10328 ; 210  |    struct {
                            10329 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            10330 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            10331 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            10332 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            10333 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            10334 ; 216  |    } B;
                            10335 ; 217  |    int I;
                            10336 ; 218  |    unsigned int U;
                            10337 ; 219  |} tb_tcs_type;
                            10338 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffe
                                  r Trigger Command Register */
                            10339 ; 221  |
                            10340 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            10341 ; 223  |
                            10342 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            10343 ; 225  |
                            10344 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            10345 ; 227  |
                            10346 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            10347 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            10348 ; 230  |
                            10349 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH
                                  _ADDR_BITPOS) 
                            10350 ; 232  |
                            10351 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            10352 ; 234  |
                            10353 ; 235  |typedef union               
                            10354 ; 236  |{
                            10355 ; 237  |    struct {
                            10356 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            10357 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            10358 ; 240  |    } B;
                            10359 ; 241  |    int I;
                            10360 ; 242  |    unsigned int U;
                            10361 ; 243  |} tb_tvr_type;
                            10362 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffe
                                  r Trigger Value Register */
                            10363 ; 245  |
                            10364 ; 246  |
                            10365 ; 247  |
                            10366 ; 248  |#endif
                            10367 ; 249  |
                            10368 ; 250  |
                            10369 ; 251  |
                            10370 ; 252  |
                            10371 ; 253  |
                            10372 ; 254  |
                            10373 ; 255  |
                            10374 ; 256  |
                            10375 ; 257  |
                            10376 ; 258  |
                            10377 ; 259  |
                            10378 ; 260  |
                            10379 ; 261  |
                            10380 ; 262  |
                            10381 ; 263  |
                            10382 ; 264  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 177

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10383 ; 265  |
                            10384 
                            10386 
                            10387 ; 35   |#include "regstimer.h"
                            10388 
                            10390 
                            10391 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10392 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            10393 ; 3    |// Filename: regstimer.inc
                            10394 ; 4    |// Description: Register definitions for  Timers interface
                            10395 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10396 ; 6    |// The following naming conventions are followed in this file.
                            10397 ; 7    |// All registers are named using the format...
                            10398 ; 8    |//     HW_<module>_<regname>
                            10399 ; 9    |// where <module> is the module name which can be any of the following...
                            10400 ; 10   |//     USB20
                            10401 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10402 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10403 ; 13   |// that module)
                            10404 ; 14   |// <regname> is the specific register within that module
                            10405 ; 15   |// We also define the following...
                            10406 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10407 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10408 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10409 ; 19   |// which does something else, and
                            10410 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10411 ; 21   |// which does something else.
                            10412 ; 22   |// Other rules
                            10413 ; 23   |//     All caps
                            10414 ; 24   |//     Numeric identifiers start at 0
                            10415 ; 25   |#if !(defined(regstimerinc))
                            10416 ; 26   |#define regstimerinc 1
                            10417 ; 27   |
                            10418 ; 28   |#include "types.h"
                            10419 
                            10421 
                            10422 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10423 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10424 ; 3    |//
                            10425 ; 4    |// Filename: types.h
                            10426 ; 5    |// Description: Standard data types
                            10427 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10428 ; 7    |
                            10429 ; 8    |#ifndef _TYPES_H
                            10430 ; 9    |#define _TYPES_H
                            10431 ; 10   |
                            10432 ; 11   |// TODO:  move this outta here!
                            10433 ; 12   |#if !defined(NOERROR)
                            10434 ; 13   |#define NOERROR 0
                            10435 ; 14   |#define SUCCESS 0
                            10436 ; 15   |#endif 
                            10437 ; 16   |#if !defined(SUCCESS)
                            10438 ; 17   |#define SUCCESS  0
                            10439 ; 18   |#endif
                            10440 ; 19   |#if !defined(ERROR)
                            10441 ; 20   |#define ERROR   -1
                            10442 ; 21   |#endif
                            10443 ; 22   |#if !defined(FALSE)
                            10444 ; 23   |#define FALSE 0
                            10445 ; 24   |#endif
                            10446 ; 25   |#if !defined(TRUE)
                            10447 ; 26   |#define TRUE  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 178

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10448 ; 27   |#endif
                            10449 ; 28   |
                            10450 ; 29   |#if !defined(NULL)
                            10451 ; 30   |#define NULL 0
                            10452 ; 31   |#endif
                            10453 ; 32   |
                            10454 ; 33   |#define MAX_INT     0x7FFFFF
                            10455 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10456 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10457 ; 36   |#define MAX_ULONG   (-1) 
                            10458 ; 37   |
                            10459 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10460 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10461 ; 40   |
                            10462 ; 41   |
                            10463 ; 42   |#define BYTE    unsigned char       // btVarName
                            10464 ; 43   |#define CHAR    signed char         // cVarName
                            10465 ; 44   |#define USHORT  unsigned short      // usVarName
                            10466 ; 45   |#define SHORT   unsigned short      // sVarName
                            10467 ; 46   |#define WORD    unsigned int        // wVarName
                            10468 ; 47   |#define INT     signed int          // iVarName
                            10469 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10470 ; 49   |#define LONG    signed long         // lVarName
                            10471 ; 50   |#define BOOL    unsigned int        // bVarName
                            10472 ; 51   |#define FRACT   _fract              // frVarName
                            10473 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10474 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10475 ; 54   |#define FLOAT   float               // fVarName
                            10476 ; 55   |#define DBL     double              // dVarName
                            10477 ; 56   |#define ENUM    enum                // eVarName
                            10478 ; 57   |#define CMX     _complex            // cmxVarName
                            10479 ; 58   |typedef WORD UCS3;                   // 
                            10480 ; 59   |
                            10481 ; 60   |#define UINT16  unsigned short
                            10482 ; 61   |#define UINT8   unsigned char   
                            10483 ; 62   |#define UINT32  unsigned long
                            10484 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10485 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10486 ; 65   |#define WCHAR   UINT16
                            10487 ; 66   |
                            10488 ; 67   |//UINT128 is 16 bytes or 6 words
                            10489 ; 68   |typedef struct UINT128_3500 {   
                            10490 ; 69   |    int val[6];     
                            10491 ; 70   |} UINT128_3500;
                            10492 ; 71   |
                            10493 ; 72   |#define UINT128   UINT128_3500
                            10494 ; 73   |
                            10495 ; 74   |// Little endian word packed byte strings:   
                            10496 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10497 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10498 ; 77   |// Little endian word packed byte strings:   
                            10499 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10500 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10501 ; 80   |
                            10502 ; 81   |// Declare Memory Spaces To Use When Coding
                            10503 ; 82   |// A. Sector Buffers
                            10504 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10505 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10506 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10507 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 179

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10508 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10509 ; 88   |// B. Media DDI Memory
                            10510 ; 89   |#define MEDIA_DDI_MEM _Y
                            10511 ; 90   |
                            10512 ; 91   |
                            10513 ; 92   |
                            10514 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10515 ; 94   |// Examples of circular pointers:
                            10516 ; 95   |//    INT CIRC cpiVarName
                            10517 ; 96   |//    DWORD CIRC cpdwVarName
                            10518 ; 97   |
                            10519 ; 98   |#define RETCODE INT                 // rcVarName
                            10520 ; 99   |
                            10521 ; 100  |// generic bitfield structure
                            10522 ; 101  |struct Bitfield {
                            10523 ; 102  |    unsigned int B0  :1;
                            10524 ; 103  |    unsigned int B1  :1;
                            10525 ; 104  |    unsigned int B2  :1;
                            10526 ; 105  |    unsigned int B3  :1;
                            10527 ; 106  |    unsigned int B4  :1;
                            10528 ; 107  |    unsigned int B5  :1;
                            10529 ; 108  |    unsigned int B6  :1;
                            10530 ; 109  |    unsigned int B7  :1;
                            10531 ; 110  |    unsigned int B8  :1;
                            10532 ; 111  |    unsigned int B9  :1;
                            10533 ; 112  |    unsigned int B10 :1;
                            10534 ; 113  |    unsigned int B11 :1;
                            10535 ; 114  |    unsigned int B12 :1;
                            10536 ; 115  |    unsigned int B13 :1;
                            10537 ; 116  |    unsigned int B14 :1;
                            10538 ; 117  |    unsigned int B15 :1;
                            10539 ; 118  |    unsigned int B16 :1;
                            10540 ; 119  |    unsigned int B17 :1;
                            10541 ; 120  |    unsigned int B18 :1;
                            10542 ; 121  |    unsigned int B19 :1;
                            10543 ; 122  |    unsigned int B20 :1;
                            10544 ; 123  |    unsigned int B21 :1;
                            10545 ; 124  |    unsigned int B22 :1;
                            10546 ; 125  |    unsigned int B23 :1;
                            10547 ; 126  |};
                            10548 ; 127  |
                            10549 ; 128  |union BitInt {
                            10550 ; 129  |        struct Bitfield B;
                            10551 ; 130  |        int        I;
                            10552 ; 131  |};
                            10553 ; 132  |
                            10554 ; 133  |#define MAX_MSG_LENGTH 10
                            10555 ; 134  |struct CMessage
                            10556 ; 135  |{
                            10557 ; 136  |        unsigned int m_uLength;
                            10558 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10559 ; 138  |};
                            10560 ; 139  |
                            10561 ; 140  |typedef struct {
                            10562 ; 141  |    WORD m_wLength;
                            10563 ; 142  |    WORD m_wMessage;
                            10564 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10565 ; 144  |} Message;
                            10566 ; 145  |
                            10567 ; 146  |struct MessageQueueDescriptor
                            10568 ; 147  |{
                            10569 ; 148  |        int *m_pBase;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 180

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10570 ; 149  |        int m_iModulo;
                            10571 ; 150  |        int m_iSize;
                            10572 ; 151  |        int *m_pHead;
                            10573 ; 152  |        int *m_pTail;
                            10574 ; 153  |};
                            10575 ; 154  |
                            10576 ; 155  |struct ModuleEntry
                            10577 ; 156  |{
                            10578 ; 157  |    int m_iSignaledEventMask;
                            10579 ; 158  |    int m_iWaitEventMask;
                            10580 ; 159  |    int m_iResourceOfCode;
                            10581 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10582 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10583 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10584 ; 163  |    int m_uTimeOutHigh;
                            10585 ; 164  |    int m_uTimeOutLow;
                            10586 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10587 ; 166  |};
                            10588 ; 167  |
                            10589 ; 168  |union WaitMask{
                            10590 ; 169  |    struct B{
                            10591 ; 170  |        unsigned int m_bNone     :1;
                            10592 ; 171  |        unsigned int m_bMessage  :1;
                            10593 ; 172  |        unsigned int m_bTimer    :1;
                            10594 ; 173  |        unsigned int m_bButton   :1;
                            10595 ; 174  |    } B;
                            10596 ; 175  |    int I;
                            10597 ; 176  |} ;
                            10598 ; 177  |
                            10599 ; 178  |
                            10600 ; 179  |struct Button {
                            10601 ; 180  |        WORD wButtonEvent;
                            10602 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10603 ; 182  |};
                            10604 ; 183  |
                            10605 ; 184  |struct Message {
                            10606 ; 185  |        WORD wMsgLength;
                            10607 ; 186  |        WORD wMsgCommand;
                            10608 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10609 ; 188  |};
                            10610 ; 189  |
                            10611 ; 190  |union EventTypes {
                            10612 ; 191  |        struct CMessage msg;
                            10613 ; 192  |        struct Button Button ;
                            10614 ; 193  |        struct Message Message;
                            10615 ; 194  |};
                            10616 ; 195  |
                            10617 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10618 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10619 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10620 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10621 ; 200  |
                            10622 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10623 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10624 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10625 ; 204  |
                            10626 ; 205  |#if DEBUG
                            10627 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10628 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10629 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 181

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10630 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10631 ; 210  |#define DebugBuildAssert(x)    
                            10632 ; 211  |#endif
                            10633 ; 212  |
                            10634 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10635 ; 214  |//  #pragma asm
                            10636 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10637 ; 216  |//  #pragma endasm
                            10638 ; 217  |
                            10639 ; 218  |
                            10640 ; 219  |#ifdef COLOR_262K
                            10641 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10642 ; 221  |#elif defined(COLOR_65K)
                            10643 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10644 ; 223  |#else
                            10645 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10646 ; 225  |#endif
                            10647 ; 226  |    
                            10648 ; 227  |#endif // #ifndef _TYPES_H
                            10649 
                            10651 
                            10652 ; 29   |
                            10653 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10654 ; 31   |//   TIMER STMP Registers 
                            10655 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10656 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            10657 ; 34   |
                            10658 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            10659 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            10660 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            10661 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            10662 ; 39   |
                            10663 ; 40   |#define HW_TIMER_NUMBER_0 0
                            10664 ; 41   |#define HW_TIMER_NUMBER_1 1
                            10665 ; 42   |#define HW_TIMER_NUMBER_2 2
                            10666 ; 43   |#define HW_TIMER_NUMBER_3 3
                            10667 ; 44   |
                            10668 ; 45   |#define HW_TMRCSR 0
                            10669 ; 46   |#define HW_TMRCNTR 1
                            10670 ; 47   |
                            10671 ; 48   |
                            10672 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            10673 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            10674 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            10675 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            10676 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            10677 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            10678 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            10679 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            10680 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            10681 ; 58   |
                            10682 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            10683 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            10684 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            10685 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            10686 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            10687 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            10688 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 182

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10689 ; 66   |
                            10690 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_ENABLE_BITPOS)
                            10691 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_INT_EN_BITPOS)
                            10692 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BIT
                                  POS)
                            10693 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0
                                  CSR_TIMER_CONTROL_BITPOS)
                            10694 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_STATUS_BITPOS)
                            10695 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TI
                                  MER_MODE_BITPOS)
                            10696 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS
                                  )
                            10697 ; 74   |
                            10698 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            10699 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            10700 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            10701 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            10702 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            10703 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            10704 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            10705 ; 82   |
                            10706 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            10707 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            10708 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            10709 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            10710 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            10711 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            10712 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            10713 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            10714 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            10715 ; 92   |
                            10716 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            10717 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            10718 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            10719 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            10720 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            10721 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            10722 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            10723 ; 100  |
                            10724 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_ENABLE_BITPOS)
                            10725 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_INT_EN_BITPOS)
                            10726 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BIT
                                  POS)
                            10727 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1
                                  CSR_TIMER_CONTROL_BITPOS)
                            10728 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_STATUS_BITPOS)
                            10729 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TI
                                  MER_MODE_BITPOS)
                            10730 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS
                                  )
                            10731 ; 108  |
                            10732 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            10733 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            10734 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            10735 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            10736 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 183

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10737 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            10738 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            10739 ; 116  |
                            10740 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            10741 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            10742 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            10743 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            10744 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            10745 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            10746 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            10747 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            10748 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            10749 ; 126  |
                            10750 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            10751 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            10752 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            10753 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            10754 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            10755 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            10756 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            10757 ; 134  |
                            10758 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_ENABLE_BITPOS)
                            10759 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_INT_EN_BITPOS)
                            10760 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BIT
                                  POS)
                            10761 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2
                                  CSR_TIMER_CONTROL_BITPOS)
                            10762 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_STATUS_BITPOS)
                            10763 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TI
                                  MER_MODE_BITPOS)
                            10764 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS
                                  )
                            10765 ; 142  |
                            10766 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            10767 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            10768 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            10769 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            10770 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            10771 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            10772 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            10773 ; 150  |
                            10774 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            10775 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            10776 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            10777 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            10778 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            10779 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            10780 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            10781 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            10782 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            10783 ; 160  |
                            10784 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            10785 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            10786 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            10787 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            10788 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            10789 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            10790 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            10791 ; 168  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 184

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10792 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_ENABLE_BITPOS)
                            10793 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_INT_EN_BITPOS)
                            10794 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BIT
                                  POS)
                            10795 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3
                                  CSR_TIMER_CONTROL_BITPOS)
                            10796 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_STATUS_BITPOS)
                            10797 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TI
                                  MER_MODE_BITPOS)
                            10798 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS
                                  )
                            10799 ; 176  |
                            10800 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            10801 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            10802 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            10803 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            10804 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            10805 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            10806 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            10807 ; 184  |
                            10808 ; 185  |typedef union               
                            10809 ; 186  |{
                            10810 ; 187  |    struct {
                            10811 ; 188  |       int TIMER_ENABLE              :1;
                            10812 ; 189  |       int TIMER_INT_EN              :1;
                            10813 ; 190  |       int INVERT                    :1;
                            10814 ; 191  |       int TIMER_CONTROL             :3;
                            10815 ; 192  |       int RSVD0                     :1;
                            10816 ; 193  |       int TIMER_STATUS              :1;
                            10817 ; 194  |       int TIMER_MODE                :2;
                            10818 ; 195  |       int RSVD1                     :13;
                            10819 ; 196  |       int CLKGT                     :1;
                            10820 ; 197  |    } B;
                            10821 ; 198  |    int I;
                            10822 ; 199  |} timercsr_type;
                            10823 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /*
                                   Timer0 Control Status Register */
                            10824 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /*
                                   Timer1 Control Status Register */
                            10825 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /*
                                   Timer2 Control Status Register */
                            10826 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /*
                                   Timer3 Control Status Register */
                            10827 ; 204  |
                            10828 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            10829 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            10830 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            10831 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            10832 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BIT
                                  POS)
                            10833 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            10834 ; 211  |
                            10835 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            10836 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            10837 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            10838 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            10839 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BIT
                                  POS)
                            10840 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 185

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10841 ; 218  |
                            10842 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            10843 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            10844 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            10845 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            10846 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BIT
                                  POS)
                            10847 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            10848 ; 225  |
                            10849 ; 226  |typedef union               
                            10850 ; 227  |{
                            10851 ; 228  |    struct {
                            10852 ; 229  |       int COUNT                    :24;
                            10853 ; 230  |    } B;
                            10854 ; 231  |    int I;
                            10855 ; 232  |} tmrcntr_type;
                            10856 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /
                                  * Timer0 Count Register */
                            10857 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /
                                  * Timer1 Count Register */
                            10858 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /
                                  * Timer2 Count Register */
                            10859 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /
                                  * Timer3 Count Register */
                            10860 ; 237  |
                            10861 ; 238  |
                            10862 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                            10863 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                            10864 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            10865 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            10866 ; 243  |
                            10867 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            10868 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            10869 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            10870 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            10871 ; 248  |
                            10872 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            10873 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            10874 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            10875 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            10876 ; 253  |
                            10877 ; 254  |// Timer enable
                            10878 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            10879 ; 256  |// Timer clock gating control
                            10880 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            10881 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            10882 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            10883 ; 260  |#endif
                            10884 ; 261  |
                            10885 ; 262  |
                            10886 ; 263  |
                            10887 ; 264  |
                            10888 
                            10890 
                            10891 ; 36   |#include "regsusb20.h"
                            10892 
                            10894 
                            10895 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10896 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            10897 ; 3    |//;  File        : regsusb20ip.inc
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 186

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10898 ; 4    |//;  Description : USB20 IP Register definition
                            10899 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10900 ; 6    |
                            10901 ; 7    |// The following naming conventions are followed in this file.
                            10902 ; 8    |// All registers are named using the format...
                            10903 ; 9    |//     HW_<module>_<regname>
                            10904 ; 10   |// where <module> is the module name which can be any of the following...
                            10905 ; 11   |//     USB20
                            10906 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            10907 ; 13   |// module name includes a number starting from 0 for the first instance of
                            10908 ; 14   |// that module)
                            10909 ; 15   |// <regname> is the specific register within that module
                            10910 ; 16   |// We also define the following...
                            10911 ; 17   |//     HW_<module>_<regname>_BITPOS
                            10912 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10913 ; 19   |//     HW_<module>_<regname>_SETMASK
                            10914 ; 20   |// which does something else, and
                            10915 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            10916 ; 22   |// which does something else.
                            10917 ; 23   |// Other rules
                            10918 ; 24   |//     All caps
                            10919 ; 25   |//     Numeric identifiers start at 0
                            10920 ; 26   |
                            10921 ; 27   |#if !(defined(regsusb20inc))
                            10922 ; 28   |#define regsusb20inc 1
                            10923 ; 29   |
                            10924 ; 30   |#include "types.h"
                            10925 
                            10927 
                            10928 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10929 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10930 ; 3    |//
                            10931 ; 4    |// Filename: types.h
                            10932 ; 5    |// Description: Standard data types
                            10933 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10934 ; 7    |
                            10935 ; 8    |#ifndef _TYPES_H
                            10936 ; 9    |#define _TYPES_H
                            10937 ; 10   |
                            10938 ; 11   |// TODO:  move this outta here!
                            10939 ; 12   |#if !defined(NOERROR)
                            10940 ; 13   |#define NOERROR 0
                            10941 ; 14   |#define SUCCESS 0
                            10942 ; 15   |#endif 
                            10943 ; 16   |#if !defined(SUCCESS)
                            10944 ; 17   |#define SUCCESS  0
                            10945 ; 18   |#endif
                            10946 ; 19   |#if !defined(ERROR)
                            10947 ; 20   |#define ERROR   -1
                            10948 ; 21   |#endif
                            10949 ; 22   |#if !defined(FALSE)
                            10950 ; 23   |#define FALSE 0
                            10951 ; 24   |#endif
                            10952 ; 25   |#if !defined(TRUE)
                            10953 ; 26   |#define TRUE  1
                            10954 ; 27   |#endif
                            10955 ; 28   |
                            10956 ; 29   |#if !defined(NULL)
                            10957 ; 30   |#define NULL 0
                            10958 ; 31   |#endif
                            10959 ; 32   |
                            10960 ; 33   |#define MAX_INT     0x7FFFFF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 187

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10961 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10962 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10963 ; 36   |#define MAX_ULONG   (-1) 
                            10964 ; 37   |
                            10965 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10966 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10967 ; 40   |
                            10968 ; 41   |
                            10969 ; 42   |#define BYTE    unsigned char       // btVarName
                            10970 ; 43   |#define CHAR    signed char         // cVarName
                            10971 ; 44   |#define USHORT  unsigned short      // usVarName
                            10972 ; 45   |#define SHORT   unsigned short      // sVarName
                            10973 ; 46   |#define WORD    unsigned int        // wVarName
                            10974 ; 47   |#define INT     signed int          // iVarName
                            10975 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10976 ; 49   |#define LONG    signed long         // lVarName
                            10977 ; 50   |#define BOOL    unsigned int        // bVarName
                            10978 ; 51   |#define FRACT   _fract              // frVarName
                            10979 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10980 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10981 ; 54   |#define FLOAT   float               // fVarName
                            10982 ; 55   |#define DBL     double              // dVarName
                            10983 ; 56   |#define ENUM    enum                // eVarName
                            10984 ; 57   |#define CMX     _complex            // cmxVarName
                            10985 ; 58   |typedef WORD UCS3;                   // 
                            10986 ; 59   |
                            10987 ; 60   |#define UINT16  unsigned short
                            10988 ; 61   |#define UINT8   unsigned char   
                            10989 ; 62   |#define UINT32  unsigned long
                            10990 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10991 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10992 ; 65   |#define WCHAR   UINT16
                            10993 ; 66   |
                            10994 ; 67   |//UINT128 is 16 bytes or 6 words
                            10995 ; 68   |typedef struct UINT128_3500 {   
                            10996 ; 69   |    int val[6];     
                            10997 ; 70   |} UINT128_3500;
                            10998 ; 71   |
                            10999 ; 72   |#define UINT128   UINT128_3500
                            11000 ; 73   |
                            11001 ; 74   |// Little endian word packed byte strings:   
                            11002 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11003 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11004 ; 77   |// Little endian word packed byte strings:   
                            11005 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11006 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11007 ; 80   |
                            11008 ; 81   |// Declare Memory Spaces To Use When Coding
                            11009 ; 82   |// A. Sector Buffers
                            11010 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11011 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11012 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11013 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11014 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11015 ; 88   |// B. Media DDI Memory
                            11016 ; 89   |#define MEDIA_DDI_MEM _Y
                            11017 ; 90   |
                            11018 ; 91   |
                            11019 ; 92   |
                            11020 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 188

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11021 ; 94   |// Examples of circular pointers:
                            11022 ; 95   |//    INT CIRC cpiVarName
                            11023 ; 96   |//    DWORD CIRC cpdwVarName
                            11024 ; 97   |
                            11025 ; 98   |#define RETCODE INT                 // rcVarName
                            11026 ; 99   |
                            11027 ; 100  |// generic bitfield structure
                            11028 ; 101  |struct Bitfield {
                            11029 ; 102  |    unsigned int B0  :1;
                            11030 ; 103  |    unsigned int B1  :1;
                            11031 ; 104  |    unsigned int B2  :1;
                            11032 ; 105  |    unsigned int B3  :1;
                            11033 ; 106  |    unsigned int B4  :1;
                            11034 ; 107  |    unsigned int B5  :1;
                            11035 ; 108  |    unsigned int B6  :1;
                            11036 ; 109  |    unsigned int B7  :1;
                            11037 ; 110  |    unsigned int B8  :1;
                            11038 ; 111  |    unsigned int B9  :1;
                            11039 ; 112  |    unsigned int B10 :1;
                            11040 ; 113  |    unsigned int B11 :1;
                            11041 ; 114  |    unsigned int B12 :1;
                            11042 ; 115  |    unsigned int B13 :1;
                            11043 ; 116  |    unsigned int B14 :1;
                            11044 ; 117  |    unsigned int B15 :1;
                            11045 ; 118  |    unsigned int B16 :1;
                            11046 ; 119  |    unsigned int B17 :1;
                            11047 ; 120  |    unsigned int B18 :1;
                            11048 ; 121  |    unsigned int B19 :1;
                            11049 ; 122  |    unsigned int B20 :1;
                            11050 ; 123  |    unsigned int B21 :1;
                            11051 ; 124  |    unsigned int B22 :1;
                            11052 ; 125  |    unsigned int B23 :1;
                            11053 ; 126  |};
                            11054 ; 127  |
                            11055 ; 128  |union BitInt {
                            11056 ; 129  |        struct Bitfield B;
                            11057 ; 130  |        int        I;
                            11058 ; 131  |};
                            11059 ; 132  |
                            11060 ; 133  |#define MAX_MSG_LENGTH 10
                            11061 ; 134  |struct CMessage
                            11062 ; 135  |{
                            11063 ; 136  |        unsigned int m_uLength;
                            11064 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11065 ; 138  |};
                            11066 ; 139  |
                            11067 ; 140  |typedef struct {
                            11068 ; 141  |    WORD m_wLength;
                            11069 ; 142  |    WORD m_wMessage;
                            11070 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11071 ; 144  |} Message;
                            11072 ; 145  |
                            11073 ; 146  |struct MessageQueueDescriptor
                            11074 ; 147  |{
                            11075 ; 148  |        int *m_pBase;
                            11076 ; 149  |        int m_iModulo;
                            11077 ; 150  |        int m_iSize;
                            11078 ; 151  |        int *m_pHead;
                            11079 ; 152  |        int *m_pTail;
                            11080 ; 153  |};
                            11081 ; 154  |
                            11082 ; 155  |struct ModuleEntry
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 189

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11083 ; 156  |{
                            11084 ; 157  |    int m_iSignaledEventMask;
                            11085 ; 158  |    int m_iWaitEventMask;
                            11086 ; 159  |    int m_iResourceOfCode;
                            11087 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11088 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11089 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11090 ; 163  |    int m_uTimeOutHigh;
                            11091 ; 164  |    int m_uTimeOutLow;
                            11092 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11093 ; 166  |};
                            11094 ; 167  |
                            11095 ; 168  |union WaitMask{
                            11096 ; 169  |    struct B{
                            11097 ; 170  |        unsigned int m_bNone     :1;
                            11098 ; 171  |        unsigned int m_bMessage  :1;
                            11099 ; 172  |        unsigned int m_bTimer    :1;
                            11100 ; 173  |        unsigned int m_bButton   :1;
                            11101 ; 174  |    } B;
                            11102 ; 175  |    int I;
                            11103 ; 176  |} ;
                            11104 ; 177  |
                            11105 ; 178  |
                            11106 ; 179  |struct Button {
                            11107 ; 180  |        WORD wButtonEvent;
                            11108 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11109 ; 182  |};
                            11110 ; 183  |
                            11111 ; 184  |struct Message {
                            11112 ; 185  |        WORD wMsgLength;
                            11113 ; 186  |        WORD wMsgCommand;
                            11114 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11115 ; 188  |};
                            11116 ; 189  |
                            11117 ; 190  |union EventTypes {
                            11118 ; 191  |        struct CMessage msg;
                            11119 ; 192  |        struct Button Button ;
                            11120 ; 193  |        struct Message Message;
                            11121 ; 194  |};
                            11122 ; 195  |
                            11123 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11124 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11125 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11126 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11127 ; 200  |
                            11128 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11129 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11130 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11131 ; 204  |
                            11132 ; 205  |#if DEBUG
                            11133 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11134 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11135 ; 208  |#else 
                            11136 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11137 ; 210  |#define DebugBuildAssert(x)    
                            11138 ; 211  |#endif
                            11139 ; 212  |
                            11140 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11141 ; 214  |//  #pragma asm
                            11142 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 190

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11143 ; 216  |//  #pragma endasm
                            11144 ; 217  |
                            11145 ; 218  |
                            11146 ; 219  |#ifdef COLOR_262K
                            11147 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11148 ; 221  |#elif defined(COLOR_65K)
                            11149 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11150 ; 223  |#else
                            11151 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11152 ; 225  |#endif
                            11153 ; 226  |    
                            11154 ; 227  |#endif // #ifndef _TYPES_H
                            11155 
                            11157 
                            11158 ; 31   |
                            11159 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11160 ; 33   |//   USB2.0 STMP Registers 
                            11161 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11162 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            11163 ; 36   |
                            11164 ; 37   |
                            11165 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            11166 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            11167 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            11168 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            11169 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            11170 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            11171 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            11172 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            11173 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            11174 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            11175 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            11176 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            11177 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            11178 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            11179 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            11180 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            11181 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            11182 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            11183 ; 56   |
                            11184 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            11185 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            11186 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            11187 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            11188 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            11189 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            11190 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            11191 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            11192 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            11193 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            11194 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            11195 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            11196 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            11197 ; 70   |
                            11198 ; 71   |
                            11199 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            11200 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            11201 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            11202 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 191

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11203 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            11204 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            11205 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            11206 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            11207 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            11208 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            11209 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            11210 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            11211 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            11212 ; 85   |
                            11213 ; 86   |typedef union               
                            11214 ; 87   |{
                            11215 ; 88   |    struct {
                            11216 ; 89   |        int USBEN          :1;
                            11217 ; 90   |        int WAKEUPIRQ      :1;
                            11218 ; 91   |        int WAKEUPIE       :1;
                            11219 ; 92   |        int VBUSCXIRQ      :1;
                            11220 ; 93   |        int VBUSCXIE       :1;
                            11221 ; 94   |        int VBUSDISCXIRQ   :1;
                            11222 ; 95   |        int VBUSDISCXIE    :1;
                            11223 ; 96   |        int CLKOFF         :1;
                            11224 ; 97   |        int SUSP           :1;
                            11225 ; 98   |        int SUSPF          :1;
                            11226 ; 99   |        int UTMITST        :1;
                            11227 ; 100  |        int ARCCONNECT     :1;
                            11228 ; 101  |        int PLUGGEDIN_EN   :1;
                            11229 ; 102  |        int PLUGGEDIN      :1;
                            11230 ; 103  |        int                :8;
                            11231 ; 104  |        int HOSTDISCONNECT :1;
                            11232 ; 105  |        int VBUSSENSE      :1;
                            11233 ; 106  |    } B;
                            11234 ; 107  |    int I;
                            11235 ; 108  |} usbcsr_type;
                            11236 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control /
                                   Status Register */
                            11237 ; 110  |
                            11238 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            11239 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            11240 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            11241 ; 114  |
                            11242 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            11243 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            11244 ; 117  |
                            11245 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            11246 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            11247 ; 120  |
                            11248 ; 121  |typedef union               
                            11249 ; 122  |{
                            11250 ; 123  |    struct {
                            11251 ; 124  |        int ADD            :16;
                            11252 ; 125  |        int MEM            :2;
                            11253 ; 126  |        int                :6;
                            11254 ; 127  |    } B;
                            11255 ; 128  |    int I;
                            11256 ; 129  |} usbdmaoff_type;
                            11257 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            11258 ; 131  |
                            11259 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            11260 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            11261 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            11262 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            11263 ; 136  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 192

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11264 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            11265 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            11266 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            11267 ; 140  |
                            11268 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            11269 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            11270 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            11271 ; 144  |
                            11272 ; 145  |typedef union               
                            11273 ; 146  |{
                            11274 ; 147  |    struct {
                            11275 ; 148  |        int ADD            :9;
                            11276 ; 149  |        int                :7;
                            11277 ; 150  |        int RWB            :1;
                            11278 ; 151  |        int                :14;
                            11279 ; 152  |        int KICK           :1;
                            11280 ; 153  |    } B;
                            11281 ; 154  |    int I;
                            11282 ; 155  |} usbarcaccess_type;
                            11283 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            11284 ; 157  |
                            11285 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            11286 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            11287 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            11288 ; 161  |
                            11289 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            11290 ; 163  |
                            11291 ; 164  |typedef union               
                            11292 ; 165  |{
                            11293 ; 166  |    struct {
                            11294 ; 167  |        int DATA           :16;
                            11295 ; 168  |        int                :8;
                            11296 ; 169  |    } B;
                            11297 ; 170  |    int I;
                            11298 ; 171  |} usbarcdatalow_type;
                            11299 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                                  
                            11300 ; 173  |
                            11301 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            11302 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            11303 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            11304 ; 177  |
                            11305 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            11306 ; 179  |
                            11307 ; 180  |typedef union               
                            11308 ; 181  |{
                            11309 ; 182  |    struct {
                            11310 ; 183  |        int DATA           :16;
                            11311 ; 184  |        int                :8;
                            11312 ; 185  |    } B;
                            11313 ; 186  |    int I;
                            11314 ; 187  |} usbarcdatahigh_type;
                            11315 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))   
                                   
                            11316 ; 189  |
                            11317 ; 190  |
                            11318 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11319 ; 192  |//   USB2.0 ARC Registers 
                            11320 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11321 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            11322 ; 195  |
                            11323 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 193

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11324 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            11325 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            11326 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            11327 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            11328 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            11329 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            11330 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            11331 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            11332 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            11333 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            11334 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            11335 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            11336 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            11337 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            11338 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            11339 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            11340 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            11341 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            11342 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            11343 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            11344 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            11345 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            11346 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            11347 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            11348 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            11349 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            11350 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            11351 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            11352 ; 225  |
                            11353 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            11354 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            11355 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            11356 ; 229  |
                            11357 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            11358 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            11359 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            11360 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            11361 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            11362 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            11363 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            11364 ; 237  |
                            11365 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            11366 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            11367 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            11368 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            11369 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            11370 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            11371 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            11372 ; 245  |
                            11373 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            11374 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            11375 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            11376 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            11377 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            11378 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            11379 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            11380 ; 253  |
                            11381 ; 254  |typedef union               
                            11382 ; 255  |{
                            11383 ; 256  |    struct {
                            11384 ; 257  |        int N_PORTS         :4;
                            11385 ; 258  |        int PPC             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 194

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11386 ; 259  |        int                 :3;
                            11387 ; 260  |        int N_PCC           :4;
                            11388 ; 261  |        int N_CC            :4;
                            11389 ; 262  |        int PI              :1;
                            11390 ; 263  |        int                 :3;
                            11391 ; 264  |        int N_PTT           :4;
                            11392 ; 265  |        int N_TT            :4;
                            11393 ; 266  |        int                 :20;
                            11394 ; 267  |    } B;
                            11395 ; 268  |    DWORD I;
                            11396 ; 269  |} hcsparams_type;
                            11397 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            11398 ; 271  |
                            11399 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            11400 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            11401 ; 274  |
                            11402 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            11403 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            11404 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            11405 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            11406 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            11407 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            11408 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            11409 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            11410 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            11411 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            11412 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            11413 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            11414 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            11415 ; 288  |
                            11416 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            11417 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            11418 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            11419 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            11420 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            11421 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            11422 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            11423 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            11424 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            11425 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            11426 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            11427 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            11428 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            11429 ; 302  |
                            11430 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            11431 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            11432 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            11433 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            11434 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            11435 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            11436 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            11437 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            11438 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            11439 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            11440 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            11441 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            11442 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            11443 ; 316  |
                            11444 ; 317  |typedef union               
                            11445 ; 318  |{
                            11446 ; 319  |    struct {
                            11447 ; 320  |        int RS              :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 195

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11448 ; 321  |        int RST             :1;
                            11449 ; 322  |        int FS0             :1;
                            11450 ; 323  |        int FS1             :1;
                            11451 ; 324  |        int PSE             :1;
                            11452 ; 325  |        int ASE             :1;
                            11453 ; 326  |        int IAA             :1;
                            11454 ; 327  |        int LR              :1;
                            11455 ; 328  |        int ASP0            :1;
                            11456 ; 329  |        int ASP1            :1;
                            11457 ; 330  |        int                 :1;
                            11458 ; 331  |        int ASPE            :1;
                            11459 ; 332  |        int                 :3;
                            11460 ; 333  |        int FS2             :1;
                            11461 ; 334  |        int ITC             :8;
                            11462 ; 335  |        int                 :24;
                            11463 ; 336  |    } B;
                            11464 ; 337  |    DWORD I;
                            11465 ; 338  |} usbcmd_type;
                            11466 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            11467 ; 340  |
                            11468 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            11469 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            11470 ; 343  |
                            11471 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            11472 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            11473 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            11474 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            11475 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            11476 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            11477 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            11478 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            11479 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            11480 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            11481 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            11482 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            11483 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            11484 ; 357  |
                            11485 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            11486 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            11487 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            11488 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            11489 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            11490 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            11491 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            11492 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            11493 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            11494 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            11495 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            11496 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            11497 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            11498 ; 371  |
                            11499 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            11500 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            11501 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            11502 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            11503 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            11504 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            11505 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            11506 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            11507 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            11508 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            11509 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 196

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11510 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            11511 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            11512 ; 385  |
                            11513 ; 386  |
                            11514 ; 387  |typedef union               
                            11515 ; 388  |{
                            11516 ; 389  |    struct {
                            11517 ; 390  |        int UI              :1;
                            11518 ; 391  |        int UEI             :1;
                            11519 ; 392  |        int PCI             :1;
                            11520 ; 393  |        int FRI             :1;
                            11521 ; 394  |        int SEI             :1;
                            11522 ; 395  |        int AAI             :1;
                            11523 ; 396  |        int URI             :1;
                            11524 ; 397  |        int STI             :1;
                            11525 ; 398  |        int SLI             :1;
                            11526 ; 399  |        int                 :3;
                            11527 ; 400  |        int HCH             :1;
                            11528 ; 401  |        int RCL             :1;
                            11529 ; 402  |        int PS              :1;
                            11530 ; 403  |        int AS              :1;
                            11531 ; 404  |        int                 :24;
                            11532 ; 405  |    } B;
                            11533 ; 406  |    DWORD I;
                            11534 ; 407  |} usbsts_type;
                            11535 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            11536 ; 409  |
                            11537 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            11538 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            11539 ; 412  |
                            11540 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            11541 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            11542 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            11543 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            11544 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            11545 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            11546 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            11547 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            11548 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            11549 ; 422  |
                            11550 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            11551 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            11552 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            11553 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            11554 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            11555 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            11556 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            11557 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            11558 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            11559 ; 432  |
                            11560 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            11561 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            11562 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            11563 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            11564 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            11565 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            11566 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            11567 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            11568 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            11569 ; 442  |
                            11570 ; 443  |
                            11571 ; 444  |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 197

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11572 ; 445  |{
                            11573 ; 446  |    struct {
                            11574 ; 447  |        int UE              :1;
                            11575 ; 448  |        int UEE             :1;
                            11576 ; 449  |        int PCE             :1;
                            11577 ; 450  |        int FRE             :1;
                            11578 ; 451  |        int SEE             :1;
                            11579 ; 452  |        int AAE             :1;
                            11580 ; 453  |        int URE             :1;
                            11581 ; 454  |        int STE             :1;
                            11582 ; 455  |        int SLE             :1;
                            11583 ; 456  |        int                 :39;
                            11584 ; 457  |    } B;
                            11585 ; 458  |    DWORD I;
                            11586 ; 459  |} usbintr_type;
                            11587 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            11588 ; 461  |
                            11589 ; 462  |
                            11590 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            11591 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            11592 ; 465  |
                            11593 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            11594 ; 467  |
                            11595 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            11596 ; 469  |
                            11597 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            11598 ; 471  |
                            11599 ; 472  |typedef union               
                            11600 ; 473  |{
                            11601 ; 474  |    struct {
                            11602 ; 475  |        int                 :25;
                            11603 ; 476  |        int ADD             :7;
                            11604 ; 477  |        int                 :16;
                            11605 ; 478  |    } B;
                            11606 ; 479  |    DWORD I;
                            11607 ; 480  |} devaddr_type;
                            11608 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            11609 ; 482  |
                            11610 ; 483  |
                            11611 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            11612 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            11613 ; 486  |
                            11614 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            11615 ; 488  |
                            11616 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            11617 ; 490  |
                            11618 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            11619 ; 492  |
                            11620 ; 493  |typedef union               
                            11621 ; 494  |{
                            11622 ; 495  |    struct {
                            11623 ; 496  |        int                 :10;
                            11624 ; 497  |        int ADD             :22;
                            11625 ; 498  |        int                 :16;
                            11626 ; 499  |    } B;
                            11627 ; 500  |    DWORD I;
                            11628 ; 501  |} endptlistaddr_type;
                            11629 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158)
                                  )    
                            11630 ; 503  |
                            11631 ; 504  |
                            11632 ; 505  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 198

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11633 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            11634 ; 507  |
                            11635 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            11636 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            11637 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            11638 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            11639 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            11640 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            11641 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            11642 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            11643 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            11644 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            11645 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            11646 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            11647 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            11648 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            11649 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            11650 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            11651 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            11652 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            11653 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            11654 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            11655 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            11656 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            11657 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            11658 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            11659 ; 532  |
                            11660 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            11661 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            11662 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            11663 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            11664 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            11665 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            11666 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            11667 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            11668 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            11669 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            11670 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            11671 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            11672 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            11673 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            11674 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            11675 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            11676 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            11677 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            11678 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            11679 ; 552  |
                            11680 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            11681 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            11682 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            11683 ; 556  |
                            11684 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            11685 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            11686 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            11687 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            11688 ; 561  |
                            11689 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            11690 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            11691 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            11692 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            11693 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            11694 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 199

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11695 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            11696 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            11697 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            11698 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            11699 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            11700 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            11701 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            11702 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            11703 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            11704 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            11705 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            11706 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            11707 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            11708 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            11709 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            11710 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            11711 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            11712 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            11713 ; 586  |
                            11714 ; 587  |typedef union               
                            11715 ; 588  |{
                            11716 ; 589  |    struct {
                            11717 ; 590  |        int CCS             :1;
                            11718 ; 591  |        int CSC             :1;
                            11719 ; 592  |        int PE              :1;
                            11720 ; 593  |        int PEC             :1;
                            11721 ; 594  |        int OCA             :1;
                            11722 ; 595  |        int OCC             :1;
                            11723 ; 596  |        int FPR             :1;
                            11724 ; 597  |        int SUSP            :1;
                            11725 ; 598  |        int PR              :1;
                            11726 ; 599  |        int HSP             :1;
                            11727 ; 600  |        int LS              :2;
                            11728 ; 601  |        int PP              :1;
                            11729 ; 602  |        int PO              :1;
                            11730 ; 603  |        int PIC             :2;
                            11731 ; 604  |        int PTC             :4;
                            11732 ; 605  |        int WKCN            :1;
                            11733 ; 606  |        int WKDS            :1;
                            11734 ; 607  |        int WKOC            :1;
                            11735 ; 608  |        int PHCD            :1;
                            11736 ; 609  |        int PFSC            :1;
                            11737 ; 610  |        int                 :1;
                            11738 ; 611  |        int PSPD            :2;
                            11739 ; 612  |        int                 :1;
                            11740 ; 613  |        int PTW             :1;
                            11741 ; 614  |        int STS             :1;
                            11742 ; 615  |        int PTS             :1;
                            11743 ; 616  |        int                 :16;
                            11744 ; 617  |    } B;
                            11745 ; 618  |    DWORD I;
                            11746 ; 619  |} portsc1_type;
                            11747 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            11748 ; 621  |
                            11749 ; 622  |
                            11750 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            11751 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            11752 ; 625  |
                            11753 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            11754 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            11755 ; 628  |
                            11756 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 200

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11757 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            11758 ; 631  |
                            11759 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            11760 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                            11761 ; 634  |
                            11762 ; 635  |typedef union               
                            11763 ; 636  |{
                            11764 ; 637  |    struct {
                            11765 ; 638  |        int CM              :2;
                            11766 ; 639  |        int ES              :1;
                            11767 ; 640  |        int                 :46;
                            11768 ; 641  |    } B;
                            11769 ; 642  |    DWORD I;
                            11770 ; 643  |} usbmode_type;
                            11771 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            11772 ; 645  |
                            11773 ; 646  |
                            11774 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            11775 ; 648  |//  The following endpoint equates are common for the following registers
                            11776 ; 649  |
                            11777 ; 650  |#define ENDPOINT0_BITPOS (0)
                            11778 ; 651  |#define ENDPOINT1_BITPOS (1)
                            11779 ; 652  |#define ENDPOINT2_BITPOS (2)
                            11780 ; 653  |#define ENDPOINT3_BITPOS (3)
                            11781 ; 654  |#define ENDPOINT4_BITPOS (4)
                            11782 ; 655  |#define ENDPOINT5_BITPOS (5)
                            11783 ; 656  |#define ENDPOINT6_BITPOS (6)
                            11784 ; 657  |#define ENDPOINT7_BITPOS (7)
                            11785 ; 658  |#define ENDPOINT8_BITPOS (8)
                            11786 ; 659  |#define ENDPOINT9_BITPOS (9)
                            11787 ; 660  |#define ENDPOINT10_BITPOS (10)
                            11788 ; 661  |#define ENDPOINT11_BITPOS (11)
                            11789 ; 662  |#define ENDPOINT12_BITPOS (12)
                            11790 ; 663  |#define ENDPOINT13_BITPOS (13)
                            11791 ; 664  |#define ENDPOINT14_BITPOS (14)
                            11792 ; 665  |#define ENDPOINT15_BITPOS (15)
                            11793 ; 666  |
                            11794 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            11795 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            11796 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            11797 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            11798 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            11799 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            11800 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            11801 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            11802 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            11803 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            11804 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            11805 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            11806 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            11807 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            11808 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            11809 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            11810 ; 683  |
                            11811 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            11812 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            11813 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            11814 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            11815 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            11816 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            11817 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            11818 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 201

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11819 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            11820 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            11821 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            11822 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            11823 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            11824 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            11825 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            11826 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            11827 ; 700  |
                            11828 ; 701  |typedef union               
                            11829 ; 702  |{
                            11830 ; 703  |    struct {
                            11831 ; 704  |        int EP0              :1;
                            11832 ; 705  |        int EP1              :1;
                            11833 ; 706  |        int EP2              :1;
                            11834 ; 707  |        int EP3              :1;
                            11835 ; 708  |        int EP4              :1;
                            11836 ; 709  |        int EP5              :1;
                            11837 ; 710  |        int EP6              :1;
                            11838 ; 711  |        int EP7              :1;
                            11839 ; 712  |        int EP8              :1;
                            11840 ; 713  |        int EP9              :1;
                            11841 ; 714  |        int EP10             :1;
                            11842 ; 715  |        int EP11             :1;
                            11843 ; 716  |        int EP12             :1;
                            11844 ; 717  |        int EP13             :1;
                            11845 ; 718  |        int EP14             :1;
                            11846 ; 719  |        int EP15             :1;
                            11847 ; 720  |        int                  :32;
                            11848 ; 721  |    } B;
                            11849 ; 722  |    DWORD I;
                            11850 ; 723  |} endpsetupstat_type;
                            11851 ; 724  |
                            11852 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac
                                  ))    
                            11853 ; 726  |
                            11854 ; 727  |typedef union               
                            11855 ; 728  |{
                            11856 ; 729  |    struct {
                            11857 ; 730  |        int EP0              :1;
                            11858 ; 731  |        int EP1              :1;
                            11859 ; 732  |        int EP2              :1;
                            11860 ; 733  |        int EP3              :1;
                            11861 ; 734  |        int EP4              :1;
                            11862 ; 735  |        int EP5              :1;
                            11863 ; 736  |        int EP6              :1;
                            11864 ; 737  |        int EP7              :1;
                            11865 ; 738  |        int EP8              :1;
                            11866 ; 739  |        int EP9              :1;
                            11867 ; 740  |        int EP10             :1;
                            11868 ; 741  |        int EP11             :1;
                            11869 ; 742  |        int EP12             :1;
                            11870 ; 743  |        int EP13             :1;
                            11871 ; 744  |        int EP14             :1;
                            11872 ; 745  |        int EP15             :1;
                            11873 ; 746  |        int                  :8;
                            11874 ; 747  |    } B;
                            11875 ; 748  |    WORD I;
                            11876 ; 749  |} endpt_type;
                            11877 
                            11915 
                            11916 ; 750  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 202

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11917 ; 751  |typedef union
                            11918 ; 752  |{
                            11919 ; 753  |   struct {
                            11920 ; 754  |       endpt_type  RX;
                            11921 ; 755  |       endpt_type  TX;
                            11922 ; 756  |   } W;
                            11923 ; 757  |   DWORD DW;
                            11924 ; 758  |} endptrxtx_type;
                            11925 ; 759  |
                            11926 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))   
                                   
                            11927 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))   
                                   
                            11928 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))   
                                   
                            11929 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))   
                                   
                            11930 ; 764  |
                            11931 ; 765  |
                            11932 ; 766  |
                            11933 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            11934 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            11935 ; 769  |
                            11936 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            11937 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            11938 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            11939 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            11940 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            11941 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            11942 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            11943 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            11944 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            11945 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            11946 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            11947 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            11948 ; 782  |
                            11949 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            11950 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            11951 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            11952 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            11953 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            11954 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            11955 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            11956 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            11957 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            11958 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            11959 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            11960 ; 794  |
                            11961 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            11962 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11963 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            11964 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11965 ; 799  |
                            11966 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            11967 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            11968 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            11969 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            11970 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            11971 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            11972 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            11973 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            11974 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 203

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11975 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            11976 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            11977 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            11978 ; 812  |
                            11979 ; 813  |
                            11980 ; 814  |typedef union               
                            11981 ; 815  |{
                            11982 ; 816  |    struct {
                            11983 ; 817  |        int RXS             :1;
                            11984 ; 818  |        int RXD             :1;
                            11985 ; 819  |        int RXT             :2;
                            11986 ; 820  |        int                 :1;
                            11987 ; 821  |        int RXI             :1;
                            11988 ; 822  |        int RXR             :1;
                            11989 ; 823  |        int RXE             :1;
                            11990 ; 824  |        int                 :8;
                            11991 ; 825  |        int TXS             :1;
                            11992 ; 826  |        int TXD             :1;
                            11993 ; 827  |        int TXT             :2;
                            11994 ; 828  |        int                 :1;
                            11995 ; 829  |        int TXI             :1;
                            11996 ; 830  |        int TXR             :1;
                            11997 ; 831  |        int TXE             :1;
                            11998 ; 832  |        int                 :24;
                            11999 ; 833  |    } B;
                            12000 ; 834  |    DWORD I;
                            12001 ; 835  |} endptctrl_type;
                            12002 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)
                                  ))    
                            12003 ; 837  |
                            12004 ; 838  |#endif
                            12005 ; 839  |
                            12006 ; 840  |
                            12007 
                            12009 
                            12010 ; 37   |#include "regsusb20phy.h"
                            12011 
                            12013 
                            12014 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12015 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            12016 ; 3    |//;  File        : regsusbphy.inc
                            12017 ; 4    |//;  Description : USB20 PHY Register definition
                            12018 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            12019 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12020 ; 7    |
                            12021 ; 8    |// The following naming conventions are followed in this file.
                            12022 ; 9    |// All registers are named using the format...
                            12023 ; 10   |//     HW_<module>_<regname>
                            12024 ; 11   |// where <module> is the module name which can be any of the following...
                            12025 ; 12   |//     USB20
                            12026 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            12027 ; 14   |// module name includes a number starting from 0 for the first instance of
                            12028 ; 15   |// that module)
                            12029 ; 16   |// <regname> is the specific register within that module
                            12030 ; 17   |// We also define the following...
                            12031 ; 18   |//     HW_<module>_<regname>_BITPOS
                            12032 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            12033 ; 20   |//     HW_<module>_<regname>_SETMASK
                            12034 ; 21   |// which does something else, and
                            12035 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            12036 ; 23   |// which does something else.
                            12037 ; 24   |// Other rules
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 204

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12038 ; 25   |//     All caps
                            12039 ; 26   |//     Numeric identifiers start at 0
                            12040 ; 27   |
                            12041 ; 28   |#if !(defined(regsusbphyinc))
                            12042 ; 29   |#define regsusbphyinc 1
                            12043 ; 30   |
                            12044 ; 31   |#include "types.h"
                            12045 
                            12047 
                            12048 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            12049 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            12050 ; 3    |//
                            12051 ; 4    |// Filename: types.h
                            12052 ; 5    |// Description: Standard data types
                            12053 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            12054 ; 7    |
                            12055 ; 8    |#ifndef _TYPES_H
                            12056 ; 9    |#define _TYPES_H
                            12057 ; 10   |
                            12058 ; 11   |// TODO:  move this outta here!
                            12059 ; 12   |#if !defined(NOERROR)
                            12060 ; 13   |#define NOERROR 0
                            12061 ; 14   |#define SUCCESS 0
                            12062 ; 15   |#endif 
                            12063 ; 16   |#if !defined(SUCCESS)
                            12064 ; 17   |#define SUCCESS  0
                            12065 ; 18   |#endif
                            12066 ; 19   |#if !defined(ERROR)
                            12067 ; 20   |#define ERROR   -1
                            12068 ; 21   |#endif
                            12069 ; 22   |#if !defined(FALSE)
                            12070 ; 23   |#define FALSE 0
                            12071 ; 24   |#endif
                            12072 ; 25   |#if !defined(TRUE)
                            12073 ; 26   |#define TRUE  1
                            12074 ; 27   |#endif
                            12075 ; 28   |
                            12076 ; 29   |#if !defined(NULL)
                            12077 ; 30   |#define NULL 0
                            12078 ; 31   |#endif
                            12079 ; 32   |
                            12080 ; 33   |#define MAX_INT     0x7FFFFF
                            12081 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            12082 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            12083 ; 36   |#define MAX_ULONG   (-1) 
                            12084 ; 37   |
                            12085 ; 38   |#define WORD_SIZE   24              // word size in bits
                            12086 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            12087 ; 40   |
                            12088 ; 41   |
                            12089 ; 42   |#define BYTE    unsigned char       // btVarName
                            12090 ; 43   |#define CHAR    signed char         // cVarName
                            12091 ; 44   |#define USHORT  unsigned short      // usVarName
                            12092 ; 45   |#define SHORT   unsigned short      // sVarName
                            12093 ; 46   |#define WORD    unsigned int        // wVarName
                            12094 ; 47   |#define INT     signed int          // iVarName
                            12095 ; 48   |#define DWORD   unsigned long       // dwVarName
                            12096 ; 49   |#define LONG    signed long         // lVarName
                            12097 ; 50   |#define BOOL    unsigned int        // bVarName
                            12098 ; 51   |#define FRACT   _fract              // frVarName
                            12099 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            12100 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 205

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12101 ; 54   |#define FLOAT   float               // fVarName
                            12102 ; 55   |#define DBL     double              // dVarName
                            12103 ; 56   |#define ENUM    enum                // eVarName
                            12104 ; 57   |#define CMX     _complex            // cmxVarName
                            12105 ; 58   |typedef WORD UCS3;                   // 
                            12106 ; 59   |
                            12107 ; 60   |#define UINT16  unsigned short
                            12108 ; 61   |#define UINT8   unsigned char   
                            12109 ; 62   |#define UINT32  unsigned long
                            12110 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12111 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12112 ; 65   |#define WCHAR   UINT16
                            12113 ; 66   |
                            12114 ; 67   |//UINT128 is 16 bytes or 6 words
                            12115 ; 68   |typedef struct UINT128_3500 {   
                            12116 ; 69   |    int val[6];     
                            12117 ; 70   |} UINT128_3500;
                            12118 ; 71   |
                            12119 ; 72   |#define UINT128   UINT128_3500
                            12120 ; 73   |
                            12121 ; 74   |// Little endian word packed byte strings:   
                            12122 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12123 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12124 ; 77   |// Little endian word packed byte strings:   
                            12125 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12126 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12127 ; 80   |
                            12128 ; 81   |// Declare Memory Spaces To Use When Coding
                            12129 ; 82   |// A. Sector Buffers
                            12130 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            12131 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            12132 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            12133 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            12134 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            12135 ; 88   |// B. Media DDI Memory
                            12136 ; 89   |#define MEDIA_DDI_MEM _Y
                            12137 ; 90   |
                            12138 ; 91   |
                            12139 ; 92   |
                            12140 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            12141 ; 94   |// Examples of circular pointers:
                            12142 ; 95   |//    INT CIRC cpiVarName
                            12143 ; 96   |//    DWORD CIRC cpdwVarName
                            12144 ; 97   |
                            12145 ; 98   |#define RETCODE INT                 // rcVarName
                            12146 ; 99   |
                            12147 ; 100  |// generic bitfield structure
                            12148 ; 101  |struct Bitfield {
                            12149 ; 102  |    unsigned int B0  :1;
                            12150 ; 103  |    unsigned int B1  :1;
                            12151 ; 104  |    unsigned int B2  :1;
                            12152 ; 105  |    unsigned int B3  :1;
                            12153 ; 106  |    unsigned int B4  :1;
                            12154 ; 107  |    unsigned int B5  :1;
                            12155 ; 108  |    unsigned int B6  :1;
                            12156 ; 109  |    unsigned int B7  :1;
                            12157 ; 110  |    unsigned int B8  :1;
                            12158 ; 111  |    unsigned int B9  :1;
                            12159 ; 112  |    unsigned int B10 :1;
                            12160 ; 113  |    unsigned int B11 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 206

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12161 ; 114  |    unsigned int B12 :1;
                            12162 ; 115  |    unsigned int B13 :1;
                            12163 ; 116  |    unsigned int B14 :1;
                            12164 ; 117  |    unsigned int B15 :1;
                            12165 ; 118  |    unsigned int B16 :1;
                            12166 ; 119  |    unsigned int B17 :1;
                            12167 ; 120  |    unsigned int B18 :1;
                            12168 ; 121  |    unsigned int B19 :1;
                            12169 ; 122  |    unsigned int B20 :1;
                            12170 ; 123  |    unsigned int B21 :1;
                            12171 ; 124  |    unsigned int B22 :1;
                            12172 ; 125  |    unsigned int B23 :1;
                            12173 ; 126  |};
                            12174 ; 127  |
                            12175 ; 128  |union BitInt {
                            12176 ; 129  |        struct Bitfield B;
                            12177 ; 130  |        int        I;
                            12178 ; 131  |};
                            12179 ; 132  |
                            12180 ; 133  |#define MAX_MSG_LENGTH 10
                            12181 ; 134  |struct CMessage
                            12182 ; 135  |{
                            12183 ; 136  |        unsigned int m_uLength;
                            12184 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            12185 ; 138  |};
                            12186 ; 139  |
                            12187 ; 140  |typedef struct {
                            12188 ; 141  |    WORD m_wLength;
                            12189 ; 142  |    WORD m_wMessage;
                            12190 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            12191 ; 144  |} Message;
                            12192 ; 145  |
                            12193 ; 146  |struct MessageQueueDescriptor
                            12194 ; 147  |{
                            12195 ; 148  |        int *m_pBase;
                            12196 ; 149  |        int m_iModulo;
                            12197 ; 150  |        int m_iSize;
                            12198 ; 151  |        int *m_pHead;
                            12199 ; 152  |        int *m_pTail;
                            12200 ; 153  |};
                            12201 ; 154  |
                            12202 ; 155  |struct ModuleEntry
                            12203 ; 156  |{
                            12204 ; 157  |    int m_iSignaledEventMask;
                            12205 ; 158  |    int m_iWaitEventMask;
                            12206 ; 159  |    int m_iResourceOfCode;
                            12207 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            12208 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            12209 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            12210 ; 163  |    int m_uTimeOutHigh;
                            12211 ; 164  |    int m_uTimeOutLow;
                            12212 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            12213 ; 166  |};
                            12214 ; 167  |
                            12215 ; 168  |union WaitMask{
                            12216 ; 169  |    struct B{
                            12217 ; 170  |        unsigned int m_bNone     :1;
                            12218 ; 171  |        unsigned int m_bMessage  :1;
                            12219 ; 172  |        unsigned int m_bTimer    :1;
                            12220 ; 173  |        unsigned int m_bButton   :1;
                            12221 ; 174  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 207

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12222 ; 175  |    int I;
                            12223 ; 176  |} ;
                            12224 ; 177  |
                            12225 ; 178  |
                            12226 ; 179  |struct Button {
                            12227 ; 180  |        WORD wButtonEvent;
                            12228 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            12229 ; 182  |};
                            12230 ; 183  |
                            12231 ; 184  |struct Message {
                            12232 ; 185  |        WORD wMsgLength;
                            12233 ; 186  |        WORD wMsgCommand;
                            12234 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            12235 ; 188  |};
                            12236 ; 189  |
                            12237 ; 190  |union EventTypes {
                            12238 ; 191  |        struct CMessage msg;
                            12239 ; 192  |        struct Button Button ;
                            12240 ; 193  |        struct Message Message;
                            12241 ; 194  |};
                            12242 ; 195  |
                            12243 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            12244 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            12245 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            12246 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            12247 ; 200  |
                            12248 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            12249 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            12250 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            12251 ; 204  |
                            12252 ; 205  |#if DEBUG
                            12253 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12254 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12255 ; 208  |#else 
                            12256 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            12257 ; 210  |#define DebugBuildAssert(x)    
                            12258 ; 211  |#endif
                            12259 ; 212  |
                            12260 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12261 ; 214  |//  #pragma asm
                            12262 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12263 ; 216  |//  #pragma endasm
                            12264 ; 217  |
                            12265 ; 218  |
                            12266 ; 219  |#ifdef COLOR_262K
                            12267 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            12268 ; 221  |#elif defined(COLOR_65K)
                            12269 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            12270 ; 223  |#else
                            12271 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            12272 ; 225  |#endif
                            12273 ; 226  |    
                            12274 ; 227  |#endif // #ifndef _TYPES_H
                            12275 
                            12277 
                            12278 ; 32   |
                            12279 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12280 ; 34   |//   USB2.0 PHY STMP Registers 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 208

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12281 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12282 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            12283 ; 37   |
                            12284 ; 38   |
                            12285 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            12286 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            12287 ; 41   |
                            12288 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            12289 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            12290 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            12291 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            12292 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            12293 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            12294 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            12295 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            12296 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            12297 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            12298 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            12299 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            12300 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            12301 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            12302 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            12303 ; 57   |
                            12304 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            12305 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            12306 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            12307 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            12308 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            12309 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            12310 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            12311 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            12312 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            12313 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            12314 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            12315 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            12316 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            12317 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            12318 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            12319 ; 73   |
                            12320 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            12321 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            12322 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            12323 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            12324 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            12325 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            12326 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            12327 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            12328 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            12329 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            12330 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            12331 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            12332 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            12333 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            12334 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            12335 ; 89   |
                            12336 ; 90   |typedef union               
                            12337 ; 91   |{
                            12338 ; 92   |    struct {
                            12339 ; 93   |        int RSVD0          :5;
                            12340 ; 94   |        int TXDISCON1500   :1;
                            12341 ; 95   |        int PLLVCOPWD      :1;
                            12342 ; 96   |        int PLLVCPPWD      :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 209

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12343 ; 97   |        int RSVD1          :2;
                            12344 ; 98   |        int TXPWDFS        :1;
                            12345 ; 99   |        int TXPWDIBIAS     :1;
                            12346 ; 100  |        int TXPWDV2I       :1;
                            12347 ; 101  |        int TXPWDVBG       :1;
                            12348 ; 102  |        int TXPWDCOMP      :1;
                            12349 ; 103  |        int RSVD2          :1;
                            12350 ; 104  |        int RXPWDDISCONDET :1;
                            12351 ; 105  |        int RXPWDENV       :1;
                            12352 ; 106  |        int RXPWD1PT1      :1;
                            12353 ; 107  |        int RXPWDDIFF      :1;
                            12354 ; 108  |        int RXPWDRX        :1;
                            12355 ; 109  |        int RSVD3          :1;
                            12356 ; 110  |        int PWDIBIAS       :1;
                            12357 ; 111  |        int REGRESET       :1;
                            12358 ; 112  |    } B;
                            12359 ; 113  |    int I;
                            12360 ; 114  |} usbphypwd_type;
                            12361 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB 
                                  PHY Powerdown Register */
                            12362 ; 116  |
                            12363 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            12364 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            12365 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            12366 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            12367 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            12368 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            12369 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            12370 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            12371 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            12372 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            12373 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            12374 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            12375 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            12376 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            12377 ; 131  |
                            12378 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            12379 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            12380 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            12381 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            12382 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            12383 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            12384 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            12385 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            12386 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            12387 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            12388 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            12389 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            12390 ; 144  |
                            12391 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL1500_BITPOS)
                            12392 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL1500_BITPOS)
                            12393 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  SXCVR_BITPOS)
                            12394 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHY
                                  TX_TXCALIBRATE_BITPOS)
                            12395 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DN_BITPOS)
                            12396 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DN_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 210

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12397 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  STERM_BITPOS)
                            12398 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_
                                  BITPOS)
                            12399 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DP_BITPOS)
                            12400 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DP_BITPOS)
                            12401 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSH
                                  IZ_BITPOS)
                            12402 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCOMPOUT_BITPOS)
                            12403 ; 157  |
                            12404 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            12405 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            12406 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            12407 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            12408 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            12409 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            12410 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            12411 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            12412 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            12413 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            12414 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            12415 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            12416 ; 170  |
                            12417 ; 171  |typedef union               
                            12418 ; 172  |{
                            12419 ; 173  |    struct {
                            12420 ; 174  |        int TXCAL1500          :4;
                            12421 ; 175  |        int RSVD0              :1;
                            12422 ; 176  |        int TXENCAL1500        :1;
                            12423 ; 177  |        int TXHSXCVR           :1;
                            12424 ; 178  |        int TXCALIBRATE        :1;
                            12425 ; 179  |        int TXCAL45DN          :4;
                            12426 ; 180  |        int RSVD1              :1;
                            12427 ; 181  |        int TXENCAL45DN        :1;
                            12428 ; 182  |        int TXHSTERM           :1;
                            12429 ; 183  |        int TXSKEW             :1;
                            12430 ; 184  |        int TXCAL45DP          :4;
                            12431 ; 185  |        int RSVD2              :1;
                            12432 ; 186  |        int TXENCAL45DP        :1;
                            12433 ; 187  |        int TXFSHIZ            :1;
                            12434 ; 188  |        int TXCOMPOUT          :1;
                            12435 ; 189  |    } B;
                            12436 ; 190  |    int I;
                            12437 ; 191  |} usbphytx_type;
                            12438 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            12439 ; 193  |
                            12440 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            12441 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            12442 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            12443 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            12444 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            12445 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            12446 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            12447 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            12448 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            12449 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            12450 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            12451 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            12452 ; 206  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 211

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12453 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            12454 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            12455 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            12456 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                            12457 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            12458 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            12459 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            12460 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            12461 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            12462 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            12463 ; 217  |
                            12464 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLV2ISEL_BITPOS)
                            12465 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLCPDBLIP_BITPOS)
                            12466 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLVCOCLK2_BITPOS)
                            12467 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLVCOCLK24_BITPOS)
                            12468 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLCPNSEL_BITPOS)
                            12469 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLCLKDIVSEL_BITPOS)
                            12470 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLPFDRST_BITPOS)
                            12471 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            12472 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLVCOKSTART_BITPOS)
                            12473 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            12474 ; 228  |
                            12475 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            12476 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            12477 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            12478 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            12479 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            12480 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            12481 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            12482 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            12483 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            12484 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            12485 ; 239  |
                            12486 ; 240  |typedef union               
                            12487 ; 241  |{
                            12488 ; 242  |    struct {
                            12489 ; 243  |        int PLLV2ISEL        :4;
                            12490 ; 244  |        int RSVD0            :1;
                            12491 ; 245  |        int PLLCPDBLIP       :1;
                            12492 ; 246  |        int PLLVCOCLK2       :1;
                            12493 ; 247  |        int PLLVCOCLK24      :1;
                            12494 ; 248  |        int PLLCPNSEL        :4;
                            12495 ; 249  |        int PLLCLKDIVSEL     :4;
                            12496 ; 250  |        int RSVD1            :4;
                            12497 ; 251  |        int PLLPFDRST        :1;
                            12498 ; 252  |        int PLLCPSHORTLFR    :1;
                            12499 ; 253  |        int PLLVCOKSTART     :1;
                            12500 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            12501 ; 255  |    } B;
                            12502 ; 256  |    int I;
                            12503 ; 257  |} usbphypll_type;
                            12504 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 212

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12505 ; 259  |
                            12506 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            12507 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            12508 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                            12509 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            12510 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            12511 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            12512 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            12513 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            12514 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            12515 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            12516 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            12517 ; 271  |
                            12518 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            12519 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            12520 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            12521 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            12522 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            12523 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            12524 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            12525 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            12526 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            12527 ; 281  |
                            12528 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            12529 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_
                                  BITPOS)
                            12530 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_
                                  BITPOS)
                            12531 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLL
                                  KTIMECTL_BITPOS)
                            12532 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKD
                                  IVCTL_BITPOS)
                            12533 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives ac
                                  tual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            12534 ; 288  |//              480Mhz/7 =68.57Mhz
                            12535 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            12536 ; 290  |
                            12537 ; 291  |//              480Mhz/8 ~60Mhz
                            12538 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            12539 ; 293  |
                            12540 ; 294  |//              480Mhz/9 =53.3Mhz
                            12541 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            12542 ; 296  |
                            12543 ; 297  |//              480Mhz/10 =48Mhz
                            12544 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            12545 ; 299  |
                            12546 ; 300  |
                            12547 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOST
                                  MODETEST_BITPOS)
                            12548 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FS
                                  CKSOURCESEL_BITPOS)
                            12549 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGR
                                  XDBYPASS_BITPOS)
                            12550 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_
                                  BITPOS)
                            12551 ; 305  |
                            12552 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            12553 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            12554 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            12555 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            12556 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            12557 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 213

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12558 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            12559 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            12560 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            12561 ; 315  |
                            12562 ; 316  |typedef union               
                            12563 ; 317  |{
                            12564 ; 318  |    struct {
                            12565 ; 319  |     int ENVADJ               :4;
                            12566 ; 320  |     int DISCONADJ            :4;
                            12567 ; 321  |     int DEBUGMODE            :4;
                            12568 ; 322  |     int PLLLKTIMECTL         :4;
                            12569 ; 323  |     int PLLCKDIVCTL          :4;
                            12570 ; 324  |     int HOSTMODETEST         :1;
                            12571 ; 325  |     int FSCKSOURCESEL        :1;
                            12572 ; 326  |     int REGRXDBYPASS         :1;
                            12573 ; 327  |     int PLLLOCKED            :1;
                            12574 ; 328  |    } B;
                            12575 ; 329  |    int I;
                            12576 ; 330  |} usbphyrx_type;
                            12577 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            12578 ; 332  |
                            12579 ; 333  |#endif
                            12580 ; 334  |
                            12581 
                            12583 
                            12584 ; 38   |
                            12585 ; 39   |
                            12586 ; 40   |#endif // if (!@def(hwequ))
                            12587 ; 41   |
                            12588 
                            12590 
                            12591 ; 12   |#else 
                            12592 ; 13   |//include "regscodec.inc"
                            12593 ; 14   |#endif
                            12594 ; 15   |
                            12595 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            12596 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                            12597 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                            12598 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                            12599 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                            12600 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                            12601 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            12602 ; 23   |
                            12603 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            12604 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            12605 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            12606 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                            12607 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            12608 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            12609 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            12610 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                            12611 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                            12612 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 214

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12613 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            12614 ; 35   |
                            12615 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            12616 ; 37   |// MEDIA DEFINITIONS
                            12617 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            12618 ; 39   |
                            12619 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            12620 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            12621 ; 42   |#if defined(NAND1)
                            12622 ; 43   |#define SM_INTERNAL_CHIPS 1
                            12623 ; 44   |#else 
                            12624 ; 45   |#if defined(NAND2)
                            12625 ; 46   |#define SM_INTERNAL_CHIPS 2
                            12626 ; 47   |#else 
                            12627 ; 48   |#if defined(NAND3)
                            12628 ; 49   |#define SM_INTERNAL_CHIPS 3
                            12629 ; 50   |#else 
                            12630 ; 51   |#if defined(NAND4)
                            12631 ; 52   |#define SM_INTERNAL_CHIPS 4
                            12632 ; 53   |#else 
                            12633 ; 54   |#define SM_INTERNAL_CHIPS 1
                            12634 ; 55   |#endif
                            12635 ; 56   |#endif
                            12636 ; 57   |#endif
                            12637 ; 58   |#endif
                            12638 ; 59   |
                            12639 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            12640 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            12641 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                            12642 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            12643 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                            12644 ; 65   |//*** comment out if active high ****
                            12645 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            12646 ; 67   |
                            12647 ; 68   |#if defined(SMEDIA)
                            12648 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            12649 ; 70   |#define NUM_SM_EXTERNAL 1
                            12650 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            12651 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            12652 ; 73   |#else 
                            12653 ; 74   |#if defined(MMC)
                            12654 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            12655 ; 76   |#define NUM_SM_EXTERNAL 0
                            12656 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            12657 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            12658 ; 79   |#else 
                            12659 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            12660 ; 81   |#define NUM_SM_EXTERNAL 0
                            12661 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            12662 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            12663 ; 84   |#endif
                            12664 ; 85   |#endif
                            12665 ; 86   |
                            12666 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            12667 ; 88   |// Mass Storage Class definitions
                            12668 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            12669 ; 90   |// Set to 0 if Composite Device build is desired.    
                            12670 ; 91   |#define MULTI_LUN_BUILD 1   
                            12671 ; 92   |
                            12672 ; 93   |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 215

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12673 ; 94   |//  SCSI
                            12674 ; 95   |#if (MULTI_LUN_BUILD==0)
                            12675 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            12676 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            12677 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            12678 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            12679 ; 100  |  #else
                            12680 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            12681 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            12682 ; 103  |  #endif
                            12683 ; 104  |#else
                            12684 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            12685 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            12686 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            12687 ; 108  |  #else
                            12688 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            12689 ; 110  |  #endif
                            12690 ; 111  |#endif
                            12691 ; 112  |
                            12692 ; 113  |
                            12693 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            12694 ; 115  |
                            12695 ; 116  |
                            12696 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            12697 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            12698 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            12699 ; 120  |#ifdef MMC
                            12700 ; 121  |#ifdef MTP_BUILD
                            12701 ; 122  |// --------------------
                            12702 ; 123  |// MTP and MMC
                            12703 ; 124  |// --------------------
                            12704 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            12705 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            12706 ; 127  |#else  // ifndef MTP_BUILD
                            12707 ; 128  |#ifdef STMP_BUILD_PLAYER
                            12708 ; 129  |// --------------------
                            12709 ; 130  |// Player and MMC
                            12710 ; 131  |// --------------------
                            12711 ; 132  |#else
                            12712 ; 133  |// --------------------
                            12713 ; 134  |// USBMSC and MMC
                            12714 ; 135  |// --------------------
                            12715 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            12716 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            12717 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            12718 ; 139  |#endif // ifdef MTP_BUILD
                            12719 ; 140  |#else  // ifndef MMC
                            12720 ; 141  |#ifdef MTP_BUILD
                            12721 ; 142  |// --------------------
                            12722 ; 143  |// MTP and NAND only
                            12723 ; 144  |// --------------------
                            12724 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            12725 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            12726 ; 147  |#else  // ifndef MTP_BUILD
                            12727 ; 148  |#ifdef STMP_BUILD_PLAYER
                            12728 ; 149  |// --------------------
                            12729 ; 150  |// Player and NAND only
                            12730 ; 151  |// --------------------
                            12731 ; 152  |#else
                            12732 ; 153  |// --------------------
                            12733 ; 154  |// USBMSC and NAND only
                            12734 ; 155  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 216

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12735 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            12736 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            12737 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            12738 ; 159  |#endif // ifdef MTP_BUILD
                            12739 ; 160  |#endif // ifdef MMC 
                            12740 ; 161  |
                            12741 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            12742 ; 163  |#if (defined(MTP_BUILD))
                            12743 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            12744 ; 165  |
                            12745 ; 166  |////!
                            12746 ; 167  |////! This varible holds the watchdog count for the store flush.
                            12747 ; 168  |////!
                            12748 ; 169  |///
                            12749 ; 170  |#include <types.h>
                            12750 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            12751 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            12752 ; 173  |#endif
                            12753 ; 174  |
                            12754 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            12755 ; 176  |// These are needed here for Mass Storage Class
                            12756 ; 177  |// Needs to be cleaned up
                            12757 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            12758 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            12759 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            12760 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            12761 ; 182  |
                            12762 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            12763 ; 184  |
                            12764 ; 185  |#endif
                            12765 ; 186  |
                            12766 ; 187  |
                            12767 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            12768 ; 189  |// SmartMedia/NAND defs
                            12769 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            12770 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            12771 ; 192  |
                            12772 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            12773 ; 194  |// Sysloadresources defs
                            12774 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            12775 ; 196  |
                            12776 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            12777 ; 198  |// MMC defs
                            12778 ; 199  |#define MMC_MAX_PARTITIONS 1
                            12779 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            12780 ; 201  |
                            12781 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            12782 ; 203  |// SPI defs
                            12783 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            12784 ; 205  |
                            12785 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            12786 ; 207  |// Global media defs
                            12787 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            12788 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            12789 ; 210  |
                            12790 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            12791 ; 212  |// DO NOT CHANGE THESE!!!
                            12792 ; 213  |#define SM_MAX_PARTITIONS 4
                            12793 ; 214  |#define MAX_HANDLES 2
                            12794 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            12795 ; 216  |
                            12796 ; 217  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 217

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12797 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            12798 ; 219  |// Battery LRADC Values 
                            12799 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            12800 ; 221  |// brownout trip point in mV (moved by RS)
                            12801 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            12802 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            12803 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            12804 ; 225  |//     audio recording to media.
                            12805 ; 226  |#define BATT_SAFETY_MARGIN 10
                            12806 ; 227  |
                            12807 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                            12808 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                            12809 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            12810 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            12811 ; 232  |
                            12812 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                            12813 ; 234  |
                            12814 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            12815 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                            12816 ; 237  |#if (!defined(CLCD))
                            12817 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            12818 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            12819 ; 240  |#else 
                            12820 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            12821 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            12822 ; 243  |#endif
                            12823 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            12824 ; 245  |
                            12825 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            12826 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                            12827 ; 248  |// See mp3 encoder overlay.
                            12828 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            12829 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            12830 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            12831 ; 252  |
                            12832 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            12833 ; 254  |// Voice recording filenames
                            12834 ; 255  |// number of digits in filename Vxxx.wav
                            12835 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            12836 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            12837 ; 258  |
                            12838 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            12839 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            12840 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            12841 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            12842 ; 263  |#if defined(DEVICE_3500)
                            12843 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            12844 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            12845 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            12846 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                            12847 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            12848 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            12849 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            12850 ; 271  |
                            12851 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 218

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12852 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            12853 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                            12854 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                            12855 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            12856 ; 277  |
                            12857 ; 278  |#else 
                            12858 ; 279  |// STMP3410
                            12859 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            12860 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            12861 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            12862 ; 283  |#endif
                            12863 ; 284  |
                            12864 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            12865 ; 286  |// Number of available soft timers
                            12866 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            12867 ; 288  |#if defined(SYNC_LYRICS)
                            12868 ; 289  |#define SOFT_TIMERS 10
                            12869 ; 290  |#else 
                            12870 ; 291  |#if defined(JPEG_DECODER)
                            12871 ; 292  |#define SOFT_TIMERS 10
                            12872 ; 293  |#else 
                            12873 ; 294  |#define SOFT_TIMERS 9
                            12874 ; 295  |#endif
                            12875 ; 296  |#endif
                            12876 ; 297  |
                            12877 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            12878 ; 299  |//  sizes
                            12879 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            12880 ; 301  |#if defined(MMC)
                            12881 ; 302  |#if defined(USE_PLAYLIST5)
                            12882 ; 303  |#define MENU_STACK_SIZE 1500
                            12883 ; 304  |#else 
                            12884 ; 305  |#define MENU_STACK_SIZE 1250
                            12885 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            12886 ; 307  |#else 
                            12887 ; 308  |#if defined(USE_PLAYLIST5)
                            12888 ; 309  |#define MENU_STACK_SIZE 1500
                            12889 ; 310  |#else 
                            12890 ; 311  |#define MENU_STACK_SIZE 1250
                            12891 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            12892 ; 313  |#endif //if @def('MMC')
                            12893 ; 314  |
                            12894 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                            12895 ; 316  |// 
                            12896 ; 317  |#define STACK_L1_SIZE 750
                            12897 ; 318  |#define STACK_L2_SIZE 100
                            12898 ; 319  |#define STACK_L3_SIZE 160
                            12899 ; 320  |
                            12900 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            12901 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            12902 ; 323  |// is ok with switching code.
                            12903 ; 324  |#if defined(MTP_BUILD)
                            12904 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            12905 ; 326  |#endif
                            12906 ; 327  |
                            12907 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            12908 ; 329  |// maximum number of nested funclets 
                            12909 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            12910 ; 331  |#define MAX_NESTED_FUNCLET 6 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 219

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12911 ; 332  |
                            12912 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            12913 ; 334  |//    LCD DEFINITIONS
                            12914 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            12915 ; 336  |
                            12916 ; 337  |#define SPACE_CHAR 0x000020          
                            12917 ; 338  |#define ZERO_CHAR 0x000030
                            12918 ; 339  |#define COLON_CHAR 0x00003A
                            12919 ; 340  |#define PERIOD_CHAR 0x00002E
                            12920 ; 341  |
                            12921 ; 342  |#if (defined(S6B33B0A_LCD))
                            12922 ; 343  |#define LCD_X_SIZE 128
                            12923 ; 344  |#define LCD_Y_SIZE 159
                            12924 ; 345  |#endif
                            12925 ; 346  |
                            12926 ; 347  |#if (defined(SED15XX_LCD))
                            12927 ; 348  |#define LCD_X_SIZE 128
                            12928 ; 349  |#define LCD_Y_SIZE 64
                            12929 ; 350  |#endif
                            12930 ; 351  |
                            12931 ; 352  |
                            12932 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            12933 ; 354  |//   Details on Customizing Contrast
                            12934 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            12935 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            12936 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            12937 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            12938 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            12939 ; 360  |//   unless the ezact sequence is remembered.
                            12940 ; 361  |//   To find out what range your player supports: 
                            12941 ; 362  |//   change these equs to full range or comment out (full range is default)
                            12942 ; 363  |//;;;;;;
                            12943 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            12944 ; 365  |// recommended calibration using player -- uncomment 
                            12945 ; 366  |//;;;;;;
                            12946 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            12947 ; 368  |////////////////////////////
                            12948 ; 369  |#if (defined(DEMO_HW))
                            12949 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                            12950 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            12951 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            12952 ; 373  |#else 
                            12953 ; 374  |
                            12954 ; 375  |#if (defined(S6B33B0A_LCD))
                            12955 ; 376  |#define LCD_MAX_CONTRAST 210
                            12956 ; 377  |#define LCD_MIN_CONTRAST 160    
                            12957 ; 378  |#endif
                            12958 ; 379  |
                            12959 ; 380  |#if (defined(SED15XX_LCD))
                            12960 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            12961 ; 382  |// Engineering board regs support range [17-37].
                            12962 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            12963 ; 384  |//   One default contrast range [24-42] works for both.
                            12964 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            12965 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            12966 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            12967 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            12968 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            12969 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            12970 ; 391  |
                            12971 ; 392  |#if (defined(NEWSHINGYIH))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 220

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12972 ; 393  |#define LCD_MAX_CONTRAST 250
                            12973 ; 394  |#define LCD_MIN_CONTRAST 0
                            12974 ; 395  |#else 
                            12975 ; 396  |//-----
                            12976 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            12977 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                            12978 ; 399  |#define LCD_MAX_CONTRAST 250
                            12979 ; 400  |#define LCD_MIN_CONTRAST 0
                            12980 ; 401  |
                            12981 ; 402  |//=====
                            12982 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            12983 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                            12984 ; 405  |//LCD_MAX_CONTRAST equ 42
                            12985 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            12986 ; 407  |
                            12987 ; 408  |#endif
                            12988 ; 409  |#endif
                            12989 ; 410  |
                            12990 ; 411  |#endif
                            12991 ; 412  |
                            12992 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            12993 ; 414  |// The default value of the lcd contrast in % of range
                            12994 ; 415  |//   the default value is used when no settings.dat is available
                            12995 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            12996 ; 417  |
                            12997 ; 418  |#if (defined(S6B33B0A_LCD))
                            12998 ; 419  |// 60% of range is default value
                            12999 ; 420  |#define DEFAULT_CONTRAST 50 
                            13000 ; 421  |#endif
                            13001 ; 422  |
                            13002 ; 423  |#if (defined(SED15XX_LCD))
                            13003 ; 424  |// % of range is default value (was 60%)
                            13004 ; 425  |#define DEFAULT_CONTRAST 50 
                            13005 ; 426  |#endif
                            13006 ; 427  |
                            13007 ; 428  |
                            13008 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            13009 ; 430  |// make lower when doing calibration
                            13010 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            13011 ; 432  |
                            13012 ; 433  |
                            13013 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            13014 ; 435  |// For FFWD and RWND
                            13015 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            13016 ; 437  |#define SECONDS_TO_SKIP 1
                            13017 ; 438  |#define SECONDS_TO_SKIP1 3
                            13018 ; 439  |#define SECONDS_TO_SKIP2 6
                            13019 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            13020 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            13021 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13022 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            13023 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13024 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            13025 ; 446  |
                            13026 ; 447  |// For audible FFW/RWD
                            13027 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            13028 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            13029 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            13030 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            13031 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 221

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13032 ; 453  |#define LEVEL1_BOUNDARY 17 
                            13033 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13034 ; 455  |#define LEVEL2_BOUNDARY 33 
                            13035 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13036 ; 457  |#define LEVEL3_BOUNDARY 50 
                            13037 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            13038 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            13039 ; 460  |// Short Song Time, songs too short to play.
                            13040 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            13041 ; 462  |
                            13042 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            13043 ; 464  |// MP3 Sync Values
                            13044 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            13045 ; 466  |// # bytes to look for sync before marking it bad
                            13046 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            13047 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            13048 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            13049 ; 470  |// once we have sync'd, the isr should be called this frequently
                            13050 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            13051 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            13052 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            13053 ; 474  |
                            13054 ; 475  |
                            13055 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            13056 ; 477  |//// Multi-Stage Volume Control Definitions
                            13057 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            13058 ; 479  |//// Use Multi-Stage Volume
                            13059 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            13060 ; 481  |
                            13061 ; 482  |//// Master Volume definitions
                            13062 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            13063 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            13064 ; 485  |
                            13065 ; 486  |//// DAC-Mode definitions
                            13066 ; 487  |//// Adjusts 0dB point
                            13067 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            13068 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            13069 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                            13070 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            13071 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                            13072 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                            13073 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            13074 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            13075 ; 496  |
                            13076 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            13077 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            13078 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                            13079 ; 500  |
                            13080 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                            13081 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                            13082 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            13083 ; 504  |
                            13084 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                            13085 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            13086 ; 507  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 222

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13087 ; 508  |
                            13088 ; 509  |//// Line In definitions (used for Line-In 1)
                            13089 ; 510  |//// 0dB point of the Line In
                            13090 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            13091 ; 512  |//// Minimum volume of Line In
                            13092 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            13093 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            13094 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            13095 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            13096 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            13097 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                            13098 ; 519  |
                            13099 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            13100 ; 521  |//// 0dB point of the Line In
                            13101 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            13102 ; 523  |//// Minimum volume of Line In
                            13103 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            13104 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            13105 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            13106 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            13107 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            13108 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            13109 ; 530  |
                            13110 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            13111 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                            13112 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            13113 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            13114 ; 535  |
                            13115 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            13116 ; 537  |////
                            13117 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            13118 ; 539  |////
                            13119 ; 540  |///
                            13120 ; 541  |#include <types.h>
                            13121 ; 542  |extern volatile WORD g_wActivityState;
                            13122 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            13123 ; 544  |
                            13124 ; 545  |void _reentrant Init5VSense(void);
                            13125 ; 546  |void _reentrant ServiceDCDC(void);
                            13126 ; 547  |
                            13127 ; 548  |////////////////////////////////////////////////////////////////////////////
                            13128 ; 549  |//// JPEG Thumbnail Mode Setting
                            13129 ; 550  |//// number of column in thumbnail mode
                            13130 ; 551  |#define THUMBNAIL_X 2           
                            13131 ; 552  |//// number of row in  thumbnail mode
                            13132 ; 553  |#define THUMBNAIL_Y 2           
                            13133 ; 554  |//// thumbnail boundary offset x
                            13134 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            13135 ; 556  |//// thumbnail boundary offset y
                            13136 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            13137 ; 558  |
                            13138 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            13139 ; 560  |
                            13140 
                            13142 
                            13143 ; 15   |#include "gettime.h"
                            13144 
                            13146 
                            13147 ; 1    |#ifndef __TIME_H
                            13148 ; 2    |#define __TIME_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 223

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13149 ; 3    |
                            13150 ; 4    |_callee_save LONG GetTime(void);
                            13151 ; 5    |
                            13152 ; 6    |#endif
                            13153 
                            13155 
                            13156 ; 16   |#include "batterycharge.h"
                            13157 
                            13159 
                            13160 ; 1    |#ifndef __BATTERYCHARGE_H
                            13161 ; 2    |#define __BATTERYCHARGE_H
                            13162 ; 3    |
                            13163 ; 4    |//entry point for menus. function called via SysCallFunction()
                            13164 ; 5    |#ifdef STMP_BUILD_PLAYER
                            13165 ; 6    |_reentrant int BatteryChargeStateMachine(int a, int b, int *c);
                            13166 ; 7    |#else
                            13167 ; 8    |_reentrant void BatteryChargeStateMachine(void);
                            13168 ; 9    |#endif
                            13169 ; 10   |
                            13170 ; 11   |_reentrant WORD BatteryChargeInitialize(void);
                            13171 ; 12   |_reentrant void BatteryChargeDisableCharging(BOOL);
                            13172 ; 13   |_reentrant void BatteryChargeEnableCharging(void);
                            13173 ; 14   |_reentrant BOOL BatteryChargeIsCharging(void);
                            13174 ; 15   |_reentrant BOOL BatteryChargeIsTrickleCharging(void);
                            13175 ; 16   |
                            13176 ; 17   |_reentrant WORD BatteryChargeImplementationInitialize(void);
                            13177 ; 18   |_reentrant void BatteryChargeImplementationSample(BOOL);
                            13178 ; 19   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void);
                            13179 ; 20   |
                            13180 ; 21   |
                            13181 ; 22   |#endif 
                            13182 
                            13184 
                            13185 ; 17   |#include "lowresolutionadc.h"
                            13186 
                            13188 
                            13189 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                            13190 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                            13191 ; 3    |//;
                            13192 ; 4    |//; Filename:    lowresolutionadc.h
                            13193 ; 5    |//; Description: General purpose interface to LRADCs
                            13194 ; 6    |//;              Generic symbols are mapped to more specific symbols in inc\34xx\regslradc
                                  .inc files
                            13195 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                            13196 ; 8    |
                            13197 ; 9    |#ifndef _LOWRESOLUTIONADC_H
                            13198 ; 10   |#define _LOWRESOLUTIONADC_H
                            13199 ; 11   |
                            13200 ; 12   |#include "regslradc.h"
                            13201 
                            13203 
                            13204 ; 1    |#if !(defined(regslradcinc))
                            13205 ; 2    |
                            13206 ; 3    |#define regslradcinc 1
                            13207 ; 4    |
                            13208 ; 5    |#include "types.h"
                            13209 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13210 ; 7    |
                            13211 ; 8    |//   SYSTEM STMP Registers 
                            13212 ; 9    |//  Last Edited 6.26.2003 M. Henson
                            13213 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13214 ; 11   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 224

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13215 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                            13216 ; 13   |
                            13217 ; 14   |
                            13218 ; 15   |
                            13219 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                            13220 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                            13221 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                            13222 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                            13223 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                            13224 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                            13225 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                            13226 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                            13227 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                            13228 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                            13229 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                            13230 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                            13231 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                            13232 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                            13233 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                            13234 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                            13235 ; 32   |
                            13236 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                            13237 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                            13238 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                            13239 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                            13240 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                            13241 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                            13242 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                            13243 ; 40   |
                            13244 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                            13245 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                            13246 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                            13247 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                            13248 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                            13249 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                            13250 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                            13251 ; 48   |
                            13252 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                            13253 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                            13254 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                            13255 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                            13256 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                            13257 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                            13258 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                            13259 ; 56   |
                            13260 ; 57   |typedef union               
                            13261 ; 58   |{
                            13262 ; 59   |    struct {
                            13263 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                            13264 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                            13265 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                            13266 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                            13267 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                            13268 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                            13269 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 225

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13270 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                            13271 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                            13272 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                            13273 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                            13274 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                            13275 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                            13276 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                            13277 ; 74   |    } B;
                            13278 ; 75   |   unsigned int I;
                            13279 ; 76   |        unsigned int U;
                            13280 ; 77   |} lradc_ctrl_type;
                            13281 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                            13282 ; 79   |
                            13283 ; 80   |
                            13284 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                            13285 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                            13286 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                            13287 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                            13288 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                            13289 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                            13290 ; 87   |
                            13291 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                            13292 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                            13293 ; 90   |
                            13294 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                            13295 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                            13296 ; 93   |
                            13297 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                            13298 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                            13299 ; 96   |
                            13300 ; 97   |
                            13301 ; 98   |typedef union               
                            13302 ; 99   |{
                            13303 ; 100  |    struct {
                            13304 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                            13305 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                            13306 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                            13307 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                            13308 ; 105  |    } B;
                            13309 ; 106  |    unsigned int I;
                            13310 ; 107  |} lradc_thrsh_type;
                            13311 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                            13312 ; 109  |
                            13313 ; 110  |
                            13314 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            13315 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                            13316 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                            13317 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                            13318 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                            13319 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                            13320 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                            13321 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 226

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13322 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                            13323 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                            13324 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                            13325 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                            13326 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                            13327 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                            13328 ; 125  |
                            13329 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                            13330 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                            13331 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                            13332 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                            13333 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                            13334 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                            13335 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                            13336 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                            13337 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                            13338 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                            13339 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                            13340 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                            13341 ; 138  |
                            13342 ; 139  |
                            13343 ; 140  |
                            13344 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                            13345 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                            13346 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                            13347 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                            13348 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                            13349 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                            13350 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                            13351 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                            13352 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                            13353 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                            13354 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                            13355 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                            13356 ; 153  |
                            13357 ; 154  |
                            13358 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                            13359 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                            13360 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                            13361 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                            13362 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                            13363 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                            13364 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                            13365 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                            13366 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                            13367 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                            13368 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                            13369 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                            13370 ; 167  |
                            13371 ; 168  |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 227

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13372 ; 169  |{
                            13373 ; 170  |    struct {
                            13374 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                            13375 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                            13376 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                            13377 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                            13378 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                            13379 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                            13380 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                            13381 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                            13382 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                            13383 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                            13384 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                            13385 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                            13386 ; 183  |    } B;
                            13387 ; 184  |    unsigned int I;
                            13388 ; 185  |} lradc_result_type;
                            13389 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                            13390 ; 187  |
                            13391 ; 188  |
                            13392 ; 189  |
                            13393 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                            13394 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                            13395 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                            13396 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                            13397 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                            13398 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                            13399 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                            13400 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                            13401 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                            13402 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                            13403 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                            13404 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                            13405 ; 202  |
                            13406 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                            13407 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                            13408 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                            13409 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                            13410 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                            13411 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                            13412 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                            13413 ; 210  |
                            13414 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                            13415 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                            13416 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                            13417 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                            13418 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                            13419 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                            13420 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                            13421 ; 218  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 228

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13422 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                            13423 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                            13424 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                            13425 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                            13426 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                            13427 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                            13428 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                            13429 ; 226  |
                            13430 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                            13431 ; 228  |
                            13432 ; 229  |
                            13433 ; 230  |
                            13434 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            13435 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                            13436 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                            13437 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                            13438 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                            13439 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                            13440 ; 237  |
                            13441 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                            13442 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                            13443 ; 240  |
                            13444 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                            13445 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                            13446 ; 243  |
                            13447 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                            13448 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                            13449 ; 246  |
                            13450 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                            13451 ; 248  |
                            13452 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                            13453 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                            13454 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                            13455 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                            13456 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                            13457 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                            13458 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                            13459 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                            13460 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                            13461 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                            13462 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                            13463 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                            13464 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                            13465 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                            13466 ; 263  |
                            13467 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                            13468 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                            13469 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                            13470 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                            13471 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                            13472 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                            13473 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                            13474 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                            13475 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 229

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13476 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                            13477 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                            13478 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                            13479 ; 276  |
                            13480 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                            13481 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                            13482 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                            13483 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                            13484 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                            13485 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                            13486 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                            13487 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                            13488 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                            13489 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                            13490 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                            13491 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                            13492 ; 289  |
                            13493 ; 290  |
                            13494 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                            13495 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                            13496 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                            13497 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                            13498 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                            13499 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                            13500 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                            13501 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                            13502 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                            13503 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                            13504 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                            13505 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                            13506 ; 303  |
                            13507 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                            13508 ; 305  |
                            13509 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                            13510 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                            13511 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                            13512 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                            13513 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                            13514 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                            13515 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                            13516 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                            13517 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                            13518 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                            13519 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                            13520 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                            13521 ; 318  |
                            13522 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                            13523 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                            13524 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 230

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13525 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                            13526 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                            13527 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                            13528 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                            13529 ; 326  |
                            13530 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                            13531 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                            13532 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                            13533 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                            13534 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                            13535 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                            13536 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                            13537 ; 334  |
                            13538 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                            13539 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                            13540 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                            13541 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                            13542 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                            13543 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                            13544 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                            13545 ; 342  |
                            13546 ; 343  |
                            13547 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                            13548 ; 345  |
                            13549 ; 346  |
                            13550 ; 347  |
                            13551 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                            13552 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                            13553 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                            13554 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                            13555 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                            13556 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                            13557 ; 354  |
                            13558 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                            13559 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                            13560 ; 357  |
                            13561 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                            13562 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                            13563 ; 360  |
                            13564 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                            13565 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                            13566 ; 363  |
                            13567 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                            13568 ; 365  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 231

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13569 ; 366  |
                            13570 ; 367  |
                            13571 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                            13572 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                            13573 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                            13574 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                            13575 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                            13576 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                            13577 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                            13578 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                            13579 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                            13580 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                            13581 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                            13582 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                            13583 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                            13584 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                            13585 ; 382  |
                            13586 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                            13587 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                            13588 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                            13589 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                            13590 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                            13591 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                            13592 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                            13593 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                            13594 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                            13595 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                            13596 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                            13597 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                            13598 ; 395  |
                            13599 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                            13600 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                            13601 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                            13602 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                            13603 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                            13604 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                            13605 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                            13606 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                            13607 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                            13608 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                            13609 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                            13610 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                            13611 ; 408  |
                            13612 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                            13613 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                            13614 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                            13615 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                            13616 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                            13617 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                            13618 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 232

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13619 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                            13620 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                            13621 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                            13622 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                            13623 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                            13624 ; 421  |
                            13625 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                            13626 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13627 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13628 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13629 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13630 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                            13631 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                            13632 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                            13633 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                            13634 ; 431  |#define HW_LRADC_RES_REF_0                              80
                            13635 ; 432  |#define HW_LRADC_RES_REF_1                              77
                            13636 ; 433  |#define HW_LRADC_RES_REF_2                              100
                            13637 ; 434  |#define HW_LRADC_RES_REF_3                              129
                            13638 ; 435  |#define HW_LRADC_RES_REF_4                              160
                            13639 ; 436  |#define HW_LRADC_RES_REF_5                              154
                            13640 ; 437  |#define HW_LRADC_RES_REF_6                              200
                            13641 ; 438  |#define HW_LRADC_RES_REF_7                              258
                            13642 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                            13643 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                            13644 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                            13645 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                            13646 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                            13647 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                            13648 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                            13649 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                            13650 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                            13651 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                            13652 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                            13653 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                            13654 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                            13655 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                            13656 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                            13657 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                            13658 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                            13659 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                            13660 ; 457  |
                            13661 ; 458  |//Needed by button.asm
                            13662 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                            13663 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                            13664 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                            13665 ; 462  |
                            13666 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13667 ; 464  |
                            13668 ; 465  |#endif
                            13669 ; 466  |
                            13670 ; 467  |
                            13671 
                            13673 
                            13674 ; 13   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 233

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13675 ; 14   |// Variables
                            13676 ; 15   |extern WORD LowResAdcStatus;
                            13677 ; 16   |extern WORD LowResAdcBattResult, LowResAdcBattAvg;                                      //
                                   Results and Averages come from buttons.asm
                            13678 ; 17   |extern WORD LowResAdcAuxResult,  LowResAdcAuxAvg;
                            13679 ; 18   |extern WORD LowResAdcAux2Result, LowResAdcAux2Avg;                                      //
                                   Aux2 result and average valid for 3500
                            13680 ; 19   |
                            13681 ; 20   |
                            13682 ; 21   |// Types
                            13683 ; 22   |enum LowResADCChannel {BATT, AUX, AUX2};                                                  
                                    // AUX2 valid for 3500
                            13684 ; 23   |enum LowResADCHalfPwr {OFF = 0, ON = LRADC_HALF_POWER_SETMASK};
                            13685 ; 24   |enum LowResADCRef     {REF_0 = HW_LRADC_REF_0_SETMASK,
                            13686 ; 25   |                       REF_1 = HW_LRADC_REF_1_SETMASK,
                            13687 ; 26   |                                           REF_2 = HW_LRADC_REF_2_SETMASK,
                            13688 ; 27   |                                           REF_3 = HW_LRADC_REF_3_SETMASK,
                            13689 ; 28   |                                           REF_4 = HW_LRADC_REF_4_SETMASK,
                            13690 ; 29   |                                           REF_5 = HW_LRADC_REF_5_SETMASK,
                            13691 ; 30   |                                           REF_6 = HW_LRADC_REF_6_SETMASK,
                            13692 ; 31   |                                           REF_7 = HW_LRADC_REF_7_SETMASK
                            13693 ; 32   |                      };
                            13694 ; 33   |
                            13695 ; 34   |
                            13696 ; 35   |// ADC Reference resolutions in mV*10
                            13697 ; 36   |// 1 ADC count = Vref(mV)/([2^N] - 1) where N = # bits in result, and Vref based on select
                                  ed LRADC reference.
                            13698 ; 37   |#define RES_REF_0      HW_LRADC_RES_REF_0
                            13699 ; 38   |#define RES_REF_1      HW_LRADC_RES_REF_1
                            13700 ; 39   |#define RES_REF_2      HW_LRADC_RES_REF_2
                            13701 ; 40   |#define RES_REF_3      HW_LRADC_RES_REF_3
                            13702 ; 41   |#define RES_REF_4      HW_LRADC_RES_REF_4
                            13703 ; 42   |#define RES_REF_5      HW_LRADC_RES_REF_5
                            13704 ; 43   |#define RES_REF_6      HW_LRADC_RES_REF_6
                            13705 ; 44   |#define RES_REF_7      HW_LRADC_RES_REF_7
                            13706 ; 45   |
                            13707 ; 46   |
                            13708 ; 47   |// These bits are used against LowResAdcStatus, to signal which channels to read in button
                                  s routine
                            13709 ; 48   |#define LOW_RES_ADC_BATT_EN_MASK    1 
                            13710 ; 49   |#define LOW_RES_ADC_AUX_EN_MASK         2 
                            13711 ; 50   |#define LOW_RES_ADC_AUX2_EN_MASK        4
                            13712 ; 51   |
                            13713 ; 52   |/////////////////////////////////////////////////////////////////////////////////////////
                            13714 ; 53   |//
                            13715 ; 54   |//>  Name:          SysLowResolutionAdcReadBin
                            13716 ; 55   |//
                            13717 ; 56   |//   Type:          Function 
                            13718 ; 57   |//
                            13719 ; 58   |//   Description:   Returns the instantaneous Result of the Low Resolution ADC Channel spe
                                  cified
                            13720 ; 59   |//
                            13721 ; 60   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                            13722 ; 61   |//                  BATT for Battery channel
                            13723 ; 62   |//                  AUX for Auxiliary channel 1
                            13724 ; 63   |//                  AUX2 for Auxiliary channel 2
                            13725 ; 64   |//
                            13726 ; 65   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                            13727 ; 66   |//
                            13728 ; 67   |//   Notes:         none
                            13729 ; 68   |//<
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 234

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13730 ; 69   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                            13731 ; 70   |#ifdef DEVICE_3500
                            13732 ; 71   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_BATT_RESULT.B.DATA_OUT : (n == AUX 
                                  ? HW_LRADC1_RESULT.B.DATA_OUT: HW_LRADC2_RESULT.B.DATA_OUT))
                            13733 ; 72   |#else
                            13734 ; 73   |//3410 does not support AUX2
                            13735 ; 74   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_LRADC_RES.B.BATLRR : (n == AUX ? HW
                                  _LRADC_RES.B.AUXLRR: 0))
                            13736 ; 75   |#endif
                            13737 ; 76   |
                            13738 ; 77   |/////////////////////////////////////////////////////////////////////////////////////////
                            13739 ; 78   |//
                            13740 ; 79   |//>  Name:          SysLowResolutionAdcReadAvg
                            13741 ; 80   |//
                            13742 ; 81   |//   Type:          Function 
                            13743 ; 82   |//
                            13744 ; 83   |//   Description:   Reads the Averaged Result of the Low Resolution ADC Channel specified
                            13745 ; 84   |//
                            13746 ; 85   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                            13747 ; 86   |//                  BATT for Battery channel
                            13748 ; 87   |//                  AUX for Auxiliary channel 1
                            13749 ; 88   |//                  AUX2 for Auxiliary channel 2
                            13750 ; 89   |//
                            13751 ; 90   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                            13752 ; 91   |//
                            13753 ; 92   |//   Notes:         The average is done using 256 samples
                            13754 ; 93   |//<
                            13755 ; 94   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                            13756 ; 95   |#define SysLowResolutionAdcReadAvg(n)    (n==BATT ? LowResAdcBattAvg : (n == AUX ? LowResA
                                  dcAuxAvg : LowResAdcAux2Avg))
                            13757 ; 96   |
                            13758 ; 97   |// Functions  
                            13759 ; 98   |void _reentrant SysLowResolutionADCInit(enum LowResADCChannel Adc, enum LowResADCHalfPwr P
                                  ower, enum LowResADCRef Ref);
                            13760 ; 99   |INT SysLowResolutionAdcReadVolt(BYTE bAdcChannel,BOOL bAverage);
                            13761 ; 100  |
                            13762 ; 101  |// Equates
                            13763 ; 102  |#define AVERAGE_RESULT  TRUE
                            13764 ; 103  |#define INSTANT_RESULT  FALSE
                            13765 ; 104  |
                            13766 ; 105  |#endif // _LOWRESOLUTIONADC_H
                            13767 
                            13769 
                            13770 ; 18   |
                            13771 ; 19   |#include "liion.h"
                            13772 
                            13774 
                            13775 ; 1    |#ifndef __LIION_H
                            13776 ; 2    |#define __LIION_H
                            13777 ; 3    |
                            13778 ; 4    |#define LIION_BATTERY_VOLTAGE_4_2 4200
                            13779 ; 5    |#define LIION_BATTERY_VOLTAGE_4_1 4100
                            13780 ; 6    |
                            13781 ; 7    |
                            13782 ; 8    |#define LIION_UNKNOWN               0
                            13783 ; 9    |#define LIION_CONDITIONING          1
                            13784 ; 10   |#define LIION_CHARGING              2
                            13785 ; 11   |#define LIION_WAITING_FOR_FINISH    3
                            13786 ; 12   |#define LIION_CHARGED               4
                            13787 ; 13   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 235

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13788 ; 14   |#endif
                            13789 
                            13791 
                            13792 ; 20   |#include "battery_config.h"
                            13793 
                            13795 
                            13796 ; 1    |///////////////////////////////////////////////////////////////////////////////
                            13797 ; 2    |// Sigmatel, Inc  copyright (C) 2003-2004
                            13798 ; 3    |// Filename: battery_config.h
                            13799 ; 4    |// Battery Low Resolution ADC values & recharge values 
                            13800 ; 5    |///////////////////////////////////////////////////////////////////////////////
                            13801 ; 6    |
                            13802 ; 7    |#ifdef BATTERY_TYPE_LI_ION
                            13803 ; 8    |    //these are 3500 only
                            13804 ; 9    |    #define VBATT_REF           REF_5120MV
                            13805 ; 10   |    #define VBATT_MIN_MV        3000
                            13806 ; 11   |    #define VBATT_MAX_MV        4200
                            13807 ; 12   |
                            13808 ; 13   |    #define VBATT_BO_MV         3000
                            13809 ; 14   |
                            13810 ; 15   |    #define BATT_BROWNOUT       VBATT_BO_MV
                            13811 ; 16   |
                            13812 ; 17   |    #ifndef LIION_BATTERY_VOLTAGE
                            13813 ; 18   |    //this is in mV
                            13814 ; 19   |    //The reference design uses a 4.2V LiIon battery
                            13815 ; 20   |    #define LIION_BATTERY_VOLTAGE LIION_BATTERY_VOLTAGE_4_2
                            13816 ; 21   |    #endif 
                            13817 ; 22   |
                            13818 ; 23   |    #ifndef LIION_CONDITIONING_VOLTAGE_THRESHHOLD
                            13819 ; 24   |    //This is in millivolts
                            13820 ; 25   |    #define LIION_CONDITIONING_VOLTAGE_THRESHHOLD 3000
                            13821 ; 26   |    #endif
                            13822 ; 27   |
                            13823 ; 28   |    #ifndef LIION_CONDITIONING_CURRENT_LIMIT
                            13824 ; 29   |    //This is in mA.   
                            13825 ; 30   |    //Refer to the battery data sheet for the proper value
                            13826 ; 31   |    //the reference design uses a 400mAh battery that suggests 40mA is a good conditioning
                                   current
                            13827 ; 32   |    #define LIION_CONDITIONING_CURRENT_LIMIT 40
                            13828 ; 33   |    #endif 
                            13829 ; 34   |
                            13830 ; 35   |    #ifndef LIION_CHARGING_TIMEOUT
                            13831 ; 36   |    //the default is 4 hours
                            13832 ; 37   |    #define LIION_CHARGING_TIMEOUT  ((DWORD)(DWORD)4*(DWORD)60*(DWORD)60*(DWORD)1000)
                            13833 ; 38   |    #endif 
                            13834 ; 39   |
                            13835 ; 40   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD
                            13836 ; 41   |    //We want to enter the 'top-off' mode when the voltage differential between
                            13837 ; 42   |    //charging on and off is 20 mV
                            13838 ; 43   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD  20
                            13839 ; 44   |    #endif 
                            13840 ; 45   |
                            13841 ; 46   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT
                            13842 ; 47   |    //we want 10 samples of the non-charging current to be within the 
                            13843 ; 48   |    //differential threshhold.  
                            13844 ; 49   |
                            13845 ; 50   |#ifdef STMP_BUILD_PLAYER
                            13846 ; 51   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 5
                            13847 ; 52   |#else
                            13848 ; 53   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 10
                            13849 ; 54   |#endif
                            13850 ; 55   |    #endif 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 236

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13851 ; 56   |
                            13852 ; 57   |    #ifndef LIION_CHARGING_CURRENT_LIMIT
                            13853 ; 58   |    //This is in mA.   
                            13854 ; 59   |    //Refer to the battery data sheet for the proper value
                            13855 ; 60   |    //the reference design uses a 400mAh battery that suggests 400mA is a good charging cu
                                  rrent
                            13856 ; 61   |    #define LIION_CHARGING_CURRENT_LIMIT 400
                            13857 ; 62   |    #endif 
                            13858 ; 63   |
                            13859 ; 64   |    #ifndef LIION_TOPOFF_TIMEOUT
                            13860 ; 65   |    //After we reach that limit, we want to run for a set amount of time to 'top off' the 
                                  charging
                            13861 ; 66   |    //in this case, 2 minutes (was 30)
                            13862 ; 67   |#ifdef STMP_BUILD_PLAYER
                            13863 ; 68   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)15*(DWORD)60*(DWORD)1000)
                            13864 ; 69   |#else
                            13865 ; 70   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)2*(DWORD)60*(DWORD)1000)
                            13866 ; 71   |#endif
                            13867 ; 72   |    #endif
                            13868 ; 73   |
                            13869 ; 74   |        #ifndef POWER_OFF_FREQUENCY
                            13870 ; 75   |        //Set the Power Off Frequency.  Determines how frequently charging is turned-off. 
                                   
                            13871 ; 76   |#ifdef STMP_BUILD_PLAYER
                            13872 ; 77   |        #define POWER_OFF_FREQUENCY 40
                            13873 ; 78   |#else
                            13874 ; 79   |        #define POWER_OFF_FREQUENCY 500
                            13875 ; 80   |#endif
                            13876 ; 81   |        #endif
                            13877 ; 82   |#endif
                            13878 ; 83   |
                            13879 ; 84   |////////////////////////////////////////////////////////////////////////////////
                            13880 ; 85   |#ifdef BATTERY_TYPE_NIMH
                            13881 ; 86   |    #define ONE  1
                            13882 ; 87   |    #define ZERO 0
                            13883 ; 88   |
                            13884 ; 89   |    //NOTE:  Battery is currently Hardcoded to REF_5120MV in USBMSC
                            13885 ; 90   |#ifdef STMP_BUILD_PLAYER
                            13886 ; 91   |    #define VBATT_REF          REF_2700MV
                            13887 ; 92   |    #define VBATT_MIN_MV       900
                            13888 ; 93   |    #define VBATT_MAX_MV       1500
                            13889 ; 94   |    #define VBATT_BO_MV        840
                            13890 ; 95   |#else
                            13891 ; 96   |    #define VBATT_REF          REF_5120MV
                            13892 ; 97   |    #define VBATT_MIN_MV       900
                            13893 ; 98   |    #define VBATT_MAX_MV       1200
                            13894 ; 99   |    #define VBATT_BO_MV        850
                            13895 ; 100  |#endif
                            13896 ; 101  |
                            13897 ; 102  |    #ifdef DEVICE_3500
                            13898 ; 103  |        #define BATT_BROWNOUT                           VBATT_BO_MV
                            13899 ; 104  |    #else
                            13900 ; 105  |        #define BATT_BROWNOUT               HW_LRADC_BO_TRIP_830MV_SETMASK
                            13901 ; 106  |    #endif
                            13902 ; 107  |    // nimh settings above this line are similar to alkaline values below except v max.
                            13903 ; 108  |    
                            13904 ; 109  |    #ifndef NIMH_BATTERY_VOLTAGE
                            13905 ; 110  |    //Units: mV. This is the rated battery voltage.
                            13906 ; 111  |    //The reference design uses a 1.5V NIMH battery
                            13907 ; 112  |    #define NIMH_BATTERY_VOLTAGE NIMH_BATTERY_VOLTAGE_1_2
                            13908 ; 113  |    #endif 
                            13909 ; 114  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 237

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13910 ; 115  |    #ifndef NIMH_VOLTAGE_THRESHHOLD_MV
                            13911 ; 116  |    //Units: mV      Stop charging if this ADC battery voltage is measured. This can occur
                                   if an alkaline is inserted.
                            13912 ; 117  |    #define NIMH_VOLTAGE_THRESHHOLD_MV 1800
                            13913 ; 118  |    #endif
                            13914 ; 119  |    // 1 enables alkaline detection via brief charge current & voltage threshold check.
                            13915 ; 120  |    #define ALKALINE_DETECTION_IMPULSE_CHARGE_ENABLE 0 /* LEAVE DISABLED. Unimplemented. *
                                  /
                            13916 ; 121  |
                            13917 ; 122  |    //------- NIMH Detection via exposed batt case check w/ gpio. You must configure a gpi
                                  o reg & pin num also below.
                            13918 ; 123  |    #define BATTERY_CASE_POLARITY_DETECT_ENABLE 0 // Verified. GPIO pin setup in nimh.c in
                                  it, External pullup R (47kOhm)
                            13919 ; 124  |    // Explanation: General Purpose Input pin can connect to cylindrical batt end corner. 
                                  
                            13920 ; 125  |    // NiMH AAA batteries have ground case exposed at corner, else casing insulation 
                            13921 ; 126  |    //   causes signal to float & external pullup R gives a logic 1 indicating non-nimh. 
                            13922 ; 127  |    // NiMH AA  batteries instead have additional positive terminal exposure (opposite pol
                                  arity). 
                            13923 ; 128  |    //   Ext transistor can Vlevel shift for gpio logic-1 voltage. 
                            13924 ; 129  |    //   non-NIMH casing will allow gpio pin to stay grounded & gives logic 0.
                            13925 ; 130  |
                            13926 ; 131  |    // SET this to ZERO if your NiMH is AAA or has ground case contact (detects NiMH via c
                                  ase (-) contact)
                            13927 ; 132  |    // SET this to ONE if your NiMH battery is AA (detects NiMH via (+) terminal contact).
                                   Requires ext transistor V level shift.
                            13928 ; 133  |    #define NIMH_BATTERY_CASE_LOGIC_LEVEL ZERO
                            13929 ; 134  |    // *** IF YOU HAVE ENABLED, battery case polarity detection (used with nimh), 
                            13930 ; 135  |    //  NOTE: The GP number and bit number in the four macros below must be set to match y
                                  our input PIN number. 
                            13931 ; 136  |    //    LAYOUT SPECIFIC, but all 3550/3560 qfp and bga can use a single GPIO register & 
                                  bit num as below. 
                            13932 ; 137  |    //    SigmaTel HW apps recommends pin GP37= pin 17 (100qfp)= pin j7 (bga)= cpu card pi
                                  n24= GP1 Bit13 per 35xx datasheet.
                            13933 ; 138  |    #define CONFIGURED_GPIO_INPUT_BIT_FOR_BATTERY_CASE_POLARITY ( HW_GP1DIR.B.B13 )
                            13934 ; 139  |    // GPIO Enable register number as GPIO function.
                            13935 ; 140  |    #define CONFIGURED_BATT_CASE_GP_NUM_ENR (HW_GP1ENR)
                            13936 ; 141  |    // Data output enable reg num to use (will be set as input pin in this case)
                            13937 ; 142  |    #define CONFIGURED_BATT_CASE_GP_NUM_DOER  (HW_GP1DOER)
                            13938 ; 143  |    // bit num to use with desired input pin above
                            13939 ; 144  |    #define CONFIGURED_BATT_CASE_GP_BIT  (HW_GP_B13_SETMASK)
                            13940 ; 145  |    
                            13941 ; 146  |    // Error code returned during charging init when case detect feature enabled but cell 
                                  case not detected.
                            13942 ; 147  |    #define NIMH_POLARITY_NOT_DETECTED (-2)
                            13943 ; 148  |    //------- end batt case polarity detection
                            13944 ; 149  |
                            13945 ; 150  |    //------------------------------------
                            13946 ; 151  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS
                            13947 ; 152  |    // 0.1C = 10 hr charge, but use 12 hours to more fully charge larger cells. (units: ms
                                  ec)
                            13948 ; 153  |    #define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)12*(DWORD)60*(DWORD)60*(D
                                  WORD)1000))
                            13949 ; 154  |    //#define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)10*(DWORD)1000)) //10 s
                                  ec test mode to easily observe transition
                            13950 ; 155  |    #endif 
                            13951 ; 156  |    
                            13952 ; 157  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT
                            13953 ; 158  |    // Units: mA. Refer to the battery data sheet for the proper value. 
                            13954 ; 159  |    // Usually 1 C AAA means a charge of 700 mAh, 750 mAh for a few AAA cells (energizer).
                                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 238

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13955 ; 160  |    // Assume 700mAh battery so EQUILIBRIUM charge at 0.1C rate (1/10th charge/hr) = 70mA.
                                   
                            13956 ; 161  |    // Register options are 60 or 75mA. Suggest 75mA for AAA. AA's have wide mAh range. Us
                                  e 1/10th of mAh here:
                            13957 ; 162  |    #define NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT 75
                            13958 ; 163  |    #endif   
                            13959 ; 164  |    #ifndef
                            13960 ; 165  |    #define NIMH_TRICKLE_CHARGE_ENABLE 1
                            13961 ; 166  |    #endif
                            13962 ; 167  |    #ifndef NIMH_TRICKLE_CHARGE_CURRENT
                            13963 ; 168  |    #define NIMH_TRICKLE_CHARGE_CURRENT 10  
                            13964 ; 169  |    #endif //25mA is 0.035C rate for a 700mAh cell. 10mA recommended by 35xx charger desig
                                  ner.
                            13965 ; 170  |    //-------------------------------------
                            13966 ; 171  |    #ifndef NIMH_QUICK_CHARGING_TIMEOUT_MS   // NOTE: C/3 quick charging (3.6hrs) is not i
                                  mplemented.
                            13967 ; 172  |    // ~4 hr charge rate of C/3 terminated by one of 3 events: (per Duracell whitepaper) 
                            13968 ; 173  |    //   -dV/minute of 10mV, or 3.6hr timeout (216 minutes), or real temperature>=(60celci
                                  us|140F).
                            13969 ; 174  |    // Thermal warning: at this C/3 charge rate, all 3 of the above termination events mus
                                  t be checked.
                            13970 ; 175  |    #define NIMH_QUICK_CHARGING_TIMEOUT_MS ((DWORD)(DWORD)216*(DWORD)60*(DWORD)1000) 
                            13971 ; 176  |    #endif
                            13972 ; 177  |    #ifndef NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD
                            13973 ; 178  |    #define NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD 10
                            13974 ; 179  |    #endif
                            13975 ; 180  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C
                            13976 ; 181  |    // For temp check to function:    10celcius|50F < Ambient Temperature < 45celcius|113F
                                  
                            13977 ; 182  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C 60
                            13978 ; 183  |    #endif
                            13979 ; 184  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F
                            13980 ; 185  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F 140
                            13981 ; 186  |    #endif
                            13982 ; 187  |    // C/3 = 700mA/3 = 233 mA, HW supports 235mA. For C=750mAh: 750mA/3= 250mA. 
                            13983 ; 188  |    #ifndef NIMH_QUICK_CHARGING_CURRENT_LIMIT
                            13984 ; 189  |    #define NIMH_QUICK_CHARGING_CURRENT_LIMIT 235        
                            13985 ; 190  |    #endif    
                            13986 ; 191  |    //-------------------------------------
                            13987 ; 192  |    #ifndef NIMH_FAST_CHARGING_CURRENT_LIMIT  // NOTE: C/2 Fast charging (2hrs) is not imp
                                  lemented. 
                            13988 ; 193  |    // in units of mA.   Temperature measurement required with this mode. 
                            13989 ; 194  |    #define NIMH_FAST_CHARGING_CURRENT_LIMIT 400
                            13990 ; 195  |    #endif      
                            13991 ; 196  |    #ifndef NIMH_FAST_CHARGING_TOPOFF_TIMEOUT
                            13992 ; 197  |    //After we reach that limit, we may want to run for a set amount of time to 'top off'
                            13993 ; 198  |    //the charging in this case,                       n minutes
                            13994 ; 199  |    #define NIMH_FAST_CHARGING_TOPOFF_TIMEOUT ((DWORD)(DWORD)30*(DWORD)60*(DWORD)1000)
                            13995 ; 200  |    #endif
                            13996 ; 201  |
                            13997 ; 202  |        #ifndef POWER_OFF_FREQUENCY
                            13998 ; 203  |        //Set the Power Off Frequency Count.  Determines how frequently charging is turned
                                  -off. 
                            13999 ; 204  |#ifdef STMP_BUILD_PLAYER
                            14000 ; 205  |        #define POWER_OFF_FREQUENCY 40
                            14001 ; 206  |#else
                            14002 ; 207  |        #define POWER_OFF_FREQUENCY 500
                            14003 ; 208  |#endif
                            14004 ; 209  |        #endif
                            14005 ; 210  |    
                            14006 ; 211  |#endif // BATTERY_TYPE_NIMH
                            14007 ; 212  |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 239

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14008 ; 213  |
                            14009 ; 214  |#ifdef BATTERY_TYPE_ALKALINE
                            14010 ; 215  |#ifdef STMP_BUILD_PLAYER
                            14011 ; 216  |    #define VBATT_REF          REF_2700MV
                            14012 ; 217  |    #define VBATT_MIN_MV       900
                            14013 ; 218  |    #define VBATT_MAX_MV       1500
                            14014 ; 219  |    #define VBATT_BO_MV        840
                            14015 ; 220  |#else
                            14016 ; 221  |    #define VBATT_REF          REF_5120MV
                            14017 ; 222  |    #define VBATT_MIN_MV       900
                            14018 ; 223  |    #define VBATT_MAX_MV       1500
                            14019 ; 224  |    #define VBATT_BO_MV        850
                            14020 ; 225  |#endif
                            14021 ; 226  |
                            14022 ; 227  |    #define BATT_BROWNOUT                               VBATT_BO_MV
                            14023 ; 228  |    
                            14024 ; 229  |    #define OXYRIDE_THRESHOLD_MV  1550     // Battery considered Oxyride if avg voltage ex
                                  ceeds 1.55v
                            14025 ; 230  |    #define OXYRIDE_SETBACK_MV     200     // Battery Voltage - VDDD < 200mv for VDDIO sta
                                  bility
                            14026 ; 231  |#endif 
                            14027 
                            14029 
                            14030 ; 21   |
                            14031 ; 22   |
                            14032 ; 23   |////////////////////////////////////////////////////////////////////////////////
                            14033 ; 24   |// Variables
                            14034 ; 25   |////////////////////////////////////////////////////////////////////////////////
                            14035 ; 26   |
                            14036 ; 27   |#ifndef STMP_BUILD_PLAYER
                            14037 ; 28   |DWORD g_ChargeTimes=0;
                            14038 ; 29   |#define MAX_CHARGE_TIMES 600*60*4
                            14039 ; 30   |#endif
                            14040 ; 31   |
                            14041 ; 32   |DWORD g_dwLiIonTimeOut=0;
                            14042 
                            14043 
Y:0000                      14044         org     y,".ydataliion",init:
                            14045 Fg_dwLiIonTimeOut:
Y:0000 000000 000000        14046         dc      $000000,$000000
                            14049 
                            14050 ; 33   |WORD g_LiIonState = LIION_UNKNOWN;
                            14051 
                            14052 Fg_LiIonState:
Y:0002 000000               14053         dc      $000000
                            14056 
                            14057 ; 34   |
                            14058 ; 35   |WORD g_wVBatt_mV_Charging    =0;
                            14059 
                            14060 Fg_wVBatt_mV_Charging:
Y:0003 000000               14061         dc      $000000
                            14064 
                            14065 ; 36   |WORD g_wVBatt_mV_NotCharging =0;
                            14066 
                            14067 Fg_wVBatt_mV_NotCharging:
Y:0004 000000               14068         dc      $000000
                            14071 
                            14072 ; 37   |WORD g_iThreshholdcount = 0;
                            14073 
                            14074 Fg_iThreshholdcount:
Y:0005 000000               14075         dc      $000000
                            14078 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 240

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14079 ; 38   |BOOL g_bTrickleChargingNow = FALSE; // used by batterycharge.c and nimh.c. Here just a pla
                                  ceholder.
                            14080 
                            14081 Fg_bTrickleChargingNow:
Y:0006 000000               14082         dc      $000000
                            14085 
                            14086 ; 39   |////////////////////////////////////////////////////////////////////////////////
                            14087 ; 40   |// Code
                            14088 ; 41   |////////////////////////////////////////////////////////////////////////////////
                            14089 ; 42   |
                            14090 ; 43   |static void do_nothing(void) {      // This function is here to make the dang FUNCLET, bel
                                  ow, work right.
                            14091 
P:0000                      14092         org     p,".ptextliion":
                            14096 Fdo_nothing:
                            14097 
                            14098 ; 44   |                                    // Without this here, the compiler switches back to ".
                                  ptext..." as soon
                            14099 ; 45   |                                    // as it hits some code.  With this here, the "org p,"
                                  SYSFUNCLET_..._P"
                            14100 ; 46   |                                    // stays in effect.
                            14101 ; 47   |                                    // The function is declared "static" so that it's invi
                                  sible outside this file.
                            14102 ; 48   |  return;
                            14103 ; 49   |}
                            14104 
P:0000 00000C         4    414106         rts
                            14108 
                            14109 ; 50   |#ifdef MTP_BUILD                               
                            14110 ; 51   |#ifdef FUNCLET
                            14111 ; 52   |  #pragma asm
                            14112 ; 53   |    extern SysCallFunclet
                            14113 ; 54   |  #pragma endasm
                            14114 ; 55   |#endif    
                            14115 ; 56   |#endif    
                            14116 ; 57   |
                            14117 ; 58   |
                            14118 ; 59   |/////////////////////////////////////////////////////////////////////////////////////////
                            14119 ; 60   |//
                            14120 ; 61   |//>  Name:          BatteryChargeImplementatonGetCurrentLimit
                            14121 ; 62   |//
                            14122 ; 63   |//   Type:          Function 
                            14123 ; 64   |//
                            14124 ; 65   |//   Description:   Should evaluate whatever parameters are required and return a current
                            14125 ; 66   |//                  limit for the battery recharge circuitry.
                            14126 ; 67   |//
                            14127 ; 68   |//   Inputs:        none
                            14128 ; 69   |//
                            14129 ; 70   |//   Outputs:       current limit in milliamps
                            14130 ; 71   |//
                            14131 ; 72   |//   Notes:         
                            14132 ; 73   |//<
                            14133 ; 74   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                            14134 ; 75   |
                            14135 ; 76   |#ifdef MTP_BUILD                               
                            14136 ; 77   |#ifdef FUNCLET
                            14137 ; 78   |    #pragma asm
                            14138 ; 79   |        FBatteryChargeImplementatonGetCurrentLimit:
                            14139 ; 80   |
                            14140 ; 81   |        nolist
                            14141 ; 82   |        include "sysmacro.asm"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 241

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14142 ; 83   |        include "resource.inc"
                            14143 ; 84   |        list
                            14144 ; 85   |
                            14145 ; 86   |        ;If using funclet, function will be executed via funclet kernel
                            14146 ; 87   |        CallFunclet RSRC_FUNCLET_BATTERYCHARGEIMPLEMENTATONGETCURRENTLIMIT
                            14147 ; 88   |
                            14148 ; 89   |        org p,"SYSFUNCLET_BatteryChargeImplementatonGetCurrentLimit_P":
                            14149 ; 90   |        dc      RSRC_FUNCLET_BATTERYCHARGEIMPLEMENTATONGETCURRENTLIMIT
                            14150 ; 91   |    #pragma endasm
                            14151 ; 92   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit_Funclet(void)
                            14152 ; 93   |#else
                            14153 ; 94   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void)
                            14154 ; 95   |#endif    
                            14155 ; 96   |#else   // Non-MTP Build
                            14156 ; 97   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void)
                            14157 ; 98   |#endif
                            14158 ; 99   |{
                            14159 
                            14164 FBatteryChargeImplementatonGetCurrentLimit:
P:0001 055F7C         2    614165         movec   ssh,y:(r7)+
P:0002 205F00         2    814168         move    (r7)+
                            14174 
                            14175 ; 100  |    WORD wVBatt_mV;
                            14176 ; 101  |    WORD wCurrentLimit = 0;
                            14177 
P:0003 20001B         2   1014179         clr     b   
P:0004 045FA0         2   1214181         movec   m0,n7
P:0005 000000         2   1414182         nop
P:0006 5D6F00         4   1814183         move    b1,y:(r7+n7)
                            14186 
                            14187 ; 102  |
                            14188 ; 103  |    switch (g_LiIonState)
                            14189 
P:0007 5FF000 rrrrrr  3   2114191         move    y:Fg_LiIonState,b
P:0009 56F400 000002  3   2414192         move    #>2,a
P:000B 2B0000         2   2614193         move    #0,b2
P:000C 56F40D 000003  3   2914194         cmp     a,b     #>3,a
P:000E 0AF0AA rrrrrr  6   3514195         jeq     L20
P:0010 56F40D 000001  3   3814196         cmp     a,b     #>1,a
P:0012 0AF0AA rrrrrr  6   4414197         jeq     L23
P:0014 20000D         2   4614198         cmp     a,b
P:0015 0AF0A2 rrrrrr  6   5214199         jne     L31
                            14200 
                            14201 ; 104  |    {
                            14202 ; 105  |    case LIION_CHARGED:
                            14203 ; 106  |        //nothing to do.
                            14204 ; 107  |        break;
                            14205 ; 108  |    case LIION_CONDITIONING:
                            14206 ; 109  |#ifdef STMP_BUILD_PLAYER
                            14207 ; 110  |        if(GetTime() > g_dwLiIonTimeOut)
                            14208 
P:0017 0BF080 rrrrrr  6   5814210         jsr     FGetTime
P:0019 200009         2   6014211         tfr     a,b
P:001A 5EF000 rrrrrr  3   6314212         move    y:Fg_dwLiIonTimeOut+1,a
P:001C 58F000 rrrrrr  3   6614213         move    y:Fg_dwLiIonTimeOut,a0
P:001E 2A0000         2   6814214         move    #0,a2
P:001F 2B0000         2   7014215         move    #0,b2
P:0020 20000D         2   7214216         cmp     a,b
P:0021 0AF0A7 rrrrrr  6   7814217         jgt     L21
                            14218 
                            14219 ; 111  |#else
                            14220 ; 112  |        if( g_ChargeTimes > MAX_CHARGE_TIMES )
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 242

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14221 ; 113  |#endif
                            14222 ; 114  |
                            14223 ; 115  |        {//we've sat conditioning the battery for too long, something must be wrong
                            14224 ; 116  |            BatteryChargeDisableCharging(TRUE);
                            14225 ; 117  |        }
                            14226 ; 118  |        else
                            14227 ; 119  |        {
                            14228 ; 120  |            if(g_wVBatt_mV_NotCharging > LIION_CONDITIONING_VOLTAGE_THRESHHOLD)
                            14229 
P:0023 5FF000 rrrrrr  3   8114231         move    y:Fg_wVBatt_mV_NotCharging,b
P:0025 45F400 000BB8  3   8414232         move    #3000,x1
P:0027 2B0000         2   8614233         move    #0,b2
P:0028 20006D         2   8814234         cmp     x1,b
P:0029 0AF0AF rrrrrr  6   9414235         jle     L19
                            14236 
                            14237 ; 121  |            {
                            14238 ; 122  |                g_LiIonState = LIION_CHARGING;
                            14239 
P:002B 56F400 000002  3   9714241         move    #>2,a
P:002D 5C7000 rrrrrr  3  10014242         move    a1,y:Fg_LiIonState
                            14243 
                            14244 ; 123  |            }
                            14245 
P:002F 0AF080 rrrrrr  6  10614247         jmp     L31
                            14248 
                            14249 ; 124  |            else
                            14250 ; 125  |            {
                            14251 ; 126  |                wCurrentLimit = LIION_CONDITIONING_CURRENT_LIMIT;
                            14252 
P:0031 46F400 000028  3  10914254 L19:    move    #>40,y0
P:0033 045FA0         2  11114257         movec   m0,n7
P:0034 000000         2  11314258         nop
P:0035 4E6F00         4  11714259         move    y0,y:(r7+n7)
                            14262 
                            14263 ; 127  |            }
                            14264 ; 128  |        }
                            14265 ; 129  |        break;
                            14266 
P:0036 0AF080 rrrrrr  6  12314268         jmp     L31
                            14269 
                            14270 ; 130  |    case LIION_CHARGING:
                            14271 ; 131  |#ifdef STMP_BUILD_PLAYER
                            14272 ; 132  |        if(GetTime() > g_dwLiIonTimeOut)
                            14273 
P:0038 0BF080 rrrrrr  6  12914275 L20:    jsr     FGetTime
P:003A 5FF000 rrrrrr  3  13214276         move    y:Fg_dwLiIonTimeOut+1,b
P:003C 59F000 rrrrrr  3  13514277         move    y:Fg_dwLiIonTimeOut,b0
P:003E 2B0000         2  13714278         move    #0,b2
P:003F 2A0000         2  13914279         move    #0,a2
P:0040 200005         2  14114280         cmp     b,a
P:0041 0AF0AF rrrrrr  6  14714281         jle     L22
                            14282 
                            14283 ; 133  |#else
                            14284 ; 134  |        if( g_ChargeTimes > MAX_CHARGE_TIMES )
                            14285 ; 135  |#endif
                            14286 ; 136  |        {//we've sat too long charging without reaching our threshhold, something must be 
                                  wrong.
                            14287 ; 137  |            BatteryChargeDisableCharging(TRUE);
                            14288 
P:0043 56F400 000001  3  15014290 L21:    move    #>1,a
P:0045 0BF080 rrrrrr  6  15614291         jsr     FBatteryChargeDisableCharging
                            14292 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 243

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14293 ; 138  |        }
                            14294 
P:0047 0AF080 rrrrrr  6  16214296         jmp     L31
                            14297 
                            14298 ; 139  |        else
                            14299 ; 140  |        {
                            14300 ; 141  |            if(g_iThreshholdcount > LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT)
                            14301 
P:0049 5FF000 rrrrrr  3  16514303 L22:    move    y:Fg_iThreshholdcount,b
P:004B 46F400 000005  3  16814304         move    #>5,y0
P:004D 2B0000         2  17014305         move    #0,b2
P:004E 20005D         2  17214306         cmp     y0,b
P:004F 0AF0AF rrrrrr  6  17814307         jle     L26
                            14308 
                            14309 ; 142  |            {
                            14310 ; 143  |                g_LiIonState = LIION_WAITING_FOR_FINISH;
                            14311 ; 144  |                g_dwLiIonTimeOut = GetTime() + LIION_TOPOFF_TIMEOUT;
                            14312 ; 145  |            }
                            14313 ; 146  |            wCurrentLimit = LIION_CHARGING_CURRENT_LIMIT;
                            14314 
P:0051 0AF080 rrrrrr  6  18414316         jmp     L24
                            14317 
                            14318 ; 147  |        }
                            14319 ; 148  |        break;
                            14320 ; 149  |    case LIION_WAITING_FOR_FINISH:
                            14321 ; 150  |#ifdef STMP_BUILD_PLAYER
                            14322 ; 151  |        if(GetTime() > g_dwLiIonTimeOut)
                            14323 
P:0053 0BF080 rrrrrr  6  19014325 L23:    jsr     FGetTime
P:0055 5FF000 rrrrrr  3  19314326         move    y:Fg_dwLiIonTimeOut+1,b
P:0057 59F000 rrrrrr  3  19614327         move    y:Fg_dwLiIonTimeOut,b0
P:0059 2B0000         2  19814328         move    #0,b2
P:005A 2A0000         2  20014329         move    #0,a2
P:005B 200005         2  20214330         cmp     b,a
P:005C 0AF0AF rrrrrr  6  20814331         jle     L26
                            14332 
                            14333 ; 152  |#else
                            14334 ; 153  |        if( g_ChargeTimes > MAX_CHARGE_TIMES )
                            14335 ; 154  |#endif
                            14336 ; 155  |        {
                            14337 ; 156  |            g_LiIonState = LIION_CHARGED;
                            14338 
P:005E 44F400 000004  3  21114340         move    #>4,x0
P:0060 4C7000 rrrrrr  3  21414341         move    x0,y:Fg_LiIonState
                            14342 
                            14343 ; 157  |            BatteryChargeDisableCharging(FALSE);
                            14344 
P:0062 200013         2  21614346         clr     a   
P:0063 0BF080 rrrrrr  6  22214347         jsr     FBatteryChargeDisableCharging
                            14348 
                            14349 ; 158  |        }
                            14350 
P:0065 0AF080 rrrrrr  6  22814352         jmp     L31
P:0067 2D0300         2  23014354 L24:    move    #3,b1
P:0068 5D7000 rrrrrr  3  23314355         move    b1,y:Fg_LiIonState
P:006A 0BF080 rrrrrr  6  23914357         jsr     FGetTime
P:006C 250000         2  24114358         move    #0,x1
P:006D 44F400 0DBBA0  3  24414359         move    #900000,x0
P:006F 200020         2  24614360         add     x,a
P:0070 5C7000 rrrrrr  3  24914361         move    a1,y:Fg_dwLiIonTimeOut+1
P:0072 587000 rrrrrr  3  25214362         move    a0,y:Fg_dwLiIonTimeOut
                            14363 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 244

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14364 ; 159  |        else
                            14365 ; 160  |        {
                            14366 ; 161  |            wCurrentLimit = LIION_CHARGING_CURRENT_LIMIT;
                            14367 
P:0074 57F400 000190  3  25514369 L26:    move    #400,b
P:0076 045FA0         2  25714372         movec   m0,n7
P:0077 000000         2  25914373         nop
P:0078 5D6F00         4  26314374         move    b1,y:(r7+n7)
                            14377 
                            14378 ; 162  |
                            14379 ; 163  |        }
                            14380 ; 164  |        break;
                            14381 ; 165  |    }
                            14382 ; 166  |    return wCurrentLimit;
                            14383 
P:0079 045FA0         2  26514385 L31:    movec   m0,n7
P:007A 000000         2  26714386         nop
P:007B 5EEF00         4  27114387         move    y:(r7+n7),a
                            14390 
                            14391 ; 167  |}
                            14392 
P:007C 204F00         2  27314394         move    (r7)+n7
P:007D 05FF7C         4  27714396         movec   y:-(r7),ssh
P:007E 000000         2  27914399         nop
P:007F 00000C         4  28314400         rts
                            14403 
                            14404 ; 168  |
                            14405 ; 169  |#ifdef MTP_BUILD                               
                            14406 ; 170  |#ifdef FUNCLET
                            14407 ; 171  |    #pragma asm
                            14408 ; 172  |        ;The name of the following counter is the concatenation of the string ;".ptext" an
                                  d the name of the C source file.
                            14409 ; 173  |        org p,".ptextliion":
                            14410 ; 174  |   #pragma endasm
                            14411 ; 175  |#endif
                            14412 ; 176  |#endif
                            14413 ; 177  |
                            14414 ; 178  |
                            14415 ; 179  |/////////////////////////////////////////////////////////////////////////////////////////
                            14416 ; 180  |//
                            14417 ; 181  |//>  Name:          BatteryChargeImplementationInitialize
                            14418 ; 182  |//
                            14419 ; 183  |//   Type:          Function 
                            14420 ; 184  |//
                            14421 ; 185  |//   Description:   Initialize whatever state machine variables are required.  
                            14422 ; 186  |//
                            14423 ; 187  |//   Inputs:        none
                            14424 ; 188  |//
                            14425 ; 189  |//   Outputs:       current limit in milliamps
                            14426 ; 190  |//
                            14427 ; 191  |//   Notes:         
                            14428 ; 192  |//<
                            14429 ; 193  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                            14430 ; 194  |#ifdef MTP_BUILD                               
                            14431 ; 195  |#ifdef FUNCLET
                            14432 ; 196  |    #pragma asm
                            14433 ; 197  |        FBatteryChargeImplementationInitialize:
                            14434 ; 198  |
                            14435 ; 199  |        nolist
                            14436 ; 200  |        include "sysmacro.asm"
                            14437 ; 201  |        include "resource.inc"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 245

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14438 ; 202  |        list
                            14439 ; 203  |
                            14440 ; 204  |        ;If using funclet, function will be executed via funclet kernel
                            14441 ; 205  |        CallFunclet RSRC_FUNCLET_BATTERYCHARGEIMPLEMENTATIONINITIALIZE
                            14442 ; 206  |
                            14443 ; 207  |        org p,"SYSFUNCLET_BatteryChargeImplementationInitialize_P":
                            14444 ; 208  |        dc      RSRC_FUNCLET_BATTERYCHARGEIMPLEMENTATIONINITIALIZE
                            14445 ; 209  |    #pragma endasm
                            14446 ; 210  |_reentrant WORD BatteryChargeImplementationInitialize_Funclet(void)
                            14447 ; 211  |#else
                            14448 ; 212  |_reentrant WORD BatteryChargeImplementationInitialize(void)
                            14449 ; 213  |#endif    
                            14450 ; 214  |#else   // Non-MTP Build
                            14451 ; 215  |_reentrant WORD BatteryChargeImplementationInitialize(void)
                            14452 ; 216  |#endif
                            14453 ; 217  |{
                            14454 
                            14459 FBatteryChargeImplementationInitialize:
P:0080 055F7C         2  28514460         movec   ssh,y:(r7)+
                            14465 
                            14466 ; 218  |    WORD wVBatt_mV;
                            14467 ; 219  |    
                            14468 ; 220  |    BatteryChargeImplementationSample(FALSE);
                            14469 
P:0081 200013         2  28714471         clr     a   
P:0082 0BF080 rrrrrr  6  29314472         jsr     FBatteryChargeImplementationSample
                            14473 
                            14474 ; 221  |    wVBatt_mV = g_wVBatt_mV_NotCharging;
                            14475 
P:0084 5FF000 rrrrrr  3  29614477         move    y:Fg_wVBatt_mV_NotCharging,b
                            14479 
                            14480 ; 222  |    if(wVBatt_mV > LIION_CONDITIONING_VOLTAGE_THRESHHOLD)
                            14481 
P:0086 45F400 000BB8  3  29914483         move    #3000,x1
P:0088 2B0000         2  30114484         move    #0,b2
P:0089 20006D         2  30314485         cmp     x1,b
P:008A 0AF0AF rrrrrr  6  30914486         jle     L32
                            14487 
                            14488 ; 223  |    {//Are we above the 'conditioning' voltage?
                            14489 ; 224  |        g_LiIonState = LIION_CHARGING;
                            14490 
P:008C 56F400 000002  3  31214492         move    #>2,a
P:008E 5C7000 rrrrrr  3  31514493         move    a1,y:Fg_LiIonState
                            14494 
                            14495 ; 225  |    } 
                            14496 
P:0090 0AF080 rrrrrr  6  32114498         jmp     L33
                            14499 
                            14500 ; 226  |    else
                            14501 ; 227  |    {   //lets condition.
                            14502 ; 228  |        g_LiIonState = LIION_CONDITIONING;
                            14503 
P:0092 47F400 000001  3  32414505 L32:    move    #>1,y1
P:0094 4F7000 rrrrrr  3  32714506         move    y1,y:Fg_LiIonState
                            14507 
                            14508 ; 229  |    }
                            14509 ; 230  |#if (LIION_BATTERY_VOLTAGE == LIION_BATTERY_VOLTAGE_4_1)
                            14510 ; 231  |    HW_VDD5V_PWR_CHARGE.B.LI_TYPE=1
                            14511 ; 232  |#endif 
                            14512 ; 233  |    g_dwLiIonTimeOut = GetTime() + LIION_CHARGING_TIMEOUT;
                            14513 
P:0096 0BF080 rrrrrr  6  33314515 L33:    jsr     FGetTime
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 246

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0098 250000         2  33514517         move    #0,x1
P:0099 44F400 DBBA00  3  33814518         move    #$DBBA00,x0
P:009B 200020         2  34014519         add     x,a
P:009C 5C7000 rrrrrr  3  34314520         move    a1,y:Fg_dwLiIonTimeOut+1
P:009E 587000 rrrrrr  3  34614521         move    a0,y:Fg_dwLiIonTimeOut
                            14522 
                            14523 ; 234  |
                            14524 ; 235  |#ifndef STMP_BUILD_PLAYER
                            14525 ; 236  |    g_ChargeTimes=0;
                            14526 ; 237  |#endif
                            14527 ; 238  |
                            14528 ; 239  |    return SUCCESS;
                            14529 
P:00A0 200013         2  34814531         clr     a   
                            14532 
                            14533 ; 240  |}
                            14534 
P:00A1 05FF7C         4  35214536         movec   y:-(r7),ssh
P:00A2 000000         2  35414539         nop
P:00A3 00000C         4  35814540         rts
                            14542 
                            14543 ; 241  |
                            14544 ; 242  |#ifdef MTP_BUILD                               
                            14545 ; 243  |#ifdef FUNCLET
                            14546 ; 244  |    #pragma asm
                            14547 ; 245  |        ;The name of the following counter is the concatenation of the string ;".ptext" an
                                  d the name of the C source file.
                            14548 ; 246  |        org p,".ptextliion":
                            14549 ; 247  |   #pragma endasm
                            14550 ; 248  |#endif
                            14551 ; 249  |#endif
                            14552 ; 250  |
                            14553 ; 251  |
                            14554 ; 252  |/////////////////////////////////////////////////////////////////////////////////////////
                            14555 ; 253  |//
                            14556 ; 254  |//>  Name:          BatteryChargeImplementationSample
                            14557 ; 255  |//
                            14558 ; 256  |//   Type:          Function 
                            14559 ; 257  |//
                            14560 ; 258  |//   Description:   Samples the required bits   
                            14561 ; 259  |//
                            14562 ; 260  |//   Inputs:        none
                            14563 ; 261  |//
                            14564 ; 262  |//   Outputs:       current limit in milliamps
                            14565 ; 263  |//
                            14566 ; 264  |//   Notes:         
                            14567 ; 265  |//<
                            14568 ; 266  |/////////////////////////////////////////////////////////////////////////////////////////
                            14569 ; 267  |#ifdef MTP_BUILD                               
                            14570 ; 268  |#ifdef FUNCLET
                            14571 ; 269  |    #pragma asm
                            14572 ; 270  |        FBatteryChargeImplementationSample:
                            14573 ; 271  |
                            14574 ; 272  |        nolist
                            14575 ; 273  |        include "sysmacro.asm"
                            14576 ; 274  |        include "resource.inc"
                            14577 ; 275  |        list
                            14578 ; 276  |
                            14579 ; 277  |        ;If using funclet, function will be executed via funclet kernel
                            14580 ; 278  |        CallFunclet RSRC_FUNCLET_BATTERYCHARGEIMPLEMENTATIONSAMPLE
                            14581 ; 279  |
                            14582 ; 280  |        org p,"SYSFUNCLET_BatteryChargeImplementationSample_P":
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 247

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14583 ; 281  |        dc      RSRC_FUNCLET_BATTERYCHARGEIMPLEMENTATIONSAMPLE
                            14584 ; 282  |    #pragma endasm
                            14585 ; 283  |_reentrant void BatteryChargeImplementationSample_Funclet(BOOL bCharging)
                            14586 ; 284  |#else
                            14587 ; 285  |_reentrant void BatteryChargeImplementationSample(BOOL bCharging)
                            14588 ; 286  |#endif    
                            14589 ; 287  |#else   // Non-MTP Build
                            14590 ; 288  |_reentrant void BatteryChargeImplementationSample(BOOL bCharging)
                            14591 ; 289  |#endif
                            14592 ; 290  |{
                            14593 
                            14598 FBatteryChargeImplementationSample:
P:00A4 055F7C         2  36014599         movec   ssh,y:(r7)+
P:00A5 205F00         2  36214602         move    (r7)+
                            14608 
                            14609 ; 291  |    WORD mVBatt_mV=SysLowResolutionAdcReadVolt(BATT,FALSE);
                            14610 
P:00A6 045FA0         2  36414612         movec   m0,n7
P:00A7 000000         2  36614613         nop
P:00A8 5C6F00         4  37014614         move    a1,y:(r7+n7)
P:00A9 200013         2  37214617         clr     a   
P:00AA 20001B         2  37414618         clr     b   
P:00AB 0BF080 rrrrrr  6  38014619         jsr     FSysLowResolutionAdcReadVolt
                            14621 
                            14622 ; 292  |    if(bCharging)
                            14623 
P:00AD 045FA0         2  38214625         movec   m0,n7
P:00AE 000000         2  38414626         nop
P:00AF 5FEF00         4  38814627         move    y:(r7+n7),b
P:00B0 2B0000         2  39014628         move    #0,b2
P:00B1 20000B         2  39214629         tst     b
P:00B2 0AF0AA rrrrrr  6  39814632         jeq     L34
                            14633 
                            14634 ; 293  |        g_wVBatt_mV_Charging    = mVBatt_mV;
                            14635 
P:00B4 5C7000 rrrrrr  3  40114637         move    a1,y:Fg_wVBatt_mV_Charging
P:00B6 0AF080 rrrrrr  6  40714638         jmp     L37
                            14639 
                            14640 ; 294  |    else
                            14641 ; 295  |    {
                            14642 ; 296  |        g_wVBatt_mV_NotCharging = mVBatt_mV;
                            14643 
P:00B8 5C7000 rrrrrr  3  41014645 L34:    move    a1,y:Fg_wVBatt_mV_NotCharging
                            14646 
                            14647 ; 297  |        if((g_wVBatt_mV_Charging - g_wVBatt_mV_NotCharging) <= LIION_CHARGING_DIFFERENTIAL
                                  _THRESHHOLD)
                            14648 
P:00BA 5FF000 rrrrrr  3  41314650         move    y:Fg_wVBatt_mV_Charging,b
P:00BC 20001C         2  41514652         sub     a,b
P:00BD 56F400 000014  3  41814653         move    #>20,a
P:00BF 2B0000         2  42014654         move    #0,b2
P:00C0 20000D         2  42214655         cmp     a,b
P:00C1 0AF0A7 rrrrrr  6  42814657         jgt     L35
                            14658 
                            14659 ; 298  |            g_iThreshholdcount++;
                            14660 
P:00C3 5EF000 rrrrrr  3  43114662         move    y:Fg_iThreshholdcount,a
P:00C5 46F400 000001  3  43414663         move    #>1,y0
P:00C7 200050         2  43614664         add     y0,a
P:00C8 5C7000 rrrrrr  3  43914665         move    a1,y:Fg_iThreshholdcount
P:00CA 0AF080 rrrrrr  6  44514666         jmp     L37
                            14667 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 248

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14668 ; 299  |        else
                            14669 ; 300  |            g_iThreshholdcount = 0;
                            14670 
P:00CC 270000         2  44714672 L35:    move    #0,y1
P:00CD 4F7000 rrrrrr  3  45014673         move    y1,y:Fg_iThreshholdcount
                            14674 
                            14675 ; 301  |    }
                            14676 
                            14678 L37:
                            14679 
                            14680 ; 302  |
                            14681 ; 303  |    
                            14682 ; 304  |}
                            14683 
P:00CF 205700         2  45214685         move    (r7)-
P:00D0 05FF7C         4  45614687         movec   y:-(r7),ssh
P:00D1 000000         2  45814690         nop
P:00D2 00000C         4  46214691         rts
                            14693 
                            14694 ; 305  |
                            14695 ; 306  |#ifdef MTP_BUILD                               
                            14696 ; 307  |#ifdef FUNCLET
                            14697 ; 308  |    #pragma asm
                            14698 ; 309  |        ;The name of the following counter is the concatenation of the string ;".ptext" an
                                  d the name of the C source file.
                            14699 ; 310  |        org p,".ptextliion":
                            14700 ; 311  |   #pragma endasm
                            14701 ; 312  |#endif
                            14702 ; 313  |#endif
                            14703 
                            14711 
                            14712         extern  FBatteryChargeDisableCharging, FGetTime
                            14713         extern  FSysLowResolutionAdcReadVolt
                            14714 
                            14715         global  FBatteryChargeImplementationInitialize
                            14716         global  FBatteryChargeImplementationSample
                            14717         global  FBatteryChargeImplementatonGetCurrentLimit, Fg_LiIonState
                            14718         global  Fg_bTrickleChargingNow, Fg_dwLiIonTimeOut
                            14719         global  Fg_iThreshholdcount, Fg_wVBatt_mV_Charging
                            14720         global  Fg_wVBatt_mV_NotCharging
                            14721 
                            14722         local   Fdo_nothing, L19, L20, L21, L22, L23, L24, L26, L31, L32
                            14723         local   L33, L34, L35, L37
                            14724 
                            14725         calls   "BatteryChargeImplementationInitialize", "BatteryChargeImplementationSample"
                            14726         calls   "BatteryChargeImplementationInitialize", "GetTime"
                            14727         calls   "BatteryChargeImplementationSample", "SysLowResolutionAdcReadVolt"
                            14728         calls   "BatteryChargeImplementatonGetCurrentLimit", "BatteryChargeDisableCharging"
                            14729         calls   "BatteryChargeImplementatonGetCurrentLimit", "GetTime"
                            14730 
