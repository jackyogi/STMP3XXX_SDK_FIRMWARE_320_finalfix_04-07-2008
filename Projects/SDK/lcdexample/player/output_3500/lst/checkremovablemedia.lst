TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfc6cfb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;checkremovablem:
                               96 ; 1    |///////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                               98 ; 3    |//  File        : checkremoveablemedia.c
                               99 ; 4    |// Description : Routine called from main loop to monitor removable media
                              100 ; 5    |///////////////////////////////////////////////////////////////////////////////
                              101 ; 6    |
                              102 ; 7    |
                              103 ; 8    |#include "types.h"
                              104 
                              106 
                              107 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              108 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              109 ; 3    |//
                              110 ; 4    |// Filename: types.h
                              111 ; 5    |// Description: Standard data types
                              112 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              113 ; 7    |
                              114 ; 8    |#ifndef _TYPES_H
                              115 ; 9    |#define _TYPES_H
                              116 ; 10   |
                              117 ; 11   |// TODO:  move this outta here!
                              118 ; 12   |#if !defined(NOERROR)
                              119 ; 13   |#define NOERROR 0
                              120 ; 14   |#define SUCCESS 0
                              121 ; 15   |#endif 
                              122 ; 16   |#if !defined(SUCCESS)
                              123 ; 17   |#define SUCCESS  0
                              124 ; 18   |#endif
                              125 ; 19   |#if !defined(ERROR)
                              126 ; 20   |#define ERROR   -1
                              127 ; 21   |#endif
                              128 ; 22   |#if !defined(FALSE)
                              129 ; 23   |#define FALSE 0
                              130 ; 24   |#endif
                              131 ; 25   |#if !defined(TRUE)
                              132 ; 26   |#define TRUE  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 27   |#endif
                              134 ; 28   |
                              135 ; 29   |#if !defined(NULL)
                              136 ; 30   |#define NULL 0
                              137 ; 31   |#endif
                              138 ; 32   |
                              139 ; 33   |#define MAX_INT     0x7FFFFF
                              140 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              141 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              142 ; 36   |#define MAX_ULONG   (-1) 
                              143 ; 37   |
                              144 ; 38   |#define WORD_SIZE   24              // word size in bits
                              145 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              146 ; 40   |
                              147 ; 41   |
                              148 ; 42   |#define BYTE    unsigned char       // btVarName
                              149 ; 43   |#define CHAR    signed char         // cVarName
                              150 ; 44   |#define USHORT  unsigned short      // usVarName
                              151 ; 45   |#define SHORT   unsigned short      // sVarName
                              152 ; 46   |#define WORD    unsigned int        // wVarName
                              153 ; 47   |#define INT     signed int          // iVarName
                              154 ; 48   |#define DWORD   unsigned long       // dwVarName
                              155 ; 49   |#define LONG    signed long         // lVarName
                              156 ; 50   |#define BOOL    unsigned int        // bVarName
                              157 ; 51   |#define FRACT   _fract              // frVarName
                              158 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              159 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              160 ; 54   |#define FLOAT   float               // fVarName
                              161 ; 55   |#define DBL     double              // dVarName
                              162 ; 56   |#define ENUM    enum                // eVarName
                              163 ; 57   |#define CMX     _complex            // cmxVarName
                              164 ; 58   |typedef WORD UCS3;                   // 
                              165 ; 59   |
                              166 ; 60   |#define UINT16  unsigned short
                              167 ; 61   |#define UINT8   unsigned char   
                              168 ; 62   |#define UINT32  unsigned long
                              169 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              170 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              171 ; 65   |#define WCHAR   UINT16
                              172 ; 66   |
                              173 ; 67   |//UINT128 is 16 bytes or 6 words
                              174 ; 68   |typedef struct UINT128_3500 {   
                              175 ; 69   |    int val[6];     
                              176 ; 70   |} UINT128_3500;
                              177 ; 71   |
                              178 ; 72   |#define UINT128   UINT128_3500
                              179 ; 73   |
                              180 ; 74   |// Little endian word packed byte strings:   
                              181 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              182 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              183 ; 77   |// Little endian word packed byte strings:   
                              184 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              185 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              186 ; 80   |
                              187 ; 81   |// Declare Memory Spaces To Use When Coding
                              188 ; 82   |// A. Sector Buffers
                              189 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              190 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              191 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              192 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              193 
                              195 
                              196 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              197 ; 88   |// B. Media DDI Memory
                              198 ; 89   |#define MEDIA_DDI_MEM _Y
                              199 ; 90   |
                              200 ; 91   |
                              201 ; 92   |
                              202 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              203 ; 94   |// Examples of circular pointers:
                              204 ; 95   |//    INT CIRC cpiVarName
                              205 ; 96   |//    DWORD CIRC cpdwVarName
                              206 ; 97   |
                              207 ; 98   |#define RETCODE INT                 // rcVarName
                              208 ; 99   |
                              209 ; 100  |// generic bitfield structure
                              210 ; 101  |struct Bitfield {
                              211 ; 102  |    unsigned int B0  :1;
                              212 ; 103  |    unsigned int B1  :1;
                              213 ; 104  |    unsigned int B2  :1;
                              214 ; 105  |    unsigned int B3  :1;
                              215 ; 106  |    unsigned int B4  :1;
                              216 ; 107  |    unsigned int B5  :1;
                              217 ; 108  |    unsigned int B6  :1;
                              218 ; 109  |    unsigned int B7  :1;
                              219 ; 110  |    unsigned int B8  :1;
                              220 ; 111  |    unsigned int B9  :1;
                              221 ; 112  |    unsigned int B10 :1;
                              222 ; 113  |    unsigned int B11 :1;
                              223 ; 114  |    unsigned int B12 :1;
                              224 ; 115  |    unsigned int B13 :1;
                              225 ; 116  |    unsigned int B14 :1;
                              226 ; 117  |    unsigned int B15 :1;
                              227 ; 118  |    unsigned int B16 :1;
                              228 ; 119  |    unsigned int B17 :1;
                              229 ; 120  |    unsigned int B18 :1;
                              230 ; 121  |    unsigned int B19 :1;
                              231 ; 122  |    unsigned int B20 :1;
                              232 ; 123  |    unsigned int B21 :1;
                              233 ; 124  |    unsigned int B22 :1;
                              234 ; 125  |    unsigned int B23 :1;
                              235 ; 126  |};
                              236 ; 127  |
                              237 ; 128  |union BitInt {
                              238 ; 129  |        struct Bitfield B;
                              239 ; 130  |        int        I;
                              240 ; 131  |};
                              241 ; 132  |
                              242 ; 133  |#define MAX_MSG_LENGTH 10
                              243 ; 134  |struct CMessage
                              244 ; 135  |{
                              245 ; 136  |        unsigned int m_uLength;
                              246 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              247 ; 138  |};
                              248 ; 139  |
                              249 ; 140  |typedef struct {
                              250 ; 141  |    WORD m_wLength;
                              251 ; 142  |    WORD m_wMessage;
                              252 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              253 ; 144  |} Message;
                              254 ; 145  |
                              255 ; 146  |struct MessageQueueDescriptor
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 147  |{
                              257 ; 148  |        int *m_pBase;
                              258 ; 149  |        int m_iModulo;
                              259 ; 150  |        int m_iSize;
                              260 ; 151  |        int *m_pHead;
                              261 ; 152  |        int *m_pTail;
                              262 ; 153  |};
                              263 ; 154  |
                              264 ; 155  |struct ModuleEntry
                              265 ; 156  |{
                              266 ; 157  |    int m_iSignaledEventMask;
                              267 ; 158  |    int m_iWaitEventMask;
                              268 ; 159  |    int m_iResourceOfCode;
                              269 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              270 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              271 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              272 ; 163  |    int m_uTimeOutHigh;
                              273 ; 164  |    int m_uTimeOutLow;
                              274 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              275 ; 166  |};
                              276 ; 167  |
                              277 ; 168  |union WaitMask{
                              278 ; 169  |    struct B{
                              279 ; 170  |        unsigned int m_bNone     :1;
                              280 ; 171  |        unsigned int m_bMessage  :1;
                              281 ; 172  |        unsigned int m_bTimer    :1;
                              282 ; 173  |        unsigned int m_bButton   :1;
                              283 ; 174  |    } B;
                              284 ; 175  |    int I;
                              285 ; 176  |} ;
                              286 ; 177  |
                              287 ; 178  |
                              288 ; 179  |struct Button {
                              289 ; 180  |        WORD wButtonEvent;
                              290 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              291 ; 182  |};
                              292 ; 183  |
                              293 ; 184  |struct Message {
                              294 ; 185  |        WORD wMsgLength;
                              295 ; 186  |        WORD wMsgCommand;
                              296 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              297 ; 188  |};
                              298 ; 189  |
                              299 ; 190  |union EventTypes {
                              300 ; 191  |        struct CMessage msg;
                              301 ; 192  |        struct Button Button ;
                              302 ; 193  |        struct Message Message;
                              303 ; 194  |};
                              304 ; 195  |
                              305 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              306 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              307 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              308 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              309 ; 200  |
                              310 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              311 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              312 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              313 ; 204  |
                              314 ; 205  |#if DEBUG
                              315 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              316 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              317 ; 208  |#else 
                              318 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              319 ; 210  |#define DebugBuildAssert(x)    
                              320 ; 211  |#endif
                              321 ; 212  |
                              322 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              323 ; 214  |//  #pragma asm
                              324 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              325 ; 216  |//  #pragma endasm
                              326 ; 217  |
                              327 ; 218  |
                              328 ; 219  |#ifdef COLOR_262K
                              329 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              330 ; 221  |#elif defined(COLOR_65K)
                              331 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              332 ; 223  |#else
                              333 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              334 ; 225  |#endif
                              335 ; 226  |    
                              336 ; 227  |#endif // #ifndef _TYPES_H
                              337 
                              339 
                              340 ; 9    |//#include "mediadetection.h"
                              341 ; 10   |#include "messages.h"
                              342 
                              344 
                              345 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              346 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                              347 ; 3    |// Message defs
                              348 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              349 ; 5    |
                              350 ; 6    |#if (!defined(MSGEQU_INC))
                              351 ; 7    |#define MSGEQU_INC 1
                              352 ; 8    |
                              353 ; 9    |
                              354 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                              355 ; 11   |
                              356 ; 12   |
                              357 ; 13   |#define MSG_TYPE_DECODER 0x000000
                              358 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                              359 ; 15   |#define MSG_TYPE_PARSER 0x020000
                              360 ; 16   |#define MSG_TYPE_LCD 0x030000
                              361 ; 17   |#define MSG_TYPE_MIXER 0x040000
                              362 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                              363 ; 19   |#define MSG_TYPE_MENU 0x060000
                              364 ; 20   |#define MSG_TYPE_LED 0x070000
                              365 ; 21   |#define MSG_TYPE_TUNER 0x080000
                              366 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                              367 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                              368 ; 24   |// Equalizer and other effects
                              369 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                              370 ; 26   |#if (defined(USE_PLAYLIST3))
                              371 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                              372 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                              373 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                              374 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                              375 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                              376 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              377 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                              378 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                              379 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                              380 ; 36   |#if defined(USE_PLAYLIST5)
                              381 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                              382 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                              383 ; 39   |#endif // if @def('USE_PLAYLIST5')
                              384 ; 40   |
                              385 ; 41   |// Message Structure Offsets
                              386 ; 42   |#define MSG_Length 0
                              387 ; 43   |#define MSG_ID 1
                              388 ; 44   |#define MSG_Argument1 2
                              389 ; 45   |#define MSG_Argument2 3
                              390 ; 46   |#define MSG_Argument3 4
                              391 ; 47   |#define MSG_Argument4 5
                              392 ; 48   |#define MSG_Argument5 6
                              393 ; 49   |#define MSG_Argument6 7
                              394 ; 50   |
                              395 ; 51   |
                              396 ; 52   |
                              397 ; 53   |// LCD Message IDs
                              398 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                              399 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                              400 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                              401 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                              402 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                              403 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                              404 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                              405 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                              406 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                              407 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                              408 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                              409 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                              410 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                              411 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                              412 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                              413 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                              414 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                              415 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                              416 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                              417 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                              418 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                              419 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                              420 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                              421 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                              422 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                              423 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                              424 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                              425 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                              426 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                              427 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                              428 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                              429 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                              430 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                              431 ; 87   |//send a NULL as Param1 to return to root frame buffer
                              432 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                              433 ; 89   |//Param1 = left
                              434 ; 90   |//Param2 = top
                              435 ; 91   |//Param3 = right
                              436 ; 92   |//Param4 = bottom
                              437 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                              438 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              439 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                              440 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                              441 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                              442 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                              443 ; 99   |
                              444 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                              445 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
                              446 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                              447 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                              448 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                              449 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                              450 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                              451 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                              452 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                              453 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                              454 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                              455 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                              456 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                              457 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                              458 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                              459 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                              460 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                              461 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                              462 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                              463 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                              464 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                              465 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                              466 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                              467 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                              468 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                              469 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                              470 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                              471 ; 127  |
                              472 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                              473 ; 129  |
                              474 ; 130  |#if defined(CLCD_16BIT)
                              475 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                              476 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                              477 ; 133  |
                              478 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                              479 ; 135  |#else 
                              480 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                              481 ; 137  |#endif
                              482 ; 138  |
                              483 ; 139  |// If you change the LCD message ID's then you must
                              484 ; 140  |// also change the jump table in lcdapi.asm
                              485 ; 141  |
                              486 ; 142  |// Character LCD Message IDs
                              487 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                              488 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                              489 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                              490 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                              491 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                              492 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                              493 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                              494 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                              495 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                              496 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                              497 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                              498 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                              499 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                              500 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              501 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                              502 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                              503 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                              504 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                              505 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                              506 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                              507 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                              508 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                              509 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                              510 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                              511 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                              512 ; 168  |// also change the jump table in lcdapi.asm
                              513 ; 169  |
                              514 ; 170  |// Decoder Message IDs
                              515 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                              516 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                              517 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                              518 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                              519 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                              520 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                              521 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                              522 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                              523 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                              524 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                              525 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                              526 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                              527 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                              528 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                              529 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                              530 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                              531 ; 187  |// If you change the Decoder message ID's, then you must
                              532 ; 188  |// also change the jump table in decoder_overlay.asm
                              533 ; 189  |// and in dec_adpcm_overlay.asm.
                              534 ; 190  |
                              535 ; 191  |// Encoder Message IDs
                              536 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                              537 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                              538 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                              539 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                              540 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                              541 ; 197  |// If you change the Encoder message ID's, then you must
                              542 ; 198  |// also change the jump table in all encoder overlay modules.
                              543 ; 199  |
                              544 ; 200  |// Parser Message IDs
                              545 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                              546 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                              547 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                              548 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                              549 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                              550 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                              551 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                              552 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                              553 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                              554 ; 210  |// If you change the Parser message ID's, then you must
                              555 ; 211  |// also change the jump table in parser.asm
                              556 ; 212  |
                              557 ; 213  |// Button Message IDs
                              558 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                              559 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                              560 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                              561 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                              562 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              563 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                              564 ; 220  |
                              565 ; 221  |// Mixer Message IDs
                              566 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                              567 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                              568 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                              569 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                              570 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                              571 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                              572 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                              573 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                              574 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                              575 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                              576 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                              577 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                              578 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                              579 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                              580 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                              581 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                              582 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                              583 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                              584 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                              585 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                              586 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                              587 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                              588 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                              589 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                              590 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                              591 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                              592 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                              593 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                              594 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                              595 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                              596 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                              597 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                              598 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                              599 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                              600 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                              601 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                              602 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                              603 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                              604 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                              605 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                              606 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                              607 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                              608 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                              609 ; 265  |// If you change the mixer message ID's then you must
                              610 ; 266  |// also change the jump table in mixer.asm
                              611 ; 267  |#define MIXER_ON 0
                              612 ; 268  |#define MIXER_OFF 1
                              613 ; 269  |
                              614 ; 270  |
                              615 ; 271  |// System Message IDs
                              616 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                              617 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                              618 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                              619 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                              620 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                              621 ; 277  |// If you change the system message ID's then you must
                              622 ; 278  |// also change the jump table in systemapi.asm
                              623 ; 279  |
                              624 ; 280  |// Menu IDs
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              625 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                              626 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                              627 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                              628 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                              629 ; 285  |//sub parameters for this message:
                              630 ; 286  |#define RECORDER_START 0
                              631 ; 287  |#define RECORDER_PAUSE 0x2000
                              632 ; 288  |#define RECORDER_RESUME 0x4000
                              633 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                              634 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                              635 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                              636 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                              637 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                              638 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                              639 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                              640 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                              641 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                              642 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                              643 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                              644 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                              645 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                              646 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                              647 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                              648 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                              649 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                              650 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                              651 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                              652 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                              653 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                              654 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                              655 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                              656 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                              657 ; 313  |
                              658 ; 314  |// Note that other versions of this file have different msg equates.
                              659 ; 315  |// If you change the system message ID's then you must
                              660 ; 316  |// also change the jump table in all menu *.asm
                              661 ; 317  |
                              662 ; 318  |// LED Message IDs
                              663 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                              664 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                              665 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                              666 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                              667 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                              668 ; 324  |// If you change the LeD message ID's then you must
                              669 ; 325  |// also change the jump table in ledapi.asm
                              670 ; 326  |
                              671 ; 327  |#if (!defined(REMOVE_FM))
                              672 ; 328  |// FM Tuner Message IDs
                              673 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                              674 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                              675 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                              676 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                              677 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                              678 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                              679 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                              680 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                              681 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                              682 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                              683 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                              684 ; 340  |//one parameter--the sensitivity in uV
                              685 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                              686 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              687 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                              688 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                              689 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                              690 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                              691 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                              692 ; 348  |#endif
                              693 ; 349  |
                              694 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                              695 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                              696 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                              697 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                              698 ; 354  |
                              699 ; 355  |
                              700 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                              701 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                              702 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                              703 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                              704 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                              705 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                              706 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                              707 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                              708 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                              709 ; 365  |
                              710 ; 366  |#if (defined(USE_PLAYLIST3))
                              711 ; 367  |// Music Library
                              712 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                              713 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                              714 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                              715 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                              716 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                              717 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                              718 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                              719 ; 375  |
                              720 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                              721 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                              722 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                              723 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                              724 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                              725 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                              726 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                              727 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                              728 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                              729 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                              730 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                              731 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                              732 ; 388  |
                              733 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                              734 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                              735 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                              736 ; 392  |
                              737 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                              738 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                              739 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                              740 ; 396  |
                              741 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                              742 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                              743 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                              744 ; 400  |
                              745 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                              746 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                              747 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                              748 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              749 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                              750 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                              751 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                              752 ; 408  |
                              753 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                              754 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                              755 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                              756 ; 412  |
                              757 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                              758 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                              759 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                              760 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                              761 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                              762 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                              763 ; 419  |
                              764 ; 420  |#if defined(USE_PLAYLIST5)
                              765 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                              766 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                              767 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                              768 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                              769 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                              770 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                              771 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                              772 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                              773 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                              774 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                              775 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                              776 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                              777 ; 433  |
                              778 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                              779 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                              780 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                              781 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                              782 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                              783 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                              784 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                              785 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                              786 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                              787 ; 443  |#endif // if @def('USE_PLAYLIST5')
                              788 ; 444  |// Events
                              789 ; 445  |// No event
                              790 ; 446  |#define EVENT_NONE 0x000001   
                              791 ; 447  |// A message has been posted
                              792 ; 448  |#define EVENT_MESSAGE 0x000002   
                              793 ; 449  |// Run if wait time elapsed
                              794 ; 450  |#define EVENT_TIMER 0x000004   
                              795 ; 451  |// Run if a button event occured
                              796 ; 452  |#define EVENT_BUTTON 0x000008   
                              797 ; 453  |// Run if a background event occured
                              798 ; 454  |#define EVENT_BACKGROUND 0x000010   
                              799 ; 455  |// The executive should immediately repeat this module
                              800 ; 456  |#define EVENT_REPEAT 0x000020   
                              801 ; 457  |// Run the module's init routine
                              802 ; 458  |#define EVENT_INIT 0x800000   
                              803 ; 459  |
                              804 ; 460  |#define EVENT_NONE_BITPOS 0
                              805 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                              806 ; 462  |#define EVENT_TIMER_BITPOS 2
                              807 ; 463  |#define EVENT_BUTTON_BITPOS 3
                              808 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                              809 ; 465  |#define EVENT_REPEAT_BITPOS 5
                              810 ; 466  |#define EVENT_INIT_BITPOS 23
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              811 ; 467  |
                              812 ; 468  |// Parser Message Buffers
                              813 ; 469  |#define ParserPlayBit 0
                              814 ; 470  |#define ButtonPressBit 1
                              815 ; 471  |#define ParserRwndBit 1
                              816 ; 472  |#define ParserFfwdBit 2
                              817 ; 473  |
                              818 ; 474  |//NextSong Message Parameters
                              819 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                              820 ; 476  |#define NEXT_SONG 2             
                              821 ; 477  |// ButtonPressBit1 cleared
                              822 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                              823 ; 479  |// ButtonPressBit1 set
                              824 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                              825 ; 481  |// NextSong + Ffwd
                              826 ; 482  |#define NEXT_SONG_FFWD 4          
                              827 ; 483  |
                              828 ; 484  |//PrevSong Message Parameters
                              829 ; 485  |// PrevSong + Stopped
                              830 ; 486  |#define PREV_SONG 0          
                              831 ; 487  |// PrevSong + Play
                              832 ; 488  |#define PREV_SONG_PLAY 1          
                              833 ; 489  |// PrevSong + Rwnd
                              834 ; 490  |#define PREV_SONG_RWND 2          
                              835 ; 491  |
                              836 ; 492  |
                              837 ; 493  |
                              838 ; 494  |
                              839 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                              840 ; 496  |
                              841 ; 497  |
                              842 
                              844 
                              845 ; 11   |#include "exec.h"  
                              846 
                              848 
                              849 ; 1    |#ifndef EXEC_H
                              850 ; 2    |#define EXEC_H
                              851 ; 3    |
                              852 ; 4    |
                              853 ; 5    |void _reentrant SysPostMessage(int iLength,...);
                              854 ; 6    |int _asmfunc GetMessage(struct MessageQueueDescriptor*,struct CMessage * );
                              855 ; 7    |long _asmfunc SysGetCurrentTime(void);
                              856 ; 8    |
                              857 ; 9    |
                              858 ; 10   |#endif
                              859 
                              861 
                              862 ; 12   |//#include "ddildl.h"
                              863 ; 13   |#include "mmcddi.h"
                              864 
                              866 
                              867 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              868 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                              869 ; 3    |//
                              870 ; 4    |// Filename: MMCDdi.h
                              871 ; 5    |// Description: 
                              872 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              873 ; 7    |
                              874 ; 8    |#ifndef _MMCDDI_H
                              875 ; 9    |#define _MMCDDI_H
                              876 ; 10   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              877 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              878 ; 12   |// Includes
                              879 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              880 ; 14   |
                              881 ; 15   |#include "ddildl_internal.h"
                              882 
                              884 
                              885 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              886 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                              887 ; 3    |//
                              888 ; 4    |// Filename: ddildl_internal.h
                              889 ; 5    |// Description: 
                              890 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              891 ; 7    |#ifndef _DDILDL_INTERNAL_H
                              892 ; 8    |#define _DDILDL_INTERNAL_H
                              893 ; 9    |
                              894 ; 10   |#include "ddildl.h"
                              895 
                              897 
                              898 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              899 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                              900 ; 3    |//
                              901 ; 4    |// Filename: ddildl.h
                              902 ; 5    |// Description: 
                              903 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              904 ; 7    |
                              905 ; 8    |#ifndef _DDILDL_H
                              906 ; 9    |#define _DDILDL_H
                              907 ; 10   |
                              908 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              909 ; 12   |// Includes
                              910 ; 13   |///////////////////////////////////////////////////////////////////////////////
                              911 ; 14   |
                              912 ; 15   |///////////////////////////////////////////////////////////////////////////////
                              913 ; 16   |// Definitions
                              914 ; 17   |///////////////////////////////////////////////////////////////////////////////
                              915 ; 18   |// version before march 11 2005 
                              916 ; 19   |//#ifdef PLAYER_BUILD
                              917 ; 20   |//#define MAX_MEDIA_TABLE_ENTRIES                12
                              918 ; 21   |//#else
                              919 ; 22   |//#define MAX_MEDIA_TABLE_ENTRIES                14
                              920 ; 23   |//#endif
                              921 ; 24   |// Mar 14 2007: Only requires the maximum number of drives in one media
                              922 ; 25   |// NAND:(2 data drives + 9 system drives + 1 extra system drive in future) = 12
                              923 ; 26   |#define MAX_MEDIA_TABLE_ENTRIES                12
                              924 ; 27   |
                              925 ; 28   |#define MAX_LOGICAL_MEDIA                       2
                              926 ; 29   |
                              927 ; 30   |//
                              928 ; 31   |// WARNING
                              929 ; 32   |// The maximum number of drives needed for player, mtp and usbmsc 
                              930 ; 33   |// builds is currently the player build which has the largest number of drives = 12(NAND)+
                                  1(MMC).
                              931 ; 34   |// Private lib references to this change to use a ddiproject global that's init per projec
                                  t 
                              932 ; 35   |// instead so those plib references are no longer fixed at lib compile time. March 1 2005
                              933 ; 36   |#ifdef PLAYER_BUILD
                              934 ; 37   |#define MAX_LOGICAL_DRIVES                      13
                              935 ; 38   |#else // MTP_BUILD & USBMSC/updater need support for the ram drive used in msc
                              936 ; 39   |/********************************************************************************
                              937 ; 40   | * We have to define 2 more than the actually size for usbmsc case
                              938 ; 41   | * We have totally 9 system drives, 3 data drives, 1 extra system drive in future, 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              939 ; 42   | * so the total number is 13. The max will be 13 + 2 = 15
                              940 ; 43   | ********************************************************************************/
                              941 ; 44   |#define MAX_LOGICAL_DRIVES                      15
                              942 ; 45   |#endif
                              943 ; 46   |
                              944 ; 47   |#define DDI_MAGIC_NUMBER                        0xADEADE
                              945 ; 48   |
                              946 ; 49   |///////////////////////////////////////////////////////////////////////////////
                              947 ; 50   |// Error codes
                              948 ; 51   |///////////////////////////////////////////////////////////////////////////////
                              949 ; 52   |
                              950 ; 53   |#include "errors.h"
                              951 
                              953 
                              954 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              955 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                              956 ; 3    |////
                              957 ; 4    |//// Filename: errors.inc
                              958 ; 5    |//// Description: 
                              959 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                              960 ; 7    |
                              961 ; 8    |#if (!defined(ERRORS_INC))
                              962 ; 9    |#define ERRORS_INC 1
                              963 ; 10   |
                              964 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                              965 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                              966 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                              967 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                              968 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                              969 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                              970 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                              971 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                              972 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                              973 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                              974 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                              975 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                              976 ; 23   |// block in the device. The block was marked bad and tables updated.
                              977 ; 24   |// The application must start over.
                              978 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                              979 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                              980 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                              981 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                              982 ; 29   |
                              983 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                              984 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                              985 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                              986 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                              987 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                              988 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                              989 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                              990 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                              991 ; 38   |//Specific to NAND
                              992 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                              993 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                              994 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                              995 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                              996 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                              997 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                              998 ; 45   |
                              999 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                             1000 ; 47   |
                             1001 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1002 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                             1003 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                             1004 ; 51   |
                             1005 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                             1006 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                             1007 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                             1008 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                             1009 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                             1010 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                             1011 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                             1012 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                             1013 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                             1014 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                             1015 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                             1016 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                             1017 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                             1018 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                             1019 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                             1020 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                             1021 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                             1022 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                             1023 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                             1024 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                             1025 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                             1026 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                             1027 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                             1028 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                             1029 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                             1030 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                             1031 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                             1032 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                             1033 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                             1034 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                             1035 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                             1036 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                             1037 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                             1038 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                             1039 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                             1040 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                             1041 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                             1042 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                             1043 ; 90   |
                             1044 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                             1045 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                             1046 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                             1047 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                             1048 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                             1049 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                             1050 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                             1051 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                             1052 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                             1053 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                             1054 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                             1055 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                             1056 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                             1057 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                             1058 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                             1059 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                             1060 ; 107  |
                             1061 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                             1062 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                             1063 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1064 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                             1065 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                             1066 ; 113  |
                             1067 ; 114  |// indicates that during the NandHalInit, the NandType did not
                             1068 ; 115  |// match the previously initialized Nand chip type.
                             1069 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                             1070 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                             1071 ; 118  |// Errors from calling HIL functions
                             1072 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                             1073 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                             1074 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                             1075 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                             1076 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                             1077 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                             1078 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                             1079 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                             1080 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                             1081 ; 128  |// for 3410 build
                             1082 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                             1083 ; 130  |// for 3410 build
                             1084 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                             1085 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                             1086 ; 133  |
                             1087 ; 134  |// indicates that the GetStatus returned a FAIL
                             1088 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                             1089 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                             1090 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                             1091 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                             1092 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                             1093 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                             1094 ; 141  |// indicates the NAND was already BUSY
                             1095 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                             1096 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                             1097 ; 144  |// ECC Error Codes
                             1098 ; 145  |// ECC Computation has successfully completed
                             1099 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                             1100 ; 147  |// ECC computation still busy
                             1101 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                             1102 ; 149  |// timed out while waiting on object
                             1103 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                             1104 ; 151  |// flag already set for SDK2.4 lock
                             1105 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                             1106 ; 153  |
                             1107 ; 154  |#define NANDHAL_ECC_NOERROR 0
                             1108 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                             1109 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                             1110 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                             1111 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                             1112 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                             1113 ; 160  |
                             1114 ; 161  |// MMC Errors
                             1115 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                             1116 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                             1117 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                             1118 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                             1119 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                             1120 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                             1121 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                             1122 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                             1123 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                             1124 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                             1125 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1126 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                             1127 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                             1128 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                             1129 ; 176  |
                             1130 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                             1131 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                             1132 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                             1133 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                             1134 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                             1135 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                             1136 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                             1137 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                             1138 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                             1139 ; 186  |
                             1140 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             1141 ; 188  |//// MMC HAL Error codes
                             1142 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                             1143 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                             1144 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                             1145 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                             1146 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                             1147 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                             1148 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                             1149 ; 196  |
                             1150 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                             1151 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                             1152 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                             1153 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                             1154 ; 201  |
                             1155 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                             1156 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                             1157 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                             1158 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                             1159 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                             1160 ; 207  |
                             1161 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                             1162 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                             1163 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                             1164 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                             1165 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                             1166 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                             1167 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                             1168 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                             1169 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                             1170 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                             1171 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                             1172 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                             1173 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                             1174 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                             1175 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                             1176 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                             1177 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                             1178 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                             1179 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                             1180 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                             1181 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                             1182 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                             1183 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                             1184 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                             1185 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                             1186 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                             1187 ; 234  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1188 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                             1189 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                             1190 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                             1191 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                             1192 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                             1193 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                             1194 ; 241  |
                             1195 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                             1196 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                             1197 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                             1198 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                             1199 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                             1200 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                             1201 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                             1202 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                             1203 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                             1204 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                             1205 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                             1206 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                             1207 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                             1208 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                             1209 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                             1210 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                             1211 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                             1212 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                             1213 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                             1214 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                             1215 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                             1216 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                             1217 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                             1218 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                             1219 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                             1220 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                             1221 ; 268  |
                             1222 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                             1223 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                             1224 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                             1225 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                             1226 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                             1227 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                             1228 ; 275  |
                             1229 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                             1230 ; 277  |//MATH errors...
                             1231 ; 278  |#define ERRZeroDivide 0x7FFFFF
                             1232 ; 279  |
                             1233 ; 280  |//Memory Pointer errors...
                             1234 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                             1235 ; 282  |//****************************************************************/
                             1236 ; 283  |#if (!defined(NOERROR))
                             1237 ; 284  |#define NOERROR 0
                             1238 ; 285  |#endif
                             1239 ; 286  |
                             1240 ; 287  |////Added by RAKS
                             1241 ; 288  |
                             1242 ; 289  |#define ERRProgram 0x911111
                             1243 ; 290  |#define ERRNoMedia 0x922222
                             1244 ; 291  |#define ERRHwFail 0x933333   
                             1245 ; 292  |#define ERRInvMedia 0x944444
                             1246 ; 293  |#define ERRBlkFail 0x955555
                             1247 ; 294  |#define ERRInvDataStatus 0x966666
                             1248 ; 295  |#define ERRWriteFail 0x977777
                             1249 ; 296  |#define ERRECCCorr 0x988888
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1250 ; 297  |#define ERRECCFail 0x999999
                             1251 ; 298  |#define ERRZoneFull 0x9aaaaa
                             1252 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                             1253 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                             1254 ; 301  |//invalid partition table signature. 
                             1255 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                             1256 ; 303  |//boot ID bad
                             1257 ; 304  |#define ERRBootID 0x9BBBBB   
                             1258 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                             1259 ; 306  |////Nothing was here : RAKS
                             1260 ; 307  |//JUMP instruction bad
                             1261 ; 308  |#define ERRBootJump 0x9DDDDD  
                             1262 ; 309  |//ID Byte bad
                             1263 ; 310  |#define ERRIDByte 0x9EEEEE  
                             1264 ; 311  |
                             1265 ; 312  |
                             1266 ; 313  |//****************************************************************
                             1267 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                             1268 ; 315  |//****************************************************************
                             1269 ; 316  |// Master ERROR File
                             1270 ; 317  |//****************************************************************/
                             1271 ; 318  |// FAT File System Error Codes
                             1272 ; 319  |// corrupt FAT
                             1273 ; 320  |#define FATCorrupt -1        
                             1274 ; 321  |// invalid FAT sector
                             1275 ; 322  |#define DIRInvlaidSector -2        
                             1276 ; 323  |
                             1277 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                             1278 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                             1279 ; 326  |#define FATwarningReservedCx 0x0A1111
                             1280 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                             1281 ; 328  |//FATcxsFree==0 
                             1282 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                             1283 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                             1284 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                             1285 ; 332  |
                             1286 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                             1287 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                             1288 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                             1289 ; 336  |
                             1290 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                             1291 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                             1292 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                             1293 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                             1294 ; 341  |//No Free Cxs on FAT Scan!
                             1295 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                             1296 ; 343  |
                             1297 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                             1298 ; 345  |
                             1299 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                             1300 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                             1301 ; 348  |
                             1302 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                             1303 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                             1304 ; 351  |
                             1305 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                             1306 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                             1307 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                             1308 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                             1309 ; 356  |
                             1310 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                             1311 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1312 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                             1313 ; 360  |
                             1314 ; 361  |#define SEEKprefix 0x85
                             1315 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                             1316 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                             1317 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                             1318 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                             1319 ; 366  |
                             1320 ; 367  |#define READprefix 0x86
                             1321 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                             1322 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                             1323 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                             1324 ; 371  |#define READerrorAccessDenied 0x86ADAD
                             1325 ; 372  |#define READerrorFreeCx 0x860000
                             1326 ; 373  |#define READerrorEndOfChain 0x861111
                             1327 ; 374  |#define READerrorReservedCx 0x862222
                             1328 ; 375  |#define READerrorBadCx 0x863333
                             1329 ; 376  |
                             1330 ; 377  |#define WRITEprefix 0x87
                             1331 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                             1332 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                             1333 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                             1334 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                             1335 ; 382  |#define WRITEerrorFreeCx 0x870000
                             1336 ; 383  |#define WRITEerrorEndOfChain 0x871111
                             1337 ; 384  |#define WRITEerrorReservedCx 0x872222
                             1338 ; 385  |#define WRITEerrorBadCx 0x873333
                             1339 ; 386  |
                             1340 ; 387  |#define UTILprefix 0x88
                             1341 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                             1342 ; 389  |
                             1343 ; 390  |// Directory Error Codes
                             1344 ; 391  |
                             1345 ; 392  |// invalid DIR sector specified
                             1346 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                             1347 ; 394  |// PATH search string has invlaid directory
                             1348 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                             1349 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                             1350 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                             1351 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                             1352 ; 399  |// Bad cluster number
                             1353 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                             1354 ; 401  |// Can't open ROOT
                             1355 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                             1356 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                             1357 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                             1358 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                             1359 ; 406  |// bad record number to read
                             1360 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                             1361 ; 408  |// record requeste not in range
                             1362 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                             1363 ; 410  |// record requeste past end of ROOT
                             1364 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                             1365 ; 412  |// device number invalid
                             1366 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                             1367 ; 414  |// FCB Does not popint to a sub-Directory entry
                             1368 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                             1369 ; 416  |// Path specified is invalid
                             1370 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                             1371 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                             1372 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                             1373 ; 420  |#define ERR_DISK_FULL 0xACCCCC
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1374 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                             1375 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                             1376 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                             1377 ; 424  |
                             1378 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                             1379 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                             1380 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                             1381 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                             1382 ; 429  |// String Manipulation Error Codes
                             1383 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                             1384 ; 431  |
                             1385 ; 432  |#endif //@DEF(ERRORS_INC)
                             1386 ; 433  |
                             1387 
                             1389 
                             1390 ; 54   |
                             1391 ; 55   |///////////////////////////////////////////////////////////////////////////////
                             1392 ; 56   |// Typedefs
                             1393 ; 57   |///////////////////////////////////////////////////////////////////////////////
                             1394 ; 58   |
                             1395 ; 59   |typedef void (*MULTI_WRITE_CALLBACK_FUNCTION)(LONG lValue);
                             1396 ; 60   |
                             1397 ; 61   |#include "ddildl\ddildl_defs.h"
                             1398 
                             1400 
                             1401 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1402 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             1403 ; 3    |//
                             1404 ; 4    |// Filename: ddildl_defs.h
                             1405 ; 5    |// Description: 
                             1406 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1407 ; 7    |
                             1408 ; 8    |#ifndef _DDILDL_DEFS_H
                             1409 ; 9    |#define _DDILDL_DEFS_H
                             1410 ; 10   |
                             1411 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1412 ; 12   |// Typedefs
                             1413 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1414 ; 14   |
                             1415 ; 15   |typedef enum {
                             1416 ; 16   |  MediaStateUnknown,
                             1417 ; 17   |  MediaStateErased,
                             1418 ; 18   |  MediaStateAllocated
                             1419 ; 19   |} MEDIA_STATE, * P_MEDIA_STATE;
                             1420 ; 20   |
                             1421 ; 21   |typedef enum {
                             1422 ; 22   |    MediaTypeNand = 0,
                             1423 ; 23   |    MediaTypeMMC = 1,
                             1424 ; 24   |    MediaTypeHDD = 2,
                             1425 ; 25   |    MediaTypeRAM = 3
                             1426 ; 26   |} PHYSICAL_MEDIA_TYPE, * P_PHYSICAL_MEDIA_TYPE;
                             1427 ; 27   |
                             1428 ; 28   |typedef enum {
                             1429 ; 29   |    MediaInfoNumberOfDrives = 0,
                             1430 ; 30   |    MediaInfoSizeInBytes = 1,
                             1431 ; 31   |    MediaInfoAllocationUnitSizeInBytes = 2,
                             1432 ; 32   |    MediaInfoIsInitialized = 3,
                             1433 ; 33   |    MediaInfoMediaState = 4,
                             1434 ; 34   |    MediaInfoIsWriteProtected = 5,
                             1435 ; 35   |    MediaInfoPhysicalMediaType = 6,
                             1436 ; 36   |    MediaInfoSizeOfSerialNumberInBytes = 7,
                             1437 ; 37   |    MediaInfoSerialNumber = 8,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1438 ; 38   |    MediaInfoIsSystemMedia = 9,
                             1439 ; 39   |    MediaInfoIsMediaPresent = 10
                             1440 ; 40   |} LOGICAL_MEDIA_INFO, * P_LOGICAL_MEDIA_INFO;
                             1441 ; 41   |
                             1442 ; 42   |#ifdef MFG_TOOL
                             1443 ; 43   |  
                             1444 ; 44   |typedef enum {
                             1445 ; 45   |    SerialNoInfoSizeOfSerialNumberInBytes = 0,
                             1446 ; 46   |    SerialNoInfoSerialNumber = 1
                             1447 ; 47   |} SERIAL_NO_INFO, * P_SERIAL_NO_INFO;
                             1448 ; 48   |#endif
                             1449 ; 49   |
                             1450 ; 50   |typedef enum {
                             1451 ; 51   |    DriveInfoSectorSizeInBytes = 0,
                             1452 ; 52   |    DriveInfoEraseSizeInBytes = 1,
                             1453 ; 53   |    DriveInfoSizeInBytes = 2,
                             1454 ; 54   |    DriveInfoSizeInMegaBytes = 3,
                             1455 ; 55   |    DriveInfoSizeInSectors = 4,
                             1456 ; 56   |    DriveInfoType = 5,
                             1457 ; 57   |    DriveInfoTag = 6,
                             1458 ; 58   |    DriveInfoComponentVersion = 7,
                             1459 ; 59   |    DriveInfoProjectVersion = 8,
                             1460 ; 60   |    DriveInfoIsWriteProtected = 9,
                             1461 ; 61   |    DriveInfoSizeOfSerialNumberInBytes = 10,
                             1462 ; 62   |    DriveInfoSerialNumber = 11,
                             1463 ; 63   |    DriveInfoMediaPresent = 12,
                             1464 ; 64   |    DriveInfoMediaChange = 13,
                             1465 ; 65   |    DriveInfoSectorAllocation = 14
                             1466 ; 66   |} LOGICAL_DRIVE_INFO, * P_LOGICAL_DRIVE_INFO;
                             1467 ; 67   |
                             1468 ; 68   |#define DRIVE_TAG_STMPSYS_S         0x00        //!< player drive tag.
                             1469 ; 69   |#define DRIVE_TAG_HOSTLINK_S        0x01        //!< UsbMscMtp drive tag, old name was DRI
                                  VE_TAG_USBMSC_S. 
                             1470 ; 70   |#define DRIVE_TAG_RESOURCE_BIN      0x02        //!< player resource drive tag.
                             1471 ; 71   |#define DRIVE_TAG_EXTRA_S           0x03        //!< the host has 0x03 reserved for an ext
                                  ra system drive.
                             1472 ; 72   |// if you change line below, also change this equ: asm_DRIVE_TAG_RESOURCE1_BIN in player m
                                  ain.asm!! Values must match. 
                             1473 ; 73   |#define DRIVE_TAG_RESOURCE1_BIN (DRIVE_TAG_RESOURCE_BIN+0x10)//<! was just 0x04. old comme
                                  nt"the host has 0x04 reserved for an extra system drive." May17'06 JLN: correction: ChrisW says 0x
                                  10+resource.bin tag is tag for 2nd ver of resource.bin in new 2.61x post sdkrelease updater. 
                             1474 ; 74   |#define DRIVE_TAG_RESOURCE2_BIN (DRIVE_TAG_RESOURCE_BIN+0x20)// master has tag 0x22 (3rd c
                                  opy)
                             1475 ; 75   |#define DRIVE_TAG_OTGHOST_S         0x05        //!< the host has 0x05 reserved for OTG dr
                                  ive.
                             1476 ; 76   |#define DRIVE_TAG_HOSTRSC_BIN       0x06        //!< UsbMscMtp resource drive tag, old nam
                                  e was DRIVE_TAG_MTP_BIN.
                             1477 ; 77   |#define DRIVE_TAG_DATA              0x0A        //!< data drive tag.
                             1478 ; 78   |#define DRIVE_TAG_DATA_HIDDEN       0x0B        //!< hidden data drive tag, old name was D
                                  RIVE_TAG_HIDDEN
                             1479 ; 79   |#define DRIVE_TAG_BOOTMANAGER_S     0x50        //!< boot manager drive tag
                             1480 ; 80   |#define DRIVE_TAG_UPDATER_S         0xFF        //!< the host has 0xFF reserved for usbmsc
                                  .sb file used in recovery mode operation only.
                             1481 ; 81   |#define DRIVE_TAG_HOSTRSC1_BIN      0x16        //!< back up resource for hostrsrc.bin.
                             1482 ; 82   |#define DRIVE_TAG_HOSTRSC2_BIN      0x26        //!< MASTER COPY resource for hostrsrc.bin
                                  .
                             1483 ; 83   |// Do not use this enum... use the defs above.  We need to use defs so customers
                             1484 ; 84   |//  may extend the system drives without DDI source code.
                             1485 ; 85   |/*
                             1486 ; 86   |typedef enum {
                             1487 ; 87   |    ResourceBinDriveTag = 0x00,
                             1488 ; 88   |    BootManagerDriveTag = 0x50,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1489 ; 89   |    StmpSysDriveTag = 0x01,
                             1490 ; 90   |    UsbMscDriveTag = 0x02,
                             1491 ; 91   |    DataDriveTag = 0x0A
                             1492 ; 92   |} LOGICAL_DRIVE_TAG, * P_LOGICAL_DRIVE_TAG;
                             1493 ; 93   |*/
                             1494 ; 94   |
                             1495 ; 95   |typedef enum {
                             1496 ; 96   |    DriveTypeData = 0,
                             1497 ; 97   |    DriveTypeSystem = 1,
                             1498 ; 98   |    DriveTypeHidden = 2,
                             1499 ; 99   |    DriveTypeUnknown = 3
                             1500 ; 100  |} LOGICAL_DRIVE_TYPE, * P_LOGICAL_DRIVE_TYPE;
                             1501 
                             1508 
                             1509 ; 101  |
                             1510 ; 102  |typedef struct {
                             1511 ; 103  |    WORD wDriveNumber;          // In reference to the entire system
                             1512 ; 104  |    LOGICAL_DRIVE_TYPE Type;
                             1513 ; 105  |    WORD wTag;
                             1514 ; 106  |    DWORD dwSizeInBytes;
                             1515 ; 107  |    BOOL bRequired;
                             1516 ; 108  |} MEDIA_ALLOCATION_TABLE_ENTRY, * P_MEDIA_ALLOCATION_TABLE_ENTRY;
                             1517 
                             1525 
                             1526 ; 109  |
                             1527 ; 110  |typedef struct {
                             1528 ; 111  |    WORD wNumEntries;
                             1529 ; 112  |    MEDIA_ALLOCATION_TABLE_ENTRY Entry[MAX_MEDIA_TABLE_ENTRIES];
                             1530 ; 113  |} MEDIA_ALLOCATION_TABLE, * P_MEDIA_ALLOCATION_TABLE;
                             1531 ; 114  |
                             1532 ; 115  |
                             1533 ; 116  |#define TA6_ROM_REV_ID  6
                             1534 ; 117  |#define ROM_REV_ID  (*((WORD _X *)0xFA02) & 0x0F)
                             1535 ; 118  |
                             1536 ; 119  | 
                             1537 ; 120  |typedef union {
                             1538 ; 121  |
                             1539 ; 122  |    struct {
                             1540 ; 123  |        WORD MinorL      : 8;
                             1541 ; 124  |        WORD MinorH      : 8;
                             1542 ; 125  |        WORD MiddleL     : 8;
                             1543 ; 126  |        WORD MiddleH     : 8;
                             1544 ; 127  |        WORD MajorL      : 8;
                             1545 ; 128  |        WORD MajorH      : 8;
                             1546 ; 129  |        } PARTIAL_VERSION;
                             1547 ; 130  |        
                             1548 ; 131  |    DWORD   Version;        
                             1549 ; 132  |
                             1550 ; 133  |} SYSTEM_VERSION;
                             1551 ; 134  |
                             1552 ; 135  |
                             1553 ; 136  |#endif // #ifndef _DDILDL_DEFS_H
                             1554 
                             1556 
                             1557 ; 62   |
                             1558 ; 63   |///////////////////////////////////////////////////////////////////////////////
                             1559 ; 64   |// Prototypes
                             1560 ; 65   |// Note that these are prototypes for the highest level access to the DDI.
                             1561 ; 66   |//  The LDL steering mechanism converts the wLogMediaNumber & wLogDriveNumber
                             1562 ; 67   |//  parameters & passes pointers to the media/drive desctriptrs to the DDIs.
                             1563 ; 68   |///////////////////////////////////////////////////////////////////////////////
                             1564 ; 69   |RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1565 ; 70   |RETCODE _reentrant MediaAllocate(WORD wLogMediaNumber,
                             1566 
                             1574 
                             1575 ; 71   |    P_MEDIA_ALLOCATION_TABLE pMediaTable);
                             1576 ; 72   |RETCODE _reentrant MediaDiscoverAllocation(WORD wLogMediaNumber);
                             1577 ; 73   |RETCODE _reentrant MediaGetMediaTable(WORD wLogMediaNumber,
                             1578 ; 74   |    P_MEDIA_ALLOCATION_TABLE *pMediaTable);
                             1579 ; 75   |RETCODE _reentrant MediaGetInfo(WORD wLogMediaNumber, LOGICAL_MEDIA_INFO Type,
                             1580 
                             1594 
                             1595 ; 76   |    void * _Y pInfo);
                             1596 ; 77   |RETCODE _reentrant MediaErase(WORD wLogMediaNumber, WORD wMagicNumber);
                             1597 ; 78   |
                             1598 ; 79   |RETCODE _reentrant DriveInit(WORD wLogDriveNumber);
                             1599 ; 80   |RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             1600 
                             1618 
                             1619 ; 81   |    void * pInfo);
                             1620 ; 82   |RETCODE _reentrant DriveSetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             1621 ; 83   |    void * pInfo);
                             1622 ; 84   |RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             1623 
                             1627 
                             1628 ; 85   |    P_SECTOR_BUFFER pSectorData);
                             1629 ; 86   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             1630 ; 87   |    P_SECTOR_BUFFER pSectorData);
                             1631 ; 88   |RETCODE _reentrant DriveMultiWriteSetup(WORD wLogDriveNumber,
                             1632 ; 89   |    DWORD dwStartSectorNumber, WORD wSectorCount,
                             1633 
                             1638 
                             1639 ; 90   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
                             1640 ; 91   |RETCODE _reentrant DriveMultiWriteSector(WORD wLogDriveNumber,
                             1641 ; 92   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                             1642 ; 93   |RETCODE _reentrant DriveErase(WORD wLogDriveNumber, WORD wMagicNumber);
                             1643 ; 94   |RETCODE _reentrant DriveFlush(WORD wDriveNumber);
                             1644 ; 95   |
                             1645 ; 96   |RETCODE DdiInitAll(void);
                             1646 ; 97   |
                             1647 ; 98   |
                             1648 ; 99   |#endif // #ifndef _DDILDL_H
                             1649 
                             1662 
                             1663 ; 11   |
                             1664 ; 12   |///////////////////////////////////////
                             1665 ; 13   |// Logical Media structures
                             1666 ; 14   |///////////////////////////////////////
                             1667 ; 15   |
                             1668 ; 16   |typedef struct {
                             1669 ; 17   |    // Discovered at Run Time by MediaInit:
                             1670 ; 18   |    WORD    wMediaNumber;
                             1671 ; 19   |    BOOL    bInitialized;
                             1672 ; 20   |    MEDIA_STATE eState;
                             1673 ; 21   |    BOOL    bAllocated;
                             1674 ; 22   |    BOOL    bWriteProtected;
                             1675 ; 23   |    WORD    wNumberOfDrives;//on this media
                             1676 ; 24   |    DWORD   dwSizeInBytes;
                             1677 ; 25   |    WORD    wAllocationUnitSizeInBytes;
                             1678 ; 26   |    PHYSICAL_MEDIA_TYPE PhysicalType;
                             1679 ; 27   |    void * pMediaInfo;  // same as in LOGICAL_DRIVE_DESCRIPTOR
                             1680 ; 28   |} LOGICAL_MEDIA_DESCRIPTOR, * P_LOGICAL_MEDIA_DESCRIPTOR;
                             1681 
                             1698 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1699 ; 29   |
                             1700 ; 30   |// Logical Media API functions
                             1701 ; 31   |typedef _reentrant RETCODE (*P_MEDIA_INIT_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR);
                             1702 ; 32   |typedef RETCODE _reentrant (*P_MEDIA_ALLOCATE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             1703 ; 33   |    P_MEDIA_ALLOCATION_TABLE);
                             1704 ; 34   |typedef RETCODE _reentrant (*P_MEDIA_DISCOVER_ALLOCATION_FUNCTION)(P_LOGICAL_MEDIA_DESCRIP
                                  TOR);
                             1705 ; 35   |typedef RETCODE _reentrant (*P_MEDIA_GET_MEDIA_TABLE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                                  
                             1706 ; 36   |    P_MEDIA_ALLOCATION_TABLE);
                             1707 ; 37   |typedef RETCODE _reentrant (*P_MEDIA_GET_INFO_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             1708 ; 38   |    LOGICAL_MEDIA_INFO, void * _Y);
                             1709 ; 39   |typedef RETCODE _reentrant (*P_MEDIA_ERASE_FUNCTION)(P_LOGICAL_MEDIA_DESCRIPTOR,
                             1710 ; 40   |    WORD wMagicNumber);
                             1711 
                             1736 
                             1737 ; 41   |
                             1738 ; 42   |typedef struct {
                             1739 ; 43   |    WORD wInitCodeBank;
                             1740 ; 44   |    P_MEDIA_INIT_FUNCTION pInit;
                             1741 ; 45   |    WORD wAllocateCodeBank;
                             1742 ; 46   |    P_MEDIA_ALLOCATE_FUNCTION pAllocate;
                             1743 ; 47   |    WORD wDiscoverAllocationCodeBank;
                             1744 ; 48   |    P_MEDIA_DISCOVER_ALLOCATION_FUNCTION pDiscoverAllocation;
                             1745 ; 49   |    WORD wGetMediaTableCodeBank;
                             1746 ; 50   |    P_MEDIA_GET_MEDIA_TABLE_FUNCTION pGetMediatable;
                             1747 ; 51   |    WORD wGetInfoCodeBank;
                             1748 ; 52   |    P_MEDIA_GET_INFO_FUNCTION pGetInfo;
                             1749 ; 53   |    WORD wEraseCodeBank;
                             1750 ; 54   |    P_MEDIA_ERASE_FUNCTION pErase;
                             1751 ; 55   |} LOGICAL_MEDIA_API, * P_LOGICAL_MEDIA_API;
                             1752 
                             1769 
                             1770 ; 56   |
                             1771 ; 57   |typedef struct {
                             1772 ; 58   |    P_LOGICAL_MEDIA_DESCRIPTOR pDescriptor;
                             1773 ; 59   |    P_LOGICAL_MEDIA_API pApi;
                             1774 ; 60   |} LOGICAL_MEDIA, * P_LOGICAL_MEDIA;
                             1775 
                             1793 
                             1794 ; 61   |
                             1795 ; 62   |///////////////////////////////////////
                             1796 ; 63   |// Logical Drive structures
                             1797 ; 64   |///////////////////////////////////////
                             1798 ; 65   |
                             1799 ; 66   |typedef struct {
                             1800 ; 67   |    // Discovered at Run Time by MediaDiscover
                             1801 ; 68   |    BOOL    bInitialized;
                             1802 ; 69   |    BOOL    bPresent;       // Indicates if a system drive is present
                             1803 ; 70   |                            // wTag from Config Block matches wTag from Drive
                             1804 ; 71   |                            // redundant area
                             1805 ; 72   |    BOOL    bErased;
                             1806 ; 73   |    BOOL    bWriteProtected;
                             1807 ; 74   |    DWORD   dwNumberOfSectors;
                             1808 ; 75   |    LOGICAL_DRIVE_TYPE Type;
                             1809 ; 76   |    WORD    wTag;
                             1810 ; 77   |    WORD    wDriveNumber;
                             1811 ; 78   |    DWORD   dwSizeInBytes;
                             1812 ; 79   |    WORD    wSectorSizeInBytes; // not included bad blocks (NAND media)
                             1813 ; 80   |    WORD    wEraseSizeInBytes;
                             1814 ; 81   |    SYSTEM_VERSION ProjectVersion;
                             1815 ; 82   |    SYSTEM_VERSION ComponentVersion;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1816 ; 83   |    P_LOGICAL_MEDIA_DESCRIPTOR pLogicalMediaDescriptor;
                             1817 ; 84   |    void * pMediaInfo;  // same as in LOGICAL_MEDIA_DESCRIPTOR
                             1818 ; 85   |    void * pDriveInfo;
                             1819 ; 86   |} LOGICAL_DRIVE_DESCRIPTOR, * P_LOGICAL_DRIVE_DESCRIPTOR;
                             1820 
                             1841 
                             1842 ; 87   |
                             1843 ; 88   |// Logical Drive API functions
                             1844 ; 89   |typedef RETCODE _reentrant (*P_DRIVE_INIT_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR);
                             1845 ; 90   |typedef RETCODE _reentrant (*P_DRIVE_GET_INFO_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             1846 ; 91   |    LOGICAL_DRIVE_INFO, void *);
                             1847 ; 92   |typedef RETCODE _reentrant (*P_DRIVE_SET_INFO_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             1848 ; 93   |    LOGICAL_DRIVE_INFO, void *);
                             1849 ; 94   |typedef RETCODE _reentrant (*P_DRIVE_READ_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             1850 ; 95   |    DWORD, P_SECTOR_BUFFER);
                             1851 ; 96   |typedef RETCODE _reentrant (*P_DRIVE_WRITE_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR,
                             1852 ; 97   |    DWORD, P_SECTOR_BUFFER);
                             1853 ; 98   |typedef RETCODE _reentrant (*P_DRIVE_MULTI_WRITE_SETUP_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTO
                                  R,
                             1854 ; 99   |    DWORD, WORD, MULTI_WRITE_CALLBACK_FUNCTION);
                             1855 ; 100  |typedef RETCODE _reentrant (*P_DRIVE_MULTI_WRITE_SECTOR_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPT
                                  OR,
                             1856 ; 101  |    P_SECTOR_BUFFER, LONG);
                             1857 ; 102  |typedef RETCODE _reentrant (*P_DRIVE_ERASE_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR, WORD);
                             1858 ; 103  |typedef RETCODE _reentrant (*P_DRIVE_FLUSH_FUNCTION)(P_LOGICAL_DRIVE_DESCRIPTOR);
                             1859 
                             1896 
                             1897 ; 104  |
                             1898 ; 105  |typedef struct {
                             1899 ; 106  |    WORD wInitCodeBank;
                             1900 ; 107  |    P_DRIVE_INIT_FUNCTION pInit;
                             1901 ; 108  |    WORD wGetInfoCodeBank;
                             1902 ; 109  |    P_DRIVE_GET_INFO_FUNCTION pGetInfo;
                             1903 ; 110  |    WORD wSetInfoCodeBank;
                             1904 ; 111  |    P_DRIVE_SET_INFO_FUNCTION pSetInfo;
                             1905 ; 112  |    WORD wReadSectorCodeBank;
                             1906 ; 113  |    P_DRIVE_READ_SECTOR_FUNCTION pReadSector;
                             1907 ; 114  |    WORD wWriteSectorCodeBank;
                             1908 ; 115  |    P_DRIVE_WRITE_SECTOR_FUNCTION pWriteSector;
                             1909 ; 116  |    WORD wMultiWriteSetupCodeBank;
                             1910 ; 117  |    P_DRIVE_MULTI_WRITE_SETUP_FUNCTION pMultiWriteSetup;
                             1911 ; 118  |    WORD wMultiWriteSectorCodeBank;
                             1912 ; 119  |    P_DRIVE_MULTI_WRITE_SECTOR_FUNCTION pMultiWriteSector;
                             1913 ; 120  |    WORD wEraseCodeBank;
                             1914 ; 121  |    P_DRIVE_ERASE_FUNCTION pErase;
                             1915 ; 122  |    WORD wFlushCodeBank;
                             1916 ; 123  |    P_DRIVE_FLUSH_FUNCTION pFlush;
                             1917 ; 124  |} LOGICAL_DRIVE_API, * P_LOGICAL_DRIVE_API;
                             1918 
                             1941 
                             1942 ; 125  |
                             1943 ; 126  |typedef struct {
                             1944 ; 127  |    P_LOGICAL_DRIVE_DESCRIPTOR pDescriptor;
                             1945 ; 128  |    P_LOGICAL_DRIVE_API pApi;
                             1946 ; 129  |} LOGICAL_DRIVE, * P_LOGICAL_DRIVE;
                             1947 
                             1949 
                             1950 ; 130  |
                             1951 ; 131  |///////////////////////////////////////////////////////////////////////////////
                             1952 ; 132  |// Global variables
                             1953 ; 133  |///////////////////////////////////////////////////////////////////////////////
                             1954 ; 134  |extern MEDIA_ALLOCATION_TABLE g_MediaAllocationTable[];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1955 
                             1957 
                             1958 ; 135  |extern LOGICAL_MEDIA_DESCRIPTOR g_MediaDescriptor[];
                             1959 
                             1964 
                             1965 ; 136  |extern LOGICAL_MEDIA g_Media[];
                             1966 ; 137  |extern WORD g_wNumMedia;
                             1967 
                             1969 
                             1970 ; 138  |extern LOGICAL_DRIVE_DESCRIPTOR g_DriveDescriptor[];
                             1971 
                             1976 
                             1977 ; 139  |extern LOGICAL_DRIVE g_Drive[];
                             1978 ; 140  |extern WORD g_wNumDrives;
                             1979 ; 141  |
                             1980 ; 142  |///////////////////////////////////////////////////////////////////////////////
                             1981 ; 143  |// SysCallFunction Variants
                             1982 ; 144  |///////////////////////////////////////////////////////////////////////////////
                             1983 ; 145  |RETCODE _asmfunc SysCallFunction_P_LOGICAL_MEDIA_DESCRIPTOR_f(WORD * RESOURCE,RETCODE _ree
                                  ntrant (int,int,int*),  int, int, int *);
                             1984 ; 146  |#define SysCallFunction_P_LOGICAL_MEDIA_DESCRIPTOR(rsrc,func,a,b,p) SysCallFunction_P_LOGI
                                  CAL_MEDIA_DESCRIPTOR_f((void*)rsrc,(func),(a),(b),(p))
                             1985 ; 147  |
                             1986 ; 148  |#endif
                             1987 
                             1989 
                             1990 ; 16   |#include "mmchal.h"
                             1991 
                             1993 
                             1994 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1995 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             1996 ; 3    |//
                             1997 ; 4    |// Filename: mmchal.h
                             1998 ; 5    |// Description: 
                             1999 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2000 ; 7    |
                             2001 ; 8    |#ifndef _MMCHAL_H
                             2002 ; 9    |#define _MMCHAL_H
                             2003 ; 10   |
                             2004 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             2005 ; 12   |// MMC HAL definitions
                             2006 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             2007 ; 14   |
                             2008 ; 15   |#define MMC_NULL_ARG    0
                             2009 ; 16   |
                             2010 ; 17   |// MMC commands
                             2011 ; 18   |#define MMC_CMD0        0x40|0
                             2012 ; 19   |#define MMC_CMD1        0x40|1
                             2013 ; 20   |#define MMC_CMD8                0x40|8
                             2014 ; 21   |#define MMC_CMD9        0x40|9
                             2015 ; 22   |#define MMC_CMD10       0x40|10
                             2016 ; 23   |#define MMC_CMD12       0x40|12
                             2017 ; 24   |#define MMC_CMD13       0x40|13
                             2018 ; 25   |#define MMC_CMD16       0x40|16
                             2019 ; 26   |#define MMC_CMD17       0x40|17
                             2020 ; 27   |#define MMC_CMD18       0x40|18
                             2021 ; 28   |#define MMC_CMD23       0x40|23
                             2022 ; 29   |#define MMC_CMD24       0x40|24
                             2023 ; 30   |#define MMC_CMD25       0x40|25
                             2024 ; 31   |#define MMC_CMD27       0x40|27
                             2025 ; 32   |#define MMC_CMD28       0x40|28
                             2026 ; 33   |#define MMC_CMD29       0x40|29
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2027 ; 34   |#define MMC_CMD30       0x40|30
                             2028 ; 35   |#define MMC_CMD32       0x40|32
                             2029 ; 36   |#define MMC_CMD33       0x40|33
                             2030 ; 37   |#define MMC_CMD35       0x40|35
                             2031 ; 38   |#define MMC_CMD36       0x40|36
                             2032 ; 39   |#define MMC_CMD38       0x40|38
                             2033 ; 40   |#define MMC_CMD42       0x40|42
                             2034 ; 41   |#define MMC_CMD55       0x40|55
                             2035 ; 42   |#define MMC_CMD56       0x40|56
                             2036 ; 43   |#define MMC_CMD58       0x40|58
                             2037 ; 44   |#define MMC_CMD59       0x40|59
                             2038 ; 45   |
                             2039 ; 46   |// SD-specific commands
                             2040 ; 47   |#define SD_ACMD13       0x40|13
                             2041 ; 48   |#define SD_ACMD22       0x40|22
                             2042 ; 49   |#define SD_ACMD23       0x40|23
                             2043 ; 50   |#define SD_ACMD41       0x40|41
                             2044 ; 51   |#define SD_ACMD42       0x40|42
                             2045 ; 52   |#define SD_ACMD51       0x40|51
                             2046 ; 53   |
                             2047 ; 54   |// Responses
                             2048 ; 55   |#define MMC_RESPONSE_TYPE       WORD
                             2049 ; 56   |#define MMC_RESPONSE_TYPE_R1    0
                             2050 ; 57   |#define MMC_RESPONSE_TYPE_R2    1
                             2051 ; 58   |#define MMC_RESPONSE_TYPE_R3    2
                             2052 ; 59   |
                             2053 ; 60   |#define MMC_R1_NO_ERROR                     0x00
                             2054 ; 61   |#define MMC_R1_IDLE_NO_ERROR                0x01
                             2055 ; 62   |#define MMC_R1_IN_IDLE_STATE_BITPOS         0
                             2056 ; 63   |#define MMC_R1_ERASE_RESET_BITPOS           1
                             2057 ; 64   |#define MMC_R1_ILLEGAL_COMMAND_BITPOS       2
                             2058 ; 65   |#define MMC_R1_COM_CRC_ERROR_BITPOS         3
                             2059 ; 66   |#define MMC_R1_ERASE_SEQUENCE_ERROR_BITPOS  4
                             2060 ; 67   |#define MMC_R1_ADDRESS_ERROR                5
                             2061 ; 68   |#define MMC_R1_PARAMETER_ERROR              6
                             2062 ; 69   |
                             2063 ; 70   |#define MMC_START_BYTE          0xFE
                             2064 ; 71   |
                             2065 ; 72   |#define MMC_CSD_VERSION_10      0
                             2066 ; 73   |#define MMC_CSD_VERSION_11      1
                             2067 ; 74   |#define MMC_CSD_VERSION_12      2
                             2068 ; 75   |#define MMC_CSD_VERSION_FROM_EXT_CSD    3
                             2069 ; 76   |
                             2070 ; 77   |#define MMC_SPEC_VERSION_10     0
                             2071 ; 78   |#define MMC_SPEC_VERSION_14     1
                             2072 ; 79   |#define MMC_SPEC_VERSION_20     2
                             2073 ; 80   |#define MMC_SPEC_VERSION_31     3
                             2074 ; 81   |#define MMC_SPEC_VERSION_40     4
                             2075 ; 82   |
                             2076 ; 83   |#define SD_CSD_VERSION_10       0
                             2077 ; 84   |
                             2078 ; 85   |#define MMC_CARD_TYPE           WORD
                             2079 ; 86   |#define MMC_CARD_TYPE_MMC       (MMC_CARD_TYPE)0
                             2080 ; 87   |#define MMC_CARD_TYPE_SD        (MMC_CARD_TYPE)1
                             2081 ; 88   |
                             2082 ; 89   |#define MMC_SUPPORTED_SECTOR_SIZE   512
                             2083 ; 90   |
                             2084 ; 91   |#define MMC_OCR_SUPPORT (DWORD)0x000000020000
                             2085 ; 92   |
                             2086 ; 93   |//   The STMP3400 max SCK speed is DCLK/6, STMP3410 is DCLK/2:
                             2087 ; 94   |//   Assume a 100MHz DCLK & SCK=DCLK/2=50Mhz. It takes a minimum of 15 DCLKs
                             2088 ; 95   |//   between each SPI byte transfer, so one byte takes (8*2)+15=31 DCLKs.  This
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2089 ; 96   |//   is a byte rate of 1.612MBytes/s.  Assume all timeouts are 1s.
                             2090 ; 97   |#define MMC_PORT_TIMEOUT            (WORD)(100000000/31)
                             2091 ; 98   |#define MMC_START_BYTE_TIMEOUT      MMC_PORT_TIMEOUT
                             2092 ; 99   |#define MMC_WRITE_BUSY_TIMEOUT      MMC_PORT_TIMEOUT
                             2093 ; 100  |#define MMC_CSD_WRITE_BUSY_TIMEOUT  MMC_PORT_TIMEOUT
                             2094 ; 101  |#define MMC_ERASE_BUSY_TIMEOUT      MMC_PORT_TIMEOUT
                             2095 ; 102  |#define MMC_REGISTER_READ_TIMEOUT   MMC_PORT_TIMEOUT
                             2096 ; 103  |
                             2097 ; 104  |///////////////////////////////////////////////////////////////////////////////
                             2098 ; 105  |// MMC HAL structure definitions
                             2099 ; 106  |///////////////////////////////////////////////////////////////////////////////
                             2100 ; 107  |
                             2101 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             2102 ; 109  |// MMC definitions
                             2103 ; 110  |
                             2104 ; 111  |// ifdef this struct for SPI or MMCBUS (currently only support SPI)
                             2105 ; 112  |typedef struct {
                             2106 ; 113  |    _X WORD *wGpioBase;
                             2107 ; 114  |    WORD wGpioSetMask;
                             2108 ; 115  |    WORD wGpioClearMask;
                             2109 ; 116  |    _X WORD *wWriteProtectGpioBase;
                             2110 ; 117  |    WORD wWriteProtectGpioSetMask;
                             2111 ; 118  |    WORD wWriteProtectGpioClearMask;
                             2112 ; 119  |    _X WORD *wMediaDetectGpioBase;
                             2113 ; 120  |    WORD wMediaDetectGpioSetMask;
                             2114 ; 121  |    WORD wMediaDetectGpioClearMask;
                             2115 ; 122  |    WORD wMediaDetectPolarity;
                             2116 ; 123  |    WORD wSpiDeviceNumber;
                             2117 ; 124  |    BOOL bSPIBusInitialized;
                             2118 ; 125  |} MMC_PHYSICAL_BUS;
                             2119 ; 126  |
                             2120 ; 127  |typedef struct {
                             2121 ; 128  |    WORD wCommand;
                             2122 ; 129  |    WORD wArg3;
                             2123 ; 130  |    WORD wArg2;
                             2124 ; 131  |    WORD wArg1;
                             2125 ; 132  |    WORD wArg0;
                             2126 ; 133  |    WORD wCRC7;
                             2127 ; 134  |} MMC_CMD;
                             2128 ; 135  |
                             2129 ; 136  |typedef union {
                             2130 ; 137  |    struct {
                             2131 ; 138  |        WORD Idle            : 1;
                             2132 ; 139  |        WORD EraseReset      : 1;
                             2133 ; 140  |        WORD IllCommand      : 1;
                             2134 ; 141  |        WORD ComCrcError     : 1;
                             2135 ; 142  |        WORD EraseSeqError   : 1;
                             2136 ; 143  |        WORD AddressError    : 1;
                             2137 ; 144  |        WORD ParamError      : 1;
                             2138 ; 145  |        WORD ZeroBit         : 1;
                             2139 ; 146  |    } B;
                             2140 ; 147  |    WORD I;
                             2141 ; 148  |} MMC_RESPONSE_R1;
                             2142 ; 149  |
                             2143 ; 150  |typedef union {
                             2144 ; 151  |    struct {
                             2145 ; 152  |        WORD CardLocked      : 1;
                             2146 ; 153  |        WORD WpeLucf         : 1;
                             2147 ; 154  |        WORD Error           : 1;
                             2148 ; 155  |        WORD CCError         : 1;
                             2149 ; 156  |        WORD CardEccFail     : 1;
                             2150 ; 157  |        WORD WpViolation     : 1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2151 ; 158  |        WORD EraseParam      : 1;
                             2152 ; 159  |        WORD OorCsdovw       : 1;
                             2153 ; 160  |        WORD Idle            : 1;
                             2154 ; 161  |        WORD EraseReset      : 1;
                             2155 ; 162  |        WORD IllCommand      : 1;
                             2156 ; 163  |        WORD ComCrcError     : 1;
                             2157 ; 164  |        WORD EraseSeqError   : 1;
                             2158 ; 165  |        WORD AddressError    : 1;
                             2159 ; 166  |        WORD ParamError      : 1;
                             2160 ; 167  |    } B;
                             2161 ; 168  |    WORD I;
                             2162 ; 169  |} MMC_RESPONSE_R2;
                             2163 
                             2185 
                             2186 ; 170  |
                             2187 ; 171  |typedef struct {
                             2188 ; 172  |    DWORD dwOcr;
                             2189 ; 173  |    MMC_RESPONSE_R1 R1;
                             2190 ; 174  |} MMC_RESPONSE_R3;
                             2191 
                             2231 
                             2232 ; 175  |
                             2233 ; 176  |typedef union {
                             2234 ; 177  |    MMC_RESPONSE_R1 R1;
                             2235 ; 178  |    MMC_RESPONSE_R2 R2;
                             2236 ; 179  |    MMC_RESPONSE_R3 R3;
                             2237 ; 180  |} MMC_RESPONSE;
                             2238 
                             2255 
                             2256 ; 181  |    
                             2257 ; 182  |
                             2258 ; 183  |///////////////////////////////////////////////////////////////////////////////
                             2259 ; 184  |// MMC prototypes
                             2260 ; 185  |///////////////////////////////////////////////////////////////////////////////
                             2261 ; 186  |
                             2262 ; 187  |// functions that map directly to MMC commands
                             2263 ; 188  |RETCODE _reentrant HalMmcGoIdleStateSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Re
                                  sponse);
                             2264 
                             2270 
                             2271 ; 189  |RETCODE _reentrant HalMmcSendOpCondSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Res
                                  ponse);
                             2272 ; 190  |RETCODE _reentrant HalMmcSendCidSync(MMC_PHYSICAL_BUS * pBusPointer, WORD _X pwRegBuffer[]
                                  ,
                             2273 ; 191  |    MMC_RESPONSE * Response);
                             2274 ; 192  |RETCODE _reentrant HalMmcSendCsdSync(MMC_PHYSICAL_BUS * pBusPointer, WORD _X pwRegBuffer[]
                                  ,
                             2275 ; 193  |    MMC_RESPONSE * Response);
                             2276 ; 194  |RETCODE _reentrant HalMmcAppCmdSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Respons
                                  e);
                             2277 ; 195  |RETCODE _reentrant HalMmcReadOcrSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Respon
                                  se);
                             2278 ; 196  |RETCODE _reentrant HalMmcSendStatusSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Res
                                  ponse);
                             2279 ; 197  |RETCODE _reentrant HalMmcReadSingleBlockSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddre
                                  ss,
                             2280 ; 198  |    WORD _X pwReadBuffer[], MMC_RESPONSE * Response);
                             2281 ; 199  |RETCODE _reentrant HalMmcProgramCsdSync(MMC_PHYSICAL_BUS * pBusPointer, WORD _X pwRegBuffe
                                  r[],
                             2282 ; 200  |    MMC_RESPONSE * Response);
                             2283 ; 201  |RETCODE _reentrant HalMmcSetBlocklenSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwLength, 
                             2284 ; 202  |    MMC_RESPONSE * Response);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2285 ; 203  |RETCODE _reentrant HalMmcBusInit(MMC_PHYSICAL_BUS * pBusPointer);
                             2286 ; 204  |
                             2287 ; 205  |RETCODE _reentrant HalMmcWriteBlockSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddress,
                             2288 ; 206  |    WORD _X pwWriteBuffer[], MMC_RESPONSE * Response);
                             2289 ; 207  |RETCODE _reentrant HalMmcWriteMultipleBlockFirstSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD
                                   dwAddress,
                             2290 ; 208  |    WORD _X pwWriteBuffer[], MMC_RESPONSE * Response);
                             2291 ; 209  |RETCODE _reentrant HalMmcWriteMultipleBlockNextSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD 
                                  dwAddress,
                             2292 ; 210  |    WORD _X pwWriteBuffer[], MMC_RESPONSE * Response);
                             2293 ; 211  |RETCODE _reentrant HalMmcWriteMultipleBlockEndSync(MMC_PHYSICAL_BUS * pBusPointer);
                             2294 ; 212  |RETCODE _reentrant HalMmcTagSectorStartSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddres
                                  s,
                             2295 ; 213  |    MMC_RESPONSE * Response);
                             2296 ; 214  |RETCODE _reentrant HalMmcTagSectorEndSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddress,
                                  
                             2297 ; 215  |    MMC_RESPONSE * Response);
                             2298 ; 216  |RETCODE _reentrant HalMmcTagEraseGroupStartSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAd
                                  dress,
                             2299 ; 217  |    MMC_RESPONSE * Response);
                             2300 ; 218  |RETCODE _reentrant HalMmcTagEraseGroupEndSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddr
                                  ess,
                             2301 ; 219  |    MMC_RESPONSE * Response);
                             2302 ; 220  |RETCODE _reentrant HalMmcErase(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Response);
                             2303 ; 221  |
                             2304 ; 222  |// functions that map directly to SD commands
                             2305 ; 223  |RETCODE _reentrant HalSdSendOpCondSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Resp
                                  onse);
                             2306 ; 224  |
                             2307 ; 225  |// other HAL functions
                             2308 ; 226  |#ifdef MMC_SEMAPHORE
                             2309 ; 227  |RETCODE _reentrant HalMmcPhysicalGrab(WORD wNum);
                             2310 ; 228  |RETCODE _reentrant HalMmcPhysicalRelease(WORD wNum);
                             2311 ; 229  |#endif
                             2312 ; 230  |BOOL _reentrant HalMmcIsDeviceInserted(MMC_PHYSICAL_BUS * pBusPointer);
                             2313 ; 231  |
                             2314 ; 232  |// ancillary functions
                             2315 ; 233  |RETCODE _reentrant MmcSendCommandSync(MMC_PHYSICAL_BUS * pBusPointer, WORD wCommand, 
                             2316 ; 234  |    DWORD dwArgument, MMC_RESPONSE * Response, MMC_RESPONSE_TYPE ResponseType);
                             2317 ; 235  |RETCODE _reentrant MmcWaitForRegisterSync(MMC_PHYSICAL_BUS * pBusPointer);
                             2318 ; 236  |RETCODE _reentrant MmcTransactionCompleteSync(MMC_PHYSICAL_BUS * pBusPointer);
                             2319 
                             2328 
                             2329 ; 237  |RETCODE _reentrant MmcCalcCommandCrc(MMC_CMD * pCmd);
                             2330 ; 238  |
                             2331 ; 239  |#endif // #ifndef _MMCHAL_H
                             2332 
                             2334 
                             2335 ; 17   |
                             2336 ; 18   |///////////////////////////////////////////////////////////////////////////////
                             2337 ; 19   |// Definitions
                             2338 ; 20   |///////////////////////////////////////////////////////////////////////////////
                             2339 ; 21   |
                             2340 ; 22   |#define MMC_SECTOR_SIZE_IN_BYTES            512
                             2341 ; 23   |
                             2342 ; 24   |typedef enum {
                             2343 ; 25   |  eMmcLockStateFree   = 0,
                             2344 ; 26   |  eMmcLockStateLocked = 1
                             2345 ; 27   |} MMC_LOCK_STATE;
                             2346 ; 28   |
                             2347 ; 29   |typedef BOOL    (*P_MMCBUSYDONE_CALLBACK_FUNCTION)(int, void*);
                             2348 ; 30   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2349 ; 31   |/////////////////////////////////////////////////////////////////////////////////
                             2350 ; 32   |// MMC Physical Device Struct
                             2351 ; 33   |/////////////////////////////////////////////////////////////////////////////////
                             2352 ; 34   |typedef struct {
                             2353 ; 35   |    BOOL  bMMCCardPresent;
                             2354 ; 36   |        BOOL    bEnumerated;
                             2355 ; 37   |    BOOL        bWriteProtected;
                             2356 ; 38   |    BOOL        bEraseTested;
                             2357 ; 39   |    BOOL        bEraseIsFunctional;
                             2358 ; 40   |//    BOOL      bMmcMultiWriteSupported;
                             2359 ; 41   |//    BOOL      bMmcMultiWriteInProgress;
                             2360 ; 42   |} MMC_PHYSICAL_DEVICE_FLAGS, * P_MMC_PHYSICAL_DEVICE_FLAGS;
                             2361 ; 43   |
                             2362 ; 44   |
                             2363 ; 45   |/////////////////////////////////////////////////////////////////////////////////
                             2364 ; 46   |// MMC CID Struct
                             2365 ; 47   |/////////////////////////////////////////////////////////////////////////////////
                             2366 ; 48   |typedef struct {
                             2367 ; 49   |
                             2368 ; 50   |        WORD    wMID;       //Manufacturer ID
                             2369 ; 51   |    WORD        wCIN[4];        // Spec 1.4 only
                             2370 ; 52   |    WORD        wOID;       // OEM/App ID
                             2371 ; 53   |    DWORD       dwPNM;  // Product Name
                             2372 ; 54   |    WORD        wPRV;       // Product Revision
                             2373 ; 55   |    DWORD       dwPSN;  // Product Serial Number
                             2374 ; 56   |    WORD        wMDT;       // Manufacturing Date
                             2375 ; 57   |    WORD        wCRC;       // CRC checksum
                             2376 ; 58   |} MMC_CID, *P_MMC_CID;
                             2377 ; 59   |
                             2378 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             2379 ; 61   |// MMC CSD Struct
                             2380 ; 62   |/////////////////////////////////////////////////////////////////////////////////
                             2381 ; 63   |typedef struct {
                             2382 ; 64   |
                             2383 ; 65   |    WORD        wCSD_STRUCTURE;         // *
                             2384 ; 66   |    WORD        wSPEC_VERS;                 // * System Specification Version
                             2385 ; 67   |    WORD        wTAAC;                        // Data Read Access Time 1
                             2386 ; 68   |    WORD        wNSAC;                        // Data Read Access Time 2
                             2387 ; 69   |    WORD        wTRANS_SPEED;             // Max Data Transfer Rate
                             2388 ; 70   |    WORD        wCCC;                           // Card Command Classes
                             2389 ; 71   |    WORD        wREAD_BL_LEN;             // * Max Read Data block Length
                             2390 ; 72   |    WORD        wREAD_BL_PARTIAL;               // Partial Blocks for read allowed
                             2391 ; 73   |    WORD        wWRITE_BLK_MISALIGN;    // Write Block misaligned
                             2392 ; 74   |    WORD        wREAD_BLK_MISALIGN;     // Read Block misaligned
                             2393 ; 75   |    WORD        wDSR_INP;                     // DSR Implemented
                             2394 ; 76   |    WORD        wC_SIZE;                            // * Device Size
                             2395 ; 77   |    WORD        wVDD_R_CURR_MIN;        // Max Read Current at Vdd Min
                             2396 ; 78   |    WORD        wVDD_R_CURR_MAX;        // Max Read Current at Vdd Max
                             2397 ; 79   |    WORD        wVDD_W_CURR_MIN;  // Max Write Current at Vdd Min
                             2398 ; 80   |    WORD        wVDD_W_CURR_MAX;        // Max Write Current at Vdd Max
                             2399 ; 81   |    WORD        wC_SIZE_MULT;             // * Device Size Mulitplier
                             2400 ; 82   |    WORD        wERASE_BLK_EN;          // Erase Block Enable (SD 1.0)
                             2401 ; 83   |    WORD        wSECTOR_SIZE;             // Sector Size (SD 1.0)
                             2402 ; 84   |    WORD        wERASE_GRP_SIZE;        // * Erase Group Size
                             2403 ; 85   |    WORD        wERASE_GRP_MULT;        // * Erase Group Multiplier
                             2404 ; 86   |    WORD        wWP_GRP_SIZE;             // Write Protect Group Size
                             2405 ; 87   |    WORD        wWP_GROUP_ENABLE;       // Write Protect Group Enable
                             2406 ; 88   |    WORD        wDEFAULT_ECC;             // Manufacturer Default ECC
                             2407 ; 89   |    WORD        wR2W_FACTOR;              // Write Speed Factor
                             2408 ; 90   |    WORD        wWRITE_BL_LEN;    // Max Write data block length
                             2409 ; 91   |    WORD        wWRITE_BL_PARTIAL;      // Partial blocks for  Write allowed
                             2410 ; 92   |    WORD        wFILE_FORMAT_GRP;       // File format group
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2411 ; 93   |    WORD        wCOPY;                        // Copy Flag (OTP)
                             2412 ; 94   |    WORD        wPERM_WRITE_PROTECT;    // Permanent Write Protection
                             2413 ; 95   |    WORD        wTMP_WRITE_PROTECT;     // Temporary Write Protection
                             2414 ; 96   |    WORD        wFILE_FORMAT;             // File Format
                             2415 ; 97   |    WORD        wECC;                           // ECC
                             2416 ; 98   |    WORD        wCRC;                           // CRC
                             2417 ; 99   |                            //      *  =  Spec 3.1
                             2418 ; 100  |
                             2419 ; 101  |} MMC_CSD, *P_MMC_CSD;
                             2420 ; 102  |
                             2421 ; 103  |typedef struct _MMCMultiWriteStruct
                             2422 ; 104  |{
                             2423 ; 105  |  BOOL  bMultiWriteSupported;
                             2424 ; 106  |  BOOL  bMultiWriteStarted;
                             2425 ; 107  |  BOOL  bMultiWriteInProgress;
                             2426 ; 108  |  DWORD dwMultiWriteStartSectorNumber;
                             2427 ; 109  |  DWORD dwMultiWriteCurrentSectorNumber;
                             2428 ; 110  |  WORD  wMultiWriteSectorsRemaining;
                             2429 ; 111  |  DWORD dwMMCPreviousWriteSector;
                             2430 ; 112  |  MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction;
                             2431 ; 113  |} MMCMultiWriteStruct;
                             2432 
                             2505 
                             2506 ; 114  |
                             2507 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             2508 ; 116  |// MMC Media Info Struct
                             2509 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             2510 ; 118  |typedef struct {
                             2511 ; 119  |  MMC_LOCK_STATE  Lock;
                             2512 ; 120  |  BOOL            bMMCIsBusy;       // Used for SetMMCBusy and MMCIsReady
                             2513 ; 121  |  P_MMCBUSYDONE_CALLBACK_FUNCTION pMMCBusyDoneCallbackFunction;
                             2514 ; 122  |  void *          pMMCBusyArg;              // Used for SetMMCBusy and MMCIsReady
                             2515 ; 123  |  DWORD           dwTotalSectors;           //
                             2516 ; 124  |  MMC_PHYSICAL_DEVICE_FLAGS     Flags;  // operation flags
                             2517 ; 125  |  MMC_CARD_TYPE   Type;         // MMC or SD?
                             2518 ; 126  |  MMC_CID                     Cid;              // Card ID structure
                             2519 ; 127  |  MMC_CSD                     Csd;              // Card Specific Data Register
                             2520 ; 128  |  WORD                  wEraseSize;     // Erase Size
                             2521 ; 129  |  DWORD                 dwDeviceSize;
                             2522 ; 130  |  MMC_PHYSICAL_BUS * pMMCPhysicalBus;     //SPI Bus Pin definitions for Media.
                             2523 ; 131  |  MMCMultiWriteStruct MultWrite;
                             2524 ; 132  |} MMC_MEDIA_INFO, * P_MMC_MEDIA_INFO;
                             2525 
                             2527 
                             2528 ; 133  |
                             2529 ; 134  |
                             2530 ; 135  |///////////////////////////////////////////////////////////////////////////////
                             2531 ; 136  |// Error codes
                             2532 ; 137  |///////////////////////////////////////////////////////////////////////////////
                             2533 ; 138  |
                             2534 ; 139  |///////////////////////////////////////////////////////////////////////////////
                             2535 ; 140  |// Typedefs
                             2536 ; 141  |///////////////////////////////////////////////////////////////////////////////
                             2537 ; 142  |
                             2538 ; 143  |
                             2539 ; 144  |///////////////////////////////////////////////////////////////////////////////
                             2540 ; 145  |// Prototypes
                             2541 ; 146  |///////////////////////////////////////////////////////////////////////////////
                             2542 ; 147  |
                             2543 ; 148  |
                             2544 ; 149  |///////////////////////////////////////////////////////////////////////////////
                             2545 ; 150  |// Global variables
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2546 ; 151  |///////////////////////////////////////////////////////////////////////////////
                             2547 ; 152  |extern LOGICAL_MEDIA_API MMCMediaApi;
                             2548 
                             2550 
                             2551 ; 153  |extern LOGICAL_DRIVE_API MMCDataDriveApi;
                             2552 
                             2570 
                             2571 ; 154  |extern MMC_MEDIA_INFO MEDIA_DDI_MEM MmcMediaInfo;
                             2572 ; 155  |
                             2573 ; 156  |#endif // #ifndef _MMCDDI_H
                             2574 
                             2576 
                             2577 ; 14   |#include "mmchal.h"
                             2578 
                             2580 
                             2581 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2582 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             2583 ; 3    |//
                             2584 ; 4    |// Filename: mmchal.h
                             2585 ; 5    |// Description: 
                             2586 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2587 ; 7    |
                             2588 ; 8    |#ifndef _MMCHAL_H
                             2589 ; 9    |#define _MMCHAL_H
                             2590 ; 10   |
                             2591 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             2592 ; 12   |// MMC HAL definitions
                             2593 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             2594 ; 14   |
                             2595 ; 15   |#define MMC_NULL_ARG    0
                             2596 ; 16   |
                             2597 ; 17   |// MMC commands
                             2598 ; 18   |#define MMC_CMD0        0x40|0
                             2599 ; 19   |#define MMC_CMD1        0x40|1
                             2600 ; 20   |#define MMC_CMD8                0x40|8
                             2601 ; 21   |#define MMC_CMD9        0x40|9
                             2602 ; 22   |#define MMC_CMD10       0x40|10
                             2603 ; 23   |#define MMC_CMD12       0x40|12
                             2604 ; 24   |#define MMC_CMD13       0x40|13
                             2605 ; 25   |#define MMC_CMD16       0x40|16
                             2606 ; 26   |#define MMC_CMD17       0x40|17
                             2607 ; 27   |#define MMC_CMD18       0x40|18
                             2608 ; 28   |#define MMC_CMD23       0x40|23
                             2609 ; 29   |#define MMC_CMD24       0x40|24
                             2610 ; 30   |#define MMC_CMD25       0x40|25
                             2611 ; 31   |#define MMC_CMD27       0x40|27
                             2612 ; 32   |#define MMC_CMD28       0x40|28
                             2613 ; 33   |#define MMC_CMD29       0x40|29
                             2614 ; 34   |#define MMC_CMD30       0x40|30
                             2615 ; 35   |#define MMC_CMD32       0x40|32
                             2616 ; 36   |#define MMC_CMD33       0x40|33
                             2617 ; 37   |#define MMC_CMD35       0x40|35
                             2618 ; 38   |#define MMC_CMD36       0x40|36
                             2619 ; 39   |#define MMC_CMD38       0x40|38
                             2620 ; 40   |#define MMC_CMD42       0x40|42
                             2621 ; 41   |#define MMC_CMD55       0x40|55
                             2622 ; 42   |#define MMC_CMD56       0x40|56
                             2623 ; 43   |#define MMC_CMD58       0x40|58
                             2624 ; 44   |#define MMC_CMD59       0x40|59
                             2625 ; 45   |
                             2626 ; 46   |// SD-specific commands
                             2627 ; 47   |#define SD_ACMD13       0x40|13
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2628 ; 48   |#define SD_ACMD22       0x40|22
                             2629 ; 49   |#define SD_ACMD23       0x40|23
                             2630 ; 50   |#define SD_ACMD41       0x40|41
                             2631 ; 51   |#define SD_ACMD42       0x40|42
                             2632 ; 52   |#define SD_ACMD51       0x40|51
                             2633 ; 53   |
                             2634 ; 54   |// Responses
                             2635 ; 55   |#define MMC_RESPONSE_TYPE       WORD
                             2636 ; 56   |#define MMC_RESPONSE_TYPE_R1    0
                             2637 ; 57   |#define MMC_RESPONSE_TYPE_R2    1
                             2638 ; 58   |#define MMC_RESPONSE_TYPE_R3    2
                             2639 ; 59   |
                             2640 ; 60   |#define MMC_R1_NO_ERROR                     0x00
                             2641 ; 61   |#define MMC_R1_IDLE_NO_ERROR                0x01
                             2642 ; 62   |#define MMC_R1_IN_IDLE_STATE_BITPOS         0
                             2643 ; 63   |#define MMC_R1_ERASE_RESET_BITPOS           1
                             2644 ; 64   |#define MMC_R1_ILLEGAL_COMMAND_BITPOS       2
                             2645 ; 65   |#define MMC_R1_COM_CRC_ERROR_BITPOS         3
                             2646 ; 66   |#define MMC_R1_ERASE_SEQUENCE_ERROR_BITPOS  4
                             2647 ; 67   |#define MMC_R1_ADDRESS_ERROR                5
                             2648 ; 68   |#define MMC_R1_PARAMETER_ERROR              6
                             2649 ; 69   |
                             2650 ; 70   |#define MMC_START_BYTE          0xFE
                             2651 ; 71   |
                             2652 ; 72   |#define MMC_CSD_VERSION_10      0
                             2653 ; 73   |#define MMC_CSD_VERSION_11      1
                             2654 ; 74   |#define MMC_CSD_VERSION_12      2
                             2655 ; 75   |#define MMC_CSD_VERSION_FROM_EXT_CSD    3
                             2656 ; 76   |
                             2657 ; 77   |#define MMC_SPEC_VERSION_10     0
                             2658 ; 78   |#define MMC_SPEC_VERSION_14     1
                             2659 ; 79   |#define MMC_SPEC_VERSION_20     2
                             2660 ; 80   |#define MMC_SPEC_VERSION_31     3
                             2661 ; 81   |#define MMC_SPEC_VERSION_40     4
                             2662 ; 82   |
                             2663 ; 83   |#define SD_CSD_VERSION_10       0
                             2664 ; 84   |
                             2665 ; 85   |#define MMC_CARD_TYPE           WORD
                             2666 ; 86   |#define MMC_CARD_TYPE_MMC       (MMC_CARD_TYPE)0
                             2667 ; 87   |#define MMC_CARD_TYPE_SD        (MMC_CARD_TYPE)1
                             2668 ; 88   |
                             2669 ; 89   |#define MMC_SUPPORTED_SECTOR_SIZE   512
                             2670 ; 90   |
                             2671 ; 91   |#define MMC_OCR_SUPPORT (DWORD)0x000000020000
                             2672 ; 92   |
                             2673 ; 93   |//   The STMP3400 max SCK speed is DCLK/6, STMP3410 is DCLK/2:
                             2674 ; 94   |//   Assume a 100MHz DCLK & SCK=DCLK/2=50Mhz. It takes a minimum of 15 DCLKs
                             2675 ; 95   |//   between each SPI byte transfer, so one byte takes (8*2)+15=31 DCLKs.  This
                             2676 ; 96   |//   is a byte rate of 1.612MBytes/s.  Assume all timeouts are 1s.
                             2677 ; 97   |#define MMC_PORT_TIMEOUT            (WORD)(100000000/31)
                             2678 ; 98   |#define MMC_START_BYTE_TIMEOUT      MMC_PORT_TIMEOUT
                             2679 ; 99   |#define MMC_WRITE_BUSY_TIMEOUT      MMC_PORT_TIMEOUT
                             2680 ; 100  |#define MMC_CSD_WRITE_BUSY_TIMEOUT  MMC_PORT_TIMEOUT
                             2681 ; 101  |#define MMC_ERASE_BUSY_TIMEOUT      MMC_PORT_TIMEOUT
                             2682 ; 102  |#define MMC_REGISTER_READ_TIMEOUT   MMC_PORT_TIMEOUT
                             2683 ; 103  |
                             2684 ; 104  |///////////////////////////////////////////////////////////////////////////////
                             2685 ; 105  |// MMC HAL structure definitions
                             2686 ; 106  |///////////////////////////////////////////////////////////////////////////////
                             2687 ; 107  |
                             2688 ; 108  |///////////////////////////////////////////////////////////////////////////////
                             2689 ; 109  |// MMC definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2690 ; 110  |
                             2691 ; 111  |// ifdef this struct for SPI or MMCBUS (currently only support SPI)
                             2692 ; 112  |typedef struct {
                             2693 ; 113  |    _X WORD *wGpioBase;
                             2694 ; 114  |    WORD wGpioSetMask;
                             2695 ; 115  |    WORD wGpioClearMask;
                             2696 ; 116  |    _X WORD *wWriteProtectGpioBase;
                             2697 ; 117  |    WORD wWriteProtectGpioSetMask;
                             2698 ; 118  |    WORD wWriteProtectGpioClearMask;
                             2699 ; 119  |    _X WORD *wMediaDetectGpioBase;
                             2700 ; 120  |    WORD wMediaDetectGpioSetMask;
                             2701 ; 121  |    WORD wMediaDetectGpioClearMask;
                             2702 ; 122  |    WORD wMediaDetectPolarity;
                             2703 ; 123  |    WORD wSpiDeviceNumber;
                             2704 ; 124  |    BOOL bSPIBusInitialized;
                             2705 ; 125  |} MMC_PHYSICAL_BUS;
                             2706 ; 126  |
                             2707 ; 127  |typedef struct {
                             2708 ; 128  |    WORD wCommand;
                             2709 ; 129  |    WORD wArg3;
                             2710 ; 130  |    WORD wArg2;
                             2711 ; 131  |    WORD wArg1;
                             2712 ; 132  |    WORD wArg0;
                             2713 ; 133  |    WORD wCRC7;
                             2714 ; 134  |} MMC_CMD;
                             2715 ; 135  |
                             2716 ; 136  |typedef union {
                             2717 ; 137  |    struct {
                             2718 ; 138  |        WORD Idle            : 1;
                             2719 ; 139  |        WORD EraseReset      : 1;
                             2720 ; 140  |        WORD IllCommand      : 1;
                             2721 ; 141  |        WORD ComCrcError     : 1;
                             2722 ; 142  |        WORD EraseSeqError   : 1;
                             2723 ; 143  |        WORD AddressError    : 1;
                             2724 ; 144  |        WORD ParamError      : 1;
                             2725 ; 145  |        WORD ZeroBit         : 1;
                             2726 ; 146  |    } B;
                             2727 ; 147  |    WORD I;
                             2728 ; 148  |} MMC_RESPONSE_R1;
                             2729 ; 149  |
                             2730 ; 150  |typedef union {
                             2731 ; 151  |    struct {
                             2732 ; 152  |        WORD CardLocked      : 1;
                             2733 ; 153  |        WORD WpeLucf         : 1;
                             2734 ; 154  |        WORD Error           : 1;
                             2735 ; 155  |        WORD CCError         : 1;
                             2736 ; 156  |        WORD CardEccFail     : 1;
                             2737 ; 157  |        WORD WpViolation     : 1;
                             2738 ; 158  |        WORD EraseParam      : 1;
                             2739 ; 159  |        WORD OorCsdovw       : 1;
                             2740 ; 160  |        WORD Idle            : 1;
                             2741 ; 161  |        WORD EraseReset      : 1;
                             2742 ; 162  |        WORD IllCommand      : 1;
                             2743 ; 163  |        WORD ComCrcError     : 1;
                             2744 ; 164  |        WORD EraseSeqError   : 1;
                             2745 ; 165  |        WORD AddressError    : 1;
                             2746 ; 166  |        WORD ParamError      : 1;
                             2747 ; 167  |    } B;
                             2748 ; 168  |    WORD I;
                             2749 ; 169  |} MMC_RESPONSE_R2;
                             2750 ; 170  |
                             2751 ; 171  |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2752 ; 172  |    DWORD dwOcr;
                             2753 ; 173  |    MMC_RESPONSE_R1 R1;
                             2754 ; 174  |} MMC_RESPONSE_R3;
                             2755 ; 175  |
                             2756 ; 176  |typedef union {
                             2757 ; 177  |    MMC_RESPONSE_R1 R1;
                             2758 ; 178  |    MMC_RESPONSE_R2 R2;
                             2759 ; 179  |    MMC_RESPONSE_R3 R3;
                             2760 ; 180  |} MMC_RESPONSE;
                             2761 ; 181  |    
                             2762 ; 182  |
                             2763 ; 183  |///////////////////////////////////////////////////////////////////////////////
                             2764 ; 184  |// MMC prototypes
                             2765 ; 185  |///////////////////////////////////////////////////////////////////////////////
                             2766 ; 186  |
                             2767 ; 187  |// functions that map directly to MMC commands
                             2768 ; 188  |RETCODE _reentrant HalMmcGoIdleStateSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Re
                                  sponse);
                             2769 ; 189  |RETCODE _reentrant HalMmcSendOpCondSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Res
                                  ponse);
                             2770 ; 190  |RETCODE _reentrant HalMmcSendCidSync(MMC_PHYSICAL_BUS * pBusPointer, WORD _X pwRegBuffer[]
                                  ,
                             2771 ; 191  |    MMC_RESPONSE * Response);
                             2772 ; 192  |RETCODE _reentrant HalMmcSendCsdSync(MMC_PHYSICAL_BUS * pBusPointer, WORD _X pwRegBuffer[]
                                  ,
                             2773 ; 193  |    MMC_RESPONSE * Response);
                             2774 ; 194  |RETCODE _reentrant HalMmcAppCmdSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Respons
                                  e);
                             2775 ; 195  |RETCODE _reentrant HalMmcReadOcrSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Respon
                                  se);
                             2776 ; 196  |RETCODE _reentrant HalMmcSendStatusSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Res
                                  ponse);
                             2777 ; 197  |RETCODE _reentrant HalMmcReadSingleBlockSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddre
                                  ss,
                             2778 ; 198  |    WORD _X pwReadBuffer[], MMC_RESPONSE * Response);
                             2779 ; 199  |RETCODE _reentrant HalMmcProgramCsdSync(MMC_PHYSICAL_BUS * pBusPointer, WORD _X pwRegBuffe
                                  r[],
                             2780 ; 200  |    MMC_RESPONSE * Response);
                             2781 ; 201  |RETCODE _reentrant HalMmcSetBlocklenSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwLength, 
                             2782 ; 202  |    MMC_RESPONSE * Response);
                             2783 ; 203  |RETCODE _reentrant HalMmcBusInit(MMC_PHYSICAL_BUS * pBusPointer);
                             2784 ; 204  |
                             2785 ; 205  |RETCODE _reentrant HalMmcWriteBlockSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddress,
                             2786 ; 206  |    WORD _X pwWriteBuffer[], MMC_RESPONSE * Response);
                             2787 ; 207  |RETCODE _reentrant HalMmcWriteMultipleBlockFirstSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD
                                   dwAddress,
                             2788 ; 208  |    WORD _X pwWriteBuffer[], MMC_RESPONSE * Response);
                             2789 ; 209  |RETCODE _reentrant HalMmcWriteMultipleBlockNextSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD 
                                  dwAddress,
                             2790 ; 210  |    WORD _X pwWriteBuffer[], MMC_RESPONSE * Response);
                             2791 ; 211  |RETCODE _reentrant HalMmcWriteMultipleBlockEndSync(MMC_PHYSICAL_BUS * pBusPointer);
                             2792 ; 212  |RETCODE _reentrant HalMmcTagSectorStartSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddres
                                  s,
                             2793 ; 213  |    MMC_RESPONSE * Response);
                             2794 ; 214  |RETCODE _reentrant HalMmcTagSectorEndSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddress,
                                  
                             2795 ; 215  |    MMC_RESPONSE * Response);
                             2796 ; 216  |RETCODE _reentrant HalMmcTagEraseGroupStartSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAd
                                  dress,
                             2797 ; 217  |    MMC_RESPONSE * Response);
                             2798 ; 218  |RETCODE _reentrant HalMmcTagEraseGroupEndSync(MMC_PHYSICAL_BUS * pBusPointer, DWORD dwAddr
                                  ess,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2799 ; 219  |    MMC_RESPONSE * Response);
                             2800 ; 220  |RETCODE _reentrant HalMmcErase(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Response);
                             2801 ; 221  |
                             2802 ; 222  |// functions that map directly to SD commands
                             2803 ; 223  |RETCODE _reentrant HalSdSendOpCondSync(MMC_PHYSICAL_BUS * pBusPointer, MMC_RESPONSE * Resp
                                  onse);
                             2804 ; 224  |
                             2805 ; 225  |// other HAL functions
                             2806 ; 226  |#ifdef MMC_SEMAPHORE
                             2807 ; 227  |RETCODE _reentrant HalMmcPhysicalGrab(WORD wNum);
                             2808 ; 228  |RETCODE _reentrant HalMmcPhysicalRelease(WORD wNum);
                             2809 ; 229  |#endif
                             2810 ; 230  |BOOL _reentrant HalMmcIsDeviceInserted(MMC_PHYSICAL_BUS * pBusPointer);
                             2811 ; 231  |
                             2812 ; 232  |// ancillary functions
                             2813 ; 233  |RETCODE _reentrant MmcSendCommandSync(MMC_PHYSICAL_BUS * pBusPointer, WORD wCommand, 
                             2814 ; 234  |    DWORD dwArgument, MMC_RESPONSE * Response, MMC_RESPONSE_TYPE ResponseType);
                             2815 ; 235  |RETCODE _reentrant MmcWaitForRegisterSync(MMC_PHYSICAL_BUS * pBusPointer);
                             2816 ; 236  |RETCODE _reentrant MmcTransactionCompleteSync(MMC_PHYSICAL_BUS * pBusPointer);
                             2817 ; 237  |RETCODE _reentrant MmcCalcCommandCrc(MMC_CMD * pCmd);
                             2818 ; 238  |
                             2819 ; 239  |#endif // #ifndef _MMCHAL_H
                             2820 
                             2822 
                             2823 ; 15   |#include "MMCHalFunctions.h"
                             2824 
                             2826 
                             2827 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2828 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                             2829 ; 3    |//
                             2830 ; 4    |// Filename: MMCHalFunctions.h
                             2831 ; 5    |// Description: 
                             2832 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2833 ; 7    |
                             2834 ; 8    |#ifndef _MMC_HAL_FUNCTIONS_H
                             2835 ; 9    |#define _MMC_HAL_FUNCTIONS_H
                             2836 ; 10   |
                             2837 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             2838 ; 12   |// Includes
                             2839 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             2840 ; 14   |
                             2841 ; 15   |///////////////////////////////////////////////////////////////////////////////
                             2842 ; 16   |// Definitions
                             2843 ; 17   |///////////////////////////////////////////////////////////////////////////////
                             2844 ; 18   |
                             2845 ; 19   |///////////////////////////////////////////////////////////////////////////////
                             2846 ; 20   |// Error codes
                             2847 ; 21   |///////////////////////////////////////////////////////////////////////////////
                             2848 ; 22   |
                             2849 ; 23   |///////////////////////////////////////////////////////////////////////////////
                             2850 ; 24   |// Typedefs
                             2851 ; 25   |///////////////////////////////////////////////////////////////////////////////
                             2852 ; 26   |
                             2853 ; 27   |///////////////////////////////////////////////////////////////////////////////
                             2854 ; 28   |// Prototypes
                             2855 ; 29   |///////////////////////////////////////////////////////////////////////////////
                             2856 ; 30   |void MMCHalInit(void);
                             2857 ; 31   |BOOL MMCHalDetectPresence(MMC_PHYSICAL_BUS * pBusPointer);
                             2858 ; 32   |WORD MMCHalCheckWriteProtect(MMC_PHYSICAL_BUS * pBusPointer);
                             2859 ; 33   |
                             2860 ; 34   |#endif // #ifndef _MMC_HAL_FUNCTIONS_H
                             2861 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2863 
                             2864 ; 16   |//#include "regs3410.h" 
                             2865 ; 17   |#include "lowresolutionadc.h"
                             2866 
                             2868 
                             2869 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             2870 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                             2871 ; 3    |//;
                             2872 ; 4    |//; Filename:    lowresolutionadc.h
                             2873 ; 5    |//; Description: General purpose interface to LRADCs
                             2874 ; 6    |//;              Generic symbols are mapped to more specific symbols in inc\34xx\regslradc
                                  .inc files
                             2875 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                             2876 ; 8    |
                             2877 ; 9    |#ifndef _LOWRESOLUTIONADC_H
                             2878 ; 10   |#define _LOWRESOLUTIONADC_H
                             2879 ; 11   |
                             2880 ; 12   |#include "regslradc.h"
                             2881 
                             2883 
                             2884 ; 1    |#if !(defined(regslradcinc))
                             2885 ; 2    |
                             2886 ; 3    |#define regslradcinc 1
                             2887 ; 4    |
                             2888 ; 5    |#include "types.h"
                             2889 
                             2891 
                             2892 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2893 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2894 ; 3    |//
                             2895 ; 4    |// Filename: types.h
                             2896 ; 5    |// Description: Standard data types
                             2897 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2898 ; 7    |
                             2899 ; 8    |#ifndef _TYPES_H
                             2900 ; 9    |#define _TYPES_H
                             2901 ; 10   |
                             2902 ; 11   |// TODO:  move this outta here!
                             2903 ; 12   |#if !defined(NOERROR)
                             2904 ; 13   |#define NOERROR 0
                             2905 ; 14   |#define SUCCESS 0
                             2906 ; 15   |#endif 
                             2907 ; 16   |#if !defined(SUCCESS)
                             2908 ; 17   |#define SUCCESS  0
                             2909 ; 18   |#endif
                             2910 ; 19   |#if !defined(ERROR)
                             2911 ; 20   |#define ERROR   -1
                             2912 ; 21   |#endif
                             2913 ; 22   |#if !defined(FALSE)
                             2914 ; 23   |#define FALSE 0
                             2915 ; 24   |#endif
                             2916 ; 25   |#if !defined(TRUE)
                             2917 ; 26   |#define TRUE  1
                             2918 ; 27   |#endif
                             2919 ; 28   |
                             2920 ; 29   |#if !defined(NULL)
                             2921 ; 30   |#define NULL 0
                             2922 ; 31   |#endif
                             2923 ; 32   |
                             2924 ; 33   |#define MAX_INT     0x7FFFFF
                             2925 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2926 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2927 ; 36   |#define MAX_ULONG   (-1) 
                             2928 ; 37   |
                             2929 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2930 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2931 ; 40   |
                             2932 ; 41   |
                             2933 ; 42   |#define BYTE    unsigned char       // btVarName
                             2934 ; 43   |#define CHAR    signed char         // cVarName
                             2935 ; 44   |#define USHORT  unsigned short      // usVarName
                             2936 ; 45   |#define SHORT   unsigned short      // sVarName
                             2937 ; 46   |#define WORD    unsigned int        // wVarName
                             2938 ; 47   |#define INT     signed int          // iVarName
                             2939 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2940 ; 49   |#define LONG    signed long         // lVarName
                             2941 ; 50   |#define BOOL    unsigned int        // bVarName
                             2942 ; 51   |#define FRACT   _fract              // frVarName
                             2943 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2944 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2945 ; 54   |#define FLOAT   float               // fVarName
                             2946 ; 55   |#define DBL     double              // dVarName
                             2947 ; 56   |#define ENUM    enum                // eVarName
                             2948 ; 57   |#define CMX     _complex            // cmxVarName
                             2949 ; 58   |typedef WORD UCS3;                   // 
                             2950 ; 59   |
                             2951 ; 60   |#define UINT16  unsigned short
                             2952 ; 61   |#define UINT8   unsigned char   
                             2953 ; 62   |#define UINT32  unsigned long
                             2954 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2955 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2956 ; 65   |#define WCHAR   UINT16
                             2957 ; 66   |
                             2958 ; 67   |//UINT128 is 16 bytes or 6 words
                             2959 ; 68   |typedef struct UINT128_3500 {   
                             2960 ; 69   |    int val[6];     
                             2961 ; 70   |} UINT128_3500;
                             2962 ; 71   |
                             2963 ; 72   |#define UINT128   UINT128_3500
                             2964 ; 73   |
                             2965 ; 74   |// Little endian word packed byte strings:   
                             2966 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2967 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2968 ; 77   |// Little endian word packed byte strings:   
                             2969 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2970 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2971 ; 80   |
                             2972 ; 81   |// Declare Memory Spaces To Use When Coding
                             2973 ; 82   |// A. Sector Buffers
                             2974 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2975 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2976 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2977 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2978 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2979 ; 88   |// B. Media DDI Memory
                             2980 ; 89   |#define MEDIA_DDI_MEM _Y
                             2981 ; 90   |
                             2982 ; 91   |
                             2983 ; 92   |
                             2984 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2985 ; 94   |// Examples of circular pointers:
                             2986 ; 95   |//    INT CIRC cpiVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2987 ; 96   |//    DWORD CIRC cpdwVarName
                             2988 ; 97   |
                             2989 ; 98   |#define RETCODE INT                 // rcVarName
                             2990 ; 99   |
                             2991 ; 100  |// generic bitfield structure
                             2992 ; 101  |struct Bitfield {
                             2993 ; 102  |    unsigned int B0  :1;
                             2994 ; 103  |    unsigned int B1  :1;
                             2995 ; 104  |    unsigned int B2  :1;
                             2996 ; 105  |    unsigned int B3  :1;
                             2997 ; 106  |    unsigned int B4  :1;
                             2998 ; 107  |    unsigned int B5  :1;
                             2999 ; 108  |    unsigned int B6  :1;
                             3000 ; 109  |    unsigned int B7  :1;
                             3001 ; 110  |    unsigned int B8  :1;
                             3002 ; 111  |    unsigned int B9  :1;
                             3003 ; 112  |    unsigned int B10 :1;
                             3004 ; 113  |    unsigned int B11 :1;
                             3005 ; 114  |    unsigned int B12 :1;
                             3006 ; 115  |    unsigned int B13 :1;
                             3007 ; 116  |    unsigned int B14 :1;
                             3008 ; 117  |    unsigned int B15 :1;
                             3009 ; 118  |    unsigned int B16 :1;
                             3010 ; 119  |    unsigned int B17 :1;
                             3011 ; 120  |    unsigned int B18 :1;
                             3012 ; 121  |    unsigned int B19 :1;
                             3013 ; 122  |    unsigned int B20 :1;
                             3014 ; 123  |    unsigned int B21 :1;
                             3015 ; 124  |    unsigned int B22 :1;
                             3016 ; 125  |    unsigned int B23 :1;
                             3017 ; 126  |};
                             3018 ; 127  |
                             3019 ; 128  |union BitInt {
                             3020 ; 129  |        struct Bitfield B;
                             3021 ; 130  |        int        I;
                             3022 ; 131  |};
                             3023 ; 132  |
                             3024 ; 133  |#define MAX_MSG_LENGTH 10
                             3025 ; 134  |struct CMessage
                             3026 ; 135  |{
                             3027 ; 136  |        unsigned int m_uLength;
                             3028 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3029 ; 138  |};
                             3030 ; 139  |
                             3031 ; 140  |typedef struct {
                             3032 ; 141  |    WORD m_wLength;
                             3033 ; 142  |    WORD m_wMessage;
                             3034 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3035 ; 144  |} Message;
                             3036 ; 145  |
                             3037 ; 146  |struct MessageQueueDescriptor
                             3038 ; 147  |{
                             3039 ; 148  |        int *m_pBase;
                             3040 ; 149  |        int m_iModulo;
                             3041 ; 150  |        int m_iSize;
                             3042 ; 151  |        int *m_pHead;
                             3043 ; 152  |        int *m_pTail;
                             3044 ; 153  |};
                             3045 ; 154  |
                             3046 ; 155  |struct ModuleEntry
                             3047 ; 156  |{
                             3048 ; 157  |    int m_iSignaledEventMask;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3049 ; 158  |    int m_iWaitEventMask;
                             3050 ; 159  |    int m_iResourceOfCode;
                             3051 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3052 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3053 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3054 ; 163  |    int m_uTimeOutHigh;
                             3055 ; 164  |    int m_uTimeOutLow;
                             3056 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3057 ; 166  |};
                             3058 ; 167  |
                             3059 ; 168  |union WaitMask{
                             3060 ; 169  |    struct B{
                             3061 ; 170  |        unsigned int m_bNone     :1;
                             3062 ; 171  |        unsigned int m_bMessage  :1;
                             3063 ; 172  |        unsigned int m_bTimer    :1;
                             3064 ; 173  |        unsigned int m_bButton   :1;
                             3065 ; 174  |    } B;
                             3066 ; 175  |    int I;
                             3067 ; 176  |} ;
                             3068 ; 177  |
                             3069 ; 178  |
                             3070 ; 179  |struct Button {
                             3071 ; 180  |        WORD wButtonEvent;
                             3072 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3073 ; 182  |};
                             3074 ; 183  |
                             3075 ; 184  |struct Message {
                             3076 ; 185  |        WORD wMsgLength;
                             3077 ; 186  |        WORD wMsgCommand;
                             3078 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3079 ; 188  |};
                             3080 ; 189  |
                             3081 ; 190  |union EventTypes {
                             3082 ; 191  |        struct CMessage msg;
                             3083 ; 192  |        struct Button Button ;
                             3084 ; 193  |        struct Message Message;
                             3085 ; 194  |};
                             3086 ; 195  |
                             3087 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3088 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3089 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3090 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3091 ; 200  |
                             3092 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3093 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3094 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3095 ; 204  |
                             3096 ; 205  |#if DEBUG
                             3097 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3098 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3099 ; 208  |#else 
                             3100 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3101 ; 210  |#define DebugBuildAssert(x)    
                             3102 ; 211  |#endif
                             3103 ; 212  |
                             3104 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3105 ; 214  |//  #pragma asm
                             3106 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3107 ; 216  |//  #pragma endasm
                             3108 ; 217  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3109 ; 218  |
                             3110 ; 219  |#ifdef COLOR_262K
                             3111 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3112 ; 221  |#elif defined(COLOR_65K)
                             3113 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3114 ; 223  |#else
                             3115 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3116 ; 225  |#endif
                             3117 ; 226  |    
                             3118 ; 227  |#endif // #ifndef _TYPES_H
                             3119 
                             3121 
                             3122 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3123 ; 7    |
                             3124 ; 8    |//   SYSTEM STMP Registers 
                             3125 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             3126 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3127 ; 11   |
                             3128 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             3129 ; 13   |
                             3130 ; 14   |
                             3131 ; 15   |
                             3132 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             3133 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             3134 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             3135 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             3136 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             3137 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             3138 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             3139 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             3140 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             3141 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             3142 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             3143 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             3144 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             3145 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             3146 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             3147 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             3148 ; 32   |
                             3149 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             3150 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             3151 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             3152 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             3153 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             3154 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             3155 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             3156 ; 40   |
                             3157 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             3158 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             3159 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             3160 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             3161 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             3162 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3163 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             3164 ; 48   |
                             3165 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             3166 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             3167 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             3168 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             3169 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             3170 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             3171 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             3172 ; 56   |
                             3173 ; 57   |typedef union               
                             3174 ; 58   |{
                             3175 ; 59   |    struct {
                             3176 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             3177 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             3178 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             3179 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             3180 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             3181 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             3182 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             3183 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             3184 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             3185 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             3186 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                             3187 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             3188 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             3189 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             3190 ; 74   |    } B;
                             3191 ; 75   |   unsigned int I;
                             3192 ; 76   |        unsigned int U;
                             3193 ; 77   |} lradc_ctrl_type;
                             3194 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             3195 ; 79   |
                             3196 ; 80   |
                             3197 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             3198 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             3199 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             3200 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             3201 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             3202 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             3203 ; 87   |
                             3204 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             3205 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             3206 ; 90   |
                             3207 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             3208 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             3209 ; 93   |
                             3210 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             3211 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             3212 ; 96   |
                             3213 ; 97   |
                             3214 ; 98   |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3215 ; 99   |{
                             3216 ; 100  |    struct {
                             3217 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             3218 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             3219 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             3220 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             3221 ; 105  |    } B;
                             3222 ; 106  |    unsigned int I;
                             3223 ; 107  |} lradc_thrsh_type;
                             3224 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             3225 ; 109  |
                             3226 ; 110  |
                             3227 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             3228 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             3229 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             3230 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             3231 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             3232 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             3233 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             3234 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             3235 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             3236 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             3237 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             3238 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             3239 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             3240 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             3241 ; 125  |
                             3242 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             3243 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             3244 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             3245 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             3246 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             3247 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             3248 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             3249 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             3250 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             3251 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             3252 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             3253 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             3254 ; 138  |
                             3255 ; 139  |
                             3256 ; 140  |
                             3257 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             3258 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             3259 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             3260 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             3261 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             3262 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             3263 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             3264 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             3265 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3266 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             3267 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             3268 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             3269 ; 153  |
                             3270 ; 154  |
                             3271 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             3272 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             3273 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             3274 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             3275 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             3276 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             3277 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             3278 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             3279 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             3280 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             3281 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             3282 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             3283 ; 167  |
                             3284 ; 168  |typedef union               
                             3285 ; 169  |{
                             3286 ; 170  |    struct {
                             3287 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             3288 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             3289 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             3290 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             3291 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             3292 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             3293 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             3294 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             3295 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             3296 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             3297 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             3298 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             3299 ; 183  |    } B;
                             3300 ; 184  |    unsigned int I;
                             3301 ; 185  |} lradc_result_type;
                             3302 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             3303 ; 187  |
                             3304 ; 188  |
                             3305 ; 189  |
                             3306 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             3307 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             3308 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             3309 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             3310 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             3311 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             3312 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             3313 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             3314 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             3315 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             3316 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             3317 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             3318 ; 202  |
                             3319 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             3320 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3321 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             3322 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             3323 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             3324 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             3325 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             3326 ; 210  |
                             3327 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             3328 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             3329 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             3330 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                             3331 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             3332 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             3333 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             3334 ; 218  |
                             3335 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             3336 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             3337 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             3338 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             3339 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             3340 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             3341 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             3342 ; 226  |
                             3343 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             3344 ; 228  |
                             3345 ; 229  |
                             3346 ; 230  |
                             3347 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             3348 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             3349 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             3350 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             3351 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             3352 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             3353 ; 237  |
                             3354 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             3355 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             3356 ; 240  |
                             3357 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             3358 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             3359 ; 243  |
                             3360 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             3361 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             3362 ; 246  |
                             3363 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             3364 ; 248  |
                             3365 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             3366 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             3367 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3368 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             3369 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             3370 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             3371 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             3372 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             3373 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             3374 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             3375 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             3376 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             3377 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             3378 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             3379 ; 263  |
                             3380 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             3381 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             3382 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             3383 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             3384 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             3385 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             3386 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             3387 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             3388 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             3389 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             3390 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             3391 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             3392 ; 276  |
                             3393 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             3394 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             3395 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             3396 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             3397 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             3398 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             3399 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             3400 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             3401 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             3402 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             3403 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             3404 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             3405 ; 289  |
                             3406 ; 290  |
                             3407 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             3408 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             3409 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             3410 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             3411 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             3412 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             3413 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             3414 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             3415 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             3416 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             3417 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3418 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             3419 ; 303  |
                             3420 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             3421 ; 305  |
                             3422 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             3423 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             3424 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             3425 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             3426 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             3427 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             3428 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             3429 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             3430 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             3431 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             3432 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             3433 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             3434 ; 318  |
                             3435 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             3436 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             3437 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             3438 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             3439 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             3440 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             3441 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             3442 ; 326  |
                             3443 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             3444 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             3445 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             3446 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             3447 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             3448 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             3449 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             3450 ; 334  |
                             3451 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             3452 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             3453 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             3454 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             3455 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             3456 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             3457 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             3458 ; 342  |
                             3459 ; 343  |
                             3460 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             3461 ; 345  |
                             3462 ; 346  |
                             3463 ; 347  |
                             3464 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             3465 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3466 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             3467 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             3468 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             3469 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             3470 ; 354  |
                             3471 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             3472 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             3473 ; 357  |
                             3474 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             3475 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             3476 ; 360  |
                             3477 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             3478 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             3479 ; 363  |
                             3480 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             3481 ; 365  |
                             3482 ; 366  |
                             3483 ; 367  |
                             3484 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             3485 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             3486 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             3487 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             3488 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             3489 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             3490 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             3491 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             3492 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             3493 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             3494 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             3495 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             3496 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             3497 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             3498 ; 382  |
                             3499 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             3500 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             3501 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             3502 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             3503 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             3504 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             3505 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             3506 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             3507 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             3508 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             3509 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             3510 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             3511 ; 395  |
                             3512 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             3513 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             3514 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             3515 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             3516 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3517 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             3518 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             3519 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             3520 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             3521 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             3522 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             3523 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                             3524 ; 408  |
                             3525 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             3526 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             3527 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             3528 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             3529 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             3530 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             3531 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             3532 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             3533 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             3534 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             3535 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             3536 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             3537 ; 421  |
                             3538 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             3539 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             3540 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             3541 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             3542 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             3543 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             3544 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             3545 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             3546 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             3547 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             3548 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             3549 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             3550 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             3551 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             3552 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             3553 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             3554 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             3555 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             3556 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             3557 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             3558 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             3559 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             3560 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             3561 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             3562 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             3563 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             3564 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3565 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             3566 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             3567 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             3568 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             3569 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             3570 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             3571 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             3572 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             3573 ; 457  |
                             3574 ; 458  |//Needed by button.asm
                             3575 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             3576 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             3577 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             3578 ; 462  |
                             3579 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             3580 ; 464  |
                             3581 ; 465  |#endif
                             3582 ; 466  |
                             3583 ; 467  |
                             3584 
                             3586 
                             3587 ; 13   |
                             3588 ; 14   |// Variables
                             3589 ; 15   |extern WORD LowResAdcStatus;
                             3590 ; 16   |extern WORD LowResAdcBattResult, LowResAdcBattAvg;                                      //
                                   Results and Averages come from buttons.asm
                             3591 ; 17   |extern WORD LowResAdcAuxResult,  LowResAdcAuxAvg;
                             3592 ; 18   |extern WORD LowResAdcAux2Result, LowResAdcAux2Avg;                                      //
                                   Aux2 result and average valid for 3500
                             3593 ; 19   |
                             3594 ; 20   |
                             3595 ; 21   |// Types
                             3596 ; 22   |enum LowResADCChannel {BATT, AUX, AUX2};                                                  
                                    // AUX2 valid for 3500
                             3597 ; 23   |enum LowResADCHalfPwr {OFF = 0, ON = LRADC_HALF_POWER_SETMASK};
                             3598 ; 24   |enum LowResADCRef     {REF_0 = HW_LRADC_REF_0_SETMASK,
                             3599 ; 25   |                       REF_1 = HW_LRADC_REF_1_SETMASK,
                             3600 ; 26   |                                           REF_2 = HW_LRADC_REF_2_SETMASK,
                             3601 ; 27   |                                           REF_3 = HW_LRADC_REF_3_SETMASK,
                             3602 ; 28   |                                           REF_4 = HW_LRADC_REF_4_SETMASK,
                             3603 ; 29   |                                           REF_5 = HW_LRADC_REF_5_SETMASK,
                             3604 ; 30   |                                           REF_6 = HW_LRADC_REF_6_SETMASK,
                             3605 ; 31   |                                           REF_7 = HW_LRADC_REF_7_SETMASK
                             3606 ; 32   |                      };
                             3607 ; 33   |
                             3608 ; 34   |
                             3609 ; 35   |// ADC Reference resolutions in mV*10
                             3610 ; 36   |// 1 ADC count = Vref(mV)/([2^N] - 1) where N = # bits in result, and Vref based on select
                                  ed LRADC reference.
                             3611 ; 37   |#define RES_REF_0      HW_LRADC_RES_REF_0
                             3612 ; 38   |#define RES_REF_1      HW_LRADC_RES_REF_1
                             3613 ; 39   |#define RES_REF_2      HW_LRADC_RES_REF_2
                             3614 ; 40   |#define RES_REF_3      HW_LRADC_RES_REF_3
                             3615 ; 41   |#define RES_REF_4      HW_LRADC_RES_REF_4
                             3616 ; 42   |#define RES_REF_5      HW_LRADC_RES_REF_5
                             3617 ; 43   |#define RES_REF_6      HW_LRADC_RES_REF_6
                             3618 ; 44   |#define RES_REF_7      HW_LRADC_RES_REF_7
                             3619 ; 45   |
                             3620 ; 46   |
                             3621 ; 47   |// These bits are used against LowResAdcStatus, to signal which channels to read in button
                                  s routine
                             3622 ; 48   |#define LOW_RES_ADC_BATT_EN_MASK    1 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3623 ; 49   |#define LOW_RES_ADC_AUX_EN_MASK         2 
                             3624 ; 50   |#define LOW_RES_ADC_AUX2_EN_MASK        4
                             3625 ; 51   |
                             3626 ; 52   |/////////////////////////////////////////////////////////////////////////////////////////
                             3627 ; 53   |//
                             3628 ; 54   |//>  Name:          SysLowResolutionAdcReadBin
                             3629 ; 55   |//
                             3630 ; 56   |//   Type:          Function 
                             3631 ; 57   |//
                             3632 ; 58   |//   Description:   Returns the instantaneous Result of the Low Resolution ADC Channel spe
                                  cified
                             3633 ; 59   |//
                             3634 ; 60   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                             3635 ; 61   |//                  BATT for Battery channel
                             3636 ; 62   |//                  AUX for Auxiliary channel 1
                             3637 ; 63   |//                  AUX2 for Auxiliary channel 2
                             3638 ; 64   |//
                             3639 ; 65   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                             3640 ; 66   |//
                             3641 ; 67   |//   Notes:         none
                             3642 ; 68   |//<
                             3643 ; 69   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             3644 ; 70   |#ifdef DEVICE_3500
                             3645 ; 71   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_BATT_RESULT.B.DATA_OUT : (n == AUX 
                                  ? HW_LRADC1_RESULT.B.DATA_OUT: HW_LRADC2_RESULT.B.DATA_OUT))
                             3646 ; 72   |#else
                             3647 ; 73   |//3410 does not support AUX2
                             3648 ; 74   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_LRADC_RES.B.BATLRR : (n == AUX ? HW
                                  _LRADC_RES.B.AUXLRR: 0))
                             3649 ; 75   |#endif
                             3650 ; 76   |
                             3651 ; 77   |/////////////////////////////////////////////////////////////////////////////////////////
                             3652 ; 78   |//
                             3653 ; 79   |//>  Name:          SysLowResolutionAdcReadAvg
                             3654 ; 80   |//
                             3655 ; 81   |//   Type:          Function 
                             3656 ; 82   |//
                             3657 ; 83   |//   Description:   Reads the Averaged Result of the Low Resolution ADC Channel specified
                             3658 ; 84   |//
                             3659 ; 85   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                             3660 ; 86   |//                  BATT for Battery channel
                             3661 ; 87   |//                  AUX for Auxiliary channel 1
                             3662 ; 88   |//                  AUX2 for Auxiliary channel 2
                             3663 ; 89   |//
                             3664 ; 90   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                             3665 ; 91   |//
                             3666 ; 92   |//   Notes:         The average is done using 256 samples
                             3667 ; 93   |//<
                             3668 ; 94   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             3669 ; 95   |#define SysLowResolutionAdcReadAvg(n)    (n==BATT ? LowResAdcBattAvg : (n == AUX ? LowResA
                                  dcAuxAvg : LowResAdcAux2Avg))
                             3670 ; 96   |
                             3671 ; 97   |// Functions  
                             3672 ; 98   |void _reentrant SysLowResolutionADCInit(enum LowResADCChannel Adc, enum LowResADCHalfPwr P
                                  ower, enum LowResADCRef Ref);
                             3673 ; 99   |INT SysLowResolutionAdcReadVolt(BYTE bAdcChannel,BOOL bAverage);
                             3674 ; 100  |
                             3675 ; 101  |// Equates
                             3676 ; 102  |#define AVERAGE_RESULT  TRUE
                             3677 ; 103  |#define INSTANT_RESULT  FALSE
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3678 ; 104  |
                             3679 ; 105  |#endif // _LOWRESOLUTIONADC_H
                             3680 
                             3682 
                             3683 ; 18   |#include "regsgpio.h"
                             3684 
                             3686 
                             3687 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             3688 ; 2    |#define __REGS_GPIO_INC 1
                             3689 ; 3    |
                             3690 ; 4    |#include "types.h"
                             3691 
                             3693 
                             3694 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3695 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3696 ; 3    |//
                             3697 ; 4    |// Filename: types.h
                             3698 ; 5    |// Description: Standard data types
                             3699 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3700 ; 7    |
                             3701 ; 8    |#ifndef _TYPES_H
                             3702 ; 9    |#define _TYPES_H
                             3703 ; 10   |
                             3704 ; 11   |// TODO:  move this outta here!
                             3705 ; 12   |#if !defined(NOERROR)
                             3706 ; 13   |#define NOERROR 0
                             3707 ; 14   |#define SUCCESS 0
                             3708 ; 15   |#endif 
                             3709 ; 16   |#if !defined(SUCCESS)
                             3710 ; 17   |#define SUCCESS  0
                             3711 ; 18   |#endif
                             3712 ; 19   |#if !defined(ERROR)
                             3713 ; 20   |#define ERROR   -1
                             3714 ; 21   |#endif
                             3715 ; 22   |#if !defined(FALSE)
                             3716 ; 23   |#define FALSE 0
                             3717 ; 24   |#endif
                             3718 ; 25   |#if !defined(TRUE)
                             3719 ; 26   |#define TRUE  1
                             3720 ; 27   |#endif
                             3721 ; 28   |
                             3722 ; 29   |#if !defined(NULL)
                             3723 ; 30   |#define NULL 0
                             3724 ; 31   |#endif
                             3725 ; 32   |
                             3726 ; 33   |#define MAX_INT     0x7FFFFF
                             3727 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3728 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3729 ; 36   |#define MAX_ULONG   (-1) 
                             3730 ; 37   |
                             3731 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3732 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3733 ; 40   |
                             3734 ; 41   |
                             3735 ; 42   |#define BYTE    unsigned char       // btVarName
                             3736 ; 43   |#define CHAR    signed char         // cVarName
                             3737 ; 44   |#define USHORT  unsigned short      // usVarName
                             3738 ; 45   |#define SHORT   unsigned short      // sVarName
                             3739 ; 46   |#define WORD    unsigned int        // wVarName
                             3740 ; 47   |#define INT     signed int          // iVarName
                             3741 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3742 ; 49   |#define LONG    signed long         // lVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3743 ; 50   |#define BOOL    unsigned int        // bVarName
                             3744 ; 51   |#define FRACT   _fract              // frVarName
                             3745 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3746 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3747 ; 54   |#define FLOAT   float               // fVarName
                             3748 ; 55   |#define DBL     double              // dVarName
                             3749 ; 56   |#define ENUM    enum                // eVarName
                             3750 ; 57   |#define CMX     _complex            // cmxVarName
                             3751 ; 58   |typedef WORD UCS3;                   // 
                             3752 ; 59   |
                             3753 ; 60   |#define UINT16  unsigned short
                             3754 ; 61   |#define UINT8   unsigned char   
                             3755 ; 62   |#define UINT32  unsigned long
                             3756 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3757 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3758 ; 65   |#define WCHAR   UINT16
                             3759 ; 66   |
                             3760 ; 67   |//UINT128 is 16 bytes or 6 words
                             3761 ; 68   |typedef struct UINT128_3500 {   
                             3762 ; 69   |    int val[6];     
                             3763 ; 70   |} UINT128_3500;
                             3764 ; 71   |
                             3765 ; 72   |#define UINT128   UINT128_3500
                             3766 ; 73   |
                             3767 ; 74   |// Little endian word packed byte strings:   
                             3768 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3769 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3770 ; 77   |// Little endian word packed byte strings:   
                             3771 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3772 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3773 ; 80   |
                             3774 ; 81   |// Declare Memory Spaces To Use When Coding
                             3775 ; 82   |// A. Sector Buffers
                             3776 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3777 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3778 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3779 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3780 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3781 ; 88   |// B. Media DDI Memory
                             3782 ; 89   |#define MEDIA_DDI_MEM _Y
                             3783 ; 90   |
                             3784 ; 91   |
                             3785 ; 92   |
                             3786 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3787 ; 94   |// Examples of circular pointers:
                             3788 ; 95   |//    INT CIRC cpiVarName
                             3789 ; 96   |//    DWORD CIRC cpdwVarName
                             3790 ; 97   |
                             3791 ; 98   |#define RETCODE INT                 // rcVarName
                             3792 ; 99   |
                             3793 ; 100  |// generic bitfield structure
                             3794 ; 101  |struct Bitfield {
                             3795 ; 102  |    unsigned int B0  :1;
                             3796 ; 103  |    unsigned int B1  :1;
                             3797 ; 104  |    unsigned int B2  :1;
                             3798 ; 105  |    unsigned int B3  :1;
                             3799 ; 106  |    unsigned int B4  :1;
                             3800 ; 107  |    unsigned int B5  :1;
                             3801 ; 108  |    unsigned int B6  :1;
                             3802 ; 109  |    unsigned int B7  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3803 ; 110  |    unsigned int B8  :1;
                             3804 ; 111  |    unsigned int B9  :1;
                             3805 ; 112  |    unsigned int B10 :1;
                             3806 ; 113  |    unsigned int B11 :1;
                             3807 ; 114  |    unsigned int B12 :1;
                             3808 ; 115  |    unsigned int B13 :1;
                             3809 ; 116  |    unsigned int B14 :1;
                             3810 ; 117  |    unsigned int B15 :1;
                             3811 ; 118  |    unsigned int B16 :1;
                             3812 ; 119  |    unsigned int B17 :1;
                             3813 ; 120  |    unsigned int B18 :1;
                             3814 ; 121  |    unsigned int B19 :1;
                             3815 ; 122  |    unsigned int B20 :1;
                             3816 ; 123  |    unsigned int B21 :1;
                             3817 ; 124  |    unsigned int B22 :1;
                             3818 ; 125  |    unsigned int B23 :1;
                             3819 ; 126  |};
                             3820 ; 127  |
                             3821 ; 128  |union BitInt {
                             3822 ; 129  |        struct Bitfield B;
                             3823 ; 130  |        int        I;
                             3824 ; 131  |};
                             3825 ; 132  |
                             3826 ; 133  |#define MAX_MSG_LENGTH 10
                             3827 ; 134  |struct CMessage
                             3828 ; 135  |{
                             3829 ; 136  |        unsigned int m_uLength;
                             3830 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3831 ; 138  |};
                             3832 ; 139  |
                             3833 ; 140  |typedef struct {
                             3834 ; 141  |    WORD m_wLength;
                             3835 ; 142  |    WORD m_wMessage;
                             3836 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3837 ; 144  |} Message;
                             3838 ; 145  |
                             3839 ; 146  |struct MessageQueueDescriptor
                             3840 ; 147  |{
                             3841 ; 148  |        int *m_pBase;
                             3842 ; 149  |        int m_iModulo;
                             3843 ; 150  |        int m_iSize;
                             3844 ; 151  |        int *m_pHead;
                             3845 ; 152  |        int *m_pTail;
                             3846 ; 153  |};
                             3847 ; 154  |
                             3848 ; 155  |struct ModuleEntry
                             3849 ; 156  |{
                             3850 ; 157  |    int m_iSignaledEventMask;
                             3851 ; 158  |    int m_iWaitEventMask;
                             3852 ; 159  |    int m_iResourceOfCode;
                             3853 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3854 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3855 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3856 ; 163  |    int m_uTimeOutHigh;
                             3857 ; 164  |    int m_uTimeOutLow;
                             3858 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3859 ; 166  |};
                             3860 ; 167  |
                             3861 ; 168  |union WaitMask{
                             3862 ; 169  |    struct B{
                             3863 ; 170  |        unsigned int m_bNone     :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3864 ; 171  |        unsigned int m_bMessage  :1;
                             3865 ; 172  |        unsigned int m_bTimer    :1;
                             3866 ; 173  |        unsigned int m_bButton   :1;
                             3867 ; 174  |    } B;
                             3868 ; 175  |    int I;
                             3869 ; 176  |} ;
                             3870 ; 177  |
                             3871 ; 178  |
                             3872 ; 179  |struct Button {
                             3873 ; 180  |        WORD wButtonEvent;
                             3874 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3875 ; 182  |};
                             3876 ; 183  |
                             3877 ; 184  |struct Message {
                             3878 ; 185  |        WORD wMsgLength;
                             3879 ; 186  |        WORD wMsgCommand;
                             3880 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3881 ; 188  |};
                             3882 ; 189  |
                             3883 ; 190  |union EventTypes {
                             3884 ; 191  |        struct CMessage msg;
                             3885 ; 192  |        struct Button Button ;
                             3886 ; 193  |        struct Message Message;
                             3887 ; 194  |};
                             3888 ; 195  |
                             3889 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3890 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3891 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3892 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3893 ; 200  |
                             3894 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3895 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3896 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3897 ; 204  |
                             3898 ; 205  |#if DEBUG
                             3899 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3900 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3901 ; 208  |#else 
                             3902 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3903 ; 210  |#define DebugBuildAssert(x)    
                             3904 ; 211  |#endif
                             3905 ; 212  |
                             3906 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3907 ; 214  |//  #pragma asm
                             3908 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3909 ; 216  |//  #pragma endasm
                             3910 ; 217  |
                             3911 ; 218  |
                             3912 ; 219  |#ifdef COLOR_262K
                             3913 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3914 ; 221  |#elif defined(COLOR_65K)
                             3915 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3916 ; 223  |#else
                             3917 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3918 ; 225  |#endif
                             3919 ; 226  |    
                             3920 ; 227  |#endif // #ifndef _TYPES_H
                             3921 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3923 
                             3924 ; 5    |
                             3925 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             3926 ; 7    |//  Interrupt Collector Registers
                             3927 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             3928 ; 9    |
                             3929 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             3930 ; 11   |
                             3931 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             3932 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             3933 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             3934 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             3935 ; 16   |
                             3936 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             3937 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             3938 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             3939 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             3940 ; 21   |
                             3941 ; 22   |#define HW_GPB_GPENR 0
                             3942 ; 23   |#define HW_GPB_GPDOR 1
                             3943 ; 24   |#define HW_GPB_GPDIR 2
                             3944 ; 25   |#define HW_GPB_GPDOER 3
                             3945 ; 26   |#define HW_GPB_GPIPENR 4
                             3946 ; 27   |#define HW_GPB_GPIENR 5
                             3947 ; 28   |#define HW_GPB_GPILVLR 6
                             3948 ; 29   |#define HW_GPB_GPIPOLR 7
                             3949 ; 30   |#define HW_GPB_GPISTATR 8
                             3950 ; 31   |#define HW_GPB_GPPWR 9
                             3951 ; 32   |#define HW_GPB_GP8MA 10
                             3952 ; 33   |
                             3953 ; 34   |
                             3954 ; 35   |
                             3955 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             3956 ; 37   |//  GPIO Register Bit Positions
                             3957 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             3958 ; 39   |{
                             3959 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             3960 ; 41   |    unsigned int I;
                             3961 ; 42   |    unsigned int U;
                             3962 ; 43   |} gpr_type;
                             3963 ; 44   |
                             3964 ; 45   |#define HW_GP_B0_BITPOS 0
                             3965 ; 46   |#define HW_GP_B1_BITPOS 1
                             3966 ; 47   |#define HW_GP_B2_BITPOS 2
                             3967 ; 48   |#define HW_GP_B3_BITPOS 3
                             3968 ; 49   |#define HW_GP_B4_BITPOS 4
                             3969 ; 50   |#define HW_GP_B5_BITPOS 5
                             3970 ; 51   |#define HW_GP_B6_BITPOS 6
                             3971 ; 52   |#define HW_GP_B7_BITPOS 7
                             3972 ; 53   |#define HW_GP_B8_BITPOS 8
                             3973 ; 54   |#define HW_GP_B9_BITPOS 9
                             3974 ; 55   |#define HW_GP_B10_BITPOS 10
                             3975 ; 56   |#define HW_GP_B11_BITPOS 11
                             3976 ; 57   |#define HW_GP_B12_BITPOS 12
                             3977 ; 58   |#define HW_GP_B13_BITPOS 13
                             3978 ; 59   |#define HW_GP_B14_BITPOS 14
                             3979 ; 60   |#define HW_GP_B15_BITPOS 15
                             3980 ; 61   |#define HW_GP_B16_BITPOS 16
                             3981 ; 62   |#define HW_GP_B17_BITPOS 17
                             3982 ; 63   |#define HW_GP_B18_BITPOS 18
                             3983 ; 64   |#define HW_GP_B19_BITPOS 19
                             3984 ; 65   |#define HW_GP_B20_BITPOS 20
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3985 ; 66   |#define HW_GP_B21_BITPOS 21
                             3986 ; 67   |#define HW_GP_B22_BITPOS 22
                             3987 ; 68   |#define HW_GP_B23_BITPOS 23
                             3988 ; 69   |
                             3989 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             3990 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             3991 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             3992 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             3993 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             3994 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             3995 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             3996 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             3997 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             3998 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             3999 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             4000 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             4001 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             4002 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             4003 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             4004 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             4005 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             4006 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             4007 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             4008 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             4009 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             4010 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             4011 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             4012 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             4013 ; 94   |
                             4014 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             4015 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             4016 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             4017 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             4018 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             4019 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             4020 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             4021 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             4022 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             4023 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             4024 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             4025 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             4026 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             4027 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             4028 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             4029 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             4030 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             4031 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             4032 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             4033 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             4034 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             4035 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             4036 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             4037 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             4038 ; 119  |
                             4039 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             4040 ; 121  |//  GPIO 8mA Register Bit Positions
                             4041 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             4042 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             4043 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             4044 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             4045 ; 126  |
                             4046 ; 127  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4047 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             4048 ; 129  |//  Logical GPIO numbers
                             4049 ; 130  |#define HW_GPIO_000 0
                             4050 ; 131  |#define HW_GPIO_001 1
                             4051 ; 132  |#define HW_GPIO_002 2
                             4052 ; 133  |#define HW_GPIO_003 3
                             4053 ; 134  |#define HW_GPIO_004 4
                             4054 ; 135  |#define HW_GPIO_005 5
                             4055 ; 136  |#define HW_GPIO_006 6
                             4056 ; 137  |#define HW_GPIO_007 7
                             4057 ; 138  |#define HW_GPIO_008 8
                             4058 ; 139  |#define HW_GPIO_009 9
                             4059 ; 140  |#define HW_GPIO_010 10
                             4060 ; 141  |#define HW_GPIO_011 11
                             4061 ; 142  |#define HW_GPIO_012 12
                             4062 ; 143  |#define HW_GPIO_013 13
                             4063 ; 144  |#define HW_GPIO_014 14
                             4064 ; 145  |#define HW_GPIO_015 15
                             4065 ; 146  |#define HW_GPIO_016 16
                             4066 ; 147  |#define HW_GPIO_017 17
                             4067 ; 148  |#define HW_GPIO_018 18
                             4068 ; 149  |#define HW_GPIO_019 19
                             4069 ; 150  |#define HW_GPIO_020 20
                             4070 ; 151  |#define HW_GPIO_021 21
                             4071 ; 152  |#define HW_GPIO_022 22
                             4072 ; 153  |#define HW_GPIO_023 23
                             4073 ; 154  |#define HW_GPIO_024 24
                             4074 ; 155  |#define HW_GPIO_025 25
                             4075 ; 156  |#define HW_GPIO_026 26
                             4076 ; 157  |#define HW_GPIO_027 27
                             4077 ; 158  |#define HW_GPIO_028 28
                             4078 ; 159  |#define HW_GPIO_029 29
                             4079 ; 160  |#define HW_GPIO_030 30
                             4080 ; 161  |#define HW_GPIO_031 31
                             4081 ; 162  |#define HW_GPIO_032 32
                             4082 ; 163  |#define HW_GPIO_033 33
                             4083 ; 164  |#define HW_GPIO_034 34
                             4084 ; 165  |#define HW_GPIO_035 35
                             4085 ; 166  |#define HW_GPIO_036 36
                             4086 ; 167  |#define HW_GPIO_037 37
                             4087 ; 168  |#define HW_GPIO_038 38
                             4088 ; 169  |#define HW_GPIO_039 39
                             4089 ; 170  |#define HW_GPIO_040 40
                             4090 ; 171  |#define HW_GPIO_041 41
                             4091 ; 172  |#define HW_GPIO_042 42
                             4092 ; 173  |#define HW_GPIO_043 43
                             4093 ; 174  |#define HW_GPIO_044 44
                             4094 ; 175  |#define HW_GPIO_045 45
                             4095 ; 176  |#define HW_GPIO_046 46
                             4096 ; 177  |#define HW_GPIO_047 47
                             4097 ; 178  |#define HW_GPIO_048 48
                             4098 ; 179  |#define HW_GPIO_049 49
                             4099 ; 180  |#define HW_GPIO_050 50
                             4100 ; 181  |#define HW_GPIO_051 51
                             4101 ; 182  |#define HW_GPIO_052 52
                             4102 ; 183  |#define HW_GPIO_053 53
                             4103 ; 184  |#define HW_GPIO_054 54
                             4104 ; 185  |#define HW_GPIO_055 55
                             4105 ; 186  |#define HW_GPIO_056 56
                             4106 ; 187  |#define HW_GPIO_057 57
                             4107 ; 188  |#define HW_GPIO_058 58
                             4108 ; 189  |#define HW_GPIO_059 59
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4109 ; 190  |#define HW_GPIO_060 60
                             4110 ; 191  |#define HW_GPIO_061 61
                             4111 ; 192  |#define HW_GPIO_062 62
                             4112 ; 193  |#define HW_GPIO_063 63
                             4113 ; 194  |#define HW_GPIO_064 64
                             4114 ; 195  |#define HW_GPIO_065 65
                             4115 ; 196  |#define HW_GPIO_066 66
                             4116 ; 197  |#define HW_GPIO_067 67
                             4117 ; 198  |#define HW_GPIO_068 68
                             4118 ; 199  |#define HW_GPIO_069 69
                             4119 ; 200  |#define HW_GPIO_070 70
                             4120 ; 201  |#define HW_GPIO_071 71
                             4121 ; 202  |#define HW_GPIO_072 72
                             4122 ; 203  |#define HW_GPIO_073 73
                             4123 ; 204  |#define HW_GPIO_074 74
                             4124 ; 205  |#define HW_GPIO_075 75
                             4125 ; 206  |#define HW_GPIO_076 76
                             4126 ; 207  |#define HW_GPIO_077 77
                             4127 ; 208  |#define HW_GPIO_078 78
                             4128 ; 209  |#define HW_GPIO_079 79
                             4129 ; 210  |#define HW_GPIO_080 80
                             4130 ; 211  |#define HW_GPIO_081 81
                             4131 ; 212  |#define HW_GPIO_082 82
                             4132 ; 213  |#define HW_GPIO_083 83
                             4133 ; 214  |#define HW_GPIO_084 84
                             4134 ; 215  |#define HW_GPIO_085 85
                             4135 ; 216  |#define HW_GPIO_086 86
                             4136 ; 217  |#define HW_GPIO_087 87
                             4137 ; 218  |#define HW_GPIO_088 88
                             4138 ; 219  |#define HW_GPIO_089 89
                             4139 ; 220  |#define HW_GPIO_090 90
                             4140 ; 221  |#define HW_GPIO_091 91
                             4141 ; 222  |#define HW_GPIO_092 92
                             4142 ; 223  |#define HW_GPIO_093 93
                             4143 ; 224  |#define HW_GPIO_094 94
                             4144 ; 225  |#define HW_GPIO_095 95
                             4145 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             4146 ; 227  |
                             4147 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                             4148 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                             4149 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                             4150 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                             4151 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                             4152 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                             4153 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                             4154 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                             4155 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                             4156 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4157 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             4158 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4159 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                             4160 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                             4161 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                             4162 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                             4163 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                             4164 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                             4165 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                             4166 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                             4167 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4168 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             4169 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4170 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4171 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4172 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4173 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4174 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4175 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4176 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4177 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4178 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4179 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             4180 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4181 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4182 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4183 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4184 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4185 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4186 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4187 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4188 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4189 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4190 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             4191 ; 272  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4192 ; 273  |#endif
                             4193 ; 274  |
                             4194 
                             4196 
                             4197 ; 19   |#include "battery_config.h"
                             4198 
                             4200 
                             4201 ; 1    |///////////////////////////////////////////////////////////////////////////////
                             4202 ; 2    |// Sigmatel, Inc  copyright (C) 2003-2004
                             4203 ; 3    |// Filename: battery_config.h
                             4204 ; 4    |// Battery Low Resolution ADC values & recharge values 
                             4205 ; 5    |///////////////////////////////////////////////////////////////////////////////
                             4206 ; 6    |
                             4207 ; 7    |#ifdef BATTERY_TYPE_LI_ION
                             4208 ; 8    |    //these are 3500 only
                             4209 ; 9    |    #define VBATT_REF           REF_5120MV
                             4210 ; 10   |    #define VBATT_MIN_MV        3000
                             4211 ; 11   |    #define VBATT_MAX_MV        4200
                             4212 ; 12   |
                             4213 ; 13   |    #define VBATT_BO_MV         3000
                             4214 ; 14   |
                             4215 ; 15   |    #define BATT_BROWNOUT       VBATT_BO_MV
                             4216 ; 16   |
                             4217 ; 17   |    #ifndef LIION_BATTERY_VOLTAGE
                             4218 ; 18   |    //this is in mV
                             4219 ; 19   |    //The reference design uses a 4.2V LiIon battery
                             4220 ; 20   |    #define LIION_BATTERY_VOLTAGE LIION_BATTERY_VOLTAGE_4_2
                             4221 ; 21   |    #endif 
                             4222 ; 22   |
                             4223 ; 23   |    #ifndef LIION_CONDITIONING_VOLTAGE_THRESHHOLD
                             4224 ; 24   |    //This is in millivolts
                             4225 ; 25   |    #define LIION_CONDITIONING_VOLTAGE_THRESHHOLD 3000
                             4226 ; 26   |    #endif
                             4227 ; 27   |
                             4228 ; 28   |    #ifndef LIION_CONDITIONING_CURRENT_LIMIT
                             4229 ; 29   |    //This is in mA.   
                             4230 ; 30   |    //Refer to the battery data sheet for the proper value
                             4231 ; 31   |    //the reference design uses a 400mAh battery that suggests 40mA is a good conditioning
                                   current
                             4232 ; 32   |    #define LIION_CONDITIONING_CURRENT_LIMIT 40
                             4233 ; 33   |    #endif 
                             4234 ; 34   |
                             4235 ; 35   |    #ifndef LIION_CHARGING_TIMEOUT
                             4236 ; 36   |    //the default is 4 hours
                             4237 ; 37   |    #define LIION_CHARGING_TIMEOUT  ((DWORD)(DWORD)4*(DWORD)60*(DWORD)60*(DWORD)1000)
                             4238 ; 38   |    #endif 
                             4239 ; 39   |
                             4240 ; 40   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD
                             4241 ; 41   |    //We want to enter the 'top-off' mode when the voltage differential between
                             4242 ; 42   |    //charging on and off is 20 mV
                             4243 ; 43   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD  20
                             4244 ; 44   |    #endif 
                             4245 ; 45   |
                             4246 ; 46   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT
                             4247 ; 47   |    //we want 10 samples of the non-charging current to be within the 
                             4248 ; 48   |    //differential threshhold.  
                             4249 ; 49   |
                             4250 ; 50   |#ifdef STMP_BUILD_PLAYER
                             4251 ; 51   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 5
                             4252 ; 52   |#else
                             4253 ; 53   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 10
                             4254 ; 54   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4255 ; 55   |    #endif 
                             4256 ; 56   |
                             4257 ; 57   |    #ifndef LIION_CHARGING_CURRENT_LIMIT
                             4258 ; 58   |    //This is in mA.   
                             4259 ; 59   |    //Refer to the battery data sheet for the proper value
                             4260 ; 60   |    //the reference design uses a 400mAh battery that suggests 400mA is a good charging cu
                                  rrent
                             4261 ; 61   |    #define LIION_CHARGING_CURRENT_LIMIT 400
                             4262 ; 62   |    #endif 
                             4263 ; 63   |
                             4264 ; 64   |    #ifndef LIION_TOPOFF_TIMEOUT
                             4265 ; 65   |    //After we reach that limit, we want to run for a set amount of time to 'top off' the 
                                  charging
                             4266 ; 66   |    //in this case, 2 minutes (was 30)
                             4267 ; 67   |#ifdef STMP_BUILD_PLAYER
                             4268 ; 68   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)15*(DWORD)60*(DWORD)1000)
                             4269 ; 69   |#else
                             4270 ; 70   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)2*(DWORD)60*(DWORD)1000)
                             4271 ; 71   |#endif
                             4272 ; 72   |    #endif
                             4273 ; 73   |
                             4274 ; 74   |        #ifndef POWER_OFF_FREQUENCY
                             4275 ; 75   |        //Set the Power Off Frequency.  Determines how frequently charging is turned-off. 
                                   
                             4276 ; 76   |#ifdef STMP_BUILD_PLAYER
                             4277 ; 77   |        #define POWER_OFF_FREQUENCY 40
                             4278 ; 78   |#else
                             4279 ; 79   |        #define POWER_OFF_FREQUENCY 500
                             4280 ; 80   |#endif
                             4281 ; 81   |        #endif
                             4282 ; 82   |#endif
                             4283 ; 83   |
                             4284 ; 84   |////////////////////////////////////////////////////////////////////////////////
                             4285 ; 85   |#ifdef BATTERY_TYPE_NIMH
                             4286 ; 86   |    #define ONE  1
                             4287 ; 87   |    #define ZERO 0
                             4288 ; 88   |
                             4289 ; 89   |    //NOTE:  Battery is currently Hardcoded to REF_5120MV in USBMSC
                             4290 ; 90   |#ifdef STMP_BUILD_PLAYER
                             4291 ; 91   |    #define VBATT_REF          REF_2700MV
                             4292 ; 92   |    #define VBATT_MIN_MV       900
                             4293 ; 93   |    #define VBATT_MAX_MV       1500
                             4294 ; 94   |    #define VBATT_BO_MV        840
                             4295 ; 95   |#else
                             4296 ; 96   |    #define VBATT_REF          REF_5120MV
                             4297 ; 97   |    #define VBATT_MIN_MV       900
                             4298 ; 98   |    #define VBATT_MAX_MV       1200
                             4299 ; 99   |    #define VBATT_BO_MV        850
                             4300 ; 100  |#endif
                             4301 ; 101  |
                             4302 ; 102  |    #ifdef DEVICE_3500
                             4303 ; 103  |        #define BATT_BROWNOUT                           VBATT_BO_MV
                             4304 ; 104  |    #else
                             4305 ; 105  |        #define BATT_BROWNOUT               HW_LRADC_BO_TRIP_830MV_SETMASK
                             4306 ; 106  |    #endif
                             4307 ; 107  |    // nimh settings above this line are similar to alkaline values below except v max.
                             4308 ; 108  |    
                             4309 ; 109  |    #ifndef NIMH_BATTERY_VOLTAGE
                             4310 ; 110  |    //Units: mV. This is the rated battery voltage.
                             4311 ; 111  |    //The reference design uses a 1.5V NIMH battery
                             4312 ; 112  |    #define NIMH_BATTERY_VOLTAGE NIMH_BATTERY_VOLTAGE_1_2
                             4313 ; 113  |    #endif 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4314 ; 114  |
                             4315 ; 115  |    #ifndef NIMH_VOLTAGE_THRESHHOLD_MV
                             4316 ; 116  |    //Units: mV      Stop charging if this ADC battery voltage is measured. This can occur
                                   if an alkaline is inserted.
                             4317 ; 117  |    #define NIMH_VOLTAGE_THRESHHOLD_MV 1800
                             4318 ; 118  |    #endif
                             4319 ; 119  |    // 1 enables alkaline detection via brief charge current & voltage threshold check.
                             4320 ; 120  |    #define ALKALINE_DETECTION_IMPULSE_CHARGE_ENABLE 0 /* LEAVE DISABLED. Unimplemented. *
                                  /
                             4321 ; 121  |
                             4322 ; 122  |    //------- NIMH Detection via exposed batt case check w/ gpio. You must configure a gpi
                                  o reg & pin num also below.
                             4323 ; 123  |    #define BATTERY_CASE_POLARITY_DETECT_ENABLE 0 // Verified. GPIO pin setup in nimh.c in
                                  it, External pullup R (47kOhm)
                             4324 ; 124  |    // Explanation: General Purpose Input pin can connect to cylindrical batt end corner. 
                                  
                             4325 ; 125  |    // NiMH AAA batteries have ground case exposed at corner, else casing insulation 
                             4326 ; 126  |    //   causes signal to float & external pullup R gives a logic 1 indicating non-nimh. 
                             4327 ; 127  |    // NiMH AA  batteries instead have additional positive terminal exposure (opposite pol
                                  arity). 
                             4328 ; 128  |    //   Ext transistor can Vlevel shift for gpio logic-1 voltage. 
                             4329 ; 129  |    //   non-NIMH casing will allow gpio pin to stay grounded & gives logic 0.
                             4330 ; 130  |
                             4331 ; 131  |    // SET this to ZERO if your NiMH is AAA or has ground case contact (detects NiMH via c
                                  ase (-) contact)
                             4332 ; 132  |    // SET this to ONE if your NiMH battery is AA (detects NiMH via (+) terminal contact).
                                   Requires ext transistor V level shift.
                             4333 ; 133  |    #define NIMH_BATTERY_CASE_LOGIC_LEVEL ZERO
                             4334 ; 134  |    // *** IF YOU HAVE ENABLED, battery case polarity detection (used with nimh), 
                             4335 ; 135  |    //  NOTE: The GP number and bit number in the four macros below must be set to match y
                                  our input PIN number. 
                             4336 ; 136  |    //    LAYOUT SPECIFIC, but all 3550/3560 qfp and bga can use a single GPIO register & 
                                  bit num as below. 
                             4337 ; 137  |    //    SigmaTel HW apps recommends pin GP37= pin 17 (100qfp)= pin j7 (bga)= cpu card pi
                                  n24= GP1 Bit13 per 35xx datasheet.
                             4338 ; 138  |    #define CONFIGURED_GPIO_INPUT_BIT_FOR_BATTERY_CASE_POLARITY ( HW_GP1DIR.B.B13 )
                             4339 ; 139  |    // GPIO Enable register number as GPIO function.
                             4340 ; 140  |    #define CONFIGURED_BATT_CASE_GP_NUM_ENR (HW_GP1ENR)
                             4341 ; 141  |    // Data output enable reg num to use (will be set as input pin in this case)
                             4342 ; 142  |    #define CONFIGURED_BATT_CASE_GP_NUM_DOER  (HW_GP1DOER)
                             4343 ; 143  |    // bit num to use with desired input pin above
                             4344 ; 144  |    #define CONFIGURED_BATT_CASE_GP_BIT  (HW_GP_B13_SETMASK)
                             4345 ; 145  |    
                             4346 ; 146  |    // Error code returned during charging init when case detect feature enabled but cell 
                                  case not detected.
                             4347 ; 147  |    #define NIMH_POLARITY_NOT_DETECTED (-2)
                             4348 ; 148  |    //------- end batt case polarity detection
                             4349 ; 149  |
                             4350 ; 150  |    //------------------------------------
                             4351 ; 151  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS
                             4352 ; 152  |    // 0.1C = 10 hr charge, but use 12 hours to more fully charge larger cells. (units: ms
                                  ec)
                             4353 ; 153  |    #define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)12*(DWORD)60*(DWORD)60*(D
                                  WORD)1000))
                             4354 ; 154  |    //#define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)10*(DWORD)1000)) //10 s
                                  ec test mode to easily observe transition
                             4355 ; 155  |    #endif 
                             4356 ; 156  |    
                             4357 ; 157  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT
                             4358 ; 158  |    // Units: mA. Refer to the battery data sheet for the proper value. 
                             4359 ; 159  |    // Usually 1 C AAA means a charge of 700 mAh, 750 mAh for a few AAA cells (energizer).
                                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4360 ; 160  |    // Assume 700mAh battery so EQUILIBRIUM charge at 0.1C rate (1/10th charge/hr) = 70mA.
                                   
                             4361 ; 161  |    // Register options are 60 or 75mA. Suggest 75mA for AAA. AA's have wide mAh range. Us
                                  e 1/10th of mAh here:
                             4362 ; 162  |    #define NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT 75
                             4363 ; 163  |    #endif   
                             4364 ; 164  |    #ifndef
                             4365 ; 165  |    #define NIMH_TRICKLE_CHARGE_ENABLE 1
                             4366 ; 166  |    #endif
                             4367 ; 167  |    #ifndef NIMH_TRICKLE_CHARGE_CURRENT
                             4368 ; 168  |    #define NIMH_TRICKLE_CHARGE_CURRENT 10  
                             4369 ; 169  |    #endif //25mA is 0.035C rate for a 700mAh cell. 10mA recommended by 35xx charger desig
                                  ner.
                             4370 ; 170  |    //-------------------------------------
                             4371 ; 171  |    #ifndef NIMH_QUICK_CHARGING_TIMEOUT_MS   // NOTE: C/3 quick charging (3.6hrs) is not i
                                  mplemented.
                             4372 ; 172  |    // ~4 hr charge rate of C/3 terminated by one of 3 events: (per Duracell whitepaper) 
                             4373 ; 173  |    //   -dV/minute of 10mV, or 3.6hr timeout (216 minutes), or real temperature>=(60celci
                                  us|140F).
                             4374 ; 174  |    // Thermal warning: at this C/3 charge rate, all 3 of the above termination events mus
                                  t be checked.
                             4375 ; 175  |    #define NIMH_QUICK_CHARGING_TIMEOUT_MS ((DWORD)(DWORD)216*(DWORD)60*(DWORD)1000) 
                             4376 ; 176  |    #endif
                             4377 ; 177  |    #ifndef NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD
                             4378 ; 178  |    #define NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD 10
                             4379 ; 179  |    #endif
                             4380 ; 180  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C
                             4381 ; 181  |    // For temp check to function:    10celcius|50F < Ambient Temperature < 45celcius|113F
                                  
                             4382 ; 182  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C 60
                             4383 ; 183  |    #endif
                             4384 ; 184  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F
                             4385 ; 185  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F 140
                             4386 ; 186  |    #endif
                             4387 ; 187  |    // C/3 = 700mA/3 = 233 mA, HW supports 235mA. For C=750mAh: 750mA/3= 250mA. 
                             4388 ; 188  |    #ifndef NIMH_QUICK_CHARGING_CURRENT_LIMIT
                             4389 ; 189  |    #define NIMH_QUICK_CHARGING_CURRENT_LIMIT 235        
                             4390 ; 190  |    #endif    
                             4391 ; 191  |    //-------------------------------------
                             4392 ; 192  |    #ifndef NIMH_FAST_CHARGING_CURRENT_LIMIT  // NOTE: C/2 Fast charging (2hrs) is not imp
                                  lemented. 
                             4393 ; 193  |    // in units of mA.   Temperature measurement required with this mode. 
                             4394 ; 194  |    #define NIMH_FAST_CHARGING_CURRENT_LIMIT 400
                             4395 ; 195  |    #endif      
                             4396 ; 196  |    #ifndef NIMH_FAST_CHARGING_TOPOFF_TIMEOUT
                             4397 ; 197  |    //After we reach that limit, we may want to run for a set amount of time to 'top off'
                             4398 ; 198  |    //the charging in this case,                       n minutes
                             4399 ; 199  |    #define NIMH_FAST_CHARGING_TOPOFF_TIMEOUT ((DWORD)(DWORD)30*(DWORD)60*(DWORD)1000)
                             4400 ; 200  |    #endif
                             4401 ; 201  |
                             4402 ; 202  |        #ifndef POWER_OFF_FREQUENCY
                             4403 ; 203  |        //Set the Power Off Frequency Count.  Determines how frequently charging is turned
                                  -off. 
                             4404 ; 204  |#ifdef STMP_BUILD_PLAYER
                             4405 ; 205  |        #define POWER_OFF_FREQUENCY 40
                             4406 ; 206  |#else
                             4407 ; 207  |        #define POWER_OFF_FREQUENCY 500
                             4408 ; 208  |#endif
                             4409 ; 209  |        #endif
                             4410 ; 210  |    
                             4411 ; 211  |#endif // BATTERY_TYPE_NIMH
                             4412 ; 212  |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4413 ; 213  |
                             4414 ; 214  |#ifdef BATTERY_TYPE_ALKALINE
                             4415 ; 215  |#ifdef STMP_BUILD_PLAYER
                             4416 ; 216  |    #define VBATT_REF          REF_2700MV
                             4417 ; 217  |    #define VBATT_MIN_MV       900
                             4418 ; 218  |    #define VBATT_MAX_MV       1500
                             4419 ; 219  |    #define VBATT_BO_MV        840
                             4420 ; 220  |#else
                             4421 ; 221  |    #define VBATT_REF          REF_5120MV
                             4422 ; 222  |    #define VBATT_MIN_MV       900
                             4423 ; 223  |    #define VBATT_MAX_MV       1500
                             4424 ; 224  |    #define VBATT_BO_MV        850
                             4425 ; 225  |#endif
                             4426 ; 226  |
                             4427 ; 227  |    #define BATT_BROWNOUT                               VBATT_BO_MV
                             4428 ; 228  |    
                             4429 ; 229  |    #define OXYRIDE_THRESHOLD_MV  1550     // Battery considered Oxyride if avg voltage ex
                                  ceeds 1.55v
                             4430 ; 230  |    #define OXYRIDE_SETBACK_MV     200     // Battery Voltage - VDDD < 200mv for VDDIO sta
                                  bility
                             4431 ; 231  |#endif 
                             4432 
                             4434 
                             4435 ; 20   |
                             4436 ; 21   |#define NUM_MMC_DETECT_WAITS    50
                             4437 ; 22   |
                             4438 ; 23   |// This is the minimum battery voltage (in mV) at which the external device
                             4439 ; 24   |// will operate. If battery voltage level is inferior, the external MMC
                             4440 ; 25   |// will not be enumerated. 
                             4441 ; 26   |// Battery type macro verified to be in scope during LIION player build option. 
                             4442 ; 27   |// TODO: verify new LIION case to prevent MMC init if Vlion < threshhold. 
                             4443 ; 28   |#if BATTERY_TYPE_LI_ION
                             4444 ; 29   |#define MMC_VOLTAGE_THRESHOLD   3200        // LIION battery threshold in mV. 
                             4445 ; 30   |#else
                             4446 ; 31   |#define MMC_VOLTAGE_THRESHOLD   1100            // alkaline or NiMH battery threshold in m
                                  V. Was 1020mV, now 1100mV per current draw requirements.        
                             4447 ; 32   |#endif
                             4448 ; 33   |
                             4449 ; 34   |extern MMC_MEDIA_INFO MEDIA_DDI_MEM MmcMediaInfo;
                             4450 ; 35   |extern WORD g_bWriteProtected;
                             4451 ; 36   |extern MMC_PHYSICAL_BUS MmcPhysicalBus[];
                             4452 ; 37   |
                             4453 ; 38   |BOOL g_bMMCPreviousTest;
                             4454 ; 39   |WORD g_iCountDown = 1;
                             4455 
                             4456 
Y:0000                       4457         org     y,".ydatacheckremovablemedia",init:
                             4458 Fg_iCountDown:
Y:0000 000001                4459         dc      $000001
                             4462 
                             4463 ; 40   |BOOL bMMCInitDone = FALSE;
                             4464 
                             4465 FbMMCInitDone:
Y:0001 000000                4466         dc      $000000
                             4469 
                             4470 ; 41   |
                             4471 ; 42   |_asmfunc MMCEnumerateWrapper(void*,int);
                             4472 ; 43   |_asmfunc MMCDetectPresenceWrapper(void*);
                             4473 ; 44   |_asmfunc MMCCheckWriteProtectWrapper(void*);
                             4474 ; 45   |
                             4475 ; 46   |/////////////////////////////////////////////////////////////////////////////////////////
                             4476 ; 47   |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4477 ; 48   |//>  Name:          void _reentrant CheckRemovableMedia(void)
                             4478 ; 49   |//
                             4479 ; 50   |//   Type:          Function 
                             4480 ; 51   |//
                             4481 ; 52   |//   Description:   Checks if removeable media state has changed.
                             4482 ; 53   |//                  If state has changed, post message to menus and clear media changed fl
                                  ag
                             4483 ; 54   |//
                             4484 ; 55   |//   Inputs:        none
                             4485 ; 56   |//
                             4486 ; 57   |//   Outputs:       none
                             4487 ; 58   |//
                             4488 ; 59   |//   Notes:         none
                             4489 ; 60   |//<
                             4490 ; 61   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             4491 ; 62   |void _reentrant CheckRemovableMedia(void)
                             4492 ; 63   |{
                             4493 
P:0000                       4494         org     p,".ptextcheckremovablemedia":
                             4499 FCheckRemovableMedia:
P:0000 055F7C         2    2 4500         movec   ssh,y:(r7)+
P:0001 205F00         2    4 4503         move    (r7)+
                             4509 
                             4510 ; 64   |  BOOL  bMMCPresent;
                             4511 ; 65   |  INT   iAdcBattReading;
                             4512 ; 66   |
                             4513 ; 67   |  if ( (g_iCountDown-- == 0) || !bMMCInitDone)   // was  !iCountDown-- 
                             4514 
P:0002 5FF000 rrrrrr  3    7 4516         move    y:Fg_iCountDown,b
P:0004 21AE00         2    9 4517         move    b1,a
P:0005 46F400 000001  3   12 4518         move    #>1,y0
P:0007 20005C         2   14 4519         sub     y0,b
P:0008 5D7000 rrrrrr  3   17 4520         move    b1,y:Fg_iCountDown
P:000A 2A0000         2   19 4521         move    #0,a2
P:000B 200003         2   21 4522         tst     a
P:000C 0AF0AA rrrrrr  6   27 4523         jeq     L3
P:000E 5FF000 rrrrrr  3   30 4524         move    y:FbMMCInitDone,b
P:0010 2B0000         2   32 4525         move    #0,b2
P:0011 20000B         2   34 4526         tst     b
P:0012 0AF0A2 rrrrrr  6   40 4527         jne     L10
                             4528 
                             4529 ; 68   |  {
                             4530 ; 69   |      // Has the media changed?
                             4531 ; 70   |//      bMMCPresent = MMCHalDetectPresence(MmcMediaInfo.pMMCPhysicalBus);
                             4532 ; 71   |
                             4533 ; 72   |      bMMCPresent = MMCDetectPresenceWrapper(MmcMediaInfo.pMMCPhysicalBus);
                             4534 
P:0014 68F000 rrrrrr  3   43 4536 L3:     move    y:FMmcMediaInfo+62,r0
P:0016 0BF080 rrrrrr  6   49 4537         jsr     MMCDetectPresenceWrapper
P:0018 200009         2   51 4538         tfr     a,b
                             4540 
                             4541 ; 73   |
                             4542 ; 74   |      if ((bMMCPresent != g_bMMCPreviousTest) || !bMMCInitDone)
                             4543 
P:0019 5EF000 rrrrrr  3   54 4545         move    y:Fg_bMMCPreviousTest,a
P:001B 045FA0         2   56 4546         movec   m0,n7
P:001C 000000         2   58 4547         nop
P:001D 5D6F00         4   62 4548         move    b1,y:(r7+n7)
P:001E 2A0000         2   64 4549         move    #0,a2
P:001F 2B0000         2   66 4550         move    #0,b2
P:0020 20000D         2   68 4551         cmp     a,b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0021 0AF0A2 rrrrrr  6   74 4554         jne     L4
P:0023 5EF000 rrrrrr  3   77 4555         move    y:FbMMCInitDone,a
P:0025 2A0000         2   79 4556         move    #0,a2
P:0026 200003         2   81 4557         tst     a
P:0027 0AF0A2 rrrrrr  6   87 4558         jne     L8
                             4559 
                             4560 ; 75   |        {                      
                             4561 ; 76   |                // Due to over current danger when resetting SD cards with capacities
                             4562 ; 77   |                // larger than 256MBytes, we will not allow MMC detection if the battery
                             4563 ; 78   |                // voltage is less than MMC_VOLTAGE_THRESHOLD. 
                             4564 ; 79   |        #if 0
                             4565 ; 80   |            #pragma asm
                             4566 ; 81   |            WARN 'Note: can remove this lradc init call after verifying earlier call ok'
                             4567 ; 82   |            #pragma endasm
                             4568 ; 83   |            // Init the Low Resolution Analog to Digital Converter (LRADC) Channel: BATTer
                                  y
                             4569 ; 84   |            // TODO: remove this call when you have time to verify its functional w/o it s
                                  ince 
                             4570 ; 85   |            //           we now call it from MiscProjectInit which is called from main. Au
                                  g3,2004.
                             4571 ; 86   |            SysLowResolutionADCInit(BATT, OFF, VBATT_REF); // was originally in mainmenu.c
                                   but was sometimes too late so reading was 0V.
                             4572 ; 87   |        #endif
                             4573 ; 88   |                    // Get the current value
                             4574 ; 89   |                iAdcBattReading = SysLowResolutionAdcReadVolt(BATT,INSTANT_RESULT);       
                                    
                             4575 
P:0029 20001B         2   89 4577 L4:     clr     b   
P:002A 200013         2   91 4578         clr     a   
P:002B 0BF080 rrrrrr  6   97 4579         jsr     FSysLowResolutionAdcReadVolt
                             4581 
                             4582 ; 90   |
                             4583 ; 91   |                        // If battery reading is 0, the ADC used to read battery is not
                             4584 ; 92   |                        // operational yet. So do nothing.
                             4585 ; 93   |                        if(iAdcBattReading == 0)
                             4586 
P:002D 200003         2   99 4588         tst     a
P:002E 0AF0AA rrrrrr  6  105 4589         jeq     L10
                             4590 
                             4591 ; 94   |                        {   //DebugBuildAssert(0);
                             4592 ; 95   |                            return; // if this happens, MMC init does not occur this time 
                                  due to low bat.
                             4593 ; 96   |                        }    
                             4594 ; 97   |                        
                             4595 ; 98   |                        // Battery voltage is inferior at threshold and the media is prese
                                  nt
                             4596 ; 99   |                        // => Report Insufficient Power to operate external media
                             4597 ; 100  |                        if((iAdcBattReading < MMC_VOLTAGE_THRESHOLD) && (bMMCPresent))
                             4598 
P:0030 47F400 000C80  3  108 4600         move    #3200,y1
P:0032 200075         2  110 4601         cmp     y1,a
P:0033 0AF0A1 rrrrrr  6  116 4602         jge     L6
P:0035 045FA0         2  118 4603         movec   m0,n7
P:0036 000000         2  120 4604         nop
P:0037 5FEF00         4  124 4605         move    y:(r7+n7),b
P:0038 2B0000         2  126 4606         move    #0,b2
P:0039 20000B         2  128 4607         tst     b
P:003A 0AF0AA rrrrrr  6  134 4608         jeq     L6
                             4609 
                             4610 ; 101  |                        {
                             4611 ; 102  |                        SysPostMessage(2,MENU_MSG_MEDIA_OVER_CUR);
                             4612 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
P:003C 44F400 060009  3  137 4614         move    #393225,x0
P:003E 4C5F00         2  139 4615         move    x0,y:(r7)+
P:003F 290200         2  141 4617         move    #2,b0
P:0040 595F00         2  143 4618         move    b0,y:(r7)+
P:0041 0BF080 rrrrrr  6  149 4620         jsr     FSysPostMessage
P:0043 205700         2  151 4621         move    (r7)-
P:0044 205700         2  153 4623         move    (r7)-
                             4626 
                             4627 ; 103  |                        }
                             4628 
P:0045 0AF080 rrrrrr  6  159 4630         jmp     L8
                             4631 
                             4632 ; 104  |                        else
                             4633 ; 105  |                        {   // DebugBuildAssert(0); //testpoint to verify that MMC init is
                                   invoked.
                             4634 ; 106  |                        
                             4635 ; 107  |                        // DriveGetInfo(1, DriveInfoIsWriteProtected, &g_bWriteProtected);
                                     
                             4636 ; 108  |                        // Unfortunately, DriveGetInfo is not working.  We'll work around 
                                  it for now
                             4637 ; 109  |                        // by calling the HAL function directly.
                             4638 ; 110  |                        // TT-TODO fix this hack that requires a direct call into the HAL 
                                  layer.
                             4639 ; 111  |                        g_bWriteProtected = MMCCheckWriteProtectWrapper(MmcMediaInfo.pMMCP
                                  hysicalBus);
                             4640 
P:0047 68F000 rrrrrr  3  162 4642 L6:     move    y:FMmcMediaInfo+62,r0
P:0049 0BF080 rrrrrr  6  168 4643         jsr     MMCCheckWriteProtectWrapper
P:004B 5E7000 rrrrrr  3  171 4644         move    a,y:Fg_bWriteProtected
                             4645 
                             4646 ; 112  |                        SysPostMessage(2,MENU_MSG_MEDIA_CHANGED);
                             4647 
P:004D 57F400 060008  3  174 4649         move    #393224,b
P:004F 5F5F00         2  176 4650         move    b,y:(r7)+
P:0050 290200         2  178 4652         move    #2,b0
P:0051 595F00         2  180 4653         move    b0,y:(r7)+
P:0052 0BF080 rrrrrr  6  186 4655         jsr     FSysPostMessage
P:0054 205700         2  188 4656         move    (r7)-
P:0055 205700         2  190 4658         move    (r7)-
                             4660 
                             4661 ; 113  |                        }
                             4662 ; 114  |      }
                             4663 ; 115  |
                             4664 ; 116  |      g_bMMCPreviousTest = bMMCPresent;
                             4665 
P:0056 045FA0         2  192 4667 L8:     movec   m0,n7
P:0057 000000         2  194 4668         nop
P:0058 5EEF00         4  198 4669         move    y:(r7+n7),a
P:0059 5C7000 rrrrrr  3  201 4670         move    a1,y:Fg_bMMCPreviousTest
                             4671 
                             4672 ; 117  |      g_iCountDown = NUM_MMC_DETECT_WAITS; 
                             4673 
P:005B 47F400 000032  3  204 4675         move    #>50,y1
P:005D 4F7000 rrrrrr  3  207 4676         move    y1,y:Fg_iCountDown
                             4677 
                             4678 ; 118  |      bMMCInitDone = TRUE;     
                             4679 
P:005F 290100         2  209 4681         move    #1,b0
P:0060 597000 rrrrrr  3  212 4682         move    b0,y:FbMMCInitDone
                             4683 
                             4684 ; 119  |
                             4685 ; 120  |  }
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4686 ; 121  |  
                             4687 ; 122  |}
                             4688 
P:0062 205700         2  214 4690 L10:    move    (r7)-
P:0063 05FF7C         4  218 4692         movec   y:-(r7),ssh
P:0064 000000         2  220 4695         nop
P:0065 00000C         4  224 4696         rts
                             4699 
                             4700 ; 123  |
                             4701 ; 124  |////////////////////////////////////////////////////////////////////////////////
                             4702 ; 125  |//
                             4703 ; 126  |//>  Name:          MMCInitDetectionPins
                             4704 ; 127  |//
                             4705 ; 128  |//   Type:          Function
                             4706 ; 129  |//
                             4707 ; 130  |//   Description:   Setup the GPIO pins used to interface with the MMC
                             4708 ; 131  |//
                             4709 ; 132  |//   Inputs:        None
                             4710 ; 133  |//
                             4711 ; 134  |//   Outputs:       none
                             4712 ; 135  |//
                             4713 ; 136  |//   Notes:         Essentially the same as MMCHalInit()
                             4714 ; 137  |//<
                             4715 ; 138  |////////////////////////////////////////////////////////////////////////////////
                             4716 ; 139  |void MMCInitDetectionPins(void)
                             4717 ; 140  |{
                             4718 
                             4777 FMMCInitDetectionPins:
                             4778 
                             4779 ; 141  |        // set the pointer to the Physical Bus.
                             4780 ; 142  |    MmcMediaInfo.pMMCPhysicalBus = &(MmcPhysicalBus[0]);
                             4781 
P:0066 66F400 rrrrrr  3  227 4783         move    #FMmcPhysicalBus,r6
P:0068 6E7000 rrrrrr  3  230 4784         move    r6,y:FMmcMediaInfo+62
                             4785 
                             4786 ; 143  |
                             4787 ; 144  |    // Configure the SPI Port.  Relevant pins are as follows:
                             4788 ; 145  |    // SPI_SCK    Pin 12
                             4789 ; 146  |    // SPI_MISO   Pin 13
                             4790 ; 147  |    // SPI_MOSI   Pin 14
                             4791 ; 148  |    // SPI_SS (Slave Select). Pin 15
                             4792 ; 149  |    HW_GP0PWR.I |= 0x00F000;        // Power Up SPI Pins
                             4793 
P:006A 57F000 00F409  3  233 4795         move    x:$F409,b
P:006C 44F400 00F000  3  236 4796         move    #$F000,x0
P:006E 20004A         2  238 4797         or      x0,b
P:006F 557000 00F409  3  241 4798         move    b1,x:$F409
                             4799 
                             4800 ; 150  |    HW_GP0ENR.I &= (WORD)(~0x00F000); // Configure SPI for functionality.
                             4801 
P:0071 54F000 00F400  3  244 4803         move    x:$F400,a1
P:0073 46F400 FF0FFF  3  247 4804         move    #16715775,y0
P:0075 200056         2  249 4805         and     y0,a
P:0076 547000 00F400  3  252 4806         move    a1,x:$F400
                             4807 
                             4808 ; 151  |
                             4809 ; 152  |    // Power Up the Control Pins
                             4810 ; 153  |    *(MmcPhysicalBus[0].wGpioBase + HW_GPB_GPPWR) |= MmcPhysicalBus[0].wGpioSetMask;
                             4811 
P:0078 6DF000 rrrrrr  3  255 4813         move    y:FMmcPhysicalBus,r5
P:007A 3C0900         2  257 4814         move    #9,n4
P:007B 22B400         2  259 4815         move    r5,r4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
P:007C 000000         2  261 4816         nop
P:007D 044C16         4  265 4817         lua     (r4)+n4,r6
P:007E 000000         2  267 4818         nop
P:007F 55E600         2  269 4819         move    x:(r6),b1
P:0080 4EF000 rrrrrr  3  272 4820         move    y:FMmcPhysicalBus+1,y0
P:0082 20005A         2  274 4821         or      y0,b
P:0083 556600         2  276 4822         move    b1,x:(r6)
                             4823 
                             4824 ; 154  |    *(MmcPhysicalBus[0].wGpioBase + HW_GPB_GPENR) |= MmcPhysicalBus[0].wGpioSetMask;
                             4825 
P:0084 55E500         2  278 4827         move    x:(r5),b1
P:0085 4EF000 rrrrrr  3  281 4828         move    y:FMmcPhysicalBus+1,y0
P:0087 20005A         2  283 4829         or      y0,b
P:0088 556500         2  285 4830         move    b1,x:(r5)
                             4831 
                             4832 ; 155  |    *(MmcPhysicalBus[0].wWriteProtectGpioBase + HW_GPB_GPPWR) |= MmcPhysicalBus[0].wWriteP
                                  rotectGpioSetMask;
                             4833 
P:0089 6DF000 rrrrrr  3  288 4835         move    y:FMmcPhysicalBus+3,r5
P:008B 22B400         2  290 4836         move    r5,r4
P:008C 000000         2  292 4837         nop
P:008D 044C16         4  296 4838         lua     (r4)+n4,r6
P:008E 000000         2  298 4839         nop
P:008F 56E600         2  300 4840         move    x:(r6),a
P:0090 4FF000 rrrrrr  3  303 4841         move    y:FMmcPhysicalBus+4,y1
P:0092 200072         2  305 4842         or      y1,a
P:0093 546600         2  307 4843         move    a1,x:(r6)
                             4844 
                             4845 ; 156  |    *(MmcPhysicalBus[0].wWriteProtectGpioBase + HW_GPB_GPENR) |= MmcPhysicalBus[0].wWriteP
                                  rotectGpioSetMask;
                             4846 
P:0094 55E500         2  309 4848         move    x:(r5),b1
P:0095 4CF000 rrrrrr  3  312 4849         move    y:FMmcPhysicalBus+4,x0
P:0097 20004A         2  314 4850         or      x0,b
P:0098 556500         2  316 4851         move    b1,x:(r5)
                             4852 
                             4853 ; 157  |    // Power up the Pin.
                             4854 ; 158  |    *(MmcPhysicalBus[0].wMediaDetectGpioBase + HW_GPB_GPPWR) |= MmcPhysicalBus[0].wMediaDe
                                  tectGpioSetMask;
                             4855 
P:0099 6DF000 rrrrrr  3  319 4857         move    y:FMmcPhysicalBus+6,r5
P:009B 22B400         2  321 4858         move    r5,r4
P:009C 000000         2  323 4859         nop
P:009D 044C16         4  327 4860         lua     (r4)+n4,r6
P:009E 000000         2  329 4861         nop
P:009F 54E600         2  331 4862         move    x:(r6),a1
P:00A0 4DF000 rrrrrr  3  334 4863         move    y:FMmcPhysicalBus+7,x1
P:00A2 200062         2  336 4864         or      x1,a
P:00A3 546600         2  338 4865         move    a1,x:(r6)
                             4866 
                             4867 ; 159  |    // Configure Pin as Input
                             4868 ; 160  |    *(MmcPhysicalBus[0].wMediaDetectGpioBase + HW_GPB_GPDOER) &= MmcPhysicalBus[0].wMediaD
                                  etectGpioClearMask;
                             4869 
P:00A4 3D0300         2  340 4871         move    #3,n5
P:00A5 000000         2  342 4872         nop
P:00A6 044D16         4  346 4873         lua     (r5)+n5,r6
P:00A7 000000         2  348 4874         nop
P:00A8 55E600         2  350 4875         move    x:(r6),b1
P:00A9 4EF000 rrrrrr  3  353 4876         move    y:FMmcPhysicalBus+8,y0
P:00AB 20005E         2  355 4877         and     y0,b
P:00AC 556600         2  357 4878         move    b1,x:(r6)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4879 
                             4880 ; 161  |    // Enable it as GPIO
                             4881 ; 162  |    *(MmcPhysicalBus[0].wMediaDetectGpioBase + HW_GPB_GPENR) |= MmcPhysicalBus[0].wMediaDe
                                  tectGpioSetMask;
                             4882 
P:00AD 55E500         2  359 4884         move    x:(r5),b1
P:00AE 4EF000 rrrrrr  3  362 4885         move    y:FMmcPhysicalBus+7,y0
P:00B0 20005A         2  364 4886         or      y0,b
P:00B1 556500         2  366 4887         move    b1,x:(r5)
                             4888 
                             4889 ; 163  |}
                             4890 
P:00B2 00000C         4  370 4892         rts
                             4902 
                             4905 
Y:0000                       4906         org     y,".ybsscheckremovablemedia",bss:
                             4907 Fg_bMMCPreviousTest:
Y:0000 RESERVED              4908         ds      1
Y:0000
                             4910 
                             4911         extern  MMCCheckWriteProtectWrapper, MMCDetectPresenceWrapper
                             4912         extern  y:FMmcMediaInfo, y:FMmcPhysicalBus
                             4913         extern  FSysLowResolutionAdcReadVolt, FSysPostMessage
                             4914         extern  y:Fg_bWriteProtected
                             4915 
                             4916         global  FCheckRemovableMedia, FMMCInitDetectionPins, FbMMCInitDone
                             4917         global  Fg_bMMCPreviousTest, Fg_iCountDown
                             4918 
                             4919         local   L3, L4, L6, L8, L10
                             4920 
                             4921         calls   "CheckRemovableMedia", "MMCCheckWriteProtectWrapper"
                             4922         calls   "CheckRemovableMedia", "MMCDetectPresenceWrapper"
                             4923         calls   "CheckRemovableMedia", "SysLowResolutionAdcReadVolt"
                             4924         calls   "CheckRemovableMedia", "SysPostMessage"
                             4925 
