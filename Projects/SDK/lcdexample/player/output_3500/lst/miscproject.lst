TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfc64cb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;  miscproject.c:
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                               98 ; 3    |//
                               99 ; 4    |// Filename: miscproject.c
                              100 ; 5    |// Description: Misc Project-specific
                              101 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |
                              103 ; 8    |////////////////////////////////////////////////////////////////////////////////
                              104 ; 9    |//   Includes and external references
                              105 ; 10   |////////////////////////////////////////////////////////////////////////////////
                              106 ; 11   |
                              107 ; 12   |#include "types.h"
                              108 
                              110 
                              111 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              112 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              113 ; 3    |//
                              114 ; 4    |// Filename: types.h
                              115 ; 5    |// Description: Standard data types
                              116 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              117 ; 7    |
                              118 ; 8    |#ifndef _TYPES_H
                              119 ; 9    |#define _TYPES_H
                              120 ; 10   |
                              121 ; 11   |// TODO:  move this outta here!
                              122 ; 12   |#if !defined(NOERROR)
                              123 ; 13   |#define NOERROR 0
                              124 ; 14   |#define SUCCESS 0
                              125 ; 15   |#endif 
                              126 ; 16   |#if !defined(SUCCESS)
                              127 ; 17   |#define SUCCESS  0
                              128 ; 18   |#endif
                              129 ; 19   |#if !defined(ERROR)
                              130 ; 20   |#define ERROR   -1
                              131 ; 21   |#endif
                              132 ; 22   |#if !defined(FALSE)
                              133 ; 23   |#define FALSE 0
                              134 ; 24   |#endif
                              135 ; 25   |#if !defined(TRUE)
                              136 ; 26   |#define TRUE  1
                              137 ; 27   |#endif
                              138 ; 28   |
                              139 ; 29   |#if !defined(NULL)
                              140 ; 30   |#define NULL 0
                              141 ; 31   |#endif
                              142 ; 32   |
                              143 ; 33   |#define MAX_INT     0x7FFFFF
                              144 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              145 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              146 ; 36   |#define MAX_ULONG   (-1) 
                              147 ; 37   |
                              148 ; 38   |#define WORD_SIZE   24              // word size in bits
                              149 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              150 ; 40   |
                              151 ; 41   |
                              152 ; 42   |#define BYTE    unsigned char       // btVarName
                              153 ; 43   |#define CHAR    signed char         // cVarName
                              154 ; 44   |#define USHORT  unsigned short      // usVarName
                              155 ; 45   |#define SHORT   unsigned short      // sVarName
                              156 ; 46   |#define WORD    unsigned int        // wVarName
                              157 ; 47   |#define INT     signed int          // iVarName
                              158 ; 48   |#define DWORD   unsigned long       // dwVarName
                              159 ; 49   |#define LONG    signed long         // lVarName
                              160 ; 50   |#define BOOL    unsigned int        // bVarName
                              161 ; 51   |#define FRACT   _fract              // frVarName
                              162 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              163 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              164 ; 54   |#define FLOAT   float               // fVarName
                              165 ; 55   |#define DBL     double              // dVarName
                              166 ; 56   |#define ENUM    enum                // eVarName
                              167 ; 57   |#define CMX     _complex            // cmxVarName
                              168 ; 58   |typedef WORD UCS3;                   // 
                              169 ; 59   |
                              170 ; 60   |#define UINT16  unsigned short
                              171 ; 61   |#define UINT8   unsigned char   
                              172 ; 62   |#define UINT32  unsigned long
                              173 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              174 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              175 ; 65   |#define WCHAR   UINT16
                              176 ; 66   |
                              177 ; 67   |//UINT128 is 16 bytes or 6 words
                              178 ; 68   |typedef struct UINT128_3500 {   
                              179 ; 69   |    int val[6];     
                              180 ; 70   |} UINT128_3500;
                              181 ; 71   |
                              182 ; 72   |#define UINT128   UINT128_3500
                              183 ; 73   |
                              184 ; 74   |// Little endian word packed byte strings:   
                              185 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              186 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              187 ; 77   |// Little endian word packed byte strings:   
                              188 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              189 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              190 ; 80   |
                              191 ; 81   |// Declare Memory Spaces To Use When Coding
                              192 ; 82   |// A. Sector Buffers
                              193 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              194 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              195 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              196 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              197 
                              199 
                              200 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              201 ; 88   |// B. Media DDI Memory
                              202 ; 89   |#define MEDIA_DDI_MEM _Y
                              203 ; 90   |
                              204 ; 91   |
                              205 ; 92   |
                              206 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              207 ; 94   |// Examples of circular pointers:
                              208 ; 95   |//    INT CIRC cpiVarName
                              209 ; 96   |//    DWORD CIRC cpdwVarName
                              210 ; 97   |
                              211 ; 98   |#define RETCODE INT                 // rcVarName
                              212 ; 99   |
                              213 ; 100  |// generic bitfield structure
                              214 ; 101  |struct Bitfield {
                              215 ; 102  |    unsigned int B0  :1;
                              216 ; 103  |    unsigned int B1  :1;
                              217 ; 104  |    unsigned int B2  :1;
                              218 ; 105  |    unsigned int B3  :1;
                              219 ; 106  |    unsigned int B4  :1;
                              220 ; 107  |    unsigned int B5  :1;
                              221 ; 108  |    unsigned int B6  :1;
                              222 ; 109  |    unsigned int B7  :1;
                              223 ; 110  |    unsigned int B8  :1;
                              224 ; 111  |    unsigned int B9  :1;
                              225 ; 112  |    unsigned int B10 :1;
                              226 ; 113  |    unsigned int B11 :1;
                              227 ; 114  |    unsigned int B12 :1;
                              228 ; 115  |    unsigned int B13 :1;
                              229 ; 116  |    unsigned int B14 :1;
                              230 ; 117  |    unsigned int B15 :1;
                              231 ; 118  |    unsigned int B16 :1;
                              232 ; 119  |    unsigned int B17 :1;
                              233 ; 120  |    unsigned int B18 :1;
                              234 ; 121  |    unsigned int B19 :1;
                              235 ; 122  |    unsigned int B20 :1;
                              236 ; 123  |    unsigned int B21 :1;
                              237 ; 124  |    unsigned int B22 :1;
                              238 ; 125  |    unsigned int B23 :1;
                              239 ; 126  |};
                              240 ; 127  |
                              241 ; 128  |union BitInt {
                              242 ; 129  |        struct Bitfield B;
                              243 ; 130  |        int        I;
                              244 ; 131  |};
                              245 ; 132  |
                              246 ; 133  |#define MAX_MSG_LENGTH 10
                              247 ; 134  |struct CMessage
                              248 ; 135  |{
                              249 ; 136  |        unsigned int m_uLength;
                              250 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              251 ; 138  |};
                              252 ; 139  |
                              253 ; 140  |typedef struct {
                              254 ; 141  |    WORD m_wLength;
                              255 ; 142  |    WORD m_wMessage;
                              256 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              257 ; 144  |} Message;
                              258 ; 145  |
                              259 ; 146  |struct MessageQueueDescriptor
                              260 ; 147  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                              261 ; 148  |        int *m_pBase;
                              262 ; 149  |        int m_iModulo;
                              263 ; 150  |        int m_iSize;
                              264 ; 151  |        int *m_pHead;
                              265 ; 152  |        int *m_pTail;
                              266 ; 153  |};
                              267 ; 154  |
                              268 ; 155  |struct ModuleEntry
                              269 ; 156  |{
                              270 ; 157  |    int m_iSignaledEventMask;
                              271 ; 158  |    int m_iWaitEventMask;
                              272 ; 159  |    int m_iResourceOfCode;
                              273 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              274 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              275 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              276 ; 163  |    int m_uTimeOutHigh;
                              277 ; 164  |    int m_uTimeOutLow;
                              278 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              279 ; 166  |};
                              280 ; 167  |
                              281 ; 168  |union WaitMask{
                              282 ; 169  |    struct B{
                              283 ; 170  |        unsigned int m_bNone     :1;
                              284 ; 171  |        unsigned int m_bMessage  :1;
                              285 ; 172  |        unsigned int m_bTimer    :1;
                              286 ; 173  |        unsigned int m_bButton   :1;
                              287 ; 174  |    } B;
                              288 ; 175  |    int I;
                              289 ; 176  |} ;
                              290 ; 177  |
                              291 ; 178  |
                              292 ; 179  |struct Button {
                              293 ; 180  |        WORD wButtonEvent;
                              294 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              295 ; 182  |};
                              296 ; 183  |
                              297 ; 184  |struct Message {
                              298 ; 185  |        WORD wMsgLength;
                              299 ; 186  |        WORD wMsgCommand;
                              300 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              301 ; 188  |};
                              302 ; 189  |
                              303 ; 190  |union EventTypes {
                              304 ; 191  |        struct CMessage msg;
                              305 ; 192  |        struct Button Button ;
                              306 ; 193  |        struct Message Message;
                              307 ; 194  |};
                              308 ; 195  |
                              309 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              310 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              311 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              312 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              313 ; 200  |
                              314 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              315 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              316 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              317 ; 204  |
                              318 ; 205  |#if DEBUG
                              319 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              320 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              321 ; 208  |#else 
                              322 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              323 ; 210  |#define DebugBuildAssert(x)    
                              324 ; 211  |#endif
                              325 ; 212  |
                              326 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              327 ; 214  |//  #pragma asm
                              328 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              329 ; 216  |//  #pragma endasm
                              330 ; 217  |
                              331 ; 218  |
                              332 ; 219  |#ifdef COLOR_262K
                              333 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              334 ; 221  |#elif defined(COLOR_65K)
                              335 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              336 ; 223  |#else
                              337 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              338 ; 225  |#endif
                              339 ; 226  |    
                              340 ; 227  |#endif // #ifndef _TYPES_H
                              341 
                              343 
                              344 ; 13   |#include "hwequ.h"
                              345 
                              347 
                              348 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              349 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                              350 ; 3    |//  File        : hwequ.inc
                              351 ; 4    |//  Description : STMP Hardware Constants
                              352 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              353 ; 6    |
                              354 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                              355 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                              356 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                              357 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                              358 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                              359 ; 12   |
                              360 ; 13   |#if (!defined(HWEQU_INC))
                              361 ; 14   |#define HWEQU_INC 1
                              362 ; 15   |
                              363 ; 16   |#include "types.h"
                              364 
                              366 
                              367 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              368 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              369 ; 3    |//
                              370 ; 4    |// Filename: types.h
                              371 ; 5    |// Description: Standard data types
                              372 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              373 ; 7    |
                              374 ; 8    |#ifndef _TYPES_H
                              375 ; 9    |#define _TYPES_H
                              376 ; 10   |
                              377 ; 11   |// TODO:  move this outta here!
                              378 ; 12   |#if !defined(NOERROR)
                              379 ; 13   |#define NOERROR 0
                              380 ; 14   |#define SUCCESS 0
                              381 ; 15   |#endif 
                              382 ; 16   |#if !defined(SUCCESS)
                              383 ; 17   |#define SUCCESS  0
                              384 ; 18   |#endif
                              385 ; 19   |#if !defined(ERROR)
                              386 ; 20   |#define ERROR   -1
                              387 ; 21   |#endif
                              388 ; 22   |#if !defined(FALSE)
                              389 ; 23   |#define FALSE 0
                              390 ; 24   |#endif
                              391 ; 25   |#if !defined(TRUE)
                              392 ; 26   |#define TRUE  1
                              393 ; 27   |#endif
                              394 ; 28   |
                              395 ; 29   |#if !defined(NULL)
                              396 ; 30   |#define NULL 0
                              397 ; 31   |#endif
                              398 ; 32   |
                              399 ; 33   |#define MAX_INT     0x7FFFFF
                              400 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              401 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              402 ; 36   |#define MAX_ULONG   (-1) 
                              403 ; 37   |
                              404 ; 38   |#define WORD_SIZE   24              // word size in bits
                              405 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              406 ; 40   |
                              407 ; 41   |
                              408 ; 42   |#define BYTE    unsigned char       // btVarName
                              409 ; 43   |#define CHAR    signed char         // cVarName
                              410 ; 44   |#define USHORT  unsigned short      // usVarName
                              411 ; 45   |#define SHORT   unsigned short      // sVarName
                              412 ; 46   |#define WORD    unsigned int        // wVarName
                              413 ; 47   |#define INT     signed int          // iVarName
                              414 ; 48   |#define DWORD   unsigned long       // dwVarName
                              415 ; 49   |#define LONG    signed long         // lVarName
                              416 ; 50   |#define BOOL    unsigned int        // bVarName
                              417 ; 51   |#define FRACT   _fract              // frVarName
                              418 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              419 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              420 ; 54   |#define FLOAT   float               // fVarName
                              421 ; 55   |#define DBL     double              // dVarName
                              422 ; 56   |#define ENUM    enum                // eVarName
                              423 ; 57   |#define CMX     _complex            // cmxVarName
                              424 ; 58   |typedef WORD UCS3;                   // 
                              425 ; 59   |
                              426 ; 60   |#define UINT16  unsigned short
                              427 ; 61   |#define UINT8   unsigned char   
                              428 ; 62   |#define UINT32  unsigned long
                              429 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              430 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              431 ; 65   |#define WCHAR   UINT16
                              432 ; 66   |
                              433 ; 67   |//UINT128 is 16 bytes or 6 words
                              434 ; 68   |typedef struct UINT128_3500 {   
                              435 ; 69   |    int val[6];     
                              436 ; 70   |} UINT128_3500;
                              437 ; 71   |
                              438 ; 72   |#define UINT128   UINT128_3500
                              439 ; 73   |
                              440 ; 74   |// Little endian word packed byte strings:   
                              441 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              442 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              443 ; 77   |// Little endian word packed byte strings:   
                              444 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              445 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              446 ; 80   |
                              447 ; 81   |// Declare Memory Spaces To Use When Coding
                              448 ; 82   |// A. Sector Buffers
                              449 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              450 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              451 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              452 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              453 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              454 ; 88   |// B. Media DDI Memory
                              455 ; 89   |#define MEDIA_DDI_MEM _Y
                              456 ; 90   |
                              457 ; 91   |
                              458 ; 92   |
                              459 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              460 ; 94   |// Examples of circular pointers:
                              461 ; 95   |//    INT CIRC cpiVarName
                              462 ; 96   |//    DWORD CIRC cpdwVarName
                              463 ; 97   |
                              464 ; 98   |#define RETCODE INT                 // rcVarName
                              465 ; 99   |
                              466 ; 100  |// generic bitfield structure
                              467 ; 101  |struct Bitfield {
                              468 ; 102  |    unsigned int B0  :1;
                              469 ; 103  |    unsigned int B1  :1;
                              470 ; 104  |    unsigned int B2  :1;
                              471 ; 105  |    unsigned int B3  :1;
                              472 ; 106  |    unsigned int B4  :1;
                              473 ; 107  |    unsigned int B5  :1;
                              474 ; 108  |    unsigned int B6  :1;
                              475 ; 109  |    unsigned int B7  :1;
                              476 ; 110  |    unsigned int B8  :1;
                              477 ; 111  |    unsigned int B9  :1;
                              478 ; 112  |    unsigned int B10 :1;
                              479 ; 113  |    unsigned int B11 :1;
                              480 ; 114  |    unsigned int B12 :1;
                              481 ; 115  |    unsigned int B13 :1;
                              482 ; 116  |    unsigned int B14 :1;
                              483 ; 117  |    unsigned int B15 :1;
                              484 ; 118  |    unsigned int B16 :1;
                              485 ; 119  |    unsigned int B17 :1;
                              486 ; 120  |    unsigned int B18 :1;
                              487 ; 121  |    unsigned int B19 :1;
                              488 ; 122  |    unsigned int B20 :1;
                              489 ; 123  |    unsigned int B21 :1;
                              490 ; 124  |    unsigned int B22 :1;
                              491 ; 125  |    unsigned int B23 :1;
                              492 ; 126  |};
                              493 ; 127  |
                              494 ; 128  |union BitInt {
                              495 ; 129  |        struct Bitfield B;
                              496 ; 130  |        int        I;
                              497 ; 131  |};
                              498 ; 132  |
                              499 ; 133  |#define MAX_MSG_LENGTH 10
                              500 ; 134  |struct CMessage
                              501 ; 135  |{
                              502 ; 136  |        unsigned int m_uLength;
                              503 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              504 ; 138  |};
                              505 ; 139  |
                              506 ; 140  |typedef struct {
                              507 ; 141  |    WORD m_wLength;
                              508 ; 142  |    WORD m_wMessage;
                              509 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              510 ; 144  |} Message;
                              511 ; 145  |
                              512 ; 146  |struct MessageQueueDescriptor
                              513 ; 147  |{
                              514 ; 148  |        int *m_pBase;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              515 ; 149  |        int m_iModulo;
                              516 ; 150  |        int m_iSize;
                              517 ; 151  |        int *m_pHead;
                              518 ; 152  |        int *m_pTail;
                              519 ; 153  |};
                              520 ; 154  |
                              521 ; 155  |struct ModuleEntry
                              522 ; 156  |{
                              523 ; 157  |    int m_iSignaledEventMask;
                              524 ; 158  |    int m_iWaitEventMask;
                              525 ; 159  |    int m_iResourceOfCode;
                              526 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              527 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              528 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              529 ; 163  |    int m_uTimeOutHigh;
                              530 ; 164  |    int m_uTimeOutLow;
                              531 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              532 ; 166  |};
                              533 ; 167  |
                              534 ; 168  |union WaitMask{
                              535 ; 169  |    struct B{
                              536 ; 170  |        unsigned int m_bNone     :1;
                              537 ; 171  |        unsigned int m_bMessage  :1;
                              538 ; 172  |        unsigned int m_bTimer    :1;
                              539 ; 173  |        unsigned int m_bButton   :1;
                              540 ; 174  |    } B;
                              541 ; 175  |    int I;
                              542 ; 176  |} ;
                              543 ; 177  |
                              544 ; 178  |
                              545 ; 179  |struct Button {
                              546 ; 180  |        WORD wButtonEvent;
                              547 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              548 ; 182  |};
                              549 ; 183  |
                              550 ; 184  |struct Message {
                              551 ; 185  |        WORD wMsgLength;
                              552 ; 186  |        WORD wMsgCommand;
                              553 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              554 ; 188  |};
                              555 ; 189  |
                              556 ; 190  |union EventTypes {
                              557 ; 191  |        struct CMessage msg;
                              558 ; 192  |        struct Button Button ;
                              559 ; 193  |        struct Message Message;
                              560 ; 194  |};
                              561 ; 195  |
                              562 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              563 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              564 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              565 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              566 ; 200  |
                              567 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              568 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              569 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              570 ; 204  |
                              571 ; 205  |#if DEBUG
                              572 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              573 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              574 ; 208  |#else 
                              575 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              576 ; 210  |#define DebugBuildAssert(x)    
                              577 ; 211  |#endif
                              578 ; 212  |
                              579 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              580 ; 214  |//  #pragma asm
                              581 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              582 ; 216  |//  #pragma endasm
                              583 ; 217  |
                              584 ; 218  |
                              585 ; 219  |#ifdef COLOR_262K
                              586 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              587 ; 221  |#elif defined(COLOR_65K)
                              588 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              589 ; 223  |#else
                              590 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              591 ; 225  |#endif
                              592 ; 226  |    
                              593 ; 227  |#endif // #ifndef _TYPES_H
                              594 
                              596 
                              597 ; 17   |#include "regsclkctrl.h"
                              598 
                              600 
                              601 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                              602 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                              603 ; 3    |
                              604 ; 4    |
                              605 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              606 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                              607 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                              608 ; 8    |#define HW_CCR_LTC_BITPOS 1
                              609 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                              610 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                              611 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                              612 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                              613 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                              614 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                              615 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                              616 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                              617 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                              618 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                              619 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                              620 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                              621 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                              622 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                              623 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                              624 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                              625 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                              626 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                              627 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                              628 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                              629 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                              630 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                              631 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                              632 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                              633 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                              634 ; 34   |
                              635 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                              636 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                              637 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                              638 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                              639 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                              640 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                              641 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                              642 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                              643 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                              644 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                              645 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                              646 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                              647 ; 47   |
                              648 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                              649 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                              650 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                              651 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                              652 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                              653 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                              654 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                              655 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                              656 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                              657 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                              658 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                              659 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                              660 ; 60   |
                              661 ; 61   |typedef union               
                              662 ; 62   |{
                              663 ; 63   |    struct
                              664 ; 64   |    {
                              665 ; 65   |        int CKRST       :1; // Clock Reset
                              666 ; 66   |        int LTC         :1;
                              667 ; 67   |        int PLLEN       :1;
                              668 ; 68   |        int XTLEN       :1;
                              669 ; 69   |        int FLB         :1;
                              670 ; 70   |        unsigned ADIV   :3;
                              671 ; 71   |        int CKSRC       :1;
                              672 ; 72   |        unsigned DDIV   :3;
                              673 ; 73   |        unsigned PDIV   :5;
                              674 ; 74   |        int PWDN        :1;
                              675 ; 75   |        int ACKEN       :1;
                              676 ; 76   |        int LOCK        :1;
                              677 ; 77   |        unsigned ADIV1  :3;
                              678 ; 78   |        unsigned DDIV_MSB:1;
                              679 ; 79   |    } B;
                              680 ; 80   |
                              681 ; 81   |    int I;
                              682 ; 82   |    unsigned int U;
                              683 ; 83   |
                              684 ; 84   |} ccr_type;
                              685 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                              686 ; 86   |
                              687 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              688 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                              689 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                              690 ; 90   |#define HW_RCR_SRST_BITPOS 4
                              691 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                              692 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                              693 ; 93   |#define HW_RCR_NMI_BITPOS 10
                              694 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                              695 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                              696 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                              697 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                              698 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                              699 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                              700 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                              701 ; 101  |
                              702 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                              703 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                              704 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                              705 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                              706 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                              707 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                              708 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                              709 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                              710 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                              711 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                              712 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                              713 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                              714 ; 114  |
                              715 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                              716 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                              717 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                              718 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                              719 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                              720 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                              721 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                              722 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                              723 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                              724 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                              725 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                              726 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                              727 ; 127  |
                              728 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                              729 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                              730 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                              731 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                              732 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                              733 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                              734 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                              735 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                              736 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                              737 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                              738 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                              739 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                              740 ; 140  |
                              741 ; 141  |typedef union               
                              742 ; 142  |{
                              743 ; 143  |    struct
                              744 ; 144  |   {
                              745 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                              746 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                              747 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                              748 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                              749 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                              750 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                              751 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                              752 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                              753 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                              754 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                              755 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                              756 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                              757 ; 157  |    } B;
                              758 ; 158  |
                              759 ; 159  |    int I;
                              760 ; 160  |    unsigned int U;
                              761 ; 161  |
                              762 ; 162  |} rcr_type;
                              763 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                              764 ; 164  |
                              765 ; 165  |
                              766 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                              767 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              768 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                              769 ; 169  |
                              770 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                              771 ; 171  |
                              772 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                              773 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                              774 ; 174  |typedef union               
                              775 ; 175  |{
                              776 ; 176  |    struct
                              777 ; 177  |   {
                              778 ; 178  |        int LOW;
                              779 ; 179  |    } B;
                              780 ; 180  |
                              781 ; 181  |    int I;
                              782 ; 182  |    unsigned int U;
                              783 ; 183  |
                              784 ; 184  |} dclkcntl_type;
                              785 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                              786 ; 186  |
                              787 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                              788 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                              789 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                              790 ; 190  |
                              791 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                              792 ; 192  |
                              793 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS) 
                              794 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                              795 ; 195  |typedef union               
                              796 ; 196  |{
                              797 ; 197  |    struct
                              798 ; 198  |   {
                              799 ; 199  |        int HIGH;
                              800 ; 200  |    } B;
                              801 ; 201  |
                              802 ; 202  |    int I;
                              803 ; 203  |    unsigned int U;
                              804 ; 204  |
                              805 ; 205  |} dclkcntu_type;
                              806 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                              807 ; 207  |
                              808 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                              809 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                              810 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                              811 ; 211  |
                              812 ; 212  |// Clock count register (lower)
                              813 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                              814 ; 214  |// Clock count register (upper)
                              815 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                              816 ; 216  |// Cycle steal count register
                              817 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                              818 ; 218  |
                              819 ; 219  |#endif
                              820 ; 220  |
                              821 ; 221  |
                              822 
                              824 
                              825 ; 18   |#include "regscore.h"
                              826 
                              828 
                              829 ; 1    |#if !(defined(__REGS_STATUS_INC))
                              830 ; 2    |#define __REGS_STATUS_INC 1
                              831 ; 3    |
                              832 ; 4    |
                              833 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              834 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                              835 ; 7    |#define HW_OMR_MA_BITPOS 0
                              836 ; 8    |#define HW_OMR_MB_BITPOS 1
                              837 ; 9    |#define HW_OMR_DE_BITPOS 2
                              838 ; 10   |#define HW_OMR_YE_BITPOS 3
                              839 ; 11   |#define HW_OMR_MC_BITPOS 4
                              840 ; 12   |#define HW_OMR_SD_BITPOS 6
                              841 ; 13   |
                              842 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                              843 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                              844 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                              845 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                              846 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                              847 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                              848 ; 20   |
                              849 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                              850 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                              851 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                              852 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                              853 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                              854 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                              855 ; 27   |
                              856 ; 28   |
                              857 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                              858 ; 30   |//  Status Register (HW_SR) Bit Positions
                              859 ; 31   |#define HW_SR_C_BITPOS 0
                              860 ; 32   |#define HW_SR_O_BITPOS 1
                              861 ; 33   |#define HW_SR_Z_BITPOS 2
                              862 ; 34   |#define HW_SR_N_BITPOS 3
                              863 ; 35   |#define HW_SR_U_BITPOS 4
                              864 ; 36   |#define HW_SR_E_BITPOS 5
                              865 ; 37   |#define HW_SR_L_BITPOS 6
                              866 ; 38   |#define HW_SR_IM_BITPOS 8
                              867 ; 39   |#define HW_SR_IM0_BITPOS 8
                              868 ; 40   |#define HW_SR_IM1_BITPOS 9
                              869 ; 41   |#define HW_SR_SM_BITPOS 10
                              870 ; 42   |#define HW_SR_SM0_BITPOS 10
                              871 ; 43   |#define HW_SR_SM1_BITPOS 11
                              872 ; 44   |#define HW_SR_TM_BITPOS 13
                              873 ; 45   |#define HW_SR_DP_BITPOS 14
                              874 ; 46   |#define HW_SR_LOOP_BITPOS 15
                              875 ; 47   |
                              876 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                              877 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                              878 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                              879 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                              880 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                              881 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                              882 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                              883 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                              884 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                              885 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                              886 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                              887 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                              888 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                              889 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                              890 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                              891 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                              892 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                              893 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                              894 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                              895 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                              896 ; 68   |
                              897 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                              898 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                              899 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                              900 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                              901 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                              902 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                              903 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                              904 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                              905 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                              906 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                              907 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                              908 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                              909 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                              910 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                              911 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                              912 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                              913 ; 85   |
                              914 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                              915 ; 87   |//  RAM/ROM Config Register Bit Positions
                              916 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                              917 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                              918 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                              919 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                              920 ; 92   |#endif
                              921 ; 93   |
                              922 ; 94   |
                              923 
                              925 
                              926 ; 19   |#include "regscodec.h"
                              927 
                              929 
                              930 ; 1    |#if !(defined(regscodecinc))
                              931 ; 2    |#define regscodecinc 1
                              932 ; 3    |
                              933 ; 4    |
                              934 ; 5    |
                              935 ; 6    |#include "types.h"
                              936 
                              938 
                              939 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              940 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              941 ; 3    |//
                              942 ; 4    |// Filename: types.h
                              943 ; 5    |// Description: Standard data types
                              944 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              945 ; 7    |
                              946 ; 8    |#ifndef _TYPES_H
                              947 ; 9    |#define _TYPES_H
                              948 ; 10   |
                              949 ; 11   |// TODO:  move this outta here!
                              950 ; 12   |#if !defined(NOERROR)
                              951 ; 13   |#define NOERROR 0
                              952 ; 14   |#define SUCCESS 0
                              953 ; 15   |#endif 
                              954 ; 16   |#if !defined(SUCCESS)
                              955 ; 17   |#define SUCCESS  0
                              956 ; 18   |#endif
                              957 ; 19   |#if !defined(ERROR)
                              958 ; 20   |#define ERROR   -1
                              959 ; 21   |#endif
                              960 ; 22   |#if !defined(FALSE)
                              961 ; 23   |#define FALSE 0
                              962 ; 24   |#endif
                              963 ; 25   |#if !defined(TRUE)
                              964 ; 26   |#define TRUE  1
                              965 ; 27   |#endif
                              966 ; 28   |
                              967 ; 29   |#if !defined(NULL)
                              968 ; 30   |#define NULL 0
                              969 ; 31   |#endif
                              970 ; 32   |
                              971 ; 33   |#define MAX_INT     0x7FFFFF
                              972 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              973 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              974 ; 36   |#define MAX_ULONG   (-1) 
                              975 ; 37   |
                              976 ; 38   |#define WORD_SIZE   24              // word size in bits
                              977 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              978 ; 40   |
                              979 ; 41   |
                              980 ; 42   |#define BYTE    unsigned char       // btVarName
                              981 ; 43   |#define CHAR    signed char         // cVarName
                              982 ; 44   |#define USHORT  unsigned short      // usVarName
                              983 ; 45   |#define SHORT   unsigned short      // sVarName
                              984 ; 46   |#define WORD    unsigned int        // wVarName
                              985 ; 47   |#define INT     signed int          // iVarName
                              986 ; 48   |#define DWORD   unsigned long       // dwVarName
                              987 ; 49   |#define LONG    signed long         // lVarName
                              988 ; 50   |#define BOOL    unsigned int        // bVarName
                              989 ; 51   |#define FRACT   _fract              // frVarName
                              990 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              991 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              992 ; 54   |#define FLOAT   float               // fVarName
                              993 ; 55   |#define DBL     double              // dVarName
                              994 ; 56   |#define ENUM    enum                // eVarName
                              995 ; 57   |#define CMX     _complex            // cmxVarName
                              996 ; 58   |typedef WORD UCS3;                   // 
                              997 ; 59   |
                              998 ; 60   |#define UINT16  unsigned short
                              999 ; 61   |#define UINT8   unsigned char   
                             1000 ; 62   |#define UINT32  unsigned long
                             1001 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             1002 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             1003 ; 65   |#define WCHAR   UINT16
                             1004 ; 66   |
                             1005 ; 67   |//UINT128 is 16 bytes or 6 words
                             1006 ; 68   |typedef struct UINT128_3500 {   
                             1007 ; 69   |    int val[6];     
                             1008 ; 70   |} UINT128_3500;
                             1009 ; 71   |
                             1010 ; 72   |#define UINT128   UINT128_3500
                             1011 ; 73   |
                             1012 ; 74   |// Little endian word packed byte strings:   
                             1013 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1014 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1015 ; 77   |// Little endian word packed byte strings:   
                             1016 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1017 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1018 ; 80   |
                             1019 ; 81   |// Declare Memory Spaces To Use When Coding
                             1020 ; 82   |// A. Sector Buffers
                             1021 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1022 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1023 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1024 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1025 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1026 ; 88   |// B. Media DDI Memory
                             1027 ; 89   |#define MEDIA_DDI_MEM _Y
                             1028 ; 90   |
                             1029 ; 91   |
                             1030 ; 92   |
                             1031 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1032 ; 94   |// Examples of circular pointers:
                             1033 ; 95   |//    INT CIRC cpiVarName
                             1034 ; 96   |//    DWORD CIRC cpdwVarName
                             1035 ; 97   |
                             1036 ; 98   |#define RETCODE INT                 // rcVarName
                             1037 ; 99   |
                             1038 ; 100  |// generic bitfield structure
                             1039 ; 101  |struct Bitfield {
                             1040 ; 102  |    unsigned int B0  :1;
                             1041 ; 103  |    unsigned int B1  :1;
                             1042 ; 104  |    unsigned int B2  :1;
                             1043 ; 105  |    unsigned int B3  :1;
                             1044 ; 106  |    unsigned int B4  :1;
                             1045 ; 107  |    unsigned int B5  :1;
                             1046 ; 108  |    unsigned int B6  :1;
                             1047 ; 109  |    unsigned int B7  :1;
                             1048 ; 110  |    unsigned int B8  :1;
                             1049 ; 111  |    unsigned int B9  :1;
                             1050 ; 112  |    unsigned int B10 :1;
                             1051 ; 113  |    unsigned int B11 :1;
                             1052 ; 114  |    unsigned int B12 :1;
                             1053 ; 115  |    unsigned int B13 :1;
                             1054 ; 116  |    unsigned int B14 :1;
                             1055 ; 117  |    unsigned int B15 :1;
                             1056 ; 118  |    unsigned int B16 :1;
                             1057 ; 119  |    unsigned int B17 :1;
                             1058 ; 120  |    unsigned int B18 :1;
                             1059 ; 121  |    unsigned int B19 :1;
                             1060 ; 122  |    unsigned int B20 :1;
                             1061 ; 123  |    unsigned int B21 :1;
                             1062 ; 124  |    unsigned int B22 :1;
                             1063 ; 125  |    unsigned int B23 :1;
                             1064 ; 126  |};
                             1065 ; 127  |
                             1066 ; 128  |union BitInt {
                             1067 ; 129  |        struct Bitfield B;
                             1068 ; 130  |        int        I;
                             1069 ; 131  |};
                             1070 ; 132  |
                             1071 ; 133  |#define MAX_MSG_LENGTH 10
                             1072 ; 134  |struct CMessage
                             1073 ; 135  |{
                             1074 ; 136  |        unsigned int m_uLength;
                             1075 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1076 ; 138  |};
                             1077 ; 139  |
                             1078 ; 140  |typedef struct {
                             1079 ; 141  |    WORD m_wLength;
                             1080 ; 142  |    WORD m_wMessage;
                             1081 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1082 ; 144  |} Message;
                             1083 ; 145  |
                             1084 ; 146  |struct MessageQueueDescriptor
                             1085 ; 147  |{
                             1086 ; 148  |        int *m_pBase;
                             1087 ; 149  |        int m_iModulo;
                             1088 ; 150  |        int m_iSize;
                             1089 ; 151  |        int *m_pHead;
                             1090 ; 152  |        int *m_pTail;
                             1091 ; 153  |};
                             1092 ; 154  |
                             1093 ; 155  |struct ModuleEntry
                             1094 ; 156  |{
                             1095 ; 157  |    int m_iSignaledEventMask;
                             1096 ; 158  |    int m_iWaitEventMask;
                             1097 ; 159  |    int m_iResourceOfCode;
                             1098 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1099 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             1100 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1101 ; 163  |    int m_uTimeOutHigh;
                             1102 ; 164  |    int m_uTimeOutLow;
                             1103 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1104 ; 166  |};
                             1105 ; 167  |
                             1106 ; 168  |union WaitMask{
                             1107 ; 169  |    struct B{
                             1108 ; 170  |        unsigned int m_bNone     :1;
                             1109 ; 171  |        unsigned int m_bMessage  :1;
                             1110 ; 172  |        unsigned int m_bTimer    :1;
                             1111 ; 173  |        unsigned int m_bButton   :1;
                             1112 ; 174  |    } B;
                             1113 ; 175  |    int I;
                             1114 ; 176  |} ;
                             1115 ; 177  |
                             1116 ; 178  |
                             1117 ; 179  |struct Button {
                             1118 ; 180  |        WORD wButtonEvent;
                             1119 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1120 ; 182  |};
                             1121 ; 183  |
                             1122 ; 184  |struct Message {
                             1123 ; 185  |        WORD wMsgLength;
                             1124 ; 186  |        WORD wMsgCommand;
                             1125 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1126 ; 188  |};
                             1127 ; 189  |
                             1128 ; 190  |union EventTypes {
                             1129 ; 191  |        struct CMessage msg;
                             1130 ; 192  |        struct Button Button ;
                             1131 ; 193  |        struct Message Message;
                             1132 ; 194  |};
                             1133 ; 195  |
                             1134 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1135 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1136 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1137 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1138 ; 200  |
                             1139 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1140 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1141 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1142 ; 204  |
                             1143 ; 205  |#if DEBUG
                             1144 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1145 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1146 ; 208  |#else 
                             1147 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             1148 ; 210  |#define DebugBuildAssert(x)    
                             1149 ; 211  |#endif
                             1150 ; 212  |
                             1151 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1152 ; 214  |//  #pragma asm
                             1153 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1154 ; 216  |//  #pragma endasm
                             1155 ; 217  |
                             1156 ; 218  |
                             1157 ; 219  |#ifdef COLOR_262K
                             1158 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             1159 ; 221  |#elif defined(COLOR_65K)
                             1160 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             1161 ; 223  |#else
                             1162 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             1163 ; 225  |#endif
                             1164 ; 226  |    
                             1165 ; 227  |#endif // #ifndef _TYPES_H
                             1166 
                             1168 
                             1169 ; 7    |
                             1170 ; 8    |
                             1171 ; 9    |
                             1172 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1173 ; 11   |
                             1174 ; 12   |//   SYSTEM STMP Registers 
                             1175 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             1176 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1177 ; 15   |
                             1178 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             1179 ; 17   |
                             1180 ; 18   |
                             1181 ; 19   |
                             1182 ; 20   |
                             1183 ; 21   |
                             1184 ; 22   |
                             1185 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             1186 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             1187 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             1188 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             1189 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             1190 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             1191 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             1192 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             1193 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             1194 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             1195 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             1196 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             1197 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             1198 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             1199 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             1200 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             1201 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             1202 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             1203 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             1204 ; 42   |
                             1205 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             1206 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             1207 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             1208 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             1209 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             1210 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             1211 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             1212 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             1213 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             1214 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             1215 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             1216 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             1217 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             1218 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             1219 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             1220 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             1221 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             1222 ; 60   |
                             1223 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             1224 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             1225 ; 63   |
                             1226 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1227 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1228 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1229 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1230 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1231 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1232 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1233 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1234 ; 72   |
                             1235 ; 73   |#if defined(CAPLESS_HP)
                             1236 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             1237 ; 75   |#else 
                             1238 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             1239 ; 77   |#endif
                             1240 ; 78   |
                             1241 ; 79   |// Headphone control register
                             1242 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             1243 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1244 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             1245 ; 83   |typedef union               
                             1246 ; 84   |{
                             1247 ; 85   |    struct {
                             1248 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             1249 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             1250 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             1251 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             1252 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             1253 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             1254 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             1255 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             1256 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             1257 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             1258 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             1259 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             1260 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             1261 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             1262 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             1263 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             1264 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             1265 ; 103  |    } B;
                             1266 ; 104  |    int I;
                             1267 ; 105  |    unsigned int U;
                             1268 ; 106  |} hpctrl_type;
                             1269 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             1270 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             1271 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             1272 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             1273 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             1274 ; 112  |
                             1275 ; 113  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1276 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             1277 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             1278 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             1279 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             1280 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             1281 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             1282 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             1283 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             1284 ; 122  |
                             1285 ; 123  |
                             1286 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             1287 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             1288 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             1289 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             1290 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             1291 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             1292 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             1293 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             1294 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             1295 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             1296 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             1297 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             1298 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             1299 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             1300 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             1301 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             1302 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             1303 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             1304 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             1305 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             1306 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             1307 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             1308 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             1309 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             1310 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             1311 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             1312 ; 150  |
                             1313 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             1314 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             1315 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             1316 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             1317 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             1318 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             1319 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             1320 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             1321 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             1322 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             1323 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             1324 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             1325 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             1326 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             1327 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             1328 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             1329 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             1330 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             1331 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             1332 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             1333 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             1334 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             1335 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             1336 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             1337 ; 175  |
                             1338 ; 176  |
                             1339 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             1340 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             1341 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             1342 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             1343 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             1344 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             1345 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             1346 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             1347 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             1348 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             1349 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             1350 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             1351 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             1352 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             1353 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             1354 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             1355 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             1356 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             1357 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             1358 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             1359 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             1360 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             1361 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             1362 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             1363 ; 201  |
                             1364 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             1365 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             1366 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             1367 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             1368 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             1369 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             1370 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             1371 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             1372 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             1373 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             1374 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             1375 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             1376 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             1377 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             1378 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             1379 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             1380 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             1381 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             1382 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             1383 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             1384 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             1385 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             1386 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             1387 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             1388 ; 226  |
                             1389 ; 227  |typedef union               
                             1390 ; 228  |{
                             1391 ; 229  |    struct {
                             1392 ; 230  |        int INV_USB_CLK            : 1;
                             1393 ; 231  |        int USB_DFF_BYPASS         : 1;
                             1394 ; 232  |        int HOLD_GND               : 1;
                             1395 ; 233  |        int ACKI                   : 1;
                             1396 ; 234  |        int ASD2X                  : 1;
                             1397 ; 235  |        int PCPCU                  : 1;
                             1398 ; 236  |        int PCPCD                  : 1;
                             1399 ; 237  |        int DCKI                   : 1;
                             1400 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             1401 ; 239  |        int PSRN                   : 1;
                             1402 ; 240  |        int FX2                    : 1;
                             1403 ; 241  |        int VCOS                   : 1;
                             1404 ; 242  |        int XBCO                   : 1;
                             1405 ; 243  |        int XBGC                   : 1;
                             1406 ; 244  |        int ADTHD                  : 1;
                             1407 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             1408 ; 246  |        int PWDADC                 : 1;
                             1409 ; 247  |        int MICBIAS1               : 1;
                             1410 ; 248  |        int EZD                    : 1;
                             1411 ; 249  |        int DZCDA                  : 1;
                             1412 ; 250  |        int DZCFM                  : 1;
                             1413 ; 251  |        int DZCLI                  : 1;
                             1414 ; 252  |        int DZCMI                  : 1;
                             1415 ; 253  |        int DZCMA                  : 1;
                             1416 ; 254  |    } B;
                             1417 ; 255  |    int I;
                             1418 ; 256  |    unsigned int U;
                             1419 ; 257  |} mix_tbr_type;
                             1420 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             1421 ; 259  |
                             1422 ; 260  |
                             1423 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             1424 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1425 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             1426 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             1427 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             1428 ; 266  |
                             1429 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             1430 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             1431 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             1432 ; 270  |
                             1433 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             1434 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             1435 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             1436 ; 274  |
                             1437 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             1438 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             1439 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             1440 ; 278  |
                             1441 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             1442 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             1443 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             1444 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             1445 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             1446 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             1447 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             1448 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             1449 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             1450 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             1451 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             1452 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             1453 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             1454 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             1455 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             1456 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             1457 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             1458 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             1459 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             1460 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             1461 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             1462 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             1463 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             1464 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             1465 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             1466 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             1467 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             1468 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             1469 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             1470 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             1471 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             1472 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             1473 ; 311  |
                             1474 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             1475 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             1476 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             1477 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             1478 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             1479 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             1480 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             1481 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             1482 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             1483 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             1484 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             1485 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             1486 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             1487 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             1488 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             1489 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             1490 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             1491 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             1492 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             1493 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             1494 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             1495 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             1496 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             1497 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             1498 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             1499 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             1500 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             1501 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             1502 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             1503 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             1504 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             1505 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             1506 ; 344  |
                             1507 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             1508 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1509 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             1510 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             1511 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             1512 ; 350  |
                             1513 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             1514 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             1515 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             1516 ; 354  |
                             1517 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             1518 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             1519 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             1520 ; 358  |
                             1521 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             1522 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             1523 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             1524 ; 362  |
                             1525 ; 363  |
                             1526 ; 364  |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1527 ; 365  |{
                             1528 ; 366  |    struct
                             1529 ; 367  |    {
                             1530 ; 368  |        unsigned MR :5;
                             1531 ; 369  |        int         :3;
                             1532 ; 370  |        unsigned ML :5;
                             1533 ; 371  |        int         :2;
                             1534 ; 372  |        int MUTE    :1;
                             1535 ; 373  |    } B;
                             1536 ; 374  |    int I;
                             1537 ; 375  |    unsigned int U;
                             1538 ; 376  |} mix_mastervr_type;
                             1539 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             1540 ; 378  |
                             1541 ; 379  |
                             1542 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             1543 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             1544 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             1545 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             1546 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             1547 ; 385  |
                             1548 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             1549 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             1550 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             1551 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             1552 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             1553 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             1554 ; 392  |
                             1555 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             1556 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             1557 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             1558 ; 396  |
                             1559 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             1560 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             1561 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             1562 ; 400  |
                             1563 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             1564 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             1565 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             1566 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             1567 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             1568 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             1569 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             1570 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             1571 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             1572 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             1573 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             1574 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             1575 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             1576 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             1577 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             1578 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             1579 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             1580 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             1581 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             1582 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             1583 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             1584 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             1585 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             1586 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             1587 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             1588 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             1589 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             1590 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             1591 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             1592 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             1593 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             1594 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             1595 ; 433  |
                             1596 ; 434  |typedef union               
                             1597 ; 435  |{
                             1598 ; 436  |    struct {
                             1599 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             1600 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             1601 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             1602 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             1603 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             1604 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             1605 ; 443  |    } B;
                             1606 ; 444  |    int I;
                             1607 ; 445  |    unsigned int U;
                             1608 ; 446  |} mix_micinvr_type;
                             1609 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             1610 ; 448  |
                             1611 ; 449  |
                             1612 ; 450  |
                             1613 ; 451  |
                             1614 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             1615 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             1616 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             1617 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             1618 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             1619 ; 457  |
                             1620 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             1621 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             1622 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             1623 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             1624 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             1625 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             1626 ; 464  |
                             1627 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             1628 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             1629 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             1630 ; 468  |
                             1631 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             1632 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             1633 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             1634 ; 472  |
                             1635 ; 473  |typedef union               
                             1636 ; 474  |{
                             1637 ; 475  |    struct {
                             1638 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             1639 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             1640 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             1641 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             1642 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             1643 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             1644 ; 482  |    } B;
                             1645 ; 483  |    int I;
                             1646 ; 484  |    unsigned int U;
                             1647 ; 485  |} mix_line1invr_type;
                             1648 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             1649 ; 487  |
                             1650 ; 488  |
                             1651 ; 489  |
                             1652 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             1653 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             1654 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             1655 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             1656 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             1657 ; 495  |
                             1658 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             1659 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             1660 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             1661 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             1662 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             1663 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             1664 ; 502  |
                             1665 ; 503  |
                             1666 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             1667 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             1668 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             1669 ; 507  |
                             1670 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             1671 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             1672 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             1673 ; 511  |
                             1674 ; 512  |typedef union               
                             1675 ; 513  |{
                             1676 ; 514  |    struct {
                             1677 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             1678 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             1679 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             1680 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             1681 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             1682 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             1683 ; 521  |    } B;
                             1684 ; 522  |    int I;
                             1685 ; 523  |    unsigned int U;
                             1686 ; 524  |} mix_line2invr_type;
                             1687 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             1688 ; 526  |
                             1689 ; 527  |
                             1690 ; 528  |
                             1691 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             1692 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             1693 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             1694 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             1695 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             1696 ; 534  |
                             1697 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             1698 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             1699 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             1700 ; 538  |
                             1701 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             1702 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             1703 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             1704 ; 542  |
                             1705 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             1706 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             1707 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             1708 ; 546  |
                             1709 ; 547  |typedef union               
                             1710 ; 548  |{
                             1711 ; 549  |    struct {
                             1712 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             1713 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             1714 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             1715 ; 553  |    } B;
                             1716 ; 554  |    int I;
                             1717 ; 555  |    unsigned int U;
                             1718 ; 556  |} mix_dacinvr_type;
                             1719 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             1720 ; 558  |
                             1721 ; 559  |
                             1722 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             1723 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             1724 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             1725 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             1726 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             1727 ; 565  |
                             1728 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             1729 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             1730 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             1731 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             1732 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             1733 ; 571  |
                             1734 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             1735 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             1736 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             1737 ; 575  |
                             1738 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             1739 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             1740 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             1741 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             1742 ; 580  |
                             1743 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             1744 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             1745 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             1746 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             1747 ; 585  |
                             1748 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             1749 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             1750 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETMASK)
                             1751 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             1752 ; 590  |
                             1753 ; 591  |typedef union               
                             1754 ; 592  |{
                             1755 ; 593  |    struct {
                             1756 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             1757 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             1758 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             1759 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             1760 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             1761 ; 599  |    } B;
                             1762 ; 600  |    int I;
                             1763 ; 601  |    unsigned int U;
                             1764 ; 602  |} mix_recselr_type;
                             1765 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             1766 ; 604  |
                             1767 ; 605  |
                             1768 ; 606  |
                             1769 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             1770 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             1771 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             1772 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             1773 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             1774 ; 612  |
                             1775 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             1776 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             1777 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1778 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             1779 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             1780 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             1781 ; 619  |
                             1782 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             1783 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             1784 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             1785 ; 623  |
                             1786 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             1787 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             1788 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             1789 ; 627  |
                             1790 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             1791 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             1792 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             1793 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             1794 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             1795 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             1796 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             1797 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             1798 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             1799 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             1800 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             1801 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             1802 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             1803 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             1804 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             1805 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             1806 ; 644  |
                             1807 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             1808 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             1809 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             1810 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             1811 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             1812 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             1813 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             1814 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             1815 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             1816 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             1817 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             1818 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             1819 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             1820 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             1821 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             1822 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             1823 ; 661  |
                             1824 ; 662  |typedef union               
                             1825 ; 663  |{
                             1826 ; 664  |    struct {
                             1827 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             1828 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             1829 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             1830 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             1831 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             1832 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             1833 ; 671  |    } B;
                             1834 ; 672  |    int I;
                             1835 ; 673  |    unsigned int U;
                             1836 ; 674  |} mix_adcgainr_type;
                             1837 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             1838 ; 676  |
                             1839 ; 677  |
                             1840 ; 678  |
                             1841 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             1842 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             1843 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             1844 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             1845 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             1846 ; 684  |
                             1847 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             1848 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             1849 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             1850 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             1851 ; 689  |
                             1852 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             1853 ; 691  |
                             1854 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             1855 ; 693  |
                             1856 ; 694  |typedef union               
                             1857 ; 695  |{
                             1858 ; 696  |    struct {
                             1859 ; 697  |                int                     : 9;
                             1860 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             1861 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             1862 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             1863 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             1864 ; 702  |    } B;
                             1865 ; 703  |    int I;
                             1866 ; 704  |    unsigned int U;
                             1867 ; 705  |} mix_pwrdnr_type;
                             1868 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             1869 ; 707  |
                             1870 ; 708  |
                             1871 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             1872 ; 710  |
                             1873 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             1874 ; 712  |
                             1875 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             1876 ; 714  |
                             1877 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             1878 ; 716  |
                             1879 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             1880 ; 718  |
                             1881 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             1882 ; 720  |
                             1883 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             1884 ; 722  |
                             1885 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             1886 ; 724  |
                             1887 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             1888 ; 726  |
                             1889 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             1890 ; 728  |
                             1891 ; 729  |
                             1892 ; 730  |
                             1893 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             1894 ; 732  |
                             1895 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             1896 ; 734  |
                             1897 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             1898 ; 736  |
                             1899 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             1900 ; 738  |
                             1901 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             1902 ; 740  |
                             1903 ; 741  |
                             1904 ; 742  |
                             1905 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_TEST_DAC_CHOP_CLK_BITPOS)        
                             1906 ; 744  |
                             1907 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             1908 ; 746  |
                             1909 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             1910 ; 748  |
                             1911 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_CFG_BITPOS) 
                             1912 ; 750  |
                             1913 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_BITPOS) 
                             1914 ; 752  |
                             1915 ; 753  |
                             1916 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             1917 ; 755  |
                             1918 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)     
                             1919 ; 757  |
                             1920 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             1921 ; 759  |
                             1922 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             1923 ; 761  |
                             1924 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             1925 ; 763  |
                             1926 ; 764  |
                             1927 ; 765  |typedef union               
                             1928 ; 766  |{
                             1929 ; 767  |    struct {
                             1930 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             1931 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             1932 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             1933 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             1934 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             1935 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             1936 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             1937 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             1938 ; 776  |    } B;
                             1939 ; 777  |    int I;
                             1940 ; 778  |    unsigned int U;
                             1941 ; 779  |} mix_test_type;
                             1942 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Analog Persistent Config Register */
                             1943 ; 781  |
                             1944 ; 782  |
                             1945 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             1946 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             1947 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             1948 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             1949 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             1950 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             1951 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             1952 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             1953 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             1954 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             1955 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             1956 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             1957 ; 795  |
                             1958 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             1959 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             1960 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             1961 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             1962 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             1963 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             1964 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             1965 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             1966 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             1967 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             1968 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             1969 ; 807  |
                             1970 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_DACVBGVAL_BITPOS)
                             1971 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_BITPOS)
                             1972 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_BITPOS)
                             1973 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS)
                             1974 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCREFV_BITPOS)
                             1975 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_BITPOS)
                             1976 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDWNS_BITPOS)
                             1977 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BITPOS)
                             1978 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BITPOS)
                             1979 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_PWR_BITPOS)
                             1980 ; 818  |
                             1981 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             1982 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             1983 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             1984 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             1985 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             1986 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             1987 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             1988 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             1989 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             1990 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             1991 ; 829  |
                             1992 ; 830  |typedef union               
                             1993 ; 831  |{
                             1994 ; 832  |    struct {
                             1995 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             1996 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             1997 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             1998 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             1999 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             2000 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             2001 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             2002 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             2003 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             2004 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             2005 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             2006 ; 844  |    } B;
                             2007 ; 845  |    int I;
                             2008 ; 846  |    unsigned int U;
                             2009 ; 847  |} ref_ctrl_type;
                             2010 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             2011 ; 849  |
                             2012 ; 850  |
                             2013 ; 851  |
                             2014 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             2015 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             2016 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             2017 ; 855  |//////  DAC Registers
                             2018 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             2019 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             2020 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             2021 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             2022 ; 860  |
                             2023 ; 861  |
                             2024 ; 862  |
                             2025 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             2026 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             2027 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             2028 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2029 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             2030 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             2031 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             2032 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             2033 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             2034 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             2035 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             2036 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             2037 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             2038 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             2039 ; 877  |
                             2040 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             2041 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             2042 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             2043 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             2044 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             2045 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             2046 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             2047 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             2048 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             2049 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             2050 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             2051 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             2052 ; 890  |
                             2053 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             2054 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             2055 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             2056 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             2057 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             2058 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             2059 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             2060 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             2061 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             2062 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             2063 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             2064 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             2065 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             2066 ; 904  |
                             2067 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             2068 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             2069 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             2070 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             2071 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             2072 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             2073 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             2074 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             2075 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             2076 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             2077 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             2078 ; 916  |
                             2079 ; 917  |
                             2080 ; 918  |typedef union               
                             2081 ; 919  |{
                             2082 ; 920  |    struct {
                             2083 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             2084 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             2085 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             2086 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             2087 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             2088 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             2089 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             2090 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             2091 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             2092 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             2093 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             2094 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             2095 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             2096 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             2097 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             2098 ; 936  |    } B;
                             2099 ; 937  |    int I;
                             2100 ; 938  |    unsigned int U;
                             2101 ; 939  |} dac_csr_type;
                             2102 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             2103 ; 941  |
                             2104 ; 942  |
                             2105 ; 943  |
                             2106 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             2107 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             2108 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             2109 ; 947  |
                             2110 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             2111 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             2112 ; 950  |
                             2113 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             2114 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             2115 ; 953  |
                             2116 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             2117 ; 955  |
                             2118 ; 956  |typedef union               
                             2119 ; 957  |{
                             2120 ; 958  |    struct {
                             2121 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             2122 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             2123 ; 961  |    } B;
                             2124 ; 962  |    int I;
                             2125 ; 963  |    unsigned int U;
                             2126 ; 964  |} dac_srr_type;
                             2127 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             2128 ; 966  |
                             2129 ; 967  |
                             2130 ; 968  |
                             2131 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             2132 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             2133 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             2134 ; 972  |
                             2135 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             2136 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             2137 ; 975  |
                             2138 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             2139 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                             2140 ; 978  |
                             2141 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             2142 ; 980  |
                             2143 ; 981  |typedef union               
                             2144 ; 982  |{
                             2145 ; 983  |    struct {
                             2146 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             2147 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             2148 ; 986  |    } B;
                             2149 ; 987  |    int I;
                             2150 ; 988  |    unsigned int U;
                             2151 ; 989  |} dac_wcr_type;
                             2152 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             2153 ; 991  |
                             2154 ; 992  |
                             2155 ; 993  |
                             2156 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             2157 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             2158 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             2159 ; 997  |
                             2160 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             2161 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             2162 ; 1000 |
                             2163 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             2164 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                             2165 ; 1003 |
                             2166 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             2167 ; 1005 |
                             2168 ; 1006 |typedef union               
                             2169 ; 1007 |{
                             2170 ; 1008 |    struct {
                             2171 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             2172 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             2173 ; 1011 |    } B;
                             2174 ; 1012 |    int I;
                             2175 ; 1013 |    unsigned int U;
                             2176 ; 1014 |} dac_cpr_type;
                             2177 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             2178 ; 1016 |
                             2179 ; 1017 |
                             2180 ; 1018 |
                             2181 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             2182 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             2183 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             2184 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             2185 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             2186 ; 1024 |
                             2187 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             2188 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             2189 ; 1027 |
                             2190 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             2191 ; 1029 |
                             2192 ; 1030 |typedef union               
                             2193 ; 1031 |{
                             2194 ; 1032 |    struct {
                             2195 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             2196 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             2197 ; 1035 |    } B;
                             2198 ; 1036 |    int I;
                             2199 ; 1037 |    unsigned int U;
                             2200 ; 1038 |} dac_mr_type;
                             2201 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             2202 ; 1040 |
                             2203 ; 1041 |
                             2204 ; 1042 |
                             2205 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             2206 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             2207 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             2208 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             2209 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             2210 ; 1048 |
                             2211 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             2212 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                             2213 ; 1051 |
                             2214 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             2215 ; 1053 |
                             2216 ; 1054 |typedef union               
                             2217 ; 1055 |{
                             2218 ; 1056 |    struct {
                             2219 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             2220 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             2221 ; 1059 |    } B;
                             2222 ; 1060 |    int I;
                             2223 ; 1061 |    unsigned int U;
                             2224 ; 1062 |} dac_bar_type;
                             2225 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             2226 ; 1064 |
                             2227 ; 1065 |
                             2228 ; 1066 |
                             2229 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             2230 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             2231 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             2232 ; 1070 |
                             2233 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             2234 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             2235 ; 1073 |
                             2236 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                             2237 ; 1075 |
                             2238 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             2239 ; 1077 |
                             2240 ; 1078 |typedef union               
                             2241 ; 1079 |{
                             2242 ; 1080 |    struct {
                             2243 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             2244 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             2245 ; 1083 |    } B;
                             2246 ; 1084 |    int I;
                             2247 ; 1085 |    unsigned int U;
                             2248 ; 1086 |} dac_icr_type;
                             2249 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             2250 ; 1088 |
                             2251 ; 1089 |
                             2252 ; 1090 |
                             2253 ; 1091 |
                             2254 ; 1092 |
                             2255 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             2256 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             2257 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             2258 ; 1096 |//////  ADC Registers
                             2259 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             2260 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             2261 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             2262 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             2263 ; 1101 |
                             2264 ; 1102 |
                             2265 ; 1103 |
                             2266 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             2267 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             2268 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             2269 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             2270 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             2271 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             2272 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             2273 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             2274 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             2275 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             2276 ; 1114 |
                             2277 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             2278 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             2279 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2280 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             2281 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             2282 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             2283 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             2284 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             2285 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             2286 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             2287 ; 1125 |
                             2288 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             2289 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             2290 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             2291 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             2292 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             2293 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS)        
                             2294 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BITPOS)        
                             2295 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             2296 ; 1134 |
                             2297 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             2298 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             2299 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             2300 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             2301 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             2302 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             2303 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             2304 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             2305 ; 1143 |
                             2306 ; 1144 |typedef union               
                             2307 ; 1145 |{
                             2308 ; 1146 |    struct {
                             2309 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             2310 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             2311 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             2312 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             2313 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             2314 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             2315 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             2316 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             2317 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             2318 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             2319 ; 1157 |    } B;
                             2320 ; 1158 |    int I;
                             2321 ; 1159 |    unsigned int U;
                             2322 ; 1160 |} adc_csr_type;
                             2323 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             2324 ; 1162 |
                             2325 ; 1163 |
                             2326 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             2327 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             2328 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             2329 ; 1167 |
                             2330 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             2331 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             2332 ; 1170 |
                             2333 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                             2334 ; 1172 |
                             2335 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             2336 ; 1174 |
                             2337 ; 1175 |typedef union               
                             2338 ; 1176 |{
                             2339 ; 1177 |    struct {
                             2340 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             2341 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             2342 ; 1180 |    } B;
                             2343 ; 1181 |    int I;
                             2344 ; 1182 |    unsigned int U;
                             2345 ; 1183 |} adc_wcr_type;
                             2346 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             2347 ; 1185 |
                             2348 ; 1186 |
                             2349 ; 1187 |
                             2350 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             2351 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             2352 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             2353 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             2354 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             2355 ; 1193 |
                             2356 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             2357 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                             2358 ; 1196 |
                             2359 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             2360 ; 1198 |
                             2361 ; 1199 |typedef union               
                             2362 ; 1200 |{
                             2363 ; 1201 |    struct {
                             2364 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             2365 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             2366 ; 1204 |    } B;
                             2367 ; 1205 |    int I;
                             2368 ; 1206 |    unsigned int U;
                             2369 ; 1207 |} adc_bar_type;
                             2370 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             2371 ; 1209 |
                             2372 ; 1210 |
                             2373 ; 1211 |
                             2374 ; 1212 |
                             2375 ; 1213 |
                             2376 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             2377 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             2378 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             2379 ; 1217 |
                             2380 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             2381 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             2382 ; 1220 |
                             2383 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                             2384 ; 1222 |
                             2385 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             2386 ; 1224 |
                             2387 ; 1225 |typedef union               
                             2388 ; 1226 |{
                             2389 ; 1227 |    struct {
                             2390 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             2391 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             2392 ; 1230 |    } B;
                             2393 ; 1231 |    int I;
                             2394 ; 1232 |    unsigned int U;
                             2395 ; 1233 |} adc_cpr_type;
                             2396 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             2397 ; 1235 |
                             2398 ; 1236 |
                             2399 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             2400 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             2401 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             2402 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             2403 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             2404 ; 1242 |
                             2405 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             2406 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             2407 ; 1245 |
                             2408 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             2409 ; 1247 |
                             2410 ; 1248 |typedef union               
                             2411 ; 1249 |{
                             2412 ; 1250 |    struct {
                             2413 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             2414 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             2415 ; 1253 |    } B;
                             2416 ; 1254 |    int I;
                             2417 ; 1255 |    unsigned int U;
                             2418 ; 1256 |} adc_mr_type;
                             2419 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             2420 ; 1258 |
                             2421 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             2422 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             2423 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             2424 ; 1262 |
                             2425 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             2426 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             2427 ; 1265 |
                             2428 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             2429 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             2430 ; 1268 |
                             2431 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             2432 ; 1270 |
                             2433 ; 1271 |typedef union               
                             2434 ; 1272 |{
                             2435 ; 1273 |    struct {
                             2436 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             2437 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             2438 ; 1276 |    } B;
                             2439 ; 1277 |    int I;
                             2440 ; 1278 |    unsigned int U;
                             2441 ; 1279 |} adc_srr_type;
                             2442 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             2443 ; 1281 |
                             2444 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             2445 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             2446 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             2447 ; 1285 |
                             2448 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             2449 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             2450 ; 1288 |
                             2451 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                             2452 ; 1290 |
                             2453 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             2454 ; 1292 |
                             2455 ; 1293 |typedef union               
                             2456 ; 1294 |{
                             2457 ; 1295 |    struct {
                             2458 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             2459 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             2460 ; 1298 |    } B;
                             2461 ; 1299 |    int I;
                             2462 ; 1300 |    unsigned int U;
                             2463 ; 1301 |} adc_icr_type;
                             2464 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             2465 ; 1303 |
                             2466 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             2467 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             2468 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             2469 ; 1307 |
                             2470 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             2471 ; 1309 |
                             2472 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             2473 ; 1311 |
                             2474 ; 1312 |#endif
                             2475 ; 1313 |
                             2476 
                             2478 
                             2479 ; 20   |#include "regsdcdc.h"
                             2480 
                             2482 
                             2483 ; 1    |#if !(defined(regsdcdcinc))
                             2484 ; 2    |
                             2485 ; 3    |#define regssysteminc 1
                             2486 ; 4    |
                             2487 ; 5    |
                             2488 ; 6    |
                             2489 ; 7    |#include "types.h"
                             2490 
                             2492 
                             2493 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2494 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2495 ; 3    |//
                             2496 ; 4    |// Filename: types.h
                             2497 ; 5    |// Description: Standard data types
                             2498 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2499 ; 7    |
                             2500 ; 8    |#ifndef _TYPES_H
                             2501 ; 9    |#define _TYPES_H
                             2502 ; 10   |
                             2503 ; 11   |// TODO:  move this outta here!
                             2504 ; 12   |#if !defined(NOERROR)
                             2505 ; 13   |#define NOERROR 0
                             2506 ; 14   |#define SUCCESS 0
                             2507 ; 15   |#endif 
                             2508 ; 16   |#if !defined(SUCCESS)
                             2509 ; 17   |#define SUCCESS  0
                             2510 ; 18   |#endif
                             2511 ; 19   |#if !defined(ERROR)
                             2512 ; 20   |#define ERROR   -1
                             2513 ; 21   |#endif
                             2514 ; 22   |#if !defined(FALSE)
                             2515 ; 23   |#define FALSE 0
                             2516 ; 24   |#endif
                             2517 ; 25   |#if !defined(TRUE)
                             2518 ; 26   |#define TRUE  1
                             2519 ; 27   |#endif
                             2520 ; 28   |
                             2521 ; 29   |#if !defined(NULL)
                             2522 ; 30   |#define NULL 0
                             2523 ; 31   |#endif
                             2524 ; 32   |
                             2525 ; 33   |#define MAX_INT     0x7FFFFF
                             2526 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2527 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2528 ; 36   |#define MAX_ULONG   (-1) 
                             2529 ; 37   |
                             2530 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2531 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2532 ; 40   |
                             2533 ; 41   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2534 ; 42   |#define BYTE    unsigned char       // btVarName
                             2535 ; 43   |#define CHAR    signed char         // cVarName
                             2536 ; 44   |#define USHORT  unsigned short      // usVarName
                             2537 ; 45   |#define SHORT   unsigned short      // sVarName
                             2538 ; 46   |#define WORD    unsigned int        // wVarName
                             2539 ; 47   |#define INT     signed int          // iVarName
                             2540 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2541 ; 49   |#define LONG    signed long         // lVarName
                             2542 ; 50   |#define BOOL    unsigned int        // bVarName
                             2543 ; 51   |#define FRACT   _fract              // frVarName
                             2544 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2545 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2546 ; 54   |#define FLOAT   float               // fVarName
                             2547 ; 55   |#define DBL     double              // dVarName
                             2548 ; 56   |#define ENUM    enum                // eVarName
                             2549 ; 57   |#define CMX     _complex            // cmxVarName
                             2550 ; 58   |typedef WORD UCS3;                   // 
                             2551 ; 59   |
                             2552 ; 60   |#define UINT16  unsigned short
                             2553 ; 61   |#define UINT8   unsigned char   
                             2554 ; 62   |#define UINT32  unsigned long
                             2555 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2556 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2557 ; 65   |#define WCHAR   UINT16
                             2558 ; 66   |
                             2559 ; 67   |//UINT128 is 16 bytes or 6 words
                             2560 ; 68   |typedef struct UINT128_3500 {   
                             2561 ; 69   |    int val[6];     
                             2562 ; 70   |} UINT128_3500;
                             2563 ; 71   |
                             2564 ; 72   |#define UINT128   UINT128_3500
                             2565 ; 73   |
                             2566 ; 74   |// Little endian word packed byte strings:   
                             2567 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2568 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2569 ; 77   |// Little endian word packed byte strings:   
                             2570 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2571 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2572 ; 80   |
                             2573 ; 81   |// Declare Memory Spaces To Use When Coding
                             2574 ; 82   |// A. Sector Buffers
                             2575 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2576 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2577 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2578 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2579 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2580 ; 88   |// B. Media DDI Memory
                             2581 ; 89   |#define MEDIA_DDI_MEM _Y
                             2582 ; 90   |
                             2583 ; 91   |
                             2584 ; 92   |
                             2585 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2586 ; 94   |// Examples of circular pointers:
                             2587 ; 95   |//    INT CIRC cpiVarName
                             2588 ; 96   |//    DWORD CIRC cpdwVarName
                             2589 ; 97   |
                             2590 ; 98   |#define RETCODE INT                 // rcVarName
                             2591 ; 99   |
                             2592 ; 100  |// generic bitfield structure
                             2593 ; 101  |struct Bitfield {
                             2594 ; 102  |    unsigned int B0  :1;
                             2595 ; 103  |    unsigned int B1  :1;
                             2596 ; 104  |    unsigned int B2  :1;
                             2597 ; 105  |    unsigned int B3  :1;
                             2598 ; 106  |    unsigned int B4  :1;
                             2599 ; 107  |    unsigned int B5  :1;
                             2600 ; 108  |    unsigned int B6  :1;
                             2601 ; 109  |    unsigned int B7  :1;
                             2602 ; 110  |    unsigned int B8  :1;
                             2603 ; 111  |    unsigned int B9  :1;
                             2604 ; 112  |    unsigned int B10 :1;
                             2605 ; 113  |    unsigned int B11 :1;
                             2606 ; 114  |    unsigned int B12 :1;
                             2607 ; 115  |    unsigned int B13 :1;
                             2608 ; 116  |    unsigned int B14 :1;
                             2609 ; 117  |    unsigned int B15 :1;
                             2610 ; 118  |    unsigned int B16 :1;
                             2611 ; 119  |    unsigned int B17 :1;
                             2612 ; 120  |    unsigned int B18 :1;
                             2613 ; 121  |    unsigned int B19 :1;
                             2614 ; 122  |    unsigned int B20 :1;
                             2615 ; 123  |    unsigned int B21 :1;
                             2616 ; 124  |    unsigned int B22 :1;
                             2617 ; 125  |    unsigned int B23 :1;
                             2618 ; 126  |};
                             2619 ; 127  |
                             2620 ; 128  |union BitInt {
                             2621 ; 129  |        struct Bitfield B;
                             2622 ; 130  |        int        I;
                             2623 ; 131  |};
                             2624 ; 132  |
                             2625 ; 133  |#define MAX_MSG_LENGTH 10
                             2626 ; 134  |struct CMessage
                             2627 ; 135  |{
                             2628 ; 136  |        unsigned int m_uLength;
                             2629 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2630 ; 138  |};
                             2631 ; 139  |
                             2632 ; 140  |typedef struct {
                             2633 ; 141  |    WORD m_wLength;
                             2634 ; 142  |    WORD m_wMessage;
                             2635 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2636 ; 144  |} Message;
                             2637 ; 145  |
                             2638 ; 146  |struct MessageQueueDescriptor
                             2639 ; 147  |{
                             2640 ; 148  |        int *m_pBase;
                             2641 ; 149  |        int m_iModulo;
                             2642 ; 150  |        int m_iSize;
                             2643 ; 151  |        int *m_pHead;
                             2644 ; 152  |        int *m_pTail;
                             2645 ; 153  |};
                             2646 ; 154  |
                             2647 ; 155  |struct ModuleEntry
                             2648 ; 156  |{
                             2649 ; 157  |    int m_iSignaledEventMask;
                             2650 ; 158  |    int m_iWaitEventMask;
                             2651 ; 159  |    int m_iResourceOfCode;
                             2652 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2653 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             2654 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2655 ; 163  |    int m_uTimeOutHigh;
                             2656 ; 164  |    int m_uTimeOutLow;
                             2657 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2658 ; 166  |};
                             2659 ; 167  |
                             2660 ; 168  |union WaitMask{
                             2661 ; 169  |    struct B{
                             2662 ; 170  |        unsigned int m_bNone     :1;
                             2663 ; 171  |        unsigned int m_bMessage  :1;
                             2664 ; 172  |        unsigned int m_bTimer    :1;
                             2665 ; 173  |        unsigned int m_bButton   :1;
                             2666 ; 174  |    } B;
                             2667 ; 175  |    int I;
                             2668 ; 176  |} ;
                             2669 ; 177  |
                             2670 ; 178  |
                             2671 ; 179  |struct Button {
                             2672 ; 180  |        WORD wButtonEvent;
                             2673 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2674 ; 182  |};
                             2675 ; 183  |
                             2676 ; 184  |struct Message {
                             2677 ; 185  |        WORD wMsgLength;
                             2678 ; 186  |        WORD wMsgCommand;
                             2679 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2680 ; 188  |};
                             2681 ; 189  |
                             2682 ; 190  |union EventTypes {
                             2683 ; 191  |        struct CMessage msg;
                             2684 ; 192  |        struct Button Button ;
                             2685 ; 193  |        struct Message Message;
                             2686 ; 194  |};
                             2687 ; 195  |
                             2688 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2689 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2690 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2691 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2692 ; 200  |
                             2693 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2694 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2695 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2696 ; 204  |
                             2697 ; 205  |#if DEBUG
                             2698 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2699 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2700 ; 208  |#else 
                             2701 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             2702 ; 210  |#define DebugBuildAssert(x)    
                             2703 ; 211  |#endif
                             2704 ; 212  |
                             2705 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2706 ; 214  |//  #pragma asm
                             2707 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2708 ; 216  |//  #pragma endasm
                             2709 ; 217  |
                             2710 ; 218  |
                             2711 ; 219  |#ifdef COLOR_262K
                             2712 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             2713 ; 221  |#elif defined(COLOR_65K)
                             2714 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             2715 ; 223  |#else
                             2716 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             2717 ; 225  |#endif
                             2718 ; 226  |    
                             2719 ; 227  |#endif // #ifndef _TYPES_H
                             2720 
                             2722 
                             2723 ; 8    |
                             2724 ; 9    |
                             2725 ; 10   |
                             2726 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2727 ; 12   |
                             2728 ; 13   |//   SYSTEM STMP Registers 
                             2729 ; 14   |//      Last Edited 2.19.2003 M. May
                             2730 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2731 ; 16   |
                             2732 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             2733 ; 18   |
                             2734 ; 19   |
                             2735 ; 20   |
                             2736 ; 21   |
                             2737 ; 22   |
                             2738 ; 23   |
                             2739 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             2740 ; 25   |
                             2741 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             2742 ; 27   |
                             2743 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             2744 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             2745 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             2746 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             2747 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             2748 ; 33   |
                             2749 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             2750 ; 35   |
                             2751 ; 36   |
                             2752 ; 37   |
                             2753 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             2754 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             2755 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             2756 ; 41   |
                             2757 ; 42   |
                             2758 ; 43   |
                             2759 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBU_BITPOS)        
                             2760 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBO_BITPOS) 
                             2761 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NLEV_BITPOS)  
                             2762 ; 47   |
                             2763 ; 48   |
                             2764 ; 49   |
                             2765 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             2766 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             2767 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             2768 ; 53   |
                             2769 ; 54   |
                             2770 ; 55   |
                             2771 ; 56   |
                             2772 ; 57   |
                             2773 ; 58   |typedef union               
                             2774 ; 59   |{
                             2775 ; 60   |    struct {
                             2776 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             2777 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             2778 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             2779 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             2780 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             2781 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             2782 ; 67   |    } B;
                             2783 ; 68   |    unsigned int I;
                             2784 ; 69   |} dcdc1_ctrl0_type;
                             2785 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* DcDc#1 Limit Level Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2786 ; 71   |
                             2787 ; 72   |
                             2788 ; 73   |
                             2789 ; 74   |
                             2790 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             2791 ; 76   |
                             2792 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             2793 ; 78   |
                             2794 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             2795 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             2796 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             2797 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             2798 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             2799 ; 84   |
                             2800 ; 85   |
                             2801 ; 86   |
                             2802 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             2803 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             2804 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             2805 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             2806 ; 91   |
                             2807 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS)        
                             2808 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS) 
                             2809 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FFOR_BITPOS)  
                             2810 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CTRL1_PFMCTRL_BITPOS)   
                             2811 ; 96   |
                             2812 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             2813 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             2814 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             2815 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             2816 ; 101  |
                             2817 ; 102  |
                             2818 ; 103  |typedef union               
                             2819 ; 104  |{
                             2820 ; 105  |    struct {
                             2821 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             2822 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             2823 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2824 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             2825 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2826 ; 111  |    } B;
                             2827 ; 112  |    unsigned int I;
                             2828 ; 113  |} dcdc1_ctrl1_type;
                             2829 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* DcDc#1 Ctrl #1 Register */
                             2830 ; 115  |
                             2831 ; 116  |
                             2832 ; 117  |
                             2833 ; 118  |
                             2834 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             2835 ; 120  |
                             2836 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             2837 ; 122  |
                             2838 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             2839 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             2840 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             2841 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             2842 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             2843 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             2844 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             2845 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             2846 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             2847 ; 132  |
                             2848 ; 133  |
                             2849 ; 134  |
                             2850 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             2851 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             2852 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             2853 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             2854 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             2855 ; 140  |
                             2856 ; 141  |
                             2857 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             2858 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             2859 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             2860 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             2861 ; 146  |
                             2862 ; 147  |
                             2863 ; 148  |
                             2864 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)     
                             2865 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK) 
                             2866 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK)  
                             2867 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK)  
                             2868 ; 153  |
                             2869 ; 154  |
                             2870 ; 155  |typedef union               
                             2871 ; 156  |{
                             2872 ; 157  |    struct {
                             2873 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             2874 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             2875 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             2876 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             2877 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             2878 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             2879 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             2880 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             2881 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             2882 ; 167  |    } B;
                             2883 ; 168  |    unsigned int I;
                             2884 ; 169  |} dcdc_vddio_type;
                             2885 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* DcDc VDDIO Register */
                             2886 ; 171  |
                             2887 ; 172  |
                             2888 ; 173  |
                             2889 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             2890 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             2891 ; 176  |
                             2892 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             2893 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             2894 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             2895 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             2896 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             2897 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             2898 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             2899 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             2900 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             2901 ; 186  |
                             2902 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             2903 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             2904 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             2905 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             2906 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             2907 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             2908 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             2909 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             2910 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             2911 ; 196  |
                             2912 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)     
                             2913 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             2914 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)  
                             2915 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)  
                             2916 ; 201  |
                             2917 ; 202  |typedef union               
                             2918 ; 203  |{
                             2919 ; 204  |    struct {
                             2920 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             2921 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             2922 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             2923 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             2924 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             2925 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             2926 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             2927 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             2928 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             2929 ; 214  |    } B;
                             2930 ; 215  |   unsigned int I;
                             2931 ; 216  |        unsigned U;
                             2932 ; 217  |} dcdc_vddd_type;
                             2933 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc VDDD Register */
                             2934 ; 219  |
                             2935 ; 220  |
                             2936 ; 221  |
                             2937 ; 222  |
                             2938 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             2939 ; 224  |
                             2940 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             2941 ; 226  |
                             2942 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             2943 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             2944 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             2945 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             2946 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             2947 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             2948 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             2949 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             2950 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             2951 ; 236  |
                             2952 ; 237  |
                             2953 ; 238  |
                             2954 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             2955 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             2956 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             2957 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             2958 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             2959 ; 244  |
                             2960 ; 245  |
                             2961 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             2962 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             2963 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             2964 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             2965 ; 250  |
                             2966 ; 251  |
                             2967 ; 252  |
                             2968 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)     
                             2969 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             2970 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)  
                             2971 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)  
                             2972 ; 257  |
                             2973 ; 258  |
                             2974 ; 259  |typedef union               
                             2975 ; 260  |{
                             2976 ; 261  |    struct {
                             2977 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             2978 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             2979 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             2980 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             2981 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             2982 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             2983 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             2984 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             2985 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             2986 ; 271  |    } B;
                             2987 ; 272  |    unsigned int I;
                             2988 ; 273  |} dcdc_vdda_type;
                             2989 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc VDDA Register */
                             2990 ; 275  |
                             2991 ; 276  |
                             2992 ; 277  |
                             2993 ; 278  |
                             2994 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             2995 ; 280  |
                             2996 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             2997 ; 282  |
                             2998 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             2999 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             3000 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             3001 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             3002 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             3003 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             3004 ; 289  |
                             3005 ; 290  |
                             3006 ; 291  |
                             3007 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             3008 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             3009 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             3010 ; 295  |
                             3011 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBU_BITPOS)        
                             3012 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBO_BITPOS) 
                             3013 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NLEV_BITPOS)  
                             3014 ; 299  |
                             3015 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             3016 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             3017 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             3018 ; 303  |
                             3019 ; 304  |
                             3020 ; 305  |typedef union               
                             3021 ; 306  |{
                             3022 ; 307  |    struct {
                             3023 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             3024 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             3025 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             3026 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             3027 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             3028 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             3029 ; 314  |    } B;
                             3030 ; 315  |    unsigned int I;
                             3031 ; 316  |} dcdc2_ctrl0_type; 
                             3032 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* DcDc#2 Limit Level Register */
                             3033 ; 318  |
                             3034 ; 319  |
                             3035 ; 320  |
                             3036 ; 321  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3037 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             3038 ; 323  |
                             3039 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             3040 ; 325  |
                             3041 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             3042 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             3043 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             3044 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             3045 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             3046 ; 331  |
                             3047 ; 332  |
                             3048 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             3049 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             3050 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             3051 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             3052 ; 337  |
                             3053 ; 338  |
                             3054 ; 339  |
                             3055 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS)        
                             3056 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS) 
                             3057 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FFOR_BITPOS)  
                             3058 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CTRL1_PFMCTRL_BITPOS)  
                             3059 ; 344  |
                             3060 ; 345  |
                             3061 ; 346  |
                             3062 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             3063 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             3064 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             3065 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             3066 ; 351  |
                             3067 ; 352  |
                             3068 ; 353  |typedef union               
                             3069 ; 354  |{
                             3070 ; 355  |    struct {
                             3071 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             3072 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                             3073 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3074 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             3075 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3076 ; 361  |    } B;
                             3077 ; 362  |    unsigned int I;
                             3078 ; 363  |} dcdc2_ctrl1_type;
                             3079 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* DcDc#2 Ctrl Register #1 */
                             3080 ; 365  |
                             3081 ; 366  |
                             3082 ; 367  |
                             3083 ; 368  |
                             3084 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             3085 ; 370  |
                             3086 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             3087 ; 372  |
                             3088 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             3089 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             3090 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             3091 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             3092 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             3093 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             3094 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             3095 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             3096 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             3097 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             3098 ; 383  |
                             3099 ; 384  |
                             3100 ; 385  |
                             3101 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             3102 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             3103 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             3104 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             3105 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             3106 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             3107 ; 392  |
                             3108 ; 393  |
                             3109 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWRUP_BITPOS)        
                             3110 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC1_START_COUNT_BITPOS)        
                             3111 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BITPOS) 
                             3112 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWRUP_BITPOS)        
                             3113 ; 398  |
                             3114 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC2_START_COUNT_BITPOS)        
                             3115 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BITPOS) 
                             3116 ; 401  |
                             3117 ; 402  |
                             3118 ; 403  |
                             3119 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             3120 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             3121 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             3122 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             3123 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             3124 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             3125 ; 410  |
                             3126 ; 411  |
                             3127 ; 412  |typedef union               
                             3128 ; 413  |{
                             3129 ; 414  |    struct {
                             3130 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             3131 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             3132 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             3133 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             3134 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             3135 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             3136 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             3137 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             3138 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             3139 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             3140 ; 425  |    } B;
                             3141 ; 426  |    unsigned int I;
                             3142 ; 427  |} speed_type;
                             3143 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measurement Register */
                             3144 ; 429  |
                             3145 ; 430  |
                             3146 ; 431  |
                             3147 ; 432  |
                             3148 ; 433  |
                             3149 ; 434  |
                             3150 ; 435  |
                             3151 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             3152 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             3153 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             3154 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             3155 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             3156 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             3157 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             3158 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             3159 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             3160 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             3161 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             3162 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             3163 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             3164 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             3165 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             3166 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             3167 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             3168 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             3169 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             3170 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             3171 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             3172 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             3173 ; 458  |
                             3174 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             3175 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             3176 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             3177 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             3178 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             3179 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             3180 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             3181 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             3182 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             3183 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             3184 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             3185 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             3186 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             3187 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             3188 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             3189 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             3190 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             3191 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             3192 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             3193 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             3194 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             3195 ; 480  |
                             3196 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)
                             3197 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             3198 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1)<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             3199 ; 484  |
                             3200 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             3201 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             3202 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             3203 ; 488  |
                             3204 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the change should happen
                             3205 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             3206 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             3207 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)+((1<<HW_DCDC_TBR_DC
                                  DC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             3208 ; 493  |
                             3209 ; 494  |typedef union               
                             3210 ; 495  |{
                             3211 ; 496  |    struct {
                             3212 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             3213 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             3214 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             3215 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             3216 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             3217 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             3218 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             3219 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             3220 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             3221 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             3222 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             3223 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             3224 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             3225 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             3226 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             3227 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             3228 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             3229 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             3230 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             3231 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             3232 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             3233 ; 518  |    } B;
                             3234 ; 519  |    unsigned int I;
                             3235 ; 520  |} usb_dcdctbr_type;
                             3236 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADDR+8))    /* Analog test bit register*/
                             3237 ; 522  |
                             3238 ; 523  |
                             3239 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             3240 ; 525  |
                             3241 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             3242 ; 527  |
                             3243 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             3244 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             3245 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             3246 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             3247 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             3248 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             3249 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             3250 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             3251 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             3252 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             3253 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             3254 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             3255 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             3256 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             3257 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             3258 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             3259 ; 544  |
                             3260 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             3261 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             3262 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             3263 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             3264 ; 549  |
                             3265 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             3266 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             3267 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             3268 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             3269 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             3270 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             3271 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             3272 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             3273 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             3274 ; 559  |
                             3275 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             3276 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWD_BITPOS)        
                             3277 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_RES_BITPOS) 
                             3278 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_NIMH_BITPOS) 
                             3279 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             3280 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             3281 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             3282 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             3283 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             3284 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             3285 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             3286 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3287 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             3288 ; 573  |
                             3289 ; 574  |
                             3290 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK)     
                             3291 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             3292 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             3293 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             3294 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             3295 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK)     
                             3296 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK)     
                             3297 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK) 
                             3298 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK) 
                             3299 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK) 
                             3300 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK) 
                             3301 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK) 
                             3302 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK) 
                             3303 ; 588  |
                             3304 ; 589  |typedef union               
                             3305 ; 590  |{
                             3306 ; 591  |    struct {
                             3307 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             3308 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             3309 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             3310 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             3311 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             3312 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             3313 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH;
                             3314 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH;
                             3315 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             3316 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             3317 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             3318 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             3319 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             3320 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                             3321 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             3322 ; 607  |    } B;
                             3323 ; 608  |    unsigned int I;
                             3324 ; 609  |} usb_pwr_charge_type;
                             3325 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17))    /* Analog Persistent Config Register */
                             3326 ; 611  |
                             3327 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             3328 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             3329 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             3330 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             3331 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             3332 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             3333 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             3334 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             3335 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             3336 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             3337 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             3338 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             3339 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             3340 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             3341 ; 626  |
                             3342 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             3343 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             3344 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             3345 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             3346 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             3347 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             3348 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             3349 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             3350 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             3351 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             3352 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             3353 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             3354 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             3355 ; 640  |
                             3356 ; 641  |typedef union               
                             3357 ; 642  |{
                             3358 ; 643  |    struct {       
                             3359 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             3360 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             3361 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             3362 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             3363 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             3364 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             3365 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             3366 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             3367 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             3368 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             3369 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             3370 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                             3371 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             3372 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             3373 ; 658  |    } B;
                             3374 ; 659  |    int I;
                             3375 ; 660  |} usb_dcdcpersist_type;
                             3376 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASEADDR+15))    /* Analog test bit register*/
                             3377 ; 662  |
                             3378 ; 663  |
                             3379 ; 664  |
                             3380 ; 665  |#endif
                             3381 ; 666  |
                             3382 ; 667  |
                             3383 ; 668  |
                             3384 
                             3386 
                             3387 ; 21   |#include "regsemc.h"
                             3388 
                             3390 
                             3391 ; 1    |#if !(defined(__REGS_EMC_INC))
                             3392 ; 2    |#define __REGS_EMC_INC 1
                             3393 ; 3    |
                             3394 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             3395 ; 5    |//   Module base addresses
                             3396 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             3397 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             3398 ; 8    |
                             3399 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             3400 ; 10   |//  EMC Registers
                             3401 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             3402 ; 12   |
                             3403 ; 13   |
                             3404 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             3405 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             3406 ; 16   |
                             3407 ; 17   |typedef union               /*Flash Control Register*/
                             3408 ; 18   |{
                             3409 ; 19   |    struct
                             3410 ; 20   |    {
                             3411 ; 21   |    int KICK        :1;
                             3412 ; 22   |    int RW          :1;
                             3413 ; 23   |    int TCIE        :1;
                             3414 ; 24   |    int IRQP        :1;
                             3415 ; 25   |    unsigned MMD    :2;
                             3416 ; 26   |    unsigned NB     :11;
                             3417 ; 27   |    unsigned RSVD   :4;
                             3418 ; 28   |    int SRST        :1;
                             3419 ; 29   |    } B;
                             3420 ; 30   |    int I;
                             3421 ; 31   |} flcr_type;
                             3422 ; 32   |
                             3423 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             3424 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             3425 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             3426 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             3427 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             3428 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             3429 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             3430 ; 40   |
                             3431 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             3432 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             3433 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             3434 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             3435 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             3436 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             3437 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             3438 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             3439 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             3440 ; 50   |
                             3441 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             3442 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             3443 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             3444 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             3445 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             3446 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             3447 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             3448 ; 58   |
                             3449 ; 59   |
                             3450 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             3451 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             3452 ; 62   |
                             3453 ; 63   |typedef union           /* Flash Start Address Low*/
                             3454 ; 64   |{
                             3455 ; 65   |    struct
                             3456 ; 66   |    {
                             3457 ; 67   |    unsigned XA     : 24;
                             3458 ; 68   |    } B;
                             3459 ; 69   |    int I;
                             3460 ; 70   |} flsalr_type;
                             3461 ; 71   |
                             3462 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                             3463 ; 73   |
                             3464 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             3465 ; 75   |
                             3466 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             3467 ; 77   |
                             3468 ; 78   |
                             3469 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             3470 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             3471 ; 81   |
                             3472 ; 82   |typedef union           /* Flash Start Address High*/
                             3473 ; 83   |{
                             3474 ; 84   |    struct
                             3475 ; 85   |    {
                             3476 ; 86   |    unsigned XA     :8;
                             3477 ; 87   |    unsigned DA     :16;
                             3478 ; 88   |    } B;
                             3479 ; 89   |    int I;
                             3480 ; 90   |} flsahr_type;
                             3481 ; 91   |
                             3482 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             3483 ; 93   |
                             3484 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             3485 ; 95   |
                             3486 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             3487 ; 97   |
                             3488 ; 98   |
                             3489 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             3490 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             3491 ; 101  |
                             3492 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             3493 ; 103  |{
                             3494 ; 104  |    struct
                             3495 ; 105  |    {
                             3496 ; 106  |        int WP          :1;
                             3497 ; 107  |        int CDP         :1;
                             3498 ; 108  |        unsigned SM     :2;
                             3499 ; 109  |        int XATTR       :1;
                             3500 ; 110  |        int CRST        :1;
                             3501 ; 111  |        int XWT         :1;
                             3502 ; 112  |        int RI          :1;
                             3503 ; 113  |        int IFCE        :1;
                             3504 ; 114  |        int ISCE        :1;
                             3505 ; 115  |        int INCE        :1;
                             3506 ; 116  |        int IFCS        :1;
                             3507 ; 117  |        int ISCS        :1;
                             3508 ; 118  |        int INCS        :1;
                             3509 ; 119  |        unsigned CFAI   :2;
                             3510 ; 120  |        int XDDI        :1;
                             3511 ; 121  |        unsigned CS     :2;
                             3512 ; 122  |        int CRE         :1;
                             3513 ; 123  |        unsigned VS     :2;
                             3514 ; 124  |        int DASP        :1;
                             3515 ; 125  |        int MODE16      :1; 
                             3516 ; 126  |    } B;
                             3517 ; 127  |    int I;
                             3518 ; 128  |} flcfcr_type;
                             3519 ; 129  |
                             3520 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             3521 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             3522 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             3523 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             3524 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
                             3525 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             3526 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             3527 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             3528 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             3529 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             3530 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             3531 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             3532 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             3533 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             3534 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             3535 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             3536 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             3537 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             3538 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             3539 ; 149  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3540 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             3541 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             3542 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             3543 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             3544 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             3545 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             3546 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             3547 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             3548 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             3549 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             3550 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             3551 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             3552 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             3553 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             3554 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             3555 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             3556 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             3557 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             3558 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             3559 ; 169  |
                             3560 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             3561 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             3562 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             3563 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             3564 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             3565 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             3566 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             3567 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             3568 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             3569 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             3570 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             3571 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             3572 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             3573 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             3574 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             3575 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             3576 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             3577 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             3578 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             3579 ; 189  |
                             3580 ; 190  |
                             3581 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             3582 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             3583 ; 193  |
                             3584 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             3585 ; 195  |{
                             3586 ; 196  |    struct
                             3587 ; 197  |    {
                             3588 ; 198  |        unsigned TRWSU  :5;
                             3589 ; 199  |        unsigned TRPW   :7;
                             3590 ; 200  |        unsigned TWPW   :7;
                             3591 ; 201  |        unsigned TRWH   :5;
                             3592 ; 202  |    } B;
                             3593 ; 203  |    int I;
                             3594 ; 204  |} flcftmr1r_type;
                             3595 ; 205  |
                             3596 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             3597 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             3598 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             3599 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             3600 ; 210  |
                             3601 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             3602 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             3603 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             3604 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             3605 ; 215  |
                             3606 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             3607 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             3608 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             3609 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             3610 ; 220  |
                             3611 ; 221  |
                             3612 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             3613 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             3614 ; 224  |
                             3615 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             3616 ; 226  |{
                             3617 ; 227  |    struct
                             3618 ; 228  |    {
                             3619 ; 229  |        unsigned TWW    :4;
                             3620 ; 230  |        unsigned TWTO   :10;
                             3621 ; 231  |        unsigned THW    :5; 
                             3622 ; 232  |        unsigned TRAQ   :5;
                             3623 ; 233  |    } B;
                             3624 ; 234  |    int I;
                             3625 ; 235  |} flcftmr2r_type;
                             3626 ; 236  |
                             3627 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             3628 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             3629 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             3630 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             3631 ; 241  |
                             3632 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             3633 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             3634 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             3635 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             3636 ; 246  |
                             3637 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             3638 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             3639 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             3640 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             3641 ; 251  |
                             3642 ; 252  |
                             3643 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             3644 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             3645 ; 255  |
                             3646 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             3647 ; 257  |{
                             3648 ; 258  |    struct
                             3649 ; 259  |    {
                             3650 ; 260  |        unsigned CS     :2;
                             3651 ; 261  |        int SE          :1;
                             3652 ; 262  |        int WP          :1;
                             3653 ; 263  |        int SIZE        :1;
                             3654 ; 264  |        int ICMD        :8;
                             3655 ; 265  |        int TOIE        :1;
                             3656 ; 266  |        int BPIE        :1;
                             3657 ; 267  |        int TOIRQ       :1;
                             3658 ; 268  |        int BPIRQ       :1;
                             3659 ; 269  |    } B;
                             3660 ; 270  |    int I;
                             3661 ; 271  |} flsmcr_type;
                             3662 ; 272  |
                             3663 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             3664 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             3665 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             3666 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             3667 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             3668 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             3669 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             3670 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             3671 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             3672 ; 282  |
                             3673 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             3674 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             3675 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             3676 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             3677 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             3678 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             3679 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             3680 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             3681 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             3682 ; 292  |
                             3683 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             3684 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             3685 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             3686 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             3687 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             3688 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             3689 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             3690 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             3691 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             3692 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             3693 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             3694 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             3695 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             3696 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             3697 ; 307  |
                             3698 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             3699 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             3700 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             3701 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             3702 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             3703 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             3704 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             3705 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             3706 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             3707 ; 317  |
                             3708 ; 318  |
                             3709 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             3710 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                             3711 ; 321  |
                             3712 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             3713 ; 323  |{
                             3714 ; 324  |    struct
                             3715 ; 325  |    {
                             3716 ; 326  |        unsigned TRWSU  :5;
                             3717 ; 327  |        unsigned TRPW   :6;
                             3718 ; 328  |        unsigned TWPW   :6;
                             3719 ; 329  |        unsigned TRWH   :5;
                             3720 ; 330  |    } B;
                             3721 ; 331  |    int I;
                             3722 ; 332  |} flsmtmr1r_type;
                             3723 ; 333  |
                             3724 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             3725 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             3726 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             3727 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             3728 ; 338  |
                             3729 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             3730 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             3731 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             3732 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             3733 ; 343  |
                             3734 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             3735 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             3736 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             3737 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             3738 ; 348  |
                             3739 ; 349  |
                             3740 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             3741 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             3742 ; 352  |
                             3743 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             3744 ; 354  |{
                             3745 ; 355  |    struct
                             3746 ; 356  |    {
                             3747 ; 357  |        unsigned TWT    :6;
                             3748 ; 358  |        unsigned TWTO   :18;
                             3749 ; 359  |    } B;
                             3750 ; 360  |    int I;
                             3751 ; 361  |} flsmtmr2r_type;
                             3752 ; 362  |
                             3753 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             3754 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             3755 ; 365  |
                             3756 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             3757 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             3758 ; 368  |
                             3759 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             3760 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             3761 ; 371  |
                             3762 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             3763 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             3764 ; 374  |typedef union 
                             3765 ; 375  |{
                             3766 ; 376  |  struct
                             3767 ; 377  |  {
                             3768 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             3769 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers */
                             3770 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers */
                             3771 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             3772 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             3773 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             3774 ; 384  |    int PAD0          :17;    
                             3775 ; 385  |  } B;
                             3776 ; 386  |  int I;
                             3777 ; 387  |} flcr2_type;
                             3778 ; 388  |
                             3779 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             3780 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             3781 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             3782 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             3783 ; 393  |
                             3784 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Control Register */
                             3785 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash Start Address Low Register */
                             3786 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash Start Address High Register */
                             3787 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             3788 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Control Register2 */
                             3789 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash CompactFlash Control Register*/
                             3790 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Compact Flash Timer1 Register*/
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3791 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Compact Flash Timer2 Register*/
                             3792 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash SmartMedia Control Register*/
                             3793 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash SmartMedia Timer1 Register*/
                             3794 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash SmartMedia Timer2 Register*/
                             3795 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             3796 ; 406  |
                             3797 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             3798 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             3799 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             3800 ; 410  |
                             3801 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             3802 ; 412  |
                             3803 ; 413  |#endif
                             3804 ; 414  |
                             3805 
                             3807 
                             3808 ; 22   |#include "regsgpio.h"
                             3809 
                             3811 
                             3812 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             3813 ; 2    |#define __REGS_GPIO_INC 1
                             3814 ; 3    |
                             3815 ; 4    |#include "types.h"
                             3816 
                             3818 
                             3819 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3820 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3821 ; 3    |//
                             3822 ; 4    |// Filename: types.h
                             3823 ; 5    |// Description: Standard data types
                             3824 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3825 ; 7    |
                             3826 ; 8    |#ifndef _TYPES_H
                             3827 ; 9    |#define _TYPES_H
                             3828 ; 10   |
                             3829 ; 11   |// TODO:  move this outta here!
                             3830 ; 12   |#if !defined(NOERROR)
                             3831 ; 13   |#define NOERROR 0
                             3832 ; 14   |#define SUCCESS 0
                             3833 ; 15   |#endif 
                             3834 ; 16   |#if !defined(SUCCESS)
                             3835 ; 17   |#define SUCCESS  0
                             3836 ; 18   |#endif
                             3837 ; 19   |#if !defined(ERROR)
                             3838 ; 20   |#define ERROR   -1
                             3839 ; 21   |#endif
                             3840 ; 22   |#if !defined(FALSE)
                             3841 ; 23   |#define FALSE 0
                             3842 ; 24   |#endif
                             3843 ; 25   |#if !defined(TRUE)
                             3844 ; 26   |#define TRUE  1
                             3845 ; 27   |#endif
                             3846 ; 28   |
                             3847 ; 29   |#if !defined(NULL)
                             3848 ; 30   |#define NULL 0
                             3849 ; 31   |#endif
                             3850 ; 32   |
                             3851 ; 33   |#define MAX_INT     0x7FFFFF
                             3852 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3853 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3854 ; 36   |#define MAX_ULONG   (-1) 
                             3855 ; 37   |
                             3856 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3857 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3858 ; 40   |
                             3859 ; 41   |
                             3860 ; 42   |#define BYTE    unsigned char       // btVarName
                             3861 ; 43   |#define CHAR    signed char         // cVarName
                             3862 ; 44   |#define USHORT  unsigned short      // usVarName
                             3863 ; 45   |#define SHORT   unsigned short      // sVarName
                             3864 ; 46   |#define WORD    unsigned int        // wVarName
                             3865 ; 47   |#define INT     signed int          // iVarName
                             3866 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3867 ; 49   |#define LONG    signed long         // lVarName
                             3868 ; 50   |#define BOOL    unsigned int        // bVarName
                             3869 ; 51   |#define FRACT   _fract              // frVarName
                             3870 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3871 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3872 ; 54   |#define FLOAT   float               // fVarName
                             3873 ; 55   |#define DBL     double              // dVarName
                             3874 ; 56   |#define ENUM    enum                // eVarName
                             3875 ; 57   |#define CMX     _complex            // cmxVarName
                             3876 ; 58   |typedef WORD UCS3;                   // 
                             3877 ; 59   |
                             3878 ; 60   |#define UINT16  unsigned short
                             3879 ; 61   |#define UINT8   unsigned char   
                             3880 ; 62   |#define UINT32  unsigned long
                             3881 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3882 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3883 ; 65   |#define WCHAR   UINT16
                             3884 ; 66   |
                             3885 ; 67   |//UINT128 is 16 bytes or 6 words
                             3886 ; 68   |typedef struct UINT128_3500 {   
                             3887 ; 69   |    int val[6];     
                             3888 ; 70   |} UINT128_3500;
                             3889 ; 71   |
                             3890 ; 72   |#define UINT128   UINT128_3500
                             3891 ; 73   |
                             3892 ; 74   |// Little endian word packed byte strings:   
                             3893 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3894 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3895 ; 77   |// Little endian word packed byte strings:   
                             3896 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3897 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3898 ; 80   |
                             3899 ; 81   |// Declare Memory Spaces To Use When Coding
                             3900 ; 82   |// A. Sector Buffers
                             3901 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3902 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3903 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3904 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3905 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3906 ; 88   |// B. Media DDI Memory
                             3907 ; 89   |#define MEDIA_DDI_MEM _Y
                             3908 ; 90   |
                             3909 ; 91   |
                             3910 ; 92   |
                             3911 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3912 ; 94   |// Examples of circular pointers:
                             3913 ; 95   |//    INT CIRC cpiVarName
                             3914 ; 96   |//    DWORD CIRC cpdwVarName
                             3915 ; 97   |
                             3916 ; 98   |#define RETCODE INT                 // rcVarName
                             3917 ; 99   |
                             3918 ; 100  |// generic bitfield structure
                             3919 ; 101  |struct Bitfield {
                             3920 ; 102  |    unsigned int B0  :1;
                             3921 ; 103  |    unsigned int B1  :1;
                             3922 ; 104  |    unsigned int B2  :1;
                             3923 ; 105  |    unsigned int B3  :1;
                             3924 ; 106  |    unsigned int B4  :1;
                             3925 ; 107  |    unsigned int B5  :1;
                             3926 ; 108  |    unsigned int B6  :1;
                             3927 ; 109  |    unsigned int B7  :1;
                             3928 ; 110  |    unsigned int B8  :1;
                             3929 ; 111  |    unsigned int B9  :1;
                             3930 ; 112  |    unsigned int B10 :1;
                             3931 ; 113  |    unsigned int B11 :1;
                             3932 ; 114  |    unsigned int B12 :1;
                             3933 ; 115  |    unsigned int B13 :1;
                             3934 ; 116  |    unsigned int B14 :1;
                             3935 ; 117  |    unsigned int B15 :1;
                             3936 ; 118  |    unsigned int B16 :1;
                             3937 ; 119  |    unsigned int B17 :1;
                             3938 ; 120  |    unsigned int B18 :1;
                             3939 ; 121  |    unsigned int B19 :1;
                             3940 ; 122  |    unsigned int B20 :1;
                             3941 ; 123  |    unsigned int B21 :1;
                             3942 ; 124  |    unsigned int B22 :1;
                             3943 ; 125  |    unsigned int B23 :1;
                             3944 ; 126  |};
                             3945 ; 127  |
                             3946 ; 128  |union BitInt {
                             3947 ; 129  |        struct Bitfield B;
                             3948 ; 130  |        int        I;
                             3949 ; 131  |};
                             3950 ; 132  |
                             3951 ; 133  |#define MAX_MSG_LENGTH 10
                             3952 ; 134  |struct CMessage
                             3953 ; 135  |{
                             3954 ; 136  |        unsigned int m_uLength;
                             3955 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3956 ; 138  |};
                             3957 ; 139  |
                             3958 ; 140  |typedef struct {
                             3959 ; 141  |    WORD m_wLength;
                             3960 ; 142  |    WORD m_wMessage;
                             3961 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3962 ; 144  |} Message;
                             3963 ; 145  |
                             3964 ; 146  |struct MessageQueueDescriptor
                             3965 ; 147  |{
                             3966 ; 148  |        int *m_pBase;
                             3967 ; 149  |        int m_iModulo;
                             3968 ; 150  |        int m_iSize;
                             3969 ; 151  |        int *m_pHead;
                             3970 ; 152  |        int *m_pTail;
                             3971 ; 153  |};
                             3972 ; 154  |
                             3973 ; 155  |struct ModuleEntry
                             3974 ; 156  |{
                             3975 ; 157  |    int m_iSignaledEventMask;
                             3976 ; 158  |    int m_iWaitEventMask;
                             3977 ; 159  |    int m_iResourceOfCode;
                             3978 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3979 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             3980 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3981 ; 163  |    int m_uTimeOutHigh;
                             3982 ; 164  |    int m_uTimeOutLow;
                             3983 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3984 ; 166  |};
                             3985 ; 167  |
                             3986 ; 168  |union WaitMask{
                             3987 ; 169  |    struct B{
                             3988 ; 170  |        unsigned int m_bNone     :1;
                             3989 ; 171  |        unsigned int m_bMessage  :1;
                             3990 ; 172  |        unsigned int m_bTimer    :1;
                             3991 ; 173  |        unsigned int m_bButton   :1;
                             3992 ; 174  |    } B;
                             3993 ; 175  |    int I;
                             3994 ; 176  |} ;
                             3995 ; 177  |
                             3996 ; 178  |
                             3997 ; 179  |struct Button {
                             3998 ; 180  |        WORD wButtonEvent;
                             3999 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4000 ; 182  |};
                             4001 ; 183  |
                             4002 ; 184  |struct Message {
                             4003 ; 185  |        WORD wMsgLength;
                             4004 ; 186  |        WORD wMsgCommand;
                             4005 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4006 ; 188  |};
                             4007 ; 189  |
                             4008 ; 190  |union EventTypes {
                             4009 ; 191  |        struct CMessage msg;
                             4010 ; 192  |        struct Button Button ;
                             4011 ; 193  |        struct Message Message;
                             4012 ; 194  |};
                             4013 ; 195  |
                             4014 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4015 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4016 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4017 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4018 ; 200  |
                             4019 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4020 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4021 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4022 ; 204  |
                             4023 ; 205  |#if DEBUG
                             4024 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4025 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4026 ; 208  |#else 
                             4027 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             4028 ; 210  |#define DebugBuildAssert(x)    
                             4029 ; 211  |#endif
                             4030 ; 212  |
                             4031 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4032 ; 214  |//  #pragma asm
                             4033 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4034 ; 216  |//  #pragma endasm
                             4035 ; 217  |
                             4036 ; 218  |
                             4037 ; 219  |#ifdef COLOR_262K
                             4038 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             4039 ; 221  |#elif defined(COLOR_65K)
                             4040 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             4041 ; 223  |#else
                             4042 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             4043 ; 225  |#endif
                             4044 ; 226  |    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4045 ; 227  |#endif // #ifndef _TYPES_H
                             4046 
                             4048 
                             4049 ; 5    |
                             4050 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4051 ; 7    |//  Interrupt Collector Registers
                             4052 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             4053 ; 9    |
                             4054 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             4055 ; 11   |
                             4056 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             4057 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             4058 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             4059 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             4060 ; 16   |
                             4061 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             4062 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             4063 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             4064 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             4065 ; 21   |
                             4066 ; 22   |#define HW_GPB_GPENR 0
                             4067 ; 23   |#define HW_GPB_GPDOR 1
                             4068 ; 24   |#define HW_GPB_GPDIR 2
                             4069 ; 25   |#define HW_GPB_GPDOER 3
                             4070 ; 26   |#define HW_GPB_GPIPENR 4
                             4071 ; 27   |#define HW_GPB_GPIENR 5
                             4072 ; 28   |#define HW_GPB_GPILVLR 6
                             4073 ; 29   |#define HW_GPB_GPIPOLR 7
                             4074 ; 30   |#define HW_GPB_GPISTATR 8
                             4075 ; 31   |#define HW_GPB_GPPWR 9
                             4076 ; 32   |#define HW_GPB_GP8MA 10
                             4077 ; 33   |
                             4078 ; 34   |
                             4079 ; 35   |
                             4080 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             4081 ; 37   |//  GPIO Register Bit Positions
                             4082 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             4083 ; 39   |{
                             4084 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             4085 ; 41   |    unsigned int I;
                             4086 ; 42   |    unsigned int U;
                             4087 ; 43   |} gpr_type;
                             4088 ; 44   |
                             4089 ; 45   |#define HW_GP_B0_BITPOS 0
                             4090 ; 46   |#define HW_GP_B1_BITPOS 1
                             4091 ; 47   |#define HW_GP_B2_BITPOS 2
                             4092 ; 48   |#define HW_GP_B3_BITPOS 3
                             4093 ; 49   |#define HW_GP_B4_BITPOS 4
                             4094 ; 50   |#define HW_GP_B5_BITPOS 5
                             4095 ; 51   |#define HW_GP_B6_BITPOS 6
                             4096 ; 52   |#define HW_GP_B7_BITPOS 7
                             4097 ; 53   |#define HW_GP_B8_BITPOS 8
                             4098 ; 54   |#define HW_GP_B9_BITPOS 9
                             4099 ; 55   |#define HW_GP_B10_BITPOS 10
                             4100 ; 56   |#define HW_GP_B11_BITPOS 11
                             4101 ; 57   |#define HW_GP_B12_BITPOS 12
                             4102 ; 58   |#define HW_GP_B13_BITPOS 13
                             4103 ; 59   |#define HW_GP_B14_BITPOS 14
                             4104 ; 60   |#define HW_GP_B15_BITPOS 15
                             4105 ; 61   |#define HW_GP_B16_BITPOS 16
                             4106 ; 62   |#define HW_GP_B17_BITPOS 17
                             4107 ; 63   |#define HW_GP_B18_BITPOS 18
                             4108 ; 64   |#define HW_GP_B19_BITPOS 19
                             4109 ; 65   |#define HW_GP_B20_BITPOS 20
                             4110 ; 66   |#define HW_GP_B21_BITPOS 21
                             4111 ; 67   |#define HW_GP_B22_BITPOS 22
                             4112 ; 68   |#define HW_GP_B23_BITPOS 23
                             4113 ; 69   |
                             4114 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             4115 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             4116 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             4117 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             4118 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             4119 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             4120 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             4121 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             4122 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             4123 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             4124 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             4125 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             4126 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             4127 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             4128 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             4129 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             4130 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             4131 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             4132 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             4133 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             4134 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             4135 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             4136 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             4137 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             4138 ; 94   |
                             4139 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             4140 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             4141 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             4142 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             4143 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             4144 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             4145 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             4146 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             4147 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             4148 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             4149 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             4150 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             4151 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             4152 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             4153 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             4154 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             4155 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             4156 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             4157 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             4158 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             4159 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             4160 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             4161 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             4162 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             4163 ; 119  |
                             4164 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             4165 ; 121  |//  GPIO 8mA Register Bit Positions
                             4166 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             4167 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             4168 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             4169 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             4170 ; 126  |
                             4171 ; 127  |
                             4172 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             4173 ; 129  |//  Logical GPIO numbers
                             4174 ; 130  |#define HW_GPIO_000 0
                             4175 ; 131  |#define HW_GPIO_001 1
                             4176 ; 132  |#define HW_GPIO_002 2
                             4177 ; 133  |#define HW_GPIO_003 3
                             4178 ; 134  |#define HW_GPIO_004 4
                             4179 ; 135  |#define HW_GPIO_005 5
                             4180 ; 136  |#define HW_GPIO_006 6
                             4181 ; 137  |#define HW_GPIO_007 7
                             4182 ; 138  |#define HW_GPIO_008 8
                             4183 ; 139  |#define HW_GPIO_009 9
                             4184 ; 140  |#define HW_GPIO_010 10
                             4185 ; 141  |#define HW_GPIO_011 11
                             4186 ; 142  |#define HW_GPIO_012 12
                             4187 ; 143  |#define HW_GPIO_013 13
                             4188 ; 144  |#define HW_GPIO_014 14
                             4189 ; 145  |#define HW_GPIO_015 15
                             4190 ; 146  |#define HW_GPIO_016 16
                             4191 ; 147  |#define HW_GPIO_017 17
                             4192 ; 148  |#define HW_GPIO_018 18
                             4193 ; 149  |#define HW_GPIO_019 19
                             4194 ; 150  |#define HW_GPIO_020 20
                             4195 ; 151  |#define HW_GPIO_021 21
                             4196 ; 152  |#define HW_GPIO_022 22
                             4197 ; 153  |#define HW_GPIO_023 23
                             4198 ; 154  |#define HW_GPIO_024 24
                             4199 ; 155  |#define HW_GPIO_025 25
                             4200 ; 156  |#define HW_GPIO_026 26
                             4201 ; 157  |#define HW_GPIO_027 27
                             4202 ; 158  |#define HW_GPIO_028 28
                             4203 ; 159  |#define HW_GPIO_029 29
                             4204 ; 160  |#define HW_GPIO_030 30
                             4205 ; 161  |#define HW_GPIO_031 31
                             4206 ; 162  |#define HW_GPIO_032 32
                             4207 ; 163  |#define HW_GPIO_033 33
                             4208 ; 164  |#define HW_GPIO_034 34
                             4209 ; 165  |#define HW_GPIO_035 35
                             4210 ; 166  |#define HW_GPIO_036 36
                             4211 ; 167  |#define HW_GPIO_037 37
                             4212 ; 168  |#define HW_GPIO_038 38
                             4213 ; 169  |#define HW_GPIO_039 39
                             4214 ; 170  |#define HW_GPIO_040 40
                             4215 ; 171  |#define HW_GPIO_041 41
                             4216 ; 172  |#define HW_GPIO_042 42
                             4217 ; 173  |#define HW_GPIO_043 43
                             4218 ; 174  |#define HW_GPIO_044 44
                             4219 ; 175  |#define HW_GPIO_045 45
                             4220 ; 176  |#define HW_GPIO_046 46
                             4221 ; 177  |#define HW_GPIO_047 47
                             4222 ; 178  |#define HW_GPIO_048 48
                             4223 ; 179  |#define HW_GPIO_049 49
                             4224 ; 180  |#define HW_GPIO_050 50
                             4225 ; 181  |#define HW_GPIO_051 51
                             4226 ; 182  |#define HW_GPIO_052 52
                             4227 ; 183  |#define HW_GPIO_053 53
                             4228 ; 184  |#define HW_GPIO_054 54
                             4229 ; 185  |#define HW_GPIO_055 55
                             4230 ; 186  |#define HW_GPIO_056 56
                             4231 ; 187  |#define HW_GPIO_057 57
                             4232 ; 188  |#define HW_GPIO_058 58
                             4233 ; 189  |#define HW_GPIO_059 59
                             4234 ; 190  |#define HW_GPIO_060 60
                             4235 ; 191  |#define HW_GPIO_061 61
                             4236 ; 192  |#define HW_GPIO_062 62
                             4237 ; 193  |#define HW_GPIO_063 63
                             4238 ; 194  |#define HW_GPIO_064 64
                             4239 ; 195  |#define HW_GPIO_065 65
                             4240 ; 196  |#define HW_GPIO_066 66
                             4241 ; 197  |#define HW_GPIO_067 67
                             4242 ; 198  |#define HW_GPIO_068 68
                             4243 ; 199  |#define HW_GPIO_069 69
                             4244 ; 200  |#define HW_GPIO_070 70
                             4245 ; 201  |#define HW_GPIO_071 71
                             4246 ; 202  |#define HW_GPIO_072 72
                             4247 ; 203  |#define HW_GPIO_073 73
                             4248 ; 204  |#define HW_GPIO_074 74
                             4249 ; 205  |#define HW_GPIO_075 75
                             4250 ; 206  |#define HW_GPIO_076 76
                             4251 ; 207  |#define HW_GPIO_077 77
                             4252 ; 208  |#define HW_GPIO_078 78
                             4253 ; 209  |#define HW_GPIO_079 79
                             4254 ; 210  |#define HW_GPIO_080 80
                             4255 ; 211  |#define HW_GPIO_081 81
                             4256 ; 212  |#define HW_GPIO_082 82
                             4257 ; 213  |#define HW_GPIO_083 83
                             4258 ; 214  |#define HW_GPIO_084 84
                             4259 ; 215  |#define HW_GPIO_085 85
                             4260 ; 216  |#define HW_GPIO_086 86
                             4261 ; 217  |#define HW_GPIO_087 87
                             4262 ; 218  |#define HW_GPIO_088 88
                             4263 ; 219  |#define HW_GPIO_089 89
                             4264 ; 220  |#define HW_GPIO_090 90
                             4265 ; 221  |#define HW_GPIO_091 91
                             4266 ; 222  |#define HW_GPIO_092 92
                             4267 ; 223  |#define HW_GPIO_093 93
                             4268 ; 224  |#define HW_GPIO_094 94
                             4269 ; 225  |#define HW_GPIO_095 95
                             4270 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             4271 ; 227  |
                             4272 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO 0 Enable Register   */
                             4273 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 0 Data Out Register */
                             4274 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 0 Dait In Register  */
                             4275 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO 0 Dait Out Enable Register  */
                             4276 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 0 Interrupt Pin Enable Register */
                             4277 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO 0 Interrupt Enable Register */
                             4278 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 0 Interrupt Level Register  */
                             4279 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 0 Interrupt Polarity Register   */
                             4280 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 0 Interrupt Status Register */
                             4281 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4282 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             4283 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* GPIO 1 Enable Register   */
                             4284 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 1 Data Out Register */
                             4285 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 1 Dait In Register  */
                             4286 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO 1 Dait Out Enable Register  */
                             4287 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 1 Interrupt Pin Enable Register */
                             4288 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO 1 Interrupt Enable Register */
                             4289 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 1 Interrupt Level Register  */
                             4290 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 1 Interrupt Polarity Register   */
                             4291 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 1 Interrupt Status Register */
                             4292 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4293 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             4294 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                             4295 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                             4296 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4297 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                             4298 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                             4299 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                             4300 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                             4301 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                             4302 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                             4303 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4304 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             4305 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                             4306 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                             4307 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                             4308 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                             4309 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                             4310 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                             4311 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                             4312 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                             4313 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                             4314 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4315 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             4316 ; 272  |
                             4317 ; 273  |#endif
                             4318 ; 274  |
                             4319 
                             4321 
                             4322 ; 23   |#include "regsi2c.h"
                             4323 
                             4325 
                             4326 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4327 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4328 ; 3    |// Filename: regsI2C.inc
                             4329 ; 4    |// Description: Register definitions for GPFLASH interface
                             4330 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4331 ; 6    |// The following naming conventions are followed in this file.
                             4332 ; 7    |// All registers are named using the format...
                             4333 ; 8    |//     HW_<module>_<regname>
                             4334 ; 9    |// where <module> is the module name which can be any of the following...
                             4335 ; 10   |//     USB20
                             4336 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4337 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4338 ; 13   |// that module)
                             4339 ; 14   |// <regname> is the specific register within that module
                             4340 ; 15   |// We also define the following...
                             4341 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4342 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4343 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4344 ; 19   |// which does something else, and
                             4345 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4346 ; 21   |// which does something else.
                             4347 ; 22   |// Other rules
                             4348 ; 23   |//     All caps
                             4349 ; 24   |//     Numeric identifiers start at 0
                             4350 ; 25   |#if !(defined(regsi2cinc))
                             4351 ; 26   |#define regsi2cinc 1
                             4352 ; 27   |
                             4353 ; 28   |#include "types.h"
                             4354 
                             4356 
                             4357 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4358 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4359 ; 3    |//
                             4360 ; 4    |// Filename: types.h
                             4361 ; 5    |// Description: Standard data types
                             4362 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4363 ; 7    |
                             4364 ; 8    |#ifndef _TYPES_H
                             4365 ; 9    |#define _TYPES_H
                             4366 ; 10   |
                             4367 ; 11   |// TODO:  move this outta here!
                             4368 ; 12   |#if !defined(NOERROR)
                             4369 ; 13   |#define NOERROR 0
                             4370 ; 14   |#define SUCCESS 0
                             4371 ; 15   |#endif 
                             4372 ; 16   |#if !defined(SUCCESS)
                             4373 ; 17   |#define SUCCESS  0
                             4374 ; 18   |#endif
                             4375 ; 19   |#if !defined(ERROR)
                             4376 ; 20   |#define ERROR   -1
                             4377 ; 21   |#endif
                             4378 ; 22   |#if !defined(FALSE)
                             4379 ; 23   |#define FALSE 0
                             4380 ; 24   |#endif
                             4381 ; 25   |#if !defined(TRUE)
                             4382 ; 26   |#define TRUE  1
                             4383 ; 27   |#endif
                             4384 ; 28   |
                             4385 ; 29   |#if !defined(NULL)
                             4386 ; 30   |#define NULL 0
                             4387 ; 31   |#endif
                             4388 ; 32   |
                             4389 ; 33   |#define MAX_INT     0x7FFFFF
                             4390 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4391 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4392 ; 36   |#define MAX_ULONG   (-1) 
                             4393 ; 37   |
                             4394 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4395 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4396 ; 40   |
                             4397 ; 41   |
                             4398 ; 42   |#define BYTE    unsigned char       // btVarName
                             4399 ; 43   |#define CHAR    signed char         // cVarName
                             4400 ; 44   |#define USHORT  unsigned short      // usVarName
                             4401 ; 45   |#define SHORT   unsigned short      // sVarName
                             4402 ; 46   |#define WORD    unsigned int        // wVarName
                             4403 ; 47   |#define INT     signed int          // iVarName
                             4404 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4405 ; 49   |#define LONG    signed long         // lVarName
                             4406 ; 50   |#define BOOL    unsigned int        // bVarName
                             4407 ; 51   |#define FRACT   _fract              // frVarName
                             4408 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4409 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4410 ; 54   |#define FLOAT   float               // fVarName
                             4411 ; 55   |#define DBL     double              // dVarName
                             4412 ; 56   |#define ENUM    enum                // eVarName
                             4413 ; 57   |#define CMX     _complex            // cmxVarName
                             4414 ; 58   |typedef WORD UCS3;                   // 
                             4415 ; 59   |
                             4416 ; 60   |#define UINT16  unsigned short
                             4417 ; 61   |#define UINT8   unsigned char   
                             4418 ; 62   |#define UINT32  unsigned long
                             4419 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4420 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4421 ; 65   |#define WCHAR   UINT16
                             4422 ; 66   |
                             4423 ; 67   |//UINT128 is 16 bytes or 6 words
                             4424 ; 68   |typedef struct UINT128_3500 {   
                             4425 ; 69   |    int val[6];     
                             4426 ; 70   |} UINT128_3500;
                             4427 ; 71   |
                             4428 ; 72   |#define UINT128   UINT128_3500
                             4429 ; 73   |
                             4430 ; 74   |// Little endian word packed byte strings:   
                             4431 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4432 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4433 ; 77   |// Little endian word packed byte strings:   
                             4434 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4435 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4436 ; 80   |
                             4437 ; 81   |// Declare Memory Spaces To Use When Coding
                             4438 ; 82   |// A. Sector Buffers
                             4439 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4440 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4441 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4442 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4443 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4444 ; 88   |// B. Media DDI Memory
                             4445 ; 89   |#define MEDIA_DDI_MEM _Y
                             4446 ; 90   |
                             4447 ; 91   |
                             4448 ; 92   |
                             4449 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4450 ; 94   |// Examples of circular pointers:
                             4451 ; 95   |//    INT CIRC cpiVarName
                             4452 ; 96   |//    DWORD CIRC cpdwVarName
                             4453 ; 97   |
                             4454 ; 98   |#define RETCODE INT                 // rcVarName
                             4455 ; 99   |
                             4456 ; 100  |// generic bitfield structure
                             4457 ; 101  |struct Bitfield {
                             4458 ; 102  |    unsigned int B0  :1;
                             4459 ; 103  |    unsigned int B1  :1;
                             4460 ; 104  |    unsigned int B2  :1;
                             4461 ; 105  |    unsigned int B3  :1;
                             4462 ; 106  |    unsigned int B4  :1;
                             4463 ; 107  |    unsigned int B5  :1;
                             4464 ; 108  |    unsigned int B6  :1;
                             4465 ; 109  |    unsigned int B7  :1;
                             4466 ; 110  |    unsigned int B8  :1;
                             4467 ; 111  |    unsigned int B9  :1;
                             4468 ; 112  |    unsigned int B10 :1;
                             4469 ; 113  |    unsigned int B11 :1;
                             4470 ; 114  |    unsigned int B12 :1;
                             4471 ; 115  |    unsigned int B13 :1;
                             4472 ; 116  |    unsigned int B14 :1;
                             4473 ; 117  |    unsigned int B15 :1;
                             4474 ; 118  |    unsigned int B16 :1;
                             4475 ; 119  |    unsigned int B17 :1;
                             4476 ; 120  |    unsigned int B18 :1;
                             4477 ; 121  |    unsigned int B19 :1;
                             4478 ; 122  |    unsigned int B20 :1;
                             4479 ; 123  |    unsigned int B21 :1;
                             4480 ; 124  |    unsigned int B22 :1;
                             4481 ; 125  |    unsigned int B23 :1;
                             4482 ; 126  |};
                             4483 ; 127  |
                             4484 ; 128  |union BitInt {
                             4485 ; 129  |        struct Bitfield B;
                             4486 ; 130  |        int        I;
                             4487 ; 131  |};
                             4488 ; 132  |
                             4489 ; 133  |#define MAX_MSG_LENGTH 10
                             4490 ; 134  |struct CMessage
                             4491 ; 135  |{
                             4492 ; 136  |        unsigned int m_uLength;
                             4493 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4494 ; 138  |};
                             4495 ; 139  |
                             4496 ; 140  |typedef struct {
                             4497 ; 141  |    WORD m_wLength;
                             4498 ; 142  |    WORD m_wMessage;
                             4499 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4500 ; 144  |} Message;
                             4501 ; 145  |
                             4502 ; 146  |struct MessageQueueDescriptor
                             4503 ; 147  |{
                             4504 ; 148  |        int *m_pBase;
                             4505 ; 149  |        int m_iModulo;
                             4506 ; 150  |        int m_iSize;
                             4507 ; 151  |        int *m_pHead;
                             4508 ; 152  |        int *m_pTail;
                             4509 ; 153  |};
                             4510 ; 154  |
                             4511 ; 155  |struct ModuleEntry
                             4512 ; 156  |{
                             4513 ; 157  |    int m_iSignaledEventMask;
                             4514 ; 158  |    int m_iWaitEventMask;
                             4515 ; 159  |    int m_iResourceOfCode;
                             4516 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4517 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             4518 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4519 ; 163  |    int m_uTimeOutHigh;
                             4520 ; 164  |    int m_uTimeOutLow;
                             4521 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4522 ; 166  |};
                             4523 ; 167  |
                             4524 ; 168  |union WaitMask{
                             4525 ; 169  |    struct B{
                             4526 ; 170  |        unsigned int m_bNone     :1;
                             4527 ; 171  |        unsigned int m_bMessage  :1;
                             4528 ; 172  |        unsigned int m_bTimer    :1;
                             4529 ; 173  |        unsigned int m_bButton   :1;
                             4530 ; 174  |    } B;
                             4531 ; 175  |    int I;
                             4532 ; 176  |} ;
                             4533 ; 177  |
                             4534 ; 178  |
                             4535 ; 179  |struct Button {
                             4536 ; 180  |        WORD wButtonEvent;
                             4537 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4538 ; 182  |};
                             4539 ; 183  |
                             4540 ; 184  |struct Message {
                             4541 ; 185  |        WORD wMsgLength;
                             4542 ; 186  |        WORD wMsgCommand;
                             4543 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4544 ; 188  |};
                             4545 ; 189  |
                             4546 ; 190  |union EventTypes {
                             4547 ; 191  |        struct CMessage msg;
                             4548 ; 192  |        struct Button Button ;
                             4549 ; 193  |        struct Message Message;
                             4550 ; 194  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4551 ; 195  |
                             4552 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4553 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4554 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4555 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4556 ; 200  |
                             4557 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4558 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4559 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4560 ; 204  |
                             4561 ; 205  |#if DEBUG
                             4562 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4563 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4564 ; 208  |#else 
                             4565 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             4566 ; 210  |#define DebugBuildAssert(x)    
                             4567 ; 211  |#endif
                             4568 ; 212  |
                             4569 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4570 ; 214  |//  #pragma asm
                             4571 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4572 ; 216  |//  #pragma endasm
                             4573 ; 217  |
                             4574 ; 218  |
                             4575 ; 219  |#ifdef COLOR_262K
                             4576 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             4577 ; 221  |#elif defined(COLOR_65K)
                             4578 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             4579 ; 223  |#else
                             4580 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             4581 ; 225  |#endif
                             4582 ; 226  |    
                             4583 ; 227  |#endif // #ifndef _TYPES_H
                             4584 
                             4586 
                             4587 ; 29   |
                             4588 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             4589 ; 31   |////   I2C STMP Registers
                             4590 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             4591 ; 33   |
                             4592 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                             4593 ; 35   |
                             4594 ; 36   |
                             4595 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                             4596 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                             4597 ; 39   |
                             4598 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                             4599 ; 41   |
                             4600 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                             4601 ; 43   |
                             4602 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                             4603 ; 45   |
                             4604 ; 46   |typedef union               /* I2C Clock Divider Register */
                             4605 ; 47   |{
                             4606 ; 48   |    struct {
                             4607 ; 49   |        int                :1; 
                             4608 ; 50   |        unsigned FACT      :8;
                             4609 ; 51   |    } B;
                             4610 ; 52   |    int I;
                             4611 ; 53   |    unsigned U;
                             4612 ; 54   |} i2cdivr_type;
                             4613 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Registers        */
                             4614 ; 56   |
                             4615 ; 57   |
                             4616 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                             4617 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                             4618 ; 60   |
                             4619 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                             4620 ; 62   |
                             4621 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                             4622 ; 64   |
                             4623 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                             4624 ; 66   |
                             4625 ; 67   |typedef union               /* I2C Data Register */
                             4626 ; 68   |{
                             4627 ; 69   |    struct {
                             4628 ; 70   |         unsigned DATA :24; 
                             4629 ; 71   |    } B;
                             4630 ; 72   |    int I;
                             4631 ; 73   |    unsigned U;
                             4632 ; 74   |} i2cdatr_type;
                             4633 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers (I2CDAT)      */
                             4634 ; 76   |
                             4635 ; 77   |
                             4636 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                             4637 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                             4638 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                             4639 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
                             4640 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                             4641 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                             4642 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                             4643 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                             4644 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                             4645 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                             4646 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                             4647 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                             4648 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                             4649 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                             4650 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                             4651 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                             4652 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                             4653 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                             4654 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                             4655 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                             4656 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                             4657 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                             4658 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                             4659 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                             4660 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                             4661 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                             4662 ; 104  |
                             4663 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                             4664 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                             4665 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                             4666 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                             4667 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                             4668 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                             4669 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                             4670 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                             4671 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                             4672 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                             4673 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                             4674 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                             4675 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                             4676 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                             4677 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                             4678 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                             4679 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                             4680 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                             4681 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                             4682 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                             4683 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                             4684 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                             4685 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                             4686 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                             4687 ; 129  |
                             4688 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                             4689 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                             4690 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                             4691 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                             4692 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                             4693 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                             4694 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                             4695 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                             4696 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                             4697 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                             4698 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                             4699 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                             4700 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                             4701 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
                             4702 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                             4703 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                             4704 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                             4705 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                             4706 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                             4707 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                             4708 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                             4709 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                             4710 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                             4711 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                             4712 ; 154  |
                             4713 ; 155  |typedef union               /* I2C Control Register         */
                             4714 ; 156  |{
                             4715 ; 157  |    struct {
                             4716 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                             4717 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                             4718 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                             4719 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                             4720 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                             4721 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                             4722 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                             4723 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                             4724 ; 166  |       int RWN         :1; /* Read/Not Write           */
                             4725 ; 167  |       unsigned WL     :2; /* Word Length              */
                             4726 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                             4727 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                             4728 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                             4729 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                             4730 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                             4731 ; 173  |        int LWORD       :1; /* Last Word                */
                             4732 ; 174  |        int SUBA        :1; /* Sub Address              */
                             4733 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                             4734 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                             4735 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                             4736 ; 178  |    } B;
                             4737 ; 179  |    int I;
                             4738 ; 180  |    unsigned U;
                             4739 ; 181  |} i2ccsr_type;
                             4740 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status Register (I2CCSR) */
                             4741 ; 183  |
                             4742 ; 184  |#endif
                             4743 
                             4745 
                             4746 ; 24   |#include "regsi2s.h"
                             4747 
                             4749 
                             4750 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4751 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4752 ; 3    |// Filename: regsi2s.inc
                             4753 ; 4    |// Description: Register definitions for I2S interface
                             4754 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4755 ; 6    |// The following naming conventions are followed in this file.
                             4756 ; 7    |// All registers are named using the format...
                             4757 ; 8    |//     HW_<module>_<regname>
                             4758 ; 9    |// where <module> is the module name which can be any of the following...
                             4759 ; 10   |//     USB20
                             4760 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4761 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4762 ; 13   |// that module)
                             4763 ; 14   |// <regname> is the specific register within that module
                             4764 ; 15   |// We also define the following...
                             4765 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4766 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4767 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4768 ; 19   |// which does something else, and
                             4769 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4770 ; 21   |// which does something else.
                             4771 ; 22   |// Other rules
                             4772 ; 23   |//     All caps
                             4773 ; 24   |//     Numeric identifiers start at 0
                             4774 ; 25   |#if !(defined(regsi2sinc))
                             4775 ; 26   |#define regsi2sinc 1
                             4776 ; 27   |
                             4777 ; 28   |#include "types.h"
                             4778 
                             4780 
                             4781 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4782 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4783 ; 3    |//
                             4784 ; 4    |// Filename: types.h
                             4785 ; 5    |// Description: Standard data types
                             4786 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4787 ; 7    |
                             4788 ; 8    |#ifndef _TYPES_H
                             4789 ; 9    |#define _TYPES_H
                             4790 ; 10   |
                             4791 ; 11   |// TODO:  move this outta here!
                             4792 ; 12   |#if !defined(NOERROR)
                             4793 ; 13   |#define NOERROR 0
                             4794 ; 14   |#define SUCCESS 0
                             4795 ; 15   |#endif 
                             4796 ; 16   |#if !defined(SUCCESS)
                             4797 ; 17   |#define SUCCESS  0
                             4798 ; 18   |#endif
                             4799 ; 19   |#if !defined(ERROR)
                             4800 ; 20   |#define ERROR   -1
                             4801 ; 21   |#endif
                             4802 ; 22   |#if !defined(FALSE)
                             4803 ; 23   |#define FALSE 0
                             4804 ; 24   |#endif
                             4805 ; 25   |#if !defined(TRUE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4806 ; 26   |#define TRUE  1
                             4807 ; 27   |#endif
                             4808 ; 28   |
                             4809 ; 29   |#if !defined(NULL)
                             4810 ; 30   |#define NULL 0
                             4811 ; 31   |#endif
                             4812 ; 32   |
                             4813 ; 33   |#define MAX_INT     0x7FFFFF
                             4814 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4815 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4816 ; 36   |#define MAX_ULONG   (-1) 
                             4817 ; 37   |
                             4818 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4819 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4820 ; 40   |
                             4821 ; 41   |
                             4822 ; 42   |#define BYTE    unsigned char       // btVarName
                             4823 ; 43   |#define CHAR    signed char         // cVarName
                             4824 ; 44   |#define USHORT  unsigned short      // usVarName
                             4825 ; 45   |#define SHORT   unsigned short      // sVarName
                             4826 ; 46   |#define WORD    unsigned int        // wVarName
                             4827 ; 47   |#define INT     signed int          // iVarName
                             4828 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4829 ; 49   |#define LONG    signed long         // lVarName
                             4830 ; 50   |#define BOOL    unsigned int        // bVarName
                             4831 ; 51   |#define FRACT   _fract              // frVarName
                             4832 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4833 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4834 ; 54   |#define FLOAT   float               // fVarName
                             4835 ; 55   |#define DBL     double              // dVarName
                             4836 ; 56   |#define ENUM    enum                // eVarName
                             4837 ; 57   |#define CMX     _complex            // cmxVarName
                             4838 ; 58   |typedef WORD UCS3;                   // 
                             4839 ; 59   |
                             4840 ; 60   |#define UINT16  unsigned short
                             4841 ; 61   |#define UINT8   unsigned char   
                             4842 ; 62   |#define UINT32  unsigned long
                             4843 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4844 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4845 ; 65   |#define WCHAR   UINT16
                             4846 ; 66   |
                             4847 ; 67   |//UINT128 is 16 bytes or 6 words
                             4848 ; 68   |typedef struct UINT128_3500 {   
                             4849 ; 69   |    int val[6];     
                             4850 ; 70   |} UINT128_3500;
                             4851 ; 71   |
                             4852 ; 72   |#define UINT128   UINT128_3500
                             4853 ; 73   |
                             4854 ; 74   |// Little endian word packed byte strings:   
                             4855 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4856 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4857 ; 77   |// Little endian word packed byte strings:   
                             4858 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4859 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4860 ; 80   |
                             4861 ; 81   |// Declare Memory Spaces To Use When Coding
                             4862 ; 82   |// A. Sector Buffers
                             4863 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4864 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4865 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4866 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4867 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4868 ; 88   |// B. Media DDI Memory
                             4869 ; 89   |#define MEDIA_DDI_MEM _Y
                             4870 ; 90   |
                             4871 ; 91   |
                             4872 ; 92   |
                             4873 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4874 ; 94   |// Examples of circular pointers:
                             4875 ; 95   |//    INT CIRC cpiVarName
                             4876 ; 96   |//    DWORD CIRC cpdwVarName
                             4877 ; 97   |
                             4878 ; 98   |#define RETCODE INT                 // rcVarName
                             4879 ; 99   |
                             4880 ; 100  |// generic bitfield structure
                             4881 ; 101  |struct Bitfield {
                             4882 ; 102  |    unsigned int B0  :1;
                             4883 ; 103  |    unsigned int B1  :1;
                             4884 ; 104  |    unsigned int B2  :1;
                             4885 ; 105  |    unsigned int B3  :1;
                             4886 ; 106  |    unsigned int B4  :1;
                             4887 ; 107  |    unsigned int B5  :1;
                             4888 ; 108  |    unsigned int B6  :1;
                             4889 ; 109  |    unsigned int B7  :1;
                             4890 ; 110  |    unsigned int B8  :1;
                             4891 ; 111  |    unsigned int B9  :1;
                             4892 ; 112  |    unsigned int B10 :1;
                             4893 ; 113  |    unsigned int B11 :1;
                             4894 ; 114  |    unsigned int B12 :1;
                             4895 ; 115  |    unsigned int B13 :1;
                             4896 ; 116  |    unsigned int B14 :1;
                             4897 ; 117  |    unsigned int B15 :1;
                             4898 ; 118  |    unsigned int B16 :1;
                             4899 ; 119  |    unsigned int B17 :1;
                             4900 ; 120  |    unsigned int B18 :1;
                             4901 ; 121  |    unsigned int B19 :1;
                             4902 ; 122  |    unsigned int B20 :1;
                             4903 ; 123  |    unsigned int B21 :1;
                             4904 ; 124  |    unsigned int B22 :1;
                             4905 ; 125  |    unsigned int B23 :1;
                             4906 ; 126  |};
                             4907 ; 127  |
                             4908 ; 128  |union BitInt {
                             4909 ; 129  |        struct Bitfield B;
                             4910 ; 130  |        int        I;
                             4911 ; 131  |};
                             4912 ; 132  |
                             4913 ; 133  |#define MAX_MSG_LENGTH 10
                             4914 ; 134  |struct CMessage
                             4915 ; 135  |{
                             4916 ; 136  |        unsigned int m_uLength;
                             4917 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4918 ; 138  |};
                             4919 ; 139  |
                             4920 ; 140  |typedef struct {
                             4921 ; 141  |    WORD m_wLength;
                             4922 ; 142  |    WORD m_wMessage;
                             4923 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4924 ; 144  |} Message;
                             4925 ; 145  |
                             4926 ; 146  |struct MessageQueueDescriptor
                             4927 ; 147  |{
                             4928 ; 148  |        int *m_pBase;
                             4929 ; 149  |        int m_iModulo;
                             4930 ; 150  |        int m_iSize;
                             4931 ; 151  |        int *m_pHead;
                             4932 ; 152  |        int *m_pTail;
                             4933 ; 153  |};
                             4934 ; 154  |
                             4935 ; 155  |struct ModuleEntry
                             4936 ; 156  |{
                             4937 ; 157  |    int m_iSignaledEventMask;
                             4938 ; 158  |    int m_iWaitEventMask;
                             4939 ; 159  |    int m_iResourceOfCode;
                             4940 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4941 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             4942 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4943 ; 163  |    int m_uTimeOutHigh;
                             4944 ; 164  |    int m_uTimeOutLow;
                             4945 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4946 ; 166  |};
                             4947 ; 167  |
                             4948 ; 168  |union WaitMask{
                             4949 ; 169  |    struct B{
                             4950 ; 170  |        unsigned int m_bNone     :1;
                             4951 ; 171  |        unsigned int m_bMessage  :1;
                             4952 ; 172  |        unsigned int m_bTimer    :1;
                             4953 ; 173  |        unsigned int m_bButton   :1;
                             4954 ; 174  |    } B;
                             4955 ; 175  |    int I;
                             4956 ; 176  |} ;
                             4957 ; 177  |
                             4958 ; 178  |
                             4959 ; 179  |struct Button {
                             4960 ; 180  |        WORD wButtonEvent;
                             4961 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4962 ; 182  |};
                             4963 ; 183  |
                             4964 ; 184  |struct Message {
                             4965 ; 185  |        WORD wMsgLength;
                             4966 ; 186  |        WORD wMsgCommand;
                             4967 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4968 ; 188  |};
                             4969 ; 189  |
                             4970 ; 190  |union EventTypes {
                             4971 ; 191  |        struct CMessage msg;
                             4972 ; 192  |        struct Button Button ;
                             4973 ; 193  |        struct Message Message;
                             4974 ; 194  |};
                             4975 ; 195  |
                             4976 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4977 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4978 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4979 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4980 ; 200  |
                             4981 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4982 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4983 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4984 ; 204  |
                             4985 ; 205  |#if DEBUG
                             4986 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4987 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4988 ; 208  |#else 
                             4989 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             4990 ; 210  |#define DebugBuildAssert(x)    
                             4991 ; 211  |#endif
                             4992 ; 212  |
                             4993 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4994 ; 214  |//  #pragma asm
                             4995 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4996 ; 216  |//  #pragma endasm
                             4997 ; 217  |
                             4998 ; 218  |
                             4999 ; 219  |#ifdef COLOR_262K
                             5000 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             5001 ; 221  |#elif defined(COLOR_65K)
                             5002 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             5003 ; 223  |#else
                             5004 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             5005 ; 225  |#endif
                             5006 ; 226  |    
                             5007 ; 227  |#endif // #ifndef _TYPES_H
                             5008 
                             5010 
                             5011 ; 29   |
                             5012 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                             5013 ; 31   |////  I2S Registers (SAI)
                             5014 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                             5015 ; 33   |
                             5016 ; 34   |
                             5017 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                             5018 ; 36   |
                             5019 ; 37   |
                             5020 ; 38   |
                             5021 ; 39   |
                             5022 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                             5023 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                             5024 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                             5025 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                             5026 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                             5027 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                             5028 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                             5029 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                             5030 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                             5031 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                             5032 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                             5033 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                             5034 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                             5035 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                             5036 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                             5037 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                             5038 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                             5039 ; 57   |
                             5040 ; 58   |
                             5041 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                             5042 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                             5043 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                             5044 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                             5045 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                             5046 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                             5047 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                             5048 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                             5049 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                             5050 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                             5051 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                             5052 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                             5053 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                             5054 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                             5055 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                             5056 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                             5057 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5058 ; 76   |
                             5059 ; 77   |
                             5060 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                             5061 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                             5062 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                             5063 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                             5064 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                             5065 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                             5066 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                             5067 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                             5068 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                             5069 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                             5070 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                             5071 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                             5072 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                             5073 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                             5074 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                             5075 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                             5076 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                             5077 ; 95   |
                             5078 ; 96   |
                             5079 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                             5080 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                             5081 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                             5082 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                             5083 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                             5084 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                             5085 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                             5086 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                             5087 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                             5088 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                             5089 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                             5090 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                             5091 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                             5092 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                             5093 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                             5094 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                             5095 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                             5096 ; 114  |
                             5097 ; 115  |typedef union
                             5098 ; 116  |{
                             5099 ; 117  |    struct {
                             5100 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                             5101 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                             5102 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                             5103 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                             5104 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                             5105 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                             5106 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                             5107 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                             5108 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                             5109 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                             5110 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                             5111 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                             5112 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                             5113 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                             5114 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                             5115 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                             5116 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                             5117 ; 135  |    } B;
                             5118 ; 136  |    int I;
                             5119 ; 137  |    unsigned U;
                             5120 ; 138  |} saircsr_type;
                             5121 ; 139  |
                             5122 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive CSR         */
                             5123 ; 141  |
                             5124 ; 142  |typedef union
                             5125 ; 143  |{
                             5126 ; 144  |    struct {
                             5127 ; 145  |        unsigned SAI :24;
                             5128 ; 146  |    } B;
                             5129 ; 147  |    int I;
                             5130 ; 148  |    unsigned U;
                             5131 ; 149  |} saixr_type;
                             5132 ; 150  |
                             5133 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received data reg 0 */
                             5134 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received data reg 1 */
                             5135 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received data reg 2 */
                             5136 ; 154  |
                             5137 ; 155  |
                             5138 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                             5139 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                             5140 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                             5141 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                             5142 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                             5143 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                             5144 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                             5145 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                             5146 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                             5147 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                             5148 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                             5149 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                             5150 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                             5151 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                             5152 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                             5153 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                             5154 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                             5155 ; 173  |
                             5156 ; 174  |
                             5157 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                             5158 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                             5159 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                             5160 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                             5161 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                             5162 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                             5163 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                             5164 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                             5165 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                             5166 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                             5167 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                             5168 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                             5169 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                             5170 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                             5171 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                             5172 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                             5173 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                             5174 ; 192  |
                             5175 ; 193  |
                             5176 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                             5177 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                             5178 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                             5179 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                             5180 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                             5181 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                             5182 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                             5183 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                             5184 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                             5185 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                             5186 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                             5187 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                             5188 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                             5189 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                             5190 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                             5191 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                             5192 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                             5193 ; 211  |
                             5194 ; 212  |
                             5195 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                             5196 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                             5197 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                             5198 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                             5199 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                             5200 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                             5201 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                             5202 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                             5203 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                             5204 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                             5205 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                             5206 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                             5207 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                             5208 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                             5209 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                             5210 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                             5211 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                             5212 ; 230  |
                             5213 ; 231  |
                             5214 ; 232  |typedef union
                             5215 ; 233  |{
                             5216 ; 234  |    struct {
                             5217 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                             5218 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                             5219 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                             5220 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                             5221 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                             5222 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                             5223 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction 
                             5224 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                             5225 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                             5226 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                             5227 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justification
                             5228 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                             5229 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                             5230 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                             5231 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                             5232 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                             5233 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                             5234 ; 252  |    } B;
                             5235 ; 253  |    int I;
                             5236 ; 254  |    unsigned U;
                             5237 ; 255  |} saitcsr_type;
                             5238 ; 256  |
                             5239 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR      */
                             5240 ; 258  |
                             5241 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit data reg 0 */
                             5242 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit data reg 1 */
                             5243 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit data reg 2 */
                             5244 ; 262  |
                             5245 ; 263  |#endif
                             5246 
                             5248 
                             5249 ; 25   |#include "regsicoll.h"
                             5250 
                             5252 
                             5253 ; 1    |#if !defined(__REGS_ICOLL_INC)
                             5254 ; 2    |#define __REGS_ICOLL_INC 1
                             5255 ; 3    |
                             5256 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             5257 ; 5    |//  Interrupt Collector Registers
                             5258 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             5259 ; 7    |
                             5260 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                             5261 ; 9    |
                             5262 ; 10   |
                             5263 ; 11   |
                             5264 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                             5265 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                             5266 ; 14   |
                             5267 ; 15   |typedef union
                             5268 ; 16   |{
                             5269 ; 17   |    struct {
                             5270 ; 18   |        int SEN0        :1;
                             5271 ; 19   |        int SEN1        :1;
                             5272 ; 20   |        int SEN2        :1;
                             5273 ; 21   |        int SEN3        :1;
                             5274 ; 22   |        int SEN4        :1;
                             5275 ; 23   |        int SEN5        :1;
                             5276 ; 24   |        int SEN6        :1;
                             5277 ; 25   |        int SEN7        :1;
                             5278 ; 26   |        int SEN8        :1;
                             5279 ; 27   |        int SEN9        :1;
                             5280 ; 28   |        int SEN10       :1;
                             5281 ; 29   |        int SEN11       :1;
                             5282 ; 30   |        int SEN12       :1;
                             5283 ; 31   |        int SEN13       :1;
                             5284 ; 32   |        int SEN14       :1;
                             5285 ; 33   |        int SEN15       :1;
                             5286 ; 34   |        int SEN16       :1;
                             5287 ; 35   |        int SEN17       :1;
                             5288 ; 36   |        int SEN18       :1;
                             5289 ; 37   |        int SEN19       :1;
                             5290 ; 38   |        int SEN20       :1;
                             5291 ; 39   |        int SEN21       :1;
                             5292 ; 40   |        int SEN22       :1;
                             5293 ; 41   |        int SEN23       :1;
                             5294 ; 42   |    } B;
                             5295 ; 43   |    int I;
                             5296 ; 44   |} iclenable0_type;
                             5297 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt Priority Register Core   */
                             5298 ; 46   |
                             5299 ; 47   |
                             5300 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                             5301 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                             5302 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                             5303 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                             5304 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                             5305 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                             5306 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                             5307 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                             5308 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                             5309 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                             5310 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5311 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                             5312 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                             5313 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                             5314 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                             5315 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                             5316 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                             5317 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                             5318 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                             5319 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                             5320 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                             5321 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                             5322 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                             5323 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                             5324 ; 72   |
                             5325 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                             5326 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                             5327 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                             5328 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                             5329 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                             5330 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                             5331 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                             5332 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                             5333 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                             5334 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                             5335 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                             5336 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                             5337 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                             5338 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                             5339 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                             5340 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                             5341 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                             5342 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                             5343 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                             5344 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                             5345 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                             5346 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                             5347 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                             5348 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                             5349 ; 97   |
                             5350 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                             5351 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                             5352 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                             5353 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                             5354 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                             5355 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                             5356 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                             5357 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                             5358 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                             5359 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                             5360 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                             5361 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                             5362 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                             5363 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                             5364 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                             5365 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                             5366 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                             5367 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                             5368 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                             5369 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                             5370 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                             5371 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                             5372 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                             5373 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                             5374 ; 122  |
                             5375 ; 123  |
                             5376 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             5377 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                             5378 ; 126  |typedef union
                             5379 ; 127  |{
                             5380 ; 128  |    struct {
                             5381 ; 129  |        
                             5382 ; 130  |        int SEN24       :1;
                             5383 ; 131  |        int SEN25       :1;
                             5384 ; 132  |        int SEN26       :1;
                             5385 ; 133  |        int SEN27       :1;
                             5386 ; 134  |        int SEN28       :1;
                             5387 ; 135  |        int SEN29       :1;
                             5388 ; 136  |        int SEN30       :1;
                             5389 ; 137  |        int SEN31       :1;
                             5390 ; 138  |        int SEN32       :1;
                             5391 ; 139  |        int SEN33       :1;
                             5392 ; 140  |    } B;
                             5393 ; 141  |    int I;
                             5394 ; 142  |} iclenable1_type;
                             5395 ; 143  |
                             5396 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interrupt Priority Register Core    */
                             5397 ; 145  |
                             5398 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                             5399 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                             5400 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                             5401 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                             5402 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                             5403 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                             5404 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                             5405 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                             5406 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                             5407 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                             5408 ; 156  |
                             5409 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                             5410 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                             5411 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                             5412 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                             5413 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                             5414 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                             5415 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                             5416 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                             5417 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                             5418 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                             5419 ; 167  |
                             5420 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                             5421 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                             5422 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                             5423 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                             5424 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                             5425 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                             5426 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                             5427 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                             5428 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                             5429 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                             5430 ; 178  |
                             5431 ; 179  |
                             5432 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             5433 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                             5434 ; 182  |typedef union
                             5435 ; 183  |{
                             5436 ; 184  |    struct {
                             5437 ; 185  |        int SST0        :1;
                             5438 ; 186  |        int SST1        :1;
                             5439 ; 187  |        int SST2        :1;
                             5440 ; 188  |        int SST3        :1;
                             5441 ; 189  |        int SST4        :1;
                             5442 ; 190  |        int SST5        :1;
                             5443 ; 191  |        int SST6        :1;
                             5444 ; 192  |        int SST7        :1;
                             5445 ; 193  |        int SST8        :1;
                             5446 ; 194  |        int SST9        :1;
                             5447 ; 195  |        int SST10       :1;
                             5448 ; 196  |        int SST11       :1;
                             5449 ; 197  |        int SST12       :1;
                             5450 ; 198  |        int SST13       :1;
                             5451 ; 199  |        int SST14       :1;
                             5452 ; 200  |        int SST15       :1;
                             5453 ; 201  |        int SST16       :1;
                             5454 ; 202  |        int SST17       :1;
                             5455 ; 203  |        int SST18       :1;
                             5456 ; 204  |        int SST19       :1;
                             5457 ; 205  |        int SST20       :1;
                             5458 ; 206  |        int SST21       :1;
                             5459 ; 207  |        int SST22       :1;
                             5460 ; 208  |        int SST23       :1;
                             5461 ; 209  |    } B;
                             5462 ; 210  |    int I;
                             5463 ; 211  |} iclstatus0_type;
                             5464 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interrupt Priority Register Core */
                             5465 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                             5466 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                             5467 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                             5468 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                             5469 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                             5470 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                             5471 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                             5472 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                             5473 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                             5474 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                             5475 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                             5476 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                             5477 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                             5478 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                             5479 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                             5480 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                             5481 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                             5482 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                             5483 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                             5484 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                             5485 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                             5486 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                             5487 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                             5488 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                             5489 ; 237  |
                             5490 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                             5491 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                             5492 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                             5493 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                             5494 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                             5495 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                             5496 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                             5497 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                             5498 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                             5499 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                             5500 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                             5501 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                             5502 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                             5503 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                             5504 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                             5505 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                             5506 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                             5507 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                             5508 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                             5509 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                             5510 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                             5511 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                             5512 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                             5513 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                             5514 ; 262  |
                             5515 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                             5516 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                             5517 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                             5518 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                             5519 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                             5520 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                             5521 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                             5522 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                             5523 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                             5524 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                             5525 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                             5526 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                             5527 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                             5528 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                             5529 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                             5530 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                             5531 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                             5532 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                             5533 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                             5534 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                             5535 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                             5536 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                             5537 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                             5538 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                             5539 ; 287  |
                             5540 ; 288  |
                             5541 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                             5542 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                             5543 ; 291  |typedef union
                             5544 ; 292  |{
                             5545 ; 293  |    struct {
                             5546 ; 294  |        int SST24       :1;
                             5547 ; 295  |        int SST25       :1;
                             5548 ; 296  |        int SST26       :1;
                             5549 ; 297  |        int SST27       :1;
                             5550 ; 298  |        int SST28       :1;
                             5551 ; 299  |        int SST29       :1;
                             5552 ; 300  |        int SST30       :1;
                             5553 ; 301  |        int SST31       :1;
                             5554 ; 302  |        int SST32       :1;
                             5555 ; 303  |        int SST33       :1;
                             5556 ; 304  |    } B;
                             5557 ; 305  |    int I;
                             5558 ; 306  |} iclstatus1_type;
                             5559 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interrupt Priority Register Core */
                             5560 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                             5561 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5562 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                             5563 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                             5564 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                             5565 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                             5566 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                             5567 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                             5568 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                             5569 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                             5570 ; 318  |
                             5571 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                             5572 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                             5573 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                             5574 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                             5575 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                             5576 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                             5577 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                             5578 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                             5579 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                             5580 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                             5581 ; 329  |
                             5582 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                             5583 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                             5584 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                             5585 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                             5586 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                             5587 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                             5588 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                             5589 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                             5590 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                             5591 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                             5592 ; 340  |
                             5593 ; 341  |
                             5594 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                             5595 ; 343  |//  Interrupt Collector Priority Defs
                             5596 ; 344  |typedef union
                             5597 ; 345  |{
                             5598 ; 346  |    struct {
                             5599 ; 347  |        unsigned S0P    :3;
                             5600 ; 348  |        unsigned S1P    :3;
                             5601 ; 349  |        unsigned S2P    :3;
                             5602 ; 350  |        unsigned S3P    :3;
                             5603 ; 351  |        unsigned S4P    :3;
                             5604 ; 352  |        unsigned S5P    :3;
                             5605 ; 353  |        unsigned S6P    :3;
                             5606 ; 354  |        unsigned S7P    :3;
                             5607 ; 355  |    } B;
                             5608 ; 356  |    int I;
                             5609 ; 357  |
                             5610 ; 358  |} iclprior0_type;
                             5611 ; 359  |
                             5612 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrupt Collector Register 0 Priority   */
                             5613 ; 361  |
                             5614 ; 362  |#define HW_ICLPRIORR_SP_0 0
                             5615 ; 363  |#define HW_ICLPRIORR_SP_1 1
                             5616 ; 364  |#define HW_ICLPRIORR_SP_2 2
                             5617 ; 365  |#define HW_ICLPRIORR_SP_3 3
                             5618 ; 366  |#define HW_ICLPRIORR_SP_4 4
                             5619 ; 367  |#define HW_ICLPRIORR_SP_5 5
                             5620 ; 368  |#define HW_ICLPRIORR_SP_6 6
                             5621 ; 369  |#define HW_ICLPRIORR_SP_7 7
                             5622 ; 370  |
                             5623 ; 371  |
                             5624 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                             5625 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                             5626 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                             5627 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                             5628 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                             5629 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                             5630 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                             5631 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                             5632 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                             5633 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                             5634 ; 382  |
                             5635 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                             5636 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                             5637 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                             5638 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                             5639 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                             5640 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                             5641 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                             5642 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                             5643 ; 391  |
                             5644 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                             5645 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                             5646 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                             5647 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                             5648 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                             5649 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                             5650 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                             5651 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                             5652 ; 400  |
                             5653 ; 401  |
                             5654 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                             5655 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                             5656 ; 404  |typedef union
                             5657 ; 405  |{
                             5658 ; 406  |    struct {
                             5659 ; 407  |        unsigned S8P    :3;
                             5660 ; 408  |        unsigned S9P    :3;
                             5661 ; 409  |        unsigned S10P   :3;
                             5662 ; 410  |        unsigned S11P   :3;
                             5663 ; 411  |        unsigned S12P   :3;
                             5664 ; 412  |        unsigned S13P   :3;
                             5665 ; 413  |        unsigned S14P   :3;
                             5666 ; 414  |        unsigned S15P   :3;
                             5667 ; 415  |    } B;
                             5668 ; 416  |    int I;
                             5669 ; 417  |} iclprior1_type;
                             5670 ; 418  |
                             5671 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrupt Collector Register 1 Priority   */
                             5672 ; 420  |
                             5673 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                             5674 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                             5675 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                             5676 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                             5677 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                             5678 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                             5679 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                             5680 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                             5681 ; 429  |
                             5682 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                             5683 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                             5684 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                             5685 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                             5686 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                             5687 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                             5688 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                             5689 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                             5690 ; 438  |
                             5691 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                             5692 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                             5693 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                             5694 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                             5695 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                             5696 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                             5697 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                             5698 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                             5699 ; 447  |
                             5700 ; 448  |
                             5701 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                             5702 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                             5703 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                             5704 ; 452  |{
                             5705 ; 453  |    struct {
                             5706 ; 454  |        unsigned S16P   :3;
                             5707 ; 455  |        unsigned S17P   :3;
                             5708 ; 456  |        unsigned S18P   :3;
                             5709 ; 457  |        unsigned S19P   :3;
                             5710 ; 458  |        unsigned S20P   :3;
                             5711 ; 459  |        unsigned S21P   :3;
                             5712 ; 460  |        unsigned S22P   :3;
                             5713 ; 461  |        unsigned S23P   :3;
                             5714 ; 462  |    } B;
                             5715 ; 463  |    int I;
                             5716 ; 464  |} iclprior2_type;
                             5717 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrupt Collector Register 2 Priority   */
                             5718 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                             5719 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                             5720 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                             5721 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                             5722 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                             5723 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                             5724 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                             5725 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                             5726 ; 474  |
                             5727 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                             5728 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                             5729 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                             5730 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                             5731 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                             5732 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                             5733 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                             5734 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                             5735 ; 483  |
                             5736 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                             5737 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                             5738 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                             5739 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                             5740 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                             5741 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                             5742 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                             5743 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                             5744 ; 492  |
                             5745 ; 493  |
                             5746 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                             5747 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                             5748 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5749 ; 497  |{
                             5750 ; 498  |    struct {
                             5751 ; 499  |        unsigned S24P   :3;
                             5752 ; 500  |        unsigned S25P   :3;
                             5753 ; 501  |        unsigned S26P   :3;
                             5754 ; 502  |        unsigned S27P   :3;
                             5755 ; 503  |        unsigned S28P   :3;
                             5756 ; 504  |        unsigned S29P   :3;
                             5757 ; 505  |        unsigned S30P   :3;
                             5758 ; 506  |        unsigned S31P   :3;
                             5759 ; 507  |    } B;
                             5760 ; 508  |    int I;
                             5761 ; 509  |} iclprior3_type;
                             5762 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrupt Collector Register 3 Priority   */
                             5763 ; 511  |
                             5764 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                             5765 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             5766 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             5767 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             5768 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             5769 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             5770 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             5771 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             5772 ; 520  |
                             5773 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             5774 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                             5775 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             5776 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             5777 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             5778 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                             5779 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             5780 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             5781 ; 529  |
                             5782 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             5783 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             5784 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             5785 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             5786 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             5787 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             5788 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                             5789 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             5790 ; 538  |
                             5791 ; 539  |
                             5792 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             5793 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             5794 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5795 ; 543  |{
                             5796 ; 544  |    struct {
                             5797 ; 545  |        unsigned S32P   :3;
                             5798 ; 546  |        unsigned S33P   :3;
                             5799 ; 547  |    } B;
                             5800 ; 548  |    int I;
                             5801 ; 549  |} iclprior4_type;
                             5802 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt Collector Register 4 Priority   */
                             5803 ; 551  |
                             5804 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             5805 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             5806 ; 554  |
                             5807 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             5808 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                             5809 ; 557  |
                             5810 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             5811 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             5812 ; 560  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5813 ; 561  |
                             5814 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             5815 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             5816 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             5817 ; 565  |{
                             5818 ; 566  |    struct {
                             5819 ; 567  |        unsigned S0S    :2;
                             5820 ; 568  |        unsigned S1S    :2;
                             5821 ; 569  |        unsigned S2S    :2;
                             5822 ; 570  |        unsigned S3S    :2;
                             5823 ; 571  |        unsigned S4S    :2;
                             5824 ; 572  |        unsigned S5S    :2;
                             5825 ; 573  |        unsigned S6S    :2;
                             5826 ; 574  |        unsigned S7S    :2;
                             5827 ; 575  |        unsigned S8S    :2;
                             5828 ; 576  |        unsigned S9S    :2;
                             5829 ; 577  |        unsigned S10S   :2;
                             5830 ; 578  |        unsigned S11S   :2;
                             5831 ; 579  |    } B;
                             5832 ; 580  |    int I;
                             5833 ; 581  |} iclsteer0_type;
                             5834 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrupt Collector Steering Register 0   */
                             5835 ; 583  |
                             5836 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             5837 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             5838 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                             5839 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             5840 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             5841 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                             5842 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             5843 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             5844 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             5845 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             5846 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             5847 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             5848 ; 596  |
                             5849 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             5850 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             5851 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                             5852 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             5853 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             5854 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             5855 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             5856 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             5857 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             5858 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             5859 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             5860 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             5861 ; 609  |
                             5862 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             5863 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             5864 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             5865 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             5866 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             5867 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             5868 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             5869 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                             5870 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             5871 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             5872 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             5873 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             5874 ; 622  |
                             5875 ; 623  |
                             5876 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             5877 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             5878 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             5879 ; 627  |{
                             5880 ; 628  |    struct {
                             5881 ; 629  |        unsigned S12S   :2;
                             5882 ; 630  |        unsigned S13S   :2;
                             5883 ; 631  |        unsigned S14S   :2;
                             5884 ; 632  |        unsigned S15S   :2;
                             5885 ; 633  |        unsigned S16S   :2;
                             5886 ; 634  |        unsigned S17S   :2;
                             5887 ; 635  |        unsigned S18S   :2;
                             5888 ; 636  |        unsigned S19S   :2;
                             5889 ; 637  |        unsigned S20S   :2;
                             5890 ; 638  |        unsigned S21S   :2;
                             5891 ; 639  |        unsigned S22S   :2;
                             5892 ; 640  |        unsigned S23S   :2;
                             5893 ; 641  |    } B;
                             5894 ; 642  |    int I;
                             5895 ; 643  |} iclsteer1_type;
                             5896 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrupt Collector Steering Register 1   */
                             5897 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             5898 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             5899 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                             5900 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             5901 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             5902 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                             5903 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             5904 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             5905 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             5906 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             5907 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             5908 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             5909 ; 657  |
                             5910 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             5911 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             5912 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             5913 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             5914 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             5915 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             5916 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             5917 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             5918 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             5919 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             5920 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             5921 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             5922 ; 670  |
                             5923 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             5924 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             5925 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             5926 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             5927 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             5928 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             5929 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             5930 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             5931 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             5932 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             5933 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             5934 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             5935 ; 683  |
                             5936 ; 684  |
                             5937 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             5938 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             5939 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             5940 ; 688  |{
                             5941 ; 689  |    struct {
                             5942 ; 690  |        unsigned S24S   :2;
                             5943 ; 691  |        unsigned S25S   :2;
                             5944 ; 692  |        unsigned S26S   :2;
                             5945 ; 693  |        unsigned S27S   :2;
                             5946 ; 694  |        unsigned S28S   :2;
                             5947 ; 695  |        unsigned S29S   :2;
                             5948 ; 696  |        unsigned S30S   :2;
                             5949 ; 697  |        unsigned S31S   :2;
                             5950 ; 698  |        unsigned S32S   :2;
                             5951 ; 699  |        unsigned S33S   :2;
                             5952 ; 700  |    } B;
                             5953 ; 701  |    int I;
                             5954 ; 702  |} iclsteer2_type;
                             5955 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interrupt Collector Steering Register 2  */
                             5956 ; 704  |
                             5957 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             5958 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             5959 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             5960 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             5961 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             5962 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             5963 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             5964 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             5965 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             5966 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             5967 ; 715  |
                             5968 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             5969 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             5970 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                             5971 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             5972 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             5973 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             5974 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             5975 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             5976 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             5977 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             5978 ; 726  |
                             5979 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             5980 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             5981 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             5982 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             5983 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             5984 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             5985 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             5986 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             5987 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             5988 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             5989 ; 737  |
                             5990 ; 738  |
                             5991 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             5992 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             5993 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             5994 ; 742  |{
                             5995 ; 743  |    struct {
                             5996 ; 744  |        int S0FV        :1;
                             5997 ; 745  |        int S1FV        :1;
                             5998 ; 746  |        int S2FV        :1;
                             5999 ; 747  |        int S3FV        :1;
                             6000 ; 748  |        int S4FV        :1;
                             6001 ; 749  |        int S5FV        :1;
                             6002 ; 750  |        int S6FV        :1;
                             6003 ; 751  |        int S7FV        :1;
                             6004 ; 752  |        int S8FV        :1;
                             6005 ; 753  |        int S9FV        :1;
                             6006 ; 754  |        int S10FV       :1;
                             6007 ; 755  |        int S11FV       :1;
                             6008 ; 756  |        int S12FV       :1;
                             6009 ; 757  |        int S13FV       :1;
                             6010 ; 758  |        int S14FV       :1;
                             6011 ; 759  |        int S15FV       :1;
                             6012 ; 760  |        int S16FV       :1;
                             6013 ; 761  |        int S17FV       :1;
                             6014 ; 762  |        int S18FV       :1;
                             6015 ; 763  |        int S19FV       :1;
                             6016 ; 764  |        int S20FV       :1;
                             6017 ; 765  |        int S21FV       :1;
                             6018 ; 766  |        int S22FV       :1;
                             6019 ; 767  |        int S23FV       :1;
                             6020 ; 768  |    } B;
                             6021 ; 769  |    int I;
                             6022 ; 770  |} iclforce0_type;
                             6023 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interrupt Collector Debug Force Register 0   */
                             6024 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             6025 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             6026 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             6027 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             6028 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             6029 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             6030 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             6031 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                             6032 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             6033 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             6034 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             6035 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             6036 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             6037 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             6038 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             6039 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             6040 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             6041 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             6042 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             6043 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             6044 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             6045 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             6046 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             6047 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             6048 ; 796  |
                             6049 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             6050 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             6051 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             6052 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             6053 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             6054 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             6055 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             6056 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             6057 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             6058 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             6059 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             6060 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             6061 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             6062 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             6063 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6064 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             6065 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             6066 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             6067 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             6068 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             6069 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             6070 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             6071 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             6072 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             6073 ; 821  |
                             6074 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             6075 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             6076 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             6077 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             6078 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             6079 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             6080 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             6081 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             6082 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             6083 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             6084 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             6085 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             6086 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             6087 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             6088 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             6089 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             6090 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             6091 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             6092 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             6093 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                             6094 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             6095 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             6096 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             6097 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             6098 ; 846  |
                             6099 ; 847  |
                             6100 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             6101 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             6102 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             6103 ; 851  |{
                             6104 ; 852  |    struct {
                             6105 ; 853  |        int S24FV       :1;
                             6106 ; 854  |        int S25FV       :1;
                             6107 ; 855  |        int S26FV       :1;
                             6108 ; 856  |        int S27FV       :1;
                             6109 ; 857  |        int S28FV       :1;
                             6110 ; 858  |        int S29FV       :1;
                             6111 ; 859  |        int S30FV       :1;
                             6112 ; 860  |        int S31FV       :1;
                             6113 ; 861  |        int S32FV       :1;
                             6114 ; 862  |        int S33FV       :1;
                             6115 ; 863  |    } B;
                             6116 ; 864  |    int I;
                             6117 ; 865  |} iclforce1_type;
                             6118 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interrupt Collector Debug Force Register 1   */
                             6119 ; 867  |
                             6120 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             6121 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             6122 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             6123 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             6124 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             6125 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             6126 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             6127 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             6128 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             6129 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             6130 ; 878  |
                             6131 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             6132 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             6133 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             6134 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             6135 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             6136 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             6137 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             6138 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             6139 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             6140 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             6141 ; 889  |
                             6142 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             6143 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             6144 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             6145 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             6146 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             6147 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             6148 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             6149 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             6150 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             6151 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             6152 ; 900  |
                             6153 ; 901  |
                             6154 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                             6155 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             6156 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             6157 ; 905  |{
                             6158 ; 906  |    struct {
                             6159 ; 907  |        int S0FE        :1;
                             6160 ; 908  |        int S1FE        :1;
                             6161 ; 909  |        int S2FE        :1;
                             6162 ; 910  |        int S3FE        :1;
                             6163 ; 911  |        int S4FE        :1;
                             6164 ; 912  |        int S5FE        :1;
                             6165 ; 913  |        int S6FE        :1;
                             6166 ; 914  |        int S7FE        :1;
                             6167 ; 915  |        int S8FE        :1;
                             6168 ; 916  |        int S9FE        :1;
                             6169 ; 917  |        int S10FE       :1;
                             6170 ; 918  |        int S11FE       :1;
                             6171 ; 919  |        int S12FE       :1;
                             6172 ; 920  |        int S13FE       :1;
                             6173 ; 921  |        int S14FE       :1;
                             6174 ; 922  |        int S15FE       :1;
                             6175 ; 923  |        int S16FE       :1;
                             6176 ; 924  |        int S17FE       :1;
                             6177 ; 925  |        int S18FE       :1;
                             6178 ; 926  |        int S19FE       :1;
                             6179 ; 927  |        int S20FE       :1;
                             6180 ; 928  |        int S21FE       :1;
                             6181 ; 929  |        int S22FE       :1;
                             6182 ; 930  |        int S23FE       :1;
                             6183 ; 931  |    } B;
                             6184 ; 932  |    int I;
                             6185 ; 933  |} iclfenable0_type;
                             6186 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Interrupt Collector Force Enable Register 0    */
                             6187 ; 935  |
                             6188 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             6189 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             6190 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             6191 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             6192 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             6193 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             6194 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             6195 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             6196 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             6197 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             6198 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             6199 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             6200 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             6201 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             6202 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             6203 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             6204 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             6205 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             6206 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             6207 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             6208 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             6209 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             6210 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             6211 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             6212 ; 960  |
                             6213 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             6214 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             6215 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             6216 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             6217 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             6218 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             6219 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             6220 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             6221 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             6222 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             6223 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             6224 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             6225 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             6226 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             6227 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             6228 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             6229 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             6230 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             6231 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             6232 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             6233 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             6234 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             6235 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             6236 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             6237 ; 985  |
                             6238 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             6239 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             6240 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             6241 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             6242 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             6243 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             6244 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             6245 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             6246 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             6247 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             6248 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             6249 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             6250 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             6251 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             6252 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             6253 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             6254 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             6255 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             6256 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             6257 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             6258 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             6259 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             6260 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             6261 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             6262 ; 1010 |
                             6263 ; 1011 |
                             6264 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             6265 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             6266 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             6267 ; 1015 |{
                             6268 ; 1016 |    struct {
                             6269 ; 1017 |        int S24FE       :1;
                             6270 ; 1018 |        int S25FE       :1;
                             6271 ; 1019 |        int S26FE       :1;
                             6272 ; 1020 |        int S27FE       :1;
                             6273 ; 1021 |        int S28FE       :1;
                             6274 ; 1022 |        int S29FE       :1;
                             6275 ; 1023 |        int S30FE       :1;
                             6276 ; 1024 |        int S31FE       :1;
                             6277 ; 1025 |        int S32FE       :1;
                             6278 ; 1026 |        int S33FE       :1;
                             6279 ; 1027 |    } B;
                             6280 ; 1028 |    int I;
                             6281 ; 1029 |} iclfenable1_type;
                             6282 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Interrupt Collector Force Enable Register 1    */
                             6283 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             6284 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             6285 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             6286 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             6287 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             6288 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             6289 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             6290 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             6291 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             6292 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             6293 ; 1041 |
                             6294 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             6295 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             6296 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             6297 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             6298 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             6299 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             6300 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             6301 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             6302 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             6303 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             6304 ; 1052 |
                             6305 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             6306 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             6307 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             6308 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             6309 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             6310 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             6311 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             6312 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             6313 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             6314 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6315 ; 1063 |
                             6316 ; 1064 |
                             6317 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             6318 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             6319 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             6320 ; 1068 |{
                             6321 ; 1069 |    struct {
                             6322 ; 1070 |        unsigned RQ     :7;
                             6323 ; 1071 |        unsigned IVA    :7;
                             6324 ; 1072 |        unsigned IVB    :7;
                             6325 ; 1073 |    } B;
                             6326 ; 1074 |    int I;
                             6327 ; 1075 |} iclobsvz0_type;
                             6328 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interrupt Collector Observation Register 0   */
                             6329 ; 1077 |
                             6330 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             6331 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             6332 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             6333 ; 1081 |
                             6334 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             6335 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             6336 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             6337 ; 1085 |
                             6338 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             6339 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             6340 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             6341 ; 1089 |
                             6342 ; 1090 |
                             6343 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             6344 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             6345 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             6346 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             6347 ; 1095 |
                             6348 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             6349 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             6350 ; 1098 |
                             6351 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             6352 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             6353 ; 1101 |
                             6354 ; 1102 |
                             6355 ; 1103 |
                             6356 ; 1104 |
                             6357 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             6358 ; 1106 |//  Interrupt Vectors
                             6359 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             6360 ; 1108 |// Reset Vector
                             6361 ; 1109 |#define HW_IVECRESET 0x0000           
                             6362 ; 1110 |// Stack Error
                             6363 ; 1111 |#define HW_IVECSTERR 0x0002           
                             6364 ; 1112 |// Trace
                             6365 ; 1113 |#define HW_IVECTRAC 0x0004           
                             6366 ; 1114 |// SWI
                             6367 ; 1115 |#define HW_IVECSWI 0x0006           
                             6368 ; 1116 |// ~IRQA
                             6369 ; 1117 |#define HW_IVECIRQA 0x0008           
                             6370 ; 1118 |// ~IRQB - BROWNOUT
                             6371 ; 1119 |#define HW_IVECIRQB 0x000A           
                             6372 ; 1120 |// Fatal Error
                             6373 ; 1121 |#define HW_IVECERROR 0x000C           
                             6374 ; 1122 |// SPI
                             6375 ; 1123 |#define HW_IVECSPI 0x000E           
                             6376 ; 1124 |// I2S TX Data Empty
                             6377 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             6378 ; 1126 |// I2S TX Underflow
                             6379 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             6380 ; 1128 |// I2S RX Data Full
                             6381 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             6382 ; 1130 |// I2S RX Overflow
                             6383 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             6384 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors here
                             6385 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors here
                             6386 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors here
                             6387 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             6388 ; 1136 |// GPIO1
                             6389 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             6390 ; 1138 |// GPIO2
                             6391 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             6392 ; 1140 |// GPIO0
                             6393 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             6394 ; 1142 |// TIMER0
                             6395 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             6396 ; 1144 |// TIMER1
                             6397 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             6398 ; 1146 |// TIMER2
                             6399 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             6400 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors here
                             6401 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors here
                             6402 ; 1150 |// I2C RX Data Ready
                             6403 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             6404 ; 1152 |// I2C RX Overflow
                             6405 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             6406 ; 1154 |// I2C TX Data Empty
                             6407 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             6408 ; 1156 |// I2C TX Underflow
                             6409 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             6410 ; 1158 |// Illegal Instruction
                             6411 ; 1159 |#define HW_IVECILI 0x0038           
                             6412 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors here
                             6413 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             6414 ; 1162 |#define HW_IVECDACE 0x003C           
                             6415 ; 1163 |// DAC Underflow ISR
                             6416 ; 1164 |#define HW_IVECDACUF 0x003E           
                             6417 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors here
                             6418 ; 1166 |// ADC Full ISR
                             6419 ; 1167 |#define HW_IVECADCF 0x0042           
                             6420 ; 1168 |// ADC Overflow ISR
                             6421 ; 1169 |#define HW_IVECADCOF 0x0044           
                             6422 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors here
                             6423 ; 1171 |// TIMER3
                             6424 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             6425 ; 1173 |// GPIO3
                             6426 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             6427 ; 1175 |// SDRAM
                             6428 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             6429 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors here
                             6430 ; 1178 |// 5 volt power connected
                             6431 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             6432 ; 1180 |// USB Controller
                             6433 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             6434 ; 1182 |// USB Wakeup 
                             6435 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             6436 ; 1184 |// 5 volt power disconnected
                             6437 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             6438 ; 1186 |// enhanced SPI
                             6439 ; 1187 |#define HW_IVECESPI 0x0058           
                             6440 ; 1188 |// filter coprocessor
                             6441 ; 1189 |#define HW_IVECFILCO 0x005A           
                             6442 ; 1190 |// low res ADC #1
                             6443 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             6444 ; 1192 |// real time clock alarm
                             6445 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             6446 ; 1194 |// low res ADC #2
                             6447 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             6448 ; 1196 |// flash hardware ECC
                             6449 ; 1197 |#define HW_IVECHWECC 0x0062           
                             6450 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors here
                             6451 ; 1199 |// CDSYNC Interrupt
                             6452 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             6453 ; 1201 |// CDSYNC Exception
                             6454 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             6455 ; 1203 |// RS
                             6456 ; 1204 |#define HW_IVECRS 0x006A           
                             6457 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors here
                             6458 ; 1206 |// Flash Done ISR
                             6459 ; 1207 |#define HW_IVECFD 0x006E           
                             6460 ; 1208 |// CompactFlash ISR
                             6461 ; 1209 |#define HW_IVECCF 0x0070           
                             6462 ; 1210 |// SmartMedia Timeout ISR
                             6463 ; 1211 |#define HW_IVECSMTO 0x0072           
                             6464 ; 1212 |// SmartMedia Invalid Programming
                             6465 ; 1213 |#define HW_IVECSMIP 0x0074           
                             6466 ; 1214 |// CompactFlash No Card ISR
                             6467 ; 1215 |#define HW_IVECCFNC 0x0076           
                             6468 ; 1216 |// CompactFlash Status Change ISR
                             6469 ; 1217 |#define HW_IVECCFSC 0x0078           
                             6470 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors here
                             6471 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors here
                             6472 ; 1220 |// CDI
                             6473 ; 1221 |#define HW_IVECCDI 0x007E           
                             6474 ; 1222 |
                             6475 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             6476 ; 1224 |//  Interrupt Vectors
                             6477 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             6478 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             6479 ; 1227 |#define VECTOR(address,isr) \ 
                             6480 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             6481 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             6482 ; 1230 |
                             6483 ; 1231 |
                             6484 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             6485 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             6486 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             6487 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             6488 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             6489 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             6490 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             6491 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             6492 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             6493 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             6494 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             6495 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             6496 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             6497 ; 1245 |
                             6498 ; 1246 |// Interrupt Disabled
                             6499 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             6500 ; 1248 |// Interrupt Priority Level 0
                             6501 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             6502 ; 1250 |// Interrupt Priority Level 1
                             6503 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             6504 ; 1252 |// Interrupt Priority Level 2
                             6505 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             6506 ; 1254 |
                             6507 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             6508 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             6509 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             6510 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                             6511 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             6512 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             6513 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             6514 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             6515 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             6516 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             6517 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             6518 ; 1266 |
                             6519 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             6520 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             6521 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             6522 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             6523 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             6524 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             6525 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             6526 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             6527 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             6528 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             6529 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             6530 ; 1278 |
                             6531 ; 1279 |// Interrupt Priority register
                             6532 ; 1280 |typedef union               
                             6533 ; 1281 |{
                             6534 ; 1282 |    struct {
                             6535 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             6536 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             6537 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             6538 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             6539 ; 1287 |        int                 :4; /* Reserved */
                             6540 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             6541 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             6542 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             6543 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             6544 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             6545 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             6546 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             6547 ; 1295 |    } B;
                             6548 ; 1296 |
                             6549 ; 1297 |    int I;
                             6550 ; 1298 |
                             6551 ; 1299 |} ipr_type;
                             6552 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             6553 ; 1301 |
                             6554 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             6555 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             6556 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             6557 ; 1305 |
                             6558 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             6559 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             6560 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             6561 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             6562 ; 1310 |
                             6563 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             6564 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             6565 ; 1313 |#define HW_ICLSTEERR_SS_1 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6566 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             6567 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             6568 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             6569 ; 1317 |
                             6570 ; 1318 |#endif
                             6571 ; 1319 |
                             6572 
                             6574 
                             6575 ; 26   |#include "regslradc.h"
                             6576 
                             6578 
                             6579 ; 1    |#if !(defined(regslradcinc))
                             6580 ; 2    |
                             6581 ; 3    |#define regslradcinc 1
                             6582 ; 4    |
                             6583 ; 5    |#include "types.h"
                             6584 
                             6586 
                             6587 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6588 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6589 ; 3    |//
                             6590 ; 4    |// Filename: types.h
                             6591 ; 5    |// Description: Standard data types
                             6592 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6593 ; 7    |
                             6594 ; 8    |#ifndef _TYPES_H
                             6595 ; 9    |#define _TYPES_H
                             6596 ; 10   |
                             6597 ; 11   |// TODO:  move this outta here!
                             6598 ; 12   |#if !defined(NOERROR)
                             6599 ; 13   |#define NOERROR 0
                             6600 ; 14   |#define SUCCESS 0
                             6601 ; 15   |#endif 
                             6602 ; 16   |#if !defined(SUCCESS)
                             6603 ; 17   |#define SUCCESS  0
                             6604 ; 18   |#endif
                             6605 ; 19   |#if !defined(ERROR)
                             6606 ; 20   |#define ERROR   -1
                             6607 ; 21   |#endif
                             6608 ; 22   |#if !defined(FALSE)
                             6609 ; 23   |#define FALSE 0
                             6610 ; 24   |#endif
                             6611 ; 25   |#if !defined(TRUE)
                             6612 ; 26   |#define TRUE  1
                             6613 ; 27   |#endif
                             6614 ; 28   |
                             6615 ; 29   |#if !defined(NULL)
                             6616 ; 30   |#define NULL 0
                             6617 ; 31   |#endif
                             6618 ; 32   |
                             6619 ; 33   |#define MAX_INT     0x7FFFFF
                             6620 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6621 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6622 ; 36   |#define MAX_ULONG   (-1) 
                             6623 ; 37   |
                             6624 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6625 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6626 ; 40   |
                             6627 ; 41   |
                             6628 ; 42   |#define BYTE    unsigned char       // btVarName
                             6629 ; 43   |#define CHAR    signed char         // cVarName
                             6630 ; 44   |#define USHORT  unsigned short      // usVarName
                             6631 ; 45   |#define SHORT   unsigned short      // sVarName
                             6632 ; 46   |#define WORD    unsigned int        // wVarName
                             6633 ; 47   |#define INT     signed int          // iVarName
                             6634 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6635 ; 49   |#define LONG    signed long         // lVarName
                             6636 ; 50   |#define BOOL    unsigned int        // bVarName
                             6637 ; 51   |#define FRACT   _fract              // frVarName
                             6638 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6639 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6640 ; 54   |#define FLOAT   float               // fVarName
                             6641 ; 55   |#define DBL     double              // dVarName
                             6642 ; 56   |#define ENUM    enum                // eVarName
                             6643 ; 57   |#define CMX     _complex            // cmxVarName
                             6644 ; 58   |typedef WORD UCS3;                   // 
                             6645 ; 59   |
                             6646 ; 60   |#define UINT16  unsigned short
                             6647 ; 61   |#define UINT8   unsigned char   
                             6648 ; 62   |#define UINT32  unsigned long
                             6649 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6650 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6651 ; 65   |#define WCHAR   UINT16
                             6652 ; 66   |
                             6653 ; 67   |//UINT128 is 16 bytes or 6 words
                             6654 ; 68   |typedef struct UINT128_3500 {   
                             6655 ; 69   |    int val[6];     
                             6656 ; 70   |} UINT128_3500;
                             6657 ; 71   |
                             6658 ; 72   |#define UINT128   UINT128_3500
                             6659 ; 73   |
                             6660 ; 74   |// Little endian word packed byte strings:   
                             6661 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6662 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6663 ; 77   |// Little endian word packed byte strings:   
                             6664 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6665 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6666 ; 80   |
                             6667 ; 81   |// Declare Memory Spaces To Use When Coding
                             6668 ; 82   |// A. Sector Buffers
                             6669 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6670 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6671 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6672 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6673 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6674 ; 88   |// B. Media DDI Memory
                             6675 ; 89   |#define MEDIA_DDI_MEM _Y
                             6676 ; 90   |
                             6677 ; 91   |
                             6678 ; 92   |
                             6679 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6680 ; 94   |// Examples of circular pointers:
                             6681 ; 95   |//    INT CIRC cpiVarName
                             6682 ; 96   |//    DWORD CIRC cpdwVarName
                             6683 ; 97   |
                             6684 ; 98   |#define RETCODE INT                 // rcVarName
                             6685 ; 99   |
                             6686 ; 100  |// generic bitfield structure
                             6687 ; 101  |struct Bitfield {
                             6688 ; 102  |    unsigned int B0  :1;
                             6689 ; 103  |    unsigned int B1  :1;
                             6690 ; 104  |    unsigned int B2  :1;
                             6691 ; 105  |    unsigned int B3  :1;
                             6692 ; 106  |    unsigned int B4  :1;
                             6693 ; 107  |    unsigned int B5  :1;
                             6694 ; 108  |    unsigned int B6  :1;
                             6695 ; 109  |    unsigned int B7  :1;
                             6696 ; 110  |    unsigned int B8  :1;
                             6697 ; 111  |    unsigned int B9  :1;
                             6698 ; 112  |    unsigned int B10 :1;
                             6699 ; 113  |    unsigned int B11 :1;
                             6700 ; 114  |    unsigned int B12 :1;
                             6701 ; 115  |    unsigned int B13 :1;
                             6702 ; 116  |    unsigned int B14 :1;
                             6703 ; 117  |    unsigned int B15 :1;
                             6704 ; 118  |    unsigned int B16 :1;
                             6705 ; 119  |    unsigned int B17 :1;
                             6706 ; 120  |    unsigned int B18 :1;
                             6707 ; 121  |    unsigned int B19 :1;
                             6708 ; 122  |    unsigned int B20 :1;
                             6709 ; 123  |    unsigned int B21 :1;
                             6710 ; 124  |    unsigned int B22 :1;
                             6711 ; 125  |    unsigned int B23 :1;
                             6712 ; 126  |};
                             6713 ; 127  |
                             6714 ; 128  |union BitInt {
                             6715 ; 129  |        struct Bitfield B;
                             6716 ; 130  |        int        I;
                             6717 ; 131  |};
                             6718 ; 132  |
                             6719 ; 133  |#define MAX_MSG_LENGTH 10
                             6720 ; 134  |struct CMessage
                             6721 ; 135  |{
                             6722 ; 136  |        unsigned int m_uLength;
                             6723 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6724 ; 138  |};
                             6725 ; 139  |
                             6726 ; 140  |typedef struct {
                             6727 ; 141  |    WORD m_wLength;
                             6728 ; 142  |    WORD m_wMessage;
                             6729 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6730 ; 144  |} Message;
                             6731 ; 145  |
                             6732 ; 146  |struct MessageQueueDescriptor
                             6733 ; 147  |{
                             6734 ; 148  |        int *m_pBase;
                             6735 ; 149  |        int m_iModulo;
                             6736 ; 150  |        int m_iSize;
                             6737 ; 151  |        int *m_pHead;
                             6738 ; 152  |        int *m_pTail;
                             6739 ; 153  |};
                             6740 ; 154  |
                             6741 ; 155  |struct ModuleEntry
                             6742 ; 156  |{
                             6743 ; 157  |    int m_iSignaledEventMask;
                             6744 ; 158  |    int m_iWaitEventMask;
                             6745 ; 159  |    int m_iResourceOfCode;
                             6746 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6747 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             6748 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6749 ; 163  |    int m_uTimeOutHigh;
                             6750 ; 164  |    int m_uTimeOutLow;
                             6751 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6752 ; 166  |};
                             6753 ; 167  |
                             6754 ; 168  |union WaitMask{
                             6755 ; 169  |    struct B{
                             6756 ; 170  |        unsigned int m_bNone     :1;
                             6757 ; 171  |        unsigned int m_bMessage  :1;
                             6758 ; 172  |        unsigned int m_bTimer    :1;
                             6759 ; 173  |        unsigned int m_bButton   :1;
                             6760 ; 174  |    } B;
                             6761 ; 175  |    int I;
                             6762 ; 176  |} ;
                             6763 ; 177  |
                             6764 ; 178  |
                             6765 ; 179  |struct Button {
                             6766 ; 180  |        WORD wButtonEvent;
                             6767 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6768 ; 182  |};
                             6769 ; 183  |
                             6770 ; 184  |struct Message {
                             6771 ; 185  |        WORD wMsgLength;
                             6772 ; 186  |        WORD wMsgCommand;
                             6773 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6774 ; 188  |};
                             6775 ; 189  |
                             6776 ; 190  |union EventTypes {
                             6777 ; 191  |        struct CMessage msg;
                             6778 ; 192  |        struct Button Button ;
                             6779 ; 193  |        struct Message Message;
                             6780 ; 194  |};
                             6781 ; 195  |
                             6782 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6783 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6784 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6785 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6786 ; 200  |
                             6787 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6788 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6789 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6790 ; 204  |
                             6791 ; 205  |#if DEBUG
                             6792 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6793 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             6794 ; 208  |#else 
                             6795 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             6796 ; 210  |#define DebugBuildAssert(x)    
                             6797 ; 211  |#endif
                             6798 ; 212  |
                             6799 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6800 ; 214  |//  #pragma asm
                             6801 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6802 ; 216  |//  #pragma endasm
                             6803 ; 217  |
                             6804 ; 218  |
                             6805 ; 219  |#ifdef COLOR_262K
                             6806 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             6807 ; 221  |#elif defined(COLOR_65K)
                             6808 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             6809 ; 223  |#else
                             6810 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             6811 ; 225  |#endif
                             6812 ; 226  |    
                             6813 ; 227  |#endif // #ifndef _TYPES_H
                             6814 
                             6816 
                             6817 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6818 ; 7    |
                             6819 ; 8    |//   SYSTEM STMP Registers 
                             6820 ; 9    |//  Last Edited 6.26.2003 M. Henson
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6821 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6822 ; 11   |
                             6823 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             6824 ; 13   |
                             6825 ; 14   |
                             6826 ; 15   |
                             6827 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             6828 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             6829 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             6830 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             6831 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6832 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             6833 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             6834 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             6835 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             6836 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             6837 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             6838 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             6839 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             6840 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             6841 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             6842 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             6843 ; 32   |
                             6844 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             6845 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6846 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             6847 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             6848 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             6849 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             6850 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             6851 ; 40   |
                             6852 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BATT_CTRL_INPUT_OFFSET_BITPOS)        
                             6853 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BATT_CTRL_HALF_CMP_PWR_BITPOS)        
                             6854 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_CTRL_INPUT_DIV2_BITPOS) 
                             6855 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_BITPOS) 
                             6856 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS) 
                             6857 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CLK_DIV_BITPOS)        
                             6858 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_REF_VAL_BITPOS)        
                             6859 ; 48   |
                             6860 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             6861 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             6862 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             6863 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             6864 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             6865 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             6866 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             6867 ; 56   |
                             6868 ; 57   |typedef union               
                             6869 ; 58   |{
                             6870 ; 59   |    struct {
                             6871 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             6872 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             6873 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             6874 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             6875 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             6876 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             6877 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             6878 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             6879 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             6880 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             6881 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH;
                             6882 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH;
                             6883 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDTH;
                             6884 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_WIDTH;
                             6885 ; 74   |    } B;
                             6886 ; 75   |   unsigned int I;
                             6887 ; 76   |        unsigned int U;
                             6888 ; 77   |} lradc_ctrl_type;
                             6889 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Battery LRADC Control Register */
                             6890 ; 79   |
                             6891 ; 80   |
                             6892 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             6893 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             6894 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             6895 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             6896 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             6897 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             6898 ; 87   |
                             6899 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             6900 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             6901 ; 90   |
                             6902 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             6903 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             6904 ; 93   |
                             6905 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK)     
                             6906 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK)     
                             6907 ; 96   |
                             6908 ; 97   |
                             6909 ; 98   |typedef union               
                             6910 ; 99   |{
                             6911 ; 100  |    struct {
                             6912 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             6913 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             6914 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             6915 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             6916 ; 105  |    } B;
                             6917 ; 106  |    unsigned int I;
                             6918 ; 107  |} lradc_thrsh_type;
                             6919 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* Battery LRADC Threshold Register */
                             6920 ; 109  |
                             6921 ; 110  |
                             6922 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             6923 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             6924 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             6925 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             6926 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             6927 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             6928 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             6929 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             6930 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             6931 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             6932 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             6933 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             6934 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             6935 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             6936 ; 125  |
                             6937 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             6938 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             6939 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             6940 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             6941 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             6942 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             6943 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             6944 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             6945 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             6946 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             6947 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             6948 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             6949 ; 138  |
                             6950 ; 139  |
                             6951 ; 140  |
                             6952 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT1_BITPOS)
                             6953 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT0_BITPOS)
                             6954 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT1_BITPOS)
                             6955 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT0_BITPOS)
                             6956 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT1_BITPOS)
                             6957 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT0_BITPOS)
                             6958 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_RSVD0_BITPOS)
                             6959 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_RESULT_DATA_OUT_BITPOS)
                             6960 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_RSVD1_BITPOS)
                             6961 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT0_BITPOS)
                             6962 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT1_BITPOS)
                             6963 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_RSVD2_BITPOS)
                             6964 ; 153  |
                             6965 ; 154  |
                             6966 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             6967 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             6968 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             6969 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             6970 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             6971 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             6972 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             6973 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             6974 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             6975 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             6976 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             6977 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             6978 ; 167  |
                             6979 ; 168  |typedef union               
                             6980 ; 169  |{
                             6981 ; 170  |    struct {
                             6982 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             6983 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             6984 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             6985 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             6986 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             6987 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             6988 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             6989 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             6990 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             6991 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_IRQ_EVENT0_WIDTH;
                             6992 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_IRQ_EVENT1_WIDTH;                      
                             6993 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESULT_RSVD2_WIDTH;
                             6994 ; 183  |    } B;
                             6995 ; 184  |    unsigned int I;
                             6996 ; 185  |} lradc_result_type;
                             6997 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /* Battery LRADC Result Register */
                             6998 ; 187  |
                             6999 ; 188  |
                             7000 ; 189  |
                             7001 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             7002 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             7003 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             7004 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             7005 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7006 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             7007 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             7008 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             7009 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             7010 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             7011 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             7012 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             7013 ; 202  |
                             7014 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             7015 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7016 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             7017 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             7018 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             7019 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             7020 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             7021 ; 210  |
                             7022 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             7023 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             7024 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_DIV2_BITPOS) 
                             7025 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_CLEAR_BITPOS) 
                             7026 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_BITPOS) 
                             7027 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_CTRL_CLK_DIV_BITPOS)        
                             7028 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_CTRL_REF_VAL_BITPOS)        
                             7029 ; 218  |
                             7030 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)     
                             7031 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)     
                             7032 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             7033 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             7034 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             7035 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             7036 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             7037 ; 226  |
                             7038 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* LRADC1 Control Register */
                             7039 ; 228  |
                             7040 ; 229  |
                             7041 ; 230  |
                             7042 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             7043 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             7044 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7045 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             7046 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7047 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             7048 ; 237  |
                             7049 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7050 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7051 ; 240  |
                             7052 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             7053 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             7054 ; 243  |
                             7055 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK)     
                             7056 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK)     
                             7057 ; 246  |
                             7058 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /* LRADC1 Threshold Register */
                             7059 ; 248  |
                             7060 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             7061 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             7062 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             7063 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             7064 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             7065 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             7066 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             7067 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             7068 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             7069 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             7070 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             7071 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7072 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             7073 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             7074 ; 263  |
                             7075 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             7076 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             7077 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             7078 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             7079 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             7080 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             7081 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             7082 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             7083 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             7084 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             7085 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             7086 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             7087 ; 276  |
                             7088 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             7089 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             7090 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT1_BITPOS)
                             7091 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT0_BITPOS)
                             7092 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT1_BITPOS)
                             7093 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT0_BITPOS)
                             7094 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD0_BITPOS)
                             7095 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC1_RESULT_DATA_OUT_BITPOS)
                             7096 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD1_BITPOS)
                             7097 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             7098 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             7099 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD2_BITPOS)
                             7100 ; 289  |
                             7101 ; 290  |
                             7102 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             7103 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             7104 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             7105 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             7106 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             7107 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             7108 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             7109 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             7110 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             7111 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             7112 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             7113 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             7114 ; 303  |
                             7115 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))    /* LRADC1 Result Register */
                             7116 ; 305  |
                             7117 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             7118 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             7119 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             7120 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             7121 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7122 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             7123 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             7124 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             7125 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             7126 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             7127 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             7128 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             7129 ; 318  |
                             7130 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             7131 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7132 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             7133 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             7134 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             7135 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             7136 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             7137 ; 326  |
                             7138 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             7139 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             7140 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             7141 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             7142 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_PWD_BITPOS) 
                             7143 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             7144 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             7145 ; 334  |
                             7146 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK)     
                             7147 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK)     
                             7148 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK) 
                             7149 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             7150 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             7151 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)     
                             7152 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)     
                             7153 ; 342  |
                             7154 ; 343  |
                             7155 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* LRADC2_CTRL Control Register */
                             7156 ; 345  |
                             7157 ; 346  |
                             7158 ; 347  |
                             7159 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             7160 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             7161 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7162 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             7163 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7164 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             7165 ; 354  |
                             7166 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7167 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7168 ; 357  |
                             7169 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             7170 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             7171 ; 360  |
                             7172 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK)     
                             7173 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK)     
                             7174 ; 363  |
                             7175 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /* LRADC2 Threshold Register */
                             7176 ; 365  |
                             7177 ; 366  |
                             7178 ; 367  |
                             7179 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             7180 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             7181 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             7182 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             7183 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             7184 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             7185 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             7186 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             7187 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             7188 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             7189 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             7190 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             7191 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             7192 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             7193 ; 382  |
                             7194 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             7195 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             7196 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             7197 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             7198 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             7199 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             7200 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             7201 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             7202 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             7203 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             7204 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             7205 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             7206 ; 395  |
                             7207 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             7208 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             7209 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT1_BITPOS)
                             7210 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT0_BITPOS)
                             7211 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT1_BITPOS)
                             7212 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT0_BITPOS)
                             7213 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD0_BITPOS)
                             7214 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC2_RESULT_DATA_OUT_BITPOS)
                             7215 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD1_BITPOS)
                             7216 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             7217 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             7218 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD2_BITPOS)
                             7219 ; 408  |
                             7220 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             7221 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             7222 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             7223 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             7224 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             7225 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             7226 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             7227 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             7228 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             7229 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             7230 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             7231 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             7232 ; 421  |
                             7233 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))    /* LRADC2 Result Register */
                             7234 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7235 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7236 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7237 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7238 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7239 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7240 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7241 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7242 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             7243 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             7244 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             7245 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             7246 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             7247 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             7248 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             7249 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             7250 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK          
                             7251 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementation
                             7252 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             7253 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             7254 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             7255 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             7256 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             7257 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             7258 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             7259 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             7260 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             7261 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             7262 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             7263 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             7264 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             7265 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             7266 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             7267 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             7268 ; 457  |
                             7269 ; 458  |//Needed by button.asm
                             7270 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             7271 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             7272 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             7273 ; 462  |
                             7274 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7275 ; 464  |
                             7276 ; 465  |#endif
                             7277 ; 466  |
                             7278 ; 467  |
                             7279 
                             7281 
                             7282 ; 27   |#include "regspwm.h"
                             7283 
                             7285 
                             7286 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7287 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             7288 ; 3    |// Filename: regspwm.inc
                             7289 ; 4    |// Description: Register definitions for PWM interface
                             7290 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7291 ; 6    |// The following naming conventions are followed in this file.
                             7292 ; 7    |// All registers are named using the format...
                             7293 ; 8    |//     HW_<module>_<regname>
                             7294 ; 9    |// where <module> is the module name which can be any of the following...
                             7295 ; 10   |//     USB20
                             7296 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7297 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7298 ; 13   |// that module)
                             7299 ; 14   |// <regname> is the specific register within that module
                             7300 ; 15   |// We also define the following...
                             7301 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7302 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7303 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7304 ; 19   |// which does something else, and
                             7305 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7306 ; 21   |// which does something else.
                             7307 ; 22   |// Other rules
                             7308 ; 23   |//     All caps
                             7309 ; 24   |//     Numeric identifiers start at 0
                             7310 ; 25   |#if !(defined(regspwminc))
                             7311 ; 26   |#define regspwminc 1
                             7312 ; 27   |
                             7313 ; 28   |#include "types.h"
                             7314 
                             7316 
                             7317 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7318 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7319 ; 3    |//
                             7320 ; 4    |// Filename: types.h
                             7321 ; 5    |// Description: Standard data types
                             7322 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7323 ; 7    |
                             7324 ; 8    |#ifndef _TYPES_H
                             7325 ; 9    |#define _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7326 ; 10   |
                             7327 ; 11   |// TODO:  move this outta here!
                             7328 ; 12   |#if !defined(NOERROR)
                             7329 ; 13   |#define NOERROR 0
                             7330 ; 14   |#define SUCCESS 0
                             7331 ; 15   |#endif 
                             7332 ; 16   |#if !defined(SUCCESS)
                             7333 ; 17   |#define SUCCESS  0
                             7334 ; 18   |#endif
                             7335 ; 19   |#if !defined(ERROR)
                             7336 ; 20   |#define ERROR   -1
                             7337 ; 21   |#endif
                             7338 ; 22   |#if !defined(FALSE)
                             7339 ; 23   |#define FALSE 0
                             7340 ; 24   |#endif
                             7341 ; 25   |#if !defined(TRUE)
                             7342 ; 26   |#define TRUE  1
                             7343 ; 27   |#endif
                             7344 ; 28   |
                             7345 ; 29   |#if !defined(NULL)
                             7346 ; 30   |#define NULL 0
                             7347 ; 31   |#endif
                             7348 ; 32   |
                             7349 ; 33   |#define MAX_INT     0x7FFFFF
                             7350 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7351 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7352 ; 36   |#define MAX_ULONG   (-1) 
                             7353 ; 37   |
                             7354 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7355 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7356 ; 40   |
                             7357 ; 41   |
                             7358 ; 42   |#define BYTE    unsigned char       // btVarName
                             7359 ; 43   |#define CHAR    signed char         // cVarName
                             7360 ; 44   |#define USHORT  unsigned short      // usVarName
                             7361 ; 45   |#define SHORT   unsigned short      // sVarName
                             7362 ; 46   |#define WORD    unsigned int        // wVarName
                             7363 ; 47   |#define INT     signed int          // iVarName
                             7364 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7365 ; 49   |#define LONG    signed long         // lVarName
                             7366 ; 50   |#define BOOL    unsigned int        // bVarName
                             7367 ; 51   |#define FRACT   _fract              // frVarName
                             7368 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7369 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7370 ; 54   |#define FLOAT   float               // fVarName
                             7371 ; 55   |#define DBL     double              // dVarName
                             7372 ; 56   |#define ENUM    enum                // eVarName
                             7373 ; 57   |#define CMX     _complex            // cmxVarName
                             7374 ; 58   |typedef WORD UCS3;                   // 
                             7375 ; 59   |
                             7376 ; 60   |#define UINT16  unsigned short
                             7377 ; 61   |#define UINT8   unsigned char   
                             7378 ; 62   |#define UINT32  unsigned long
                             7379 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7380 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7381 ; 65   |#define WCHAR   UINT16
                             7382 ; 66   |
                             7383 ; 67   |//UINT128 is 16 bytes or 6 words
                             7384 ; 68   |typedef struct UINT128_3500 {   
                             7385 ; 69   |    int val[6];     
                             7386 ; 70   |} UINT128_3500;
                             7387 ; 71   |
                             7388 ; 72   |#define UINT128   UINT128_3500
                             7389 ; 73   |
                             7390 ; 74   |// Little endian word packed byte strings:   
                             7391 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7392 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7393 ; 77   |// Little endian word packed byte strings:   
                             7394 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7395 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7396 ; 80   |
                             7397 ; 81   |// Declare Memory Spaces To Use When Coding
                             7398 ; 82   |// A. Sector Buffers
                             7399 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7400 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7401 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7402 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7403 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7404 ; 88   |// B. Media DDI Memory
                             7405 ; 89   |#define MEDIA_DDI_MEM _Y
                             7406 ; 90   |
                             7407 ; 91   |
                             7408 ; 92   |
                             7409 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7410 ; 94   |// Examples of circular pointers:
                             7411 ; 95   |//    INT CIRC cpiVarName
                             7412 ; 96   |//    DWORD CIRC cpdwVarName
                             7413 ; 97   |
                             7414 ; 98   |#define RETCODE INT                 // rcVarName
                             7415 ; 99   |
                             7416 ; 100  |// generic bitfield structure
                             7417 ; 101  |struct Bitfield {
                             7418 ; 102  |    unsigned int B0  :1;
                             7419 ; 103  |    unsigned int B1  :1;
                             7420 ; 104  |    unsigned int B2  :1;
                             7421 ; 105  |    unsigned int B3  :1;
                             7422 ; 106  |    unsigned int B4  :1;
                             7423 ; 107  |    unsigned int B5  :1;
                             7424 ; 108  |    unsigned int B6  :1;
                             7425 ; 109  |    unsigned int B7  :1;
                             7426 ; 110  |    unsigned int B8  :1;
                             7427 ; 111  |    unsigned int B9  :1;
                             7428 ; 112  |    unsigned int B10 :1;
                             7429 ; 113  |    unsigned int B11 :1;
                             7430 ; 114  |    unsigned int B12 :1;
                             7431 ; 115  |    unsigned int B13 :1;
                             7432 ; 116  |    unsigned int B14 :1;
                             7433 ; 117  |    unsigned int B15 :1;
                             7434 ; 118  |    unsigned int B16 :1;
                             7435 ; 119  |    unsigned int B17 :1;
                             7436 ; 120  |    unsigned int B18 :1;
                             7437 ; 121  |    unsigned int B19 :1;
                             7438 ; 122  |    unsigned int B20 :1;
                             7439 ; 123  |    unsigned int B21 :1;
                             7440 ; 124  |    unsigned int B22 :1;
                             7441 ; 125  |    unsigned int B23 :1;
                             7442 ; 126  |};
                             7443 ; 127  |
                             7444 ; 128  |union BitInt {
                             7445 ; 129  |        struct Bitfield B;
                             7446 ; 130  |        int        I;
                             7447 ; 131  |};
                             7448 ; 132  |
                             7449 ; 133  |#define MAX_MSG_LENGTH 10
                             7450 ; 134  |struct CMessage
                             7451 ; 135  |{
                             7452 ; 136  |        unsigned int m_uLength;
                             7453 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7454 ; 138  |};
                             7455 ; 139  |
                             7456 ; 140  |typedef struct {
                             7457 ; 141  |    WORD m_wLength;
                             7458 ; 142  |    WORD m_wMessage;
                             7459 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7460 ; 144  |} Message;
                             7461 ; 145  |
                             7462 ; 146  |struct MessageQueueDescriptor
                             7463 ; 147  |{
                             7464 ; 148  |        int *m_pBase;
                             7465 ; 149  |        int m_iModulo;
                             7466 ; 150  |        int m_iSize;
                             7467 ; 151  |        int *m_pHead;
                             7468 ; 152  |        int *m_pTail;
                             7469 ; 153  |};
                             7470 ; 154  |
                             7471 ; 155  |struct ModuleEntry
                             7472 ; 156  |{
                             7473 ; 157  |    int m_iSignaledEventMask;
                             7474 ; 158  |    int m_iWaitEventMask;
                             7475 ; 159  |    int m_iResourceOfCode;
                             7476 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7477 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             7478 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7479 ; 163  |    int m_uTimeOutHigh;
                             7480 ; 164  |    int m_uTimeOutLow;
                             7481 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7482 ; 166  |};
                             7483 ; 167  |
                             7484 ; 168  |union WaitMask{
                             7485 ; 169  |    struct B{
                             7486 ; 170  |        unsigned int m_bNone     :1;
                             7487 ; 171  |        unsigned int m_bMessage  :1;
                             7488 ; 172  |        unsigned int m_bTimer    :1;
                             7489 ; 173  |        unsigned int m_bButton   :1;
                             7490 ; 174  |    } B;
                             7491 ; 175  |    int I;
                             7492 ; 176  |} ;
                             7493 ; 177  |
                             7494 ; 178  |
                             7495 ; 179  |struct Button {
                             7496 ; 180  |        WORD wButtonEvent;
                             7497 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7498 ; 182  |};
                             7499 ; 183  |
                             7500 ; 184  |struct Message {
                             7501 ; 185  |        WORD wMsgLength;
                             7502 ; 186  |        WORD wMsgCommand;
                             7503 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7504 ; 188  |};
                             7505 ; 189  |
                             7506 ; 190  |union EventTypes {
                             7507 ; 191  |        struct CMessage msg;
                             7508 ; 192  |        struct Button Button ;
                             7509 ; 193  |        struct Message Message;
                             7510 ; 194  |};
                             7511 ; 195  |
                             7512 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7513 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7514 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7515 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7516 ; 200  |
                             7517 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7518 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7519 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7520 ; 204  |
                             7521 ; 205  |#if DEBUG
                             7522 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7523 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7524 ; 208  |#else 
                             7525 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             7526 ; 210  |#define DebugBuildAssert(x)    
                             7527 ; 211  |#endif
                             7528 ; 212  |
                             7529 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7530 ; 214  |//  #pragma asm
                             7531 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7532 ; 216  |//  #pragma endasm
                             7533 ; 217  |
                             7534 ; 218  |
                             7535 ; 219  |#ifdef COLOR_262K
                             7536 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             7537 ; 221  |#elif defined(COLOR_65K)
                             7538 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             7539 ; 223  |#else
                             7540 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             7541 ; 225  |#endif
                             7542 ; 226  |    
                             7543 ; 227  |#endif // #ifndef _TYPES_H
                             7544 
                             7546 
                             7547 ; 29   |
                             7548 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7549 ; 31   |//   Pulse Width Modulator STMP Registers 
                             7550 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7551 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                             7552 ; 34   |
                             7553 ; 35   |
                             7554 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             7555 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                             7556 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                             7557 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                             7558 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                             7559 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                             7560 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                             7561 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                             7562 ; 44   |
                             7563 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                             7564 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                             7565 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                             7566 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                             7567 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                             7568 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
                             7569 ; 51   |
                             7570 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_BITPOS)
                             7571 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_BITPOS)
                             7572 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_BITPOS)
                             7573 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_BITPOS)
                             7574 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                             7575 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_BITPOS)
                             7576 ; 58   |
                             7577 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7578 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                             7579 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                             7580 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                             7581 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                             7582 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                             7583 ; 65   |
                             7584 ; 66   |typedef union               
                             7585 ; 67   |{
                             7586 ; 68   |    struct {
                             7587 ; 69   |        int PWM0_EN                    :1;
                             7588 ; 70   |        int PWM1_EN                    :1;
                             7589 ; 71   |        int PWM2_EN                    :1;
                             7590 ; 72   |        int PWM3_EN                    :1;
                             7591 ; 73   |        int RSVD0                      :4;
                             7592 ; 74   |        int CDIV                       :2;
                             7593 ; 75   |        int RSVD1                      :13;
                             7594 ; 76   |        int MSTR_EN                    :1;
                             7595 ; 77   |    } B;
                             7596 ; 78   |    int I;
                             7597 ; 79   |} pwmcsr_type;
                             7598 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control Status Register */
                             7599 ; 81   |
                             7600 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                             7601 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                             7602 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                             7603 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                             7604 ; 86   |
                             7605 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                             7606 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                             7607 ; 89   |
                             7608 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTIVE_BITPOS)
                             7609 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_INACTIVE_BITPOS)
                             7610 ; 92   |
                             7611 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                             7612 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                             7613 ; 95   |
                             7614 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                             7615 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                             7616 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                             7617 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                             7618 ; 100  |
                             7619 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                             7620 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                             7621 ; 103  |
                             7622 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTIVE_BITPOS)
                             7623 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_INACTIVE_BITPOS)
                             7624 ; 106  |
                             7625 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
                             7626 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                             7627 ; 109  |
                             7628 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                             7629 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                             7630 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                             7631 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                             7632 ; 114  |
                             7633 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                             7634 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                             7635 ; 117  |
                             7636 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTIVE_BITPOS)
                             7637 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_INACTIVE_BITPOS)
                             7638 ; 120  |
                             7639 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                             7640 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                             7641 ; 123  |
                             7642 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             7643 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                             7644 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                             7645 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                             7646 ; 128  |
                             7647 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                             7648 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                             7649 ; 131  |
                             7650 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTIVE_BITPOS)
                             7651 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_INACTIVE_BITPOS)
                             7652 ; 134  |
                             7653 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                             7654 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                             7655 ; 137  |
                             7656 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             7657 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                             7658 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                             7659 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                             7660 ; 142  |
                             7661 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                             7662 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                             7663 ; 145  |
                             7664 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTIVE_BITPOS)
                             7665 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_INACTIVE_BITPOS)
                             7666 ; 148  |
                             7667 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                             7668 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                             7669 ; 151  |
                             7670 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             7671 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                             7672 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                             7673 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                             7674 ; 156  |
                             7675 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                             7676 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                             7677 ; 159  |
                             7678 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTIVE_BITPOS)
                             7679 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_INACTIVE_BITPOS)
                             7680 ; 162  |
                             7681 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                             7682 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                             7683 ; 165  |
                             7684 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             7685 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                             7686 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
                             7687 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                             7688 ; 170  |
                             7689 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                             7690 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                             7691 ; 173  |
                             7692 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTIVE_BITPOS)
                             7693 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_INACTIVE_BITPOS)
                             7694 ; 176  |
                             7695 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                             7696 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                             7697 ; 179  |
                             7698 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             7699 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                             7700 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                             7701 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                             7702 ; 184  |
                             7703 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                             7704 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                             7705 ; 187  |
                             7706 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTIVE_BITPOS)
                             7707 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_INACTIVE_BITPOS)
                             7708 ; 190  |
                             7709 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                             7710 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                             7711 ; 193  |
                             7712 ; 194  |typedef union               
                             7713 ; 195  |{
                             7714 ; 196  |    struct {
                             7715 ; 197  |       int ACTIVE                    :12;
                             7716 ; 198  |       int INACTIVE                  :12;
                             7717 ; 199  |    } B;
                             7718 ; 200  |    int I;
                             7719 ; 201  |} pwmchan_type;
                             7720 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Channel 0 A Register */
                             7721 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Channel 0 B Register */
                             7722 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Channel 1 A Register */
                             7723 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Channel 1 B Register */
                             7724 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Channel 2 A Register */
                             7725 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Channel 2 B Register */
                             7726 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Channel 3 A Register */
                             7727 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Channel 3 B Register */
                             7728 ; 210  |
                             7729 ; 211  |#endif
                             7730 ; 212  |
                             7731 ; 213  |
                             7732 ; 214  |
                             7733 ; 215  |
                             7734 
                             7736 
                             7737 ; 28   |#include "regsrevision.h"
                             7738 
                             7740 
                             7741 ; 1    |#if !(defined(__HW_REVR))
                             7742 ; 2    |#define __HW_REVR 1
                             7743 ; 3    |
                             7744 ; 4    |
                             7745 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             7746 ; 6    |
                             7747 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             7748 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             7749 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             7750 ; 10   |
                             7751 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                             7752 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             7753 ; 13   |
                             7754 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS)
                             7755 ; 15   |
                             7756 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                             7757 ; 17   |
                             7758 ; 18   |
                             7759 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             7760 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             7761 ; 21   |//  June15 2004: C struct updated to be correct: 
                             7762 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits.
                             7763 ; 23   |typedef union               
                             7764 ; 24   |{
                             7765 ; 25   |    struct {
                             7766 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             7767 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapping
                             7768 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             7769 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             7770 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                             7771 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             7772 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                             7773 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             7774 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                             7775 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                             7776 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                             7777 ; 37   |        unsigned RMJ    :16;    //Major Revision
                             7778 ; 38   |    } B;
                             7779 ; 39   |
                             7780 ; 40   |    int I;
                             7781 ; 41   |
                             7782 ; 42   |} revr_type;
                             7783 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                             7784 ; 44   |
                             7785 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                             7786 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                             7787 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                             7788 ; 48   |
                             7789 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                             7790 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE_B0_BITPOS)
                             7791 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                             7792 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                             7793 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                             7794 ; 54   |
                             7795 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                             7796 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                             7797 ; 57   |
                             7798 ; 58   |#endif //!@def(__HW_REVR)
                             7799 ; 59   |
                             7800 
                             7802 
                             7803 ; 29   |#include "regsrtc.h"
                             7804 
                             7806 
                             7807 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7808 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7809 ; 3    |// Filename: regsrtc.inc
                             7810 ; 4    |// Description: Register definitions for RTC interface
                             7811 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7812 ; 6    |// The following naming conventions are followed in this file.
                             7813 ; 7    |// All registers are named using the format...
                             7814 ; 8    |//     HW_<module>_<regname>
                             7815 ; 9    |// where <module> is the module name which can be any of the following...
                             7816 ; 10   |//     USB20
                             7817 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7818 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7819 ; 13   |// that module)
                             7820 ; 14   |// <regname> is the specific register within that module
                             7821 ; 15   |// We also define the following...
                             7822 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7823 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7824 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7825 ; 19   |// which does something else, and
                             7826 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7827 ; 21   |// which does something else.
                             7828 ; 22   |// Other rules
                             7829 ; 23   |//     All caps
                             7830 ; 24   |//     Numeric identifiers start at 0
                             7831 ; 25   |#if !(defined(regsrtcinc))
                             7832 ; 26   |#define regsrtcinc 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7833 ; 27   |
                             7834 ; 28   |#include "types.h"
                             7835 
                             7837 
                             7838 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7839 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7840 ; 3    |//
                             7841 ; 4    |// Filename: types.h
                             7842 ; 5    |// Description: Standard data types
                             7843 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7844 ; 7    |
                             7845 ; 8    |#ifndef _TYPES_H
                             7846 ; 9    |#define _TYPES_H
                             7847 ; 10   |
                             7848 ; 11   |// TODO:  move this outta here!
                             7849 ; 12   |#if !defined(NOERROR)
                             7850 ; 13   |#define NOERROR 0
                             7851 ; 14   |#define SUCCESS 0
                             7852 ; 15   |#endif 
                             7853 ; 16   |#if !defined(SUCCESS)
                             7854 ; 17   |#define SUCCESS  0
                             7855 ; 18   |#endif
                             7856 ; 19   |#if !defined(ERROR)
                             7857 ; 20   |#define ERROR   -1
                             7858 ; 21   |#endif
                             7859 ; 22   |#if !defined(FALSE)
                             7860 ; 23   |#define FALSE 0
                             7861 ; 24   |#endif
                             7862 ; 25   |#if !defined(TRUE)
                             7863 ; 26   |#define TRUE  1
                             7864 ; 27   |#endif
                             7865 ; 28   |
                             7866 ; 29   |#if !defined(NULL)
                             7867 ; 30   |#define NULL 0
                             7868 ; 31   |#endif
                             7869 ; 32   |
                             7870 ; 33   |#define MAX_INT     0x7FFFFF
                             7871 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7872 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7873 ; 36   |#define MAX_ULONG   (-1) 
                             7874 ; 37   |
                             7875 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7876 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7877 ; 40   |
                             7878 ; 41   |
                             7879 ; 42   |#define BYTE    unsigned char       // btVarName
                             7880 ; 43   |#define CHAR    signed char         // cVarName
                             7881 ; 44   |#define USHORT  unsigned short      // usVarName
                             7882 ; 45   |#define SHORT   unsigned short      // sVarName
                             7883 ; 46   |#define WORD    unsigned int        // wVarName
                             7884 ; 47   |#define INT     signed int          // iVarName
                             7885 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7886 ; 49   |#define LONG    signed long         // lVarName
                             7887 ; 50   |#define BOOL    unsigned int        // bVarName
                             7888 ; 51   |#define FRACT   _fract              // frVarName
                             7889 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7890 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7891 ; 54   |#define FLOAT   float               // fVarName
                             7892 ; 55   |#define DBL     double              // dVarName
                             7893 ; 56   |#define ENUM    enum                // eVarName
                             7894 ; 57   |#define CMX     _complex            // cmxVarName
                             7895 ; 58   |typedef WORD UCS3;                   // 
                             7896 ; 59   |
                             7897 ; 60   |#define UINT16  unsigned short
                             7898 ; 61   |#define UINT8   unsigned char   
                             7899 ; 62   |#define UINT32  unsigned long
                             7900 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7901 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7902 ; 65   |#define WCHAR   UINT16
                             7903 ; 66   |
                             7904 ; 67   |//UINT128 is 16 bytes or 6 words
                             7905 ; 68   |typedef struct UINT128_3500 {   
                             7906 ; 69   |    int val[6];     
                             7907 ; 70   |} UINT128_3500;
                             7908 ; 71   |
                             7909 ; 72   |#define UINT128   UINT128_3500
                             7910 ; 73   |
                             7911 ; 74   |// Little endian word packed byte strings:   
                             7912 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7913 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7914 ; 77   |// Little endian word packed byte strings:   
                             7915 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7916 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7917 ; 80   |
                             7918 ; 81   |// Declare Memory Spaces To Use When Coding
                             7919 ; 82   |// A. Sector Buffers
                             7920 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7921 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7922 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7923 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7924 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7925 ; 88   |// B. Media DDI Memory
                             7926 ; 89   |#define MEDIA_DDI_MEM _Y
                             7927 ; 90   |
                             7928 ; 91   |
                             7929 ; 92   |
                             7930 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7931 ; 94   |// Examples of circular pointers:
                             7932 ; 95   |//    INT CIRC cpiVarName
                             7933 ; 96   |//    DWORD CIRC cpdwVarName
                             7934 ; 97   |
                             7935 ; 98   |#define RETCODE INT                 // rcVarName
                             7936 ; 99   |
                             7937 ; 100  |// generic bitfield structure
                             7938 ; 101  |struct Bitfield {
                             7939 ; 102  |    unsigned int B0  :1;
                             7940 ; 103  |    unsigned int B1  :1;
                             7941 ; 104  |    unsigned int B2  :1;
                             7942 ; 105  |    unsigned int B3  :1;
                             7943 ; 106  |    unsigned int B4  :1;
                             7944 ; 107  |    unsigned int B5  :1;
                             7945 ; 108  |    unsigned int B6  :1;
                             7946 ; 109  |    unsigned int B7  :1;
                             7947 ; 110  |    unsigned int B8  :1;
                             7948 ; 111  |    unsigned int B9  :1;
                             7949 ; 112  |    unsigned int B10 :1;
                             7950 ; 113  |    unsigned int B11 :1;
                             7951 ; 114  |    unsigned int B12 :1;
                             7952 ; 115  |    unsigned int B13 :1;
                             7953 ; 116  |    unsigned int B14 :1;
                             7954 ; 117  |    unsigned int B15 :1;
                             7955 ; 118  |    unsigned int B16 :1;
                             7956 ; 119  |    unsigned int B17 :1;
                             7957 ; 120  |    unsigned int B18 :1;
                             7958 ; 121  |    unsigned int B19 :1;
                             7959 ; 122  |    unsigned int B20 :1;
                             7960 ; 123  |    unsigned int B21 :1;
                             7961 ; 124  |    unsigned int B22 :1;
                             7962 ; 125  |    unsigned int B23 :1;
                             7963 ; 126  |};
                             7964 ; 127  |
                             7965 ; 128  |union BitInt {
                             7966 ; 129  |        struct Bitfield B;
                             7967 ; 130  |        int        I;
                             7968 ; 131  |};
                             7969 ; 132  |
                             7970 ; 133  |#define MAX_MSG_LENGTH 10
                             7971 ; 134  |struct CMessage
                             7972 ; 135  |{
                             7973 ; 136  |        unsigned int m_uLength;
                             7974 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7975 ; 138  |};
                             7976 ; 139  |
                             7977 ; 140  |typedef struct {
                             7978 ; 141  |    WORD m_wLength;
                             7979 ; 142  |    WORD m_wMessage;
                             7980 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7981 ; 144  |} Message;
                             7982 ; 145  |
                             7983 ; 146  |struct MessageQueueDescriptor
                             7984 ; 147  |{
                             7985 ; 148  |        int *m_pBase;
                             7986 ; 149  |        int m_iModulo;
                             7987 ; 150  |        int m_iSize;
                             7988 ; 151  |        int *m_pHead;
                             7989 ; 152  |        int *m_pTail;
                             7990 ; 153  |};
                             7991 ; 154  |
                             7992 ; 155  |struct ModuleEntry
                             7993 ; 156  |{
                             7994 ; 157  |    int m_iSignaledEventMask;
                             7995 ; 158  |    int m_iWaitEventMask;
                             7996 ; 159  |    int m_iResourceOfCode;
                             7997 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7998 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             7999 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8000 ; 163  |    int m_uTimeOutHigh;
                             8001 ; 164  |    int m_uTimeOutLow;
                             8002 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8003 ; 166  |};
                             8004 ; 167  |
                             8005 ; 168  |union WaitMask{
                             8006 ; 169  |    struct B{
                             8007 ; 170  |        unsigned int m_bNone     :1;
                             8008 ; 171  |        unsigned int m_bMessage  :1;
                             8009 ; 172  |        unsigned int m_bTimer    :1;
                             8010 ; 173  |        unsigned int m_bButton   :1;
                             8011 ; 174  |    } B;
                             8012 ; 175  |    int I;
                             8013 ; 176  |} ;
                             8014 ; 177  |
                             8015 ; 178  |
                             8016 ; 179  |struct Button {
                             8017 ; 180  |        WORD wButtonEvent;
                             8018 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8019 ; 182  |};
                             8020 ; 183  |
                             8021 ; 184  |struct Message {
                             8022 ; 185  |        WORD wMsgLength;
                             8023 ; 186  |        WORD wMsgCommand;
                             8024 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8025 ; 188  |};
                             8026 ; 189  |
                             8027 ; 190  |union EventTypes {
                             8028 ; 191  |        struct CMessage msg;
                             8029 ; 192  |        struct Button Button ;
                             8030 ; 193  |        struct Message Message;
                             8031 ; 194  |};
                             8032 ; 195  |
                             8033 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8034 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8035 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8036 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8037 ; 200  |
                             8038 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8039 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8040 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8041 ; 204  |
                             8042 ; 205  |#if DEBUG
                             8043 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8044 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8045 ; 208  |#else 
                             8046 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             8047 ; 210  |#define DebugBuildAssert(x)    
                             8048 ; 211  |#endif
                             8049 ; 212  |
                             8050 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8051 ; 214  |//  #pragma asm
                             8052 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8053 ; 216  |//  #pragma endasm
                             8054 ; 217  |
                             8055 ; 218  |
                             8056 ; 219  |#ifdef COLOR_262K
                             8057 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             8058 ; 221  |#elif defined(COLOR_65K)
                             8059 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             8060 ; 223  |#else
                             8061 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             8062 ; 225  |#endif
                             8063 ; 226  |    
                             8064 ; 227  |#endif // #ifndef _TYPES_H
                             8065 
                             8067 
                             8068 ; 29   |
                             8069 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8070 ; 31   |
                             8071 ; 32   |//   RTC STMP Registers 
                             8072 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             8073 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8074 ; 35   |
                             8075 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             8076 ; 37   |
                             8077 ; 38   |
                             8078 ; 39   |
                             8079 ; 40   |
                             8080 ; 41   |
                             8081 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             8082 ; 43   |
                             8083 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             8084 ; 45   |
                             8085 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8086 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             8087 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             8088 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             8089 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             8090 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             8091 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             8092 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             8093 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             8094 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             8095 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             8096 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             8097 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             8098 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             8099 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             8100 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                                           
                             8101 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             8102 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             8103 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             8104 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             8105 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             8106 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             8107 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             8108 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             8109 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             8110 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             8111 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             8112 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             8113 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             8114 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             8115 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             8116 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             8117 ; 78   |
                             8118 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMINT_BITPOS) 
                             8119 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_ALARMINTEN_BITPOS) 
                             8120 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WATCHDOGEN_BITPOS) 
                             8121 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS) 
                             8122 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STALEREGS_BITPOS) 
                             8123 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS) 
                             8124 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_BITPOS) 
                             8125 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             8126 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             8127 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             8128 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             8129 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             8130 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS) 
                             8131 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS) 
                             8132 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS) 
                             8133 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BITPOS) 
                             8134 ; 95   |
                             8135 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             8136 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             8137 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             8138 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             8139 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             8140 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             8141 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             8142 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             8143 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             8144 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                             8145 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             8146 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             8147 ; 108  |
                             8148 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             8149 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             8150 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             8151 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             8152 ; 113  |
                             8153 ; 114  |
                             8154 ; 115  |typedef union               
                             8155 ; 116  |{
                             8156 ; 117  |    struct {
                             8157 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             8158 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             8159 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             8160 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             8161 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             8162 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             8163 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             8164 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             8165 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             8166 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             8167 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             8168 ; 129  |    } B;
                             8169 ; 130  |    int I;
                             8170 ; 131  |    unsigned int U;
                             8171 ; 132  |} rtc_csr_type;
                             8172 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Control / Status Register */
                             8173 ; 134  |
                             8174 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             8175 ; 136  |
                             8176 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             8177 ; 138  |
                             8178 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             8179 ; 140  |
                             8180 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             8181 ; 142  |
                             8182 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<<HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             8183 ; 144  |
                             8184 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                             8185 ; 146  |
                             8186 ; 147  |typedef union               
                             8187 ; 148  |{
                             8188 ; 149  |    struct {
                             8189 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             8190 ; 151  |    } B;
                             8191 ; 152  |    int I;
                             8192 ; 153  |    unsigned int U;
                             8193 ; 154  |} rtc_mseconds0_type;
                             8194 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    /* RTC MSECONDS Lower Word Register */
                             8195 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             8196 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             8197 ; 158  |
                             8198 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             8199 ; 160  |
                             8200 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             8201 ; 162  |
                             8202 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             8203 ; 164  |
                             8204 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1)<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             8205 ; 166  |
                             8206 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK)
                             8207 ; 168  |
                             8208 ; 169  |typedef union               
                             8209 ; 170  |{
                             8210 ; 171  |    struct {
                             8211 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             8212 ; 173  |    } B;
                             8213 ; 174  |    int I;
                             8214 ; 175  |    unsigned int U;
                             8215 ; 176  |} rtc_mseconds1_type;
                             8216 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    /* RTC MSECONDS Upper Word Register */
                             8217 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             8218 ; 179  |
                             8219 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             8220 ; 181  |#define HW_RTC_UP_OFFSET 2
                             8221 ; 182  |
                             8222 ; 183  |
                             8223 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             8224 ; 185  |
                             8225 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             8226 ; 187  |
                             8227 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             8228 ; 189  |
                             8229 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             8230 ; 191  |
                             8231 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             8232 ; 193  |
                             8233 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             8234 ; 195  |
                             8235 ; 196  |typedef union               
                             8236 ; 197  |{
                             8237 ; 198  |    struct {
                             8238 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             8239 ; 200  |    } B;
                             8240 ; 201  |    int I;
                             8241 ; 202  |    unsigned int U;
                             8242 ; 203  |} rtc_watchdog_type;
                             8243 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* RTC Watchdog Timeout Register */
                             8244 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             8245 ; 206  |
                             8246 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             8247 ; 208  |
                             8248 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             8249 ; 210  |
                             8250 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             8251 ; 212  |
                             8252 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALARM0_ALARMLOW_BITPOS) 
                             8253 ; 214  |
                             8254 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             8255 ; 216  |
                             8256 ; 217  |typedef union               
                             8257 ; 218  |{
                             8258 ; 219  |    struct {
                             8259 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             8260 ; 221  |    } B;
                             8261 ; 222  |    int I;
                             8262 ; 223  |    unsigned int U;
                             8263 ; 224  |} rtc_alarm0_type;
                             8264 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC ALARM Lower Word Register */
                             8265 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             8266 ; 227  |
                             8267 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             8268 ; 229  |
                             8269 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             8270 ; 231  |
                             8271 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             8272 ; 233  |
                             8273 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_ALARM1_ALARMHIGH_BITPOS) 
                             8274 ; 235  |
                             8275 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             8276 ; 237  |
                             8277 ; 238  |typedef union               
                             8278 ; 239  |{
                             8279 ; 240  |    struct {
                             8280 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             8281 ; 242  |    } B;
                             8282 ; 243  |    int I;
                             8283 ; 244  |    unsigned int U;
                             8284 ; 245  |} rtc_alarm1_type;
                             8285 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC ALARM Upper Word Register */
                             8286 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             8287 ; 248  |
                             8288 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             8289 ; 250  |
                             8290 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             8291 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             8292 ; 253  |
                             8293 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             8294 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             8295 ; 256  |
                             8296 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             8297 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS) 
                             8298 ; 259  |
                             8299 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             8300 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             8301 ; 262  |
                             8302 ; 263  |typedef union               
                             8303 ; 264  |{
                             8304 ; 265  |    struct {
                             8305 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             8306 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             8307 ; 268  |    } B;
                             8308 ; 269  |    int I;
                             8309 ; 270  |    unsigned int U;
                             8310 ; 271  |} rtc_xtaldivide_type;
                             8311 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* RTC Xtal-clock Pre-Divider Word Register */
                             8312 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             8313 ; 274  |
                             8314 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             8315 ; 276  |
                             8316 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             8317 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             8318 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             8319 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             8320 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             8321 ; 282  |
                             8322 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             8323 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             8324 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             8325 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             8326 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             8327 ; 288  |
                             8328 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             8329 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             8330 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             8331 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<<HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             8332 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT0_RSVD0_BITPOS) 
                             8333 ; 294  |
                             8334 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             8335 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK)
                             8336 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8337 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                             8338 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             8339 ; 300  |
                             8340 ; 301  |typedef union               
                             8341 ; 302  |{
                             8342 ; 303  |   struct {
                             8343 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             8344 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             8345 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             8346 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             8347 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             8348 ; 309  |   } B;
                             8349 ; 310  |    int I;
                             8350 ; 311  |    unsigned int U;
                             8351 ; 312  |} rtc_PERSISTENT0_type;
                             8352 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /* RTC PERSISTENT Register0 */
                             8353 ; 314  |
                             8354 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             8355 ; 316  |
                             8356 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             8357 ; 318  |
                             8358 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             8359 ; 320  |
                             8360 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             8361 ; 322  |
                             8362 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT1_RSVD0_BITPOS) 
                             8363 ; 324  |
                             8364 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             8365 ; 326  |
                             8366 ; 327  |
                             8367 ; 328  |typedef union               
                             8368 ; 329  |{
                             8369 ; 330  |    struct {
                             8370 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             8371 ; 332  |    } B;
                             8372 ; 333  |    int I;
                             8373 ; 334  |    unsigned int U;
                             8374 ; 335  |} rtc_PERSISTENT1_type;
                             8375 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /* RTC PERSISTENT Register1 */
                             8376 ; 337  |
                             8377 ; 338  |
                             8378 ; 339  |#endif
                             8379 ; 340  |
                             8380 ; 341  |
                             8381 ; 342  |
                             8382 ; 343  |
                             8383 ; 344  |
                             8384 ; 345  |
                             8385 ; 346  |
                             8386 ; 347  |
                             8387 ; 348  |
                             8388 ; 349  |
                             8389 ; 350  |
                             8390 ; 351  |
                             8391 ; 352  |
                             8392 ; 353  |
                             8393 
                             8395 
                             8396 ; 30   |#include "regsspare.h"
                             8397 
                             8399 
                             8400 ; 1    |#if !(defined(RESGSSPARE_INC))
                             8401 ; 2    |#define RESGSSPARE_INC 1
                             8402 ; 3    |
                             8403 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                             8404 ; 5    |
                             8405 ; 6    |
                             8406 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                             8407 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                             8408 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                             8409 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                             8410 ; 11   |
                             8411 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                             8412 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                             8413 ; 14   |
                             8414 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                             8415 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                             8416 ; 17   |
                             8417 ; 18   |
                             8418 ; 19   |
                             8419 ; 20   |typedef union               
                             8420 ; 21   |{
                             8421 ; 22   |    struct {
                             8422 ; 23   |        int      I2SS       :1;     
                             8423 ; 24   |        int      USBSELECT  :1;     
                             8424 ; 25   |        unsigned            :6;
                             8425 ; 26   |        int      USBPLUGIN  :1;     
                             8426 ; 27   |        int      PSWITCH    :1;     
                             8427 ; 28   |    } B;
                             8428 ; 29   |
                             8429 ; 30   |    int I;
                             8430 ; 31   |
                             8431 ; 32   |} spare_type;
                             8432 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                             8433 ; 34   |
                             8434 ; 35   |
                             8435 ; 36   |
                             8436 ; 37   |#endif
                             8437 
                             8439 
                             8440 ; 31   |#include "regsspi.h"
                             8441 
                             8443 
                             8444 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8445 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8446 ; 3    |//;; Filename    : regsspi.inc
                             8447 ; 4    |//;; Description : Register definitions for SPI interface
                             8448 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8449 ; 6    |
                             8450 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8451 ; 8    |// The following naming conventions are followed in this file.
                             8452 ; 9    |// All registers are named using the format...
                             8453 ; 10   |//     HW_<module>_<regname>
                             8454 ; 11   |// where <module> is the module name which can be any of the following...
                             8455 ; 12   |//     USB20
                             8456 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8457 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8458 ; 15   |// that module)
                             8459 ; 16   |// <regname> is the specific register within that module
                             8460 ; 17   |// We also define the following...
                             8461 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8462 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8463 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8464 ; 21   |// which does something else, and
                             8465 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8466 ; 23   |// which does something else.
                             8467 ; 24   |// Other rules
                             8468 ; 25   |//     All caps
                             8469 ; 26   |//     Numeric identifiers start at 0
                             8470 ; 27   |#if !(defined(regsspiinc))
                             8471 ; 28   |#define regsspiinc 1
                             8472 ; 29   |
                             8473 ; 30   |#include "types.h"
                             8474 
                             8476 
                             8477 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8478 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8479 ; 3    |//
                             8480 ; 4    |// Filename: types.h
                             8481 ; 5    |// Description: Standard data types
                             8482 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8483 ; 7    |
                             8484 ; 8    |#ifndef _TYPES_H
                             8485 ; 9    |#define _TYPES_H
                             8486 ; 10   |
                             8487 ; 11   |// TODO:  move this outta here!
                             8488 ; 12   |#if !defined(NOERROR)
                             8489 ; 13   |#define NOERROR 0
                             8490 ; 14   |#define SUCCESS 0
                             8491 ; 15   |#endif 
                             8492 ; 16   |#if !defined(SUCCESS)
                             8493 ; 17   |#define SUCCESS  0
                             8494 ; 18   |#endif
                             8495 ; 19   |#if !defined(ERROR)
                             8496 ; 20   |#define ERROR   -1
                             8497 ; 21   |#endif
                             8498 ; 22   |#if !defined(FALSE)
                             8499 ; 23   |#define FALSE 0
                             8500 ; 24   |#endif
                             8501 ; 25   |#if !defined(TRUE)
                             8502 ; 26   |#define TRUE  1
                             8503 ; 27   |#endif
                             8504 ; 28   |
                             8505 ; 29   |#if !defined(NULL)
                             8506 ; 30   |#define NULL 0
                             8507 ; 31   |#endif
                             8508 ; 32   |
                             8509 ; 33   |#define MAX_INT     0x7FFFFF
                             8510 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8511 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8512 ; 36   |#define MAX_ULONG   (-1) 
                             8513 ; 37   |
                             8514 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8515 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8516 ; 40   |
                             8517 ; 41   |
                             8518 ; 42   |#define BYTE    unsigned char       // btVarName
                             8519 ; 43   |#define CHAR    signed char         // cVarName
                             8520 ; 44   |#define USHORT  unsigned short      // usVarName
                             8521 ; 45   |#define SHORT   unsigned short      // sVarName
                             8522 ; 46   |#define WORD    unsigned int        // wVarName
                             8523 ; 47   |#define INT     signed int          // iVarName
                             8524 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8525 ; 49   |#define LONG    signed long         // lVarName
                             8526 ; 50   |#define BOOL    unsigned int        // bVarName
                             8527 ; 51   |#define FRACT   _fract              // frVarName
                             8528 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8529 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8530 ; 54   |#define FLOAT   float               // fVarName
                             8531 ; 55   |#define DBL     double              // dVarName
                             8532 ; 56   |#define ENUM    enum                // eVarName
                             8533 ; 57   |#define CMX     _complex            // cmxVarName
                             8534 ; 58   |typedef WORD UCS3;                   // 
                             8535 ; 59   |
                             8536 ; 60   |#define UINT16  unsigned short
                             8537 ; 61   |#define UINT8   unsigned char   
                             8538 ; 62   |#define UINT32  unsigned long
                             8539 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8540 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8541 ; 65   |#define WCHAR   UINT16
                             8542 ; 66   |
                             8543 ; 67   |//UINT128 is 16 bytes or 6 words
                             8544 ; 68   |typedef struct UINT128_3500 {   
                             8545 ; 69   |    int val[6];     
                             8546 ; 70   |} UINT128_3500;
                             8547 ; 71   |
                             8548 ; 72   |#define UINT128   UINT128_3500
                             8549 ; 73   |
                             8550 ; 74   |// Little endian word packed byte strings:   
                             8551 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8552 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8553 ; 77   |// Little endian word packed byte strings:   
                             8554 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8555 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8556 ; 80   |
                             8557 ; 81   |// Declare Memory Spaces To Use When Coding
                             8558 ; 82   |// A. Sector Buffers
                             8559 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8560 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8561 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8562 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8563 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8564 ; 88   |// B. Media DDI Memory
                             8565 ; 89   |#define MEDIA_DDI_MEM _Y
                             8566 ; 90   |
                             8567 ; 91   |
                             8568 ; 92   |
                             8569 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8570 ; 94   |// Examples of circular pointers:
                             8571 ; 95   |//    INT CIRC cpiVarName
                             8572 ; 96   |//    DWORD CIRC cpdwVarName
                             8573 ; 97   |
                             8574 ; 98   |#define RETCODE INT                 // rcVarName
                             8575 ; 99   |
                             8576 ; 100  |// generic bitfield structure
                             8577 ; 101  |struct Bitfield {
                             8578 ; 102  |    unsigned int B0  :1;
                             8579 ; 103  |    unsigned int B1  :1;
                             8580 ; 104  |    unsigned int B2  :1;
                             8581 ; 105  |    unsigned int B3  :1;
                             8582 ; 106  |    unsigned int B4  :1;
                             8583 ; 107  |    unsigned int B5  :1;
                             8584 ; 108  |    unsigned int B6  :1;
                             8585 ; 109  |    unsigned int B7  :1;
                             8586 ; 110  |    unsigned int B8  :1;
                             8587 ; 111  |    unsigned int B9  :1;
                             8588 ; 112  |    unsigned int B10 :1;
                             8589 ; 113  |    unsigned int B11 :1;
                             8590 ; 114  |    unsigned int B12 :1;
                             8591 ; 115  |    unsigned int B13 :1;
                             8592 ; 116  |    unsigned int B14 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8593 ; 117  |    unsigned int B15 :1;
                             8594 ; 118  |    unsigned int B16 :1;
                             8595 ; 119  |    unsigned int B17 :1;
                             8596 ; 120  |    unsigned int B18 :1;
                             8597 ; 121  |    unsigned int B19 :1;
                             8598 ; 122  |    unsigned int B20 :1;
                             8599 ; 123  |    unsigned int B21 :1;
                             8600 ; 124  |    unsigned int B22 :1;
                             8601 ; 125  |    unsigned int B23 :1;
                             8602 ; 126  |};
                             8603 ; 127  |
                             8604 ; 128  |union BitInt {
                             8605 ; 129  |        struct Bitfield B;
                             8606 ; 130  |        int        I;
                             8607 ; 131  |};
                             8608 ; 132  |
                             8609 ; 133  |#define MAX_MSG_LENGTH 10
                             8610 ; 134  |struct CMessage
                             8611 ; 135  |{
                             8612 ; 136  |        unsigned int m_uLength;
                             8613 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8614 ; 138  |};
                             8615 ; 139  |
                             8616 ; 140  |typedef struct {
                             8617 ; 141  |    WORD m_wLength;
                             8618 ; 142  |    WORD m_wMessage;
                             8619 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8620 ; 144  |} Message;
                             8621 ; 145  |
                             8622 ; 146  |struct MessageQueueDescriptor
                             8623 ; 147  |{
                             8624 ; 148  |        int *m_pBase;
                             8625 ; 149  |        int m_iModulo;
                             8626 ; 150  |        int m_iSize;
                             8627 ; 151  |        int *m_pHead;
                             8628 ; 152  |        int *m_pTail;
                             8629 ; 153  |};
                             8630 ; 154  |
                             8631 ; 155  |struct ModuleEntry
                             8632 ; 156  |{
                             8633 ; 157  |    int m_iSignaledEventMask;
                             8634 ; 158  |    int m_iWaitEventMask;
                             8635 ; 159  |    int m_iResourceOfCode;
                             8636 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8637 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             8638 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8639 ; 163  |    int m_uTimeOutHigh;
                             8640 ; 164  |    int m_uTimeOutLow;
                             8641 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8642 ; 166  |};
                             8643 ; 167  |
                             8644 ; 168  |union WaitMask{
                             8645 ; 169  |    struct B{
                             8646 ; 170  |        unsigned int m_bNone     :1;
                             8647 ; 171  |        unsigned int m_bMessage  :1;
                             8648 ; 172  |        unsigned int m_bTimer    :1;
                             8649 ; 173  |        unsigned int m_bButton   :1;
                             8650 ; 174  |    } B;
                             8651 ; 175  |    int I;
                             8652 ; 176  |} ;
                             8653 ; 177  |
                             8654 ; 178  |
                             8655 ; 179  |struct Button {
                             8656 ; 180  |        WORD wButtonEvent;
                             8657 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8658 ; 182  |};
                             8659 ; 183  |
                             8660 ; 184  |struct Message {
                             8661 ; 185  |        WORD wMsgLength;
                             8662 ; 186  |        WORD wMsgCommand;
                             8663 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8664 ; 188  |};
                             8665 ; 189  |
                             8666 ; 190  |union EventTypes {
                             8667 ; 191  |        struct CMessage msg;
                             8668 ; 192  |        struct Button Button ;
                             8669 ; 193  |        struct Message Message;
                             8670 ; 194  |};
                             8671 ; 195  |
                             8672 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8673 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8674 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8675 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8676 ; 200  |
                             8677 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8678 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8679 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8680 ; 204  |
                             8681 ; 205  |#if DEBUG
                             8682 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8683 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8684 ; 208  |#else 
                             8685 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             8686 ; 210  |#define DebugBuildAssert(x)    
                             8687 ; 211  |#endif
                             8688 ; 212  |
                             8689 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8690 ; 214  |//  #pragma asm
                             8691 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8692 ; 216  |//  #pragma endasm
                             8693 ; 217  |
                             8694 ; 218  |
                             8695 ; 219  |#ifdef COLOR_262K
                             8696 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             8697 ; 221  |#elif defined(COLOR_65K)
                             8698 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             8699 ; 223  |#else
                             8700 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             8701 ; 225  |#endif
                             8702 ; 226  |    
                             8703 ; 227  |#endif // #ifndef _TYPES_H
                             8704 
                             8706 
                             8707 ; 31   |
                             8708 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8709 ; 33   |
                             8710 ; 34   |//   SPI STMP3500 Registers 
                             8711 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                             8712 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8713 ; 37   |
                             8714 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                             8715 ; 39   |
                             8716 ; 40   |
                             8717 ; 41   |
                             8718 ; 42   |// /////////////////////////////////////////////
                             8719 ; 43   |// //  SPI Control/Status Register Bit Definitions
                             8720 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                             8721 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                             8722 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                             8723 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                             8724 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                             8725 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                             8726 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                             8727 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                             8728 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                             8729 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                             8730 ; 54   |
                             8731 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                             8732 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                             8733 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                             8734 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                             8735 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                             8736 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                             8737 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                             8738 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                             8739 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
                             8740 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                             8741 ; 65   |
                             8742 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                             8743 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                             8744 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                             8745 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                             8746 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                             8747 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                             8748 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                             8749 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                             8750 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                             8751 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                             8752 ; 76   |
                             8753 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                             8754 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                             8755 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                             8756 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                             8757 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                             8758 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                             8759 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                             8760 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                             8761 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                             8762 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                             8763 ; 87   |
                             8764 ; 88   |typedef union               
                             8765 ; 89   |{
                             8766 ; 90   |    struct {
                             8767 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                             8768 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                             8769 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                             8770 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                             8771 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                             8772 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                             8773 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                             8774 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                             8775 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                             8776 ; 100  |    } B;
                             8777 ; 101  |
                             8778 ; 102  |    int I;
                             8779 ; 103  |    unsigned int U;
                             8780 ; 104  |} spcsr_type;
                             8781 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / Status Register */
                             8782 ; 106  |
                             8783 ; 107  |// /////////////////////////////////////////////
                             8784 ; 108  |// //  SPI Data Register Bit Definitions
                             8785 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                             8786 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                             8787 ; 111  |
                             8788 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                             8789 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                             8790 ; 114  |
                             8791 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                             8792 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                             8793 ; 117  |
                             8794 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                             8795 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                             8796 ; 120  |
                             8797 ; 121  |typedef union               
                             8798 ; 122  |{
                             8799 ; 123  |    struct {
                             8800 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                             8801 ; 125  |    } B;
                             8802 ; 126  |
                             8803 ; 127  |    int I;
                             8804 ; 128  |    unsigned int U;
                             8805 ; 129  |} spdr_type;
                             8806 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Register */
                             8807 ; 131  |
                             8808 ; 132  |
                             8809 ; 133  |#endif
                             8810 ; 134  |
                             8811 ; 135  |
                             8812 
                             8814 
                             8815 ; 32   |#include "regsswizzle.h"
                             8816 
                             8818 
                             8819 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8820 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8821 ; 3    |//;; Filename    : regsswizzle.inc
                             8822 ; 4    |//;; Description : Register definitions for Swizzle interface
                             8823 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8824 ; 6    |
                             8825 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8826 ; 8    |// The following naming conventions are followed in this file.
                             8827 ; 9    |// All registers are named using the format...
                             8828 ; 10   |//     HW_<module>_<regname>
                             8829 ; 11   |// where <module> is the module name which can be any of the following...
                             8830 ; 12   |//     USB20
                             8831 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8832 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8833 ; 15   |// that module)
                             8834 ; 16   |// <regname> is the specific register within that module
                             8835 ; 17   |// We also define the following...
                             8836 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8837 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8838 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8839 ; 21   |// which does something else, and
                             8840 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8841 ; 23   |// which does something else.
                             8842 ; 24   |// Other rules
                             8843 ; 25   |//     All caps
                             8844 ; 26   |//     Numeric identifiers start at 0
                             8845 ; 27   |#if !(defined(regsswizzleinc))
                             8846 ; 28   |#define regsswizzleinc 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8847 ; 29   |
                             8848 ; 30   |#include "types.h"
                             8849 
                             8851 
                             8852 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8853 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8854 ; 3    |//
                             8855 ; 4    |// Filename: types.h
                             8856 ; 5    |// Description: Standard data types
                             8857 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8858 ; 7    |
                             8859 ; 8    |#ifndef _TYPES_H
                             8860 ; 9    |#define _TYPES_H
                             8861 ; 10   |
                             8862 ; 11   |// TODO:  move this outta here!
                             8863 ; 12   |#if !defined(NOERROR)
                             8864 ; 13   |#define NOERROR 0
                             8865 ; 14   |#define SUCCESS 0
                             8866 ; 15   |#endif 
                             8867 ; 16   |#if !defined(SUCCESS)
                             8868 ; 17   |#define SUCCESS  0
                             8869 ; 18   |#endif
                             8870 ; 19   |#if !defined(ERROR)
                             8871 ; 20   |#define ERROR   -1
                             8872 ; 21   |#endif
                             8873 ; 22   |#if !defined(FALSE)
                             8874 ; 23   |#define FALSE 0
                             8875 ; 24   |#endif
                             8876 ; 25   |#if !defined(TRUE)
                             8877 ; 26   |#define TRUE  1
                             8878 ; 27   |#endif
                             8879 ; 28   |
                             8880 ; 29   |#if !defined(NULL)
                             8881 ; 30   |#define NULL 0
                             8882 ; 31   |#endif
                             8883 ; 32   |
                             8884 ; 33   |#define MAX_INT     0x7FFFFF
                             8885 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8886 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8887 ; 36   |#define MAX_ULONG   (-1) 
                             8888 ; 37   |
                             8889 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8890 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8891 ; 40   |
                             8892 ; 41   |
                             8893 ; 42   |#define BYTE    unsigned char       // btVarName
                             8894 ; 43   |#define CHAR    signed char         // cVarName
                             8895 ; 44   |#define USHORT  unsigned short      // usVarName
                             8896 ; 45   |#define SHORT   unsigned short      // sVarName
                             8897 ; 46   |#define WORD    unsigned int        // wVarName
                             8898 ; 47   |#define INT     signed int          // iVarName
                             8899 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8900 ; 49   |#define LONG    signed long         // lVarName
                             8901 ; 50   |#define BOOL    unsigned int        // bVarName
                             8902 ; 51   |#define FRACT   _fract              // frVarName
                             8903 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8904 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8905 ; 54   |#define FLOAT   float               // fVarName
                             8906 ; 55   |#define DBL     double              // dVarName
                             8907 ; 56   |#define ENUM    enum                // eVarName
                             8908 ; 57   |#define CMX     _complex            // cmxVarName
                             8909 ; 58   |typedef WORD UCS3;                   // 
                             8910 ; 59   |
                             8911 ; 60   |#define UINT16  unsigned short
                             8912 ; 61   |#define UINT8   unsigned char   
                             8913 ; 62   |#define UINT32  unsigned long
                             8914 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8915 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8916 ; 65   |#define WCHAR   UINT16
                             8917 ; 66   |
                             8918 ; 67   |//UINT128 is 16 bytes or 6 words
                             8919 ; 68   |typedef struct UINT128_3500 {   
                             8920 ; 69   |    int val[6];     
                             8921 ; 70   |} UINT128_3500;
                             8922 ; 71   |
                             8923 ; 72   |#define UINT128   UINT128_3500
                             8924 ; 73   |
                             8925 ; 74   |// Little endian word packed byte strings:   
                             8926 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8927 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8928 ; 77   |// Little endian word packed byte strings:   
                             8929 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8930 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8931 ; 80   |
                             8932 ; 81   |// Declare Memory Spaces To Use When Coding
                             8933 ; 82   |// A. Sector Buffers
                             8934 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8935 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8936 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8937 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8938 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8939 ; 88   |// B. Media DDI Memory
                             8940 ; 89   |#define MEDIA_DDI_MEM _Y
                             8941 ; 90   |
                             8942 ; 91   |
                             8943 ; 92   |
                             8944 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8945 ; 94   |// Examples of circular pointers:
                             8946 ; 95   |//    INT CIRC cpiVarName
                             8947 ; 96   |//    DWORD CIRC cpdwVarName
                             8948 ; 97   |
                             8949 ; 98   |#define RETCODE INT                 // rcVarName
                             8950 ; 99   |
                             8951 ; 100  |// generic bitfield structure
                             8952 ; 101  |struct Bitfield {
                             8953 ; 102  |    unsigned int B0  :1;
                             8954 ; 103  |    unsigned int B1  :1;
                             8955 ; 104  |    unsigned int B2  :1;
                             8956 ; 105  |    unsigned int B3  :1;
                             8957 ; 106  |    unsigned int B4  :1;
                             8958 ; 107  |    unsigned int B5  :1;
                             8959 ; 108  |    unsigned int B6  :1;
                             8960 ; 109  |    unsigned int B7  :1;
                             8961 ; 110  |    unsigned int B8  :1;
                             8962 ; 111  |    unsigned int B9  :1;
                             8963 ; 112  |    unsigned int B10 :1;
                             8964 ; 113  |    unsigned int B11 :1;
                             8965 ; 114  |    unsigned int B12 :1;
                             8966 ; 115  |    unsigned int B13 :1;
                             8967 ; 116  |    unsigned int B14 :1;
                             8968 ; 117  |    unsigned int B15 :1;
                             8969 ; 118  |    unsigned int B16 :1;
                             8970 ; 119  |    unsigned int B17 :1;
                             8971 ; 120  |    unsigned int B18 :1;
                             8972 ; 121  |    unsigned int B19 :1;
                             8973 ; 122  |    unsigned int B20 :1;
                             8974 ; 123  |    unsigned int B21 :1;
                             8975 ; 124  |    unsigned int B22 :1;
                             8976 ; 125  |    unsigned int B23 :1;
                             8977 ; 126  |};
                             8978 ; 127  |
                             8979 ; 128  |union BitInt {
                             8980 ; 129  |        struct Bitfield B;
                             8981 ; 130  |        int        I;
                             8982 ; 131  |};
                             8983 ; 132  |
                             8984 ; 133  |#define MAX_MSG_LENGTH 10
                             8985 ; 134  |struct CMessage
                             8986 ; 135  |{
                             8987 ; 136  |        unsigned int m_uLength;
                             8988 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8989 ; 138  |};
                             8990 ; 139  |
                             8991 ; 140  |typedef struct {
                             8992 ; 141  |    WORD m_wLength;
                             8993 ; 142  |    WORD m_wMessage;
                             8994 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8995 ; 144  |} Message;
                             8996 ; 145  |
                             8997 ; 146  |struct MessageQueueDescriptor
                             8998 ; 147  |{
                             8999 ; 148  |        int *m_pBase;
                             9000 ; 149  |        int m_iModulo;
                             9001 ; 150  |        int m_iSize;
                             9002 ; 151  |        int *m_pHead;
                             9003 ; 152  |        int *m_pTail;
                             9004 ; 153  |};
                             9005 ; 154  |
                             9006 ; 155  |struct ModuleEntry
                             9007 ; 156  |{
                             9008 ; 157  |    int m_iSignaledEventMask;
                             9009 ; 158  |    int m_iWaitEventMask;
                             9010 ; 159  |    int m_iResourceOfCode;
                             9011 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9012 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             9013 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9014 ; 163  |    int m_uTimeOutHigh;
                             9015 ; 164  |    int m_uTimeOutLow;
                             9016 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9017 ; 166  |};
                             9018 ; 167  |
                             9019 ; 168  |union WaitMask{
                             9020 ; 169  |    struct B{
                             9021 ; 170  |        unsigned int m_bNone     :1;
                             9022 ; 171  |        unsigned int m_bMessage  :1;
                             9023 ; 172  |        unsigned int m_bTimer    :1;
                             9024 ; 173  |        unsigned int m_bButton   :1;
                             9025 ; 174  |    } B;
                             9026 ; 175  |    int I;
                             9027 ; 176  |} ;
                             9028 ; 177  |
                             9029 ; 178  |
                             9030 ; 179  |struct Button {
                             9031 ; 180  |        WORD wButtonEvent;
                             9032 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9033 ; 182  |};
                             9034 ; 183  |
                             9035 ; 184  |struct Message {
                             9036 ; 185  |        WORD wMsgLength;
                             9037 ; 186  |        WORD wMsgCommand;
                             9038 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9039 ; 188  |};
                             9040 ; 189  |
                             9041 ; 190  |union EventTypes {
                             9042 ; 191  |        struct CMessage msg;
                             9043 ; 192  |        struct Button Button ;
                             9044 ; 193  |        struct Message Message;
                             9045 ; 194  |};
                             9046 ; 195  |
                             9047 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9048 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9049 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9050 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9051 ; 200  |
                             9052 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9053 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9054 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9055 ; 204  |
                             9056 ; 205  |#if DEBUG
                             9057 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9058 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9059 ; 208  |#else 
                             9060 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             9061 ; 210  |#define DebugBuildAssert(x)    
                             9062 ; 211  |#endif
                             9063 ; 212  |
                             9064 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9065 ; 214  |//  #pragma asm
                             9066 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9067 ; 216  |//  #pragma endasm
                             9068 ; 217  |
                             9069 ; 218  |
                             9070 ; 219  |#ifdef COLOR_262K
                             9071 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             9072 ; 221  |#elif defined(COLOR_65K)
                             9073 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             9074 ; 223  |#else
                             9075 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             9076 ; 225  |#endif
                             9077 ; 226  |    
                             9078 ; 227  |#endif // #ifndef _TYPES_H
                             9079 
                             9081 
                             9082 ; 31   |
                             9083 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9084 ; 33   |
                             9085 ; 34   |//   SWIZZLE STMP3500 Registers 
                             9086 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                             9087 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9088 ; 37   |
                             9089 ; 38   |
                             9090 ; 39   |
                             9091 ; 40   |
                             9092 ; 41   |
                             9093 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                             9094 ; 43   |
                             9095 ; 44   |
                             9096 ; 45   |
                             9097 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                             9098 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                             9099 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9100 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                             9101 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                             9102 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                             9103 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                             9104 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                             9105 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                             9106 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                             9107 ; 56   |
                             9108 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                             9109 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                             9110 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                             9111 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                             9112 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                             9113 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                             9114 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                             9115 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                             9116 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                             9117 ; 66   |
                             9118 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITPOS)
                             9119 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITPOS)
                             9120 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_BITPOS)
                             9121 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIGN_BITPOS)
                             9122 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_SHIFT_BITPOS)
                             9123 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_BITPOS)
                             9124 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECSR1_CLK_OFF_BITPOS)
                             9125 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1_NEWADD_BITPOS)
                             9126 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSVD_BITPOS)
                             9127 ; 76   |
                             9128 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                             9129 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                             9130 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                             9131 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                             9132 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                             9133 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                             9134 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                             9135 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                             9136 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                             9137 ; 86   |
                             9138 ; 87   |////////////////////////////////////////////////////////////////////////////////
                             9139 ; 88   |//  Bit Manipulation Unit Registers
                             9140 ; 89   |////////////////////////////////////////////////////////////////////////////////
                             9141 ; 90   |typedef union
                             9142 ; 91   |{
                             9143 ; 92   |    struct
                             9144 ; 93   |    {
                             9145 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                             9146 ; 95   |    int LA      :1;     /* Left Align Data                          */
                             9147 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                             9148 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                             9149 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                             9150 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                             9151 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                             9152 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                             9153 ; 102  |    } B;
                             9154 ; 103  |    int I;
                             9155 ; 104  |    unsigned U;
                             9156 ; 105  |} swizzlecsr1_type;
                             9157 ; 106  |////////////////////////////////////////////////////////////////////////////////
                             9158 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* Swizzle Control & Status Register 1 */
                             9159 ; 108  |
                             9160 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                             9161 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                             9162 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                             9163 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                             9164 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                             9165 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                             9166 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                             9167 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                             9168 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                             9169 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                             9170 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                             9171 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                             9172 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                             9173 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                             9174 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                             9175 ; 124  |
                             9176 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                             9177 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                             9178 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                             9179 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                             9180 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                             9181 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                             9182 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                             9183 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                             9184 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                             9185 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                             9186 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                             9187 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                             9188 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                             9189 ; 138  |
                             9190 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KICK_BITPOS)
                             9191 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_SASEL_BITPOS)
                             9192 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECSR2_DESASEL_BITPOS)
                             9193 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIGE_BITPOS)
                             9194 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2_BITREV_BITPOS)
                             9195 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLSB_BITPOS)
                             9196 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMSB_BITPOS)
                             9197 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16L_BITPOS)
                             9198 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16I_BITPOS)
                             9199 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_BS_EN_BITPOS)
                             9200 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZLECSR2_SBYTEDEST_BITPOS)
                             9201 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2_UNKICK_BITPOS)
                             9202 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSVD_BITPOS)
                             9203 ; 152  |
                             9204 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                             9205 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                             9206 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                             9207 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                             9208 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                             9209 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                             9210 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                             9211 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                             9212 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                             9213 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                             9214 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                             9215 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                             9216 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                             9217 ; 166  |
                             9218 ; 167  |///////////////////////////////////////////////////////////////////////////////
                             9219 ; 168  |typedef union
                             9220 ; 169  |{
                             9221 ; 170  |    struct
                             9222 ; 171  |    {
                             9223 ; 172  |    int KICK    :1;         /* Start transfer                      */
                             9224 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                             9225 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                             9226 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                             9227 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                             9228 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                             9229 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                             9230 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                             9231 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                             9232 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                             9233 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                             9234 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                             9235 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                             9236 ; 185  |    } B;
                             9237 ; 186  |    unsigned int I;
                             9238 ; 187  |    unsigned int U;
                             9239 ; 188  |} swizzlecsr2_type;
                             9240 ; 189  |///////////////////////////////////////////////////////////////////////////////
                             9241 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* Swizzle Control & Status Register 2 */
                             9242 ; 191  |
                             9243 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                             9244 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                             9245 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                             9246 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                             9247 ; 196  |
                             9248 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                             9249 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                             9250 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                             9251 ; 200  |
                             9252 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_SIZE_BITPOS)
                             9253 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWIZZLESIZER_NEW_SHIFT_BITPOS)
                             9254 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_RSVD_BITPOS)
                             9255 ; 204  |
                             9256 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                             9257 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                             9258 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                             9259 ; 208  |
                             9260 ; 209  |///////////////////////////////////////////////////////////////////////////////
                             9261 ; 210  |typedef union
                             9262 ; 211  |{
                             9263 ; 212  |    struct
                             9264 ; 213  |    {
                             9265 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                             9266 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                             9267 ; 216  |    } B;
                             9268 ; 217  |    int I;
                             9269 ; 218  |    unsigned U;
                             9270 ; 219  |} swizzlesizer_type;
                             9271 ; 220  |///////////////////////////////////////////////////////////////////////////////
                             9272 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))        /* Swizzle Transfer Size Register */
                             9273 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* Swizzle Source Address Register */
                             9274 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* Swizzle Data1 Register */
                             9275 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* Swizzle Data2 Register */
                             9276 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* Swizzle Destination Address Register */
                             9277 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* Swizzle Big Endian Register */
                             9278 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* Swizzle BITREV Register */
                             9279 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* Swizzle Pass Least Significant Byte Register */
                             9280 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* Swizzle Pass Intermediate Byte Register */
                             9281 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* Swizzle Pass Most Significant Byte Register */
                             9282 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* Swizzle Pass Least Significant Word Register */
                             9283 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* Swizzle Pass Intermediate Significant Word Register */
                             9284 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* Swizzle Pass Most Significant Word Register */
                             9285 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Swizzle Barrel Shift Register */
                             9286 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swizzle Divide By 3 Lower Register */
                             9287 ; 236  |
                             9288 ; 237  |
                             9289 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                             9290 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                             9291 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                             9292 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                             9293 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                             9294 ; 243  |
                             9295 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                             9296 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                             9297 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                             9298 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                             9299 ; 248  |
                             9300 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                             9301 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD0_BITPOS)
                             9302 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_REMAINDER_BITPOS)
                             9303 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD1_BITPOS)
                             9304 ; 253  |
                             9305 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                             9306 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                             9307 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                             9308 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                             9309 ; 258  |
                             9310 ; 259  |///////////////////////////////////////////////////////////////////////////////
                             9311 ; 260  |typedef union
                             9312 ; 261  |{
                             9313 ; 262  |    struct
                             9314 ; 263  |    {
                             9315 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                             9316 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                             9317 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                             9318 ; 267  |    } B;
                             9319 ; 268  |    int I;
                             9320 ; 269  |    unsigned U;
                             9321 ; 270  |} swizzlediv3ur_type;
                             9322 ; 271  |///////////////////////////////////////////////////////////////////////////////
                             9323 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    /* Swizzle Divide By 3 Upper Register */
                             9324 ; 273  |
                             9325 ; 274  |#endif
                             9326 ; 275  |
                             9327 
                             9329 
                             9330 ; 33   |#include "regssdram.h"
                             9331 
                             9333 
                             9334 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9335 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                             9336 ; 3    |//;  File        : regssdram.inc
                             9337 ; 4    |//;  Description : Mixed Signal IP Register definition
                             9338 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9339 ; 6    |
                             9340 ; 7    |// The following naming conventions are followed in this file.
                             9341 ; 8    |// All registers are named using the format...
                             9342 ; 9    |//     HW_<module>_<regname>
                             9343 ; 10   |// where <module> is the module name which can be any of the following...
                             9344 ; 11   |//     SYSTEM
                             9345 ; 12   |// (Note that when there is more than one copy of a particular module, the
                             9346 ; 13   |// module name includes a number starting from 0 for the first instance of
                             9347 ; 14   |// that module)
                             9348 ; 15   |// <regname> is the specific register within that module
                             9349 ; 16   |// We also define the following...
                             9350 ; 17   |//     HW_<module>_<regname>_BITPOS
                             9351 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9352 ; 19   |//     HW_<module>_<regname>_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9353 ; 20   |// which does something else, and
                             9354 ; 21   |//     HW_<module>_<regname>_CLRMASK
                             9355 ; 22   |// which does something else.
                             9356 ; 23   |// Other rules
                             9357 ; 24   |//     All caps
                             9358 ; 25   |//     Numeric identifiers start at 0
                             9359 ; 26   |
                             9360 ; 27   |#if !(defined(regssdraminc))
                             9361 ; 28   |#define regssdraminc 1
                             9362 ; 29   |
                             9363 ; 30   |#include "types.h"
                             9364 
                             9366 
                             9367 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9368 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9369 ; 3    |//
                             9370 ; 4    |// Filename: types.h
                             9371 ; 5    |// Description: Standard data types
                             9372 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9373 ; 7    |
                             9374 ; 8    |#ifndef _TYPES_H
                             9375 ; 9    |#define _TYPES_H
                             9376 ; 10   |
                             9377 ; 11   |// TODO:  move this outta here!
                             9378 ; 12   |#if !defined(NOERROR)
                             9379 ; 13   |#define NOERROR 0
                             9380 ; 14   |#define SUCCESS 0
                             9381 ; 15   |#endif 
                             9382 ; 16   |#if !defined(SUCCESS)
                             9383 ; 17   |#define SUCCESS  0
                             9384 ; 18   |#endif
                             9385 ; 19   |#if !defined(ERROR)
                             9386 ; 20   |#define ERROR   -1
                             9387 ; 21   |#endif
                             9388 ; 22   |#if !defined(FALSE)
                             9389 ; 23   |#define FALSE 0
                             9390 ; 24   |#endif
                             9391 ; 25   |#if !defined(TRUE)
                             9392 ; 26   |#define TRUE  1
                             9393 ; 27   |#endif
                             9394 ; 28   |
                             9395 ; 29   |#if !defined(NULL)
                             9396 ; 30   |#define NULL 0
                             9397 ; 31   |#endif
                             9398 ; 32   |
                             9399 ; 33   |#define MAX_INT     0x7FFFFF
                             9400 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9401 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9402 ; 36   |#define MAX_ULONG   (-1) 
                             9403 ; 37   |
                             9404 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9405 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9406 ; 40   |
                             9407 ; 41   |
                             9408 ; 42   |#define BYTE    unsigned char       // btVarName
                             9409 ; 43   |#define CHAR    signed char         // cVarName
                             9410 ; 44   |#define USHORT  unsigned short      // usVarName
                             9411 ; 45   |#define SHORT   unsigned short      // sVarName
                             9412 ; 46   |#define WORD    unsigned int        // wVarName
                             9413 ; 47   |#define INT     signed int          // iVarName
                             9414 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9415 ; 49   |#define LONG    signed long         // lVarName
                             9416 ; 50   |#define BOOL    unsigned int        // bVarName
                             9417 ; 51   |#define FRACT   _fract              // frVarName
                             9418 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9419 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9420 ; 54   |#define FLOAT   float               // fVarName
                             9421 ; 55   |#define DBL     double              // dVarName
                             9422 ; 56   |#define ENUM    enum                // eVarName
                             9423 ; 57   |#define CMX     _complex            // cmxVarName
                             9424 ; 58   |typedef WORD UCS3;                   // 
                             9425 ; 59   |
                             9426 ; 60   |#define UINT16  unsigned short
                             9427 ; 61   |#define UINT8   unsigned char   
                             9428 ; 62   |#define UINT32  unsigned long
                             9429 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9430 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9431 ; 65   |#define WCHAR   UINT16
                             9432 ; 66   |
                             9433 ; 67   |//UINT128 is 16 bytes or 6 words
                             9434 ; 68   |typedef struct UINT128_3500 {   
                             9435 ; 69   |    int val[6];     
                             9436 ; 70   |} UINT128_3500;
                             9437 ; 71   |
                             9438 ; 72   |#define UINT128   UINT128_3500
                             9439 ; 73   |
                             9440 ; 74   |// Little endian word packed byte strings:   
                             9441 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9442 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9443 ; 77   |// Little endian word packed byte strings:   
                             9444 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9445 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9446 ; 80   |
                             9447 ; 81   |// Declare Memory Spaces To Use When Coding
                             9448 ; 82   |// A. Sector Buffers
                             9449 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9450 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9451 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9452 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9453 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9454 ; 88   |// B. Media DDI Memory
                             9455 ; 89   |#define MEDIA_DDI_MEM _Y
                             9456 ; 90   |
                             9457 ; 91   |
                             9458 ; 92   |
                             9459 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9460 ; 94   |// Examples of circular pointers:
                             9461 ; 95   |//    INT CIRC cpiVarName
                             9462 ; 96   |//    DWORD CIRC cpdwVarName
                             9463 ; 97   |
                             9464 ; 98   |#define RETCODE INT                 // rcVarName
                             9465 ; 99   |
                             9466 ; 100  |// generic bitfield structure
                             9467 ; 101  |struct Bitfield {
                             9468 ; 102  |    unsigned int B0  :1;
                             9469 ; 103  |    unsigned int B1  :1;
                             9470 ; 104  |    unsigned int B2  :1;
                             9471 ; 105  |    unsigned int B3  :1;
                             9472 ; 106  |    unsigned int B4  :1;
                             9473 ; 107  |    unsigned int B5  :1;
                             9474 ; 108  |    unsigned int B6  :1;
                             9475 ; 109  |    unsigned int B7  :1;
                             9476 ; 110  |    unsigned int B8  :1;
                             9477 ; 111  |    unsigned int B9  :1;
                             9478 ; 112  |    unsigned int B10 :1;
                             9479 ; 113  |    unsigned int B11 :1;
                             9480 ; 114  |    unsigned int B12 :1;
                             9481 ; 115  |    unsigned int B13 :1;
                             9482 ; 116  |    unsigned int B14 :1;
                             9483 ; 117  |    unsigned int B15 :1;
                             9484 ; 118  |    unsigned int B16 :1;
                             9485 ; 119  |    unsigned int B17 :1;
                             9486 ; 120  |    unsigned int B18 :1;
                             9487 ; 121  |    unsigned int B19 :1;
                             9488 ; 122  |    unsigned int B20 :1;
                             9489 ; 123  |    unsigned int B21 :1;
                             9490 ; 124  |    unsigned int B22 :1;
                             9491 ; 125  |    unsigned int B23 :1;
                             9492 ; 126  |};
                             9493 ; 127  |
                             9494 ; 128  |union BitInt {
                             9495 ; 129  |        struct Bitfield B;
                             9496 ; 130  |        int        I;
                             9497 ; 131  |};
                             9498 ; 132  |
                             9499 ; 133  |#define MAX_MSG_LENGTH 10
                             9500 ; 134  |struct CMessage
                             9501 ; 135  |{
                             9502 ; 136  |        unsigned int m_uLength;
                             9503 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9504 ; 138  |};
                             9505 ; 139  |
                             9506 ; 140  |typedef struct {
                             9507 ; 141  |    WORD m_wLength;
                             9508 ; 142  |    WORD m_wMessage;
                             9509 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9510 ; 144  |} Message;
                             9511 ; 145  |
                             9512 ; 146  |struct MessageQueueDescriptor
                             9513 ; 147  |{
                             9514 ; 148  |        int *m_pBase;
                             9515 ; 149  |        int m_iModulo;
                             9516 ; 150  |        int m_iSize;
                             9517 ; 151  |        int *m_pHead;
                             9518 ; 152  |        int *m_pTail;
                             9519 ; 153  |};
                             9520 ; 154  |
                             9521 ; 155  |struct ModuleEntry
                             9522 ; 156  |{
                             9523 ; 157  |    int m_iSignaledEventMask;
                             9524 ; 158  |    int m_iWaitEventMask;
                             9525 ; 159  |    int m_iResourceOfCode;
                             9526 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9527 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             9528 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9529 ; 163  |    int m_uTimeOutHigh;
                             9530 ; 164  |    int m_uTimeOutLow;
                             9531 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9532 ; 166  |};
                             9533 ; 167  |
                             9534 ; 168  |union WaitMask{
                             9535 ; 169  |    struct B{
                             9536 ; 170  |        unsigned int m_bNone     :1;
                             9537 ; 171  |        unsigned int m_bMessage  :1;
                             9538 ; 172  |        unsigned int m_bTimer    :1;
                             9539 ; 173  |        unsigned int m_bButton   :1;
                             9540 ; 174  |    } B;
                             9541 ; 175  |    int I;
                             9542 ; 176  |} ;
                             9543 ; 177  |
                             9544 ; 178  |
                             9545 ; 179  |struct Button {
                             9546 ; 180  |        WORD wButtonEvent;
                             9547 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9548 ; 182  |};
                             9549 ; 183  |
                             9550 ; 184  |struct Message {
                             9551 ; 185  |        WORD wMsgLength;
                             9552 ; 186  |        WORD wMsgCommand;
                             9553 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9554 ; 188  |};
                             9555 ; 189  |
                             9556 ; 190  |union EventTypes {
                             9557 ; 191  |        struct CMessage msg;
                             9558 ; 192  |        struct Button Button ;
                             9559 ; 193  |        struct Message Message;
                             9560 ; 194  |};
                             9561 ; 195  |
                             9562 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9563 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9564 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9565 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9566 ; 200  |
                             9567 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9568 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9569 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9570 ; 204  |
                             9571 ; 205  |#if DEBUG
                             9572 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9573 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9574 ; 208  |#else 
                             9575 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             9576 ; 210  |#define DebugBuildAssert(x)    
                             9577 ; 211  |#endif
                             9578 ; 212  |
                             9579 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9580 ; 214  |//  #pragma asm
                             9581 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9582 ; 216  |//  #pragma endasm
                             9583 ; 217  |
                             9584 ; 218  |
                             9585 ; 219  |#ifdef COLOR_262K
                             9586 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             9587 ; 221  |#elif defined(COLOR_65K)
                             9588 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             9589 ; 223  |#else
                             9590 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             9591 ; 225  |#endif
                             9592 ; 226  |    
                             9593 ; 227  |#endif // #ifndef _TYPES_H
                             9594 
                             9596 
                             9597 ; 31   |
                             9598 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                             9599 ; 33   |
                             9600 ; 34   |
                             9601 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                             9602 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                             9603 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                             9604 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                             9605 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9606 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                             9607 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                             9608 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                             9609 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                             9610 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                             9611 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                             9612 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                             9613 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                             9614 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                             9615 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                             9616 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                             9617 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                             9618 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                             9619 ; 53   |
                             9620 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                             9621 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                             9622 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                             9623 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                             9624 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                             9625 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                             9626 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                             9627 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                             9628 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                             9629 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                             9630 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                             9631 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                             9632 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                             9633 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                             9634 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                             9635 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                             9636 ; 70   |
                             9637 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SDRAMEN_BITPOS)
                             9638 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                             9639 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS)
                             9640 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BITPOS)
                             9641 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                             9642 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_BITPOS)
                             9643 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BITPOS)
                             9644 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_BITPOS)
                             9645 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS)
                             9646 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BITPOS)
                             9647 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_BITPOS)
                             9648 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_BITPOS)
                             9649 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS)
                             9650 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_BITPOS)
                             9651 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_BITPOS)
                             9652 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BITPOS)
                             9653 ; 87   |
                             9654 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                             9655 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                             9656 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                             9657 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                             9658 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                             9659 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                             9660 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                             9661 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                             9662 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                             9663 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                             9664 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                             9665 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                             9666 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                             9667 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                             9668 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                             9669 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                             9670 ; 104  |
                             9671 ; 105  |typedef union               
                             9672 ; 106  |{
                             9673 ; 107  |    struct {
                             9674 ; 108  |        int SDRAMEN                     :1;
                             9675 ; 109  |        int IE                          :1;
                             9676 ; 110  |        int RNW                         :1;
                             9677 ; 111  |        int KICK                        :1;
                             9678 ; 112  |        int LM                          :1;
                             9679 ; 113  |        int ISTAT                       :1;
                             9680 ; 114  |        int PWDN                        :1;
                             9681 ; 115  |        int RSVD                        :1;
                             9682 ; 116  |        int SBYTE                       :2;
                             9683 ; 117  |        int MEM                         :2;
                             9684 ; 118  |        int BIGE                        :1;
                             9685 ; 119  |        int ASIZE                       :3;
                             9686 ; 120  |        int UKICK                       :1;
                             9687 ; 121  |        int DIV                         :4;
                             9688 ; 122  |        int MULTI                       :1;
                             9689 ; 123  |        int SDRAM                       :1;
                             9690 ; 124  |        int SIGN                        :1;
                             9691 ; 125  |    } B;
                             9692 ; 126  |    int I;
                             9693 ; 127  |} sdramcsr_type;
                             9694 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                             9695 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                             9696 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                             9697 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                             9698 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                             9699 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                             9700 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                             9701 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                             9702 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                             9703 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                             9704 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                             9705 ; 139  |
                             9706 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                             9707 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                             9708 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                             9709 ; 143  |
                             9710 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                             9711 ; 145  |
                             9712 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                             9713 ; 147  |
                             9714 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                             9715 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                             9716 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                             9717 ; 151  |
                             9718 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                             9719 ; 153  |
                             9720 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                             9721 ; 155  |
                             9722 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                             9723 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                             9724 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                             9725 ; 159  |
                             9726 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                             9727 ; 161  |
                             9728 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                             9729 ; 163  |
                             9730 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                             9731 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                             9732 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                             9733 ; 167  |
                             9734 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                             9735 ; 169  |
                             9736 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                             9737 ; 171  |
                             9738 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                             9739 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                             9740 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                             9741 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                             9742 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                             9743 ; 177  |
                             9744 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                             9745 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                             9746 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                             9747 ; 181  |
                             9748 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1_INIT_BITPOS)
                             9749 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_TRP_BITPOS)
                             9750 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1_TRFC_BITPOS)
                             9751 ; 185  |
                             9752 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                             9753 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                             9754 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                             9755 ; 189  |
                             9756 ; 190  |typedef union               
                             9757 ; 191  |{
                             9758 ; 192  |    struct {
                             9759 ; 193  |        int INIT                :16;
                             9760 ; 194  |        int TRP                 :4;
                             9761 ; 195  |        int TRFC                :4;
                             9762 ; 196  |    } B;
                             9763 ; 197  |    int I;
                             9764 ; 198  |} sdramtimer1_type;
                             9765 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                             9766 ; 200  |
                             9767 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                             9768 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                             9769 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                             9770 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                             9771 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                             9772 ; 206  |
                             9773 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                             9774 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                             9775 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                             9776 ; 210  |
                             9777 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2_TXSR_BITPOS)
                             9778 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2_TREF_BITPOS)
                             9779 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2_TRCD_BITPOS)
                             9780 ; 214  |
                             9781 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                             9782 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                             9783 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                             9784 ; 218  |
                             9785 ; 219  |typedef union               
                             9786 ; 220  |{
                             9787 ; 221  |    struct {
                             9788 ; 222  |        int TXSR                :4;
                             9789 ; 223  |        int TREF                :12;
                             9790 ; 224  |        int TRCD                :4;
                             9791 ; 225  |        int RSVD                :4; 
                             9792 ; 226  |    } B;
                             9793 ; 227  |    int I;
                             9794 ; 228  |} sdramtimer2_type;
                             9795 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                             9796 ; 230  |
                             9797 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             9798 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                             9799 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                             9800 ; 234  |
                             9801 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                             9802 ; 236  |
                             9803 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                             9804 ; 238  |
                             9805 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                             9806 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                             9807 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                             9808 ; 242  |
                             9809 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                             9810 ; 244  |
                             9811 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                             9812 ; 246  |
                             9813 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             9814 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                             9815 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                             9816 ; 250  |
                             9817 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                             9818 ; 252  |
                             9819 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS)
                             9820 ; 254  |
                             9821 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                             9822 ; 256  |
                             9823 ; 257  |typedef union               
                             9824 ; 258  |{
                             9825 ; 259  |    struct {
                             9826 ; 260  |        int VALUE               :14;
                             9827 ; 261  |        int RSVD                :10; 
                             9828 ; 262  |    } B;
                             9829 ; 263  |    int I;
                             9830 ; 264  |} sdrammode_type;
                             9831 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                             9832 ; 266  |
                             9833 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                             9834 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                             9835 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                             9836 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                             9837 ; 271  |
                             9838 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                             9839 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                             9840 ; 274  |
                             9841 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_COLWIDTH_BITPOS)
                             9842 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_ROWWIDTH_BITPOS)
                             9843 ; 277  |
                             9844 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                             9845 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                             9846 ; 280  |
                             9847 ; 281  |typedef union               
                             9848 ; 282  |{
                             9849 ; 283  |    struct {
                             9850 ; 284  |        int COLWIDTH               :4;
                             9851 ; 285  |        int ROWWIDTH               :4; 
                             9852 ; 286  |    } B;
                             9853 ; 287  |    int I;
                             9854 ; 288  |} sdramtype_type;
                             9855 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                             9856 ; 290  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9857 ; 291  |#endif
                             9858 ; 292  |
                             9859 ; 293  |
                             9860 ; 294  |
                             9861 ; 295  |
                             9862 ; 296  |
                             9863 ; 297  |
                             9864 
                             9866 
                             9867 ; 34   |#include "regstb.h"
                             9868 
                             9870 
                             9871 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             9872 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             9873 ; 3    |// Filename: regstb.inc
                             9874 ; 4    |// Description: Register definitions for Trace Buffer
                             9875 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             9876 ; 6    |// The following naming conventions are followed in this file.
                             9877 ; 7    |// All registers are named using the format...
                             9878 ; 8    |//     HW_<module>_<regname>
                             9879 ; 9    |// where <module> is the module name which can be any of the following...
                             9880 ; 10   |//     USB20
                             9881 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             9882 ; 12   |// module name includes a number starting from 0 for the first instance of
                             9883 ; 13   |// that module)
                             9884 ; 14   |// <regname> is the specific register within that module
                             9885 ; 15   |// We also define the following...
                             9886 ; 16   |//     HW_<module>_<regname>_BITPOS
                             9887 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9888 ; 18   |//     HW_<module>_<regname>_SETMASK
                             9889 ; 19   |// which does something else, and
                             9890 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             9891 ; 21   |// which does something else.
                             9892 ; 22   |// Other rules
                             9893 ; 23   |//     All caps
                             9894 ; 24   |//     Numeric identifiers start at 0
                             9895 ; 25   |#if !(defined(regstbinc))
                             9896 ; 26   |#define regstbinc 1
                             9897 ; 27   |
                             9898 ; 28   |#include "types.h"
                             9899 
                             9901 
                             9902 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9903 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9904 ; 3    |//
                             9905 ; 4    |// Filename: types.h
                             9906 ; 5    |// Description: Standard data types
                             9907 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9908 ; 7    |
                             9909 ; 8    |#ifndef _TYPES_H
                             9910 ; 9    |#define _TYPES_H
                             9911 ; 10   |
                             9912 ; 11   |// TODO:  move this outta here!
                             9913 ; 12   |#if !defined(NOERROR)
                             9914 ; 13   |#define NOERROR 0
                             9915 ; 14   |#define SUCCESS 0
                             9916 ; 15   |#endif 
                             9917 ; 16   |#if !defined(SUCCESS)
                             9918 ; 17   |#define SUCCESS  0
                             9919 ; 18   |#endif
                             9920 ; 19   |#if !defined(ERROR)
                             9921 ; 20   |#define ERROR   -1
                             9922 ; 21   |#endif
                             9923 ; 22   |#if !defined(FALSE)
                             9924 ; 23   |#define FALSE 0
                             9925 ; 24   |#endif
                             9926 ; 25   |#if !defined(TRUE)
                             9927 ; 26   |#define TRUE  1
                             9928 ; 27   |#endif
                             9929 ; 28   |
                             9930 ; 29   |#if !defined(NULL)
                             9931 ; 30   |#define NULL 0
                             9932 ; 31   |#endif
                             9933 ; 32   |
                             9934 ; 33   |#define MAX_INT     0x7FFFFF
                             9935 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9936 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9937 ; 36   |#define MAX_ULONG   (-1) 
                             9938 ; 37   |
                             9939 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9940 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9941 ; 40   |
                             9942 ; 41   |
                             9943 ; 42   |#define BYTE    unsigned char       // btVarName
                             9944 ; 43   |#define CHAR    signed char         // cVarName
                             9945 ; 44   |#define USHORT  unsigned short      // usVarName
                             9946 ; 45   |#define SHORT   unsigned short      // sVarName
                             9947 ; 46   |#define WORD    unsigned int        // wVarName
                             9948 ; 47   |#define INT     signed int          // iVarName
                             9949 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9950 ; 49   |#define LONG    signed long         // lVarName
                             9951 ; 50   |#define BOOL    unsigned int        // bVarName
                             9952 ; 51   |#define FRACT   _fract              // frVarName
                             9953 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9954 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9955 ; 54   |#define FLOAT   float               // fVarName
                             9956 ; 55   |#define DBL     double              // dVarName
                             9957 ; 56   |#define ENUM    enum                // eVarName
                             9958 ; 57   |#define CMX     _complex            // cmxVarName
                             9959 ; 58   |typedef WORD UCS3;                   // 
                             9960 ; 59   |
                             9961 ; 60   |#define UINT16  unsigned short
                             9962 ; 61   |#define UINT8   unsigned char   
                             9963 ; 62   |#define UINT32  unsigned long
                             9964 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9965 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9966 ; 65   |#define WCHAR   UINT16
                             9967 ; 66   |
                             9968 ; 67   |//UINT128 is 16 bytes or 6 words
                             9969 ; 68   |typedef struct UINT128_3500 {   
                             9970 ; 69   |    int val[6];     
                             9971 ; 70   |} UINT128_3500;
                             9972 ; 71   |
                             9973 ; 72   |#define UINT128   UINT128_3500
                             9974 ; 73   |
                             9975 ; 74   |// Little endian word packed byte strings:   
                             9976 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9977 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9978 ; 77   |// Little endian word packed byte strings:   
                             9979 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9980 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9981 ; 80   |
                             9982 ; 81   |// Declare Memory Spaces To Use When Coding
                             9983 ; 82   |// A. Sector Buffers
                             9984 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9985 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9986 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9987 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9988 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9989 ; 88   |// B. Media DDI Memory
                             9990 ; 89   |#define MEDIA_DDI_MEM _Y
                             9991 ; 90   |
                             9992 ; 91   |
                             9993 ; 92   |
                             9994 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9995 ; 94   |// Examples of circular pointers:
                             9996 ; 95   |//    INT CIRC cpiVarName
                             9997 ; 96   |//    DWORD CIRC cpdwVarName
                             9998 ; 97   |
                             9999 ; 98   |#define RETCODE INT                 // rcVarName
                            10000 ; 99   |
                            10001 ; 100  |// generic bitfield structure
                            10002 ; 101  |struct Bitfield {
                            10003 ; 102  |    unsigned int B0  :1;
                            10004 ; 103  |    unsigned int B1  :1;
                            10005 ; 104  |    unsigned int B2  :1;
                            10006 ; 105  |    unsigned int B3  :1;
                            10007 ; 106  |    unsigned int B4  :1;
                            10008 ; 107  |    unsigned int B5  :1;
                            10009 ; 108  |    unsigned int B6  :1;
                            10010 ; 109  |    unsigned int B7  :1;
                            10011 ; 110  |    unsigned int B8  :1;
                            10012 ; 111  |    unsigned int B9  :1;
                            10013 ; 112  |    unsigned int B10 :1;
                            10014 ; 113  |    unsigned int B11 :1;
                            10015 ; 114  |    unsigned int B12 :1;
                            10016 ; 115  |    unsigned int B13 :1;
                            10017 ; 116  |    unsigned int B14 :1;
                            10018 ; 117  |    unsigned int B15 :1;
                            10019 ; 118  |    unsigned int B16 :1;
                            10020 ; 119  |    unsigned int B17 :1;
                            10021 ; 120  |    unsigned int B18 :1;
                            10022 ; 121  |    unsigned int B19 :1;
                            10023 ; 122  |    unsigned int B20 :1;
                            10024 ; 123  |    unsigned int B21 :1;
                            10025 ; 124  |    unsigned int B22 :1;
                            10026 ; 125  |    unsigned int B23 :1;
                            10027 ; 126  |};
                            10028 ; 127  |
                            10029 ; 128  |union BitInt {
                            10030 ; 129  |        struct Bitfield B;
                            10031 ; 130  |        int        I;
                            10032 ; 131  |};
                            10033 ; 132  |
                            10034 ; 133  |#define MAX_MSG_LENGTH 10
                            10035 ; 134  |struct CMessage
                            10036 ; 135  |{
                            10037 ; 136  |        unsigned int m_uLength;
                            10038 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10039 ; 138  |};
                            10040 ; 139  |
                            10041 ; 140  |typedef struct {
                            10042 ; 141  |    WORD m_wLength;
                            10043 ; 142  |    WORD m_wMessage;
                            10044 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10045 ; 144  |} Message;
                            10046 ; 145  |
                            10047 ; 146  |struct MessageQueueDescriptor
                            10048 ; 147  |{
                            10049 ; 148  |        int *m_pBase;
                            10050 ; 149  |        int m_iModulo;
                            10051 ; 150  |        int m_iSize;
                            10052 ; 151  |        int *m_pHead;
                            10053 ; 152  |        int *m_pTail;
                            10054 ; 153  |};
                            10055 ; 154  |
                            10056 ; 155  |struct ModuleEntry
                            10057 ; 156  |{
                            10058 ; 157  |    int m_iSignaledEventMask;
                            10059 ; 158  |    int m_iWaitEventMask;
                            10060 ; 159  |    int m_iResourceOfCode;
                            10061 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10062 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10063 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10064 ; 163  |    int m_uTimeOutHigh;
                            10065 ; 164  |    int m_uTimeOutLow;
                            10066 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10067 ; 166  |};
                            10068 ; 167  |
                            10069 ; 168  |union WaitMask{
                            10070 ; 169  |    struct B{
                            10071 ; 170  |        unsigned int m_bNone     :1;
                            10072 ; 171  |        unsigned int m_bMessage  :1;
                            10073 ; 172  |        unsigned int m_bTimer    :1;
                            10074 ; 173  |        unsigned int m_bButton   :1;
                            10075 ; 174  |    } B;
                            10076 ; 175  |    int I;
                            10077 ; 176  |} ;
                            10078 ; 177  |
                            10079 ; 178  |
                            10080 ; 179  |struct Button {
                            10081 ; 180  |        WORD wButtonEvent;
                            10082 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10083 ; 182  |};
                            10084 ; 183  |
                            10085 ; 184  |struct Message {
                            10086 ; 185  |        WORD wMsgLength;
                            10087 ; 186  |        WORD wMsgCommand;
                            10088 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10089 ; 188  |};
                            10090 ; 189  |
                            10091 ; 190  |union EventTypes {
                            10092 ; 191  |        struct CMessage msg;
                            10093 ; 192  |        struct Button Button ;
                            10094 ; 193  |        struct Message Message;
                            10095 ; 194  |};
                            10096 ; 195  |
                            10097 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10098 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10099 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10100 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10101 ; 200  |
                            10102 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10103 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10104 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10105 ; 204  |
                            10106 ; 205  |#if DEBUG
                            10107 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10108 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10109 ; 208  |#else 
                            10110 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10111 ; 210  |#define DebugBuildAssert(x)    
                            10112 ; 211  |#endif
                            10113 ; 212  |
                            10114 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10115 ; 214  |//  #pragma asm
                            10116 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10117 ; 216  |//  #pragma endasm
                            10118 ; 217  |
                            10119 ; 218  |
                            10120 ; 219  |#ifdef COLOR_262K
                            10121 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            10122 ; 221  |#elif defined(COLOR_65K)
                            10123 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10124 ; 223  |#else
                            10125 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10126 ; 225  |#endif
                            10127 ; 226  |    
                            10128 ; 227  |#endif // #ifndef _TYPES_H
                            10129 
                            10131 
                            10132 ; 29   |
                            10133 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10134 ; 31   |
                            10135 ; 32   |//   Trace Buffer STMP Registers 
                            10136 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            10137 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10138 ; 35   |
                            10139 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            10140 ; 37   |
                            10141 ; 38   |
                            10142 ; 39   |
                            10143 ; 40   |
                            10144 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            10145 ; 42   |
                            10146 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            10147 ; 44   |
                            10148 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            10149 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            10150 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            10151 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            10152 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            10153 ; 50   |
                            10154 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            10155 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            10156 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                            10157 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            10158 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            10159 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            10160 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                            10161 ; 58   |
                            10162 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_ENABLE_BITPOS) 
                            10163 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS) 
                            10164 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            10165 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_BITPOS) 
                            10166 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_EVENT_BITPOS) 
                            10167 ; 64   |
                            10168 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            10169 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            10170 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            10171 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            10172 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            10173 ; 70   |
                            10174 ; 71   |typedef union               
                            10175 ; 72   |{
                            10176 ; 73   |    struct {
                            10177 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            10178 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            10179 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            10180 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            10181 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            10182 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            10183 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            10184 ; 81   |    } B;
                            10185 ; 82   |    int I;
                            10186 ; 83   |    unsigned int U;
                            10187 ; 84   |} tb_cfg_type;
                            10188 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer Configuration Register */
                            10189 ; 86   |
                            10190 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            10191 ; 88   |
                            10192 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            10193 ; 90   |
                            10194 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                            10195 ; 92   |
                            10196 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            10197 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            10198 ; 95   |
                            10199 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BITPOS) 
                            10200 ; 97   |
                            10201 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                            10202 ; 99   |
                            10203 ; 100  |typedef union               
                            10204 ; 101  |{
                            10205 ; 102  |    struct {
                            10206 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            10207 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            10208 ; 105  |    } B;
                            10209 ; 106  |    int I;
                            10210 ; 107  |    unsigned int U;
                            10211 ; 108  |} tb_bar_type;
                            10212 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer Base Address Register */
                            10213 ; 110  |
                            10214 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            10215 ; 112  |
                            10216 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            10217 ; 114  |
                            10218 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            10219 ; 116  |
                            10220 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            10221 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            10222 ; 119  |
                            10223 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BITPOS) 
                            10224 ; 121  |
                            10225 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            10226 ; 123  |
                            10227 ; 124  |typedef union               
                            10228 ; 125  |{
                            10229 ; 126  |    struct {
                            10230 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            10231 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                            10232 ; 129  |    } B;
                            10233 ; 130  |    int I;
                            10234 ; 131  |    unsigned int U;
                            10235 ; 132  |} tb_mod_type;
                            10236 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer Modulus Register */
                            10237 ; 134  |
                            10238 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            10239 ; 136  |
                            10240 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            10241 ; 138  |
                            10242 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            10243 ; 140  |
                            10244 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            10245 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            10246 ; 143  |
                            10247 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            10248 ; 145  |
                            10249 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            10250 ; 147  |
                            10251 ; 148  |typedef union               
                            10252 ; 149  |{
                            10253 ; 150  |    struct {
                            10254 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            10255 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            10256 ; 153  |    } B;
                            10257 ; 154  |    int I;
                            10258 ; 155  |    unsigned int U;
                            10259 ; 156  |} tb_cir_type;
                            10260 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer Current Index Register */
                            10261 ; 158  |
                            10262 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            10263 ; 160  |
                            10264 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            10265 ; 162  |
                            10266 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            10267 ; 164  |
                            10268 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            10269 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            10270 ; 167  |
                            10271 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            10272 ; 169  |
                            10273 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            10274 ; 171  |
                            10275 ; 172  |typedef union               
                            10276 ; 173  |{
                            10277 ; 174  |    struct {
                            10278 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            10279 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            10280 ; 177  |    } B;
                            10281 ; 178  |    int I;
                            10282 ; 179  |    unsigned int U;
                            10283 ; 180  |} tb_obc_type;
                            10284 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer one byte code Register */
                            10285 ; 182  |
                            10286 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            10287 ; 184  |
                            10288 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            10289 ; 186  |
                            10290 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            10291 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            10292 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            10293 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            10294 ; 191  |
                            10295 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            10296 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            10297 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            10298 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            10299 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            10300 ; 197  |
                            10301 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STYLE_BITPOS) 
                            10302 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLASS_BITPOS) 
                            10303 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLASS_BITPOS) 
                            10304 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS) 
                            10305 ; 202  |
                            10306 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            10307 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            10308 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            10309 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            10310 ; 207  |
                            10311 ; 208  |typedef union               
                            10312 ; 209  |{
                            10313 ; 210  |    struct {
                            10314 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            10315 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            10316 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            10317 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            10318 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            10319 ; 216  |    } B;
                            10320 ; 217  |    int I;
                            10321 ; 218  |    unsigned int U;
                            10322 ; 219  |} tb_tcs_type;
                            10323 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffer Trigger Command Register */
                            10324 ; 221  |
                            10325 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            10326 ; 223  |
                            10327 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            10328 ; 225  |
                            10329 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            10330 ; 227  |
                            10331 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            10332 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            10333 ; 230  |
                            10334 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH_ADDR_BITPOS) 
                            10335 ; 232  |
                            10336 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            10337 ; 234  |
                            10338 ; 235  |typedef union               
                            10339 ; 236  |{
                            10340 ; 237  |    struct {
                            10341 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            10342 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            10343 ; 240  |    } B;
                            10344 ; 241  |    int I;
                            10345 ; 242  |    unsigned int U;
                            10346 ; 243  |} tb_tvr_type;
                            10347 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffer Trigger Value Register */
                            10348 ; 245  |
                            10349 ; 246  |
                            10350 ; 247  |
                            10351 ; 248  |#endif
                            10352 ; 249  |
                            10353 ; 250  |
                            10354 ; 251  |
                            10355 ; 252  |
                            10356 ; 253  |
                            10357 ; 254  |
                            10358 ; 255  |
                            10359 ; 256  |
                            10360 ; 257  |
                            10361 ; 258  |
                            10362 ; 259  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10363 ; 260  |
                            10364 ; 261  |
                            10365 ; 262  |
                            10366 ; 263  |
                            10367 ; 264  |
                            10368 ; 265  |
                            10369 
                            10371 
                            10372 ; 35   |#include "regstimer.h"
                            10373 
                            10375 
                            10376 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10377 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            10378 ; 3    |// Filename: regstimer.inc
                            10379 ; 4    |// Description: Register definitions for  Timers interface
                            10380 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10381 ; 6    |// The following naming conventions are followed in this file.
                            10382 ; 7    |// All registers are named using the format...
                            10383 ; 8    |//     HW_<module>_<regname>
                            10384 ; 9    |// where <module> is the module name which can be any of the following...
                            10385 ; 10   |//     USB20
                            10386 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10387 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10388 ; 13   |// that module)
                            10389 ; 14   |// <regname> is the specific register within that module
                            10390 ; 15   |// We also define the following...
                            10391 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10392 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10393 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10394 ; 19   |// which does something else, and
                            10395 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10396 ; 21   |// which does something else.
                            10397 ; 22   |// Other rules
                            10398 ; 23   |//     All caps
                            10399 ; 24   |//     Numeric identifiers start at 0
                            10400 ; 25   |#if !(defined(regstimerinc))
                            10401 ; 26   |#define regstimerinc 1
                            10402 ; 27   |
                            10403 ; 28   |#include "types.h"
                            10404 
                            10406 
                            10407 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10408 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10409 ; 3    |//
                            10410 ; 4    |// Filename: types.h
                            10411 ; 5    |// Description: Standard data types
                            10412 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10413 ; 7    |
                            10414 ; 8    |#ifndef _TYPES_H
                            10415 ; 9    |#define _TYPES_H
                            10416 ; 10   |
                            10417 ; 11   |// TODO:  move this outta here!
                            10418 ; 12   |#if !defined(NOERROR)
                            10419 ; 13   |#define NOERROR 0
                            10420 ; 14   |#define SUCCESS 0
                            10421 ; 15   |#endif 
                            10422 ; 16   |#if !defined(SUCCESS)
                            10423 ; 17   |#define SUCCESS  0
                            10424 ; 18   |#endif
                            10425 ; 19   |#if !defined(ERROR)
                            10426 ; 20   |#define ERROR   -1
                            10427 ; 21   |#endif
                            10428 ; 22   |#if !defined(FALSE)
                            10429 ; 23   |#define FALSE 0
                            10430 ; 24   |#endif
                            10431 ; 25   |#if !defined(TRUE)
                            10432 ; 26   |#define TRUE  1
                            10433 ; 27   |#endif
                            10434 ; 28   |
                            10435 ; 29   |#if !defined(NULL)
                            10436 ; 30   |#define NULL 0
                            10437 ; 31   |#endif
                            10438 ; 32   |
                            10439 ; 33   |#define MAX_INT     0x7FFFFF
                            10440 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10441 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10442 ; 36   |#define MAX_ULONG   (-1) 
                            10443 ; 37   |
                            10444 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10445 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10446 ; 40   |
                            10447 ; 41   |
                            10448 ; 42   |#define BYTE    unsigned char       // btVarName
                            10449 ; 43   |#define CHAR    signed char         // cVarName
                            10450 ; 44   |#define USHORT  unsigned short      // usVarName
                            10451 ; 45   |#define SHORT   unsigned short      // sVarName
                            10452 ; 46   |#define WORD    unsigned int        // wVarName
                            10453 ; 47   |#define INT     signed int          // iVarName
                            10454 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10455 ; 49   |#define LONG    signed long         // lVarName
                            10456 ; 50   |#define BOOL    unsigned int        // bVarName
                            10457 ; 51   |#define FRACT   _fract              // frVarName
                            10458 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10459 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10460 ; 54   |#define FLOAT   float               // fVarName
                            10461 ; 55   |#define DBL     double              // dVarName
                            10462 ; 56   |#define ENUM    enum                // eVarName
                            10463 ; 57   |#define CMX     _complex            // cmxVarName
                            10464 ; 58   |typedef WORD UCS3;                   // 
                            10465 ; 59   |
                            10466 ; 60   |#define UINT16  unsigned short
                            10467 ; 61   |#define UINT8   unsigned char   
                            10468 ; 62   |#define UINT32  unsigned long
                            10469 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10470 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10471 ; 65   |#define WCHAR   UINT16
                            10472 ; 66   |
                            10473 ; 67   |//UINT128 is 16 bytes or 6 words
                            10474 ; 68   |typedef struct UINT128_3500 {   
                            10475 ; 69   |    int val[6];     
                            10476 ; 70   |} UINT128_3500;
                            10477 ; 71   |
                            10478 ; 72   |#define UINT128   UINT128_3500
                            10479 ; 73   |
                            10480 ; 74   |// Little endian word packed byte strings:   
                            10481 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10482 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10483 ; 77   |// Little endian word packed byte strings:   
                            10484 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10485 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10486 ; 80   |
                            10487 ; 81   |// Declare Memory Spaces To Use When Coding
                            10488 ; 82   |// A. Sector Buffers
                            10489 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10490 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10491 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10492 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10493 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10494 ; 88   |// B. Media DDI Memory
                            10495 ; 89   |#define MEDIA_DDI_MEM _Y
                            10496 ; 90   |
                            10497 ; 91   |
                            10498 ; 92   |
                            10499 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10500 ; 94   |// Examples of circular pointers:
                            10501 ; 95   |//    INT CIRC cpiVarName
                            10502 ; 96   |//    DWORD CIRC cpdwVarName
                            10503 ; 97   |
                            10504 ; 98   |#define RETCODE INT                 // rcVarName
                            10505 ; 99   |
                            10506 ; 100  |// generic bitfield structure
                            10507 ; 101  |struct Bitfield {
                            10508 ; 102  |    unsigned int B0  :1;
                            10509 ; 103  |    unsigned int B1  :1;
                            10510 ; 104  |    unsigned int B2  :1;
                            10511 ; 105  |    unsigned int B3  :1;
                            10512 ; 106  |    unsigned int B4  :1;
                            10513 ; 107  |    unsigned int B5  :1;
                            10514 ; 108  |    unsigned int B6  :1;
                            10515 ; 109  |    unsigned int B7  :1;
                            10516 ; 110  |    unsigned int B8  :1;
                            10517 ; 111  |    unsigned int B9  :1;
                            10518 ; 112  |    unsigned int B10 :1;
                            10519 ; 113  |    unsigned int B11 :1;
                            10520 ; 114  |    unsigned int B12 :1;
                            10521 ; 115  |    unsigned int B13 :1;
                            10522 ; 116  |    unsigned int B14 :1;
                            10523 ; 117  |    unsigned int B15 :1;
                            10524 ; 118  |    unsigned int B16 :1;
                            10525 ; 119  |    unsigned int B17 :1;
                            10526 ; 120  |    unsigned int B18 :1;
                            10527 ; 121  |    unsigned int B19 :1;
                            10528 ; 122  |    unsigned int B20 :1;
                            10529 ; 123  |    unsigned int B21 :1;
                            10530 ; 124  |    unsigned int B22 :1;
                            10531 ; 125  |    unsigned int B23 :1;
                            10532 ; 126  |};
                            10533 ; 127  |
                            10534 ; 128  |union BitInt {
                            10535 ; 129  |        struct Bitfield B;
                            10536 ; 130  |        int        I;
                            10537 ; 131  |};
                            10538 ; 132  |
                            10539 ; 133  |#define MAX_MSG_LENGTH 10
                            10540 ; 134  |struct CMessage
                            10541 ; 135  |{
                            10542 ; 136  |        unsigned int m_uLength;
                            10543 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10544 ; 138  |};
                            10545 ; 139  |
                            10546 ; 140  |typedef struct {
                            10547 ; 141  |    WORD m_wLength;
                            10548 ; 142  |    WORD m_wMessage;
                            10549 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10550 ; 144  |} Message;
                            10551 ; 145  |
                            10552 ; 146  |struct MessageQueueDescriptor
                            10553 ; 147  |{
                            10554 ; 148  |        int *m_pBase;
                            10555 ; 149  |        int m_iModulo;
                            10556 ; 150  |        int m_iSize;
                            10557 ; 151  |        int *m_pHead;
                            10558 ; 152  |        int *m_pTail;
                            10559 ; 153  |};
                            10560 ; 154  |
                            10561 ; 155  |struct ModuleEntry
                            10562 ; 156  |{
                            10563 ; 157  |    int m_iSignaledEventMask;
                            10564 ; 158  |    int m_iWaitEventMask;
                            10565 ; 159  |    int m_iResourceOfCode;
                            10566 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10567 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10568 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10569 ; 163  |    int m_uTimeOutHigh;
                            10570 ; 164  |    int m_uTimeOutLow;
                            10571 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10572 ; 166  |};
                            10573 ; 167  |
                            10574 ; 168  |union WaitMask{
                            10575 ; 169  |    struct B{
                            10576 ; 170  |        unsigned int m_bNone     :1;
                            10577 ; 171  |        unsigned int m_bMessage  :1;
                            10578 ; 172  |        unsigned int m_bTimer    :1;
                            10579 ; 173  |        unsigned int m_bButton   :1;
                            10580 ; 174  |    } B;
                            10581 ; 175  |    int I;
                            10582 ; 176  |} ;
                            10583 ; 177  |
                            10584 ; 178  |
                            10585 ; 179  |struct Button {
                            10586 ; 180  |        WORD wButtonEvent;
                            10587 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10588 ; 182  |};
                            10589 ; 183  |
                            10590 ; 184  |struct Message {
                            10591 ; 185  |        WORD wMsgLength;
                            10592 ; 186  |        WORD wMsgCommand;
                            10593 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10594 ; 188  |};
                            10595 ; 189  |
                            10596 ; 190  |union EventTypes {
                            10597 ; 191  |        struct CMessage msg;
                            10598 ; 192  |        struct Button Button ;
                            10599 ; 193  |        struct Message Message;
                            10600 ; 194  |};
                            10601 ; 195  |
                            10602 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10603 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10604 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10605 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10606 ; 200  |
                            10607 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10608 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10609 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10610 ; 204  |
                            10611 ; 205  |#if DEBUG
                            10612 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10613 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10614 ; 208  |#else 
                            10615 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            10616 ; 210  |#define DebugBuildAssert(x)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10617 ; 211  |#endif
                            10618 ; 212  |
                            10619 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10620 ; 214  |//  #pragma asm
                            10621 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10622 ; 216  |//  #pragma endasm
                            10623 ; 217  |
                            10624 ; 218  |
                            10625 ; 219  |#ifdef COLOR_262K
                            10626 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            10627 ; 221  |#elif defined(COLOR_65K)
                            10628 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10629 ; 223  |#else
                            10630 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10631 ; 225  |#endif
                            10632 ; 226  |    
                            10633 ; 227  |#endif // #ifndef _TYPES_H
                            10634 
                            10636 
                            10637 ; 29   |
                            10638 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10639 ; 31   |//   TIMER STMP Registers 
                            10640 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10641 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            10642 ; 34   |
                            10643 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            10644 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            10645 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            10646 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            10647 ; 39   |
                            10648 ; 40   |#define HW_TIMER_NUMBER_0 0
                            10649 ; 41   |#define HW_TIMER_NUMBER_1 1
                            10650 ; 42   |#define HW_TIMER_NUMBER_2 2
                            10651 ; 43   |#define HW_TIMER_NUMBER_3 3
                            10652 ; 44   |
                            10653 ; 45   |#define HW_TMRCSR 0
                            10654 ; 46   |#define HW_TMRCNTR 1
                            10655 ; 47   |
                            10656 ; 48   |
                            10657 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            10658 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            10659 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            10660 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            10661 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            10662 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            10663 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            10664 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            10665 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            10666 ; 58   |
                            10667 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            10668 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            10669 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            10670 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            10671 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            10672 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            10673 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            10674 ; 66   |
                            10675 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CSR_TIMER_ENABLE_BITPOS)
                            10676 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CSR_TIMER_INT_EN_BITPOS)
                            10677 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BITPOS)
                            10678 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0CSR_TIMER_CONTROL_BITPOS)
                            10679 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CSR_TIMER_STATUS_BITPOS)
                            10680 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TIMER_MODE_BITPOS)
                            10681 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS)
                            10682 ; 74   |
                            10683 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            10684 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            10685 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            10686 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            10687 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            10688 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            10689 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            10690 ; 82   |
                            10691 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            10692 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            10693 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            10694 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            10695 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            10696 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            10697 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            10698 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            10699 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            10700 ; 92   |
                            10701 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            10702 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            10703 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            10704 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            10705 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            10706 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            10707 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            10708 ; 100  |
                            10709 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CSR_TIMER_ENABLE_BITPOS)
                            10710 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CSR_TIMER_INT_EN_BITPOS)
                            10711 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BITPOS)
                            10712 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1CSR_TIMER_CONTROL_BITPOS)
                            10713 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CSR_TIMER_STATUS_BITPOS)
                            10714 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TIMER_MODE_BITPOS)
                            10715 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS)
                            10716 ; 108  |
                            10717 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            10718 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            10719 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            10720 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            10721 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            10722 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            10723 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            10724 ; 116  |
                            10725 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            10726 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            10727 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            10728 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            10729 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            10730 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            10731 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            10732 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            10733 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            10734 ; 126  |
                            10735 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            10736 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            10737 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            10738 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            10739 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            10740 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            10741 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            10742 ; 134  |
                            10743 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CSR_TIMER_ENABLE_BITPOS)
                            10744 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CSR_TIMER_INT_EN_BITPOS)
                            10745 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BITPOS)
                            10746 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2CSR_TIMER_CONTROL_BITPOS)
                            10747 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CSR_TIMER_STATUS_BITPOS)
                            10748 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TIMER_MODE_BITPOS)
                            10749 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS)
                            10750 ; 142  |
                            10751 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            10752 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            10753 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            10754 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            10755 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            10756 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            10757 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            10758 ; 150  |
                            10759 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            10760 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            10761 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            10762 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            10763 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            10764 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            10765 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            10766 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            10767 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            10768 ; 160  |
                            10769 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            10770 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            10771 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            10772 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            10773 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            10774 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            10775 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            10776 ; 168  |
                            10777 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CSR_TIMER_ENABLE_BITPOS)
                            10778 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CSR_TIMER_INT_EN_BITPOS)
                            10779 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BITPOS)
                            10780 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3CSR_TIMER_CONTROL_BITPOS)
                            10781 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CSR_TIMER_STATUS_BITPOS)
                            10782 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TIMER_MODE_BITPOS)
                            10783 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS)
                            10784 ; 176  |
                            10785 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            10786 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            10787 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            10788 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            10789 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            10790 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            10791 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            10792 ; 184  |
                            10793 ; 185  |typedef union               
                            10794 ; 186  |{
                            10795 ; 187  |    struct {
                            10796 ; 188  |       int TIMER_ENABLE              :1;
                            10797 ; 189  |       int TIMER_INT_EN              :1;
                            10798 ; 190  |       int INVERT                    :1;
                            10799 ; 191  |       int TIMER_CONTROL             :3;
                            10800 ; 192  |       int RSVD0                     :1;
                            10801 ; 193  |       int TIMER_STATUS              :1;
                            10802 ; 194  |       int TIMER_MODE                :2;
                            10803 ; 195  |       int RSVD1                     :13;
                            10804 ; 196  |       int CLKGT                     :1;
                            10805 ; 197  |    } B;
                            10806 ; 198  |    int I;
                            10807 ; 199  |} timercsr_type;
                            10808 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /* Timer0 Control Status Register */
                            10809 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /* Timer1 Control Status Register */
                            10810 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /* Timer2 Control Status Register */
                            10811 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /* Timer3 Control Status Register */
                            10812 ; 204  |
                            10813 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            10814 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            10815 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            10816 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            10817 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BITPOS)
                            10818 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            10819 ; 211  |
                            10820 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            10821 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            10822 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            10823 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            10824 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BITPOS)
                            10825 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            10826 ; 218  |
                            10827 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            10828 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            10829 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            10830 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            10831 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BITPOS)
                            10832 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            10833 ; 225  |
                            10834 ; 226  |typedef union               
                            10835 ; 227  |{
                            10836 ; 228  |    struct {
                            10837 ; 229  |       int COUNT                    :24;
                            10838 ; 230  |    } B;
                            10839 ; 231  |    int I;
                            10840 ; 232  |} tmrcntr_type;
                            10841 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /* Timer0 Count Register */
                            10842 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /* Timer1 Count Register */
                            10843 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /* Timer2 Count Register */
                            10844 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /* Timer3 Count Register */
                            10845 ; 237  |
                            10846 ; 238  |
                            10847 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                            10848 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                            10849 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            10850 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            10851 ; 243  |
                            10852 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            10853 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            10854 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            10855 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            10856 ; 248  |
                            10857 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            10858 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            10859 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            10860 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            10861 ; 253  |
                            10862 ; 254  |// Timer enable
                            10863 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            10864 ; 256  |// Timer clock gating control
                            10865 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            10866 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            10867 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            10868 ; 260  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10869 ; 261  |
                            10870 ; 262  |
                            10871 ; 263  |
                            10872 ; 264  |
                            10873 
                            10875 
                            10876 ; 36   |#include "regsusb20.h"
                            10877 
                            10879 
                            10880 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10881 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            10882 ; 3    |//;  File        : regsusb20ip.inc
                            10883 ; 4    |//;  Description : USB20 IP Register definition
                            10884 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10885 ; 6    |
                            10886 ; 7    |// The following naming conventions are followed in this file.
                            10887 ; 8    |// All registers are named using the format...
                            10888 ; 9    |//     HW_<module>_<regname>
                            10889 ; 10   |// where <module> is the module name which can be any of the following...
                            10890 ; 11   |//     USB20
                            10891 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            10892 ; 13   |// module name includes a number starting from 0 for the first instance of
                            10893 ; 14   |// that module)
                            10894 ; 15   |// <regname> is the specific register within that module
                            10895 ; 16   |// We also define the following...
                            10896 ; 17   |//     HW_<module>_<regname>_BITPOS
                            10897 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10898 ; 19   |//     HW_<module>_<regname>_SETMASK
                            10899 ; 20   |// which does something else, and
                            10900 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            10901 ; 22   |// which does something else.
                            10902 ; 23   |// Other rules
                            10903 ; 24   |//     All caps
                            10904 ; 25   |//     Numeric identifiers start at 0
                            10905 ; 26   |
                            10906 ; 27   |#if !(defined(regsusb20inc))
                            10907 ; 28   |#define regsusb20inc 1
                            10908 ; 29   |
                            10909 ; 30   |#include "types.h"
                            10910 
                            10912 
                            10913 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10914 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10915 ; 3    |//
                            10916 ; 4    |// Filename: types.h
                            10917 ; 5    |// Description: Standard data types
                            10918 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10919 ; 7    |
                            10920 ; 8    |#ifndef _TYPES_H
                            10921 ; 9    |#define _TYPES_H
                            10922 ; 10   |
                            10923 ; 11   |// TODO:  move this outta here!
                            10924 ; 12   |#if !defined(NOERROR)
                            10925 ; 13   |#define NOERROR 0
                            10926 ; 14   |#define SUCCESS 0
                            10927 ; 15   |#endif 
                            10928 ; 16   |#if !defined(SUCCESS)
                            10929 ; 17   |#define SUCCESS  0
                            10930 ; 18   |#endif
                            10931 ; 19   |#if !defined(ERROR)
                            10932 ; 20   |#define ERROR   -1
                            10933 ; 21   |#endif
                            10934 ; 22   |#if !defined(FALSE)
                            10935 ; 23   |#define FALSE 0
                            10936 ; 24   |#endif
                            10937 ; 25   |#if !defined(TRUE)
                            10938 ; 26   |#define TRUE  1
                            10939 ; 27   |#endif
                            10940 ; 28   |
                            10941 ; 29   |#if !defined(NULL)
                            10942 ; 30   |#define NULL 0
                            10943 ; 31   |#endif
                            10944 ; 32   |
                            10945 ; 33   |#define MAX_INT     0x7FFFFF
                            10946 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10947 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10948 ; 36   |#define MAX_ULONG   (-1) 
                            10949 ; 37   |
                            10950 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10951 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10952 ; 40   |
                            10953 ; 41   |
                            10954 ; 42   |#define BYTE    unsigned char       // btVarName
                            10955 ; 43   |#define CHAR    signed char         // cVarName
                            10956 ; 44   |#define USHORT  unsigned short      // usVarName
                            10957 ; 45   |#define SHORT   unsigned short      // sVarName
                            10958 ; 46   |#define WORD    unsigned int        // wVarName
                            10959 ; 47   |#define INT     signed int          // iVarName
                            10960 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10961 ; 49   |#define LONG    signed long         // lVarName
                            10962 ; 50   |#define BOOL    unsigned int        // bVarName
                            10963 ; 51   |#define FRACT   _fract              // frVarName
                            10964 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10965 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10966 ; 54   |#define FLOAT   float               // fVarName
                            10967 ; 55   |#define DBL     double              // dVarName
                            10968 ; 56   |#define ENUM    enum                // eVarName
                            10969 ; 57   |#define CMX     _complex            // cmxVarName
                            10970 ; 58   |typedef WORD UCS3;                   // 
                            10971 ; 59   |
                            10972 ; 60   |#define UINT16  unsigned short
                            10973 ; 61   |#define UINT8   unsigned char   
                            10974 ; 62   |#define UINT32  unsigned long
                            10975 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10976 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10977 ; 65   |#define WCHAR   UINT16
                            10978 ; 66   |
                            10979 ; 67   |//UINT128 is 16 bytes or 6 words
                            10980 ; 68   |typedef struct UINT128_3500 {   
                            10981 ; 69   |    int val[6];     
                            10982 ; 70   |} UINT128_3500;
                            10983 ; 71   |
                            10984 ; 72   |#define UINT128   UINT128_3500
                            10985 ; 73   |
                            10986 ; 74   |// Little endian word packed byte strings:   
                            10987 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10988 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10989 ; 77   |// Little endian word packed byte strings:   
                            10990 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10991 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10992 ; 80   |
                            10993 ; 81   |// Declare Memory Spaces To Use When Coding
                            10994 ; 82   |// A. Sector Buffers
                            10995 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10996 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10997 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10998 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10999 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11000 ; 88   |// B. Media DDI Memory
                            11001 ; 89   |#define MEDIA_DDI_MEM _Y
                            11002 ; 90   |
                            11003 ; 91   |
                            11004 ; 92   |
                            11005 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11006 ; 94   |// Examples of circular pointers:
                            11007 ; 95   |//    INT CIRC cpiVarName
                            11008 ; 96   |//    DWORD CIRC cpdwVarName
                            11009 ; 97   |
                            11010 ; 98   |#define RETCODE INT                 // rcVarName
                            11011 ; 99   |
                            11012 ; 100  |// generic bitfield structure
                            11013 ; 101  |struct Bitfield {
                            11014 ; 102  |    unsigned int B0  :1;
                            11015 ; 103  |    unsigned int B1  :1;
                            11016 ; 104  |    unsigned int B2  :1;
                            11017 ; 105  |    unsigned int B3  :1;
                            11018 ; 106  |    unsigned int B4  :1;
                            11019 ; 107  |    unsigned int B5  :1;
                            11020 ; 108  |    unsigned int B6  :1;
                            11021 ; 109  |    unsigned int B7  :1;
                            11022 ; 110  |    unsigned int B8  :1;
                            11023 ; 111  |    unsigned int B9  :1;
                            11024 ; 112  |    unsigned int B10 :1;
                            11025 ; 113  |    unsigned int B11 :1;
                            11026 ; 114  |    unsigned int B12 :1;
                            11027 ; 115  |    unsigned int B13 :1;
                            11028 ; 116  |    unsigned int B14 :1;
                            11029 ; 117  |    unsigned int B15 :1;
                            11030 ; 118  |    unsigned int B16 :1;
                            11031 ; 119  |    unsigned int B17 :1;
                            11032 ; 120  |    unsigned int B18 :1;
                            11033 ; 121  |    unsigned int B19 :1;
                            11034 ; 122  |    unsigned int B20 :1;
                            11035 ; 123  |    unsigned int B21 :1;
                            11036 ; 124  |    unsigned int B22 :1;
                            11037 ; 125  |    unsigned int B23 :1;
                            11038 ; 126  |};
                            11039 ; 127  |
                            11040 ; 128  |union BitInt {
                            11041 ; 129  |        struct Bitfield B;
                            11042 ; 130  |        int        I;
                            11043 ; 131  |};
                            11044 ; 132  |
                            11045 ; 133  |#define MAX_MSG_LENGTH 10
                            11046 ; 134  |struct CMessage
                            11047 ; 135  |{
                            11048 ; 136  |        unsigned int m_uLength;
                            11049 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11050 ; 138  |};
                            11051 ; 139  |
                            11052 ; 140  |typedef struct {
                            11053 ; 141  |    WORD m_wLength;
                            11054 ; 142  |    WORD m_wMessage;
                            11055 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11056 ; 144  |} Message;
                            11057 ; 145  |
                            11058 ; 146  |struct MessageQueueDescriptor
                            11059 ; 147  |{
                            11060 ; 148  |        int *m_pBase;
                            11061 ; 149  |        int m_iModulo;
                            11062 ; 150  |        int m_iSize;
                            11063 ; 151  |        int *m_pHead;
                            11064 ; 152  |        int *m_pTail;
                            11065 ; 153  |};
                            11066 ; 154  |
                            11067 ; 155  |struct ModuleEntry
                            11068 ; 156  |{
                            11069 ; 157  |    int m_iSignaledEventMask;
                            11070 ; 158  |    int m_iWaitEventMask;
                            11071 ; 159  |    int m_iResourceOfCode;
                            11072 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11073 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            11074 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11075 ; 163  |    int m_uTimeOutHigh;
                            11076 ; 164  |    int m_uTimeOutLow;
                            11077 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11078 ; 166  |};
                            11079 ; 167  |
                            11080 ; 168  |union WaitMask{
                            11081 ; 169  |    struct B{
                            11082 ; 170  |        unsigned int m_bNone     :1;
                            11083 ; 171  |        unsigned int m_bMessage  :1;
                            11084 ; 172  |        unsigned int m_bTimer    :1;
                            11085 ; 173  |        unsigned int m_bButton   :1;
                            11086 ; 174  |    } B;
                            11087 ; 175  |    int I;
                            11088 ; 176  |} ;
                            11089 ; 177  |
                            11090 ; 178  |
                            11091 ; 179  |struct Button {
                            11092 ; 180  |        WORD wButtonEvent;
                            11093 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11094 ; 182  |};
                            11095 ; 183  |
                            11096 ; 184  |struct Message {
                            11097 ; 185  |        WORD wMsgLength;
                            11098 ; 186  |        WORD wMsgCommand;
                            11099 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11100 ; 188  |};
                            11101 ; 189  |
                            11102 ; 190  |union EventTypes {
                            11103 ; 191  |        struct CMessage msg;
                            11104 ; 192  |        struct Button Button ;
                            11105 ; 193  |        struct Message Message;
                            11106 ; 194  |};
                            11107 ; 195  |
                            11108 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11109 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11110 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11111 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11112 ; 200  |
                            11113 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11114 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11115 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11116 ; 204  |
                            11117 ; 205  |#if DEBUG
                            11118 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11119 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11120 ; 208  |#else 
                            11121 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            11122 ; 210  |#define DebugBuildAssert(x)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11123 ; 211  |#endif
                            11124 ; 212  |
                            11125 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11126 ; 214  |//  #pragma asm
                            11127 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11128 ; 216  |//  #pragma endasm
                            11129 ; 217  |
                            11130 ; 218  |
                            11131 ; 219  |#ifdef COLOR_262K
                            11132 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            11133 ; 221  |#elif defined(COLOR_65K)
                            11134 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            11135 ; 223  |#else
                            11136 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            11137 ; 225  |#endif
                            11138 ; 226  |    
                            11139 ; 227  |#endif // #ifndef _TYPES_H
                            11140 
                            11142 
                            11143 ; 31   |
                            11144 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11145 ; 33   |//   USB2.0 STMP Registers 
                            11146 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11147 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            11148 ; 36   |
                            11149 ; 37   |
                            11150 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            11151 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            11152 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            11153 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            11154 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            11155 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            11156 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            11157 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            11158 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            11159 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            11160 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            11161 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            11162 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            11163 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            11164 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            11165 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            11166 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            11167 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            11168 ; 56   |
                            11169 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            11170 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            11171 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            11172 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            11173 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            11174 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            11175 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            11176 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            11177 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            11178 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            11179 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            11180 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            11181 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            11182 ; 70   |
                            11183 ; 71   |
                            11184 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            11185 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            11186 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            11187 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            11188 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            11189 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            11190 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            11191 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            11192 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            11193 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            11194 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            11195 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            11196 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            11197 ; 85   |
                            11198 ; 86   |typedef union               
                            11199 ; 87   |{
                            11200 ; 88   |    struct {
                            11201 ; 89   |        int USBEN          :1;
                            11202 ; 90   |        int WAKEUPIRQ      :1;
                            11203 ; 91   |        int WAKEUPIE       :1;
                            11204 ; 92   |        int VBUSCXIRQ      :1;
                            11205 ; 93   |        int VBUSCXIE       :1;
                            11206 ; 94   |        int VBUSDISCXIRQ   :1;
                            11207 ; 95   |        int VBUSDISCXIE    :1;
                            11208 ; 96   |        int CLKOFF         :1;
                            11209 ; 97   |        int SUSP           :1;
                            11210 ; 98   |        int SUSPF          :1;
                            11211 ; 99   |        int UTMITST        :1;
                            11212 ; 100  |        int ARCCONNECT     :1;
                            11213 ; 101  |        int PLUGGEDIN_EN   :1;
                            11214 ; 102  |        int PLUGGEDIN      :1;
                            11215 ; 103  |        int                :8;
                            11216 ; 104  |        int HOSTDISCONNECT :1;
                            11217 ; 105  |        int VBUSSENSE      :1;
                            11218 ; 106  |    } B;
                            11219 ; 107  |    int I;
                            11220 ; 108  |} usbcsr_type;
                            11221 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control / Status Register */
                            11222 ; 110  |
                            11223 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            11224 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            11225 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            11226 ; 114  |
                            11227 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            11228 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            11229 ; 117  |
                            11230 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            11231 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            11232 ; 120  |
                            11233 ; 121  |typedef union               
                            11234 ; 122  |{
                            11235 ; 123  |    struct {
                            11236 ; 124  |        int ADD            :16;
                            11237 ; 125  |        int MEM            :2;
                            11238 ; 126  |        int                :6;
                            11239 ; 127  |    } B;
                            11240 ; 128  |    int I;
                            11241 ; 129  |} usbdmaoff_type;
                            11242 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            11243 ; 131  |
                            11244 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            11245 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            11246 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            11247 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            11248 ; 136  |
                            11249 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            11250 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            11251 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            11252 ; 140  |
                            11253 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            11254 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            11255 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            11256 ; 144  |
                            11257 ; 145  |typedef union               
                            11258 ; 146  |{
                            11259 ; 147  |    struct {
                            11260 ; 148  |        int ADD            :9;
                            11261 ; 149  |        int                :7;
                            11262 ; 150  |        int RWB            :1;
                            11263 ; 151  |        int                :14;
                            11264 ; 152  |        int KICK           :1;
                            11265 ; 153  |    } B;
                            11266 ; 154  |    int I;
                            11267 ; 155  |} usbarcaccess_type;
                            11268 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            11269 ; 157  |
                            11270 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            11271 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            11272 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            11273 ; 161  |
                            11274 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            11275 ; 163  |
                            11276 ; 164  |typedef union               
                            11277 ; 165  |{
                            11278 ; 166  |    struct {
                            11279 ; 167  |        int DATA           :16;
                            11280 ; 168  |        int                :8;
                            11281 ; 169  |    } B;
                            11282 ; 170  |    int I;
                            11283 ; 171  |} usbarcdatalow_type;
                            11284 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                            11285 ; 173  |
                            11286 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            11287 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            11288 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            11289 ; 177  |
                            11290 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            11291 ; 179  |
                            11292 ; 180  |typedef union               
                            11293 ; 181  |{
                            11294 ; 182  |    struct {
                            11295 ; 183  |        int DATA           :16;
                            11296 ; 184  |        int                :8;
                            11297 ; 185  |    } B;
                            11298 ; 186  |    int I;
                            11299 ; 187  |} usbarcdatahigh_type;
                            11300 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))    
                            11301 ; 189  |
                            11302 ; 190  |
                            11303 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11304 ; 192  |//   USB2.0 ARC Registers 
                            11305 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11306 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            11307 ; 195  |
                            11308 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            11309 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            11310 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            11311 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            11312 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            11313 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            11314 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            11315 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            11316 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            11317 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            11318 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            11319 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            11320 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            11321 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            11322 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            11323 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            11324 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            11325 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            11326 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            11327 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            11328 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            11329 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            11330 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            11331 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            11332 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            11333 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            11334 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            11335 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            11336 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            11337 ; 225  |
                            11338 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            11339 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            11340 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            11341 ; 229  |
                            11342 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            11343 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            11344 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            11345 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            11346 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            11347 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            11348 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            11349 ; 237  |
                            11350 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            11351 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            11352 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            11353 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            11354 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            11355 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            11356 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            11357 ; 245  |
                            11358 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            11359 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            11360 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            11361 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            11362 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            11363 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            11364 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            11365 ; 253  |
                            11366 ; 254  |typedef union               
                            11367 ; 255  |{
                            11368 ; 256  |    struct {
                            11369 ; 257  |        int N_PORTS         :4;
                            11370 ; 258  |        int PPC             :1;
                            11371 ; 259  |        int                 :3;
                            11372 ; 260  |        int N_PCC           :4;
                            11373 ; 261  |        int N_CC            :4;
                            11374 ; 262  |        int PI              :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11375 ; 263  |        int                 :3;
                            11376 ; 264  |        int N_PTT           :4;
                            11377 ; 265  |        int N_TT            :4;
                            11378 ; 266  |        int                 :20;
                            11379 ; 267  |    } B;
                            11380 ; 268  |    DWORD I;
                            11381 ; 269  |} hcsparams_type;
                            11382 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            11383 ; 271  |
                            11384 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            11385 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            11386 ; 274  |
                            11387 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            11388 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            11389 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            11390 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            11391 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            11392 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            11393 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            11394 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            11395 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            11396 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            11397 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            11398 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            11399 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            11400 ; 288  |
                            11401 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            11402 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            11403 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            11404 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            11405 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            11406 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            11407 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            11408 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            11409 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            11410 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            11411 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            11412 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            11413 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            11414 ; 302  |
                            11415 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            11416 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            11417 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            11418 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            11419 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            11420 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            11421 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            11422 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            11423 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            11424 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            11425 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            11426 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            11427 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            11428 ; 316  |
                            11429 ; 317  |typedef union               
                            11430 ; 318  |{
                            11431 ; 319  |    struct {
                            11432 ; 320  |        int RS              :1;
                            11433 ; 321  |        int RST             :1;
                            11434 ; 322  |        int FS0             :1;
                            11435 ; 323  |        int FS1             :1;
                            11436 ; 324  |        int PSE             :1;
                            11437 ; 325  |        int ASE             :1;
                            11438 ; 326  |        int IAA             :1;
                            11439 ; 327  |        int LR              :1;
                            11440 ; 328  |        int ASP0            :1;
                            11441 ; 329  |        int ASP1            :1;
                            11442 ; 330  |        int                 :1;
                            11443 ; 331  |        int ASPE            :1;
                            11444 ; 332  |        int                 :3;
                            11445 ; 333  |        int FS2             :1;
                            11446 ; 334  |        int ITC             :8;
                            11447 ; 335  |        int                 :24;
                            11448 ; 336  |    } B;
                            11449 ; 337  |    DWORD I;
                            11450 ; 338  |} usbcmd_type;
                            11451 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            11452 ; 340  |
                            11453 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            11454 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            11455 ; 343  |
                            11456 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            11457 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            11458 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            11459 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            11460 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            11461 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            11462 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            11463 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            11464 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            11465 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            11466 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            11467 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            11468 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            11469 ; 357  |
                            11470 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            11471 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            11472 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            11473 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            11474 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            11475 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            11476 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            11477 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            11478 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            11479 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            11480 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            11481 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            11482 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            11483 ; 371  |
                            11484 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            11485 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            11486 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            11487 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            11488 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            11489 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            11490 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            11491 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            11492 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            11493 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            11494 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                            11495 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            11496 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            11497 ; 385  |
                            11498 ; 386  |
                            11499 ; 387  |typedef union               
                            11500 ; 388  |{
                            11501 ; 389  |    struct {
                            11502 ; 390  |        int UI              :1;
                            11503 ; 391  |        int UEI             :1;
                            11504 ; 392  |        int PCI             :1;
                            11505 ; 393  |        int FRI             :1;
                            11506 ; 394  |        int SEI             :1;
                            11507 ; 395  |        int AAI             :1;
                            11508 ; 396  |        int URI             :1;
                            11509 ; 397  |        int STI             :1;
                            11510 ; 398  |        int SLI             :1;
                            11511 ; 399  |        int                 :3;
                            11512 ; 400  |        int HCH             :1;
                            11513 ; 401  |        int RCL             :1;
                            11514 ; 402  |        int PS              :1;
                            11515 ; 403  |        int AS              :1;
                            11516 ; 404  |        int                 :24;
                            11517 ; 405  |    } B;
                            11518 ; 406  |    DWORD I;
                            11519 ; 407  |} usbsts_type;
                            11520 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            11521 ; 409  |
                            11522 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            11523 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            11524 ; 412  |
                            11525 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            11526 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            11527 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            11528 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            11529 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            11530 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            11531 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            11532 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            11533 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            11534 ; 422  |
                            11535 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            11536 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            11537 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            11538 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            11539 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            11540 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            11541 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            11542 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            11543 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            11544 ; 432  |
                            11545 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            11546 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            11547 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            11548 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            11549 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            11550 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            11551 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            11552 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            11553 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            11554 ; 442  |
                            11555 ; 443  |
                            11556 ; 444  |typedef union               
                            11557 ; 445  |{
                            11558 ; 446  |    struct {
                            11559 ; 447  |        int UE              :1;
                            11560 ; 448  |        int UEE             :1;
                            11561 ; 449  |        int PCE             :1;
                            11562 ; 450  |        int FRE             :1;
                            11563 ; 451  |        int SEE             :1;
                            11564 ; 452  |        int AAE             :1;
                            11565 ; 453  |        int URE             :1;
                            11566 ; 454  |        int STE             :1;
                            11567 ; 455  |        int SLE             :1;
                            11568 ; 456  |        int                 :39;
                            11569 ; 457  |    } B;
                            11570 ; 458  |    DWORD I;
                            11571 ; 459  |} usbintr_type;
                            11572 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            11573 ; 461  |
                            11574 ; 462  |
                            11575 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            11576 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            11577 ; 465  |
                            11578 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            11579 ; 467  |
                            11580 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            11581 ; 469  |
                            11582 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            11583 ; 471  |
                            11584 ; 472  |typedef union               
                            11585 ; 473  |{
                            11586 ; 474  |    struct {
                            11587 ; 475  |        int                 :25;
                            11588 ; 476  |        int ADD             :7;
                            11589 ; 477  |        int                 :16;
                            11590 ; 478  |    } B;
                            11591 ; 479  |    DWORD I;
                            11592 ; 480  |} devaddr_type;
                            11593 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            11594 ; 482  |
                            11595 ; 483  |
                            11596 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            11597 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            11598 ; 486  |
                            11599 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            11600 ; 488  |
                            11601 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            11602 ; 490  |
                            11603 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            11604 ; 492  |
                            11605 ; 493  |typedef union               
                            11606 ; 494  |{
                            11607 ; 495  |    struct {
                            11608 ; 496  |        int                 :10;
                            11609 ; 497  |        int ADD             :22;
                            11610 ; 498  |        int                 :16;
                            11611 ; 499  |    } B;
                            11612 ; 500  |    DWORD I;
                            11613 ; 501  |} endptlistaddr_type;
                            11614 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158))    
                            11615 ; 503  |
                            11616 ; 504  |
                            11617 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            11618 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            11619 ; 507  |
                            11620 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            11621 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            11622 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            11623 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            11624 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            11625 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11626 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            11627 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            11628 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            11629 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            11630 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            11631 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            11632 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            11633 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            11634 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            11635 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            11636 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            11637 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            11638 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            11639 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            11640 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            11641 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            11642 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            11643 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            11644 ; 532  |
                            11645 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            11646 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            11647 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            11648 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            11649 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            11650 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            11651 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            11652 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            11653 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            11654 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            11655 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            11656 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            11657 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            11658 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            11659 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            11660 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            11661 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            11662 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            11663 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            11664 ; 552  |
                            11665 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            11666 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            11667 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            11668 ; 556  |
                            11669 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            11670 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            11671 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            11672 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            11673 ; 561  |
                            11674 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            11675 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            11676 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            11677 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            11678 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            11679 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            11680 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            11681 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            11682 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            11683 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            11684 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            11685 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            11686 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            11687 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            11688 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            11689 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            11690 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            11691 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            11692 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            11693 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            11694 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            11695 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            11696 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            11697 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            11698 ; 586  |
                            11699 ; 587  |typedef union               
                            11700 ; 588  |{
                            11701 ; 589  |    struct {
                            11702 ; 590  |        int CCS             :1;
                            11703 ; 591  |        int CSC             :1;
                            11704 ; 592  |        int PE              :1;
                            11705 ; 593  |        int PEC             :1;
                            11706 ; 594  |        int OCA             :1;
                            11707 ; 595  |        int OCC             :1;
                            11708 ; 596  |        int FPR             :1;
                            11709 ; 597  |        int SUSP            :1;
                            11710 ; 598  |        int PR              :1;
                            11711 ; 599  |        int HSP             :1;
                            11712 ; 600  |        int LS              :2;
                            11713 ; 601  |        int PP              :1;
                            11714 ; 602  |        int PO              :1;
                            11715 ; 603  |        int PIC             :2;
                            11716 ; 604  |        int PTC             :4;
                            11717 ; 605  |        int WKCN            :1;
                            11718 ; 606  |        int WKDS            :1;
                            11719 ; 607  |        int WKOC            :1;
                            11720 ; 608  |        int PHCD            :1;
                            11721 ; 609  |        int PFSC            :1;
                            11722 ; 610  |        int                 :1;
                            11723 ; 611  |        int PSPD            :2;
                            11724 ; 612  |        int                 :1;
                            11725 ; 613  |        int PTW             :1;
                            11726 ; 614  |        int STS             :1;
                            11727 ; 615  |        int PTS             :1;
                            11728 ; 616  |        int                 :16;
                            11729 ; 617  |    } B;
                            11730 ; 618  |    DWORD I;
                            11731 ; 619  |} portsc1_type;
                            11732 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            11733 ; 621  |
                            11734 ; 622  |
                            11735 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            11736 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            11737 ; 625  |
                            11738 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            11739 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            11740 ; 628  |
                            11741 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            11742 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            11743 ; 631  |
                            11744 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            11745 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                            11746 ; 634  |
                            11747 ; 635  |typedef union               
                            11748 ; 636  |{
                            11749 ; 637  |    struct {
                            11750 ; 638  |        int CM              :2;
                            11751 ; 639  |        int ES              :1;
                            11752 ; 640  |        int                 :46;
                            11753 ; 641  |    } B;
                            11754 ; 642  |    DWORD I;
                            11755 ; 643  |} usbmode_type;
                            11756 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            11757 ; 645  |
                            11758 ; 646  |
                            11759 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            11760 ; 648  |//  The following endpoint equates are common for the following registers
                            11761 ; 649  |
                            11762 ; 650  |#define ENDPOINT0_BITPOS (0)
                            11763 ; 651  |#define ENDPOINT1_BITPOS (1)
                            11764 ; 652  |#define ENDPOINT2_BITPOS (2)
                            11765 ; 653  |#define ENDPOINT3_BITPOS (3)
                            11766 ; 654  |#define ENDPOINT4_BITPOS (4)
                            11767 ; 655  |#define ENDPOINT5_BITPOS (5)
                            11768 ; 656  |#define ENDPOINT6_BITPOS (6)
                            11769 ; 657  |#define ENDPOINT7_BITPOS (7)
                            11770 ; 658  |#define ENDPOINT8_BITPOS (8)
                            11771 ; 659  |#define ENDPOINT9_BITPOS (9)
                            11772 ; 660  |#define ENDPOINT10_BITPOS (10)
                            11773 ; 661  |#define ENDPOINT11_BITPOS (11)
                            11774 ; 662  |#define ENDPOINT12_BITPOS (12)
                            11775 ; 663  |#define ENDPOINT13_BITPOS (13)
                            11776 ; 664  |#define ENDPOINT14_BITPOS (14)
                            11777 ; 665  |#define ENDPOINT15_BITPOS (15)
                            11778 ; 666  |
                            11779 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            11780 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            11781 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            11782 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            11783 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            11784 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            11785 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            11786 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            11787 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            11788 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            11789 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            11790 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            11791 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            11792 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            11793 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            11794 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            11795 ; 683  |
                            11796 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            11797 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            11798 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            11799 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            11800 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            11801 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            11802 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            11803 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            11804 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            11805 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            11806 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            11807 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            11808 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            11809 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            11810 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            11811 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            11812 ; 700  |
                            11813 ; 701  |typedef union               
                            11814 ; 702  |{
                            11815 ; 703  |    struct {
                            11816 ; 704  |        int EP0              :1;
                            11817 ; 705  |        int EP1              :1;
                            11818 ; 706  |        int EP2              :1;
                            11819 ; 707  |        int EP3              :1;
                            11820 ; 708  |        int EP4              :1;
                            11821 ; 709  |        int EP5              :1;
                            11822 ; 710  |        int EP6              :1;
                            11823 ; 711  |        int EP7              :1;
                            11824 ; 712  |        int EP8              :1;
                            11825 ; 713  |        int EP9              :1;
                            11826 ; 714  |        int EP10             :1;
                            11827 ; 715  |        int EP11             :1;
                            11828 ; 716  |        int EP12             :1;
                            11829 ; 717  |        int EP13             :1;
                            11830 ; 718  |        int EP14             :1;
                            11831 ; 719  |        int EP15             :1;
                            11832 ; 720  |        int                  :32;
                            11833 ; 721  |    } B;
                            11834 ; 722  |    DWORD I;
                            11835 ; 723  |} endpsetupstat_type;
                            11836 ; 724  |
                            11837 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac))    
                            11838 ; 726  |
                            11839 ; 727  |typedef union               
                            11840 ; 728  |{
                            11841 ; 729  |    struct {
                            11842 ; 730  |        int EP0              :1;
                            11843 ; 731  |        int EP1              :1;
                            11844 ; 732  |        int EP2              :1;
                            11845 ; 733  |        int EP3              :1;
                            11846 ; 734  |        int EP4              :1;
                            11847 ; 735  |        int EP5              :1;
                            11848 ; 736  |        int EP6              :1;
                            11849 ; 737  |        int EP7              :1;
                            11850 ; 738  |        int EP8              :1;
                            11851 ; 739  |        int EP9              :1;
                            11852 ; 740  |        int EP10             :1;
                            11853 ; 741  |        int EP11             :1;
                            11854 ; 742  |        int EP12             :1;
                            11855 ; 743  |        int EP13             :1;
                            11856 ; 744  |        int EP14             :1;
                            11857 ; 745  |        int EP15             :1;
                            11858 ; 746  |        int                  :8;
                            11859 ; 747  |    } B;
                            11860 ; 748  |    WORD I;
                            11861 ; 749  |} endpt_type;
                            11862 
                            11900 
                            11901 ; 750  |
                            11902 ; 751  |typedef union
                            11903 ; 752  |{
                            11904 ; 753  |   struct {
                            11905 ; 754  |       endpt_type  RX;
                            11906 ; 755  |       endpt_type  TX;
                            11907 ; 756  |   } W;
                            11908 ; 757  |   DWORD DW;
                            11909 ; 758  |} endptrxtx_type;
                            11910 ; 759  |
                            11911 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))    
                            11912 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))    
                            11913 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11914 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))    
                            11915 ; 764  |
                            11916 ; 765  |
                            11917 ; 766  |
                            11918 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            11919 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            11920 ; 769  |
                            11921 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            11922 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            11923 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            11924 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            11925 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            11926 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            11927 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            11928 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            11929 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            11930 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            11931 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            11932 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            11933 ; 782  |
                            11934 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            11935 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            11936 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            11937 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            11938 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            11939 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            11940 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            11941 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            11942 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            11943 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            11944 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            11945 ; 794  |
                            11946 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            11947 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11948 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            11949 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11950 ; 799  |
                            11951 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            11952 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            11953 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            11954 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            11955 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            11956 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            11957 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            11958 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            11959 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            11960 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            11961 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            11962 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            11963 ; 812  |
                            11964 ; 813  |
                            11965 ; 814  |typedef union               
                            11966 ; 815  |{
                            11967 ; 816  |    struct {
                            11968 ; 817  |        int RXS             :1;
                            11969 ; 818  |        int RXD             :1;
                            11970 ; 819  |        int RXT             :2;
                            11971 ; 820  |        int                 :1;
                            11972 ; 821  |        int RXI             :1;
                            11973 ; 822  |        int RXR             :1;
                            11974 ; 823  |        int RXE             :1;
                            11975 ; 824  |        int                 :8;
                            11976 ; 825  |        int TXS             :1;
                            11977 ; 826  |        int TXD             :1;
                            11978 ; 827  |        int TXT             :2;
                            11979 ; 828  |        int                 :1;
                            11980 ; 829  |        int TXI             :1;
                            11981 ; 830  |        int TXR             :1;
                            11982 ; 831  |        int TXE             :1;
                            11983 ; 832  |        int                 :24;
                            11984 ; 833  |    } B;
                            11985 ; 834  |    DWORD I;
                            11986 ; 835  |} endptctrl_type;
                            11987 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)))    
                            11988 ; 837  |
                            11989 ; 838  |#endif
                            11990 ; 839  |
                            11991 ; 840  |
                            11992 
                            11994 
                            11995 ; 37   |#include "regsusb20phy.h"
                            11996 
                            11998 
                            11999 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12000 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            12001 ; 3    |//;  File        : regsusbphy.inc
                            12002 ; 4    |//;  Description : USB20 PHY Register definition
                            12003 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            12004 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12005 ; 7    |
                            12006 ; 8    |// The following naming conventions are followed in this file.
                            12007 ; 9    |// All registers are named using the format...
                            12008 ; 10   |//     HW_<module>_<regname>
                            12009 ; 11   |// where <module> is the module name which can be any of the following...
                            12010 ; 12   |//     USB20
                            12011 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            12012 ; 14   |// module name includes a number starting from 0 for the first instance of
                            12013 ; 15   |// that module)
                            12014 ; 16   |// <regname> is the specific register within that module
                            12015 ; 17   |// We also define the following...
                            12016 ; 18   |//     HW_<module>_<regname>_BITPOS
                            12017 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            12018 ; 20   |//     HW_<module>_<regname>_SETMASK
                            12019 ; 21   |// which does something else, and
                            12020 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            12021 ; 23   |// which does something else.
                            12022 ; 24   |// Other rules
                            12023 ; 25   |//     All caps
                            12024 ; 26   |//     Numeric identifiers start at 0
                            12025 ; 27   |
                            12026 ; 28   |#if !(defined(regsusbphyinc))
                            12027 ; 29   |#define regsusbphyinc 1
                            12028 ; 30   |
                            12029 ; 31   |#include "types.h"
                            12030 
                            12032 
                            12033 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            12034 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            12035 ; 3    |//
                            12036 ; 4    |// Filename: types.h
                            12037 ; 5    |// Description: Standard data types
                            12038 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            12039 ; 7    |
                            12040 ; 8    |#ifndef _TYPES_H
                            12041 ; 9    |#define _TYPES_H
                            12042 ; 10   |
                            12043 ; 11   |// TODO:  move this outta here!
                            12044 ; 12   |#if !defined(NOERROR)
                            12045 ; 13   |#define NOERROR 0
                            12046 ; 14   |#define SUCCESS 0
                            12047 ; 15   |#endif 
                            12048 ; 16   |#if !defined(SUCCESS)
                            12049 ; 17   |#define SUCCESS  0
                            12050 ; 18   |#endif
                            12051 ; 19   |#if !defined(ERROR)
                            12052 ; 20   |#define ERROR   -1
                            12053 ; 21   |#endif
                            12054 ; 22   |#if !defined(FALSE)
                            12055 ; 23   |#define FALSE 0
                            12056 ; 24   |#endif
                            12057 ; 25   |#if !defined(TRUE)
                            12058 ; 26   |#define TRUE  1
                            12059 ; 27   |#endif
                            12060 ; 28   |
                            12061 ; 29   |#if !defined(NULL)
                            12062 ; 30   |#define NULL 0
                            12063 ; 31   |#endif
                            12064 ; 32   |
                            12065 ; 33   |#define MAX_INT     0x7FFFFF
                            12066 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            12067 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            12068 ; 36   |#define MAX_ULONG   (-1) 
                            12069 ; 37   |
                            12070 ; 38   |#define WORD_SIZE   24              // word size in bits
                            12071 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            12072 ; 40   |
                            12073 ; 41   |
                            12074 ; 42   |#define BYTE    unsigned char       // btVarName
                            12075 ; 43   |#define CHAR    signed char         // cVarName
                            12076 ; 44   |#define USHORT  unsigned short      // usVarName
                            12077 ; 45   |#define SHORT   unsigned short      // sVarName
                            12078 ; 46   |#define WORD    unsigned int        // wVarName
                            12079 ; 47   |#define INT     signed int          // iVarName
                            12080 ; 48   |#define DWORD   unsigned long       // dwVarName
                            12081 ; 49   |#define LONG    signed long         // lVarName
                            12082 ; 50   |#define BOOL    unsigned int        // bVarName
                            12083 ; 51   |#define FRACT   _fract              // frVarName
                            12084 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            12085 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            12086 ; 54   |#define FLOAT   float               // fVarName
                            12087 ; 55   |#define DBL     double              // dVarName
                            12088 ; 56   |#define ENUM    enum                // eVarName
                            12089 ; 57   |#define CMX     _complex            // cmxVarName
                            12090 ; 58   |typedef WORD UCS3;                   // 
                            12091 ; 59   |
                            12092 ; 60   |#define UINT16  unsigned short
                            12093 ; 61   |#define UINT8   unsigned char   
                            12094 ; 62   |#define UINT32  unsigned long
                            12095 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            12096 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            12097 ; 65   |#define WCHAR   UINT16
                            12098 ; 66   |
                            12099 ; 67   |//UINT128 is 16 bytes or 6 words
                            12100 ; 68   |typedef struct UINT128_3500 {   
                            12101 ; 69   |    int val[6];     
                            12102 ; 70   |} UINT128_3500;
                            12103 ; 71   |
                            12104 ; 72   |#define UINT128   UINT128_3500
                            12105 ; 73   |
                            12106 ; 74   |// Little endian word packed byte strings:   
                            12107 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12108 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12109 ; 77   |// Little endian word packed byte strings:   
                            12110 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12111 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12112 ; 80   |
                            12113 ; 81   |// Declare Memory Spaces To Use When Coding
                            12114 ; 82   |// A. Sector Buffers
                            12115 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            12116 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            12117 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            12118 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            12119 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            12120 ; 88   |// B. Media DDI Memory
                            12121 ; 89   |#define MEDIA_DDI_MEM _Y
                            12122 ; 90   |
                            12123 ; 91   |
                            12124 ; 92   |
                            12125 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            12126 ; 94   |// Examples of circular pointers:
                            12127 ; 95   |//    INT CIRC cpiVarName
                            12128 ; 96   |//    DWORD CIRC cpdwVarName
                            12129 ; 97   |
                            12130 ; 98   |#define RETCODE INT                 // rcVarName
                            12131 ; 99   |
                            12132 ; 100  |// generic bitfield structure
                            12133 ; 101  |struct Bitfield {
                            12134 ; 102  |    unsigned int B0  :1;
                            12135 ; 103  |    unsigned int B1  :1;
                            12136 ; 104  |    unsigned int B2  :1;
                            12137 ; 105  |    unsigned int B3  :1;
                            12138 ; 106  |    unsigned int B4  :1;
                            12139 ; 107  |    unsigned int B5  :1;
                            12140 ; 108  |    unsigned int B6  :1;
                            12141 ; 109  |    unsigned int B7  :1;
                            12142 ; 110  |    unsigned int B8  :1;
                            12143 ; 111  |    unsigned int B9  :1;
                            12144 ; 112  |    unsigned int B10 :1;
                            12145 ; 113  |    unsigned int B11 :1;
                            12146 ; 114  |    unsigned int B12 :1;
                            12147 ; 115  |    unsigned int B13 :1;
                            12148 ; 116  |    unsigned int B14 :1;
                            12149 ; 117  |    unsigned int B15 :1;
                            12150 ; 118  |    unsigned int B16 :1;
                            12151 ; 119  |    unsigned int B17 :1;
                            12152 ; 120  |    unsigned int B18 :1;
                            12153 ; 121  |    unsigned int B19 :1;
                            12154 ; 122  |    unsigned int B20 :1;
                            12155 ; 123  |    unsigned int B21 :1;
                            12156 ; 124  |    unsigned int B22 :1;
                            12157 ; 125  |    unsigned int B23 :1;
                            12158 ; 126  |};
                            12159 ; 127  |
                            12160 ; 128  |union BitInt {
                            12161 ; 129  |        struct Bitfield B;
                            12162 ; 130  |        int        I;
                            12163 ; 131  |};
                            12164 ; 132  |
                            12165 ; 133  |#define MAX_MSG_LENGTH 10
                            12166 ; 134  |struct CMessage
                            12167 ; 135  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12168 ; 136  |        unsigned int m_uLength;
                            12169 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            12170 ; 138  |};
                            12171 ; 139  |
                            12172 ; 140  |typedef struct {
                            12173 ; 141  |    WORD m_wLength;
                            12174 ; 142  |    WORD m_wMessage;
                            12175 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            12176 ; 144  |} Message;
                            12177 ; 145  |
                            12178 ; 146  |struct MessageQueueDescriptor
                            12179 ; 147  |{
                            12180 ; 148  |        int *m_pBase;
                            12181 ; 149  |        int m_iModulo;
                            12182 ; 150  |        int m_iSize;
                            12183 ; 151  |        int *m_pHead;
                            12184 ; 152  |        int *m_pTail;
                            12185 ; 153  |};
                            12186 ; 154  |
                            12187 ; 155  |struct ModuleEntry
                            12188 ; 156  |{
                            12189 ; 157  |    int m_iSignaledEventMask;
                            12190 ; 158  |    int m_iWaitEventMask;
                            12191 ; 159  |    int m_iResourceOfCode;
                            12192 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            12193 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            12194 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            12195 ; 163  |    int m_uTimeOutHigh;
                            12196 ; 164  |    int m_uTimeOutLow;
                            12197 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            12198 ; 166  |};
                            12199 ; 167  |
                            12200 ; 168  |union WaitMask{
                            12201 ; 169  |    struct B{
                            12202 ; 170  |        unsigned int m_bNone     :1;
                            12203 ; 171  |        unsigned int m_bMessage  :1;
                            12204 ; 172  |        unsigned int m_bTimer    :1;
                            12205 ; 173  |        unsigned int m_bButton   :1;
                            12206 ; 174  |    } B;
                            12207 ; 175  |    int I;
                            12208 ; 176  |} ;
                            12209 ; 177  |
                            12210 ; 178  |
                            12211 ; 179  |struct Button {
                            12212 ; 180  |        WORD wButtonEvent;
                            12213 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            12214 ; 182  |};
                            12215 ; 183  |
                            12216 ; 184  |struct Message {
                            12217 ; 185  |        WORD wMsgLength;
                            12218 ; 186  |        WORD wMsgCommand;
                            12219 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            12220 ; 188  |};
                            12221 ; 189  |
                            12222 ; 190  |union EventTypes {
                            12223 ; 191  |        struct CMessage msg;
                            12224 ; 192  |        struct Button Button ;
                            12225 ; 193  |        struct Message Message;
                            12226 ; 194  |};
                            12227 ; 195  |
                            12228 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            12229 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            12230 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            12231 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            12232 ; 200  |
                            12233 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            12234 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            12235 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            12236 ; 204  |
                            12237 ; 205  |#if DEBUG
                            12238 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12239 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12240 ; 208  |#else 
                            12241 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            12242 ; 210  |#define DebugBuildAssert(x)    
                            12243 ; 211  |#endif
                            12244 ; 212  |
                            12245 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12246 ; 214  |//  #pragma asm
                            12247 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12248 ; 216  |//  #pragma endasm
                            12249 ; 217  |
                            12250 ; 218  |
                            12251 ; 219  |#ifdef COLOR_262K
                            12252 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            12253 ; 221  |#elif defined(COLOR_65K)
                            12254 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            12255 ; 223  |#else
                            12256 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            12257 ; 225  |#endif
                            12258 ; 226  |    
                            12259 ; 227  |#endif // #ifndef _TYPES_H
                            12260 
                            12262 
                            12263 ; 32   |
                            12264 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12265 ; 34   |//   USB2.0 PHY STMP Registers 
                            12266 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12267 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            12268 ; 37   |
                            12269 ; 38   |
                            12270 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            12271 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            12272 ; 41   |
                            12273 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            12274 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            12275 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            12276 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            12277 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            12278 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            12279 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            12280 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            12281 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            12282 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            12283 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            12284 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            12285 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            12286 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            12287 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            12288 ; 57   |
                            12289 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            12290 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            12291 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            12292 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            12293 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            12294 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            12295 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            12296 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            12297 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            12298 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            12299 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            12300 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            12301 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            12302 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            12303 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            12304 ; 73   |
                            12305 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            12306 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            12307 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            12308 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            12309 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            12310 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            12311 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            12312 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            12313 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            12314 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            12315 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            12316 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            12317 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            12318 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            12319 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            12320 ; 89   |
                            12321 ; 90   |typedef union               
                            12322 ; 91   |{
                            12323 ; 92   |    struct {
                            12324 ; 93   |        int RSVD0          :5;
                            12325 ; 94   |        int TXDISCON1500   :1;
                            12326 ; 95   |        int PLLVCOPWD      :1;
                            12327 ; 96   |        int PLLVCPPWD      :1;
                            12328 ; 97   |        int RSVD1          :2;
                            12329 ; 98   |        int TXPWDFS        :1;
                            12330 ; 99   |        int TXPWDIBIAS     :1;
                            12331 ; 100  |        int TXPWDV2I       :1;
                            12332 ; 101  |        int TXPWDVBG       :1;
                            12333 ; 102  |        int TXPWDCOMP      :1;
                            12334 ; 103  |        int RSVD2          :1;
                            12335 ; 104  |        int RXPWDDISCONDET :1;
                            12336 ; 105  |        int RXPWDENV       :1;
                            12337 ; 106  |        int RXPWD1PT1      :1;
                            12338 ; 107  |        int RXPWDDIFF      :1;
                            12339 ; 108  |        int RXPWDRX        :1;
                            12340 ; 109  |        int RSVD3          :1;
                            12341 ; 110  |        int PWDIBIAS       :1;
                            12342 ; 111  |        int REGRESET       :1;
                            12343 ; 112  |    } B;
                            12344 ; 113  |    int I;
                            12345 ; 114  |} usbphypwd_type;
                            12346 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB PHY Powerdown Register */
                            12347 ; 116  |
                            12348 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            12349 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            12350 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            12351 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            12352 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            12353 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            12354 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            12355 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            12356 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            12357 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            12358 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            12359 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            12360 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            12361 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            12362 ; 131  |
                            12363 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            12364 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            12365 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            12366 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            12367 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            12368 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            12369 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            12370 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            12371 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            12372 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            12373 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            12374 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            12375 ; 144  |
                            12376 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXCAL1500_BITPOS)
                            12377 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXENCAL1500_BITPOS)
                            12378 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXHSXCVR_BITPOS)
                            12379 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHYTX_TXCALIBRATE_BITPOS)
                            12380 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DN_BITPOS)
                            12381 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DN_BITPOS)
                            12382 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXHSTERM_BITPOS)
                            12383 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_BITPOS)
                            12384 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DP_BITPOS)
                            12385 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DP_BITPOS)
                            12386 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSHIZ_BITPOS)
                            12387 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_TXCOMPOUT_BITPOS)
                            12388 ; 157  |
                            12389 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            12390 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            12391 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            12392 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            12393 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            12394 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            12395 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            12396 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            12397 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            12398 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            12399 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            12400 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            12401 ; 170  |
                            12402 ; 171  |typedef union               
                            12403 ; 172  |{
                            12404 ; 173  |    struct {
                            12405 ; 174  |        int TXCAL1500          :4;
                            12406 ; 175  |        int RSVD0              :1;
                            12407 ; 176  |        int TXENCAL1500        :1;
                            12408 ; 177  |        int TXHSXCVR           :1;
                            12409 ; 178  |        int TXCALIBRATE        :1;
                            12410 ; 179  |        int TXCAL45DN          :4;
                            12411 ; 180  |        int RSVD1              :1;
                            12412 ; 181  |        int TXENCAL45DN        :1;
                            12413 ; 182  |        int TXHSTERM           :1;
                            12414 ; 183  |        int TXSKEW             :1;
                            12415 ; 184  |        int TXCAL45DP          :4;
                            12416 ; 185  |        int RSVD2              :1;
                            12417 ; 186  |        int TXENCAL45DP        :1;
                            12418 ; 187  |        int TXFSHIZ            :1;
                            12419 ; 188  |        int TXCOMPOUT          :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12420 ; 189  |    } B;
                            12421 ; 190  |    int I;
                            12422 ; 191  |} usbphytx_type;
                            12423 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            12424 ; 193  |
                            12425 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            12426 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            12427 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            12428 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            12429 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            12430 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            12431 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            12432 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            12433 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            12434 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            12435 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            12436 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            12437 ; 206  |
                            12438 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            12439 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            12440 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            12441 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                            12442 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            12443 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            12444 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            12445 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            12446 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            12447 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            12448 ; 217  |
                            12449 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPLL_PLLV2ISEL_BITPOS)
                            12450 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHYPLL_PLLCPDBLIP_BITPOS)
                            12451 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK2_BITPOS)
                            12452 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK24_BITPOS)
                            12453 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCPNSEL_BITPOS)
                            12454 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS)
                            12455 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPLL_PLLPFDRST_BITPOS)
                            12456 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            12457 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOKSTART_BITPOS)
                            12458 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            12459 ; 228  |
                            12460 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            12461 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            12462 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            12463 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            12464 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            12465 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            12466 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            12467 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            12468 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            12469 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            12470 ; 239  |
                            12471 ; 240  |typedef union               
                            12472 ; 241  |{
                            12473 ; 242  |    struct {
                            12474 ; 243  |        int PLLV2ISEL        :4;
                            12475 ; 244  |        int RSVD0            :1;
                            12476 ; 245  |        int PLLCPDBLIP       :1;
                            12477 ; 246  |        int PLLVCOCLK2       :1;
                            12478 ; 247  |        int PLLVCOCLK24      :1;
                            12479 ; 248  |        int PLLCPNSEL        :4;
                            12480 ; 249  |        int PLLCLKDIVSEL     :4;
                            12481 ; 250  |        int RSVD1            :4;
                            12482 ; 251  |        int PLLPFDRST        :1;
                            12483 ; 252  |        int PLLCPSHORTLFR    :1;
                            12484 ; 253  |        int PLLVCOKSTART     :1;
                            12485 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            12486 ; 255  |    } B;
                            12487 ; 256  |    int I;
                            12488 ; 257  |} usbphypll_type;
                            12489 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                            12490 ; 259  |
                            12491 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            12492 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            12493 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                            12494 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            12495 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            12496 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            12497 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            12498 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            12499 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            12500 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            12501 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            12502 ; 271  |
                            12503 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            12504 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            12505 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            12506 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            12507 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            12508 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            12509 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            12510 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            12511 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            12512 ; 281  |
                            12513 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            12514 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_BITPOS)
                            12515 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_BITPOS)
                            12516 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLLKTIMECTL_BITPOS)
                            12517 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKDIVCTL_BITPOS)
                            12518 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives actual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            12519 ; 288  |//              480Mhz/7 =68.57Mhz
                            12520 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            12521 ; 290  |
                            12522 ; 291  |//              480Mhz/8 ~60Mhz
                            12523 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            12524 ; 293  |
                            12525 ; 294  |//              480Mhz/9 =53.3Mhz
                            12526 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            12527 ; 296  |
                            12528 ; 297  |//              480Mhz/10 =48Mhz
                            12529 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            12530 ; 299  |
                            12531 ; 300  |
                            12532 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOSTMODETEST_BITPOS)
                            12533 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FSCKSOURCESEL_BITPOS)
                            12534 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGRXDBYPASS_BITPOS)
                            12535 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_BITPOS)
                            12536 ; 305  |
                            12537 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            12538 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            12539 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            12540 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            12541 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            12542 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                            12543 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            12544 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            12545 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            12546 ; 315  |
                            12547 ; 316  |typedef union               
                            12548 ; 317  |{
                            12549 ; 318  |    struct {
                            12550 ; 319  |     int ENVADJ               :4;
                            12551 ; 320  |     int DISCONADJ            :4;
                            12552 ; 321  |     int DEBUGMODE            :4;
                            12553 ; 322  |     int PLLLKTIMECTL         :4;
                            12554 ; 323  |     int PLLCKDIVCTL          :4;
                            12555 ; 324  |     int HOSTMODETEST         :1;
                            12556 ; 325  |     int FSCKSOURCESEL        :1;
                            12557 ; 326  |     int REGRXDBYPASS         :1;
                            12558 ; 327  |     int PLLLOCKED            :1;
                            12559 ; 328  |    } B;
                            12560 ; 329  |    int I;
                            12561 ; 330  |} usbphyrx_type;
                            12562 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            12563 ; 332  |
                            12564 ; 333  |#endif
                            12565 ; 334  |
                            12566 
                            12568 
                            12569 ; 38   |
                            12570 ; 39   |
                            12571 ; 40   |#endif // if (!@def(hwequ))
                            12572 ; 41   |
                            12573 
                            12575 
                            12576 ; 14   |#include "project.h"
                            12577 
                            12579 
                            12580 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            12581 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                            12582 ; 3    |//  Filename: project.inc
                            12583 ; 4    |//  Description: 
                            12584 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            12585 ; 6    |
                            12586 ; 7    |#if (!defined(_PROJECT_INC))
                            12587 ; 8    |#define _PROJECT_INC 1
                            12588 ; 9    |
                            12589 ; 10   |#if defined(STMP_BUILD_PLAYER)
                            12590 ; 11   |#include "hwequ.h"
                            12591 
                            12593 
                            12594 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            12595 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                            12596 ; 3    |//  File        : hwequ.inc
                            12597 ; 4    |//  Description : STMP Hardware Constants
                            12598 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            12599 ; 6    |
                            12600 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                            12601 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                            12602 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                            12603 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                            12604 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                            12605 ; 12   |
                            12606 ; 13   |#if (!defined(HWEQU_INC))
                            12607 ; 14   |#define HWEQU_INC 1
                            12608 ; 15   |
                            12609 ; 16   |#include "types.h"
                            12610 ; 17   |#include "regsclkctrl.h"
                            12611 ; 18   |#include "regscore.h"
                            12612 ; 19   |#include "regscodec.h"
                            12613 ; 20   |#include "regsdcdc.h"
                            12614 ; 21   |#include "regsemc.h"
                            12615 ; 22   |#include "regsgpio.h"
                            12616 ; 23   |#include "regsi2c.h"
                            12617 ; 24   |#include "regsi2s.h"
                            12618 ; 25   |#include "regsicoll.h"
                            12619 ; 26   |#include "regslradc.h"
                            12620 ; 27   |#include "regspwm.h"
                            12621 ; 28   |#include "regsrevision.h"
                            12622 ; 29   |#include "regsrtc.h"
                            12623 ; 30   |#include "regsspare.h"
                            12624 ; 31   |#include "regsspi.h"
                            12625 ; 32   |#include "regsswizzle.h"
                            12626 ; 33   |#include "regssdram.h"
                            12627 ; 34   |#include "regstb.h"
                            12628 ; 35   |#include "regstimer.h"
                            12629 ; 36   |#include "regsusb20.h"
                            12630 ; 37   |#include "regsusb20phy.h"
                            12631 ; 38   |
                            12632 ; 39   |
                            12633 ; 40   |#endif // if (!@def(hwequ))
                            12634 ; 41   |
                            12635 
                            12637 
                            12638 ; 12   |#else 
                            12639 ; 13   |//include "regscodec.inc"
                            12640 ; 14   |#endif
                            12641 ; 15   |
                            12642 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            12643 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults ON) & 
                            12644 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm. STMP00012148
                            12645 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal). 
                            12646 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's specs can 
                            12647 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player mode.  
                            12648 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            12649 ; 23   |
                            12650 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            12651 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            12652 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            12653 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define below by defining
                            12654 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            12655 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            12656 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            12657 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot config above- 
                            12658 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down threshholds by maybe 50mV.
                            12659 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed.
                            12660 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            12661 ; 35   |
                            12662 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            12663 ; 37   |// MEDIA DEFINITIONS
                            12664 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            12665 ; 39   |
                            12666 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            12667 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            12668 ; 42   |#if defined(NAND1)
                            12669 ; 43   |#define SM_INTERNAL_CHIPS 1
                            12670 ; 44   |#else 
                            12671 ; 45   |#if defined(NAND2)
                            12672 ; 46   |#define SM_INTERNAL_CHIPS 2
                            12673 ; 47   |#else 
                            12674 ; 48   |#if defined(NAND3)
                            12675 ; 49   |#define SM_INTERNAL_CHIPS 3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12676 ; 50   |#else 
                            12677 ; 51   |#if defined(NAND4)
                            12678 ; 52   |#define SM_INTERNAL_CHIPS 4
                            12679 ; 53   |#else 
                            12680 ; 54   |#define SM_INTERNAL_CHIPS 1
                            12681 ; 55   |#endif
                            12682 ; 56   |#endif
                            12683 ; 57   |#endif
                            12684 ; 58   |#endif
                            12685 ; 59   |
                            12686 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            12687 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            12688 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it reads 0.  
                            12689 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            12690 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it reads 1.
                            12691 ; 65   |//*** comment out if active high ****
                            12692 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            12693 ; 67   |
                            12694 ; 68   |#if defined(SMEDIA)
                            12695 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            12696 ; 70   |#define NUM_SM_EXTERNAL 1
                            12697 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            12698 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            12699 ; 73   |#else 
                            12700 ; 74   |#if defined(MMC)
                            12701 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            12702 ; 76   |#define NUM_SM_EXTERNAL 0
                            12703 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            12704 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            12705 ; 79   |#else 
                            12706 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            12707 ; 81   |#define NUM_SM_EXTERNAL 0
                            12708 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            12709 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            12710 ; 84   |#endif
                            12711 ; 85   |#endif
                            12712 ; 86   |
                            12713 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            12714 ; 88   |// Mass Storage Class definitions
                            12715 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            12716 ; 90   |// Set to 0 if Composite Device build is desired.    
                            12717 ; 91   |#define MULTI_LUN_BUILD 1   
                            12718 ; 92   |
                            12719 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            12720 ; 94   |//  SCSI
                            12721 ; 95   |#if (MULTI_LUN_BUILD==0)
                            12722 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            12723 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            12724 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            12725 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            12726 ; 100  |  #else
                            12727 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            12728 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            12729 ; 103  |  #endif
                            12730 ; 104  |#else
                            12731 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            12732 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            12733 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            12734 ; 108  |  #else
                            12735 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            12736 ; 110  |  #endif
                            12737 ; 111  |#endif
                            12738 ; 112  |
                            12739 ; 113  |
                            12740 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            12741 ; 115  |
                            12742 ; 116  |
                            12743 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            12744 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            12745 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            12746 ; 120  |#ifdef MMC
                            12747 ; 121  |#ifdef MTP_BUILD
                            12748 ; 122  |// --------------------
                            12749 ; 123  |// MTP and MMC
                            12750 ; 124  |// --------------------
                            12751 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            12752 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            12753 ; 127  |#else  // ifndef MTP_BUILD
                            12754 ; 128  |#ifdef STMP_BUILD_PLAYER
                            12755 ; 129  |// --------------------
                            12756 ; 130  |// Player and MMC
                            12757 ; 131  |// --------------------
                            12758 ; 132  |#else
                            12759 ; 133  |// --------------------
                            12760 ; 134  |// USBMSC and MMC
                            12761 ; 135  |// --------------------
                            12762 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            12763 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            12764 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            12765 ; 139  |#endif // ifdef MTP_BUILD
                            12766 ; 140  |#else  // ifndef MMC
                            12767 ; 141  |#ifdef MTP_BUILD
                            12768 ; 142  |// --------------------
                            12769 ; 143  |// MTP and NAND only
                            12770 ; 144  |// --------------------
                            12771 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            12772 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            12773 ; 147  |#else  // ifndef MTP_BUILD
                            12774 ; 148  |#ifdef STMP_BUILD_PLAYER
                            12775 ; 149  |// --------------------
                            12776 ; 150  |// Player and NAND only
                            12777 ; 151  |// --------------------
                            12778 ; 152  |#else
                            12779 ; 153  |// --------------------
                            12780 ; 154  |// USBMSC and NAND only
                            12781 ; 155  |// --------------------
                            12782 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            12783 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            12784 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            12785 ; 159  |#endif // ifdef MTP_BUILD
                            12786 ; 160  |#endif // ifdef MMC 
                            12787 ; 161  |
                            12788 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            12789 ; 163  |#if (defined(MTP_BUILD))
                            12790 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            12791 ; 165  |
                            12792 ; 166  |////!
                            12793 ; 167  |////! This varible holds the watchdog count for the store flush.
                            12794 ; 168  |////!
                            12795 ; 169  |///
                            12796 ; 170  |#include <types.h>
                            12797 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            12798 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            12799 ; 173  |#endif
                            12800 ; 174  |
                            12801 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            12802 ; 176  |// These are needed here for Mass Storage Class
                            12803 ; 177  |// Needs to be cleaned up
                            12804 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            12805 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            12806 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            12807 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            12808 ; 182  |
                            12809 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            12810 ; 184  |
                            12811 ; 185  |#endif
                            12812 ; 186  |
                            12813 ; 187  |
                            12814 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            12815 ; 189  |// SmartMedia/NAND defs
                            12816 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            12817 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            12818 ; 192  |
                            12819 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            12820 ; 194  |// Sysloadresources defs
                            12821 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            12822 ; 196  |
                            12823 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            12824 ; 198  |// MMC defs
                            12825 ; 199  |#define MMC_MAX_PARTITIONS 1
                            12826 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            12827 ; 201  |
                            12828 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            12829 ; 203  |// SPI defs
                            12830 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            12831 ; 205  |
                            12832 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            12833 ; 207  |// Global media defs
                            12834 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            12835 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            12836 ; 210  |
                            12837 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            12838 ; 212  |// DO NOT CHANGE THESE!!!
                            12839 ; 213  |#define SM_MAX_PARTITIONS 4
                            12840 ; 214  |#define MAX_HANDLES 2
                            12841 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            12842 ; 216  |
                            12843 ; 217  |
                            12844 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            12845 ; 219  |// Battery LRADC Values 
                            12846 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            12847 ; 221  |// brownout trip point in mV (moved by RS)
                            12848 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            12849 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            12850 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            12851 ; 225  |//     audio recording to media.
                            12852 ; 226  |#define BATT_SAFETY_MARGIN 10
                            12853 ; 227  |
                            12854 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                            12855 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline voltage to do a refresh.
                            12856 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            12857 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            12858 ; 232  |
                            12859 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc presence.
                            12860 ; 234  |
                            12861 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            12862 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat check.
                            12863 ; 237  |#if (!defined(CLCD))
                            12864 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            12865 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            12866 ; 240  |#else 
                            12867 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            12868 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            12869 ; 243  |#endif
                            12870 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            12871 ; 245  |
                            12872 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            12873 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIon.
                            12874 ; 248  |// See mp3 encoder overlay.
                            12875 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            12876 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            12877 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            12878 ; 252  |
                            12879 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            12880 ; 254  |// Voice recording filenames
                            12881 ; 255  |// number of digits in filename Vxxx.wav
                            12882 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            12883 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            12884 ; 258  |
                            12885 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            12886 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            12887 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            12888 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            12889 ; 263  |#if defined(DEVICE_3500)
                            12890 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            12891 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            12892 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            12893 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, & demo player)
                            12894 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            12895 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            12896 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            12897 ; 271  |
                            12898 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn when bias not yet ready.
                            12899 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            12900 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevention if you use rec button from outside voice menu.
                            12901 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latency in the record-from-music-menu use-case.
                            12902 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            12903 ; 277  |
                            12904 ; 278  |#else 
                            12905 ; 279  |// STMP3410
                            12906 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            12907 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            12908 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            12909 ; 283  |#endif
                            12910 ; 284  |
                            12911 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            12912 ; 286  |// Number of available soft timers
                            12913 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            12914 ; 288  |#if defined(SYNC_LYRICS)
                            12915 ; 289  |#define SOFT_TIMERS 10
                            12916 ; 290  |#else 
                            12917 ; 291  |#if defined(JPEG_DECODER)
                            12918 ; 292  |#define SOFT_TIMERS 10
                            12919 ; 293  |#else 
                            12920 ; 294  |#define SOFT_TIMERS 9
                            12921 ; 295  |#endif
                            12922 ; 296  |#endif
                            12923 ; 297  |
                            12924 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            12925 ; 299  |//  sizes
                            12926 ; 300  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12927 ; 301  |#if defined(MMC)
                            12928 ; 302  |#if defined(USE_PLAYLIST5)
                            12929 ; 303  |#define MENU_STACK_SIZE 1500
                            12930 ; 304  |#else 
                            12931 ; 305  |#define MENU_STACK_SIZE 1250
                            12932 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            12933 ; 307  |#else 
                            12934 ; 308  |#if defined(USE_PLAYLIST5)
                            12935 ; 309  |#define MENU_STACK_SIZE 1500
                            12936 ; 310  |#else 
                            12937 ; 311  |#define MENU_STACK_SIZE 1250
                            12938 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            12939 ; 313  |#endif //if @def('MMC')
                            12940 ; 314  |
                            12941 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 750 else 550 for other builds? TOVERIFY. MYALLOC
                            12942 ; 316  |// 
                            12943 ; 317  |#define STACK_L1_SIZE 750
                            12944 ; 318  |#define STACK_L2_SIZE 100
                            12945 ; 319  |#define STACK_L3_SIZE 160
                            12946 ; 320  |
                            12947 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            12948 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            12949 ; 323  |// is ok with switching code.
                            12950 ; 324  |#if defined(MTP_BUILD)
                            12951 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            12952 ; 326  |#endif
                            12953 ; 327  |
                            12954 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            12955 ; 329  |// maximum number of nested funclets 
                            12956 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            12957 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            12958 ; 332  |
                            12959 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            12960 ; 334  |//    LCD DEFINITIONS
                            12961 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            12962 ; 336  |
                            12963 ; 337  |#define SPACE_CHAR 0x000020          
                            12964 ; 338  |#define ZERO_CHAR 0x000030
                            12965 ; 339  |#define COLON_CHAR 0x00003A
                            12966 ; 340  |#define PERIOD_CHAR 0x00002E
                            12967 ; 341  |
                            12968 ; 342  |#if (defined(S6B33B0A_LCD))
                            12969 ; 343  |#define LCD_X_SIZE 128
                            12970 ; 344  |#define LCD_Y_SIZE 159
                            12971 ; 345  |#endif
                            12972 ; 346  |
                            12973 ; 347  |#if (defined(SED15XX_LCD))
                            12974 ; 348  |#define LCD_X_SIZE 128
                            12975 ; 349  |#define LCD_Y_SIZE 64
                            12976 ; 350  |#endif
                            12977 ; 351  |
                            12978 ; 352  |
                            12979 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            12980 ; 354  |//   Details on Customizing Contrast
                            12981 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            12982 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            12983 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            12984 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            12985 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            12986 ; 360  |//   unless the ezact sequence is remembered.
                            12987 ; 361  |//   To find out what range your player supports: 
                            12988 ; 362  |//   change these equs to full range or comment out (full range is default)
                            12989 ; 363  |//;;;;;;
                            12990 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            12991 ; 365  |// recommended calibration using player -- uncomment 
                            12992 ; 366  |//;;;;;;
                            12993 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            12994 ; 368  |////////////////////////////
                            12995 ; 369  |#if (defined(DEMO_HW))
                            12996 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi LCD (June6'05)
                            12997 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            12998 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            12999 ; 373  |#else 
                            13000 ; 374  |
                            13001 ; 375  |#if (defined(S6B33B0A_LCD))
                            13002 ; 376  |#define LCD_MAX_CONTRAST 210
                            13003 ; 377  |#define LCD_MIN_CONTRAST 160    
                            13004 ; 378  |#endif
                            13005 ; 379  |
                            13006 ; 380  |#if (defined(SED15XX_LCD))
                            13007 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            13008 ; 382  |// Engineering board regs support range [17-37].
                            13009 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            13010 ; 384  |//   One default contrast range [24-42] works for both.
                            13011 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            13012 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            13013 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            13014 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            13015 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            13016 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            13017 ; 391  |
                            13018 ; 392  |#if (defined(NEWSHINGYIH))
                            13019 ; 393  |#define LCD_MAX_CONTRAST 250
                            13020 ; 394  |#define LCD_MIN_CONTRAST 0
                            13021 ; 395  |#else 
                            13022 ; 396  |//-----
                            13023 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            13024 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for both LCDs.
                            13025 ; 399  |#define LCD_MAX_CONTRAST 250
                            13026 ; 400  |#define LCD_MIN_CONTRAST 0
                            13027 ; 401  |
                            13028 ; 402  |//=====
                            13029 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            13030 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this historic ver.
                            13031 ; 405  |//LCD_MAX_CONTRAST equ 42
                            13032 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            13033 ; 407  |
                            13034 ; 408  |#endif
                            13035 ; 409  |#endif
                            13036 ; 410  |
                            13037 ; 411  |#endif
                            13038 ; 412  |
                            13039 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            13040 ; 414  |// The default value of the lcd contrast in % of range
                            13041 ; 415  |//   the default value is used when no settings.dat is available
                            13042 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            13043 ; 417  |
                            13044 ; 418  |#if (defined(S6B33B0A_LCD))
                            13045 ; 419  |// 60% of range is default value
                            13046 ; 420  |#define DEFAULT_CONTRAST 50 
                            13047 ; 421  |#endif
                            13048 ; 422  |
                            13049 ; 423  |#if (defined(SED15XX_LCD))
                            13050 ; 424  |// % of range is default value (was 60%)
                            13051 ; 425  |#define DEFAULT_CONTRAST 50 
                            13052 ; 426  |#endif
                            13053 ; 427  |
                            13054 ; 428  |
                            13055 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            13056 ; 430  |// make lower when doing calibration
                            13057 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            13058 ; 432  |
                            13059 ; 433  |
                            13060 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            13061 ; 435  |// For FFWD and RWND
                            13062 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            13063 ; 437  |#define SECONDS_TO_SKIP 1
                            13064 ; 438  |#define SECONDS_TO_SKIP1 3
                            13065 ; 439  |#define SECONDS_TO_SKIP2 6
                            13066 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            13067 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            13068 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13069 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            13070 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13071 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            13072 ; 446  |
                            13073 ; 447  |// For audible FFW/RWD
                            13074 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            13075 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            13076 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            13077 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            13078 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13079 ; 453  |#define LEVEL1_BOUNDARY 17 
                            13080 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13081 ; 455  |#define LEVEL2_BOUNDARY 33 
                            13082 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13083 ; 457  |#define LEVEL3_BOUNDARY 50 
                            13084 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            13085 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            13086 ; 460  |// Short Song Time, songs too short to play.
                            13087 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            13088 ; 462  |
                            13089 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            13090 ; 464  |// MP3 Sync Values
                            13091 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            13092 ; 466  |// # bytes to look for sync before marking it bad
                            13093 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            13094 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            13095 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            13096 ; 470  |// once we have sync'd, the isr should be called this frequently
                            13097 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            13098 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            13099 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            13100 ; 474  |
                            13101 ; 475  |
                            13102 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            13103 ; 477  |//// Multi-Stage Volume Control Definitions
                            13104 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            13105 ; 479  |//// Use Multi-Stage Volume
                            13106 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            13107 ; 481  |
                            13108 ; 482  |//// Master Volume definitions
                            13109 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            13110 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            13111 ; 485  |
                            13112 ; 486  |//// DAC-Mode definitions
                            13113 ; 487  |//// Adjusts 0dB point
                            13114 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            13115 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            13116 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines above.
                            13117 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            13118 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provides 1.5 dB gain on Stmp34x0; 
                            13119 ; 493  |//                                               Max gain possible: 8 step diff would provide +12dB gain.   
                            13120 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            13121 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            13122 ; 496  |
                            13123 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            13124 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            13125 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                            13126 ; 500  |
                            13127 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not the default
                            13128 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoint.
                            13129 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            13130 ; 504  |
                            13131 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the default
                            13132 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            13133 ; 507  |
                            13134 ; 508  |
                            13135 ; 509  |//// Line In definitions (used for Line-In 1)
                            13136 ; 510  |//// 0dB point of the Line In
                            13137 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            13138 ; 512  |//// Minimum volume of Line In
                            13139 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            13140 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            13141 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            13142 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            13143 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            13144 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS+1)
                            13145 ; 519  |
                            13146 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            13147 ; 521  |//// 0dB point of the Line In
                            13148 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            13149 ; 523  |//// Minimum volume of Line In
                            13150 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            13151 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            13152 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            13153 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            13154 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            13155 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            13156 ; 530  |
                            13157 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            13158 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid deadlock states & recovers. 
                            13159 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            13160 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            13161 ; 535  |
                            13162 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            13163 ; 537  |////
                            13164 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            13165 ; 539  |////
                            13166 ; 540  |///
                            13167 ; 541  |#include <types.h>
                            13168 ; 542  |extern volatile WORD g_wActivityState;
                            13169 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            13170 ; 544  |
                            13171 ; 545  |void _reentrant Init5VSense(void);
                            13172 ; 546  |void _reentrant ServiceDCDC(void);
                            13173 ; 547  |
                            13174 ; 548  |////////////////////////////////////////////////////////////////////////////
                            13175 ; 549  |//// JPEG Thumbnail Mode Setting
                            13176 ; 550  |//// number of column in thumbnail mode
                            13177 ; 551  |#define THUMBNAIL_X 2           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13178 ; 552  |//// number of row in  thumbnail mode
                            13179 ; 553  |#define THUMBNAIL_Y 2           
                            13180 ; 554  |//// thumbnail boundary offset x
                            13181 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            13182 ; 556  |//// thumbnail boundary offset y
                            13183 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            13184 ; 558  |
                            13185 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            13186 ; 560  |
                            13187 
                            13189 
                            13190 ; 15   |#include "sysserialnumber.h"
                            13191 
                            13193 
                            13194 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            13195 ; 2    |// Copyright(C) SigmaTel, Inc. 2002-2003
                            13196 ; 3    |//
                            13197 ; 4    |// Filename: sysserialnumber.h
                            13198 ; 5    |// Description: 
                            13199 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            13200 ; 7    |
                            13201 ; 8    |#ifndef _SYSSERIALNUMBER_H
                            13202 ; 9    |#define _SYSSERIALNUMBER_H
                            13203 ; 10   |
                            13204 ; 11   |///////////////////////////////////////////////////////////////////////////////
                            13205 ; 12   |// Definitions
                            13206 ; 13   |///////////////////////////////////////////////////////////////////////////////
                            13207 ; 14   |#define CHIP_ID_BYTES       (INT)8     // Currently 64 bits.
                            13208 ; 15   |#define CHIP_ID_DIGITS      (INT)(CHIP_ID_BYTES*2)
                            13209 ; 16   |#define CHIP_ID_LOOPS1      (INT)((CHIP_ID_DIGITS+5)/6)
                            13210 ; 17   |#define CHIP_ID_LOOPS2      (INT)(CHIP_ID_DIGITS/3)
                            13211 ; 18   |
                            13212 ; 19   |#define MMC_CARD_TYPE_SD_PSN_SIZE_BYTES 4
                            13213 ; 20   |#define MMC_CARD_TYPE_NONSD_SPEC14_SN_SIZE_BYTES 12
                            13214 ; 21   |#define MMC_CARD_TYPE_NONSD_SPEC20AND31_SN_SIZE_BYTES 4
                            13215 ; 22   |
                            13216 ; 23   |#define NUM_RAW_SERIAL_NUMBER_BYTES         8
                            13217 ; 24   |#define NUM_RAW_SERIAL_NUMBER_BYTES_NULL    10
                            13218 ; 25   |#define MAX_NUM_RAW_SERIAL_NUMBER_WORDS     7
                            13219 ; 26   |#define MAX_NUM_ASCII_SERIAL_NUMBER_WORDS (MMC_CARD_TYPE_NONSD_SPEC14_SN_SIZE_BYTES*2)
                            13220 ; 27   |
                            13221 ; 28   |
                            13222 ; 29   |///////////////////////////////////////////////////////////////////////////////
                            13223 ; 30   |// Error codes
                            13224 ; 31   |///////////////////////////////////////////////////////////////////////////////
                            13225 ; 32   |
                            13226 ; 33   |///////////////////////////////////////////////////////////////////////////////
                            13227 ; 34   |// Structure definitions
                            13228 ; 35   |///////////////////////////////////////////////////////////////////////////////
                            13229 ; 36   |typedef struct {
                            13230 ; 37   |    WORD wRawSizeInBytes;
                            13231 ; 38   |    WORD wAsciiSizeInBytes;
                            13232 ; 39   |    WORD wRaw[MAX_NUM_RAW_SERIAL_NUMBER_WORDS];
                            13233 ; 40   |    BYTE btAscii[MAX_NUM_ASCII_SERIAL_NUMBER_WORDS];
                            13234 ; 41   |} SERIAL_NUMBER, * P_SERIAL_NUMBER;
                            13235 ; 42   |
                            13236 ; 43   |///////////////////////////////////////////////////////////////////////////////
                            13237 ; 44   |// Prototypes
                            13238 ; 45   |///////////////////////////////////////////////////////////////////////////////
                            13239 ; 46   |
                            13240 ; 47   |RETCODE _reentrant ChipSerialNumberInit(void);
                            13241 ; 48   |RETCODE _reentrant InternalMediaSerialNumberInit(void);
                            13242 ; 49   |
                            13243 ; 50   |// The following two functions are project-specific and should be defined in
                            13244 ; 51   |//  the project/system/miscproject.c file
                            13245 ; 52   |RETCODE _reentrant SerialNumberEnableInit(void);
                            13246 ; 53   |BOOL _reentrant SerialNumbersEnabled(void);
                            13247 ; 54   |
                            13248 ; 55   |// The two helper functions below are driver-private and not part of the API. Shared with MMC.
                            13249 ; 56   |RETCODE _reentrant ChipGetSerialNumber(WORD * pwBuffer);
                            13250 
                            13261 
                            13262 ; 57   |RETCODE _reentrant CreateNullSerialNumber(P_SERIAL_NUMBER pSerialNumber);
                            13263 ; 58   |WORD _reentrant ConvertHexToASCII(WORD wInHex);
                            13264 
                            13266 
                            13267 ; 59   |
                            13268 ; 60   |extern _Y SERIAL_NUMBER g_ChipSerialNumber;
                            13269 ; 61   |extern _Y SERIAL_NUMBER g_InternalMediaSerialNumber;
                            13270 ; 62   |extern SERIAL_NUMBER g_MmcSerialNumber;
                            13271 ; 63   |
                            13272 ; 64   |#endif // #ifndef _SYSSERIALNUMBER_H
                            13273 
                            13275 
                            13276 ; 16   |#include "lowresolutionadc.h"
                            13277 
                            13279 
                            13280 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                            13281 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                            13282 ; 3    |//;
                            13283 ; 4    |//; Filename:    lowresolutionadc.h
                            13284 ; 5    |//; Description: General purpose interface to LRADCs
                            13285 ; 6    |//;              Generic symbols are mapped to more specific symbols in inc\34xx\regslradc.inc files
                            13286 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                            13287 ; 8    |
                            13288 ; 9    |#ifndef _LOWRESOLUTIONADC_H
                            13289 ; 10   |#define _LOWRESOLUTIONADC_H
                            13290 ; 11   |
                            13291 ; 12   |#include "regslradc.h"
                            13292 
                            13294 
                            13295 ; 1    |#if !(defined(regslradcinc))
                            13296 ; 2    |
                            13297 ; 3    |#define regslradcinc 1
                            13298 ; 4    |
                            13299 ; 5    |#include "types.h"
                            13300 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13301 ; 7    |
                            13302 ; 8    |//   SYSTEM STMP Registers 
                            13303 ; 9    |//  Last Edited 6.26.2003 M. Henson
                            13304 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13305 ; 11   |
                            13306 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                            13307 ; 13   |
                            13308 ; 14   |
                            13309 ; 15   |
                            13310 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                            13311 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                            13312 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                            13313 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                            13314 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                            13315 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                            13316 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                            13317 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                            13318 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                            13319 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                            13320 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                            13321 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                            13322 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                            13323 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                            13324 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                            13325 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                            13326 ; 32   |
                            13327 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                            13328 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                            13329 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                            13330 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                            13331 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                            13332 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                            13333 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                            13334 ; 40   |
                            13335 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BATT_CTRL_INPUT_OFFSET_BITPOS)        
                            13336 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BATT_CTRL_HALF_CMP_PWR_BITPOS)        
                            13337 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_CTRL_INPUT_DIV2_BITPOS) 
                            13338 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_BITPOS) 
                            13339 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS) 
                            13340 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CLK_DIV_BITPOS)        
                            13341 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_REF_VAL_BITPOS)        
                            13342 ; 48   |
                            13343 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                            13344 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                            13345 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                            13346 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                            13347 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                            13348 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                            13349 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                            13350 ; 56   |
                            13351 ; 57   |typedef union               
                            13352 ; 58   |{
                            13353 ; 59   |    struct {
                            13354 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                            13355 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                            13356 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                            13357 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                            13358 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                            13359 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                            13360 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                            13361 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                            13362 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                            13363 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                            13364 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH;
                            13365 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH;
                            13366 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDTH;
                            13367 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_WIDTH;
                            13368 ; 74   |    } B;
                            13369 ; 75   |   unsigned int I;
                            13370 ; 76   |        unsigned int U;
                            13371 ; 77   |} lradc_ctrl_type;
                            13372 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Battery LRADC Control Register */
                            13373 ; 79   |
                            13374 ; 80   |
                            13375 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                            13376 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                            13377 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                            13378 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                            13379 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                            13380 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                            13381 ; 87   |
                            13382 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                            13383 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                            13384 ; 90   |
                            13385 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                            13386 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                            13387 ; 93   |
                            13388 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK)     
                            13389 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK)     
                            13390 ; 96   |
                            13391 ; 97   |
                            13392 ; 98   |typedef union               
                            13393 ; 99   |{
                            13394 ; 100  |    struct {
                            13395 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                            13396 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                            13397 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                            13398 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                            13399 ; 105  |    } B;
                            13400 ; 106  |    unsigned int I;
                            13401 ; 107  |} lradc_thrsh_type;
                            13402 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* Battery LRADC Threshold Register */
                            13403 ; 109  |
                            13404 ; 110  |
                            13405 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            13406 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                            13407 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                            13408 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                            13409 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                            13410 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                            13411 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                            13412 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                            13413 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                            13414 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                            13415 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                            13416 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                            13417 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                            13418 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                            13419 ; 125  |
                            13420 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                            13421 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                            13422 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                            13423 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                            13424 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                            13425 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                            13426 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                            13427 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                            13428 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                            13429 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                            13430 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                            13431 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                            13432 ; 138  |
                            13433 ; 139  |
                            13434 ; 140  |
                            13435 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT1_BITPOS)
                            13436 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT0_BITPOS)
                            13437 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT1_BITPOS)
                            13438 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT0_BITPOS)
                            13439 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT1_BITPOS)
                            13440 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT0_BITPOS)
                            13441 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_RSVD0_BITPOS)
                            13442 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_RESULT_DATA_OUT_BITPOS)
                            13443 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_RSVD1_BITPOS)
                            13444 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT0_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13445 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT1_BITPOS)
                            13446 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_RSVD2_BITPOS)
                            13447 ; 153  |
                            13448 ; 154  |
                            13449 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                            13450 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                            13451 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                            13452 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                            13453 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                            13454 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                            13455 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                            13456 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                            13457 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                            13458 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                            13459 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                            13460 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                            13461 ; 167  |
                            13462 ; 168  |typedef union               
                            13463 ; 169  |{
                            13464 ; 170  |    struct {
                            13465 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                            13466 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                            13467 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                            13468 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                            13469 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                            13470 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                            13471 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                            13472 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                            13473 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                            13474 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_IRQ_EVENT0_WIDTH;
                            13475 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_IRQ_EVENT1_WIDTH;                      
                            13476 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESULT_RSVD2_WIDTH;
                            13477 ; 183  |    } B;
                            13478 ; 184  |    unsigned int I;
                            13479 ; 185  |} lradc_result_type;
                            13480 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /* Battery LRADC Result Register */
                            13481 ; 187  |
                            13482 ; 188  |
                            13483 ; 189  |
                            13484 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                            13485 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                            13486 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                            13487 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                            13488 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                            13489 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                            13490 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                            13491 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                            13492 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                            13493 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                            13494 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                            13495 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                            13496 ; 202  |
                            13497 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                            13498 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                            13499 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                            13500 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                            13501 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                            13502 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                            13503 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                            13504 ; 210  |
                            13505 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                            13506 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                            13507 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_DIV2_BITPOS) 
                            13508 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_CLEAR_BITPOS) 
                            13509 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_BITPOS) 
                            13510 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_CTRL_CLK_DIV_BITPOS)        
                            13511 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_CTRL_REF_VAL_BITPOS)        
                            13512 ; 218  |
                            13513 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)     
                            13514 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)     
                            13515 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                            13516 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                            13517 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                            13518 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                            13519 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                            13520 ; 226  |
                            13521 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* LRADC1 Control Register */
                            13522 ; 228  |
                            13523 ; 229  |
                            13524 ; 230  |
                            13525 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            13526 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                            13527 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                            13528 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                            13529 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                            13530 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                            13531 ; 237  |
                            13532 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                            13533 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                            13534 ; 240  |
                            13535 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                            13536 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                            13537 ; 243  |
                            13538 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK)     
                            13539 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK)     
                            13540 ; 246  |
                            13541 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /* LRADC1 Threshold Register */
                            13542 ; 248  |
                            13543 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                            13544 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                            13545 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                            13546 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                            13547 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                            13548 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                            13549 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                            13550 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                            13551 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                            13552 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                            13553 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                            13554 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                            13555 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                            13556 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                            13557 ; 263  |
                            13558 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                            13559 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                            13560 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                            13561 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                            13562 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                            13563 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                            13564 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                            13565 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                            13566 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                            13567 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                            13568 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                            13569 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                            13570 ; 276  |
                            13571 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT1_BITPOS)
                            13572 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT0_BITPOS)
                            13573 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT1_BITPOS)
                            13574 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT0_BITPOS)
                            13575 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT1_BITPOS)
                            13576 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT0_BITPOS)
                            13577 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD0_BITPOS)
                            13578 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC1_RESULT_DATA_OUT_BITPOS)
                            13579 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD1_BITPOS)
                            13580 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                            13581 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                            13582 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD2_BITPOS)
                            13583 ; 289  |
                            13584 ; 290  |
                            13585 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                            13586 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                            13587 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                            13588 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                            13589 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                            13590 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                            13591 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                            13592 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                            13593 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                            13594 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                            13595 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                            13596 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                            13597 ; 303  |
                            13598 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))    /* LRADC1 Result Register */
                            13599 ; 305  |
                            13600 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                            13601 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                            13602 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                            13603 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                            13604 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                            13605 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                            13606 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                            13607 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                            13608 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                            13609 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                            13610 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                            13611 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                            13612 ; 318  |
                            13613 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                            13614 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                            13615 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                            13616 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                            13617 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                            13618 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                            13619 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                            13620 ; 326  |
                            13621 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                            13622 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                            13623 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                            13624 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS) 
                            13625 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_PWD_BITPOS) 
                            13626 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                            13627 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                            13628 ; 334  |
                            13629 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK)     
                            13630 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK)     
                            13631 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK) 
                            13632 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                            13633 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                            13634 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)     
                            13635 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)     
                            13636 ; 342  |
                            13637 ; 343  |
                            13638 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* LRADC2_CTRL Control Register */
                            13639 ; 345  |
                            13640 ; 346  |
                            13641 ; 347  |
                            13642 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                            13643 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                            13644 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                            13645 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                            13646 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                            13647 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                            13648 ; 354  |
                            13649 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                            13650 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                            13651 ; 357  |
                            13652 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                            13653 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                            13654 ; 360  |
                            13655 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK)     
                            13656 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK)     
                            13657 ; 363  |
                            13658 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /* LRADC2 Threshold Register */
                            13659 ; 365  |
                            13660 ; 366  |
                            13661 ; 367  |
                            13662 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                            13663 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                            13664 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                            13665 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                            13666 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                            13667 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                            13668 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                            13669 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                            13670 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                            13671 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                            13672 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                            13673 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                            13674 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                            13675 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                            13676 ; 382  |
                            13677 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                            13678 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                            13679 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                            13680 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                            13681 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                            13682 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                            13683 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                            13684 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                            13685 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                            13686 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                            13687 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                            13688 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                            13689 ; 395  |
                            13690 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT1_BITPOS)
                            13691 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT0_BITPOS)
                            13692 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT1_BITPOS)
                            13693 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT0_BITPOS)
                            13694 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT1_BITPOS)
                            13695 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT0_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13696 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD0_BITPOS)
                            13697 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC2_RESULT_DATA_OUT_BITPOS)
                            13698 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD1_BITPOS)
                            13699 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                            13700 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                            13701 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD2_BITPOS)
                            13702 ; 408  |
                            13703 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                            13704 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                            13705 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                            13706 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                            13707 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                            13708 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                            13709 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                            13710 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                            13711 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                            13712 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                            13713 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                            13714 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                            13715 ; 421  |
                            13716 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))    /* LRADC2 Result Register */
                            13717 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13718 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13719 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13720 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13721 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            13722 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            13723 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            13724 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            13725 ; 431  |#define HW_LRADC_RES_REF_0                              80
                            13726 ; 432  |#define HW_LRADC_RES_REF_1                              77
                            13727 ; 433  |#define HW_LRADC_RES_REF_2                              100
                            13728 ; 434  |#define HW_LRADC_RES_REF_3                              129
                            13729 ; 435  |#define HW_LRADC_RES_REF_4                              160
                            13730 ; 436  |#define HW_LRADC_RES_REF_5                              154
                            13731 ; 437  |#define HW_LRADC_RES_REF_6                              200
                            13732 ; 438  |#define HW_LRADC_RES_REF_7                              258
                            13733 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK          
                            13734 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementation
                            13735 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                            13736 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                            13737 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                            13738 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                            13739 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                            13740 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                            13741 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                            13742 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                            13743 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                            13744 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                            13745 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                            13746 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                            13747 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                            13748 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                            13749 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                            13750 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                            13751 ; 457  |
                            13752 ; 458  |//Needed by button.asm
                            13753 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                            13754 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                            13755 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                            13756 ; 462  |
                            13757 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            13758 ; 464  |
                            13759 ; 465  |#endif
                            13760 ; 466  |
                            13761 ; 467  |
                            13762 
                            13764 
                            13765 ; 13   |
                            13766 ; 14   |// Variables
                            13767 ; 15   |extern WORD LowResAdcStatus;
                            13768 ; 16   |extern WORD LowResAdcBattResult, LowResAdcBattAvg;                                      // Results and Averages come from buttons.asm
                            13769 ; 17   |extern WORD LowResAdcAuxResult,  LowResAdcAuxAvg;
                            13770 ; 18   |extern WORD LowResAdcAux2Result, LowResAdcAux2Avg;                                      // Aux2 result and average valid for 3500
                            13771 ; 19   |
                            13772 ; 20   |
                            13773 ; 21   |// Types
                            13774 ; 22   |enum LowResADCChannel {BATT, AUX, AUX2};                                                    // AUX2 valid for 3500
                            13775 ; 23   |enum LowResADCHalfPwr {OFF = 0, ON = LRADC_HALF_POWER_SETMASK};
                            13776 ; 24   |enum LowResADCRef     {REF_0 = HW_LRADC_REF_0_SETMASK,
                            13777 ; 25   |                       REF_1 = HW_LRADC_REF_1_SETMASK,
                            13778 ; 26   |                                           REF_2 = HW_LRADC_REF_2_SETMASK,
                            13779 ; 27   |                                           REF_3 = HW_LRADC_REF_3_SETMASK,
                            13780 ; 28   |                                           REF_4 = HW_LRADC_REF_4_SETMASK,
                            13781 ; 29   |                                           REF_5 = HW_LRADC_REF_5_SETMASK,
                            13782 ; 30   |                                           REF_6 = HW_LRADC_REF_6_SETMASK,
                            13783 ; 31   |                                           REF_7 = HW_LRADC_REF_7_SETMASK
                            13784 ; 32   |                      };
                            13785 ; 33   |
                            13786 ; 34   |
                            13787 ; 35   |// ADC Reference resolutions in mV*10
                            13788 ; 36   |// 1 ADC count = Vref(mV)/([2^N] - 1) where N = # bits in result, and Vref based on selected LRADC reference.
                            13789 ; 37   |#define RES_REF_0      HW_LRADC_RES_REF_0
                            13790 ; 38   |#define RES_REF_1      HW_LRADC_RES_REF_1
                            13791 ; 39   |#define RES_REF_2      HW_LRADC_RES_REF_2
                            13792 ; 40   |#define RES_REF_3      HW_LRADC_RES_REF_3
                            13793 ; 41   |#define RES_REF_4      HW_LRADC_RES_REF_4
                            13794 ; 42   |#define RES_REF_5      HW_LRADC_RES_REF_5
                            13795 ; 43   |#define RES_REF_6      HW_LRADC_RES_REF_6
                            13796 ; 44   |#define RES_REF_7      HW_LRADC_RES_REF_7
                            13797 ; 45   |
                            13798 ; 46   |
                            13799 ; 47   |// These bits are used against LowResAdcStatus, to signal which channels to read in buttons routine
                            13800 ; 48   |#define LOW_RES_ADC_BATT_EN_MASK    1 
                            13801 ; 49   |#define LOW_RES_ADC_AUX_EN_MASK         2 
                            13802 ; 50   |#define LOW_RES_ADC_AUX2_EN_MASK        4
                            13803 ; 51   |
                            13804 ; 52   |/////////////////////////////////////////////////////////////////////////////////////////
                            13805 ; 53   |//
                            13806 ; 54   |//>  Name:          SysLowResolutionAdcReadBin
                            13807 ; 55   |//
                            13808 ; 56   |//   Type:          Function 
                            13809 ; 57   |//
                            13810 ; 58   |//   Description:   Returns the instantaneous Result of the Low Resolution ADC Channel specified
                            13811 ; 59   |//
                            13812 ; 60   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                            13813 ; 61   |//                  BATT for Battery channel
                            13814 ; 62   |//                  AUX for Auxiliary channel 1
                            13815 ; 63   |//                  AUX2 for Auxiliary channel 2
                            13816 ; 64   |//
                            13817 ; 65   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                            13818 ; 66   |//
                            13819 ; 67   |//   Notes:         none
                            13820 ; 68   |//<
                            13821 ; 69   |//////////////////////////////////////////////////////////////////////////////////////////
                            13822 ; 70   |#ifdef DEVICE_3500
                            13823 ; 71   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_BATT_RESULT.B.DATA_OUT : (n == AUX ? HW_LRADC1_RESULT.B.DATA_OUT: HW_LRADC2_RESULT.B.DATA_OUT))
                            13824 ; 72   |#else
                            13825 ; 73   |//3410 does not support AUX2
                            13826 ; 74   |#define SysLowResolutionAdcReadBin(n)    (n==BATT ? HW_LRADC_RES.B.BATLRR : (n == AUX ? HW_LRADC_RES.B.AUXLRR: 0))
                            13827 ; 75   |#endif
                            13828 ; 76   |
                            13829 ; 77   |/////////////////////////////////////////////////////////////////////////////////////////
                            13830 ; 78   |//
                            13831 ; 79   |//>  Name:          SysLowResolutionAdcReadAvg
                            13832 ; 80   |//
                            13833 ; 81   |//   Type:          Function 
                            13834 ; 82   |//
                            13835 ; 83   |//   Description:   Reads the Averaged Result of the Low Resolution ADC Channel specified
                            13836 ; 84   |//
                            13837 ; 85   |//   Inputs:        Constant specifying the Low Resolution ADC Channel
                            13838 ; 86   |//                  BATT for Battery channel
                            13839 ; 87   |//                  AUX for Auxiliary channel 1
                            13840 ; 88   |//                  AUX2 for Auxiliary channel 2
                            13841 ; 89   |//
                            13842 ; 90   |//   Outputs:       Average in binary format (0->127 for 3410, 0->255 for 3500)
                            13843 ; 91   |//
                            13844 ; 92   |//   Notes:         The average is done using 256 samples
                            13845 ; 93   |//<
                            13846 ; 94   |//////////////////////////////////////////////////////////////////////////////////////////
                            13847 ; 95   |#define SysLowResolutionAdcReadAvg(n)    (n==BATT ? LowResAdcBattAvg : (n == AUX ? LowResAdcAuxAvg : LowResAdcAux2Avg))
                            13848 ; 96   |
                            13849 ; 97   |// Functions  
                            13850 ; 98   |void _reentrant SysLowResolutionADCInit(enum LowResADCChannel Adc, enum LowResADCHalfPwr Power, enum LowResADCRef Ref);
                            13851 ; 99   |INT SysLowResolutionAdcReadVolt(BYTE bAdcChannel,BOOL bAverage);
                            13852 ; 100  |
                            13853 ; 101  |// Equates
                            13854 ; 102  |#define AVERAGE_RESULT  TRUE
                            13855 ; 103  |#define INSTANT_RESULT  FALSE
                            13856 ; 104  |
                            13857 ; 105  |#endif // _LOWRESOLUTIONADC_H
                            13858 
                            13860 
                            13861 ; 17   |#include "battery.h"
                            13862 
                            13864 
                            13865 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                            13866 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2004
                            13867 ; 3    |//;
                            13868 ; 4    |//; Filename: battery.h
                            13869 ; 5    |//; Description: 
                            13870 ; 6    |//;///////////////////////////////////////////////////////////////////////////////
                            13871 ; 7    |
                            13872 ; 8    |#ifndef _BATTERY_H
                            13873 ; 9    |#define _BATTERY_H
                            13874 ; 10   |
                            13875 ; 11   |
                            13876 ; 12   |// Functions  
                            13877 ; 13   |extern _reentrant void SysLRADCBrownoutInit(WORD wLowResADCBrownoutLevel);
                            13878 ; 14   |extern _reentrant WORD SysBatteryGetLevel(void);
                            13879 ; 15   |extern _reentrant WORD MvToLradcResult(WORD mVolts);
                            13880 ; 16   |extern _reentrant void SysBatteryLRADCInit(void);
                            13881 ; 17   |extern _reentrant void SysLRADCBrownoutIsrInit(void);
                            13882 ; 18   |
                            13883 ; 19   |// player resource drive refresh allowed only when battery usable % is above this value. 
                            13884 ; 20   |// 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline voltage to do a refresh.
                            13885 ; 21   |// LIION will also require 50% which will work but that could be changed in the future. 
                            13886 ; 22   |#define RESOURCE_REFRESH_MIN_BATT_PCT 50
                            13887 ; 23   |
                            13888 ; 24   |
                            13889 ; 25   |#endif // _BATTERY_H
                            13890 ; 26   |
                            13891 ; 27   |
                            13892 ; 28   |
                            13893 ; 29   |
                            13894 
                            13896 
                            13897 ; 18   |#include "battery_config.h"
                            13898 
                            13900 
                            13901 ; 1    |///////////////////////////////////////////////////////////////////////////////
                            13902 ; 2    |// Sigmatel, Inc  copyright (C) 2003-2004
                            13903 ; 3    |// Filename: battery_config.h
                            13904 ; 4    |// Battery Low Resolution ADC values & recharge values 
                            13905 ; 5    |///////////////////////////////////////////////////////////////////////////////
                            13906 ; 6    |
                            13907 ; 7    |#ifdef BATTERY_TYPE_LI_ION
                            13908 ; 8    |    //these are 3500 only
                            13909 ; 9    |    #define VBATT_REF           REF_5120MV
                            13910 ; 10   |    #define VBATT_MIN_MV        3000
                            13911 ; 11   |    #define VBATT_MAX_MV        4200
                            13912 ; 12   |
                            13913 ; 13   |    #define VBATT_BO_MV         3000
                            13914 ; 14   |
                            13915 ; 15   |    #define BATT_BROWNOUT       VBATT_BO_MV
                            13916 ; 16   |
                            13917 ; 17   |    #ifndef LIION_BATTERY_VOLTAGE
                            13918 ; 18   |    //this is in mV
                            13919 ; 19   |    //The reference design uses a 4.2V LiIon battery
                            13920 ; 20   |    #define LIION_BATTERY_VOLTAGE LIION_BATTERY_VOLTAGE_4_2
                            13921 ; 21   |    #endif 
                            13922 ; 22   |
                            13923 ; 23   |    #ifndef LIION_CONDITIONING_VOLTAGE_THRESHHOLD
                            13924 ; 24   |    //This is in millivolts
                            13925 ; 25   |    #define LIION_CONDITIONING_VOLTAGE_THRESHHOLD 3000
                            13926 ; 26   |    #endif
                            13927 ; 27   |
                            13928 ; 28   |    #ifndef LIION_CONDITIONING_CURRENT_LIMIT
                            13929 ; 29   |    //This is in mA.   
                            13930 ; 30   |    //Refer to the battery data sheet for the proper value
                            13931 ; 31   |    //the reference design uses a 400mAh battery that suggests 40mA is a good conditioning current
                            13932 ; 32   |    #define LIION_CONDITIONING_CURRENT_LIMIT 40
                            13933 ; 33   |    #endif 
                            13934 ; 34   |
                            13935 ; 35   |    #ifndef LIION_CHARGING_TIMEOUT
                            13936 ; 36   |    //the default is 4 hours
                            13937 ; 37   |    #define LIION_CHARGING_TIMEOUT  ((DWORD)(DWORD)4*(DWORD)60*(DWORD)60*(DWORD)1000)
                            13938 ; 38   |    #endif 
                            13939 ; 39   |
                            13940 ; 40   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD
                            13941 ; 41   |    //We want to enter the 'top-off' mode when the voltage differential between
                            13942 ; 42   |    //charging on and off is 20 mV
                            13943 ; 43   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD  20
                            13944 ; 44   |    #endif 
                            13945 ; 45   |
                            13946 ; 46   |    #ifndef LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT
                            13947 ; 47   |    //we want 10 samples of the non-charging current to be within the 
                            13948 ; 48   |    //differential threshhold.  
                            13949 ; 49   |
                            13950 ; 50   |#ifdef STMP_BUILD_PLAYER
                            13951 ; 51   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13952 ; 52   |#else
                            13953 ; 53   |    #define LIION_CHARGING_DIFFERENTIAL_THRESHHOLD_COUNT 10
                            13954 ; 54   |#endif
                            13955 ; 55   |    #endif 
                            13956 ; 56   |
                            13957 ; 57   |    #ifndef LIION_CHARGING_CURRENT_LIMIT
                            13958 ; 58   |    //This is in mA.   
                            13959 ; 59   |    //Refer to the battery data sheet for the proper value
                            13960 ; 60   |    //the reference design uses a 400mAh battery that suggests 400mA is a good charging current
                            13961 ; 61   |    #define LIION_CHARGING_CURRENT_LIMIT 400
                            13962 ; 62   |    #endif 
                            13963 ; 63   |
                            13964 ; 64   |    #ifndef LIION_TOPOFF_TIMEOUT
                            13965 ; 65   |    //After we reach that limit, we want to run for a set amount of time to 'top off' the charging
                            13966 ; 66   |    //in this case, 2 minutes (was 30)
                            13967 ; 67   |#ifdef STMP_BUILD_PLAYER
                            13968 ; 68   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)15*(DWORD)60*(DWORD)1000)
                            13969 ; 69   |#else
                            13970 ; 70   |    #define LIION_TOPOFF_TIMEOUT ((DWORD)(DWORD)2*(DWORD)60*(DWORD)1000)
                            13971 ; 71   |#endif
                            13972 ; 72   |    #endif
                            13973 ; 73   |
                            13974 ; 74   |        #ifndef POWER_OFF_FREQUENCY
                            13975 ; 75   |        //Set the Power Off Frequency.  Determines how frequently charging is turned-off.  
                            13976 ; 76   |#ifdef STMP_BUILD_PLAYER
                            13977 ; 77   |        #define POWER_OFF_FREQUENCY 40
                            13978 ; 78   |#else
                            13979 ; 79   |        #define POWER_OFF_FREQUENCY 500
                            13980 ; 80   |#endif
                            13981 ; 81   |        #endif
                            13982 ; 82   |#endif
                            13983 ; 83   |
                            13984 ; 84   |////////////////////////////////////////////////////////////////////////////////
                            13985 ; 85   |#ifdef BATTERY_TYPE_NIMH
                            13986 ; 86   |    #define ONE  1
                            13987 ; 87   |    #define ZERO 0
                            13988 ; 88   |
                            13989 ; 89   |    //NOTE:  Battery is currently Hardcoded to REF_5120MV in USBMSC
                            13990 ; 90   |#ifdef STMP_BUILD_PLAYER
                            13991 ; 91   |    #define VBATT_REF          REF_2700MV
                            13992 ; 92   |    #define VBATT_MIN_MV       900
                            13993 ; 93   |    #define VBATT_MAX_MV       1500
                            13994 ; 94   |    #define VBATT_BO_MV        840
                            13995 ; 95   |#else
                            13996 ; 96   |    #define VBATT_REF          REF_5120MV
                            13997 ; 97   |    #define VBATT_MIN_MV       900
                            13998 ; 98   |    #define VBATT_MAX_MV       1200
                            13999 ; 99   |    #define VBATT_BO_MV        850
                            14000 ; 100  |#endif
                            14001 ; 101  |
                            14002 ; 102  |    #ifdef DEVICE_3500
                            14003 ; 103  |        #define BATT_BROWNOUT                           VBATT_BO_MV
                            14004 ; 104  |    #else
                            14005 ; 105  |        #define BATT_BROWNOUT               HW_LRADC_BO_TRIP_830MV_SETMASK
                            14006 ; 106  |    #endif
                            14007 ; 107  |    // nimh settings above this line are similar to alkaline values below except v max.
                            14008 ; 108  |    
                            14009 ; 109  |    #ifndef NIMH_BATTERY_VOLTAGE
                            14010 ; 110  |    //Units: mV. This is the rated battery voltage.
                            14011 ; 111  |    //The reference design uses a 1.5V NIMH battery
                            14012 ; 112  |    #define NIMH_BATTERY_VOLTAGE NIMH_BATTERY_VOLTAGE_1_2
                            14013 ; 113  |    #endif 
                            14014 ; 114  |
                            14015 ; 115  |    #ifndef NIMH_VOLTAGE_THRESHHOLD_MV
                            14016 ; 116  |    //Units: mV      Stop charging if this ADC battery voltage is measured. This can occur if an alkaline is inserted.
                            14017 ; 117  |    #define NIMH_VOLTAGE_THRESHHOLD_MV 1800
                            14018 ; 118  |    #endif
                            14019 ; 119  |    // 1 enables alkaline detection via brief charge current & voltage threshold check.
                            14020 ; 120  |    #define ALKALINE_DETECTION_IMPULSE_CHARGE_ENABLE 0 /* LEAVE DISABLED. Unimplemented. */
                            14021 ; 121  |
                            14022 ; 122  |    //------- NIMH Detection via exposed batt case check w/ gpio. You must configure a gpio reg & pin num also below.
                            14023 ; 123  |    #define BATTERY_CASE_POLARITY_DETECT_ENABLE 0 // Verified. GPIO pin setup in nimh.c init, External pullup R (47kOhm)
                            14024 ; 124  |    // Explanation: General Purpose Input pin can connect to cylindrical batt end corner. 
                            14025 ; 125  |    // NiMH AAA batteries have ground case exposed at corner, else casing insulation 
                            14026 ; 126  |    //   causes signal to float & external pullup R gives a logic 1 indicating non-nimh. 
                            14027 ; 127  |    // NiMH AA  batteries instead have additional positive terminal exposure (opposite polarity). 
                            14028 ; 128  |    //   Ext transistor can Vlevel shift for gpio logic-1 voltage. 
                            14029 ; 129  |    //   non-NIMH casing will allow gpio pin to stay grounded & gives logic 0.
                            14030 ; 130  |
                            14031 ; 131  |    // SET this to ZERO if your NiMH is AAA or has ground case contact (detects NiMH via case (-) contact)
                            14032 ; 132  |    // SET this to ONE if your NiMH battery is AA (detects NiMH via (+) terminal contact). Requires ext transistor V level shift.
                            14033 ; 133  |    #define NIMH_BATTERY_CASE_LOGIC_LEVEL ZERO
                            14034 ; 134  |    // *** IF YOU HAVE ENABLED, battery case polarity detection (used with nimh), 
                            14035 ; 135  |    //  NOTE: The GP number and bit number in the four macros below must be set to match your input PIN number. 
                            14036 ; 136  |    //    LAYOUT SPECIFIC, but all 3550/3560 qfp and bga can use a single GPIO register & bit num as below. 
                            14037 ; 137  |    //    SigmaTel HW apps recommends pin GP37= pin 17 (100qfp)= pin j7 (bga)= cpu card pin24= GP1 Bit13 per 35xx datasheet.
                            14038 ; 138  |    #define CONFIGURED_GPIO_INPUT_BIT_FOR_BATTERY_CASE_POLARITY ( HW_GP1DIR.B.B13 )
                            14039 ; 139  |    // GPIO Enable register number as GPIO function.
                            14040 ; 140  |    #define CONFIGURED_BATT_CASE_GP_NUM_ENR (HW_GP1ENR)
                            14041 ; 141  |    // Data output enable reg num to use (will be set as input pin in this case)
                            14042 ; 142  |    #define CONFIGURED_BATT_CASE_GP_NUM_DOER  (HW_GP1DOER)
                            14043 ; 143  |    // bit num to use with desired input pin above
                            14044 ; 144  |    #define CONFIGURED_BATT_CASE_GP_BIT  (HW_GP_B13_SETMASK)
                            14045 ; 145  |    
                            14046 ; 146  |    // Error code returned during charging init when case detect feature enabled but cell case not detected.
                            14047 ; 147  |    #define NIMH_POLARITY_NOT_DETECTED (-2)
                            14048 ; 148  |    //------- end batt case polarity detection
                            14049 ; 149  |
                            14050 ; 150  |    //------------------------------------
                            14051 ; 151  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS
                            14052 ; 152  |    // 0.1C = 10 hr charge, but use 12 hours to more fully charge larger cells. (units: msec)
                            14053 ; 153  |    #define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)12*(DWORD)60*(DWORD)60*(DWORD)1000))
                            14054 ; 154  |    //#define NIMH_EQUILIBRIUM_CHARGING_TIMEOUT_MS ((DWORD)((DWORD)10*(DWORD)1000)) //10 sec test mode to easily observe transition
                            14055 ; 155  |    #endif 
                            14056 ; 156  |    
                            14057 ; 157  |    #ifndef NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT
                            14058 ; 158  |    // Units: mA. Refer to the battery data sheet for the proper value. 
                            14059 ; 159  |    // Usually 1 C AAA means a charge of 700 mAh, 750 mAh for a few AAA cells (energizer).
                            14060 ; 160  |    // Assume 700mAh battery so EQUILIBRIUM charge at 0.1C rate (1/10th charge/hr) = 70mA. 
                            14061 ; 161  |    // Register options are 60 or 75mA. Suggest 75mA for AAA. AA's have wide mAh range. Use 1/10th of mAh here:
                            14062 ; 162  |    #define NIMH_EQUILIBRIUM_CHARGING_CURRENT_LIMIT 75
                            14063 ; 163  |    #endif   
                            14064 ; 164  |    #ifndef
                            14065 ; 165  |    #define NIMH_TRICKLE_CHARGE_ENABLE 1
                            14066 ; 166  |    #endif
                            14067 ; 167  |    #ifndef NIMH_TRICKLE_CHARGE_CURRENT
                            14068 ; 168  |    #define NIMH_TRICKLE_CHARGE_CURRENT 10  
                            14069 ; 169  |    #endif //25mA is 0.035C rate for a 700mAh cell. 10mA recommended by 35xx charger designer.
                            14070 ; 170  |    //-------------------------------------
                            14071 ; 171  |    #ifndef NIMH_QUICK_CHARGING_TIMEOUT_MS   // NOTE: C/3 quick charging (3.6hrs) is not implemented.
                            14072 ; 172  |    // ~4 hr charge rate of C/3 terminated by one of 3 events: (per Duracell whitepaper) 
                            14073 ; 173  |    //   -dV/minute of 10mV, or 3.6hr timeout (216 minutes), or real temperature>=(60celcius|140F).
                            14074 ; 174  |    // Thermal warning: at this C/3 charge rate, all 3 of the above termination events must be checked.
                            14075 ; 175  |    #define NIMH_QUICK_CHARGING_TIMEOUT_MS ((DWORD)(DWORD)216*(DWORD)60*(DWORD)1000) 
                            14076 ; 176  |    #endif
                            14077 ; 177  |    #ifndef NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD
                            14078 ; 178  |    #define NIMH_QUICK_CHARGING_MV_PER_MINUTE_THRESHOLD 10
                            14079 ; 179  |    #endif
                            14080 ; 180  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C
                            14081 ; 181  |    // For temp check to function:    10celcius|50F < Ambient Temperature < 45celcius|113F
                            14082 ; 182  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_C 60
                            14083 ; 183  |    #endif
                            14084 ; 184  |    #ifndef NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F
                            14085 ; 185  |    #define NIMH_QUICK_CHARGING_TEMPERATURE_LIMIT_F 140
                            14086 ; 186  |    #endif
                            14087 ; 187  |    // C/3 = 700mA/3 = 233 mA, HW supports 235mA. For C=750mAh: 750mA/3= 250mA. 
                            14088 ; 188  |    #ifndef NIMH_QUICK_CHARGING_CURRENT_LIMIT
                            14089 ; 189  |    #define NIMH_QUICK_CHARGING_CURRENT_LIMIT 235        
                            14090 ; 190  |    #endif    
                            14091 ; 191  |    //-------------------------------------
                            14092 ; 192  |    #ifndef NIMH_FAST_CHARGING_CURRENT_LIMIT  // NOTE: C/2 Fast charging (2hrs) is not implemented. 
                            14093 ; 193  |    // in units of mA.   Temperature measurement required with this mode. 
                            14094 ; 194  |    #define NIMH_FAST_CHARGING_CURRENT_LIMIT 400
                            14095 ; 195  |    #endif      
                            14096 ; 196  |    #ifndef NIMH_FAST_CHARGING_TOPOFF_TIMEOUT
                            14097 ; 197  |    //After we reach that limit, we may want to run for a set amount of time to 'top off'
                            14098 ; 198  |    //the charging in this case,                       n minutes
                            14099 ; 199  |    #define NIMH_FAST_CHARGING_TOPOFF_TIMEOUT ((DWORD)(DWORD)30*(DWORD)60*(DWORD)1000)
                            14100 ; 200  |    #endif
                            14101 ; 201  |
                            14102 ; 202  |        #ifndef POWER_OFF_FREQUENCY
                            14103 ; 203  |        //Set the Power Off Frequency Count.  Determines how frequently charging is turned-off. 
                            14104 ; 204  |#ifdef STMP_BUILD_PLAYER
                            14105 ; 205  |        #define POWER_OFF_FREQUENCY 40
                            14106 ; 206  |#else
                            14107 ; 207  |        #define POWER_OFF_FREQUENCY 500
                            14108 ; 208  |#endif
                            14109 ; 209  |        #endif
                            14110 ; 210  |    
                            14111 ; 211  |#endif // BATTERY_TYPE_NIMH
                            14112 ; 212  |////////////////////////////////////////////////////////////////////////////////
                            14113 ; 213  |
                            14114 ; 214  |#ifdef BATTERY_TYPE_ALKALINE
                            14115 ; 215  |#ifdef STMP_BUILD_PLAYER
                            14116 ; 216  |    #define VBATT_REF          REF_2700MV
                            14117 ; 217  |    #define VBATT_MIN_MV       900
                            14118 ; 218  |    #define VBATT_MAX_MV       1500
                            14119 ; 219  |    #define VBATT_BO_MV        840
                            14120 ; 220  |#else
                            14121 ; 221  |    #define VBATT_REF          REF_5120MV
                            14122 ; 222  |    #define VBATT_MIN_MV       900
                            14123 ; 223  |    #define VBATT_MAX_MV       1500
                            14124 ; 224  |    #define VBATT_BO_MV        850
                            14125 ; 225  |#endif
                            14126 ; 226  |
                            14127 ; 227  |    #define BATT_BROWNOUT                               VBATT_BO_MV
                            14128 ; 228  |    
                            14129 ; 229  |    #define OXYRIDE_THRESHOLD_MV  1550     // Battery considered Oxyride if avg voltage exceeds 1.55v
                            14130 ; 230  |    #define OXYRIDE_SETBACK_MV     200     // Battery Voltage - VDDD < 200mv for VDDIO stability
                            14131 ; 231  |#endif 
                            14132 
                            14134 
                            14135 ; 19   |#include "menus.h"
                            14136 
                            14138 
                            14139 ; 1    |#ifndef _MENU_H
                            14140 ; 2    |#define _MENU_H
                            14141 ; 3    |
                            14142 ; 4    |#include "types.h"
                            14143 
                            14145 
                            14146 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            14147 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            14148 ; 3    |//
                            14149 ; 4    |// Filename: types.h
                            14150 ; 5    |// Description: Standard data types
                            14151 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14152 ; 7    |
                            14153 ; 8    |#ifndef _TYPES_H
                            14154 ; 9    |#define _TYPES_H
                            14155 ; 10   |
                            14156 ; 11   |// TODO:  move this outta here!
                            14157 ; 12   |#if !defined(NOERROR)
                            14158 ; 13   |#define NOERROR 0
                            14159 ; 14   |#define SUCCESS 0
                            14160 ; 15   |#endif 
                            14161 ; 16   |#if !defined(SUCCESS)
                            14162 ; 17   |#define SUCCESS  0
                            14163 ; 18   |#endif
                            14164 ; 19   |#if !defined(ERROR)
                            14165 ; 20   |#define ERROR   -1
                            14166 ; 21   |#endif
                            14167 ; 22   |#if !defined(FALSE)
                            14168 ; 23   |#define FALSE 0
                            14169 ; 24   |#endif
                            14170 ; 25   |#if !defined(TRUE)
                            14171 ; 26   |#define TRUE  1
                            14172 ; 27   |#endif
                            14173 ; 28   |
                            14174 ; 29   |#if !defined(NULL)
                            14175 ; 30   |#define NULL 0
                            14176 ; 31   |#endif
                            14177 ; 32   |
                            14178 ; 33   |#define MAX_INT     0x7FFFFF
                            14179 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            14180 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            14181 ; 36   |#define MAX_ULONG   (-1) 
                            14182 ; 37   |
                            14183 ; 38   |#define WORD_SIZE   24              // word size in bits
                            14184 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            14185 ; 40   |
                            14186 ; 41   |
                            14187 ; 42   |#define BYTE    unsigned char       // btVarName
                            14188 ; 43   |#define CHAR    signed char         // cVarName
                            14189 ; 44   |#define USHORT  unsigned short      // usVarName
                            14190 ; 45   |#define SHORT   unsigned short      // sVarName
                            14191 ; 46   |#define WORD    unsigned int        // wVarName
                            14192 ; 47   |#define INT     signed int          // iVarName
                            14193 ; 48   |#define DWORD   unsigned long       // dwVarName
                            14194 ; 49   |#define LONG    signed long         // lVarName
                            14195 ; 50   |#define BOOL    unsigned int        // bVarName
                            14196 ; 51   |#define FRACT   _fract              // frVarName
                            14197 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            14198 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            14199 ; 54   |#define FLOAT   float               // fVarName
                            14200 ; 55   |#define DBL     double              // dVarName
                            14201 ; 56   |#define ENUM    enum                // eVarName
                            14202 ; 57   |#define CMX     _complex            // cmxVarName
                            14203 ; 58   |typedef WORD UCS3;                   // 
                            14204 ; 59   |
                            14205 ; 60   |#define UINT16  unsigned short
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14206 ; 61   |#define UINT8   unsigned char   
                            14207 ; 62   |#define UINT32  unsigned long
                            14208 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            14209 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            14210 ; 65   |#define WCHAR   UINT16
                            14211 ; 66   |
                            14212 ; 67   |//UINT128 is 16 bytes or 6 words
                            14213 ; 68   |typedef struct UINT128_3500 {   
                            14214 ; 69   |    int val[6];     
                            14215 ; 70   |} UINT128_3500;
                            14216 ; 71   |
                            14217 ; 72   |#define UINT128   UINT128_3500
                            14218 ; 73   |
                            14219 ; 74   |// Little endian word packed byte strings:   
                            14220 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14221 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14222 ; 77   |// Little endian word packed byte strings:   
                            14223 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14224 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14225 ; 80   |
                            14226 ; 81   |// Declare Memory Spaces To Use When Coding
                            14227 ; 82   |// A. Sector Buffers
                            14228 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            14229 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            14230 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            14231 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            14232 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            14233 ; 88   |// B. Media DDI Memory
                            14234 ; 89   |#define MEDIA_DDI_MEM _Y
                            14235 ; 90   |
                            14236 ; 91   |
                            14237 ; 92   |
                            14238 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            14239 ; 94   |// Examples of circular pointers:
                            14240 ; 95   |//    INT CIRC cpiVarName
                            14241 ; 96   |//    DWORD CIRC cpdwVarName
                            14242 ; 97   |
                            14243 ; 98   |#define RETCODE INT                 // rcVarName
                            14244 ; 99   |
                            14245 ; 100  |// generic bitfield structure
                            14246 ; 101  |struct Bitfield {
                            14247 ; 102  |    unsigned int B0  :1;
                            14248 ; 103  |    unsigned int B1  :1;
                            14249 ; 104  |    unsigned int B2  :1;
                            14250 ; 105  |    unsigned int B3  :1;
                            14251 ; 106  |    unsigned int B4  :1;
                            14252 ; 107  |    unsigned int B5  :1;
                            14253 ; 108  |    unsigned int B6  :1;
                            14254 ; 109  |    unsigned int B7  :1;
                            14255 ; 110  |    unsigned int B8  :1;
                            14256 ; 111  |    unsigned int B9  :1;
                            14257 ; 112  |    unsigned int B10 :1;
                            14258 ; 113  |    unsigned int B11 :1;
                            14259 ; 114  |    unsigned int B12 :1;
                            14260 ; 115  |    unsigned int B13 :1;
                            14261 ; 116  |    unsigned int B14 :1;
                            14262 ; 117  |    unsigned int B15 :1;
                            14263 ; 118  |    unsigned int B16 :1;
                            14264 ; 119  |    unsigned int B17 :1;
                            14265 ; 120  |    unsigned int B18 :1;
                            14266 ; 121  |    unsigned int B19 :1;
                            14267 ; 122  |    unsigned int B20 :1;
                            14268 ; 123  |    unsigned int B21 :1;
                            14269 ; 124  |    unsigned int B22 :1;
                            14270 ; 125  |    unsigned int B23 :1;
                            14271 ; 126  |};
                            14272 ; 127  |
                            14273 ; 128  |union BitInt {
                            14274 ; 129  |        struct Bitfield B;
                            14275 ; 130  |        int        I;
                            14276 ; 131  |};
                            14277 ; 132  |
                            14278 ; 133  |#define MAX_MSG_LENGTH 10
                            14279 ; 134  |struct CMessage
                            14280 ; 135  |{
                            14281 ; 136  |        unsigned int m_uLength;
                            14282 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            14283 ; 138  |};
                            14284 ; 139  |
                            14285 ; 140  |typedef struct {
                            14286 ; 141  |    WORD m_wLength;
                            14287 ; 142  |    WORD m_wMessage;
                            14288 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            14289 ; 144  |} Message;
                            14290 ; 145  |
                            14291 ; 146  |struct MessageQueueDescriptor
                            14292 ; 147  |{
                            14293 ; 148  |        int *m_pBase;
                            14294 ; 149  |        int m_iModulo;
                            14295 ; 150  |        int m_iSize;
                            14296 ; 151  |        int *m_pHead;
                            14297 ; 152  |        int *m_pTail;
                            14298 ; 153  |};
                            14299 ; 154  |
                            14300 ; 155  |struct ModuleEntry
                            14301 ; 156  |{
                            14302 ; 157  |    int m_iSignaledEventMask;
                            14303 ; 158  |    int m_iWaitEventMask;
                            14304 ; 159  |    int m_iResourceOfCode;
                            14305 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            14306 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            14307 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            14308 ; 163  |    int m_uTimeOutHigh;
                            14309 ; 164  |    int m_uTimeOutLow;
                            14310 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            14311 ; 166  |};
                            14312 ; 167  |
                            14313 ; 168  |union WaitMask{
                            14314 ; 169  |    struct B{
                            14315 ; 170  |        unsigned int m_bNone     :1;
                            14316 ; 171  |        unsigned int m_bMessage  :1;
                            14317 ; 172  |        unsigned int m_bTimer    :1;
                            14318 ; 173  |        unsigned int m_bButton   :1;
                            14319 ; 174  |    } B;
                            14320 ; 175  |    int I;
                            14321 ; 176  |} ;
                            14322 ; 177  |
                            14323 ; 178  |
                            14324 ; 179  |struct Button {
                            14325 ; 180  |        WORD wButtonEvent;
                            14326 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            14327 ; 182  |};
                            14328 ; 183  |
                            14329 ; 184  |struct Message {
                            14330 ; 185  |        WORD wMsgLength;
                            14331 ; 186  |        WORD wMsgCommand;
                            14332 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            14333 ; 188  |};
                            14334 ; 189  |
                            14335 ; 190  |union EventTypes {
                            14336 ; 191  |        struct CMessage msg;
                            14337 ; 192  |        struct Button Button ;
                            14338 ; 193  |        struct Message Message;
                            14339 ; 194  |};
                            14340 ; 195  |
                            14341 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            14342 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            14343 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            14344 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            14345 ; 200  |
                            14346 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            14347 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            14348 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            14349 ; 204  |
                            14350 ; 205  |#if DEBUG
                            14351 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            14352 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            14353 ; 208  |#else 
                            14354 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            14355 ; 210  |#define DebugBuildAssert(x)    
                            14356 ; 211  |#endif
                            14357 ; 212  |
                            14358 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            14359 ; 214  |//  #pragma asm
                            14360 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            14361 ; 216  |//  #pragma endasm
                            14362 ; 217  |
                            14363 ; 218  |
                            14364 ; 219  |#ifdef COLOR_262K
                            14365 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            14366 ; 221  |#elif defined(COLOR_65K)
                            14367 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            14368 ; 223  |#else
                            14369 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            14370 ; 225  |#endif
                            14371 ; 226  |    
                            14372 ; 227  |#endif // #ifndef _TYPES_H
                            14373 
                            14375 
                            14376 ; 5    |
                            14377 ; 6    |#define TIMER_ANIMATE           0
                            14378 ; 7    |#define TIMER_AUTO_SHUTDOWN     1
                            14379 ; 8    |#define TIMER_BATT_CHK          2
                            14380 ; 9    |#define TIMER_SONG_CHANGE       3
                            14381 ; 10   |#define TIMER_TUNER                             4
                            14382 ; 11   |#define TIMER_BACKLIGHT                 5
                            14383 ; 12   |#define TIMER_FFRWND                6
                            14384 ; 13   |#define TIMER_BATTERY_CHARGER   7
                            14385 ; 14   |#define TIMER_TIMEDATE                  8
                            14386 ; 15   |#define TIMER_JPEG_DECODER_CALLBACK 6 //shared with TIMER_FFRWND since they won't use together
                            14387 ; 16   |#define TIMER_APIC_UPDATE               9
                            14388 ; 17   |
                            14389 ; 18   |#define MENU_MSG_ANIMATE            MENU_LAST_MSG_ID+1
                            14390 ; 19   |#define MENU_MSG_AUTOSHUTDOWN       MENU_LAST_MSG_ID+2
                            14391 ; 20   |#define MENU_SONG_CHANGE_TIMEOUT    MENU_LAST_MSG_ID+3
                            14392 ; 21   |#define MENU_TUNER_READY                        MENU_LAST_MSG_ID+4
                            14393 ; 22   |#define MENU_MSG_TURN_OFF_BACKLIGHT MENU_LAST_MSG_ID+5
                            14394 ; 23   |#define MENU_MSG_SEND_FF            MENU_LAST_MSG_ID+6
                            14395 ; 24   |#define MENU_MSG_SEND_RWND          MENU_LAST_MSG_ID+7
                            14396 ; 25   |#define MENU_BATTERY_CHARGER_TIMEOUT  MENU_LAST_MSG_ID+8
                            14397 ; 26   |#define MENU_MSG_REFRESH_TIMEDATE       MENU_LAST_MSG_ID+9
                            14398 ; 27   |#ifdef USE_PLAYLIST3
                            14399 ; 28   |#define MENU_PAGE_ITEM_COUNT    (4)
                            14400 ; 29   |#define MENU_ITEM_HEIGHT                (8)
                            14401 ; 30   |#define MENU_ITEM_X_OFFSET      (0)
                            14402 ; 31   |#define MENU_ITEM_Y_OFFSET      (16)
                            14403 ; 32   |
                            14404 ; 33   |#define PLAYLIST_ENABLE         (0)
                            14405 ; 34   |#endif
                            14406 ; 35   |#define ANIMATE_PERIOD          (100)
                            14407 ; 36   |#define MENU_MSG_JPEG_CALLBACK            MENU_LAST_MSG_ID+10
                            14408 ; 37   |#define MENU_JPEG_THUMBNAIL_CURSOR  MENU_LAST_MSG_ID+11
                            14409 ; 38   |#define MENU_JPEG_NEXT_PICTURE          MENU_LAST_MSG_ID+12
                            14410 ; 39   |#define MENU_MSG_APIC_UPDATE            MENU_LAST_MSG_ID+13
                            14411 ; 40   |#ifdef USE_PLAYLIST5
                            14412 ; 41   |#define MENU_MSG_PL5_PLAY_SONG          MENU_LAST_MSG_ID+14
                            14413 ; 42   |#endif
                            14414 ; 43   |
                            14415 ; 44   |#define MENU_BATTERY_CHARGER_TIMEOUT  MENU_LAST_MSG_ID+8
                            14416 ; 45   |#define FILE_NAME_BUFFER_SIZE  7
                            14417 ; 46   |#define TIMER_JPEG_DECODER_TIMEOUT_MS 5
                            14418 ; 47   |
                            14419 ; 48   |// used with shutdown menu
                            14420 ; 49   |// FORCESHUTDOWN does not allow abort
                            14421 ; 50   |// USERSHUTDOWN allows user abort if PH_STOP is not held long enough
                            14422 ; 51   |#define FORCESHUTDOWN                   TRUE
                            14423 ; 52   |#define USERSHUTDOWN                    FALSE
                            14424 ; 53   |
                            14425 ; 54   |// if low battery display low battery message
                            14426 ; 55   |#define LOWBATT                                 TRUE
                            14427 ; 56   |#define REGBATT                                 FALSE
                            14428 ; 57   |
                            14429 ; 58   |//Backlight Define Statements
                            14430 ; 59   |#ifdef CLCD
                            14431 ; 60   |#ifdef CLCD_16BIT
                            14432 ; 61   |#define BACKLIGHT_CONTROL_REGISTER              HW_PWM_CH0AR.I
                            14433 ; 62   |#define BACKLIGHT_CONTROL_REGISTER_ENABLE       HW_GP0ENR.B.B9  //PWM2
                            14434 ; 63   |#define BACKLIGHT_CONTROL_REGISTER_DIRECTION    HW_GP0DOER.B.B9
                            14435 ; 64   |#define BACKLIGHT_ON                            0x06C000
                            14436 ; 65   |#define BACKLIGHT_OFF                           0x024000
                            14437 ; 66   |#else
                            14438 ; 67   |#define BACKLIGHT_CONTROL_REGISTER              HW_PWM_CH2AR.I
                            14439 ; 68   |#define BACKLIGHT_CONTROL_REGISTER_ENABLE       HW_GP0ENR.B.B9  //PWM2
                            14440 ; 69   |#define BACKLIGHT_CONTROL_REGISTER_DIRECTION    HW_GP0DOER.B.B9
                            14441 ; 70   |#define BACKLIGHT_ON                            0x006000
                            14442 ; 71   |#define BACKLIGHT_OFF                           0x002000
                            14443 ; 72   |#endif
                            14444 ; 73   |#else
                            14445 ; 74   |#define BACKLIGHT_CONTROL_REGISTER              HW_GP0DOR.B.B9
                            14446 ; 75   |#define BACKLIGHT_CONTROL_REGISTER_ENABLE       HW_GP0ENR.B.B9
                            14447 ; 76   |#define BACKLIGHT_CONTROL_REGISTER_DIRECTION    HW_GP0DOER.B.B9
                            14448 ; 77   |#define BACKLIGHT_ON                            TRUE
                            14449 ; 78   |#define BACKLIGHT_OFF                           FALSE
                            14450 ; 79   |#endif
                            14451 ; 80   |#define BACKLIGHT_TIME                                          5000            //5 seconds
                            14452 ; 81   |
                            14453 ; 82   |// used with NextEQ / NextPlayMode to indicate direction
                            14454 ; 83   |#define INCREMENT 1
                            14455 ; 84   |#define DECREMENT 0
                            14456 ; 85   |
                            14457 ; 86   |//These two sit outside the boundary of MENU_FIRST and MENU_LAST simply because they're
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14458 ; 87   |//states that aren't included in the displayed list.
                            14459 ; 88   |#define MENU_EXIT       101
                            14460 ; 89   |#define MENU_MAIN       100
                            14461 ; 90   |
                            14462 ; 91   |// menu flags
                            14463 ; 92   |#define MENU_FLAG_POWER_DOWN_ENABLED    B0      // when clear, disable tracking
                            14464 ; 93   |#define MENU_FLAG_ESCAPE_TO_MUSIC               B1      // when set, escape all menu nesting to music
                            14465 ; 94   |#define MENU_FLAG_SAVE_CHANGES          B2  // true if fast escape interrupted by save changes?
                            14466 ; 95   |#if (defined USE_PLAYLIST3) || (defined USE_PLAYLIST5)
                            14467 ; 96   |#define MENU_FLAG_ESCAPE_TO_RECORD              B2      // when set, escape all menu nesting to voice/fm menu and start recording
                            14468 ; 97   |#define MENU_FLAG_RETURN_TO_MUSIC               B3      // when set, escape all menu nesting to music
                            14469 ; 98   |#endif
                            14470 ; 99   |
                            14471 ; 100  |#define LANGUAGES_ENG   0
                            14472 ; 101  |#define LANGUAGES_VIE   1
                            14473 ; 102  |#define LANGUAGES_FIRST LANGUAGES_ENG
                            14474 ; 103  |#define LANGUAGES_LAST          LANGUAGES_VIE
                            14475 ; 104  |
                            14476 ; 105  |// 1 word menu variable -- bit flags
                            14477 ; 106  |extern struct Bitfield g_MenuFlags;
                            14478 ; 107  |
                            14479 ; 108  |// This data type is declared in mainmenu.c, but is externed here for all other menus.
                            14480 ; 109  |extern union EventTypes gEventInfo;
                            14481 ; 110  |
                            14482 ; 111  |//each menu should set g_iCurrentMenu to make sure the menu icon shows up correctly.
                            14483 ; 112  |extern INT g_iCurrentMenu;
                            14484 ; 113  |
                            14485 ; 114  |//Backlight State
                            14486 ; 115  |extern INT g_iBackLightState;
                            14487 ; 116  |
                            14488 ; 117  |//Language state
                            14489 ; 118  |extern INT g_iLanguage;
                            14490 ; 119  |
                            14491 ; 120  |//Export all Menu prototypes for calls allowed from other code banks
                            14492 ; 121  |void _reentrant UserTask(int a, int b, int *pPtr);
                            14493 ; 122  |_reentrant INT ShutdownMenu( INT iIgnored1, INT iIgnored2, INT *pPtr);
                            14494 ; 123  |_reentrant INT SplashScreen( INT iResource, INT iMilliseconds, INT *pPtr);
                            14495 ; 124  |int _reentrant MusicMenu(INT a, INT b, INT *c);
                            14496 ; 125  |#ifdef USE_PLAYLIST3
                            14497 ; 126  |int _reentrant PlayMusicMenu(INT a, INT b, INT *c);
                            14498 ; 127  |int _reentrant NewMusicMenu(INT a, INT b, INT *c);
                            14499 ; 128  |int _reentrant BrowseMenu(INT a, INT b, INT *c);
                            14500 ; 129  |#endif // #ifdef USE_PLAYLIST3
                            14501 ; 130  |#ifdef MOTION_VIDEO
                            14502 ; 131  |int _reentrant MotionVideoMenu(INT a, INT b, INT *c);
                            14503 ; 132  |#endif
                            14504 ; 133  |#ifdef JPEG_APP
                            14505 ; 134  |int _reentrant JpegDisplayMenu(int a, int b, int *pPtr);
                            14506 ; 135  |int _reentrant JpegManualMenu(int a, int b, int *pPtr);
                            14507 ; 136  |int _reentrant JpegSlideshowMenu(int a, int b, int *pPtr);
                            14508 ; 137  |int _reentrant JpegThumbnailMenu(int a, int b, int *pPtr);
                            14509 ; 138  |#endif
                            14510 ; 139  |int _reentrant SpectrogramMenu(INT a, INT b, INT *pPtr);
                            14511 ; 140  |int _reentrant VoiceMenu(int a, int b, int *c);
                            14512 ; 141  |int _reentrant SettingsMenu(int a, int b, int *pPtr);
                            14513 ; 142  |int _reentrant EqMenu(int a, int b, int *pPtr);
                            14514 ; 143  |int _reentrant SendEQ(int iCurrentEQ, int b, int *pPtr);
                            14515 ; 144  |
                            14516 ; 145  |int _reentrant PlayModeMenu(int a, int b, int *pPtr);
                            14517 ; 146  |int _reentrant NextPlayMode(int iDirection, int b, int *c);
                            14518 ; 147  |int _reentrant ContrastMenu(int a, int b, int *pPtr);
                            14519 ; 148  |int _reentrant AboutMenu(int a, int b, int *pPtr);
                            14520 ; 149  |#ifdef USE_PLAYLIST5
                            14521 ; 150  |int _reentrant BrowseMenu(INT a, INT b, INT *c);
                            14522 ; 151  |#endif
                            14523 ; 152  |int _reentrant DeleteMenu(int a, int b, int *pPtr);
                            14524 ; 153  |int _reentrant PwrSavingsMenu(int a, int b, int *pPtr);
                            14525 ; 154  |int _reentrant BackLightMenu(int a, int b, int *pPtr);
                            14526 ; 155  |int _reentrant RecordSettingsMenu(int a, int b, int *pPtr);
                            14527 ; 156  |int _reentrant TimeDateMenu(int a, int b, int *pPtr);
                            14528 ; 157  |int _reentrant SetTimeMenu(int a, int b, int *pPtr);
                            14529 ; 158  |int _reentrant SetDateMenu(int a, int b, int *pPtr);
                            14530 ; 159  |
                            14531 ; 160  |int _reentrant TestMenu(int a, int b, int *pPtr);
                            14532 ; 161  |void _reentrant RecordTestMenu(void);
                            14533 ; 162  |
                            14534 ; 163  |int _reentrant FMTunerMenu(int a, int b, int *c);
                            14535 ; 164  |int _reentrant InitPlayerStateMachine(int iEvent, int iIgnored, int *pMessagePtr);
                            14536 ; 165  |int _reentrant HandlePlayerStateMachine(int iEvent, int iIgnored, int *pMessagePtr);
                            14537 ; 166  |int _reentrant ExitPlayerStateMachine(int iEvent, int iIgnored, int *pMessagePtr);
                            14538 ; 167  |_reentrant int InitRecorderStateMachine(int EncodingType, int InputSource, int *c);
                            14539 ; 168  |_reentrant int HandleRecorderStateMachine(int a, int b, int *c);
                            14540 ; 169  |_reentrant int ExitRecorderStateMachine(int InputSource, int b, int *c);
                            14541 ; 170  |int _reentrant NextEQ(INT iDirection, INT b, INT *c);
                            14542 ; 171  |_reentrant INT RecordVoiceFile(INT a, INT b, INT *pPtr);
                            14543 ; 172  |_reentrant int RefreshDisplay           ( int iDisplayHint, int a, int *pPtr);
                            14544 ; 173  |_reentrant void DisplayClearDisplay      ( int iDisplayHint, int a, int *pPtr);
                            14545 ; 174  |_reentrant int DisplayEQIcon            ( int iDisplayHint, int a, int *pPtr);
                            14546 ; 175  |_reentrant int DisplayVolume            ( int iDisplayHint, int a, int *pPtr);
                            14547 ; 176  |_reentrant int DisplayShutdownProgress  ( int iDisplayHint, int a, int *pPtr);
                            14548 ; 177  |_reentrant int DisplayDefragmentstore  ( int iDisplayHint, int a, int *pPtr);
                            14549 ; 178  |_reentrant int DisplayKickOff           ( int iDisplayHint, int a, int *pPtr);
                            14550 ; 179  |_reentrant int DisplayKickOffLocked     ( int iDisplayHint, int a, int *pPtr);
                            14551 ; 180  |_reentrant void DisplayLockIcon          ( int iDisplayHint, int a, int *pPtr);
                            14552 ; 181  |_reentrant void ChangePlaySet(INT mode);
                            14553 ; 182  |void _reentrant UpdateAutoShutdownTimer (void);
                            14554 ; 183  |int _reentrant SetPwrSetting (int iCurrentPwrSetting, int b, int *pPtr);
                            14555 ; 184  |int  _reentrant SendPlayMode(int iCurrentPlayMode, int b, int *pPtr);
                            14556 ; 185  |_reentrant int DeleteFilePrompt(int a,int b, int *pPtr);
                            14557 ; 186  |#endif
                            14558 ; 187  |
                            14559 
                            14561 
                            14562 ; 20   |#include "exec.h"
                            14563 
                            14565 
                            14566 ; 1    |#ifndef EXEC_H
                            14567 ; 2    |#define EXEC_H
                            14568 ; 3    |
                            14569 ; 4    |
                            14570 ; 5    |void _reentrant SysPostMessage(int iLength,...);
                            14571 ; 6    |int _asmfunc GetMessage(struct MessageQueueDescriptor*,struct CMessage * );
                            14572 ; 7    |long _asmfunc SysGetCurrentTime(void);
                            14573 ; 8    |
                            14574 ; 9    |
                            14575 ; 10   |#endif
                            14576 
                            14578 
                            14579 ; 21   |#include "batterycharge.h"
                            14580 
                            14582 
                            14583 ; 1    |#ifndef __BATTERYCHARGE_H
                            14584 ; 2    |#define __BATTERYCHARGE_H
                            14585 ; 3    |
                            14586 ; 4    |//entry point for menus. function called via SysCallFunction()
                            14587 ; 5    |#ifdef STMP_BUILD_PLAYER
                            14588 ; 6    |_reentrant int BatteryChargeStateMachine(int a, int b, int *c);
                            14589 ; 7    |#else
                            14590 ; 8    |_reentrant void BatteryChargeStateMachine(void);
                            14591 ; 9    |#endif
                            14592 ; 10   |
                            14593 ; 11   |_reentrant WORD BatteryChargeInitialize(void);
                            14594 ; 12   |_reentrant void BatteryChargeDisableCharging(BOOL);
                            14595 ; 13   |_reentrant void BatteryChargeEnableCharging(void);
                            14596 ; 14   |_reentrant BOOL BatteryChargeIsCharging(void);
                            14597 ; 15   |_reentrant BOOL BatteryChargeIsTrickleCharging(void);
                            14598 ; 16   |
                            14599 ; 17   |_reentrant WORD BatteryChargeImplementationInitialize(void);
                            14600 ; 18   |_reentrant void BatteryChargeImplementationSample(BOOL);
                            14601 ; 19   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void);
                            14602 ; 20   |
                            14603 ; 21   |
                            14604 ; 22   |#endif 
                            14605 
                            14607 
                            14608 ; 22   |#include "messages.h"
                            14609 
                            14611 
                            14612 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            14613 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                            14614 ; 3    |// Message defs
                            14615 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                            14616 ; 5    |
                            14617 ; 6    |#if (!defined(MSGEQU_INC))
                            14618 ; 7    |#define MSGEQU_INC 1
                            14619 ; 8    |
                            14620 ; 9    |
                            14621 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                            14622 ; 11   |
                            14623 ; 12   |
                            14624 ; 13   |#define MSG_TYPE_DECODER 0x000000
                            14625 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                            14626 ; 15   |#define MSG_TYPE_PARSER 0x020000
                            14627 ; 16   |#define MSG_TYPE_LCD 0x030000
                            14628 ; 17   |#define MSG_TYPE_MIXER 0x040000
                            14629 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                            14630 ; 19   |#define MSG_TYPE_MENU 0x060000
                            14631 ; 20   |#define MSG_TYPE_LED 0x070000
                            14632 ; 21   |#define MSG_TYPE_TUNER 0x080000
                            14633 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                            14634 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                            14635 ; 24   |// Equalizer and other effects
                            14636 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                            14637 ; 26   |#if (defined(USE_PLAYLIST3))
                            14638 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                            14639 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                            14640 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                            14641 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                            14642 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                            14643 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                            14644 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                            14645 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                            14646 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                            14647 ; 36   |#if defined(USE_PLAYLIST5)
                            14648 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                            14649 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                            14650 ; 39   |#endif // if @def('USE_PLAYLIST5')
                            14651 ; 40   |
                            14652 ; 41   |// Message Structure Offsets
                            14653 ; 42   |#define MSG_Length 0
                            14654 ; 43   |#define MSG_ID 1
                            14655 ; 44   |#define MSG_Argument1 2
                            14656 ; 45   |#define MSG_Argument2 3
                            14657 ; 46   |#define MSG_Argument3 4
                            14658 ; 47   |#define MSG_Argument4 5
                            14659 ; 48   |#define MSG_Argument5 6
                            14660 ; 49   |#define MSG_Argument6 7
                            14661 ; 50   |
                            14662 ; 51   |
                            14663 ; 52   |
                            14664 ; 53   |// LCD Message IDs
                            14665 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                            14666 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                            14667 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                            14668 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                            14669 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                            14670 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                            14671 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                            14672 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                            14673 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                            14674 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                            14675 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                            14676 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                            14677 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                            14678 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                            14679 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                            14680 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                            14681 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                            14682 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                            14683 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                            14684 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                            14685 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                            14686 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                            14687 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                            14688 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                            14689 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                            14690 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                            14691 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                            14692 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                            14693 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                            14694 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                            14695 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                            14696 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                            14697 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                            14698 ; 87   |//send a NULL as Param1 to return to root frame buffer
                            14699 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                            14700 ; 89   |//Param1 = left
                            14701 ; 90   |//Param2 = top
                            14702 ; 91   |//Param3 = right
                            14703 ; 92   |//Param4 = bottom
                            14704 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                            14705 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                            14706 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                            14707 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                            14708 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                            14709 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                            14710 ; 99   |
                            14711 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                            14712 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
                            14713 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                            14714 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14715 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                            14716 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                            14717 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                            14718 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                            14719 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                            14720 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                            14721 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                            14722 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                            14723 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                            14724 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                            14725 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                            14726 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                            14727 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                            14728 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                            14729 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                            14730 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                            14731 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                            14732 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                            14733 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                            14734 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                            14735 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                            14736 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                            14737 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                            14738 ; 127  |
                            14739 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                            14740 ; 129  |
                            14741 ; 130  |#if defined(CLCD_16BIT)
                            14742 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                            14743 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                            14744 ; 133  |
                            14745 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                            14746 ; 135  |#else 
                            14747 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                            14748 ; 137  |#endif
                            14749 ; 138  |
                            14750 ; 139  |// If you change the LCD message ID's then you must
                            14751 ; 140  |// also change the jump table in lcdapi.asm
                            14752 ; 141  |
                            14753 ; 142  |// Character LCD Message IDs
                            14754 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                            14755 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                            14756 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                            14757 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                            14758 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                            14759 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                            14760 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                            14761 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                            14762 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                            14763 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                            14764 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                            14765 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                            14766 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                            14767 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                            14768 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                            14769 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                            14770 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                            14771 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                            14772 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                            14773 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                            14774 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                            14775 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                            14776 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                            14777 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                            14778 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                            14779 ; 168  |// also change the jump table in lcdapi.asm
                            14780 ; 169  |
                            14781 ; 170  |// Decoder Message IDs
                            14782 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                            14783 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                            14784 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                            14785 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                            14786 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                            14787 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                            14788 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                            14789 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                            14790 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                            14791 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                            14792 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                            14793 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                            14794 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                            14795 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                            14796 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                            14797 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                            14798 ; 187  |// If you change the Decoder message ID's, then you must
                            14799 ; 188  |// also change the jump table in decoder_overlay.asm
                            14800 ; 189  |// and in dec_adpcm_overlay.asm.
                            14801 ; 190  |
                            14802 ; 191  |// Encoder Message IDs
                            14803 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                            14804 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                            14805 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                            14806 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                            14807 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                            14808 ; 197  |// If you change the Encoder message ID's, then you must
                            14809 ; 198  |// also change the jump table in all encoder overlay modules.
                            14810 ; 199  |
                            14811 ; 200  |// Parser Message IDs
                            14812 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                            14813 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                            14814 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                            14815 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                            14816 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                            14817 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                            14818 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                            14819 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                            14820 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                            14821 ; 210  |// If you change the Parser message ID's, then you must
                            14822 ; 211  |// also change the jump table in parser.asm
                            14823 ; 212  |
                            14824 ; 213  |// Button Message IDs
                            14825 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                            14826 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                            14827 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                            14828 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                            14829 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                            14830 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                            14831 ; 220  |
                            14832 ; 221  |// Mixer Message IDs
                            14833 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                            14834 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                            14835 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                            14836 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                            14837 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                            14838 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                            14839 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                            14840 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                            14841 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                            14842 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                            14843 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                            14844 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                            14845 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                            14846 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                            14847 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                            14848 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                            14849 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                            14850 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                            14851 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                            14852 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                            14853 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                            14854 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                            14855 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                            14856 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                            14857 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                            14858 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                            14859 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                            14860 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                            14861 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                            14862 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                            14863 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                            14864 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                            14865 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                            14866 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                            14867 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                            14868 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                            14869 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                            14870 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                            14871 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                            14872 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                            14873 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                            14874 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                            14875 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                            14876 ; 265  |// If you change the mixer message ID's then you must
                            14877 ; 266  |// also change the jump table in mixer.asm
                            14878 ; 267  |#define MIXER_ON 0
                            14879 ; 268  |#define MIXER_OFF 1
                            14880 ; 269  |
                            14881 ; 270  |
                            14882 ; 271  |// System Message IDs
                            14883 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                            14884 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                            14885 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                            14886 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                            14887 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                            14888 ; 277  |// If you change the system message ID's then you must
                            14889 ; 278  |// also change the jump table in systemapi.asm
                            14890 ; 279  |
                            14891 ; 280  |// Menu IDs
                            14892 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                            14893 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                            14894 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                            14895 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                            14896 ; 285  |//sub parameters for this message:
                            14897 ; 286  |#define RECORDER_START 0
                            14898 ; 287  |#define RECORDER_PAUSE 0x2000
                            14899 ; 288  |#define RECORDER_RESUME 0x4000
                            14900 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                            14901 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                            14902 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                            14903 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                            14904 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                            14905 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                            14906 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                            14907 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                            14908 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                            14909 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                            14910 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                            14911 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                            14912 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                            14913 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                            14914 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                            14915 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                            14916 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                            14917 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                            14918 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                            14919 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                            14920 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                            14921 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                            14922 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                            14923 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                            14924 ; 313  |
                            14925 ; 314  |// Note that other versions of this file have different msg equates.
                            14926 ; 315  |// If you change the system message ID's then you must
                            14927 ; 316  |// also change the jump table in all menu *.asm
                            14928 ; 317  |
                            14929 ; 318  |// LED Message IDs
                            14930 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                            14931 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                            14932 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                            14933 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                            14934 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                            14935 ; 324  |// If you change the LeD message ID's then you must
                            14936 ; 325  |// also change the jump table in ledapi.asm
                            14937 ; 326  |
                            14938 ; 327  |#if (!defined(REMOVE_FM))
                            14939 ; 328  |// FM Tuner Message IDs
                            14940 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                            14941 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                            14942 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                            14943 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                            14944 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                            14945 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                            14946 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                            14947 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                            14948 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                            14949 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                            14950 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                            14951 ; 340  |//one parameter--the sensitivity in uV
                            14952 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                            14953 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                            14954 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                            14955 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                            14956 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                            14957 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                            14958 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                            14959 ; 348  |#endif
                            14960 ; 349  |
                            14961 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                            14962 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                            14963 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                            14964 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                            14965 ; 354  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14966 ; 355  |
                            14967 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                            14968 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                            14969 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                            14970 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                            14971 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                            14972 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                            14973 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                            14974 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                            14975 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                            14976 ; 365  |
                            14977 ; 366  |#if (defined(USE_PLAYLIST3))
                            14978 ; 367  |// Music Library
                            14979 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                            14980 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                            14981 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                            14982 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                            14983 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                            14984 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                            14985 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                            14986 ; 375  |
                            14987 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                            14988 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                            14989 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                            14990 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                            14991 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                            14992 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                            14993 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                            14994 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                            14995 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                            14996 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                            14997 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                            14998 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                            14999 ; 388  |
                            15000 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                            15001 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                            15002 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                            15003 ; 392  |
                            15004 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                            15005 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                            15006 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                            15007 ; 396  |
                            15008 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                            15009 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                            15010 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                            15011 ; 400  |
                            15012 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                            15013 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                            15014 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                            15015 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
                            15016 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                            15017 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                            15018 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                            15019 ; 408  |
                            15020 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                            15021 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                            15022 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                            15023 ; 412  |
                            15024 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                            15025 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                            15026 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                            15027 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                            15028 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                            15029 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                            15030 ; 419  |
                            15031 ; 420  |#if defined(USE_PLAYLIST5)
                            15032 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                            15033 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                            15034 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                            15035 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                            15036 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                            15037 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                            15038 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                            15039 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                            15040 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                            15041 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                            15042 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                            15043 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                            15044 ; 433  |
                            15045 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                            15046 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                            15047 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                            15048 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                            15049 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                            15050 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                            15051 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                            15052 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                            15053 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                            15054 ; 443  |#endif // if @def('USE_PLAYLIST5')
                            15055 ; 444  |// Events
                            15056 ; 445  |// No event
                            15057 ; 446  |#define EVENT_NONE 0x000001   
                            15058 ; 447  |// A message has been posted
                            15059 ; 448  |#define EVENT_MESSAGE 0x000002   
                            15060 ; 449  |// Run if wait time elapsed
                            15061 ; 450  |#define EVENT_TIMER 0x000004   
                            15062 ; 451  |// Run if a button event occured
                            15063 ; 452  |#define EVENT_BUTTON 0x000008   
                            15064 ; 453  |// Run if a background event occured
                            15065 ; 454  |#define EVENT_BACKGROUND 0x000010   
                            15066 ; 455  |// The executive should immediately repeat this module
                            15067 ; 456  |#define EVENT_REPEAT 0x000020   
                            15068 ; 457  |// Run the module's init routine
                            15069 ; 458  |#define EVENT_INIT 0x800000   
                            15070 ; 459  |
                            15071 ; 460  |#define EVENT_NONE_BITPOS 0
                            15072 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                            15073 ; 462  |#define EVENT_TIMER_BITPOS 2
                            15074 ; 463  |#define EVENT_BUTTON_BITPOS 3
                            15075 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                            15076 ; 465  |#define EVENT_REPEAT_BITPOS 5
                            15077 ; 466  |#define EVENT_INIT_BITPOS 23
                            15078 ; 467  |
                            15079 ; 468  |// Parser Message Buffers
                            15080 ; 469  |#define ParserPlayBit 0
                            15081 ; 470  |#define ButtonPressBit 1
                            15082 ; 471  |#define ParserRwndBit 1
                            15083 ; 472  |#define ParserFfwdBit 2
                            15084 ; 473  |
                            15085 ; 474  |//NextSong Message Parameters
                            15086 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                            15087 ; 476  |#define NEXT_SONG 2             
                            15088 ; 477  |// ButtonPressBit1 cleared
                            15089 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                            15090 ; 479  |// ButtonPressBit1 set
                            15091 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                            15092 ; 481  |// NextSong + Ffwd
                            15093 ; 482  |#define NEXT_SONG_FFWD 4          
                            15094 ; 483  |
                            15095 ; 484  |//PrevSong Message Parameters
                            15096 ; 485  |// PrevSong + Stopped
                            15097 ; 486  |#define PREV_SONG 0          
                            15098 ; 487  |// PrevSong + Play
                            15099 ; 488  |#define PREV_SONG_PLAY 1          
                            15100 ; 489  |// PrevSong + Rwnd
                            15101 ; 490  |#define PREV_SONG_RWND 2          
                            15102 ; 491  |
                            15103 ; 492  |
                            15104 ; 493  |
                            15105 ; 494  |
                            15106 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                            15107 ; 496  |
                            15108 ; 497  |
                            15109 
                            15111 
                            15112 ; 23   |#include "misc.h"
                            15113 
                            15115 
                            15116 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            15117 ; 2    |// Copyright(C) SigmaTel, Inc. 2002
                            15118 ; 3    |//
                            15119 ; 4    |// Filename: misc.h
                            15120 ; 5    |// Description: 
                            15121 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            15122 ; 7    |
                            15123 ; 8    |#ifndef _MISC_H
                            15124 ; 9    |#define _MISC_H
                            15125 ; 10   |
                            15126 ; 11   |////////////////////////////////////////////////////////////////////////////////
                            15127 ; 12   |// Defs
                            15128 ; 13   |////////////////////////////////////////////////////////////////////////////////
                            15129 ; 14   |
                            15130 ; 15   |////////////////////////////////////////////////////////////////////////////////
                            15131 ; 16   |// Error codes
                            15132 ; 17   |////////////////////////////////////////////////////////////////////////////////
                            15133 ; 18   |
                            15134 ; 19   |////////////////////////////////////////////////////////////////////////////////
                            15135 ; 20   |// Typedefs
                            15136 ; 21   |////////////////////////////////////////////////////////////////////////////////
                            15137 ; 22   |
                            15138 ; 23   |////////////////////////////////////////////////////////////////////////////////
                            15139 ; 24   |// Prototypes
                            15140 ; 25   |////////////////////////////////////////////////////////////////////////////////
                            15141 ; 26   |
                            15142 ; 27   |RETCODE PowerInit(void);
                            15143 ; 28   |RETCODE PllInit(void);
                            15144 ; 29   |RETCODE _reentrant SystemShutdown(void);
                            15145 ; 30   |RETCODE _reentrant SysGpioDisableAll(void);
                            15146 ; 31   |RETCODE _reentrant SysPadPowerDownAll(void);
                            15147 ; 32   |RETCODE _reentrant SysPllShutdown(void);
                            15148 ; 33   |RETCODE GoToSleep(void);
                            15149 ; 34   |void _reentrant SysDelayMs(WORD wDelay);
                            15150 ; 35   |DWORD GetDclkCount(void);
                            15151 ; 36   |#ifdef USE_PLAYLIST2
                            15152 ; 37   |DWORD GetDclkCount_PL2(void);
                            15153 ; 38   |#endif
                            15154 ; 39   |void SetDclkCount(DWORD dwCount);
                            15155 ; 40   |RETCODE SmartMediaSetPortTiming(WORD wTiming);
                            15156 ; 41   |RETCODE ProgramPll(INT iSpeed);
                            15157 ; 42   |void _reentrant SystemReset(void);
                            15158 ; 43   |void _reentrant SystemPowerOff(void);
                            15159 ; 44   |void _reentrant ReconfigureAsDcc(void);
                            15160 ; 45   |void _reentrant PowerDownFMTuners(void);
                            15161 ; 46   |#ifdef TUNER_5767
                            15162 ; 47   |void _reentrant  Philips5767_3WireWriteByte(INT data);
                            15163 ; 48   |void _reentrant Philips5767_3WireClockDelay(void);
                            15164 ; 49   |#endif
                            15165 ; 50   |extern BOOL g_bPowerOff;
                            15166 ; 51   |
                            15167 ; 52   |#ifndef DISABLE_USB_CURRENT_REQUIREMENT_FOR_MMC_DRIVER
                            15168 ; 53   |extern int g_iHighPwrPeriphInitMode; // def in usbmscmisc.c
                            15169 ; 54   | #define STRUCTURE_INIT_ONLY                            2
                            15170 ; 55   | #define USB_HIGH_CURRENT_GRANTED                       3
                            15171 ; 56   |#endif
                            15172 ; 57   |
                            15173 ; 58   |#endif // #ifndef _MISC_H
                            15174 
                            15176 
                            15177 ; 24   |
                            15178 ; 25   |
                            15179 ; 26   |////////////////////////////////////////////////////////////////////////////////
                            15180 ; 27   |// Externs
                            15181 ; 28   |////////////////////////////////////////////////////////////////////////////////
                            15182 ; 29   |extern void SysDelay (unsigned int wait_time);
                            15183 ; 30   |
                            15184 ; 31   |#ifdef FUNCLET
                            15185 ; 32   |#pragma asm
                            15186     extern SysCallFunclet
                            15187 ; 34   |#pragma endasm
                            15188 ; 35   |#endif
                            15189 ; 36   |////////////////////////////////////////////////////////////////////////////////
                            15190 ; 37   |// Defs
                            15191 ; 38   |////////////////////////////////////////////////////////////////////////////////
                            15192 ; 39   |#define TIMER_BATTERY_CHARGER_TIMEOUT_MS  5000  //5-Sec
                            15193 ; 40   |
                            15194 ; 41   |////////////////////////////////////////////////////////////////////////////////
                            15195 ; 42   |// Prototypes
                            15196 ; 43   |////////////////////////////////////////////////////////////////////////////////
                            15197 ; 44   |void _long_interrupt(HW_IVECVDD5VDISC/2) WallPowerDisconnected_ISR(void);
                            15198 ; 45   |void _long_interrupt(HW_IVECVDD5VCONN/2) WallPowerConnected_ISR(void);
                            15199 ; 46   |void _reentrant ServiceDCDC(void);
                            15200 ; 47   |void _reentrant UpdateBatteryCharging(void);
                            15201 ; 48   |void _reentrant UpdateDCDCDutyCycle(void);
                            15202 ; 49   |
                            15203 ; 50   |////////////////////////////////////////////////////////////////////////////////
                            15204 ; 51   |// Variables
                            15205 ; 52   |////////////////////////////////////////////////////////////////////////////////
                            15206 ; 53   |_X  BOOL g_bServiceDCDC = FALSE;
                            15207 
                            15208 
X:0000                      15209         org     x,".xdatamiscproject",init:
                            15210 Fg_bServiceDCDC:
X:0000 000000               15211         dc      $000000
                            15214 
                            15215 ; 54   |
                            15216 ; 55   |////////////////////////////////////////////////////////////////////////////////
                            15217 ; 56   |// Code
                            15218 ; 57   |////////////////////////////////////////////////////////////////////////////////
                            15219 ; 58   |
                            15220 ; 59   |////////////////////////////////////////////////////////////////////////////////
                            15221 ; 60   |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15222 ; 61   |//>  Name:          MiscProjectInit
                            15223 ; 62   |//
                            15224 ; 63   |//   Type:          Function
                            15225 ; 64   |//
                            15226 ; 65   |//   Description:   
                            15227 ; 66   |//
                            15228 ; 67   |//   Inputs:        none
                            15229 ; 68   |//
                            15230 ; 69   |//   Outputs:       RETCODE
                            15231 ; 70   |//
                            15232 ; 71   |//   Notes:         none
                            15233 ; 72   |//<
                            15234 ; 73   |////////////////////////////////////////////////////////////////////////////////
                            15235 ; 74   |RETCODE _reentrant MiscProjectInit(void)
                            15236 ; 75   |{ 
                            15237 
P:0000                      15238         org     p,".ptextmiscproject":
                            15243 FMiscProjectInit:
P:0000 055F7C         2    215244         movec   ssh,y:(r7)+
                            15247 
                            15248 ; 76   |    // Init the Low Resolution Analog to Digital Converter (LRADC) Channel: BATTery
                            15249 ; 77   |    SysLowResolutionADCInit(BATT, OFF, VBATT_REF);
                            15250 
P:0001 200013         2    415252         clr     a   
P:0002 20001B         2    615253         clr     b   
P:0003 44F400 020200  3    915254         move    #$20200,x0
P:0005 0BF080 rrrrrr  6   1515255         jsr     FSysLowResolutionADCInit
                            15256 
                            15257 ; 78   |
                            15258 ; 79   |        // Allow Power Transfer code to handle Brownout Inits if using a 5V Wall Adaptor
                            15259 ; 80   |#ifndef DCDC_POWER_TRANSFER
                            15260 ; 81   |    // Setup Battery brownout detection -- shuts down device if batteries too low
                            15261 ; 82   |    SysLRADCBrownoutInit((WORD)(BATT_BROWNOUT));
                            15262 ; 83   |#endif
                            15263 ; 84   |
                            15264 ; 85   |    // Generically enable serial numbers for all media
                            15265 ; 86   |    SerialNumberEnableInit();
                            15266 
P:0007 0BF080 rrrrrr  6   2115268         jsr     FSerialNumberEnableInit
                            15269 
                            15270 ; 87   |    
                            15271 ; 88   |    // Initialize the chip serial number
                            15272 ; 89   |    ChipSerialNumberInit();
                            15273 
P:0009 0BF080 rrrrrr  6   2715275         jsr     FChipSerialNumberInit
                            15276 
                            15277 ; 90   |
                            15278 ; 91   |    // Initialize the internal media serial number
                            15279 ; 92   |    InternalMediaSerialNumberInit();
                            15280 
P:000B 0BF080 rrrrrr  6   3315282         jsr     FInternalMediaSerialNumberInit
                            15283 
                            15284 ; 93   |   
                            15285 ; 94   |    return SUCCESS;
                            15286 
P:000D 200013         2   3515288         clr     a   
                            15289 
                            15290 ; 95   |}
                            15291 
P:000E 05FF7C         4   3915293         movec   y:-(r7),ssh
P:000F 000000         2   4115296         nop
P:0010 00000C         4   4515297         rts
                            15299 
                            15300 ; 96   |
                            15301 ; 97   |////////////////////////////////////////////////////////////////////////////////
                            15302 ; 98   |//
                            15303 ; 99   |//>  Name:          SerialNumberEnableInit
                            15304 ; 100  |//
                            15305 ; 101  |//   Type:          Function
                            15306 ; 102  |//
                            15307 ; 103  |//   Description:   This function provides a mechanism for initializing any
                            15308 ; 104  |//                  project-specific mechanisms that may be used to enable/disable
                            15309 ; 105  |//                  serial numbers.  The SerialNumbersEnabled function is also
                            15310 ; 106  |//                  provided.
                            15311 ; 107  |//
                            15312 ; 108  |//   Inputs:        none
                            15313 ; 109  |//
                            15314 ; 110  |//   Outputs:       RETCODE
                            15315 ; 111  |//
                            15316 ; 112  |//   Notes:         none
                            15317 ; 113  |//<
                            15318 ; 114  |////////////////////////////////////////////////////////////////////////////////
                            15319 ; 115  |RETCODE _reentrant SerialNumberEnableInit(void)
                            15320 ; 116  |{
                            15321 
                            15326 FSerialNumberEnableInit:
                            15327 
                            15328 ; 117  |    return SUCCESS;
                            15329 
P:0011 200013         2   4715331         clr     a   
                            15332 
                            15333 ; 118  |}
                            15334 
P:0012 00000C         4   5115336         rts
                            15338 
                            15339 ; 119  |
                            15340 ; 120  |////////////////////////////////////////////////////////////////////////////////
                            15341 ; 121  |//
                            15342 ; 122  |//>  Name:          SerialNumbersEnabled
                            15343 ; 123  |//
                            15344 ; 124  |//   Type:          Function
                            15345 ; 125  |//
                            15346 ; 126  |//   Description:   This function gives the option for the system to determine
                            15347 ; 127  |//                  at run time if serial numbers are available (possibly by
                            15348 ; 128  |//                  sensing a GPIO).
                            15349 ; 129  |//
                            15350 ; 130  |//   Inputs:        none
                            15351 ; 131  |//
                            15352 ; 132  |//   Outputs:       BOOL        TRUE if serial numbers enabled
                            15353 ; 133  |//                              FALSE if serial numbers disabled
                            15354 ; 134  |//
                            15355 ; 135  |//   Notes:         none
                            15356 ; 136  |//<
                            15357 ; 137  |////////////////////////////////////////////////////////////////////////////////
                            15358 ; 138  |BOOL _reentrant SerialNumbersEnabled(void)
                            15359 ; 139  |{
                            15360 
                            15365 FSerialNumbersEnabled:
                            15366 
                            15367 ; 140  |    #ifdef WMAAPI_NO_DRM
                            15368 ; 141  |        return FALSE;
                            15369 
P:0013 200013         2   5315371         clr     a   
                            15372 
                            15373 ; 142  |    #else
                            15374 ; 143  |        return TRUE;
                            15375 ; 144  |    #endif    
                            15376 ; 145  |}
                            15377 
P:0014 00000C         4   5715379         rts
                            15381 
                            15382 ; 146  |
                            15383 ; 147  |////////////////////////////////////////////////////////////////////////////////
                            15384 ; 148  |//
                            15385 ; 149  |//>  Name:          UpdateBatteryCharging
                            15386 ; 150  |//
                            15387 ; 151  |//   Type:          Function
                            15388 ; 152  |//
                            15389 ; 153  |//   Description:   This function turns battery charging on/off timer and statemachine.
                            15390 ; 154  |//
                            15391 ; 155  |//   Inputs:        none
                            15392 ; 156  |//
                            15393 ; 157  |//   Outputs:       none        
                            15394 ; 158  |//                              
                            15395 ; 159  |//
                            15396 ; 160  |//   Notes:         none
                            15397 ; 161  |//<
                            15398 ; 162  |////////////////////////////////////////////////////////////////////////////////
                            15399 ; 163  |void _reentrant UpdateBatteryCharging(void)
                            15400 ; 164  |{
                            15401 
                            15441 FUpdateBatteryCharging:
P:0015 055F7C         2   5915442         movec   ssh,y:(r7)+
                            15445 
                            15446 ; 165  |#ifdef BATTERY_CHARGE
                            15447 ; 166  |        //check for 5V and turn on/off charging
                            15448 ; 167  |        if(HW_VDD5V_PWR_CHARGE.B.VDD5V_PRESENT)
                            15449 
P:0016 47F000 00FA1D  3   6215451         move    x:$FA1D,y1
P:0018 0AC714 rrrrrr  6   6815452         jclr    #20,y1,L3
                            15453 
                            15454 ; 168  |        { 
                            15455 ; 169  |                //5V is connected so turn on charging and timer
                            15456 ; 170  |                BatteryChargeEnableCharging();
                            15457 
P:001A 0BF080 rrrrrr  6   7415459         jsr     FBatteryChargeEnableCharging
                            15460 
                            15461 ; 171  |                SysPostMessage(6,SOFT_TIMER_SET_TIMER,TIMER_BATTERY_CHARGER,
                            15462 ; 172  |                        0,TIMER_BATTERY_CHARGER_TIMEOUT_MS,MENU_BATTERY_CHARGER_TIMEOUT);
                            15463 
P:001C 46F400 06001D  3   7715465         move    #393245,y0
P:001E 4E5F00         2   7915466         move    y0,y:(r7)+
P:001F 44F400 001388  3   8215468         move    #5000,x0
P:0021 4C5F00         2   8415469         move    x0,y:(r7)+
P:0022 20001B         2   8615471         clr     b   
P:0023 5F5F00         2   8815472         move    b,y:(r7)+
P:0024 290700         2   9015474         move    #7,b0
P:0025 595F00         2   9215475         move    b0,y:(r7)+
P:0026 55F400 090001  3   9515477         move    #589825,b1
P:0028 5D5F00         2   9715478         move    b1,y:(r7)+
P:0029 290600         2   9915480         move    #6,b0
P:002A 595F00         2  10115481         move    b0,y:(r7)+
P:002B 0BF080 rrrrrr  6  10715483         jsr     FSysPostMessage
P:002D 3F0600         2  10915484         move    #6,n7
                            15485 
                            15486 ; 173  |        }
                            15487 
P:002E 0AF080 rrrrrr  6  11515489         jmp     L4
                            15490 
                            15491 ; 174  |        else
                            15492 ; 175  |        {
                            15493 ; 176  |                //5V is removed so disable charging and timer
                            15494 ; 177  |                BatteryChargeDisableCharging(FALSE);
                            15495 
P:0030 200013         2  11715497 L3:     clr     a   
P:0031 0BF080 rrrrrr  6  12315498         jsr     FBatteryChargeDisableCharging
                            15499 
                            15500 ; 178  |                SysPostMessage(3,SOFT_TIMER_KILL_TIMER,TIMER_BATTERY_CHARGER);
                            15501 
P:0033 290700         2  12515503         move    #7,b0
P:0034 595F00         2  12715504         move    b0,y:(r7)+
P:0035 46F400 090002  3  13015506         move    #589826,y0
P:0037 4E5F00         2  13215507         move    y0,y:(r7)+
P:0038 290300         2  13415509         move    #3,b0
P:0039 595F00         2  13615510         move    b0,y:(r7)+
P:003A 0BF080 rrrrrr  6  14215512         jsr     FSysPostMessage
P:003C 3F0300         2  14415513         move    #3,n7
                            15514 
                            15515 ; 179  |        }
                            15516 
                            15518 L4:
P:003D 000000         2  14615520         nop
P:003E 204700         2  14815521         move    (r7)-n7
                            15523 
                            15524 ; 180  |#endif
                            15525 ; 181  |}
                            15526 
P:003F 05FF7C         4  15215528         movec   y:-(r7),ssh
P:0040 000000         2  15415531         nop
P:0041 00000C         4  15815532         rts
                            15534 
                            15535 ; 182  |
                            15536 ; 183  |////////////////////////////////////////////////////////////////////////////////
                            15537 ; 184  |//
                            15538 ; 185  |//>  Name:          Init5VSense
                            15539 ; 186  |//
                            15540 ; 187  |//   Type:          Function
                            15541 ; 188  |//
                            15542 ; 189  |//   Description:   Initialize the 5V detection interrupts and variables
                            15543 ; 190  |//
                            15544 ; 191  |//   Inputs:        none
                            15545 ; 192  |//
                            15546 ; 193  |//   Outputs:       none
                            15547 ; 194  |//
                            15548 ; 195  |//   Notes:         none
                            15549 ; 196  |//<
                            15550 ; 197  |////////////////////////////////////////////////////////////////////////////////
                            15551 ; 198  |
                            15552 ; 199  |#ifdef FUNCLET
                            15553 ; 200  |    #pragma asm
                            15554         FInit5VSense:
                            15555 
                            15560 
                            15561         ;If using funclet, function will be executed via funclet kernel
                            15562         CallFunclet RSRC_FUNCLET_INIT5VSENSE
P:0042 0D0080         4  16215562     jsr       $80
P:0043 00037B               15562     DC       RSRC_FUNCLET_INIT5VSENSE  ; 1 word
                            15563 
P:0000                      15564         org p,"SYSFUNCLET_INIT5VSENSE_P":
P:0000 00037B               15565         dc      RSRC_FUNCLET_INIT5VSENSE
                            15566 ; 213  |    #pragma endasm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15567 ; 214  |void _reentrant Init5VSense_Funclet(void)
                            15568 ; 215  |#else
                            15569 ; 216  |void _reentrant Init5VSense(void)
                            15570 ; 217  |#endif
                            15571 ; 218  |{
                            15572 
                            15692 FInit5VSense_Funclet:
P:0001 055F7C         2    215693         movec   ssh,y:(r7)+
                            15696 
                            15697 ; 219  |//Only add code if using 5V to DCDC Power Transfer
                            15698 ; 220  |#ifdef DCDC_POWER_TRANSFER
                            15699 ; 221  |        /* setup 5V Detect Interrupts */
                            15700 ; 222  |        VECTOR(HW_IVECVDD5VDISC, (INT) WallPowerDisconnected_ISR);
                            15701 
P:0002 56F400 0BF080  3    515703         move    #782464,a
P:0004 07708E 000056  8   1315704         movem   a,p:$56
P:0006 71F400 rrrrrr  3   1615705         move    #FWallPowerDisconnected_ISR,n1
P:0008 232600         2   1815706         move    n1,y0
P:0009 077086 000057  8   2615707         movem   y0,p:$57
                            15708 
                            15709 ; 223  |        VECTOR(HW_IVECVDD5VCONN, (INT) WallPowerConnected_ISR);
                            15710 
P:000B 07708E 000050  8   3415712         movem   a,p:$50
P:000D 63F400 rrrrrr  3   3715713         move    #FWallPowerConnected_ISR,r3
P:000F 226800         2   3915714         move    r3,a0
P:0010 077088 000051  8   4715715         movem   a0,p:$51
                            15716 
                            15717 ; 224  |        
                            15718 ; 225  |        // Turn On Interrupts
                            15719 ; 226  |        HW_USBCSR.B.VBUSDISCXIE = 1;
                            15720 
P:0012 0A7026 00F200  6   5315722         bset    #6,x:$F200
                            15723 
                            15724 ; 227  |        HW_USBCSR.B.VBUSCXIE = 1;
                            15725 
P:0014 0A7024 00F200  6   5915727         bset    #4,x:$F200
                            15728 
                            15729 ; 228  |        HW_ICLENABLE0R.B.SEN20 = 1;
                            15730 
P:0016 0A7034 00F300  6   6515732         bset    #20,x:$F300
                            15733 
                            15734 ; 229  |        HW_ICLENABLE0R.B.SEN23 = 1;
                            15735 
P:0018 0A7037 00F300  6   7115737         bset    #23,x:$F300
                            15738 
                            15739 ; 230  |
                            15740 ; 231  |    //  low power mode with Ring OSC not counting.  Set this up once so it 
                            15741 ; 232  |        //  doesn't have to run every time ServiceDCDC() is called. 
                            15742 ; 233  |    HW_SPEED.I &= (HW_SPEED_OSC1_START_COUNT_CLRMASK & HW_SPEED_OSC1_PWRUP_CLRMASK & HW_SPEED_OSC2_PWRUP_CLRMASK & HW_SPEED_OSC2_START_COUNT_CLRMASK);
                            15743 
P:001A 57F000 00FA13  3   7415745         move    x:$FA13,b
P:001C 46F400 FFCFFC  3   7715746         move    #16764924,y0
P:001E 20005E         2   7915747         and     y0,b
P:001F 557000 00FA13  3   8215748         move    b1,x:$FA13
                            15749 
                            15750 ; 234  |
                            15751 ; 235  |    SysDelay(1);
                            15752 
P:0021 56F400 000001  3   8515754         move    #>1,a
P:0023 0BF080 rrrrrr  6   9115755         jsr     FSysDelay
                            15756 
                            15757 ; 236  |
                            15758 ; 237  |        //Call the DCDC service routine 
                            15759 ; 238  |        g_bServiceDCDC=TRUE;
                            15760 
P:0025 47F400 000001  3   9415762         move    #>1,y1
P:0027 477000 rrrrrr  3   9715763         move    y1,x:Fg_bServiceDCDC
                            15764 
                            15765 ; 239  |    ServiceDCDC();
                            15766 
P:0029 0BF080 rrrrrr  6  10315768         jsr     FServiceDCDC
                            15769 
                            15770 ; 240  |
                            15771 ; 241  |
                            15772 ; 242  |#endif  //DCDC_POWER_TRANSFER
                            15773 ; 243  |}
                            15774 
P:002B 05FF7C         4  10715776         movec   y:-(r7),ssh
P:002C 000000         2  10915779         nop
P:002D 00000C         4  11315780         rts
                            15782 
                            15783 ; 244  |#ifdef FUNCLET
                            15784 ; 245  |    #pragma asm
P:0044                      15785         org p,".ptextmiscproject":
                            15786 ; 247  |    #pragma endasm
                            15787 ; 248  |#endif
                            15788 ; 249  |
                            15789 ; 250  |////////////////////////////////////////////////////////////////////////////////
                            15790 ; 251  |//
                            15791 ; 252  |//>  Name:          ServiceDCDC
                            15792 ; 253  |//
                            15793 ; 254  |//   Type:          Function
                            15794 ; 255  |//
                            15795 ; 256  |//   Description:   Service the DCDC converter to prepare for disconnect
                            15796 ; 257  |//
                            15797 ; 258  |//   Inputs:        none
                            15798 ; 259  |//
                            15799 ; 260  |//   Outputs:       none
                            15800 ; 261  |//
                            15801 ; 262  |//   Notes:         none
                            15802 ; 263  |//<
                            15803 ; 264  |////////////////////////////////////////////////////////////////////////////////
                            15804 ; 265  |void _reentrant ServiceDCDC(void)
                            15805 ; 266  |{         
                            15806 
                            15811 FServiceDCDC:
P:0044 055F7C         2  16415812         movec   ssh,y:(r7)+
                            15815 
                            15816 ; 267  |//Only add code if using 5V to DCDC Power Transfer
                            15817 ; 268  |#ifdef DCDC_POWER_TRANSFER
                            15818 ; 269  |
                            15819 ; 270  |  // *************** BATTERY NOTE when connected to 5V *******************
                            15820 ; 271  |  // 1 - Should add periodic battery check and update NLEV if change is noticed
                            15821 ; 272  |  // 2 - When no battery is present, the pin will be floating creating a false value.
                            15822 ; 273  |  //     To fix set the Divide by 2 bit in the LRADC.  This will provide a path to GND.
                            15823 ; 274  |  //     Change configuration of SysBatteryGetLevel() to HW_BATT_CTRL - 0x020200
                            15824 ; 275  |  // 3 - Disable battery brownout for case of 5V present and battery removed
                            15825 ; 276  |  // **********************************************************************
                            15826 ; 277  |
                            15827 ; 278  |  if(g_bServiceDCDC)    //only service DCDC converter if flag is set
                            15828 
P:0045 57F000 rrrrrr  3  16715830         move    x:Fg_bServiceDCDC,b
P:0047 2B0000         2  16915831         move    #0,b2
P:0048 20000B         2  17115832         tst     b
P:0049 0AF0AA rrrrrr  6  17715833         jeq     L5
                            15834 
                            15835 ; 279  |  {     
                            15836 ; 280  |        //If we are here, there has been a 5V event (inserted or removed).  Update the
                            15837 ; 281  |        //battery charging status.
                            15838 ; 282  |        UpdateBatteryCharging();
                            15839 
P:004B 0BF080 rrrrrr  6  18315841         jsr     FUpdateBatteryCharging
                            15842 
                            15843 ; 283  |
                            15844 ; 284  |        UpdateDCDCDutyCycle();
                            15845 
P:004D 0BF080 rrrrrr  6  18915847         jsr     FUpdateDCDCDutyCycle
                            15848 
                            15849 ; 285  |  }
                            15850 
                            15852 L5:
                            15853 
                            15854 ; 286  |
                            15855 ; 287  |#endif   //DCDC_POWER_TRANSFER
                            15856 ; 288  |}  //end ServiceDCDC
                            15857 
P:004F 05FF7C         4  19315859         movec   y:-(r7),ssh
P:0050 000000         2  19515862         nop
P:0051 00000C         4  19915863         rts
                            15865 
                            15866 ; 289  |
                            15867 ; 290  |////////////////////////////////////////////////////////////////////////////////
                            15868 ; 291  |//
                            15869 ; 292  |//>  Name:          UpdateDCDCDutyCycle
                            15870 ; 293  |//
                            15871 ; 294  |//   Type:          Function
                            15872 ; 295  |//
                            15873 ; 296  |//   Description:   Update the DCDC Duty Cycle for open loop so the player will
                            15874 ; 297  |//                                      remained powered on 5V disconnect
                            15875 ; 298  |//
                            15876 ; 299  |//   Inputs:        none
                            15877 ; 300  |//
                            15878 ; 301  |//   Outputs:       none
                            15879 ; 302  |//
                            15880 ; 303  |//   Notes:         none
                            15881 ; 304  |//<
                            15882 ; 305  |////////////////////////////////////////////////////////////////////////////////
                            15883 ; 306  |#ifdef FUNCLET
                            15884 ; 307  |    #pragma asm
                            15885         FUpdateDCDCDutyCycle:
                            15886 
                            15891 
                            15892         ;If using funclet, function will be executed via funclet kernel
                            15893         CallFunclet RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE
P:0052 0D0080         4  20315893     jsr       $80
P:0053 00037C               15893     DC       RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE  ; 1 word
                            15894 
P:0000                      15895         org p,"SYSFUNCLET_UPDATEDCDCDUTYCYCLE_P":
P:0000 00037C               15896         dc      RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE
                            15897 ; 320  |    #pragma endasm
                            15898 ; 321  |void _reentrant UpdateDCDCDutyCycle_Funclet(void)
                            15899 ; 322  |#else
                            15900 ; 323  |void _reentrant UpdateDCDCDutyCycle(void)
                            15901 ; 324  |#endif
                            15902 ; 325  |{
                            15903 
                            16037 FUpdateDCDCDutyCycle_Funclet:
P:0001 055F7C         2    216038         movec   ssh,y:(r7)+
                            16043 
                            16044 ; 326  |  //INT iBattLevelPercent=0;
                            16045 ; 327  |  INT iNLevel=0;
                            16046 ; 328  |
                            16047 ; 329  |        // If 5V is present, open DCDC Control Loop and setup to be close to desired 
                            16048 ; 330  |        //state when unplug to prevent shutdown.
                            16049 ; 331  |        if((HW_VDD5V_PWR_CHARGE.B.VDD5V_PRESENT) || (HW_VDD5V_PWR_CHARGE.B.PWDN_ON_IOBRNOUT))
                            16050 
P:0002 51F000 00FA1D  3    516052         move    x:$FA1D,b0
P:0004 0AC934 rrrrrr  6   1116053         jset    #20,b0,L18
P:0006 55F000 00FA1D  3   1416054         move    x:$FA1D,b1
P:0008 0ACD0D rrrrrr  6   2016055         jclr    #13,b1,L26
                            16056 
                            16057 ; 332  |        {
                            16058 ; 333  |//Build option to service DCDC based on battery type.  LIION - BUCK, else - BOOST Player
                            16059 ; 334  |#ifdef  BATTERY_TYPE_LI_ION             
                            16060 ; 335  |                //Before placing DCDC converter in Open Loop, make sure DCDC2 NLEV is starting from
                            16061 ; 336  |                //the reset setting.
                            16062 ; 337  |                if(HW_DCDC2_CTRL0.B.NLEV != 0x09)
                            16063 
P:000A 46F000 00FA11  3   2316065 L18:    move    x:$FA11,y0
P:000C 0110E8         2   2516066         mpy     y0,#16,b
P:000D 46F400 00001F  3   2816067         move    #>$1F,y0
P:000F 20005E         2   3016068         and     y0,b
P:0010 46F400 000009  3   3316069         move    #>9,y0
P:0012 21AF00         2   3516070         move    b1,b
P:0013 2B0000         2   3716071         move    #0,b2
P:0014 20005D         2   3916072         cmp     y0,b
P:0015 0AF0AA rrrrrr  6   4516073         jeq     L19
                            16074 
                            16075 ; 338  |                {
                            16076 ; 339  |                        HW_DCDC2_CTRL0.B.NLEV = 0x09;
                            16077 
P:0017 56F000 00FA11  3   4816079         move    x:$FA11,a
P:0019 45F400 E0FFFF  3   5116080         move    #$E0FFFF,x1
P:001B 200066         2   5316081         and     x1,a
P:001C 250900         2   5516082         move    #<9,x1
P:001D 200062         2   5716083         or      x1,a
P:001E 547000 00FA11  3   6016084         move    a1,x:$FA11
                            16085 
                            16086 ; 340  |                        SysDelay(5);
                            16087 
P:0020 56F400 000005  3   6316089         move    #>5,a
P:0022 0BF080 rrrrrr  6   6916090         jsr     FSysDelay
                            16091 
                            16092 ; 341  |                }
                            16093 ; 342  |
                            16094 ; 343  |        // setup DC/DC control loop to be close to desired state when unplug to prevent shutdown.
                            16095 ; 344  |        HW_DCDC1_CTRL1.B.R = 9;
                            16096 
P:0024 57F000 00FA0D  3   7216098 L19:    move    x:$FA0D,b
P:0026 46F400 FFFF0F  3   7516099         move    #$FFFF0F,y0
P:0028 20005E         2   7716100         and     y0,b
P:0029 46F400 000090  3   8016101         move    #>$90,y0
P:002B 20005A         2   8216102         or      y0,b
P:002C 557000 00FA0D  3   8516103         move    b1,x:$FA0D
                            16104 
                            16105 ; 345  |            HW_DCDC1_CTRL1.B.C = 0;
                            16106 
P:002E 57F000 00FA0D  3   8816108         move    x:$FA0D,b
P:0030 44F400 FFFFF0  3   9116109         move    #$FFFFF0,x0
P:0032 20004E         2   9316110         and     x0,b
P:0033 557000 00FA0D  3   9616111         move    b1,x:$FA0D
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16112 
                            16113 ; 346  |        HW_DCDC2_CTRL1.B.R = 9;
                            16114 
P:0035 56F000 00FA12  3   9916116         move    x:$FA12,a
P:0037 46F400 FFFF0F  3  10216117         move    #$FFFF0F,y0
P:0039 200056         2  10416118         and     y0,a
P:003A 46F400 000090  3  10716119         move    #>$90,y0
P:003C 200052         2  10916120         or      y0,a
P:003D 547000 00FA12  3  11216121         move    a1,x:$FA12
                            16122 
                            16123 ; 347  |            HW_DCDC2_CTRL1.B.C = 0;
                            16124 
P:003F 57F000 00FA12  3  11516126         move    x:$FA12,b
P:0041 20004E         2  11716127         and     x0,b
P:0042 557000 00FA12  3  12016128         move    b1,x:$FA12
                            16129 
                            16130 ; 348  |                        
                            16131 ; 349  |        //Check for Single Channel Buck.  DCDCMODE=1 for 100-pin package.  DCDCMODE=3 if 144-pin package
                            16132 ; 350  |                //is forced to single channel buck
                            16133 ; 351  |        if ((HW_REVR.B.DCDCMODE == 0x1)||(HW_REVR.B.DCDCMODE == 0x3))
                            16134 
P:0044 45F000 00FA02  3  12316136         move    x:$FA02,x1
P:0046 0105F8         2  12516137         mpy     x1,#5,b
P:0047 45F400 000007  3  12816138         move    #>7,x1
P:0049 20006E         2  13016139         and     x1,b
P:004A 21AF00         2  13216140         move    b1,b
P:004B 44F400 000001  3  13516141         move    #>1,x0
P:004D 2B0000         2  13716142         move    #0,b2
P:004E 20004D         2  13916143         cmp     x0,b
P:004F 0AF0AA rrrrrr  6  14516144         jeq     L20
P:0051 46F000 00FA02  3  14816145         move    x:$FA02,y0
P:0053 0105E0         2  15016146         mpy     y0,#5,a
P:0054 20A600         2  15216147         move    x1,y0
P:0055 200056         2  15416148         and     y0,a
P:0056 218E00         2  15616149         move    a1,a
P:0057 46F400 000003  3  15916150         move    #>3,y0
P:0059 2A0000         2  16116151         move    #0,a2
P:005A 200055         2  16316152         cmp     y0,a
P:005B 0AF0A2 rrrrrr  6  16916153         jne     L22
                            16154 
                            16155 ; 352  |        {   
                            16156 ; 353  |            // Control loop is in a bad state
                            16157 ; 354  |            HW_DCDC1_CTRL0.B.NLEV = 0x1A;
                            16158 
P:005D 57F000 00FA0C  3  17216160 L20:    move    x:$FA0C,b
P:005F 45F400 E0FFFF  3  17516161         move    #$E0FFFF,x1
P:0061 20006E         2  17716162         and     x1,b
P:0062 251A00         2  17916163         move    #<$1A,x1
P:0063 20006A         2  18116164         or      x1,b
P:0064 557000 00FA0C  3  18416165         move    b1,x:$FA0C
                            16166 
                            16167 ; 355  |            SysDelay(1);
                            16168 
P:0066 56F400 000001  3  18716170         move    #>1,a
P:0068 0BF080 rrrrrr  6  19316171         jsr     FSysDelay
                            16172 
                            16173 ; 356  |            HW_DCDC1_CTRL0.B.NLEV = 0x12;                
                            16174 
P:006A 57F000 00FA0C  3  19616176         move    x:$FA0C,b
P:006C 46F400 E0FFFF  3  19916177         move    #$E0FFFF,y0
P:006E 20005E         2  20116178         and     y0,b
P:006F 261200         2  20316179         move    #<$12,y0
P:0070 20005A         2  20516180         or      y0,b
P:0071 557000 00FA0C  3  20816181         move    b1,x:$FA0C
                            16182 
                            16183 ; 357  |            // Ring OSC1 should be around 0x78 at this point
                            16184 ; 358  |                        
                            16185 ; 359  |                        //It is possible in single channel buck to get here without 5V.  This would 
                            16186 ; 360  |                        //occur if PWDN_ON_IOBRNOUT is set without 5V applied.  If so, ServiceDCDC()
                            16187 ; 361  |                        //needs to be called again to close the DCDC control loop.      Only clear flag if
                            16188 ; 362  |                        //5V is present.  This will happen the second time UpdateDCDCDutyCycle() is called.
                            16189 ; 363  |                        if(HW_VDD5V_PWR_CHARGE.B.PWDN_ON_IOBRNOUT)
                            16190 
P:0073 57F000 00FA1D  3  21116192         move    x:$FA1D,b
P:0075 0ACD0D rrrrrr  6  21716193         jclr    #13,b1,L21
                            16194 
                            16195 ; 364  |                        {
                            16196 ; 365  |                                HW_VDD5V_PWR_CHARGE.B.PWDN_ON_IOBRNOUT=0;  //Clear PWDN_ON_IOBRNOUT bit
                            16197 
P:0077 0A700D 00FA1D  6  22316199         bclr    #13,x:$FA1D
                            16200 
                            16201 ; 366  |                                HW_MIXTBR.B.PSRN = 1;   //Need set PSRN bit to disable fast falling edge reset
                            16202 
P:0079 0A7029 00FA03  6  22916204         bset    #9,x:$FA03
                            16205 
                            16206 ; 367  |                        }
                            16207 
P:007B 0AF080 rrrrrr  6  23516209         jmp     L29
                            16210 
                            16211 ; 368  |                        else
                            16212 ; 369  |                        {       //If we are here, this is the second time through.  Time to clear the service 
                            16213 ; 370  |                                //flag
                            16214 ; 371  |                                g_bServiceDCDC = FALSE;    
                            16215 
P:007D 200013         2  23716217 L21:    clr     a   
P:007E 547000 rrrrrr  3  24016218         move    a1,x:Fg_bServiceDCDC
                            16219 
                            16220 ; 372  |                        }
                            16221 ; 373  |                }
                            16222 
P:0080 0AF080 rrrrrr  6  24616224         jmp     L29
                            16225 
                            16226 ; 374  |                else
                            16227 ; 375  |                {       //2 Channel buck mode.
                            16228 ; 376  |                        // Ring OSC2 should be between 0x20 and 0x30 after the loop runs a few times
                            16229 ; 377  |            if((HW_SPEED.B.RINGOSC2 < 0x27) || (HW_SPEED.B.RINGOSC2 > 0x30))
                            16230 
P:0082 46F000 00FA13  3  24916232 L22:    move    x:$FA13,y0
P:0084 0110E0         2  25116233         mpy     y0,#16,a
P:0085 46F400 00007F  3  25416234         move    #>$7F,y0
P:0087 200056         2  25616235         and     y0,a
P:0088 218E00         2  25816236         move    a1,a
P:0089 46F400 000027  3  26116237         move    #>39,y0
P:008B 2A0000         2  26316238         move    #0,a2
P:008C 200055         2  26516239         cmp     y0,a
P:008D 0AF0A9 rrrrrr  6  27116240         jlt     L23
P:008F 44F000 00FA13  3  27416241         move    x:$FA13,x0
P:0091 0110D8         2  27616242         mpy     x0,#16,b
P:0092 44F400 00007F  3  27916243         move    #>$7F,x0
P:0094 20004E         2  28116244         and     x0,b
P:0095 21AF00         2  28316245         move    b1,b
P:0096 45F400 000030  3  28616246         move    #>$30,x1
P:0098 2B0000         2  28816247         move    #0,b2
P:0099 20006D         2  29016248         cmp     x1,b
P:009A 0AF0AF rrrrrr  6  29616249         jle     L24
                            16250 
                            16251 ; 378  |            {  
                            16252 ; 379  |               // Control loop is in a bad state
                            16253 ; 380  |                HW_DCDC2_CTRL1.B.FFOR = 1;
                            16254 
P:009C 56F000 00FA12  3  29916256 L23:    move    x:$FA12,a
P:009E 46F400 FFF8FF  3  30216257         move    #$FFF8FF,y0
P:00A0 200056         2  30416258         and     y0,a
P:00A1 46F400 000100  3  30716259         move    #$100,y0
P:00A3 200052         2  30916260         or      y0,a
P:00A4 547000 00FA12  3  31216261         move    a1,x:$FA12
P:00A6 56F400 000001  3  31516262         move    #>1,a
                            16263 
                            16264 ; 381  |                SysDelay(1);
                            16265 
P:00A8 0BF080 rrrrrr  6  32116267         jsr     FSysDelay
                            16268 
                            16269 ; 382  |                HW_DCDC2_CTRL1.B.FFOR = 0;
                            16270 
P:00AA 57F000 00FA12  3  32416272         move    x:$FA12,b
P:00AC 44F400 FFF8FF  3  32716273         move    #$FFF8FF,x0
P:00AE 20004E         2  32916274         and     x0,b
P:00AF 557000 00FA12  3  33216275         move    b1,x:$FA12
                            16276 
                            16277 ; 383  |            }
                            16278 
P:00B1 0AF080 rrrrrr  6  33816280         jmp     L25
                            16281 
                            16282 ; 384  |                        else
                            16283 ; 385  |                        {
                            16284 ; 386  |                                g_bServiceDCDC = FALSE;    //control loop in a good state; stop service
                            16285 
P:00B3 270000         2  34016287 L24:    move    #0,y1
P:00B4 477000 rrrrrr  3  34316288         move    y1,x:Fg_bServiceDCDC
                            16289 
                            16290 ; 387  |                                HW_DCDC2_CTRL0.B.NLEV = 0x1F;  //Now change NLEV to Buck State for DCDC2
                            16291 
P:00B6 57F000 00FA11  3  34616293         move    x:$FA11,b
P:00B8 261F00         2  34816294         move    #<$1F,y0
P:00B9 20005A         2  35016295         or      y0,b
P:00BA 557000 00FA11  3  35316296         move    b1,x:$FA11
                            16297 
                            16298 ; 388  |                                HW_VDD5V_PWR_CHARGE.B.PWDN_ON_IOBRNOUT=0;  //Clear PWDN_ON_IOBRNOUT bit
                            16299 
P:00BC 0A700D 00FA1D  6  35916301         bclr    #13,x:$FA1D
                            16302 
                            16303 ; 389  |                                HW_MIXTBR.B.PSRN = 1;   //Need set PSRN bit to disable fast falling edge reset
                            16304 
P:00BE 0A7029 00FA03  6  36516306         bset    #9,x:$FA03
                            16307 
                            16308 ; 390  |                        }
                            16309 ; 391  |            // Control loop is in a bad state
                            16310 ; 392  |            HW_DCDC1_CTRL0.B.NLEV = 0x1A;
                            16311 
P:00C0 56F000 00FA0C  3  36816313 L25:    move    x:$FA0C,a
P:00C2 46F400 E0FFFF  3  37116314         move    #$E0FFFF,y0
P:00C4 200056         2  37316315         and     y0,a
P:00C5 261A00         2  37516316         move    #<$1A,y0
P:00C6 200052         2  37716317         or      y0,a
P:00C7 547000 00FA0C  3  38016318         move    a1,x:$FA0C
                            16319 
                            16320 ; 393  |            SysDelay(1);
                            16321 
P:00C9 56F400 000001  3  38316323         move    #>1,a
P:00CB 0BF080 rrrrrr  6  38916324         jsr     FSysDelay
                            16325 
                            16326 ; 394  |            HW_DCDC1_CTRL0.B.NLEV = 0x12;                
                            16327 
P:00CD 57F000 00FA0C  3  39216329         move    x:$FA0C,b
P:00CF 44F400 E0FFFF  3  39516330         move    #$E0FFFF,x0
P:00D1 20004E         2  39716331         and     x0,b
P:00D2 241200         2  39916332         move    #<$12,x0
P:00D3 20004A         2  40116333         or      x0,b
P:00D4 557000 00FA0C  3  40416334         move    b1,x:$FA0C
                            16335 
                            16336 ; 395  |            // Ring OSC1 should be around 0x78 at this point
                            16337 ; 396  |        }
                            16338 ; 397  |#else //Boost Mode
                            16339 ; 398  |        // If 5V is present, open DCDC Control Loop and setup to be close to desired 
                            16340 ; 399  |        //state when unplug to prevent shutdown.
                            16341 ; 400  |        HW_DCDC1_CTRL1.B.R = 9;
                            16342 ; 401  |            HW_DCDC1_CTRL1.B.C = 0;
                            16343 ; 402  |        HW_DCDC2_CTRL1.B.R = 9;
                            16344 ; 403  |            HW_DCDC2_CTRL1.B.C = 0;
                            16345 ; 404  |
                            16346 ; 405  |        if ((HW_REVR.B.DCDCMODE == 0x7) || (HW_REVR.B.DCDCMODE == 0x5))
                            16347 ; 406  |        {   // boost mode
                            16348 ; 407  |            // alter NLEV and return back to step control loop
                            16349 ; 408  |                        //iBattLevelPercent=SysBatteryGetLevel(); //returns current % of bat's usable range
                            16350 ; 409  |
                            16351 ; 410  |                        //Assumes .9V to 1.6V range  
                            16352 ; 411  |                        //scale NLEV based on battery voltage(0.9V-1.37V;0%-75%).  if >1.44 NLEV=06, 1.44V-0.9V NLEV=06 to NLEV=31  
                            16353 ; 412  |                        iNLevel = 31-(SysBatteryGetLevel()/3); //was iBattLevelPercent instead of direct call.
                            16354 ; 413  |                        if (iNLevel < 6)
                            16355 ; 414  |                                iNLevel = 6;
                            16356 ; 415  |                        else if (iNLevel > 31)
                            16357 ; 416  |                                iNLevel = 31;
                            16358 ; 417  |
                            16359 ; 418  |            HW_DCDC1_CTRL0.B.NLEV = iNLevel;                  
                            16360 ; 419  |                        HW_VDD5V_PWR_CHARGE.B.PWDN_ON_IOBRNOUT=0;  //Clear PWDN_ON_IOBRNOUT bit
                            16361 ; 420  |                        HW_MIXTBR.B.PSRN = 1;   //Need set PSRN bit to disable fast falling edge reset 
                            16362 ; 421  |                        g_bServiceDCDC=FALSE;
                            16363 ; 422  |        }
                            16364 ; 423  |#endif
                            16365 ; 424  |        }       
                            16366 
P:00D6 0AF080 rrrrrr  6  41016368         jmp     L29
                            16369 
                            16370 ; 425  |        else //5V is not connected.  Configure DCDC Converters for battery use. Close DCDC Control Loop.
                            16371 ; 426  |        {
                            16372 ; 427  |#ifdef  BATTERY_TYPE_LI_ION
                            16373 ; 428  |    HW_DCDC1_CTRL1.B.R = 3;
                            16374 
P:00D8 57F000 00FA0D  3  41316376 L26:    move    x:$FA0D,b
P:00DA 46F400 FFFF0F  3  41616377         move    #$FFFF0F,y0
P:00DC 20005E         2  41816378         and     y0,b
P:00DD 46F400 000030  3  42116379         move    #>$30,y0
P:00DF 20005A         2  42316380         or      y0,b
P:00E0 557000 00FA0D  3  42616381         move    b1,x:$FA0D
                            16382 
                            16383 ; 429  |    HW_DCDC1_CTRL1.B.C = 4;
                            16384 
P:00E2 56F000 00FA0D  3  42916386         move    x:$FA0D,a
P:00E4 44F400 FFFFF0  3  43216387         move    #$FFFFF0,x0
P:00E6 200046         2  43416388         and     x0,a
P:00E7 44F400 000004  3  43716389         move    #>4,x0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00E9 200042         2  43916390         or      x0,a
P:00EA 547000 00FA0D  3  44216391         move    a1,x:$FA0D
                            16392 
                            16393 ; 430  |    HW_DCDC2_CTRL1.B.R = 3;
                            16394 
P:00EC 57F000 00FA12  3  44516396         move    x:$FA12,b
P:00EE 46F400 FFFF0F  3  44816397         move    #$FFFF0F,y0
P:00F0 20005E         2  45016398         and     y0,b
P:00F1 46F400 000030  3  45316399         move    #>$30,y0
P:00F3 20005A         2  45516400         or      y0,b
P:00F4 557000 00FA12  3  45816401         move    b1,x:$FA12
                            16402 
                            16403 ; 431  |    HW_DCDC2_CTRL1.B.C = 4;
                            16404 
P:00F6 57F000 00FA12  3  46116406         move    x:$FA12,b
P:00F8 44F400 FFFFF0  3  46416407         move    #$FFFFF0,x0
P:00FA 20004E         2  46616408         and     x0,b
P:00FB 44F400 000004  3  46916409         move    #>4,x0
P:00FD 20004A         2  47116410         or      x0,b
P:00FE 557000 00FA12  3  47416411         move    b1,x:$FA12
                            16412 
                            16413 ; 432  |#else //Boost Mode
                            16414 ; 433  |        //Change NLEV back if boost mode
                            16415 ; 434  |        if ((HW_REVR.B.DCDCMODE == 0x7) || (HW_REVR.B.DCDCMODE == 0x5))
                            16416 ; 435  |                HW_DCDC1_CTRL0.B.NLEV = 0x01; 
                            16417 ; 436  |
                            16418 ; 437  |    HW_DCDC1_CTRL1.B.R = 5;
                            16419 ; 438  |    HW_DCDC1_CTRL1.B.C = 4;
                            16420 ; 439  |    HW_DCDC2_CTRL1.B.R = 5;
                            16421 ; 440  |    HW_DCDC2_CTRL1.B.C = 4;
                            16422 ; 441  |#endif
                            16423 ; 442  |
                            16424 ; 443  |        g_bServiceDCDC = FALSE;    // stop service
                            16425 
P:0100 517000 rrrrrr  3  47716427         move    b0,x:Fg_bServiceDCDC
                            16428 
                            16429 ; 444  |
                            16430 ; 445  |    //turn on battery brownout
                            16431 ; 446  |    SysLRADCBrownoutInit((WORD)(BATT_BROWNOUT));
                            16432 
P:0102 56F400 000BB8  3  48016434         move    #3000,a
P:0104 0BF080 rrrrrr  6  48616435         jsr     FSysLRADCBrownoutInit
                            16436 
                            16437 ; 447  |        }// end if(HW_VDD5V_PWR_CHARGE.B.VDD5V_PRESENT)
                            16438 
                            16440 L29:
                            16441 
                            16442 ; 448  |}
                            16443 
P:0106 05FF7C         4  49016445         movec   y:-(r7),ssh
P:0107 000000         2  49216448         nop
P:0108 00000C         4  49616449         rts
                            16451 
                            16452 ; 449  |#ifdef FUNCLET
                            16453 ; 450  |    #pragma asm
P:0054                      16454         org p,".ptextmiscproject":
                            16455 ; 452  |    #pragma endasm
                            16456 ; 453  |#endif
                            16457 ; 454  |
                            16458 ; 455  |////////////////////////////////////////////////////////////////////////////////
                            16459 ; 456  |//
                            16460 ; 457  |//>  Name:          WallPowerDisconnected_ISR
                            16461 ; 458  |//
                            16462 ; 459  |//   Type:          ISR
                            16463 ; 460  |//
                            16464 ; 461  |//   Description:   Close DCDC Control loop as power is transfered to DCDC converters
                            16465 ; 462  |//                                      
                            16466 ; 463  |//   Inputs:        none
                            16467 ; 464  |//
                            16468 ; 465  |//   Outputs:       none
                            16469 ; 466  |//
                            16470 ; 467  |//   Notes:         none
                            16471 ; 468  |//<
                            16472 ; 469  |////////////////////////////////////////////////////////////////////////////////
                            16473 ; 470  |void _long_interrupt(HW_IVECVDD5VDISC/2) WallPowerDisconnected_ISR(void)
                            16474 ; 471  |{
                            16475 
                            16480 FWallPowerDisconnected_ISR:
P:0054 4E7000 rrrrrr  3  20616481         move    y0,y:ss_WallPowerDisconnected_ISR
P:0056 4F7000 rrrrrr  3  20916482         move    y1,y:ss_WallPowerDisconnected_ISR+1
P:0058 5B7000 rrrrrr  3  21216483         move    b2,y:ss_WallPowerDisconnected_ISR+2
P:005A 597000 rrrrrr  3  21516484         move    b0,y:ss_WallPowerDisconnected_ISR+3
P:005C 5D7000 rrrrrr  3  21816485         move    b1,y:ss_WallPowerDisconnected_ISR+4
P:005E 5A7000 rrrrrr  3  22116486         move    a2,y:ss_WallPowerDisconnected_ISR+5
P:0060 587000 rrrrrr  3  22416487         move    a0,y:ss_WallPowerDisconnected_ISR+6
P:0062 5C7000 rrrrrr  3  22716488         move    a1,y:ss_WallPowerDisconnected_ISR+7
                            16491 
                            16492 ; 472  |#ifdef DCDC_POWER_TRANSFER
                            16493 ; 473  |    int iWaitCount=10000;  
                            16494 
P:0064 57F400 002710  3  23016496         move    #10000,b
                            16498 
                            16499 ; 474  |
                            16500 ; 475  |    #pragma asm
                            16501 
                            16504     ; Clear the DM bit (double-precision multiply mode, bit 6) of the Mode Register
                            16505     ; This will be returned to its previous state when the RTI occurs (since the SR
                            16506     ; will be popped back off System Stack Low (SSL).
                            16507     ; Accumulator behavior is unpredictable when the DM bit is set.
                            16508     ; Next cycle after clearing it should NOT be an ALU instruction.
P:0066 00BFB8         2  23216509     andi #$BF,mr
P:0067 000000         2  23416510     nop
                            16511 
                            16512 ; 483  |    #pragma endasm
                            16513 ; 484  |
                            16514 ; 485  |#ifdef  BATTERY_TYPE_LI_ION 
                            16515 ; 486  |    HW_DCDC1_CTRL1.B.C = 4;
                            16516 
P:0068 56F000 00FA0D  3  23716518         move    x:$FA0D,a
P:006A 46F400 FFFFF0  3  24016519         move    #$FFFFF0,y0
P:006C 200056         2  24216520         and     y0,a
P:006D 46F400 000004  3  24516521         move    #>4,y0
P:006F 200052         2  24716522         or      y0,a
P:0070 547000 00FA0D  3  25016523         move    a1,x:$FA0D
                            16524 
                            16525 ; 487  |    HW_DCDC2_CTRL1.B.C = 4;
                            16526 
P:0072 56F000 00FA12  3  25316528         move    x:$FA12,a
P:0074 46F400 FFFFF0  3  25616529         move    #$FFFFF0,y0
P:0076 200056         2  25816530         and     y0,a
P:0077 46F400 000004  3  26116531         move    #>4,y0
P:0079 200052         2  26316532         or      y0,a
P:007A 547000 00FA12  3  26616533         move    a1,x:$FA12
                            16534 
                            16535 ; 488  |
                            16536 ; 489  |        //Wait about 1ms before returning the 'R' back to its battery setting.
                            16537 ; 490  |        while(iWaitCount)
                            16538 
P:007C 46F400 000001  3  26916540         move    #>1,y0
P:007E 0AF080 rrrrrr  6  27516541         jmp     L31
                            16542 
                            16543 ; 491  |                iWaitCount--;
                            16544 
P:0080 20005C         2  27716546 L30:    sub     y0,b
P:0081 20000B         2  27916548 L31:    tst     b
P:0082 0AF0A2 rrrrrr  6  28516549         jne     L30
                            16550 
                            16551 ; 492  |
                            16552 ; 493  |    HW_DCDC1_CTRL1.B.R = 3;
                            16553 
P:0084 57F000 00FA0D  3  28816555         move    x:$FA0D,b
P:0086 47F400 FFFF0F  3  29116556         move    #$FFFF0F,y1
P:0088 20007E         2  29316557         and     y1,b
P:0089 47F400 000030  3  29616558         move    #>$30,y1
P:008B 20007A         2  29816559         or      y1,b
P:008C 557000 00FA0D  3  30116560         move    b1,x:$FA0D
                            16561 
                            16562 ; 494  |    HW_DCDC2_CTRL1.B.R = 3;
                            16563 
P:008E 57F000 00FA12  3  30416565         move    x:$FA12,b
P:0090 47F400 FFFF0F  3  30716566         move    #$FFFF0F,y1
P:0092 20007E         2  30916567         and     y1,b
P:0093 47F400 000030  3  31216568         move    #>$30,y1
P:0095 20007A         2  31416569         or      y1,b
P:0096 557000 00FA12  3  31716570         move    b1,x:$FA12
                            16571 
                            16572 ; 495  |#else //Boost Mode 
                            16573 ; 496  |        //Change NLEV back if boost mode
                            16574 ; 497  |        if ((HW_REVR.B.DCDCMODE == 0x7) || (HW_REVR.B.DCDCMODE == 0x5))
                            16575 ; 498  |                HW_DCDC1_CTRL0.B.NLEV = 0x01;  
                            16576 ; 499  |
                            16577 ; 500  |    HW_DCDC1_CTRL1.B.R = 5;
                            16578 ; 501  |    HW_DCDC1_CTRL1.B.C = 4;
                            16579 ; 502  |    HW_DCDC2_CTRL1.B.R = 5;
                            16580 ; 503  |    HW_DCDC2_CTRL1.B.C = 4;
                            16581 ; 504  |#endif
                            16582 ; 505  |                        
                            16583 ; 506  |        //Clear the 5V Connect/Disconnect IRQ
                            16584 ; 507  |        HW_USBCSR.B.VBUSDISCXIRQ = 1;
                            16585 
P:0098 0A7025 00F200  6  32316587         bset    #5,x:$F200
                            16588 
                            16589 ; 508  |        HW_USBCSR.B.VBUSCXIRQ = 1;
                            16590 
P:009A 0A7023 00F200  6  32916592         bset    #3,x:$F200
                            16593 
                            16594 ; 509  |
                            16595 ; 510  |        g_bServiceDCDC = TRUE;
                            16596 
P:009C 467000 rrrrrr  3  33216598         move    y0,x:Fg_bServiceDCDC
                            16599 
                            16600 ; 511  |#endif
                            16601 ; 512  |}
                            16602 
P:009E 5CF000 rrrrrr  3  33516604         move    y:ss_WallPowerDisconnected_ISR+7,a1
P:00A0 58F000 rrrrrr  3  33816605         move    y:ss_WallPowerDisconnected_ISR+6,a0
P:00A2 5AF000 rrrrrr  3  34116606         move    y:ss_WallPowerDisconnected_ISR+5,a2
P:00A4 5DF000 rrrrrr  3  34416607         move    y:ss_WallPowerDisconnected_ISR+4,b1
P:00A6 59F000 rrrrrr  3  34716608         move    y:ss_WallPowerDisconnected_ISR+3,b0
P:00A8 5BF000 rrrrrr  3  35016609         move    y:ss_WallPowerDisconnected_ISR+2,b2
P:00AA 4FF000 rrrrrr  3  35316610         move    y:ss_WallPowerDisconnected_ISR+1,y1
P:00AC 4EF000 rrrrrr  3  35616611         move    y:ss_WallPowerDisconnected_ISR,y0
P:00AE 000004         4  36016612         rti
                            16614 
                            16615 
P:0056                      16616         org     p,".irq43":$56
P:0056 0BF080 rrrrrr  6    616617 irq43:  jsr     FWallPowerDisconnected_ISR
                            16618 
Y:0000                      16619         org     y,".yovlmiscproject@WallPowerDisconnected_ISR",overlay:
                            16620 ss_WallPowerDisconnected_ISR:
Y:0000                      16621         ds      8
   |   RESERVED                   
Y:0007
                            16622 
P:00AF                      16623         org     p,".ptextmiscproject":
                            16625 
                            16626 ; 513  |
                            16627 ; 514  |////////////////////////////////////////////////////////////////////////////////
                            16628 ; 515  |//
                            16629 ; 516  |//>  Name:          WallPowerConnected_ISR
                            16630 ; 517  |//
                            16631 ; 518  |//   Type:          ISR
                            16632 ; 519  |//
                            16633 ; 520  |//   Description:   Open DCDC Control loop and set Service DCDC Flag
                            16634 ; 521  |//                                      
                            16635 ; 522  |//   Inputs:        none
                            16636 ; 523  |//
                            16637 ; 524  |//   Outputs:       none
                            16638 ; 525  |//
                            16639 ; 526  |//   Notes:         none
                            16640 ; 527  |//<
                            16641 ; 528  |////////////////////////////////////////////////////////////////////////////////
                            16642 ; 529  |void _long_interrupt(HW_IVECVDD5VCONN/2) WallPowerConnected_ISR(void)
                            16643 ; 530  |{    
                            16644 
                            16649 FWallPowerConnected_ISR:
P:00AF 4E7000 rrrrrr  3  36316650         move    y0,y:ss_WallPowerConnected_ISR
P:00B1 5B7000 rrrrrr  3  36616651         move    b2,y:ss_WallPowerConnected_ISR+1
P:00B3 597000 rrrrrr  3  36916652         move    b0,y:ss_WallPowerConnected_ISR+2
P:00B5 5D7000 rrrrrr  3  37216653         move    b1,y:ss_WallPowerConnected_ISR+3
P:00B7 5A7000 rrrrrr  3  37516654         move    a2,y:ss_WallPowerConnected_ISR+4
P:00B9 587000 rrrrrr  3  37816655         move    a0,y:ss_WallPowerConnected_ISR+5
P:00BB 5C7000 rrrrrr  3  38116656         move    a1,y:ss_WallPowerConnected_ISR+6
                            16659 
                            16660 ; 531  |#ifdef DCDC_POWER_TRANSFER
                            16661 ; 532  |    int iWaitCount=1000;   //Wait for 5V to settle. 100us at 60MHz
                            16662 
P:00BD 57F400 0003E8  3  38416664         move    #1000,b
                            16666 
                            16667 ; 533  |
                            16668 ; 534  |    #pragma asm
                            16669 
                            16672     ; Clear the DM bit (double-precision multiply mode, bit 6) of the Mode Register
                            16673     ; This will be returned to its previous state when the RTI occurs (since the SR
                            16674     ; will be popped back off System Stack Low (SSL).
                            16675     ; Accumulator behavior is unpredictable when the DM bit is set.
                            16676     ; Next cycle after clearing it should NOT be an ALU instruction.
P:00BF 00BFB8         2  38616677     andi #$BF,mr
P:00C0 000000         2  38816678     nop
                            16679 
                            16680 ; 542  |    #pragma endasm
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16681 ; 543  |
                            16682 ; 544  |        //Set PWDN_ON_IOBRNOUT bit.  It will be cleared after DCDC duty 
                            16683 ; 545  |        //cycle has been configured. PSRN must be cleared for PWDN_ON_IO_BRNOUT
                            16684 ; 546  |        //to work properly.  
                            16685 ; 547  |        HW_MIXTBR.B.PSRN = 0; 
                            16686 
P:00C1 0A7009 00FA03  6  39416688         bclr    #9,x:$FA03
                            16689 
                            16690 ; 548  |        HW_VDD5V_PWR_CHARGE.B.PWDN_ON_IOBRNOUT=1;  
                            16691 
P:00C3 0A702D 00FA1D  6  40016693         bset    #13,x:$FA1D
                            16694 
                            16695 ; 549  |
                            16696 ; 550  |        //Open DCDC control loop
                            16697 ; 551  |        HW_DCDC1_CTRL1.B.R = 9;
                            16698 
P:00C5 56F000 00FA0D  3  40316700         move    x:$FA0D,a
P:00C7 46F400 FFFF0F  3  40616701         move    #$FFFF0F,y0
P:00C9 200056         2  40816702         and     y0,a
P:00CA 46F400 000090  3  41116703         move    #>$90,y0
P:00CC 200052         2  41316704         or      y0,a
P:00CD 547000 00FA0D  3  41616705         move    a1,x:$FA0D
                            16706 
                            16707 ; 552  |    HW_DCDC1_CTRL1.B.C = 0;
                            16708 
P:00CF 56F000 00FA0D  3  41916710         move    x:$FA0D,a
P:00D1 46F400 FFFFF0  3  42216711         move    #$FFFFF0,y0
P:00D3 200056         2  42416712         and     y0,a
P:00D4 547000 00FA0D  3  42716713         move    a1,x:$FA0D
                            16714 
                            16715 ; 553  |        HW_DCDC2_CTRL1.B.R = 9;
                            16716 
P:00D6 56F000 00FA12  3  43016718         move    x:$FA12,a
P:00D8 46F400 FFFF0F  3  43316719         move    #$FFFF0F,y0
P:00DA 200056         2  43516720         and     y0,a
P:00DB 46F400 000090  3  43816721         move    #>$90,y0
P:00DD 200052         2  44016722         or      y0,a
P:00DE 547000 00FA12  3  44316723         move    a1,x:$FA12
                            16724 
                            16725 ; 554  |    HW_DCDC2_CTRL1.B.C = 0;
                            16726 
P:00E0 56F000 00FA12  3  44616728         move    x:$FA12,a
P:00E2 46F400 FFFFF0  3  44916729         move    #$FFFFF0,y0
P:00E4 200056         2  45116730         and     y0,a
P:00E5 547000 00FA12  3  45416731         move    a1,x:$FA12
                            16732 
                            16733 ; 555  |
                            16734 ; 556  |        //Clear the 5V Connect/Disconnect IRQ
                            16735 ; 557  |        HW_USBCSR.B.VBUSDISCXIRQ = 1;
                            16736 
P:00E7 0A7025 00F200  6  46016738         bset    #5,x:$F200
                            16739 
                            16740 ; 558  |        HW_USBCSR.B.VBUSCXIRQ = 1;
                            16741 
P:00E9 0A7023 00F200  6  46616743         bset    #3,x:$F200
                            16744 
                            16745 ; 559  |
                            16746 ; 560  |        //Set flag to open DCDC Control loop
                            16747 ; 561  |        g_bServiceDCDC = TRUE;
                            16748 
P:00EB 46F400 000001  3  46916750         move    #>1,y0
P:00ED 467000 rrrrrr  3  47216751         move    y0,x:Fg_bServiceDCDC
                            16752 
                            16753 ; 562  |        
                            16754 ; 563  |        //Wait for 5V to settle. 100us at 60MHz
                            16755 ; 564  |        while(iWaitCount)
                            16756 
P:00EF 0AF080 rrrrrr  6  47816758         jmp     L33
                            16759 
                            16760 ; 565  |                iWaitCount--;
                            16761 
P:00F1 20005C         2  48016763 L32:    sub     y0,b
P:00F2 20000B         2  48216765 L33:    tst     b
P:00F3 0AF0A2 rrrrrr  6  48816766         jne     L32
                            16767 
                            16768 ; 566  |#endif
                            16769 ; 567  |}
                            16770 
P:00F5 5CF000 rrrrrr  3  49116772         move    y:ss_WallPowerConnected_ISR+6,a1
P:00F7 58F000 rrrrrr  3  49416773         move    y:ss_WallPowerConnected_ISR+5,a0
P:00F9 5AF000 rrrrrr  3  49716774         move    y:ss_WallPowerConnected_ISR+4,a2
P:00FB 5DF000 rrrrrr  3  50016775         move    y:ss_WallPowerConnected_ISR+3,b1
P:00FD 59F000 rrrrrr  3  50316776         move    y:ss_WallPowerConnected_ISR+2,b0
P:00FF 5BF000 rrrrrr  3  50616777         move    y:ss_WallPowerConnected_ISR+1,b2
P:0101 4EF000 rrrrrr  3  50916778         move    y:ss_WallPowerConnected_ISR,y0
P:0103 000004         4  51316779         rti
                            16781 
                            16782 
P:0050                      16783         org     p,".irq40":$50
P:0050 0BF080 rrrrrr  6    616784 irq40:  jsr     FWallPowerConnected_ISR
                            16785 
Y:0000                      16786         org     y,".yovlmiscproject@WallPowerConnected_ISR",overlay:
                            16787 ss_WallPowerConnected_ISR:
Y:0000                      16788         ds      7
   |   RESERVED                   
Y:0006
                            16789 
P:0104                      16790         org     p,".ptextmiscproject":
                            16827 
                            16828         extern  FBatteryChargeDisableCharging, FBatteryChargeEnableCharging
                            16829         extern  FChipSerialNumberInit, FInternalMediaSerialNumberInit
                            16830         extern  FSysDelay, FSysLRADCBrownoutInit, FSysLowResolutionADCInit
                            16831         extern  FSysPostMessage, FUpdateDCDCDutyCycle
                            16832 
                            16833         global  FInit5VSense_Funclet, FMiscProjectInit
                            16834         global  FSerialNumberEnableInit, FSerialNumbersEnabled
                            16835         global  FServiceDCDC, FUpdateBatteryCharging
                            16836         global  FUpdateDCDCDutyCycle_Funclet, FWallPowerConnected_ISR
                            16837         global  FWallPowerDisconnected_ISR, Fg_bServiceDCDC, irq40, irq43
                            16838 
                            16839         local   L3, L4, L5, L18, L19, L20, L21, L22, L23, L24, L25, L26
                            16840         local   L29, L30, L31, L32, L33, ss_WallPowerConnected_ISR
                            16841         local   ss_WallPowerDisconnected_ISR
                            16842 
                            16843         calls   "Init5VSense_Funclet", "ServiceDCDC", "SysDelay"
                            16844         calls   "MiscProjectInit", "ChipSerialNumberInit"
                            16845         calls   "MiscProjectInit", "InternalMediaSerialNumberInit"
                            16846         calls   "MiscProjectInit", "SerialNumberEnableInit"
                            16847         calls   "MiscProjectInit", "SysLowResolutionADCInit"
                            16848         calls   "ServiceDCDC", "UpdateBatteryCharging"
                            16849         calls   "ServiceDCDC", "UpdateDCDCDutyCycle"
                            16850         calls   "UpdateBatteryCharging", "BatteryChargeDisableCharging"
                            16851         calls   "UpdateBatteryCharging", "BatteryChargeEnableCharging"
                            16852         calls   "UpdateBatteryCharging", "SysPostMessage"
                            16853         calls   "UpdateDCDCDutyCycle_Funclet", "SysDelay"
                            16854         calls   "UpdateDCDCDutyCycle_Funclet", "SysLRADCBrownoutInit"
                            16855 
