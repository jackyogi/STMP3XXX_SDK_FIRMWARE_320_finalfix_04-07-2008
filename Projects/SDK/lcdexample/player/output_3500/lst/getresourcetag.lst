TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfc6c7b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;getresourcetag.:
                               96 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2006
                               98 ; 3    |//
                               99 ; 4    |// Filename: GetResourceTag.c
                              100 ; 5    |// 
                              101 ; 6    |
                              102 ; 7    |#include "filesystem.h"
                              103 
                              105 
                              106 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              107 ; 2    |//  Copyright(C) SigmaTel, Inc. 2001
                              108 ; 3    |//
                              109 ; 4    |//  File        : FileSystem.h
                              110 ; 5    |//  Description : Header File for File System
                              111 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              112 ; 7    |
                              113 ; 8    |#ifndef _FILESYSTEM_H
                              114 ; 9    |#define _FILESYSTEM_H
                              115 ; 10   |
                              116 ; 11   |#include "types.h"
                              117 
                              119 
                              120 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              121 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              122 ; 3    |//
                              123 ; 4    |// Filename: types.h
                              124 ; 5    |// Description: Standard data types
                              125 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              126 ; 7    |
                              127 ; 8    |#ifndef _TYPES_H
                              128 ; 9    |#define _TYPES_H
                              129 ; 10   |
                              130 ; 11   |// TODO:  move this outta here!
                              131 ; 12   |#if !defined(NOERROR)
                              132 ; 13   |#define NOERROR 0
                              133 ; 14   |#define SUCCESS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              134 ; 15   |#endif 
                              135 ; 16   |#if !defined(SUCCESS)
                              136 ; 17   |#define SUCCESS  0
                              137 ; 18   |#endif
                              138 ; 19   |#if !defined(ERROR)
                              139 ; 20   |#define ERROR   -1
                              140 ; 21   |#endif
                              141 ; 22   |#if !defined(FALSE)
                              142 ; 23   |#define FALSE 0
                              143 ; 24   |#endif
                              144 ; 25   |#if !defined(TRUE)
                              145 ; 26   |#define TRUE  1
                              146 ; 27   |#endif
                              147 ; 28   |
                              148 ; 29   |#if !defined(NULL)
                              149 ; 30   |#define NULL 0
                              150 ; 31   |#endif
                              151 ; 32   |
                              152 ; 33   |#define MAX_INT     0x7FFFFF
                              153 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              154 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              155 ; 36   |#define MAX_ULONG   (-1) 
                              156 ; 37   |
                              157 ; 38   |#define WORD_SIZE   24              // word size in bits
                              158 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              159 ; 40   |
                              160 ; 41   |
                              161 ; 42   |#define BYTE    unsigned char       // btVarName
                              162 ; 43   |#define CHAR    signed char         // cVarName
                              163 ; 44   |#define USHORT  unsigned short      // usVarName
                              164 ; 45   |#define SHORT   unsigned short      // sVarName
                              165 ; 46   |#define WORD    unsigned int        // wVarName
                              166 ; 47   |#define INT     signed int          // iVarName
                              167 ; 48   |#define DWORD   unsigned long       // dwVarName
                              168 ; 49   |#define LONG    signed long         // lVarName
                              169 ; 50   |#define BOOL    unsigned int        // bVarName
                              170 ; 51   |#define FRACT   _fract              // frVarName
                              171 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              172 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              173 ; 54   |#define FLOAT   float               // fVarName
                              174 ; 55   |#define DBL     double              // dVarName
                              175 ; 56   |#define ENUM    enum                // eVarName
                              176 ; 57   |#define CMX     _complex            // cmxVarName
                              177 ; 58   |typedef WORD UCS3;                   // 
                              178 ; 59   |
                              179 ; 60   |#define UINT16  unsigned short
                              180 ; 61   |#define UINT8   unsigned char   
                              181 ; 62   |#define UINT32  unsigned long
                              182 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              183 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              184 ; 65   |#define WCHAR   UINT16
                              185 ; 66   |
                              186 ; 67   |//UINT128 is 16 bytes or 6 words
                              187 ; 68   |typedef struct UINT128_3500 {   
                              188 ; 69   |    int val[6];     
                              189 ; 70   |} UINT128_3500;
                              190 ; 71   |
                              191 ; 72   |#define UINT128   UINT128_3500
                              192 ; 73   |
                              193 ; 74   |// Little endian word packed byte strings:   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              195 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              196 ; 77   |// Little endian word packed byte strings:   
                              197 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              198 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              199 ; 80   |
                              200 ; 81   |// Declare Memory Spaces To Use When Coding
                              201 ; 82   |// A. Sector Buffers
                              202 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              203 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              204 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              205 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              206 
                              208 
                              209 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              210 ; 88   |// B. Media DDI Memory
                              211 ; 89   |#define MEDIA_DDI_MEM _Y
                              212 ; 90   |
                              213 ; 91   |
                              214 ; 92   |
                              215 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              216 ; 94   |// Examples of circular pointers:
                              217 ; 95   |//    INT CIRC cpiVarName
                              218 ; 96   |//    DWORD CIRC cpdwVarName
                              219 ; 97   |
                              220 ; 98   |#define RETCODE INT                 // rcVarName
                              221 ; 99   |
                              222 ; 100  |// generic bitfield structure
                              223 ; 101  |struct Bitfield {
                              224 ; 102  |    unsigned int B0  :1;
                              225 ; 103  |    unsigned int B1  :1;
                              226 ; 104  |    unsigned int B2  :1;
                              227 ; 105  |    unsigned int B3  :1;
                              228 ; 106  |    unsigned int B4  :1;
                              229 ; 107  |    unsigned int B5  :1;
                              230 ; 108  |    unsigned int B6  :1;
                              231 ; 109  |    unsigned int B7  :1;
                              232 ; 110  |    unsigned int B8  :1;
                              233 ; 111  |    unsigned int B9  :1;
                              234 ; 112  |    unsigned int B10 :1;
                              235 ; 113  |    unsigned int B11 :1;
                              236 ; 114  |    unsigned int B12 :1;
                              237 ; 115  |    unsigned int B13 :1;
                              238 ; 116  |    unsigned int B14 :1;
                              239 ; 117  |    unsigned int B15 :1;
                              240 ; 118  |    unsigned int B16 :1;
                              241 ; 119  |    unsigned int B17 :1;
                              242 ; 120  |    unsigned int B18 :1;
                              243 ; 121  |    unsigned int B19 :1;
                              244 ; 122  |    unsigned int B20 :1;
                              245 ; 123  |    unsigned int B21 :1;
                              246 ; 124  |    unsigned int B22 :1;
                              247 ; 125  |    unsigned int B23 :1;
                              248 ; 126  |};
                              249 ; 127  |
                              250 ; 128  |union BitInt {
                              251 ; 129  |        struct Bitfield B;
                              252 ; 130  |        int        I;
                              253 ; 131  |};
                              254 ; 132  |
                              255 ; 133  |#define MAX_MSG_LENGTH 10
                              256 ; 134  |struct CMessage
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              257 ; 135  |{
                              258 ; 136  |        unsigned int m_uLength;
                              259 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              260 ; 138  |};
                              261 ; 139  |
                              262 ; 140  |typedef struct {
                              263 ; 141  |    WORD m_wLength;
                              264 ; 142  |    WORD m_wMessage;
                              265 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              266 ; 144  |} Message;
                              267 ; 145  |
                              268 ; 146  |struct MessageQueueDescriptor
                              269 ; 147  |{
                              270 ; 148  |        int *m_pBase;
                              271 ; 149  |        int m_iModulo;
                              272 ; 150  |        int m_iSize;
                              273 ; 151  |        int *m_pHead;
                              274 ; 152  |        int *m_pTail;
                              275 ; 153  |};
                              276 ; 154  |
                              277 ; 155  |struct ModuleEntry
                              278 ; 156  |{
                              279 ; 157  |    int m_iSignaledEventMask;
                              280 ; 158  |    int m_iWaitEventMask;
                              281 ; 159  |    int m_iResourceOfCode;
                              282 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              283 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              284 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              285 ; 163  |    int m_uTimeOutHigh;
                              286 ; 164  |    int m_uTimeOutLow;
                              287 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              288 ; 166  |};
                              289 ; 167  |
                              290 ; 168  |union WaitMask{
                              291 ; 169  |    struct B{
                              292 ; 170  |        unsigned int m_bNone     :1;
                              293 ; 171  |        unsigned int m_bMessage  :1;
                              294 ; 172  |        unsigned int m_bTimer    :1;
                              295 ; 173  |        unsigned int m_bButton   :1;
                              296 ; 174  |    } B;
                              297 ; 175  |    int I;
                              298 ; 176  |} ;
                              299 ; 177  |
                              300 ; 178  |
                              301 ; 179  |struct Button {
                              302 ; 180  |        WORD wButtonEvent;
                              303 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              304 ; 182  |};
                              305 ; 183  |
                              306 ; 184  |struct Message {
                              307 ; 185  |        WORD wMsgLength;
                              308 ; 186  |        WORD wMsgCommand;
                              309 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              310 ; 188  |};
                              311 ; 189  |
                              312 ; 190  |union EventTypes {
                              313 ; 191  |        struct CMessage msg;
                              314 ; 192  |        struct Button Button ;
                              315 ; 193  |        struct Message Message;
                              316 ; 194  |};
                              317 ; 195  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              318 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              319 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              320 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              321 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              322 ; 200  |
                              323 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              324 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              325 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              326 ; 204  |
                              327 ; 205  |#if DEBUG
                              328 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              329 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              330 ; 208  |#else 
                              331 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              332 ; 210  |#define DebugBuildAssert(x)    
                              333 ; 211  |#endif
                              334 ; 212  |
                              335 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              336 ; 214  |//  #pragma asm
                              337 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              338 ; 216  |//  #pragma endasm
                              339 ; 217  |
                              340 ; 218  |
                              341 ; 219  |#ifdef COLOR_262K
                              342 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              343 ; 221  |#elif defined(COLOR_65K)
                              344 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              345 ; 223  |#else
                              346 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              347 ; 225  |#endif
                              348 ; 226  |    
                              349 ; 227  |#endif // #ifndef _TYPES_H
                              350 
                              352 
                              353 ; 12   |
                              354 ; 13   |
                              355 ; 14   |// File attributes
                              356 ; 15   |#ifndef _FS_ATTRIBUTES
                              357 ; 16   |#define _FS_ATTRIBUTES
                              358 ; 17   |#define READ        1
                              359 ; 18   |#define WRITE       2
                              360 ; 19   |#define WRITE_PLUS  3
                              361 ; 20   |#define APPEND      4
                              362 ; 21   |#define TRUNCATE    8
                              363 ; 22   |#define CREATE      16
                              364 ; 23   |#endif
                              365 ; 24   |
                              366 ; 25   |//#ifndef FAT12
                              367 ; 26   |//#define FAT12   1
                              368 ; 27   |//#endif
                              369 ; 28   |//
                              370 ; 29   |#ifndef FAT16
                              371 ; 30   |#define FAT16   2
                              372 ; 31   |#endif
                              373 ; 32   |
                              374 ; 33   |#define MEM_SPACE_P 0x100000
                              375 ; 34   |#define MEM_SPACE_Y 0x400000
                              376 ; 35   |#define MEM_SPACE_X 0x800000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              377 ; 36   |
                              378 ; 37   |#define FILE_SYS_MODE_READ  0
                              379 ; 38   |#define FILE_SYS_MODE_WRITE 1
                              380 ; 39   | 
                              381 ; 40   |#define ATTR_READ_ONLY      0x01
                              382 ; 41   |#define ATTR_HIDDEN         0x02
                              383 ; 42   |#define ATTR_SYSTEM         0x04
                              384 ; 43   |#define ATTR_VOLUME_ID      0x08
                              385 ; 44   |#define ATTR_DIRECTORY      0x10
                              386 ; 45   |#define ATTR_ARCHIVE        0x20
                              387 ; 46   |#define ATTR_LONG_NAME      ATTR_READ_ONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_VOLUME_ID
                              388 ; 47   |
                              389 ; 48   |#define SEEK_SET           -1
                              390 ; 49   |#define SEEK_CUR            0
                              391 ; 50   |#define SEEK_END            1
                              392 ; 51   |
                              393 ; 52   |#define DEVICE_INSTALLED              (WORD)(0)
                              394 ; 53   |#define DEVICE_NOT_FOUND              (WORD)(2)
                              395 ; 54   |#define INVALID_FILESYSTEM                        (WORD)(3)
                              396 ; 55   |#define DEVICE_INVALID                (WORD)(-1)
                              397 ; 56   |#define DEVICE_ERROR_WRITE_PROTECTED  (WORD)(-2)
                              398 ; 57   |
                              399 ; 58   |#define MEDIA_SIZE_TOTAL_SECTORS    0
                              400 ; 59   |#define MEDIA_SIZE_TOTAL_BYTES      1
                              401 ; 60   |#define MEDIA_SIZE_BYTES_PER_SECTOR 2
                              402 ; 61   |#define MEDIA_SIZE_IN_MEGABYTES     3     
                              403 ; 62   |
                              404 ; 63   |#define READ_TYPE_NORMAL            0
                              405 ; 64   |#define READ_TYPE_FAT               1
                              406 ; 65   |#define READ_TYPE_RAW               2
                              407 ; 66   |
                              408 ; 67   |
                              409 ; 68   |#ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                              410 ; 69   |    #define WRITE_TYPE_RANDOM                   0
                              411 ; 70   |    #define WRITE_TYPE_SEQ_FIRST                1
                              412 ; 71   |    #define WRITE_TYPE_SEQ_NEXT                 2
                              413 ; 72   |    #define WRITE_TYPE_RESET_CLEAN_UP           3
                              414 ; 73   |    #define WRITE_TYPE_PARTIAL_SEQ_FIRST        4
                              415 ; 74   |    #define WRITE_TYPE_PARTIAL_SEQ_NEXT         5
                              416 ; 75   |    #define WRITE_TYPE_PARTIAL_SEQ_LAST         6
                              417 ; 76   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                              418 ; 77   |        #define WRITE_TYPE_RANDOM_RAW               7
                              419 ; 78   |        #define WRITE_TYPE_SEQ_FIRST_RAW            8
                              420 ; 79   |        #define WRITE_TYPE_SEQ_NEXT_RAW             9
                              421 ; 80   |        #define WRITE_TYPE_PARTIAL_SEQ_FIRST_RAW    10
                              422 ; 81   |        #define WRITE_TYPE_PARTIAL_SEQ_NEXT_RAW     11
                              423 ; 82   |        #define WRITE_TYPE_PARTIAL_SEQ_LAST_RAW     12
                              424 ; 83   |    #endif
                              425 ; 84   |#else
                              426 ; 85   |    #define WRITE_TYPE_RANDOM                   0
                              427 ; 86   |    #define WRITE_TYPE_SEQ_FIRST                1
                              428 ; 87   |    #define WRITE_TYPE_SEQ_NEXT                 2
                              429 ; 88   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                              430 ; 89   |        #define WRITE_TYPE_RANDOM_RAW               3
                              431 ; 90   |        #define WRITE_TYPE_SEQ_FIRST_RAW            4
                              432 ; 91   |        #define WRITE_TYPE_SEQ_NEXT_RAW             5
                              433 ; 92   |    #endif
                              434 ; 93   |#endif
                              435 ; 94   |    #define WRITE_TYPE_UNDEFINED 0xFFFFFF
                              436 ; 95   |
                              437 ; 96   |
                              438 ; 97   |#ifndef MAX_FILENAME_LENGTH
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              439 ; 98   |#define MAX_FILENAME_LENGTH 256
                              440 ; 99   |#endif
                              441 ; 100  |
                              442 ; 101  |typedef struct {
                              443 ; 102  |    WORD wNumberOfZones;
                              444 ; 103  |    WORD wSizeInMegaBytes;
                              445 ; 104  |} SMARTMEDIA_CHIP_INFO;
                              446 ; 105  |
                              447 ; 106  |typedef struct {
                              448 ; 107  |    WORD wBootIdentification;
                              449 ; 108  |    WORD wStartHeadNumber;
                              450 ; 109  |    WORD wStartSectorNumber;
                              451 ; 110  |    WORD wStartCylinderNumber;
                              452 ; 111  |    WORD wSystemIdentification;
                              453 ; 112  |    WORD wEndHeadNumber;
                              454 ; 113  |    WORD wEndSectorNumber;
                              455 ; 114  |    WORD wEndCylinderNumber;
                              456 ; 115  |    WORD wStartLogicalSectorNumberHigh;
                              457 ; 116  |    WORD wStartLogicalSectorNumberLow;
                              458 ; 117  |    WORD wPartitionSizeHigh;
                              459 ; 118  |    WORD wPartitionSizeLow;
                              460 ; 119  |} SMARTMEDIA_PARTITION_TABLE;
                              461 ; 120  |
                              462 ; 121  |typedef struct {
                              463 ; 122  |    WORD wWord0;
                              464 ; 123  |    WORD wWord1;
                              465 ; 124  |    WORD wWord2;
                              466 ; 125  |} SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME;
                              467 ; 126  |
                              468 ; 127  |typedef struct {
                              469 ; 128  |    WORD wWord0;
                              470 ; 129  |    WORD wWord1;
                              471 ; 130  |} SMARTMEDIA_CIS_IDI_PRODUCT_NAME;
                              472 ; 131  |
                              473 ; 132  |typedef struct {
                              474 ; 133  |    WORD wWord0;
                              475 ; 134  |    WORD wWord1;
                              476 ; 135  |} SMARTMEDIA_CIS_IDI_PRODUCT_VERSION;
                              477 ; 136  |
                              478 ; 137  |typedef struct {
                              479 ; 138  |    WORD wWord0;
                              480 ; 139  |    WORD wWord1;
                              481 ; 140  |    WORD wWord2;
                              482 ; 141  |    WORD wWord3;
                              483 ; 142  |} SMARTMEDIA_CIS_IDI_SERIAL_NUMBER;
                              484 ; 143  |
                              485 ; 144  |typedef struct {
                              486 ; 145  |    WORD wWord0;
                              487 ; 146  |} SMARTMEDIA_CIS_IDI_MODEL_NUMBER;
                              488 
                              511 
                              512 ; 147  |
                              513 ; 148  |typedef struct {
                              514 ; 149  |    SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME ManufacturerName;
                              515 ; 150  |    SMARTMEDIA_CIS_IDI_PRODUCT_NAME ProductName;
                              516 ; 151  |    SMARTMEDIA_CIS_IDI_PRODUCT_VERSION ProductVersion;
                              517 ; 152  |    SMARTMEDIA_CIS_IDI_SERIAL_NUMBER SerialNumber;
                              518 ; 153  |    SMARTMEDIA_CIS_IDI_MODEL_NUMBER ModelNumber;
                              519 ; 154  |} SMARTMEDIA_CIS_IDI_TABLE;
                              520 
                              542 
                              543 ; 155  |   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              544 ; 156  |typedef struct {
                              545 ; 157  |    WORD wPageSizeInBytes;
                              546 ; 158  |    WORD wRedundantAreaSizeInBytes;
                              547 ; 159  |    WORD wNumberOfPagesPerBlock;
                              548 ; 160  |    WORD wNumberOfBlocksPerZone;
                              549 ; 161  |    WORD wNumberOfZonesInMedia;
                              550 ; 162  |    WORD wMediaSizeInMBytes;
                              551 ; 163  |    SMARTMEDIA_PARTITION_TABLE * pPartitionTable;
                              552 ; 164  |    SMARTMEDIA_CIS_IDI_TABLE * pCisIdiTable;
                              553 ; 165  |    WORD wMediaFlagStatus;
                              554 ; 166  |    WORD wNumberOfBlocksToTheCisIdiBlock;
                              555 ; 167  |    WORD wTotalNumberOfPhysicalBlocks;
                              556 ; 168  |    WORD wNumberOfSystemBlocks;
                              557 ; 169  |} SMARTMEDIA_ENTRY_TABLE;
                              558 ; 170  |
                              559 ; 171  |typedef struct {
                              560 ; 172  |    WORD wDevice;        
                              561 ; 173  |    WORD wDirtyBlockFlag;
                              562 ; 174  |    WORD wCleanTailFlag; 
                              563 ; 175  |    WORD wLogDOSPage;    
                              564 ; 176  |    WORD wSrcLogBlock;   
                              565 ; 177  |    WORD wSrcPhyBlock;   
                              566 ; 178  |    WORD wDestPhyBlock;  
                              567 ; 179  |    WORD wStartSrcPage;  
                              568 ; 180  |    WORD wStartDestPage; 
                              569 ; 181  |    WORD wPagesToCopy;   
                              570 ; 182  |    WORD wReplaceBuff;   
                              571 ; 183  |    WORD wReplaceRdnt;
                              572 ; 184  |    #ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                              573 ; 185  |        WORD wFirstCount;
                              574 ; 186  |        WORD wNextCount;
                              575 ; 187  |        WORD wLastCount;
                              576 ; 188  |    #endif
                              577 ; 189  |} SMARTMEDIA_FWPPS_TABLE;
                              578 ; 190  |
                              579 ; 191  |typedef struct {
                              580 ; 192  |    WORD wWord0;
                              581 ; 193  |    WORD wWord1;
                              582 ; 194  |    WORD wWord2;
                              583 ; 195  |    WORD wWord3;
                              584 ; 196  |} DIRECTORY_NAME;
                              585 ; 197  |
                              586 ; 198  |typedef struct {
                              587 ; 199  |    WORD wWord0;
                              588 ; 200  |    WORD wWord1;
                              589 ; 201  |} DIRECTORY_EXTENSION;
                              590 ; 202  |
                              591 ; 203  |typedef struct {
                              592 ; 204  |    WORD wWord0;
                              593 ; 205  |    WORD wWord1;
                              594 ; 206  |} DIRECTORY_SIZE;
                              595 
                              610 
                              611 ; 207  |
                              612 ; 208  |typedef struct {
                              613 ; 209  |    DIRECTORY_NAME Name;
                              614 ; 210  |    DIRECTORY_EXTENSION Extension;
                              615 ; 211  |    WORD wAttribute;
                              616 ; 212  |    WORD wReserved[4];
                              617 ; 213  |    WORD wCreationTime;
                              618 ; 214  |    WORD wCreationData;
                              619 ; 215  |    WORD wFirstCluster;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              620 ; 216  |    DIRECTORY_SIZE Size;
                              621 ; 217  |    WORD wCurrentCluster;
                              622 ; 218  |    WORD wPointer;
                              623 ; 219  |    WORD wRecord;
                              624 ; 220  |    WORD wRd;
                              625 ; 221  |} DIRECTORY_FILE_CONTROL_BLOCK;
                              626 ; 222  |
                              627 ; 223  |// TODO:  clean this up.  There are two versions.
                              628 ; 224  |struct FCB
                              629 ; 225  |{
                              630 ; 226  |    _packed BYTE m_szFileName[9];       //0-2
                              631 ; 227  |    int     m_wReserved;                //3
                              632 ; 228  |    _packed BYTE m_szExt[4];            //4-5
                              633 ; 229  |    int     m_wAttributes;              //6
                              634 ; 230  |    int     m_wReserved2[4];            //7,8,9,a
                              635 ; 231  |    int     m_wTimeofCreation;          //b
                              636 ; 232  |    int     m_wDateofCreation;          //c
                              637 ; 233  |    int     m_wFirstCluster;            //d
                              638 ; 234  |    int     m_wFileSizeHigh;            //e
                              639 ; 235  |    int     m_wFileSizeLow;             //f
                              640 ; 236  |};
                              641 
                              657 
                              658 ; 237  |
                              659 ; 238  |
                              660 ; 239  |typedef struct {
                              661 ; 240  |    WORD wFirstClusterCurrentDirectory;
                              662 ; 241  |    WORD wFirstClusterParentDirectory;
                              663 ; 242  |    WORD wAbsSectorCurrentlyCached;
                              664 ; 243  |    WORD wCurrentRelativeSector;
                              665 ; 244  |    WORD wNumberOfSectors;
                              666 ; 245  |    WORD wCurrentRecordLoadedInDcb;
                              667 ; 246  |    WORD wBufferedRecord;
                              668 ; 247  |    WORD wMaxNumberRecordsCurrentDirectory;
                              669 ; 248  |    WORD * pwPointerToBuffer;
                              670 ; 249  |    WORD * pwPointerToPath;
                              671 ; 250  |    DIRECTORY_FILE_CONTROL_BLOCK * pDirFcb;
                              672 ; 251  |} DIRECTORY_CONTROL_BLOCK;
                              673 ; 252  |
                              674 ; 253  |typedef struct {
                              675 ; 254  |    WORD wWord0;
                              676 ; 255  |    WORD wWord1;
                              677 ; 256  |    WORD wWord2;
                              678 ; 257  |    WORD wWord3;
                              679 ; 258  |} FILE_NAME;
                              680 ; 259  |
                              681 ; 260  |typedef struct {
                              682 ; 261  |    WORD wWord0;
                              683 ; 262  |    WORD wWord1;
                              684 ; 263  |} FILE_EXTENSION;
                              685 ; 264  |
                              686 ; 265  |typedef struct {
                              687 ; 266  |    WORD wWord0;
                              688 ; 267  |    WORD wWord1;
                              689 ; 268  |} FILE_SIZE;
                              690 ; 269  |
                              691 ; 270  |typedef union {
                              692 ; 271  |    struct {
                              693 ; 272  |        int Read        :1;
                              694 ; 273  |        int Write       :1;
                              695 ; 274  |        int Append      :1;
                              696 ; 275  |        int Truncate    :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              697 ; 276  |        int Create      :1;
                              698 ; 277  |        int Rsrv        :3;
                              699 ; 278  |        int Mode        :8;
                              700 ; 279  |        int Device      :8;
                              701 ; 280  |    } B;
                              702 ; 281  |    int I;
                              703 ; 282  |} FILE_FLAGS;
                              704 ; 283  |
                              705 ; 284  |typedef struct {
                              706 ; 285  |    WORD wWord0;
                              707 ; 286  |    WORD wWord1;
                              708 ; 287  |} FILE_BYTE_CURRENT;
                              709 
                              749 
                              750 ; 288  |
                              751 ; 289  |typedef struct {
                              752 ; 290  |    FILE_NAME Name;
                              753 ; 291  |    FILE_EXTENSION Extension;
                              754 ; 292  |    WORD wAttributes;
                              755 ; 293  |    WORD wReserved[4];
                              756 ; 294  |    WORD wCreationTime;
                              757 ; 295  |    WORD wCreationData;
                              758 ; 296  |    WORD wFirstCluster;
                              759 ; 297  |    FILE_SIZE Size;
                              760 ; 298  |    WORD wCurrentCluster;
                              761 ; 299  |    WORD wPointer;
                              762 ; 300  |    WORD wRecord;
                              763 ; 301  |    WORD wRd;
                              764 ; 302  |    FILE_FLAGS Flags;
                              765 ; 303  |    FILE_BYTE_CURRENT FcbByteCurrent;
                              766 ; 304  |    WORD wFcbFlagEndOfCx;
                              767 ; 305  |} FILE_CONTROL_BLOCK;    
                              768 ; 306  |
                              769 ; 307  |typedef struct {
                              770 ; 308  |    WORD wWord0;
                              771 ; 309  |    WORD wWord1;
                              772 ; 310  |    WORD wWord2;
                              773 ; 311  |    WORD wWord3;
                              774 ; 312  |} VOLUME_LABEL;
                              775 ; 313  |
                              776 ; 314  |typedef struct {
                              777 ; 315  |    WORD wFATPhysicalBlock1;
                              778 ; 316  |    WORD wFATPhysicalBlock2;
                              779 ; 317  |    WORD wFATPhysicalBlock3;
                              780 ; 318  |    WORD wFATPhysicalBlock4;
                              781 ; 319  |} FAT_PHYSICAL_BLOCK_LIST;
                              782 
                              789 
                              790 ; 320  |
                              791 ; 321  |typedef struct {
                              792 ; 322  |    WORD wFATSectorInCache;
                              793 ; 323  |    WORD wLastClusterFree;
                              794 ; 324  |    WORD wNumberOfUsedClusters;
                              795 ; 325  |    WORD wNumberOfFreeClusters;
                              796 ; 326  |    WORD wNumberOfBadClusters;
                              797 ; 327  |    WORD wNumberOfReservedClusters;
                              798 ; 328  |    WORD wControl;
                              799 ; 329  |    WORD * pwSectorCache;
                              800 ; 330  |    FAT_PHYSICAL_BLOCK_LIST FATPhysicalLocationList;
                              801 ; 331  |} FAT_TABLE;
                              802 
                              809 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              810 ; 332  |
                              811 ; 333  |typedef struct {
                              812 ; 334  |    WORD wStateMediaTable;
                              813 ; 335  |    WORD wTypeFs;
                              814 ; 336  |    WORD wBytesPerSector;
                              815 ; 337  |    WORD wSectorsPerCluster;
                              816 ; 338  |    WORD wNumberOfReservedSectors;
                              817 ; 339  |    WORD wMaximumNumberOfFATs;
                              818 ; 340  |    WORD wMaxRootDirectoryEntries;
                              819 ; 341  |    WORD wTotalSectors;
                              820 ; 342  |    WORD wNumberOfFATSectors;
                              821 ; 343  |    WORD wNumberOfSectorsPerTrack;
                              822 ; 344  |    WORD wNumberOfHeads;
                              823 ; 345  |    WORD wNumberOfHiddenSectorsMSB;
                              824 ; 346  |    WORD wNumberOfHiddenSectorsLSB;
                              825 ; 347  |    WORD wTotalSectors32MSB;
                              826 ; 348  |    WORD wTotalSectors32LSB;
                              827 ; 349  |    WORD wDriverNumber;
                              828 ; 350  |    WORD wExtendedBootSignature;
                              829 ; 351  |    WORD wVolumeIDMSB;
                              830 ; 352  |    WORD wVolumeIDLSB;
                              831 ; 353  |    VOLUME_LABEL VolumeLabel;
                              832 ; 354  |    WORD * pwWriteBuffer;
                              833 ; 355  |    WORD wPrimaryFATRelativeSector;
                              834 ; 356  |    WORD wSecondaryFATRelativeSector;
                              835 ; 357  |    WORD wRootDirectoryRelativeSector;
                              836 ; 358  |    WORD wFirstSectorNumberDataZone;
                              837 ; 359  |    WORD wMaxNumberOfFATEntries;
                              838 ; 360  |    WORD wRootDirectorySizeInSectors;
                              839 ; 361  |    WORD wDataAreaSizeInSectors;
                              840 ; 362  |} MEDIA_TABLE;
                              841 
                              900 
                              901 ; 363  |
                              902 ; 364  |typedef struct {
                              903 ; 365  |    MEDIA_TABLE * pMediaTable;
                              904 ; 366  |    DIRECTORY_CONTROL_BLOCK * pDirectoryControlBlock;
                              905 ; 367  |    FAT_TABLE * pFATTable;
                              906 ; 368  |} DEVICE_CONTROL_TABLE;
                              907 ; 369  |    
                              908 ; 370  |typedef struct {
                              909 ; 371  |    WORD dwTotalSizeInMegaBytes;        // dwTotalSizeInMegaBytes is limited
                              910 ; 372  |                                        //  to 2-bytes for compatibility with
                              911 ; 373  |                                        //  older host drivers.
                              912 ; 374  |    DWORD dwTotalNumberOfSectors;
                              913 ; 375  |    DWORD dwTotalNumberOfBytes;
                              914 ; 376  |    WORD wSectorSizeInBytes;
                              915 ; 377  |} MEDIA_SIZE;
                              916 ; 378  |
                              917 ; 379  |typedef struct {
                              918 ; 380  |    BOOL    bInstalled;
                              919 ; 381  |    INT     iPbsSectorOffset;   // from the beginning of the data drive 
                              920 ; 382  |    DWORD   dwSize;
                              921 ; 383  |} DATA_DRIVE_PBS_LOC;
                              922 ; 384  |extern  INT _reentrant FSFileOpen(_packed BYTE *fname,INT attribute, INT DeviceNumber);
                              923 ; 385  |extern  INT _reentrant FSFastOpen(DWORD Key, INT attribute);
                              924 ; 386  |extern  INT FSFileDelete(_packed BYTE *fname,INT DeviceNumber);
                              925 ; 387  |extern  INT FSFileCreate(_packed BYTE *fname,INT DeviceNumber);
                              926 ; 388  |extern  INT _reentrant FSChangeDir(_packed BYTE *dirname,INT DeviceNumber);
                              927 ; 389  |extern  INT _reentrant FSCreateDir(_packed BYTE *dirname,INT DeviceNumber);
                              928 ; 390  |extern  INT _reentrant FSDeleteDir(_packed BYTE *dirname,INT DeviceNumber);
                              929 ; 391  |extern  INT _reentrant FSFileAppend(_packed BYTE *fname,INT DeviceNumber);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              930 ; 392  |extern  INT _reentrant FSFileRead(INT BytestoRead, INT Handle, INT memory_type, INT modulo
                                  , WORD *buffer);
                              931 ; 393  |extern  INT _reentrant FSFileWrite(INT wNumberBytes, INT Handle, INT memory_type, INT iMod
                                  ulo, WORD *buffer);
                              932 ; 394  |extern  INT _reentrant FSFileClose(INT Handle);
                              933 ; 395  |extern  LONG _reentrant FSFileSize(INT HandleNumber);
                              934 ; 396  |extern  LONG  FSSize(INT DeviceNum, INT TYPE);   
                              935 ; 397  |extern  INT FSFreeClusters(INT Device);
                              936 ; 398  |extern  INT BytesPerCluster(INT Device);
                              937 ; 399  |
                              938 ; 400  |
                              939 ; 401  |
                              940 ; 402  |//extern  INT FSFileCreate(_packed BYTE *pbFileName, BYTE bDevice);
                              941 ; 403  |//extern  INT FSFileDelete(_packed BYTE *pbFileName, BYTE bDevice);
                              942 ; 404  |extern  INT FSFileRename(_packed BYTE *pbCurFilename, _packed BYTE *pbNewFilename, BYTE bD
                                  evice);
                              943 ; 405  |//extern  INT _reentrant FSFileAttribute(_packed BYTE *pbFilename, WORD wAttributes, BYTE 
                                  bDevice);
                              944 ; 406  |//extern  INT FSFileAppend(_packed BYTE *pbFileName, BYTE bDevice);
                              945 ; 407  |//extern  INT FSFileOpen(_packed BYTE *pbFileName, WORD wAttributes, BYTE bDevice);
                              946 ; 408  |//extern  INT FSFileClose(INT bHandle);
                              947 ; 409  |//extern  INT FSFileRead(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WOR
                                  D *pwBuffer);
                              948 ; 410  |//extern  INT FSFileWrite(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WO
                                  RD *pwBuffer);
                              949 ; 411  |extern  INT _reentrant fseek( INT handle , LONG offset, INT iOrigin );
                              950 ; 412  |extern  INT _reentrant FSFileEof(INT Handle);
                              951 ; 413  |extern INT _reentrant FSFileAttribute(INT Attributes, _packed BYTE *fname, INT DeviceNumbe
                                  r);
                              952 ; 414  |extern INT _reentrant FSFileAttributeClear(INT Attributes, _packed BYTE *fname, INT Device
                                  Number);
                              953 ; 415  |//extern  LONG FSFileSize(INT bHandle);
                              954 ; 416  |extern _asmfunc INT FSPresent(BYTE bDevice);
                              955 ; 417  |extern _asmfunc INT FSType(BYTE bDevice);
                              956 ; 418  |//extern LONG FSSize(WORD wDevice, WORD wReturnType);
                              957 ; 419  |//extern INT FSChangeDir(_packed BYTE *pbDirName, BYTE bDevice);
                              958 ; 420  |//extern INT FSCreateDir(_packed BYTE *pbDirName, BYTE bDevice);
                              959 ; 421  |//extern INT FSDeleteDir(_packed BYTE *pbDirName, BYTE bDevice);
                              960 ; 422  |extern _asmfunc void SysLoadFATWrite(void);
                              961 ; 423  |extern _asmfunc INT SysUnLoadFATWrite(void);
                              962 ; 424  |extern LONG _reentrant ftell(INT iHandle);
                              963 ; 425  |extern _asmfunc struct FCB * ReadDirectory(int iDevice, int iEntry);
                              964 ; 426  |
                              965 ; 427  |#endif
                              966 
                              968 
                              969 ; 8    |#include "ddildl.h" // in  \inc  DriveErase call here probably needs this. 
                              970 
                              972 
                              973 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              974 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                              975 ; 3    |//
                              976 ; 4    |// Filename: ddildl.h
                              977 ; 5    |// Description: 
                              978 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              979 ; 7    |
                              980 ; 8    |#ifndef _DDILDL_H
                              981 ; 9    |#define _DDILDL_H
                              982 ; 10   |
                              983 ; 11   |///////////////////////////////////////////////////////////////////////////////
                              984 ; 12   |// Includes
                              985 ; 13   |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              986 ; 14   |
                              987 ; 15   |///////////////////////////////////////////////////////////////////////////////
                              988 ; 16   |// Definitions
                              989 ; 17   |///////////////////////////////////////////////////////////////////////////////
                              990 ; 18   |// version before march 11 2005 
                              991 ; 19   |//#ifdef PLAYER_BUILD
                              992 ; 20   |//#define MAX_MEDIA_TABLE_ENTRIES                12
                              993 ; 21   |//#else
                              994 ; 22   |//#define MAX_MEDIA_TABLE_ENTRIES                14
                              995 ; 23   |//#endif
                              996 ; 24   |// Mar 14 2007: Only requires the maximum number of drives in one media
                              997 ; 25   |// NAND:(2 data drives + 9 system drives + 1 extra system drive in future) = 12
                              998 ; 26   |#define MAX_MEDIA_TABLE_ENTRIES                12
                              999 ; 27   |
                             1000 ; 28   |#define MAX_LOGICAL_MEDIA                       2
                             1001 ; 29   |
                             1002 ; 30   |//
                             1003 ; 31   |// WARNING
                             1004 ; 32   |// The maximum number of drives needed for player, mtp and usbmsc 
                             1005 ; 33   |// builds is currently the player build which has the largest number of drives = 12(NAND)+
                                  1(MMC).
                             1006 ; 34   |// Private lib references to this change to use a ddiproject global that's init per projec
                                  t 
                             1007 ; 35   |// instead so those plib references are no longer fixed at lib compile time. March 1 2005
                             1008 ; 36   |#ifdef PLAYER_BUILD
                             1009 ; 37   |#define MAX_LOGICAL_DRIVES                      13
                             1010 ; 38   |#else // MTP_BUILD & USBMSC/updater need support for the ram drive used in msc
                             1011 ; 39   |/********************************************************************************
                             1012 ; 40   | * We have to define 2 more than the actually size for usbmsc case
                             1013 ; 41   | * We have totally 9 system drives, 3 data drives, 1 extra system drive in future, 
                             1014 ; 42   | * so the total number is 13. The max will be 13 + 2 = 15
                             1015 ; 43   | ********************************************************************************/
                             1016 ; 44   |#define MAX_LOGICAL_DRIVES                      15
                             1017 ; 45   |#endif
                             1018 ; 46   |
                             1019 ; 47   |#define DDI_MAGIC_NUMBER                        0xADEADE
                             1020 ; 48   |
                             1021 ; 49   |///////////////////////////////////////////////////////////////////////////////
                             1022 ; 50   |// Error codes
                             1023 ; 51   |///////////////////////////////////////////////////////////////////////////////
                             1024 ; 52   |
                             1025 ; 53   |#include "errors.h"
                             1026 
                             1028 
                             1029 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1030 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                             1031 ; 3    |////
                             1032 ; 4    |//// Filename: errors.inc
                             1033 ; 5    |//// Description: 
                             1034 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             1035 ; 7    |
                             1036 ; 8    |#if (!defined(ERRORS_INC))
                             1037 ; 9    |#define ERRORS_INC 1
                             1038 ; 10   |
                             1039 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                             1040 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                             1041 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                             1042 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                             1043 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                             1044 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
                             1045 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                             1046 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1047 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                             1048 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                             1049 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                             1050 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                             1051 ; 23   |// block in the device. The block was marked bad and tables updated.
                             1052 ; 24   |// The application must start over.
                             1053 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                             1054 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                             1055 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                             1056 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                             1057 ; 29   |
                             1058 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                             1059 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                             1060 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                             1061 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                             1062 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                             1063 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                             1064 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                             1065 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                             1066 ; 38   |//Specific to NAND
                             1067 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                             1068 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                             1069 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                             1070 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                             1071 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                             1072 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                             1073 ; 45   |
                             1074 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                             1075 ; 47   |
                             1076 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                             1077 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                             1078 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                             1079 ; 51   |
                             1080 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                             1081 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                             1082 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                             1083 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                             1084 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                             1085 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                             1086 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                             1087 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                             1088 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                             1089 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                             1090 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                             1091 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                             1092 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                             1093 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                             1094 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                             1095 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                             1096 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                             1097 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                             1098 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                             1099 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                             1100 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                             1101 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                             1102 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                             1103 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                             1104 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                             1105 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                             1106 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
                             1107 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                             1108 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1109 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                             1110 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                             1111 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                             1112 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                             1113 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                             1114 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                             1115 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                             1116 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                             1117 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                             1118 ; 90   |
                             1119 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                             1120 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                             1121 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                             1122 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                             1123 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                             1124 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                             1125 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                             1126 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                             1127 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                             1128 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                             1129 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                             1130 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                             1131 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                             1132 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                             1133 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                             1134 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                             1135 ; 107  |
                             1136 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                             1137 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                             1138 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                             1139 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                             1140 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                             1141 ; 113  |
                             1142 ; 114  |// indicates that during the NandHalInit, the NandType did not
                             1143 ; 115  |// match the previously initialized Nand chip type.
                             1144 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                             1145 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                             1146 ; 118  |// Errors from calling HIL functions
                             1147 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                             1148 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                             1149 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                             1150 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                             1151 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                             1152 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                             1153 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                             1154 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                             1155 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                             1156 ; 128  |// for 3410 build
                             1157 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                             1158 ; 130  |// for 3410 build
                             1159 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                             1160 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                             1161 ; 133  |
                             1162 ; 134  |// indicates that the GetStatus returned a FAIL
                             1163 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                             1164 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                             1165 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                             1166 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                             1167 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                             1168 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
                             1169 ; 141  |// indicates the NAND was already BUSY
                             1170 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1171 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                             1172 ; 144  |// ECC Error Codes
                             1173 ; 145  |// ECC Computation has successfully completed
                             1174 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                             1175 ; 147  |// ECC computation still busy
                             1176 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                             1177 ; 149  |// timed out while waiting on object
                             1178 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                             1179 ; 151  |// flag already set for SDK2.4 lock
                             1180 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                             1181 ; 153  |
                             1182 ; 154  |#define NANDHAL_ECC_NOERROR 0
                             1183 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                             1184 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                             1185 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                             1186 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                             1187 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                             1188 ; 160  |
                             1189 ; 161  |// MMC Errors
                             1190 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                             1191 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                             1192 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                             1193 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                             1194 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                             1195 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                             1196 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                             1197 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                             1198 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                             1199 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                             1200 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                             1201 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                             1202 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                             1203 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                             1204 ; 176  |
                             1205 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                             1206 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                             1207 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                             1208 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                             1209 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                             1210 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                             1211 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                             1212 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                             1213 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                             1214 ; 186  |
                             1215 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             1216 ; 188  |//// MMC HAL Error codes
                             1217 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                             1218 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                             1219 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                             1220 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                             1221 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                             1222 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                             1223 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                             1224 ; 196  |
                             1225 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                             1226 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                             1227 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                             1228 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                             1229 ; 201  |
                             1230 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
                             1231 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                             1232 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1233 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                             1234 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                             1235 ; 207  |
                             1236 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                             1237 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                             1238 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                             1239 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                             1240 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                             1241 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                             1242 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                             1243 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                             1244 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                             1245 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                             1246 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                             1247 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                             1248 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                             1249 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                             1250 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                             1251 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                             1252 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                             1253 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                             1254 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                             1255 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                             1256 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                             1257 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                             1258 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                             1259 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                             1260 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                             1261 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                             1262 ; 234  |
                             1263 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                             1264 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                             1265 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                             1266 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                             1267 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                             1268 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                             1269 ; 241  |
                             1270 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                             1271 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                             1272 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                             1273 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                             1274 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                             1275 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                             1276 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                             1277 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                             1278 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                             1279 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                             1280 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                             1281 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                             1282 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                             1283 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                             1284 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                             1285 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                             1286 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                             1287 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                             1288 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                             1289 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                             1290 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                             1291 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                             1292 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
                             1293 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                             1294 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1295 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                             1296 ; 268  |
                             1297 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                             1298 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                             1299 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                             1300 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                             1301 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                             1302 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                             1303 ; 275  |
                             1304 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                             1305 ; 277  |//MATH errors...
                             1306 ; 278  |#define ERRZeroDivide 0x7FFFFF
                             1307 ; 279  |
                             1308 ; 280  |//Memory Pointer errors...
                             1309 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                             1310 ; 282  |//****************************************************************/
                             1311 ; 283  |#if (!defined(NOERROR))
                             1312 ; 284  |#define NOERROR 0
                             1313 ; 285  |#endif
                             1314 ; 286  |
                             1315 ; 287  |////Added by RAKS
                             1316 ; 288  |
                             1317 ; 289  |#define ERRProgram 0x911111
                             1318 ; 290  |#define ERRNoMedia 0x922222
                             1319 ; 291  |#define ERRHwFail 0x933333   
                             1320 ; 292  |#define ERRInvMedia 0x944444
                             1321 ; 293  |#define ERRBlkFail 0x955555
                             1322 ; 294  |#define ERRInvDataStatus 0x966666
                             1323 ; 295  |#define ERRWriteFail 0x977777
                             1324 ; 296  |#define ERRECCCorr 0x988888
                             1325 ; 297  |#define ERRECCFail 0x999999
                             1326 ; 298  |#define ERRZoneFull 0x9aaaaa
                             1327 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                             1328 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                             1329 ; 301  |//invalid partition table signature. 
                             1330 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                             1331 ; 303  |//boot ID bad
                             1332 ; 304  |#define ERRBootID 0x9BBBBB   
                             1333 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                             1334 ; 306  |////Nothing was here : RAKS
                             1335 ; 307  |//JUMP instruction bad
                             1336 ; 308  |#define ERRBootJump 0x9DDDDD  
                             1337 ; 309  |//ID Byte bad
                             1338 ; 310  |#define ERRIDByte 0x9EEEEE  
                             1339 ; 311  |
                             1340 ; 312  |
                             1341 ; 313  |//****************************************************************
                             1342 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                             1343 ; 315  |//****************************************************************
                             1344 ; 316  |// Master ERROR File
                             1345 ; 317  |//****************************************************************/
                             1346 ; 318  |// FAT File System Error Codes
                             1347 ; 319  |// corrupt FAT
                             1348 ; 320  |#define FATCorrupt -1        
                             1349 ; 321  |// invalid FAT sector
                             1350 ; 322  |#define DIRInvlaidSector -2        
                             1351 ; 323  |
                             1352 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                             1353 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                             1354 ; 326  |#define FATwarningReservedCx 0x0A1111
                             1355 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                             1356 ; 328  |//FATcxsFree==0 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1357 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                             1358 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                             1359 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                             1360 ; 332  |
                             1361 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                             1362 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                             1363 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                             1364 ; 336  |
                             1365 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                             1366 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                             1367 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                             1368 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                             1369 ; 341  |//No Free Cxs on FAT Scan!
                             1370 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                             1371 ; 343  |
                             1372 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                             1373 ; 345  |
                             1374 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                             1375 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                             1376 ; 348  |
                             1377 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                             1378 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                             1379 ; 351  |
                             1380 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                             1381 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                             1382 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                             1383 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                             1384 ; 356  |
                             1385 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                             1386 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                             1387 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                             1388 ; 360  |
                             1389 ; 361  |#define SEEKprefix 0x85
                             1390 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                             1391 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                             1392 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                             1393 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                             1394 ; 366  |
                             1395 ; 367  |#define READprefix 0x86
                             1396 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                             1397 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                             1398 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                             1399 ; 371  |#define READerrorAccessDenied 0x86ADAD
                             1400 ; 372  |#define READerrorFreeCx 0x860000
                             1401 ; 373  |#define READerrorEndOfChain 0x861111
                             1402 ; 374  |#define READerrorReservedCx 0x862222
                             1403 ; 375  |#define READerrorBadCx 0x863333
                             1404 ; 376  |
                             1405 ; 377  |#define WRITEprefix 0x87
                             1406 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                             1407 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                             1408 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                             1409 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                             1410 ; 382  |#define WRITEerrorFreeCx 0x870000
                             1411 ; 383  |#define WRITEerrorEndOfChain 0x871111
                             1412 ; 384  |#define WRITEerrorReservedCx 0x872222
                             1413 ; 385  |#define WRITEerrorBadCx 0x873333
                             1414 ; 386  |
                             1415 ; 387  |#define UTILprefix 0x88
                             1416 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
                             1417 ; 389  |
                             1418 ; 390  |// Directory Error Codes
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1419 ; 391  |
                             1420 ; 392  |// invalid DIR sector specified
                             1421 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                             1422 ; 394  |// PATH search string has invlaid directory
                             1423 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                             1424 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                             1425 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                             1426 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                             1427 ; 399  |// Bad cluster number
                             1428 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                             1429 ; 401  |// Can't open ROOT
                             1430 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                             1431 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                             1432 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                             1433 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                             1434 ; 406  |// bad record number to read
                             1435 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                             1436 ; 408  |// record requeste not in range
                             1437 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                             1438 ; 410  |// record requeste past end of ROOT
                             1439 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                             1440 ; 412  |// device number invalid
                             1441 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                             1442 ; 414  |// FCB Does not popint to a sub-Directory entry
                             1443 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                             1444 ; 416  |// Path specified is invalid
                             1445 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                             1446 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                             1447 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                             1448 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                             1449 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                             1450 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                             1451 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                             1452 ; 424  |
                             1453 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                             1454 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                             1455 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                             1456 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                             1457 ; 429  |// String Manipulation Error Codes
                             1458 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                             1459 ; 431  |
                             1460 ; 432  |#endif //@DEF(ERRORS_INC)
                             1461 ; 433  |
                             1462 
                             1464 
                             1465 ; 54   |
                             1466 ; 55   |///////////////////////////////////////////////////////////////////////////////
                             1467 ; 56   |// Typedefs
                             1468 ; 57   |///////////////////////////////////////////////////////////////////////////////
                             1469 ; 58   |
                             1470 ; 59   |typedef void (*MULTI_WRITE_CALLBACK_FUNCTION)(LONG lValue);
                             1471 ; 60   |
                             1472 ; 61   |#include "ddildl\ddildl_defs.h"
                             1473 
                             1475 
                             1476 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1477 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                             1478 ; 3    |//
                             1479 ; 4    |// Filename: ddildl_defs.h
                             1480 ; 5    |// Description: 
                             1481 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1482 ; 7    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1483 ; 8    |#ifndef _DDILDL_DEFS_H
                             1484 ; 9    |#define _DDILDL_DEFS_H
                             1485 ; 10   |
                             1486 ; 11   |///////////////////////////////////////////////////////////////////////////////
                             1487 ; 12   |// Typedefs
                             1488 ; 13   |///////////////////////////////////////////////////////////////////////////////
                             1489 ; 14   |
                             1490 ; 15   |typedef enum {
                             1491 ; 16   |  MediaStateUnknown,
                             1492 ; 17   |  MediaStateErased,
                             1493 ; 18   |  MediaStateAllocated
                             1494 ; 19   |} MEDIA_STATE, * P_MEDIA_STATE;
                             1495 ; 20   |
                             1496 ; 21   |typedef enum {
                             1497 ; 22   |    MediaTypeNand = 0,
                             1498 ; 23   |    MediaTypeMMC = 1,
                             1499 ; 24   |    MediaTypeHDD = 2,
                             1500 ; 25   |    MediaTypeRAM = 3
                             1501 ; 26   |} PHYSICAL_MEDIA_TYPE, * P_PHYSICAL_MEDIA_TYPE;
                             1502 ; 27   |
                             1503 ; 28   |typedef enum {
                             1504 ; 29   |    MediaInfoNumberOfDrives = 0,
                             1505 ; 30   |    MediaInfoSizeInBytes = 1,
                             1506 ; 31   |    MediaInfoAllocationUnitSizeInBytes = 2,
                             1507 ; 32   |    MediaInfoIsInitialized = 3,
                             1508 ; 33   |    MediaInfoMediaState = 4,
                             1509 ; 34   |    MediaInfoIsWriteProtected = 5,
                             1510 ; 35   |    MediaInfoPhysicalMediaType = 6,
                             1511 ; 36   |    MediaInfoSizeOfSerialNumberInBytes = 7,
                             1512 ; 37   |    MediaInfoSerialNumber = 8,
                             1513 ; 38   |    MediaInfoIsSystemMedia = 9,
                             1514 ; 39   |    MediaInfoIsMediaPresent = 10
                             1515 ; 40   |} LOGICAL_MEDIA_INFO, * P_LOGICAL_MEDIA_INFO;
                             1516 ; 41   |
                             1517 ; 42   |#ifdef MFG_TOOL
                             1518 ; 43   |  
                             1519 ; 44   |typedef enum {
                             1520 ; 45   |    SerialNoInfoSizeOfSerialNumberInBytes = 0,
                             1521 ; 46   |    SerialNoInfoSerialNumber = 1
                             1522 ; 47   |} SERIAL_NO_INFO, * P_SERIAL_NO_INFO;
                             1523 ; 48   |#endif
                             1524 ; 49   |
                             1525 ; 50   |typedef enum {
                             1526 ; 51   |    DriveInfoSectorSizeInBytes = 0,
                             1527 ; 52   |    DriveInfoEraseSizeInBytes = 1,
                             1528 ; 53   |    DriveInfoSizeInBytes = 2,
                             1529 ; 54   |    DriveInfoSizeInMegaBytes = 3,
                             1530 ; 55   |    DriveInfoSizeInSectors = 4,
                             1531 ; 56   |    DriveInfoType = 5,
                             1532 ; 57   |    DriveInfoTag = 6,
                             1533 ; 58   |    DriveInfoComponentVersion = 7,
                             1534 ; 59   |    DriveInfoProjectVersion = 8,
                             1535 ; 60   |    DriveInfoIsWriteProtected = 9,
                             1536 ; 61   |    DriveInfoSizeOfSerialNumberInBytes = 10,
                             1537 ; 62   |    DriveInfoSerialNumber = 11,
                             1538 ; 63   |    DriveInfoMediaPresent = 12,
                             1539 ; 64   |    DriveInfoMediaChange = 13,
                             1540 ; 65   |    DriveInfoSectorAllocation = 14
                             1541 ; 66   |} LOGICAL_DRIVE_INFO, * P_LOGICAL_DRIVE_INFO;
                             1542 ; 67   |
                             1543 ; 68   |#define DRIVE_TAG_STMPSYS_S         0x00        //!< player drive tag.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1544 ; 69   |#define DRIVE_TAG_HOSTLINK_S        0x01        //!< UsbMscMtp drive tag, old name was DRI
                                  VE_TAG_USBMSC_S. 
                             1545 ; 70   |#define DRIVE_TAG_RESOURCE_BIN      0x02        //!< player resource drive tag.
                             1546 ; 71   |#define DRIVE_TAG_EXTRA_S           0x03        //!< the host has 0x03 reserved for an ext
                                  ra system drive.
                             1547 ; 72   |// if you change line below, also change this equ: asm_DRIVE_TAG_RESOURCE1_BIN in player m
                                  ain.asm!! Values must match. 
                             1548 ; 73   |#define DRIVE_TAG_RESOURCE1_BIN (DRIVE_TAG_RESOURCE_BIN+0x10)//<! was just 0x04. old comme
                                  nt"the host has 0x04 reserved for an extra system drive." May17'06 JLN: correction: ChrisW says 0x
                                  10+resource.bin tag is tag for 2nd ver of resource.bin in new 2.61x post sdkrelease updater. 
                             1549 ; 74   |#define DRIVE_TAG_RESOURCE2_BIN (DRIVE_TAG_RESOURCE_BIN+0x20)// master has tag 0x22 (3rd c
                                  opy)
                             1550 ; 75   |#define DRIVE_TAG_OTGHOST_S         0x05        //!< the host has 0x05 reserved for OTG dr
                                  ive.
                             1551 ; 76   |#define DRIVE_TAG_HOSTRSC_BIN       0x06        //!< UsbMscMtp resource drive tag, old nam
                                  e was DRIVE_TAG_MTP_BIN.
                             1552 ; 77   |#define DRIVE_TAG_DATA              0x0A        //!< data drive tag.
                             1553 ; 78   |#define DRIVE_TAG_DATA_HIDDEN       0x0B        //!< hidden data drive tag, old name was D
                                  RIVE_TAG_HIDDEN
                             1554 ; 79   |#define DRIVE_TAG_BOOTMANAGER_S     0x50        //!< boot manager drive tag
                             1555 ; 80   |#define DRIVE_TAG_UPDATER_S         0xFF        //!< the host has 0xFF reserved for usbmsc
                                  .sb file used in recovery mode operation only.
                             1556 ; 81   |#define DRIVE_TAG_HOSTRSC1_BIN      0x16        //!< back up resource for hostrsrc.bin.
                             1557 ; 82   |#define DRIVE_TAG_HOSTRSC2_BIN      0x26        //!< MASTER COPY resource for hostrsrc.bin
                                  .
                             1558 ; 83   |// Do not use this enum... use the defs above.  We need to use defs so customers
                             1559 ; 84   |//  may extend the system drives without DDI source code.
                             1560 ; 85   |/*
                             1561 ; 86   |typedef enum {
                             1562 ; 87   |    ResourceBinDriveTag = 0x00,
                             1563 ; 88   |    BootManagerDriveTag = 0x50,
                             1564 ; 89   |    StmpSysDriveTag = 0x01,
                             1565 ; 90   |    UsbMscDriveTag = 0x02,
                             1566 ; 91   |    DataDriveTag = 0x0A
                             1567 ; 92   |} LOGICAL_DRIVE_TAG, * P_LOGICAL_DRIVE_TAG;
                             1568 ; 93   |*/
                             1569 ; 94   |
                             1570 ; 95   |typedef enum {
                             1571 ; 96   |    DriveTypeData = 0,
                             1572 ; 97   |    DriveTypeSystem = 1,
                             1573 ; 98   |    DriveTypeHidden = 2,
                             1574 ; 99   |    DriveTypeUnknown = 3
                             1575 ; 100  |} LOGICAL_DRIVE_TYPE, * P_LOGICAL_DRIVE_TYPE;
                             1576 
                             1583 
                             1584 ; 101  |
                             1585 ; 102  |typedef struct {
                             1586 ; 103  |    WORD wDriveNumber;          // In reference to the entire system
                             1587 ; 104  |    LOGICAL_DRIVE_TYPE Type;
                             1588 ; 105  |    WORD wTag;
                             1589 ; 106  |    DWORD dwSizeInBytes;
                             1590 ; 107  |    BOOL bRequired;
                             1591 ; 108  |} MEDIA_ALLOCATION_TABLE_ENTRY, * P_MEDIA_ALLOCATION_TABLE_ENTRY;
                             1592 
                             1600 
                             1601 ; 109  |
                             1602 ; 110  |typedef struct {
                             1603 ; 111  |    WORD wNumEntries;
                             1604 ; 112  |    MEDIA_ALLOCATION_TABLE_ENTRY Entry[MAX_MEDIA_TABLE_ENTRIES];
                             1605 ; 113  |} MEDIA_ALLOCATION_TABLE, * P_MEDIA_ALLOCATION_TABLE;
                             1606 ; 114  |
                             1607 ; 115  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1608 ; 116  |#define TA6_ROM_REV_ID  6
                             1609 ; 117  |#define ROM_REV_ID  (*((WORD _X *)0xFA02) & 0x0F)
                             1610 ; 118  |
                             1611 ; 119  | 
                             1612 ; 120  |typedef union {
                             1613 ; 121  |
                             1614 ; 122  |    struct {
                             1615 ; 123  |        WORD MinorL      : 8;
                             1616 ; 124  |        WORD MinorH      : 8;
                             1617 ; 125  |        WORD MiddleL     : 8;
                             1618 ; 126  |        WORD MiddleH     : 8;
                             1619 ; 127  |        WORD MajorL      : 8;
                             1620 ; 128  |        WORD MajorH      : 8;
                             1621 ; 129  |        } PARTIAL_VERSION;
                             1622 ; 130  |        
                             1623 ; 131  |    DWORD   Version;        
                             1624 ; 132  |
                             1625 ; 133  |} SYSTEM_VERSION;
                             1626 ; 134  |
                             1627 ; 135  |
                             1628 ; 136  |#endif // #ifndef _DDILDL_DEFS_H
                             1629 
                             1631 
                             1632 ; 62   |
                             1633 ; 63   |///////////////////////////////////////////////////////////////////////////////
                             1634 ; 64   |// Prototypes
                             1635 ; 65   |// Note that these are prototypes for the highest level access to the DDI.
                             1636 ; 66   |//  The LDL steering mechanism converts the wLogMediaNumber & wLogDriveNumber
                             1637 ; 67   |//  parameters & passes pointers to the media/drive desctriptrs to the DDIs.
                             1638 ; 68   |///////////////////////////////////////////////////////////////////////////////
                             1639 ; 69   |RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
                             1640 ; 70   |RETCODE _reentrant MediaAllocate(WORD wLogMediaNumber,
                             1641 
                             1649 
                             1650 ; 71   |    P_MEDIA_ALLOCATION_TABLE pMediaTable);
                             1651 ; 72   |RETCODE _reentrant MediaDiscoverAllocation(WORD wLogMediaNumber);
                             1652 ; 73   |RETCODE _reentrant MediaGetMediaTable(WORD wLogMediaNumber,
                             1653 ; 74   |    P_MEDIA_ALLOCATION_TABLE *pMediaTable);
                             1654 ; 75   |RETCODE _reentrant MediaGetInfo(WORD wLogMediaNumber, LOGICAL_MEDIA_INFO Type,
                             1655 
                             1669 
                             1670 ; 76   |    void * _Y pInfo);
                             1671 ; 77   |RETCODE _reentrant MediaErase(WORD wLogMediaNumber, WORD wMagicNumber);
                             1672 ; 78   |
                             1673 ; 79   |RETCODE _reentrant DriveInit(WORD wLogDriveNumber);
                             1674 ; 80   |RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             1675 
                             1693 
                             1694 ; 81   |    void * pInfo);
                             1695 ; 82   |RETCODE _reentrant DriveSetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                             1696 ; 83   |    void * pInfo);
                             1697 ; 84   |RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             1698 
                             1702 
                             1703 ; 85   |    P_SECTOR_BUFFER pSectorData);
                             1704 ; 86   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                             1705 ; 87   |    P_SECTOR_BUFFER pSectorData);
                             1706 ; 88   |RETCODE _reentrant DriveMultiWriteSetup(WORD wLogDriveNumber,
                             1707 ; 89   |    DWORD dwStartSectorNumber, WORD wSectorCount,
                             1708 
                             1713 
                             1714 ; 90   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1715 ; 91   |RETCODE _reentrant DriveMultiWriteSector(WORD wLogDriveNumber,
                             1716 ; 92   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                             1717 ; 93   |RETCODE _reentrant DriveErase(WORD wLogDriveNumber, WORD wMagicNumber);
                             1718 ; 94   |RETCODE _reentrant DriveFlush(WORD wDriveNumber);
                             1719 ; 95   |
                             1720 ; 96   |RETCODE DdiInitAll(void);
                             1721 ; 97   |
                             1722 ; 98   |
                             1723 ; 99   |#endif // #ifndef _DDILDL_H
                             1724 
                             1726 
                             1727 ; 9    |#include "types.h"        // in \inc
                             1728 
                             1730 
                             1731 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1732 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1733 ; 3    |//
                             1734 ; 4    |// Filename: types.h
                             1735 ; 5    |// Description: Standard data types
                             1736 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1737 ; 7    |
                             1738 ; 8    |#ifndef _TYPES_H
                             1739 ; 9    |#define _TYPES_H
                             1740 ; 10   |
                             1741 ; 11   |// TODO:  move this outta here!
                             1742 ; 12   |#if !defined(NOERROR)
                             1743 ; 13   |#define NOERROR 0
                             1744 ; 14   |#define SUCCESS 0
                             1745 ; 15   |#endif 
                             1746 ; 16   |#if !defined(SUCCESS)
                             1747 ; 17   |#define SUCCESS  0
                             1748 ; 18   |#endif
                             1749 ; 19   |#if !defined(ERROR)
                             1750 ; 20   |#define ERROR   -1
                             1751 ; 21   |#endif
                             1752 ; 22   |#if !defined(FALSE)
                             1753 ; 23   |#define FALSE 0
                             1754 ; 24   |#endif
                             1755 ; 25   |#if !defined(TRUE)
                             1756 ; 26   |#define TRUE  1
                             1757 ; 27   |#endif
                             1758 ; 28   |
                             1759 ; 29   |#if !defined(NULL)
                             1760 ; 30   |#define NULL 0
                             1761 ; 31   |#endif
                             1762 ; 32   |
                             1763 ; 33   |#define MAX_INT     0x7FFFFF
                             1764 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1765 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1766 ; 36   |#define MAX_ULONG   (-1) 
                             1767 ; 37   |
                             1768 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1769 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1770 ; 40   |
                             1771 ; 41   |
                             1772 ; 42   |#define BYTE    unsigned char       // btVarName
                             1773 ; 43   |#define CHAR    signed char         // cVarName
                             1774 ; 44   |#define USHORT  unsigned short      // usVarName
                             1775 ; 45   |#define SHORT   unsigned short      // sVarName
                             1776 ; 46   |#define WORD    unsigned int        // wVarName
                             1777 ; 47   |#define INT     signed int          // iVarName
                             1778 ; 48   |#define DWORD   unsigned long       // dwVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1779 ; 49   |#define LONG    signed long         // lVarName
                             1780 ; 50   |#define BOOL    unsigned int        // bVarName
                             1781 ; 51   |#define FRACT   _fract              // frVarName
                             1782 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1783 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1784 ; 54   |#define FLOAT   float               // fVarName
                             1785 ; 55   |#define DBL     double              // dVarName
                             1786 ; 56   |#define ENUM    enum                // eVarName
                             1787 ; 57   |#define CMX     _complex            // cmxVarName
                             1788 ; 58   |typedef WORD UCS3;                   // 
                             1789 ; 59   |
                             1790 ; 60   |#define UINT16  unsigned short
                             1791 ; 61   |#define UINT8   unsigned char   
                             1792 ; 62   |#define UINT32  unsigned long
                             1793 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1794 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1795 ; 65   |#define WCHAR   UINT16
                             1796 ; 66   |
                             1797 ; 67   |//UINT128 is 16 bytes or 6 words
                             1798 ; 68   |typedef struct UINT128_3500 {   
                             1799 ; 69   |    int val[6];     
                             1800 ; 70   |} UINT128_3500;
                             1801 ; 71   |
                             1802 ; 72   |#define UINT128   UINT128_3500
                             1803 ; 73   |
                             1804 ; 74   |// Little endian word packed byte strings:   
                             1805 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1806 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1807 ; 77   |// Little endian word packed byte strings:   
                             1808 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1809 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1810 ; 80   |
                             1811 ; 81   |// Declare Memory Spaces To Use When Coding
                             1812 ; 82   |// A. Sector Buffers
                             1813 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1814 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1815 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1816 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1817 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1818 ; 88   |// B. Media DDI Memory
                             1819 ; 89   |#define MEDIA_DDI_MEM _Y
                             1820 ; 90   |
                             1821 ; 91   |
                             1822 ; 92   |
                             1823 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1824 ; 94   |// Examples of circular pointers:
                             1825 ; 95   |//    INT CIRC cpiVarName
                             1826 ; 96   |//    DWORD CIRC cpdwVarName
                             1827 ; 97   |
                             1828 ; 98   |#define RETCODE INT                 // rcVarName
                             1829 ; 99   |
                             1830 ; 100  |// generic bitfield structure
                             1831 ; 101  |struct Bitfield {
                             1832 ; 102  |    unsigned int B0  :1;
                             1833 ; 103  |    unsigned int B1  :1;
                             1834 ; 104  |    unsigned int B2  :1;
                             1835 ; 105  |    unsigned int B3  :1;
                             1836 ; 106  |    unsigned int B4  :1;
                             1837 ; 107  |    unsigned int B5  :1;
                             1838 ; 108  |    unsigned int B6  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1839 ; 109  |    unsigned int B7  :1;
                             1840 ; 110  |    unsigned int B8  :1;
                             1841 ; 111  |    unsigned int B9  :1;
                             1842 ; 112  |    unsigned int B10 :1;
                             1843 ; 113  |    unsigned int B11 :1;
                             1844 ; 114  |    unsigned int B12 :1;
                             1845 ; 115  |    unsigned int B13 :1;
                             1846 ; 116  |    unsigned int B14 :1;
                             1847 ; 117  |    unsigned int B15 :1;
                             1848 ; 118  |    unsigned int B16 :1;
                             1849 ; 119  |    unsigned int B17 :1;
                             1850 ; 120  |    unsigned int B18 :1;
                             1851 ; 121  |    unsigned int B19 :1;
                             1852 ; 122  |    unsigned int B20 :1;
                             1853 ; 123  |    unsigned int B21 :1;
                             1854 ; 124  |    unsigned int B22 :1;
                             1855 ; 125  |    unsigned int B23 :1;
                             1856 ; 126  |};
                             1857 ; 127  |
                             1858 ; 128  |union BitInt {
                             1859 ; 129  |        struct Bitfield B;
                             1860 ; 130  |        int        I;
                             1861 ; 131  |};
                             1862 ; 132  |
                             1863 ; 133  |#define MAX_MSG_LENGTH 10
                             1864 ; 134  |struct CMessage
                             1865 ; 135  |{
                             1866 ; 136  |        unsigned int m_uLength;
                             1867 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1868 ; 138  |};
                             1869 ; 139  |
                             1870 ; 140  |typedef struct {
                             1871 ; 141  |    WORD m_wLength;
                             1872 ; 142  |    WORD m_wMessage;
                             1873 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1874 ; 144  |} Message;
                             1875 ; 145  |
                             1876 ; 146  |struct MessageQueueDescriptor
                             1877 ; 147  |{
                             1878 ; 148  |        int *m_pBase;
                             1879 ; 149  |        int m_iModulo;
                             1880 ; 150  |        int m_iSize;
                             1881 ; 151  |        int *m_pHead;
                             1882 ; 152  |        int *m_pTail;
                             1883 ; 153  |};
                             1884 ; 154  |
                             1885 ; 155  |struct ModuleEntry
                             1886 ; 156  |{
                             1887 ; 157  |    int m_iSignaledEventMask;
                             1888 ; 158  |    int m_iWaitEventMask;
                             1889 ; 159  |    int m_iResourceOfCode;
                             1890 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1891 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1892 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1893 ; 163  |    int m_uTimeOutHigh;
                             1894 ; 164  |    int m_uTimeOutLow;
                             1895 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1896 ; 166  |};
                             1897 ; 167  |
                             1898 ; 168  |union WaitMask{
                             1899 ; 169  |    struct B{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1900 ; 170  |        unsigned int m_bNone     :1;
                             1901 ; 171  |        unsigned int m_bMessage  :1;
                             1902 ; 172  |        unsigned int m_bTimer    :1;
                             1903 ; 173  |        unsigned int m_bButton   :1;
                             1904 ; 174  |    } B;
                             1905 ; 175  |    int I;
                             1906 ; 176  |} ;
                             1907 ; 177  |
                             1908 ; 178  |
                             1909 ; 179  |struct Button {
                             1910 ; 180  |        WORD wButtonEvent;
                             1911 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1912 ; 182  |};
                             1913 ; 183  |
                             1914 ; 184  |struct Message {
                             1915 ; 185  |        WORD wMsgLength;
                             1916 ; 186  |        WORD wMsgCommand;
                             1917 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1918 ; 188  |};
                             1919 ; 189  |
                             1920 ; 190  |union EventTypes {
                             1921 ; 191  |        struct CMessage msg;
                             1922 ; 192  |        struct Button Button ;
                             1923 ; 193  |        struct Message Message;
                             1924 ; 194  |};
                             1925 ; 195  |
                             1926 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1927 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1928 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1929 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1930 ; 200  |
                             1931 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1932 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1933 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1934 ; 204  |
                             1935 ; 205  |#if DEBUG
                             1936 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1937 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1938 ; 208  |#else 
                             1939 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1940 ; 210  |#define DebugBuildAssert(x)    
                             1941 ; 211  |#endif
                             1942 ; 212  |
                             1943 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1944 ; 214  |//  #pragma asm
                             1945 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1946 ; 216  |//  #pragma endasm
                             1947 ; 217  |
                             1948 ; 218  |
                             1949 ; 219  |#ifdef COLOR_262K
                             1950 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1951 ; 221  |#elif defined(COLOR_65K)
                             1952 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1953 ; 223  |#else
                             1954 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1955 ; 225  |#endif
                             1956 ; 226  |    
                             1957 ; 227  |#endif // #ifndef _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1958 
                             1960 
                             1961 ; 10   |#include "persist_bits.h" // in \inc
                             1962 
                             1964 
                             1965 ; 1    |//;///////////////////////////////////////////////////////////////////////////////
                             1966 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2005
                             1967 ; 3    |//;
                             1968 ; 4    |//; Filename:    persist_bits.h
                             1969 ; 5    |//; Description: General purpose interface to Persistent Bits
                             1970 ; 6    |//;              Persistent bits are mapped to more generic bits in regsrtc.inc.
                             1971 ; 7    |//;///////////////////////////////////////////////////////////////////////////////
                             1972 ; 8    |
                             1973 ; 9    |#ifndef _PERSIST_BITS_H
                             1974 ; 10   |#define _PERSIST_BITS_H
                             1975 ; 11   |
                             1976 ; 12   |#include "regsrtc.h"
                             1977 
                             1979 
                             1980 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1981 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1982 ; 3    |// Filename: regsrtc.inc
                             1983 ; 4    |// Description: Register definitions for RTC interface
                             1984 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1985 ; 6    |// The following naming conventions are followed in this file.
                             1986 ; 7    |// All registers are named using the format...
                             1987 ; 8    |//     HW_<module>_<regname>
                             1988 ; 9    |// where <module> is the module name which can be any of the following...
                             1989 ; 10   |//     USB20
                             1990 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             1991 ; 12   |// module name includes a number starting from 0 for the first instance of
                             1992 ; 13   |// that module)
                             1993 ; 14   |// <regname> is the specific register within that module
                             1994 ; 15   |// We also define the following...
                             1995 ; 16   |//     HW_<module>_<regname>_BITPOS
                             1996 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             1997 ; 18   |//     HW_<module>_<regname>_SETMASK
                             1998 ; 19   |// which does something else, and
                             1999 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             2000 ; 21   |// which does something else.
                             2001 ; 22   |// Other rules
                             2002 ; 23   |//     All caps
                             2003 ; 24   |//     Numeric identifiers start at 0
                             2004 ; 25   |#if !(defined(regsrtcinc))
                             2005 ; 26   |#define regsrtcinc 1
                             2006 ; 27   |
                             2007 ; 28   |#include "types.h"
                             2008 
                             2010 
                             2011 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2012 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2013 ; 3    |//
                             2014 ; 4    |// Filename: types.h
                             2015 ; 5    |// Description: Standard data types
                             2016 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2017 ; 7    |
                             2018 ; 8    |#ifndef _TYPES_H
                             2019 ; 9    |#define _TYPES_H
                             2020 ; 10   |
                             2021 ; 11   |// TODO:  move this outta here!
                             2022 ; 12   |#if !defined(NOERROR)
                             2023 ; 13   |#define NOERROR 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2024 ; 14   |#define SUCCESS 0
                             2025 ; 15   |#endif 
                             2026 ; 16   |#if !defined(SUCCESS)
                             2027 ; 17   |#define SUCCESS  0
                             2028 ; 18   |#endif
                             2029 ; 19   |#if !defined(ERROR)
                             2030 ; 20   |#define ERROR   -1
                             2031 ; 21   |#endif
                             2032 ; 22   |#if !defined(FALSE)
                             2033 ; 23   |#define FALSE 0
                             2034 ; 24   |#endif
                             2035 ; 25   |#if !defined(TRUE)
                             2036 ; 26   |#define TRUE  1
                             2037 ; 27   |#endif
                             2038 ; 28   |
                             2039 ; 29   |#if !defined(NULL)
                             2040 ; 30   |#define NULL 0
                             2041 ; 31   |#endif
                             2042 ; 32   |
                             2043 ; 33   |#define MAX_INT     0x7FFFFF
                             2044 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2045 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2046 ; 36   |#define MAX_ULONG   (-1) 
                             2047 ; 37   |
                             2048 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2049 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2050 ; 40   |
                             2051 ; 41   |
                             2052 ; 42   |#define BYTE    unsigned char       // btVarName
                             2053 ; 43   |#define CHAR    signed char         // cVarName
                             2054 ; 44   |#define USHORT  unsigned short      // usVarName
                             2055 ; 45   |#define SHORT   unsigned short      // sVarName
                             2056 ; 46   |#define WORD    unsigned int        // wVarName
                             2057 ; 47   |#define INT     signed int          // iVarName
                             2058 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2059 ; 49   |#define LONG    signed long         // lVarName
                             2060 ; 50   |#define BOOL    unsigned int        // bVarName
                             2061 ; 51   |#define FRACT   _fract              // frVarName
                             2062 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2063 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2064 ; 54   |#define FLOAT   float               // fVarName
                             2065 ; 55   |#define DBL     double              // dVarName
                             2066 ; 56   |#define ENUM    enum                // eVarName
                             2067 ; 57   |#define CMX     _complex            // cmxVarName
                             2068 ; 58   |typedef WORD UCS3;                   // 
                             2069 ; 59   |
                             2070 ; 60   |#define UINT16  unsigned short
                             2071 ; 61   |#define UINT8   unsigned char   
                             2072 ; 62   |#define UINT32  unsigned long
                             2073 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2074 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2075 ; 65   |#define WCHAR   UINT16
                             2076 ; 66   |
                             2077 ; 67   |//UINT128 is 16 bytes or 6 words
                             2078 ; 68   |typedef struct UINT128_3500 {   
                             2079 ; 69   |    int val[6];     
                             2080 ; 70   |} UINT128_3500;
                             2081 ; 71   |
                             2082 ; 72   |#define UINT128   UINT128_3500
                             2083 ; 73   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2084 ; 74   |// Little endian word packed byte strings:   
                             2085 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2086 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2087 ; 77   |// Little endian word packed byte strings:   
                             2088 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2089 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2090 ; 80   |
                             2091 ; 81   |// Declare Memory Spaces To Use When Coding
                             2092 ; 82   |// A. Sector Buffers
                             2093 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2094 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2095 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2096 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2097 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2098 ; 88   |// B. Media DDI Memory
                             2099 ; 89   |#define MEDIA_DDI_MEM _Y
                             2100 ; 90   |
                             2101 ; 91   |
                             2102 ; 92   |
                             2103 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2104 ; 94   |// Examples of circular pointers:
                             2105 ; 95   |//    INT CIRC cpiVarName
                             2106 ; 96   |//    DWORD CIRC cpdwVarName
                             2107 ; 97   |
                             2108 ; 98   |#define RETCODE INT                 // rcVarName
                             2109 ; 99   |
                             2110 ; 100  |// generic bitfield structure
                             2111 ; 101  |struct Bitfield {
                             2112 ; 102  |    unsigned int B0  :1;
                             2113 ; 103  |    unsigned int B1  :1;
                             2114 ; 104  |    unsigned int B2  :1;
                             2115 ; 105  |    unsigned int B3  :1;
                             2116 ; 106  |    unsigned int B4  :1;
                             2117 ; 107  |    unsigned int B5  :1;
                             2118 ; 108  |    unsigned int B6  :1;
                             2119 ; 109  |    unsigned int B7  :1;
                             2120 ; 110  |    unsigned int B8  :1;
                             2121 ; 111  |    unsigned int B9  :1;
                             2122 ; 112  |    unsigned int B10 :1;
                             2123 ; 113  |    unsigned int B11 :1;
                             2124 ; 114  |    unsigned int B12 :1;
                             2125 ; 115  |    unsigned int B13 :1;
                             2126 ; 116  |    unsigned int B14 :1;
                             2127 ; 117  |    unsigned int B15 :1;
                             2128 ; 118  |    unsigned int B16 :1;
                             2129 ; 119  |    unsigned int B17 :1;
                             2130 ; 120  |    unsigned int B18 :1;
                             2131 ; 121  |    unsigned int B19 :1;
                             2132 ; 122  |    unsigned int B20 :1;
                             2133 ; 123  |    unsigned int B21 :1;
                             2134 ; 124  |    unsigned int B22 :1;
                             2135 ; 125  |    unsigned int B23 :1;
                             2136 ; 126  |};
                             2137 ; 127  |
                             2138 ; 128  |union BitInt {
                             2139 ; 129  |        struct Bitfield B;
                             2140 ; 130  |        int        I;
                             2141 ; 131  |};
                             2142 ; 132  |
                             2143 ; 133  |#define MAX_MSG_LENGTH 10
                             2144 ; 134  |struct CMessage
                             2145 ; 135  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2146 ; 136  |        unsigned int m_uLength;
                             2147 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2148 ; 138  |};
                             2149 ; 139  |
                             2150 ; 140  |typedef struct {
                             2151 ; 141  |    WORD m_wLength;
                             2152 ; 142  |    WORD m_wMessage;
                             2153 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2154 ; 144  |} Message;
                             2155 ; 145  |
                             2156 ; 146  |struct MessageQueueDescriptor
                             2157 ; 147  |{
                             2158 ; 148  |        int *m_pBase;
                             2159 ; 149  |        int m_iModulo;
                             2160 ; 150  |        int m_iSize;
                             2161 ; 151  |        int *m_pHead;
                             2162 ; 152  |        int *m_pTail;
                             2163 ; 153  |};
                             2164 ; 154  |
                             2165 ; 155  |struct ModuleEntry
                             2166 ; 156  |{
                             2167 ; 157  |    int m_iSignaledEventMask;
                             2168 ; 158  |    int m_iWaitEventMask;
                             2169 ; 159  |    int m_iResourceOfCode;
                             2170 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2171 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2172 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2173 ; 163  |    int m_uTimeOutHigh;
                             2174 ; 164  |    int m_uTimeOutLow;
                             2175 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2176 ; 166  |};
                             2177 ; 167  |
                             2178 ; 168  |union WaitMask{
                             2179 ; 169  |    struct B{
                             2180 ; 170  |        unsigned int m_bNone     :1;
                             2181 ; 171  |        unsigned int m_bMessage  :1;
                             2182 ; 172  |        unsigned int m_bTimer    :1;
                             2183 ; 173  |        unsigned int m_bButton   :1;
                             2184 ; 174  |    } B;
                             2185 ; 175  |    int I;
                             2186 ; 176  |} ;
                             2187 ; 177  |
                             2188 ; 178  |
                             2189 ; 179  |struct Button {
                             2190 ; 180  |        WORD wButtonEvent;
                             2191 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2192 ; 182  |};
                             2193 ; 183  |
                             2194 ; 184  |struct Message {
                             2195 ; 185  |        WORD wMsgLength;
                             2196 ; 186  |        WORD wMsgCommand;
                             2197 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2198 ; 188  |};
                             2199 ; 189  |
                             2200 ; 190  |union EventTypes {
                             2201 ; 191  |        struct CMessage msg;
                             2202 ; 192  |        struct Button Button ;
                             2203 ; 193  |        struct Message Message;
                             2204 ; 194  |};
                             2205 ; 195  |
                             2206 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2207 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2208 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2209 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2210 ; 200  |
                             2211 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2212 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2213 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2214 ; 204  |
                             2215 ; 205  |#if DEBUG
                             2216 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2217 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2218 ; 208  |#else 
                             2219 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2220 ; 210  |#define DebugBuildAssert(x)    
                             2221 ; 211  |#endif
                             2222 ; 212  |
                             2223 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2224 ; 214  |//  #pragma asm
                             2225 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2226 ; 216  |//  #pragma endasm
                             2227 ; 217  |
                             2228 ; 218  |
                             2229 ; 219  |#ifdef COLOR_262K
                             2230 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2231 ; 221  |#elif defined(COLOR_65K)
                             2232 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2233 ; 223  |#else
                             2234 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2235 ; 225  |#endif
                             2236 ; 226  |    
                             2237 ; 227  |#endif // #ifndef _TYPES_H
                             2238 
                             2240 
                             2241 ; 29   |
                             2242 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2243 ; 31   |
                             2244 ; 32   |//   RTC STMP Registers 
                             2245 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             2246 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2247 ; 35   |
                             2248 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             2249 ; 37   |
                             2250 ; 38   |
                             2251 ; 39   |
                             2252 ; 40   |
                             2253 ; 41   |
                             2254 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             2255 ; 43   |
                             2256 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             2257 ; 45   |
                             2258 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             2259 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             2260 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             2261 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             2262 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             2263 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             2264 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             2265 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2266 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             2267 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             2268 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             2269 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             2270 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             2271 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             2272 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             2273 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                             2274 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             2275 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             2276 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             2277 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             2278 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             2279 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             2280 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             2281 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             2282 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             2283 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             2284 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             2285 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             2286 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             2287 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             2288 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             2289 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             2290 ; 78   |
                             2291 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                             2292 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                             2293 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                             2294 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                             2295 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                             2296 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                             2297 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                             2298 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             2299 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             2300 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             2301 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             2302 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             2303 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                             2304 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                             2305 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                             2306 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                             2307 ; 95   |
                             2308 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             2309 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             2310 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2311 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             2312 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             2313 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             2314 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             2315 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             2316 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             2317 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                             2318 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             2319 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             2320 ; 108  |
                             2321 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             2322 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             2323 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             2324 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             2325 ; 113  |
                             2326 ; 114  |
                             2327 ; 115  |typedef union               
                             2328 ; 116  |{
                             2329 ; 117  |    struct {
                             2330 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             2331 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             2332 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             2333 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             2334 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             2335 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             2336 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             2337 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             2338 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             2339 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             2340 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             2341 ; 129  |    } B;
                             2342 ; 130  |    int I;
                             2343 ; 131  |    unsigned int U;
                             2344 ; 132  |} rtc_csr_type;
                             2345 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                             2346 ; 134  |
                             2347 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             2348 ; 136  |
                             2349 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             2350 ; 138  |
                             2351 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             2352 ; 140  |
                             2353 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             2354 ; 142  |
                             2355 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             2356 ; 144  |
                             2357 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                             2358 ; 146  |
                             2359 ; 147  |typedef union               
                             2360 ; 148  |{
                             2361 ; 149  |    struct {
                             2362 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             2363 ; 151  |    } B;
                             2364 ; 152  |    int I;
                             2365 ; 153  |    unsigned int U;
                             2366 ; 154  |} rtc_mseconds0_type;
                             2367 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2368 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             2369 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             2370 ; 158  |
                             2371 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             2372 ; 160  |
                             2373 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             2374 ; 162  |
                             2375 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             2376 ; 164  |
                             2377 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             2378 ; 166  |
                             2379 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                             2380 ; 168  |
                             2381 ; 169  |typedef union               
                             2382 ; 170  |{
                             2383 ; 171  |    struct {
                             2384 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             2385 ; 173  |    } B;
                             2386 ; 174  |    int I;
                             2387 ; 175  |    unsigned int U;
                             2388 ; 176  |} rtc_mseconds1_type;
                             2389 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                             2390 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             2391 ; 179  |
                             2392 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             2393 ; 181  |#define HW_RTC_UP_OFFSET 2
                             2394 ; 182  |
                             2395 ; 183  |
                             2396 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             2397 ; 185  |
                             2398 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             2399 ; 187  |
                             2400 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             2401 ; 189  |
                             2402 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             2403 ; 191  |
                             2404 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             2405 ; 193  |
                             2406 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             2407 ; 195  |
                             2408 ; 196  |typedef union               
                             2409 ; 197  |{
                             2410 ; 198  |    struct {
                             2411 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             2412 ; 200  |    } B;
                             2413 ; 201  |    int I;
                             2414 ; 202  |    unsigned int U;
                             2415 ; 203  |} rtc_watchdog_type;
                             2416 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                             2417 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             2418 ; 206  |
                             2419 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             2420 ; 208  |
                             2421 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             2422 ; 210  |
                             2423 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             2424 ; 212  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2425 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                             2426 ; 214  |
                             2427 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             2428 ; 216  |
                             2429 ; 217  |typedef union               
                             2430 ; 218  |{
                             2431 ; 219  |    struct {
                             2432 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             2433 ; 221  |    } B;
                             2434 ; 222  |    int I;
                             2435 ; 223  |    unsigned int U;
                             2436 ; 224  |} rtc_alarm0_type;
                             2437 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                             2438 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             2439 ; 227  |
                             2440 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             2441 ; 229  |
                             2442 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             2443 ; 231  |
                             2444 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             2445 ; 233  |
                             2446 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                             2447 ; 235  |
                             2448 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             2449 ; 237  |
                             2450 ; 238  |typedef union               
                             2451 ; 239  |{
                             2452 ; 240  |    struct {
                             2453 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             2454 ; 242  |    } B;
                             2455 ; 243  |    int I;
                             2456 ; 244  |    unsigned int U;
                             2457 ; 245  |} rtc_alarm1_type;
                             2458 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                             2459 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             2460 ; 248  |
                             2461 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             2462 ; 250  |
                             2463 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             2464 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             2465 ; 253  |
                             2466 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             2467 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             2468 ; 256  |
                             2469 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             2470 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                             2471 ; 259  |
                             2472 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             2473 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             2474 ; 262  |
                             2475 ; 263  |typedef union               
                             2476 ; 264  |{
                             2477 ; 265  |    struct {
                             2478 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             2479 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             2480 ; 268  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2481 ; 269  |    int I;
                             2482 ; 270  |    unsigned int U;
                             2483 ; 271  |} rtc_xtaldivide_type;
                             2484 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                             2485 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             2486 ; 274  |
                             2487 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             2488 ; 276  |
                             2489 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             2490 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             2491 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             2492 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             2493 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             2494 ; 282  |
                             2495 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             2496 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             2497 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             2498 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             2499 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             2500 ; 288  |
                             2501 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             2502 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             2503 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             2504 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             2505 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                             2506 ; 294  |
                             2507 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             2508 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                             2509 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                             2510 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                             2511 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             2512 ; 300  |
                             2513 ; 301  |typedef union               
                             2514 ; 302  |{
                             2515 ; 303  |   struct {
                             2516 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             2517 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             2518 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             2519 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             2520 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             2521 ; 309  |   } B;
                             2522 ; 310  |    int I;
                             2523 ; 311  |    unsigned int U;
                             2524 ; 312  |} rtc_PERSISTENT0_type;
                             2525 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                             2526 ; 314  |
                             2527 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             2528 ; 316  |
                             2529 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             2530 ; 318  |
                             2531 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             2532 ; 320  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2533 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             2534 ; 322  |
                             2535 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                             2536 ; 324  |
                             2537 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             2538 ; 326  |
                             2539 ; 327  |
                             2540 ; 328  |typedef union               
                             2541 ; 329  |{
                             2542 ; 330  |    struct {
                             2543 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             2544 ; 332  |    } B;
                             2545 ; 333  |    int I;
                             2546 ; 334  |    unsigned int U;
                             2547 ; 335  |} rtc_PERSISTENT1_type;
                             2548 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                             2549 ; 337  |
                             2550 ; 338  |
                             2551 ; 339  |#endif
                             2552 ; 340  |
                             2553 ; 341  |
                             2554 ; 342  |
                             2555 ; 343  |
                             2556 ; 344  |
                             2557 ; 345  |
                             2558 ; 346  |
                             2559 ; 347  |
                             2560 ; 348  |
                             2561 ; 349  |
                             2562 ; 350  |
                             2563 ; 351  |
                             2564 ; 352  |
                             2565 ; 353  |
                             2566 
                             2568 
                             2569 ; 13   |
                             2570 ; 14   |// Reserve bit 0 for Low Power USB, if hub can't supply 500mA, need to reboot with 100mA
                             2571 ; 15   |#define HW_RTC_LOW_POWER_USB_REG                     (HW_RTC_PERSISTENT1)
                             2572 ; 16   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_BITPOS      (0)
                             2573 ; 17   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_WIDTH       (1)
                             2574 ; 18   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_SETMASK     (((1<<HW_RTC_PERSISTANT1_LOW_POWER_US
                                  B_WIDTH)-1)<<HW_RTC_PERSISTANT1_LOW_POWER_USB_BITPOS) 
                             2575 ; 19   |#define HW_RTC_PERSISTANT1_LOW_POWER_USB_CLRMASK     (~(WORD)HW_RTC_PERSISTANT1_LOW_POWER_
                                  USB_SETMASK)
                             2576 ; 20   |
                             2577 ; 21   |// Reserve bit 1 for Skip Checkdisk.  If disk hasn't changed, don't run checkdisk.
                             2578 ; 22   |#define HW_RTC_SKIP_CHECKDISK_REG                    (HW_RTC_PERSISTENT1)
                             2579 ; 23   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_BITPOS     (1)
                             2580 ; 24   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_WIDTH      (1)
                             2581 ; 25   |#define HW_RTC_PERSISTENT1_SKIP_CHECKDISK_SETMASK    (((1<<HW_RTC_PERSISTANT1_SKIP_CHECKDI
                                  SK_WIDTH)-1)<<HW_RTC_PERSISTANT1_SKIP_CHECKDISK_BITPOS) 
                             2582 ; 26   |#define HW_RTC_PERSISTANT1_SKIP_CHECKDISK_CLRMASK    (~(WORD)HW_RTC_PERSISTANT1_SKIP_CHECK
                                  DISK_SETMASK)
                             2583 ; 27   |
                             2584 ; 28   |// Reserve bit 2 for Skip building music library internal flash.  If disk hasn't changed, 
                                  don't run building.
                             2585 ; 29   |#define HW_RTC_SKIP_REBUILD_REG                  (HW_RTC_PERSISTENT1)
                             2586 ; 30   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_BITPOS   (2)
                             2587 ; 31   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_WIDTH    (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2588 ; 32   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_SETMASK  (((1<<HW_RTC_PERSISTENT1_SKIP_REBUILD_WID
                                  TH)-1)<<HW_RTC_PERSISTENT1_SKIP_REBUILD_BITPOS) 
                             2589 ; 33   |#define HW_RTC_PERSISTENT1_SKIP_REBUILD_CLRMASK  (~(WORD)HW_RTC_PERSISTENT1_SKIP_REBUILD_S
                                  ETMASK)
                             2590 ; 34   |
                             2591 ; 35   |// Reserve bit 3 for 2nd try Low Power USB, if hub can't supply 500mA (try 2 times)
                             2592 ; 36   |// need to reboot with 100mA
                             2593 ; 37   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_BITPOS     (3)
                             2594 ; 38   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_WIDTH      (1)
                             2595 ; 39   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_SETMASK    (((1<<HW_RTC_PERSISTANT1_LOW_POWER2_U
                                  SB_WIDTH)-1)<<HW_RTC_PERSISTANT1_LOW_POWER2_USB_BITPOS) 
                             2596 ; 40   |#define HW_RTC_PERSISTANT1_LOW_POWER2_USB_CLRMASK    (~(WORD)HW_RTC_PERSISTANT1_LOW_POWER2
                                  _USB_SETMASK)
                             2597 ; 41   |
                             2598 ; 42   |// Reserve bit 5 for MTP database clean flag. 1 => database "clean", 0 => database "dirty"
                                  
                             2599 ; 43   |#define HW_RTC_MTP_DB_CLEAN_FLAG_REG                 (HW_RTC_PERSISTENT1)
                             2600 ; 44   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_BITPOS  (5)
                             2601 ; 45   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_WIDTH   (1)
                             2602 ; 46   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1_MTP_DB_CLEAN
                                  _FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_BITPOS) 
                             2603 ; 47   |#define HW_RTC_PERSISTANT1_MTP_DB_CLEAN_FLAG_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_MTP_DB_CLE
                                  AN_FLAG_SETMASK)
                             2604 ; 48   |
                             2605 ; 49   |// Reserve bit 6 for when to use backup resource.bin.  1 => require resource.bat refresh, 
                                  0 => no refresh reqd.
                             2606 ; 50   |#define HW_RTC_RESOURCE_BIN_REFRESH_FLAG_REG              (HW_RTC_PERSISTENT1)
                             2607 ; 51   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_BITPOS  (6)
                             2608 ; 52   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_WIDTH   (1)
                             2609 ; 53   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1_RESO
                                  URCE_BIN_REFRESH_FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_FLAG_BITPOS) 
                             2610 ; 54   |#define HW_RTC_PERSISTANT1_RESOURCE_BIN_REFRESH_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_RESOURC
                                  E_BIN_REFRESH_FLAG_SETMASK)
                             2611 ; 55   |
                             2612 ; 56   |// Reserve bit 7 for when to use backup resource.bin.  1 => require resource.bat refresh, 
                                  0 => no refresh reqd.
                             2613 ; 57   |#define HW_RTC_HOST_RESOURCE_BIN_REFRESH_FLAG_REG              (HW_RTC_PERSISTENT1)
                             2614 ; 58   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_BITPOS  (7)
                             2615 ; 59   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_WIDTH   (1)
                             2616 ; 60   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_SETMASK (((1<<HW_RTC_PERSISTANT1
                                  _HOST_RESOURCE_BIN_REFRESH_FLAG_WIDTH)-1)<<HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_FLAG_BITPO
                                  S) 
                             2617 ; 61   |#define HW_RTC_PERSISTANT1_HOST_RESOURCE_BIN_REFRESH_CLRMASK (~(WORD)HW_RTC_PERSISTANT1_HO
                                  ST_RESOURCE_BIN_REFRESH_FLAG_SETMASK)
                             2618 ; 62   |
                             2619 ; 63   |// Want to wait 2000 clocks before failing.
                             2620 ; 64   |#define PERSIST_WAIT_TIME                            2000
                             2621 ; 65   |
                             2622 ; 66   |void _reentrant StickyBitInit(void);
                             2623 ; 67   |RETCODE _reentrant ReadStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition, BOOL * b
                                  Result);
                             2624 ; 68   |RETCODE _reentrant SetStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition);
                             2625 ; 69   |RETCODE _reentrant ClearStickyBit(volatile _X WORD * pSBPointer, WORD BitPosition);
                             2626 ; 70   |void _reentrant SetBitResourceRefresh(INT bBitValue); // should this line be commented out
                                  ? I think the func def was commented out since unused.
                             2627 ; 71   |INT _reentrant GetBitResourceRefresh(void);           // "
                             2628 ; 72   |void _reentrant StickyBitForceUpdate(void);
                             2629 ; 73   |
                             2630 ; 74   |#endif // _PERSIST_BITS_H
                             2631 
                             2633 
                             2634 ; 11   |#include "RestoreDriveFromBackup.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2635 
                             2637 
                             2638 ; 1    |// filename restoredrivefrombackup.h
                             2639 ; 2    |#define FIRST_SYSTEM_DRIVE_TAG      (0x02)
                             2640 ; 3    |#define SECOND_SYSTEM_DRIVE_TAG     (0x12)
                             2641 ; 4    |#define MASTER_SYSTEM_DRIVE_TAG     (0x22) //????
                             2642 ; 5    |
                             2643 ; 6    |#ifdef MMC
                             2644 ; 7    |#define FIRST_SYSTEM_DRIVE_NUMBER   (6)
                             2645 ; 8    |#define SECOND_SYSTEM_DRIVE_NUMBER  (7)
                             2646 ; 9    |#define MASTER_SYSTEM_DRIVE_NUMBER  (8) //????
                             2647 ; 10   |#else
                             2648 ; 11   |#define FIRST_SYSTEM_DRIVE_NUMBER   (5)
                             2649 ; 12   |#define SECOND_SYSTEM_DRIVE_NUMBER  (6)
                             2650 ; 13   |#define MASTER_SYSTEM_DRIVE_NUMBER  (7) //????
                             2651 ; 14   |#endif
                             2652 ; 15   |
                             2653 ; 16   |extern WORD g_wPlayerResourceTag;
                             2654 ; 17   |extern WORD wResourceDrive;
                             2655 ; 18   |extern WORD wResourceTag;
                             2656 ; 19   |extern BOOL g_bResourceGetDirty;
                             2657 ; 20   |extern BOOL g_bEraseComplete;
                             2658 ; 21   |
                             2659 ; 22   |_reentrant WORD RefreshSystemDriveErrorBlock(void);
                             2660 ; 23   |_reentrant WORD SequentialRefreshSystemDriveErrorBlock(void);
                             2661 ; 24   |_reentrant WORD EraseBadSystemBlock(void);
                             2662 ; 25   |_reentrant WORD RefreshBadBlockSector(void);
                             2663 ; 26   |_reentrant WORD IsSystemDriveDirty(void);
                             2664 ; 27   |_reentrant WORD MarkSystemDriveDirty(void);
                             2665 ; 28   |_reentrant WORD MarkSystemDriveClean(void);
                             2666 ; 29   |_reentrant WORD ToggleSystemDrive(void);
                             2667 ; 30   |_reentrant void RebootNow(void);
                             2668 ; 31   |
                             2669 ; 32   |_reentrant int RestoreDriveFromBackup(int iDestinationDriveNum, int iSourceDriveNum); // l
                                  ogical
                             2670 ; 33   |_reentrant int GetLogicalDriveNumForActiveResourceBin(void);
                             2671 ; 34   |_reentrant int EraseSystemDriveBlock(void);
                             2672 ; 35   |_reentrant int PartialRestoreDriveFromBackup(BOOL bSequentialReplace); // logical
                             2673 ; 36   |
                             2674 ; 37   |
                             2675 ; 38   |
                             2676 
                             2678 
                             2679 ; 12   |
                             2680 ; 13   |extern WORD g_wPlayerResourceTag;
                             2681 ; 14   |
                             2682 ; 15   |//------------------------------------------------------------------------------
                             2683 ; 16   |// Inputs:      int destination drive to erase and restore. int source drive read (logical
                                   drive nums)
                             2684 ; 17   |//
                             2685 ; 18   |//------------------------------------------------------------------------------
                             2686 ; 19   |// Description: Changes player resource tag global if demanded by refresh resource.bin per
                                  sistant bit. 
                             2687 ; 20   |// Inputs: none
                             2688 ; 21   |// Outputs: Returns value of resource tag that is commanded by sticky bit. 
                             2689 ; 22   |// Notes:   This also sets value of static bRefreshResourceDriveStickyBitReadResult
                             2690 ; 23   |//          So this function must be called before calling RestoreDriveFromBackup()
                             2691 ; 24   |//
                             2692 ; 25   |_reentrant WORD SysGetDesiredResourceTag(void)
                             2693 ; 26   |{
                             2694 
P:0000                       2695         org     p,".ptextgetresourcetag":
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2700 FSysGetDesiredResourceTag:
P:0000 055F7C         2    2 2701         movec   ssh,y:(r7)+
                             2704 
                             2705 ; 27   |    if (IsSystemDriveDirty() == TRUE)
                             2706 
P:0001 0BF080 rrrrrr  6    8 2708         jsr     FIsSystemDriveDirty
P:0003 46F400 000001  3   11 2709         move    #>1,y0
P:0005 2A0000         2   13 2710         move    #0,a2
P:0006 200055         2   15 2711         cmp     y0,a
P:0007 0AF0A2 rrrrrr  6   21 2712         jne     L3
                             2713 
                             2714 ; 28   |    {
                             2715 ; 29   |        g_wPlayerResourceTag = MASTER_SYSTEM_DRIVE_TAG;
                             2716 
P:0009 292200         2   23 2718         move    #34,b0
P:000A 597000 rrrrrr  3   26 2719         move    b0,y:Fg_wPlayerResourceTag
                             2720 
                             2721 ; 30   |    }
                             2722 
P:000C 0AF080 rrrrrr  6   32 2724         jmp     L4
                             2725 
                             2726 ; 31   |    else
                             2727 ; 32   |    {
                             2728 ; 33   |        g_wPlayerResourceTag = FIRST_SYSTEM_DRIVE_TAG;
                             2729 
P:000E 280200         2   34 2731 L3:     move    #2,a0
P:000F 587000 rrrrrr  3   37 2732         move    a0,y:Fg_wPlayerResourceTag
                             2733 
                             2734 ; 34   |    }
                             2735 ; 35   |
                             2736 ; 36   |    return g_wPlayerResourceTag; 
                             2737 
P:0011 5EF000 rrrrrr  3   40 2739 L4:     move    y:Fg_wPlayerResourceTag,a
                             2740 
                             2741 ; 37   |}
                             2742 
P:0013 05FF7C         4   44 2744         movec   y:-(r7),ssh
P:0014 000000         2   46 2747         nop
P:0015 00000C         4   50 2748         rts
                             2750 
                             2751 ; 38   |
                             2752 ; 39   |WORD GetFirstSystemDriveNumber()
                             2753 ; 40   |{
                             2754 
                             2759 FGetFirstSystemDriveNumber:
                             2760 
                             2761 ; 41   |    // Get drive number of first copy of resource.bin
                             2762 ; 42   |    return FIRST_SYSTEM_DRIVE_NUMBER;
                             2763 
P:0016 56F400 000006  3   53 2765         move    #>6,a
                             2766 
                             2767 ; 43   |}
                             2768 
P:0018 00000C         4   57 2770         rts
                             2772 
                             2773 ; 44   |
                             2774 ; 45   |WORD GetSecondSystemDriveNumber()
                             2775 ; 46   |{
                             2776 
                             2781 FGetSecondSystemDriveNumber:
                             2782 
                             2783 ; 47   |    // Get drive number of second copy of resource.bin
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2784 ; 48   |    return SECOND_SYSTEM_DRIVE_NUMBER;
                             2785 
P:0019 56F400 000007  3   60 2787         move    #>7,a
                             2788 
                             2789 ; 49   |}
                             2790 
P:001B 00000C         4   64 2792         rts
                             2794 
                             2795 ; 50   |
                             2796 ; 51   |WORD GetMasterSystemDriveNumber()
                             2797 ; 52   |{
                             2798 
                             2803 FGetMasterSystemDriveNumber:
                             2804 
                             2805 ; 53   |    // Get drive number of third copy of resource.bin
                             2806 ; 54   |    return MASTER_SYSTEM_DRIVE_NUMBER;
                             2807 
P:001C 56F400 000008  3   67 2809         move    #>8,a
                             2810 
                             2811 ; 55   |}
                             2812 
P:001E 00000C         4   71 2814         rts
                             2820 
                             2821         extern  FIsSystemDriveDirty, y:Fg_wPlayerResourceTag
                             2822 
                             2823         global  FGetFirstSystemDriveNumber, FGetMasterSystemDriveNumber
                             2824         global  FGetSecondSystemDriveNumber, FSysGetDesiredResourceTag
                             2825 
                             2826         local   L3, L4
                             2827 
                             2828         calls   "SysGetDesiredResourceTag", "IsSystemDriveDirty"
                             2829 
