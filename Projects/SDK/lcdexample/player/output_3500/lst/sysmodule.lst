TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\system\exec\sysmodule.asm
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000-2003
                                3 ;
                                4 ; Executive routines to process the module table
                                5 ;******************************************************************************
                                7         section SYSFUN_Module
                                9         opt     mex
                               10         opt     op
                               12 ;*******************************************************************************
                               13 ;  Include files
                               14 ;*******************************************************************************
                               23         list
                               25         page    132,60,0,0,0
                               28 ;*******************************************************************************
                               29 ;  Extern definitions
                               30 ;*******************************************************************************
                               46 ;*******************************************************************************
                               47 ;  Extern references
                               48 ;*******************************************************************************
                               50     include "systime.xref"
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; STMP System Time
                                5 ;******************************************************************************
                                8 SYSTIME_XREF equ 1                                                                                            
                                9   ;Functions
                               23   
                               51     include "const.xref"
                                1 ;******************************************************************************
                                2 ; Copyright(C) SigmaTel, Inc. 2000
                                3 ;
                                4 ; ST Mp3 const.EXTERN 
                                5 ;******************************************************************************
                                7    DEFINE   const_xref  '1'
                               42     ; Parthus compatability
                               58     
                               68 ;*******************************************************************************
                               69 ;   Equates
                               70 ;*******************************************************************************
                               72 ; Word offsets within each ModuleTableEntry in the ModuleTable
                               73 Module_EventSignal      equ     0
                               74 Module_EventWait        equ     1
                               75 Module_ResourceNumber   equ     2
                               76 Module_QueueDescriptor  equ     3
                               77 Module_ProcessEvent     equ     4
                               78 Module_Init             equ     5
                               79 Module_Timer_High       equ     6
                               80 Module_Timer_Low        equ     7
                               81 Module_Background       equ     8
                               84 ;*******************************************************************************
                               85 ;  Macros
                               86 ;*******************************************************************************
                               88     include "sysmacro.asm"
                                1 ;///////////////////////////////////////////////////////////////////////////////
                                2 ;  Copyright(C) SigmaTel, Inc. 2000-2001
                                3 ;
                                4 ;  File        : sysmacro.asm
                                5 ;  Description : Misc System Macros
                                6 ;///////////////////////////////////////////////////////////////////////////////
                                8     define   SysMacro_asm    '1'
                               10     page    255,255,0
                               12 ;///////////////////////////////////////////////////////////////////////////////
                               13 ;   Macros
                               14 ;///////////////////////////////////////////////////////////////////////////////
                               16 ;///////////////////////////////////////////////////////////////////////////////
                               17 ;   Includes
                               18 ;///////////////////////////////////////////////////////////////////////////////
                               20 ;///////////////////////////////////////////////////////////////////////////////
                               21 ;   External Definitions
                               22 ;///////////////////////////////////////////////////////////////////////////////
                               24 ;///////////////////////////////////////////////////////////////////////////////
                               25 ;   External References
                               26 ;///////////////////////////////////////////////////////////////////////////////
                               28 ;///////////////////////////////////////////////////////////////////////////////
                               29 ;   Equates
                               30 ;///////////////////////////////////////////////////////////////////////////////
                               31         
                               32 ;///////////////////////////////////////////////////////////////////////////////
                               33 ;   X Memory
                               34 ;///////////////////////////////////////////////////////////////////////////////
                               35         
                               36 ;///////////////////////////////////////////////////////////////////////////////
                               37 ;   Y Memory
                               38 ;///////////////////////////////////////////////////////////////////////////////
                               39         
                               40 ;///////////////////////////////////////////////////////////////////////////////
                               41 ;   P Memory
                               42 ;///////////////////////////////////////////////////////////////////////////////
                               44 ;///////////////////////////////////////////////////////////////////////////////
                               45 ;
                               46 ;>  Name:           push
                               47 ;
                               48 ;   Type:           Macro
                               49 ;
                               50 ;   Description:    Push a 24-bit value onto the data stack
                               51 ;
                               52 ;   Inputs:         Usage : push reg
                               53 ;                   reg = any core register that is 24-bits or less
                               54 ;
                               55 ;   Outputs:        none
                               56 ;                   
                               57 ;   Notes:          For every push, there must be a corresponding pop to keep
                               58 ;                   data stack balanced.
                               59 ;
                               60 ;   SeeAlso:        pop
                               61 ;<
                               62 ;///////////////////////////////////////////////////////////////////////////////
                               63 push    macro   reg
                               64     move    reg,y:(r7)+
                               65     endm
                               67 ;///////////////////////////////////////////////////////////////////////////////
                               68 ;
                               69 ;>  Name:           pop
                               70 ;
                               71 ;   Type:           Macro
                               72 ;
                               73 ;   Description:    Pop a 24-bit value from the data stack
                               74 ;
                               75 ;   Inputs:         Usage : pop reg
                               76 ;                   reg = any core register that is 24-bits or less
                               77 ;
                               78 ;   Outputs:        none
                               79 ;                   
                               80 ;   Notes:          For every pop, there must be a corresponding push to keep
                               81 ;                   data stack balanced.
                               82 ;
                               83 ;   SeeAlso:        push
                               84 ;<
                               85 ;///////////////////////////////////////////////////////////////////////////////
                               86 pop     macro   reg
                               87     move    y:-(r7),reg
                               88     endm
                               90 ;///////////////////////////////////////////////////////////////////////////////
                               91 ;
                               92 ;>  Name:           CallFunclet
                               93 ;
                               94 ;   Type:           Macro
                               95 ;
                               96 ;   Description:    Loads and Executes the funclet defined by the Resource argument
                               97 ;
                               98 ;   Inputs:         Resource = Resource number for the specific funclet.
                               99 ;
                              100 ;   Outputs:        none
                              101 ;                   
                              102 ;   Notes:          Jumps to SysCallFunclet.   TODO: change to a label instead of hard addresses like $80
                              103 ;<
                              104 ;///////////////////////////////////////////////////////////////////////////////
                              105 ; if ((@DEF('STMP_BUILD_PLAYER'))||(@DEF('PLAYER'))) ; sdk3.110 and before did this. 3.120 add short jump for mtp.
                              107 CallFunclet   macro Resource
                              108     jsr       $80
                              109     DC       Resource  ; 1 word
                              110  endm    
                              111 CallFunclet2   macro Resource
                              112  if ((@DEF('STMP_BUILD_PLAYER'))||(@DEF('PLAYER')))
                              113     jsr       $82
                              114     DC       Resource  ; 1 word
                              115  else ;;; MTP
                              116     jsr       $80
                              117     DC       Resource  ; 1 word
                              118  endif
                              119     endm    
                              130 ;///////////////////////////////////////////////////////////////////////////////
                              131 ;
                              132 ;>  Name:           error
                              133 ;
                              134 ;   Type:           Macro
                              135 ;
                              136 ;   Description:    Fatal system error macro.  This macro works in conjunction
                              137 ;                   with contents of syserror.asm.  Depending upon the build
                              138 ;                   arguments DEBUG, BETA, or RETAIL, this will either produce
                              139 ;                   a "debug" statement or a JMP to an error handling reset routine.
                              140 ;
                              141 ;   Inputs:         none 
                              142 ;   Outputs:        none                   
                              143 ;   Notes:          Can use debugOrContinue or ccerror for conditional halts. 
                              144 ;                   SystemHalt() C macro uses this asm macro.
                              145 ;<
                              146 ;///////////////////////////////////////////////////////////////////////////////
                              147 error   macro
                              148   if (@DEF('BETA')||@DEF('RETAIL')||@DEF('TRACEBUFFER'))
                              149     jmp $000C ;Use vector at P:000C to shutdown & restart the STMP device. 
                              150               ; Jmp to addr in low 12 bits is 1 word smaller than jsr. (changed apr 6 '05)
                              151   else
                              152     debug
                              153   endif ; if ( @DEF('BETA')||@DEF('RETAIL') 
                              154     endm
                              156 ;///////////////////////////////////////////////////////////////////////////////
                              157 ;
                              158 ;   Name:           debugOrContinue
                              159 ;   Type:           Macro
                              160 ;   Description:    System error macro. Depending upon the build
                              161 ;                   arguments DEBUG, BETA, or RETAIL, this will either produce
                              162 ;                   a "debug" statement or nothing to allow continued execution.
                              163 ;   Inputs:         none 
                              164 ;   Outputs:        none
                              165 ;   Notes:          none
                              166 ;
                              167 ;///////////////////////////////////////////////////////////////////////////////
                              168 debugOrContinue   macro
                              169   if (@DEF('DEBUG'))
                              170     debug
                              171     nop
                              172   endif 
                              173     endm
                              175 ;///////////////////////////////////////////////////////////////////////////////
                              176 ;
                              177 ;   Name:           debugOrShutdown
                              178 ;   Type:           Macro
                              179 ;   Description:    System error macro. Depending upon the build
                              180 ;                   arguments DEBUG, BETA, or RETAIL, this will either produce
                              181 ;                   a "debug" statement or Prevent RETAIL build from hanging on 
                              182 ;                   debug line by attempting graceful shutdown.
                              183 ;   Inputs:         none 
                              184 ;   Outputs:        none
                              185 ;   Notes:          See SystemShutdownFinal in SystemAPI.asm
                              186 ;
                              187 ;///////////////////////////////////////////////////////////////////////////////
                              188 ;debugOrShutdown   macro
                              189 ;  if (@DEF('DEBUG'))
                              190 ;    debug
                              191 ;    nop
                              192 ;  else  ; ( @DEF('BETA')||@DEF('RETAIL')
                              193 ;    jmp SystemShutdownFinal                ; reference not resolved
                              194 ;  endif 
                              195 ;    endm
                              198 ;///////////////////////////////////////////////////////////////////////////////
                              199 ;> Name:            ccerror
                              200 ;
                              201 ;  Type:            Macro
                              202 ;  Description:     Conditional fatal system error macro.  If the indicated
                              203 ;                   condition code ("CC") is met, signal the error.  (See "error",
                              204 ;                   above for more info on error hanlding.)
                              205 ;                   The allowed condition condition codes are
                              206 ;
                              207 ;                       cc, cs, ec, eq, es, ge, gt, lc, le, ls, lt, 
                              208 ;                       mi, ne, nr, pl, nn 
                              209 ;
                              210 ;  Inputs:          condition
                              211 ;
                              212 ;  Outputs:         none
                              213 ;
                              214 ;  Notes:           The normal way of using these macros is shown below:
                              215 ;
                              216 ;                       <some operation which sets/clears a condition code>
                              217 ;                       ccerror cs             ; Error if carry is set
                              218 ;                       <normal continuation>
                              219 ;
                              220 ;                   This can replace old code of the form:
                              221 ;
                              222 ;                       <some operation which sets/clears a condition code>
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                              223 ;                       jcc     _OK
                              224 ;                       error
                              225 ;                   _OK
                              226 ;                       <normal continuation>
                              227 ;
                              228 ;                   Depending on the BETA/RETAIL flags, the first operation can
                              229 ;                   save one or two words of program memory over the second method.
                              230 ;<
                              231 ;///////////////////////////////////////////////////////////////////////////////
                              232 ccerror macro   condition
                              233   if (@DEF('BETA')||@DEF('RETAIL'))
                              234     js\condition $000C
                              235   else
                              236     debug\condition
                              237   endif ; if ( @DEF('BETA')||@DEF('RETAIL') 
                              238     endm
                              240 ;///////////////////////////////////////////////////////////////////////////////
                              241 ;> Name: GetLogicalDriveNumForResourceBin
                              242 ;
                              243 ; Description: Used for our RestoreDriveFromBackup routine.
                              244 ; INPUT: 1 for primary resource.bin
                              245 ;        2 for secondary resource.bin
                              246 ;        3 for master redundant resource.bin that is used to restore 1 and 2 at power up if needed.
                              247 ;
                              248 ; NOTE: If the drive arrays is modified in ddiproject.c then the values below will
                              249 ;       have to change. Inspect that file to verify these values are correct.
                              250 ;
                              251 ;<
                              252 ;///////////////////////////////////////////////////////////////////////////////
                              253 GetLogicalDriveNumForResourceBin macro drive
                              254     if (drive==0)
                              255     fail    "drive=0 invalid value used in GetLogicalDriveNumForresourceBin macro"
                              256     endif
                              258     if (drive>3)
                              259     fail    "drive>3 invalid value used in GetLogicalDriveNumForresourceBin macro"
                              260     endif
                              262     if (@DEF('MMC'))
                              264         if drive==1
                              265              move   #>6,a
                              266         endif
                              267     
                              268         if drive==2
                              269              move   #>7,a
                              270         endif
                              272         if drive==3
                              273              move   #>8,a
                              274         endif
                              275     else
                              277         if drive==1
                              278              move   #>5,a
                              279         endif
                              280     
                              281         if drive==2
                              282              move   #>6,a
                              283         endif
                              285         if drive==3
                              286              move   #>7,a
                              287         endif
                              288     endif
                              289  endm
                              291 ;///////////////////////////////////////////////////////////////////////////////
                              292 ;
                              293 ;>  Name:           SaveRange
                              294 ;
                              295 ;   Type:           Macro
                              296 ;
                              297 ;   Description:    This is a supporting macro for saving memory locations to
                              298 ;                   the settings.dat file at shutdown, for later restoration
                              299 ;                   at system startup.
                              300 ;
                              301 ;   Inputs:         Usage : SaveRange Label,Length
                              302 ;                        
                              303 ;   Outputs:        
                              304 ;                   
                              305 ;   Notes:          This macro automatically determines the memory space of the
                              306 ;                   label specified.  It then constructs a command that is 
                              307 ;                   written to settings.dat by SysSaveSettings, and is
                              308 ;                   understood by the SysLoadSettings function to restore the
                              309 ;                   memory locations.  For the SaveRange macro to be recognized 
                              310 ;                   by the SysSaveSettings function.  The section name where the
                              311 ;                   SaveRange command is used, must be included in the 
                              312 ;                   Settings_Y cluster in the stmp3400.dsc file.  The makefile
                              313 ;                   will then extract these commands as a resource to be used
                              314 ;                   by SysSaveSettings and SysLoadSettings.
                              315 ;
                              316 ;   SeeAlso:        SysLoadSettings, SysSaveSettings, SaveRangeX, 
                              317 ;                   SaveRangeY, SaveRangeP, SaveRangeL
                              318 ;
                              319 ;<
                              320 ;///////////////////////////////////////////////////////////////////////////////
                              321 SaveRange macro Label,Length
                              322     if @MSP(Label)==0  ;None
                              323     fail    "Invalid label used in SaveRange macro"
                              324     dc      Label
                              325     endif ; if @MSP(Label)==0
                              327     if @MSP(Label)==1  ;X
                              328     dc      $800000|Label
                              329     endif ; if @MSP(Label)==1
                              331     if @MSP(Label)==2  ;Y
                              332     dc      $400000|Label
                              333     endif ; if @MSP(Label)==2
                              335     if @MSP(Label)==3  ;L
                              336     dc      $200000|Label
                              337     endif ; if @MSP(Label)==3
                              339     if @MSP(Label)==4  ;P
                              340     dc      $100000|Label
                              341     endif ; if @MSP(Label)==4
                              343     if @MSP(Label)==5  ;E
                              344     fail    "Invalid label used in SaveRange macro"
                              345     dc      Label
                              346     endif ; if @MSP(Label)==5
                              348     dc      Length*3
                              349     endm
                              351 ;///////////////////////////////////////////////////////////////////////////////
                              352 ;
                              353 ;>  Name:           SaveRangeY
                              354 ;
                              355 ;   Type:           Macro
                              356 ;
                              357 ;   Description:    This is a supporting macro for saving memory locations to
                              358 ;                   the settings.dat file at shutdown, for later restoration
                              359 ;                   at system startup.
                              360 ;
                              361 ;   Inputs:         Usage : SaveRangeY Label,Length
                              362 ;                        
                              363 ;   Outputs:        
                              364 ;                   
                              365 ;   Notes:          Refer to the SaveRange macro for more details.  This macro
                              366 ;                   can take a numeric address, or a label, but will only
                              367 ;                   create a save memory command that indicates Y memory
                              368 ;                   to be saved.
                              369 ;
                              370 ;   SeeAlso:        SysLoadSettings, SysSaveSettings, SaveRange, 
                              371 ;                   SaveRangeX, SaveRangeP, SaveRangeL
                              372 ;
                              373 ;<
                              374 ;///////////////////////////////////////////////////////////////////////////////
                              375 SaveRangeY macro Address,Length
                              376     dc      $400000|Address
                              377     dc      Length*3
                              378     endm
                              380 ;///////////////////////////////////////////////////////////////////////////////
                              381 ;
                              382 ;>  Name:           SaveRangeX
                              383 ;
                              384 ;   Type:           Macro
                              385 ;
                              386 ;   Description:    This is a supporting macro for saving memory locations to
                              387 ;                   the settings.dat file at shutdown, for later restoration
                              388 ;                   at system startup.
                              389 ;
                              390 ;   Inputs:         Usage : SaveRangeX Label,Length
                              391 ;                        
                              392 ;   Outputs:        
                              393 ;                   
                              394 ;   Notes:          Refer to the SaveRange macro for more details.  This macro
                              395 ;                   can take a numeric address, or a label, but will only
                              396 ;                   create a save memory command that indicates X memory
                              397 ;                   to be saved.
                              398 ;
                              399 ;   See Also:       SysLoadSettings, SysSaveSettings, SaveRange, 
                              400 ;                   SaveRangeY, SaveRangeP, SaveRangeL
                              401 ;
                              402 ;<
                              403 ;///////////////////////////////////////////////////////////////////////////////
                              404 SaveRangeX macro Address,Length
                              405     dc      $800000|Address
                              406     dc      Length*3
                              407     endm
                              409 ;///////////////////////////////////////////////////////////////////////////////
                              410 ;
                              411 ;>  Name:           SaveRangeL
                              412 ;
                              413 ;   Type:           Macro
                              414 ;
                              415 ;   Description:    This is a supporting macro for saving memory locations to
                              416 ;                   the settings.dat file at shutdown, for later restoration
                              417 ;                   at system startup.
                              418 ;
                              419 ;   Inputs:         Usage : SaveRangeL Label,Length
                              420 ;                        
                              421 ;   Outputs:        
                              422 ;                   
                              423 ;   Notes:          Refer to the SaveRange macro for more details.  This macro
                              424 ;                   can take a numeric address, or a label, but will only
                              425 ;                   create a save memory command that indicates L memory
                              426 ;                   to be saved.
                              427 ;
                              428 ;   SeeAlso:        SysLoadSettings, SysSaveSettings, SaveRange, 
                              429 ;                   SaveRangeX, SaveRangeY, SaveRangeP
                              430 ;
                              431 ;<
                              432 ;///////////////////////////////////////////////////////////////////////////////
                              433 SaveRangeL macro Address,Length
                              434     dc      $200000|Address
                              435     dc      Length*3
                              436     endm
                              438 ;///////////////////////////////////////////////////////////////////////////////
                              439 ;
                              440 ;>  Name:           SaveRangeP
                              441 ;
                              442 ;   Type:           Macro
                              443 ;
                              444 ;   Description:    This is a supporting macro for saving memory locations to
                              445 ;                   the settings.dat file at shutdown, for later restoration
                              446 ;                   at system startup.
                              447 ;
                              448 ;   Inputs:         Usage : SaveRangeP Label,Length
                              449 ;                        
                              450 ;   Outputs:        
                              451 ;                   
                              452 ;   Notes:          Refer to the SaveRange macro for more details.  This macro
                              453 ;                   can take a numeric address, or a label, but will only
                              454 ;                   create a save memory command that indicates P memory
                              455 ;                   to be saved.
                              456 ;
                              457 ;   SeeAlso:        SysLoadSettings, SysSaveSettings, SaveRange, 
                              458 ;                   SaveRangeX, SaveRangeY, SaveRangeL
                              459 ;
                              460 ;<
                              461 ;///////////////////////////////////////////////////////////////////////////////
                              462 SaveRangeP macro Address,Length
                              463     dc      $100000|Address
                              464     dc      Length*3
                              465     endm
                              468 ;///////////////////////////////////////////////////////////////////////////////
                              469 ;       BUTTON MACROS
                              470 ;///////////////////////////////////////////////////////////////////////////////
                              472 ;///////////////////////////////////////////////////////////////////////////////
                              473 ;
                              474 ;>  Name:           DEFINE_ROW
                              475 ;
                              476 ;   Type:           Macro
                              477 ;
                              478 ;   Description:    This is a supporting macro for defining the GPIO setup for 
                              479 ;                   the scan matrix.
                              480 ;
                              481 ;   Inputs:         Usage : DEFINE_ROW RowNumber,WhichGPIORegister,WhichBit
                              482 ;                        
                              483 ;   Outputs:        Sets up equates required for data structures in button.asm
                              484 ;                   
                              485 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              486 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              487 ;                   completely define the players button scan matrix, non scan buttons, and
                              488 ;                   how these buttons map to events as recieved by the menus.  There must be one of these
                              489 ;                   macro definitions for each row in the scan matrix.
                              490 ;
                              491 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              492 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              493 ;
                              494 ;<
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              495 ;///////////////////////////////////////////////////////////////////////////////
                              497 DEFINE_ROW macro RowNumber,WhichGPIO,WhichBit
                              498     BUTTON_GPIO_ENABLE_ROW_\RowNumber:  equ HW_\WhichGPIO\ENR
                              499     BUTTON_GPIO_SENSE_ROW_\RowNumber:   equ HW_\WhichGPIO\DIR
                              500     BUTTON_BITPOS_ROW_\RowNumber:       equ 1<<\WhichBit
                              501     endm
                              503 ;///////////////////////////////////////////////////////////////////////////////
                              504 ;
                              505 ;>  Name:           DEFINE_COLUMN
                              506 ;
                              507 ;   Type:           Macro
                              508 ;
                              509 ;   Description:    This is a supporting macro for defining the GPIO setup for 
                              510 ;                   the scan matrix.
                              511 ;
                              512 ;   Inputs:         Usage : DEFINE_COLUMN ColumnNumber,WhichGPIORegister,WhichBit
                              513 ;                        
                              514 ;   Outputs:        Sets up equates required for data structures in button.asm
                              515 ;                   
                              516 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              517 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              518 ;                   completely define the players button scan matrix, non scan buttons, and
                              519 ;                   how these buttons map to events as recieved by the menus.  There must be one
                              520 ;                   of these macro definitions for each column in the scan matrix.
                              521 ;
                              522 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              523 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              524 ;
                              525 ;<
                              526 ;///////////////////////////////////////////////////////////////////////////////
                              527 DEFINE_COLUMN macro ColumnNumber,WhichGPIO,WhichBit
                              528     BUTTON_GPIO_ENABLE_COLUMN_\ColumnNumber:        equ HW_\WhichGPIO\ENR
                              529     BUTTON_GPIO_DATA_OUT_COLUMN_\ColumnNumber:      equ HW_\WhichGPIO\DOR
                              530     BUTTON_GPIO_OUTPUT_ENABLE_COLUMN_\ColumnNumber: equ HW_\WhichGPIO\DOER
                              531     BUTTON_BITPOS_COLUMN_\ColumnNumber:             equ 1<<\WhichBit
                              532     endm
                              534 ;///////////////////////////////////////////////////////////////////////////////
                              535 ;
                              536 ;>  Name:           DEFINE_SCAN_BUTTON_EVENT
                              537 ;
                              538 ;   Type:           Macro
                              539 ;
                              540 ;   Description:    This is a supporting macro for defining the mapping between a scan
                              541 ;                   matrix location and a button event.
                              542 ;
                              543 ;   Inputs:         Usage : DEFINE_SCAN_BUTTON_EVENT Column,Row,EventNumber,ButtonName.  
                              544 ;                       Column is in the format COL0,COL1,COL2, etc.  
                              545 ;                       Row is in the format ROW0,ROW1,etc. 
                              546 ;                       The EventNumber is an integer with a single bit set that is unique to all button events
                              547 ;                       ButtonName is a label by which this button event can be referenced in the event mapping.
                              548 ;                        
                              549 ;   Outputs:        Sets up equates required for data structures in button.asm
                              550 ;                   
                              551 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              552 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              553 ;                   completely define the players button scan matrix, non scan buttons, and
                              554 ;                   how these buttons map to events as recieved by the menus. This macro sets up buttons for each
                              555 ;                   spot in the button scan matrix.  Each place in the matrix must be defined, even if no
                              556 ;                   physical button exists in it.  Use $000000 for placeholders.
                              557 ;
                              558 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              559 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              560 ;
                              561 ;<
                              562 ;///////////////////////////////////////////////////////////////////////////////
                              563 DEFINE_SCAN_BUTTON_EVENT macro Column,Row,EventNumber,ButtonName
                              564     BUTTON_EVENT_\Column\Row:  equ \EventNumber
                              565     ButtonName: equ \EventNumber
                              566     endm 
                              568 ;///////////////////////////////////////////////////////////////////////////////
                              569 ;
                              570 ;>  Name:           DEFINE_NON_SCAN_BUTTON
                              571 ;
                              572 ;   Type:           Macro
                              573 ;
                              574 ;   Description:    This is a supporting macro for defining a non scan button.
                              575 ;
                              576 ;   Inputs:         Usage : DEFINE_NON_SCAN_BUTTON NSNumber,WhichGPIO,WhichBit.  
                              577 ;                       NSNumber is a unique number (starting at 0) and counting up to BUTTON_NON_SCAN_BUTTONS-1
                              578 ;                       WhichGPIO is the GPIO register used
                              579 ;                       WhichBit is the bit in this register.
                              580 ;                        
                              581 ;   Outputs:        Sets up equates required for data structures in button.asm
                              582 ;                   
                              583 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              584 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              585 ;                   completely define the players button scan matrix, non scan buttons, and
                              586 ;                   how these buttons map to events as recieved by the menus. This macro sets up non scan
                              587 ;                   buttons.  Use DEFINE_NON_SCAN_BUTTON_EVENT to define the event generated by this non scan
                              588 ;                   button.
                              589 ;
                              590 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              591 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              592 ;
                              593 ;<
                              594 ;///////////////////////////////////////////////////////////////////////////////
                              595 DEFINE_NON_SCAN_BUTTON macro NSNumber,WhichGPIO,WhichBit
                              596     BUTTON_GPIO_ENABLE_NON_SCAN_\NSNumber:  equ HW_\WhichGPIO\ENR
                              597     BUTTON_GPIO_SENSE_NON_SCAN_\NSNumber:   equ HW_\WhichGPIO\DIR
                              598     BUTTON_BITPOS_NON_SCAN_\NSNumber:       equ 1<<\WhichBit
                              599     BUTTON_REAL_BITPOS_NON_SCAN_\NSNumber:  equ \WhichBit
                              600     endm
                              602 ;///////////////////////////////////////////////////////////////////////////////
                              603 ;
                              604 ;>  Name:           DEFINE_NON_SCAN_BUTTON_EVENT
                              605 ;
                              606 ;   Type:           Macro
                              607 ;
                              608 ;   Description:    This is a supporting macro for defining a non scan button.
                              609 ;
                              610 ;   Inputs:         Usage : DEFINE_NON_SCAN_BUTTON_EVENT Number,EventNumber,ButtonName  
                              611 ;                       Number is a unique number (starting at 0) and counting up to BUTTON_NON_SCAN_BUTTONS-1
                              612 ;                       EventNumber is an integer with 1 bit set that is unique to all other buttons
                              613 ;                       ButtonName is a label later referenced in the event mapping
                              614 ;                        
                              615 ;   Outputs:        Sets up equates required for data structures in button.asm
                              616 ;                   
                              617 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              618 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              619 ;                   completely define the players button scan matrix, non scan buttons, and
                              620 ;                   how these buttons map to events as recieved by the menus. This macro sets up non scan
                              621 ;                   buttons.  
                              622 ;
                              623 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              624 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              625 ;
                              626 ;<
                              627 ;///////////////////////////////////////////////////////////////////////////////
                              628 DEFINE_NON_SCAN_BUTTON_EVENT macro Number,EventNumber,ButtonName
                              629     BUTTON_EVENT_NONSCAN\Number:  equ \EventNumber
                              630     ButtonName: equ \EventNumber
                              631     endm 
                              635 ;///////////////////////////////////////////////////////////////////////////////
                              636 ;> Name: DEFINE_LRADC_BUTTON
                              637 ;
                              638 ;  Type: Macro
                              639 ;
                              640 ;  Description: This is a supporting macro for defining an Low Resolution ADC (LRADC)-based button
                              641 ;
                              642 ;  Inputs:      Usage : DEFINE_LRADC_BUTTON LBNumber,UpperLimitVoltage
                              643 ;
                              644 ;  Outputs:     Sets up equates required for data structures in button.asm
                              645 ;
                              646 ;  Notes:       Must be used in conjuction with DEFINE_LRADC_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              647 ;                   completely define the player's LRADC buttons and how these buttons map to 
                              648 ;                   events as recieved by the menus. This macro sets up LRADC buttons.  Use 
                              649 ;                   DEFINE_LRADC_BUTTON_EVENT to define the event generated by this LRADC button.
                              650 ;
                              651 ;   SeeAlso:        DEFINE_LRADC_BUTTON_EVENT, DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              652 ;                   DEFINE_NON_SCAN_BUTTON, DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              653 ;<
                              654 ;///////////////////////////////////////////////////////////////////////////////
                              655 DEFINE_LRADC_BUTTON     macro   num,level
                              656     BUTTON_LRADC_LEVEL_\num:    equ level
                              657     endm
                              661 ;///////////////////////////////////////////////////////////////////////////////
                              662 ;> Name: DEFINE_LRADC_BUTTON_EVENT
                              663 ;
                              664 ;  Type: Macro
                              665 ;
                              666 ;  Description:     This is a supporting macro for defining a Low Resolution ADC (LRADC)-based button.
                              667 ;
                              668 ;  Inputs:          Usage : DEFINE_LRADC_BUTTON_EVENT Number,EventNumber,ButtonName  
                              669 ;                       Number is a unique number (starting at 0) and counting up to BUTTON_LRADC_BUTTONS-1
                              670 ;                       EventNumber is an integer with 1 bit set that is unique to all other buttons
                              671 ;                       ButtonName is a label later referenced in the event mapping
                              672  
                              673 ;
                              674 ;  Outputs:         Sets up equates required for data structures in button.asm
                              675 ;
                              676 ;  Notes:           Must be used in conjuction with DEFINE_LRADC_BUTTON, and DEFINE_MAPPED_EVENT to
                              677 ;                   completely define the player's LRADC buttons and how these buttons map to events 
                              678 ;                   as recieved by the menus. This macro sets up LRADC buttons.
                              679 ;
                              680 ;
                              681 ;   SeeAlso:        DEFINE_LRADC_BUTTON, DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              682 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              683 ;<
                              684 ;///////////////////////////////////////////////////////////////////////////////
                              685 DEFINE_LRADC_BUTTON_EVENT      macro   num,EventNumber,ButtonName
                              686     BUTTON_EVENT_LRADC_BUTTON\num: equ \EventNumber
                              687     ButtonName:     equ     \EventNumber   
                              688     endm
                              689   
                              692 ;///////////////////////////////////////////////////////////////////////////////
                              693 ;
                              694 ;>  Name:           DEFINE_MAPPED_EVENT
                              695 ;
                              696 ;   Type:           Macro
                              697 ;
                              698 ;   Description:    This is a supporting macro for defining button events.
                              699 ;
                              700 ;   Inputs:         Usage : DEFINE_MAPPED_EVENT Number,Action,ButtonNames 
                              701 ;                       Number is a unique number (starting at 0) and counting up to BUTTON_MAPPED_EVENTS-1
                              702 ;                       Action is either PRESS_RELEASE or PRESS_HOLD
                              703 ;                       ButtonNames is a collection of labels defined for scan or non scan buttons that relate
                              704 ;                           to this button event.
                              705 ;                        
                              706 ;   Outputs:        Sets up equates required for data structures in button.asm
                              707 ;                   
                              708 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              709 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              710 ;                   completely define the players button scan matrix, non scan buttons, and
                              711 ;                   how these buttons map to events as recieved by the menus. This macro sets up the mapping
                              712 ;                   between scan and non scan buttons, and the eventual event number that is sent to the menus.
                              713 ;
                              714 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              715 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              716 ;
                              717 ;<
                              718 ;///////////////////////////////////////////////////////////////////////////////
                              719 DEFINE_MAPPED_EVENT macro Number,Action,ButtonNames
                              720     
                              721   IF (@SCP("Action","PRESS_RELEASE"))
                              722     BUTTON_EVENT_\Number:  equ ButtonNames
                              723   else 
                              724     if (@SCP("Action","PRESS_HOLD"))
                              725         BUTTON_EVENT_\Number:  equ $800000|ButtonNames
                              726     else
                              727         ERROR "Unknown Action for DEFINE_MAPPED_EVENT" 
                              728     endif
                              729   endif 
                              730     endm
                              733 ;///////////////////////////////////////////////////////////////////////////////
                              734 ;
                              735 ;>  Name:           DEFINE_2BUTTON_MAPPED_EVENT
                              736 ;
                              737 ;   Type:           Macro
                              738 ;
                              739 ;   Description:    This is a supporting macro for defining button events.
                              740 ;
                              741 ;   Inputs:         Usage : DEFINE_2BUTTON_MAPPED_EVENT Number,Action,Event1,Event2 
                              742 ;                       Number is a unique number (starting at 0) and counting up to BUTTON_MAPPED_EVENTS-1
                              743 ;                       Action is either PRESS_RELEASE or PRESS_HOLD
                              744 ;                       Event1 is 1 of 2 previously defined button events
                              745 ;                       Event2 is 2 of 2 previously defined button events
                              746 ;                        
                              747 ;   Outputs:        Sets up equates required for data structures in button.asm
                              748 ;                   
                              749 ;   Notes:          Must be used in conjuction with DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,
                              750 ;                   DEFINE_NON_SCAN_BUTTON,DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT to
                              751 ;                   completely define the players button scan matrix, non scan buttons, and
                              752 ;                   how these buttons map to events as recieved by the menus. This macro sets up the mapping
                              753 ;                   between scan and non scan buttons, and the eventual event number that is sent to the menus.
                              754 ;
                              755 ;   SeeAlso:        DEFINE_COLUMN, DEFINE_SCAN_BUTTON_EVENT,DEFINE_NON_SCAN_BUTTON,
                              756 ;                   DEFINE_NON_SCAN_BUTTON_EVENT, and DEFINE_MAPPED_EVENT
                              757 ;
                              758 ;<
                              759 ;///////////////////////////////////////////////////////////////////////////////
                              760 DEFINE_2BUTTON_MAPPED_EVENT macro Number,Action,Event1,Event2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              761     
                              762   IF (@SCP("Action","PRESS_RELEASE"))
                              763     BUTTON_EVENT_\Number:  equ BUTTON_EVENT_\Event1|BUTTON_EVENT_\Event2
                              764   else 
                              765     if (@SCP("Action","PRESS_HOLD"))
                              766         BUTTON_EVENT_\Number:  equ BUTTON_EVENT_\Event1|BUTTON_EVENT_\Event2|$800000
                              767     else
                              768         ERROR "Unknown Action for DEFINE_MAPPED_EVENT" 
                              769     endif
                              770   endif 
                              771   endm
                              773 ;///////////////////////////////////////////////////////////////////////////////
                              774 ;
                              775 ;>  Name:           StackCheckIn
                              776 ;
                              777 ;   Type:           Macro
                              778 ;
                              779 ;   Description:    Records the current stack pointer on the stack
                              780 ;
                              781 ;   Inputs:         none
                              782 ;                        
                              783 ;   Outputs:        places the current PC and the current software stack pointer on the stack
                              784 ;   
                              785 ;   Notes:          This does not modify any registers (except r7)                
                              786 ;
                              787 ;   SeeAlso:        FStackCheckIn
                              788 ;
                              789 ;<
                              790 ;///////////////////////////////////////////////////////////////////////////////
                              791 StackCheckIn macro
                              792   if (@DEF('DEBUG'))
                              793     extern FStackCheckIn
                              794     jsr FStackCheckIn
                              795   endif
                              796   endm
                              798 ;///////////////////////////////////////////////////////////////////////////////
                              799 ;
                              800 ;>  Name:           StackCheckOut
                              801 ;
                              802 ;   Type:           Macro
                              803 ;
                              804 ;   Description:    Verifies that the stack is still balanced
                              805 ;
                              806 ;   Inputs:         none
                              807 ;                        
                              808 ;   Outputs:        none (though hits a debug if the stack is unbalanced)
                              809 ;   
                              810 ;   Notes:          This does not modify any registers (except r7) 
                              811 ;
                              812 ;   SeeAlso:        FStackCheckOut
                              813 ;
                              814 ;<
                              815 ;///////////////////////////////////////////////////////////////////////////////
                              816 StackCheckOut macro
                              817   if (@DEF('DEBUG'))
                              818     extern FStackCheckOut
                              819     jsr FStackCheckOut
                              820   endif 
                              821   endm
                              824 ;///////////////////////////////////////////////////////////////////////////////
                              825 ;
                              826 ;>  Name:           InstrumentPushContext 
                              827 ;
                              828 ;   Type:           Macro
                              829 ;
                              830 ;   Description:    calls the instrument functions specified.
                              831 ;
                              832 ;   Inputs:         new context
                              833 ;                   new value
                              834 ;                        
                              835 ;   Outputs:        
                              836 ;   
                              837 ;   Notes:          This does not modify any registers  
                              838 ;
                              839 ;   SeeAlso:        
                              840 ;
                              841 ;<
                              842 ;///////////////////////////////////////////////////////////////////////////////
                              843 InstrumentPushContext macro context,value
                              844   if (@DEF('USE_INSTRUMENTATION'))
                              845     extern FInstrumentPushContext
                              846     extern PushAandB
                              847     extern PopAandB
                              848     jsr PushAandB
                              849     move    #>context,a
                              850     move    #>value,b
                              851     jsr FInstrumentPushContext
                              852     jsr PopAandB
                              853   endif 
                              854   endm
                              856 ;///////////////////////////////////////////////////////////////////////////////
                              857 ;
                              858 ;>  Name:           InstrumentPopContext 
                              859 ;
                              860 ;   Type:           Macro
                              861 ;
                              862 ;   Description:    calls the instrument functions specified.
                              863 ;
                              864 ;   Inputs:         none
                              865 ;                        
                              866 ;   Outputs:        none
                              867 ;   
                              868 ;   Notes:          This does not modify any registers  
                              869 ;
                              870 ;   SeeAlso:        
                              871 ;
                              872 ;<
                              873 ;///////////////////////////////////////////////////////////////////////////////
                              874 InstrumentPopContext macro 
                              875   if (@DEF('USE_INSTRUMENTATION'))
                              876     extern FInstrumentPopContext
                              877     jsr FInstrumentPopContext
                              878   endif 
                              879   endm
                              881 ;///////////////////////////////////////////////////////////////////////////////
                              882 ;
                              883 ;>  Name:           InstrumentSetValue 
                              884 ;
                              885 ;   Type:           Macro
                              886 ;
                              887 ;   Description:    calls the instrument functions specified.
                              888 ;
                              889 ;   Inputs:         Value
                              890 ;                        
                              891 ;   Outputs:        none
                              892 ;   
                              893 ;   Notes:          This does not modify any registers  
                              894 ;
                              895 ;   SeeAlso:        
                              896 ;
                              897 ;<
                              898 ;///////////////////////////////////////////////////////////////////////////////
                              899 InstrumentSetValue macro value
                              900   if (@DEF('USE_INSTRUMENTATION'))
                              901     extern FInstrumentSetValue
                              902     jsr PushA
                              903     move #>value,a
                              904     jsr FInstrumentSetValue
                              905     jsr PopA
                              906   endif 
                              907   endm
                              910 ;///////////////////////////////////////////////////////////////////////////////
                              911 ;
                              912 ;>  Name:           InstrumentSetEvent 
                              913 ;
                              914 ;   Type:           Macro
                              915 ;
                              916 ;   Description:    calls the instrument functions specified.
                              917 ;
                              918 ;   Inputs:         Value
                              919 ;                        
                              920 ;   Outputs:        none
                              921 ;   
                              922 ;   Notes:          This does not modify any registers  
                              923 ;
                              924 ;   SeeAlso:        
                              925 ;
                              926 ;<
                              927 ;///////////////////////////////////////////////////////////////////////////////
                              928 InstrumentSetEvent macro event
                              929   if (@DEF('USE_INSTRUMENTATION'))
                              930     extern FInstrumentSetEvent
                              931     jsr PushA
                              932     move #>event,a
                              933     jsr FInstrumentSetEvent
                              934     jsr PopA
                              935   endif 
                              936   endm
                              938 ;///////////////////////////////////////////////////////////////////////////////
                              939 ;
                              940 ;>  Name:           InstrumentClearEvent 
                              941 ;
                              942 ;   Type:           Macro
                              943 ;
                              944 ;   Description:    calls the instrument functions specified.
                              945 ;
                              946 ;   Inputs:         event
                              947 ;                        
                              948 ;   Outputs:        none
                              949 ;   
                              950 ;   Notes:          This does not modify any registers  
                              951 ;
                              952 ;   SeeAlso:        
                              953 ;
                              954 ;<
                              955 ;///////////////////////////////////////////////////////////////////////////////
                              956 InstrumentClearEvent macro event
                              957   if (@DEF('USE_INSTRUMENTATION'))
                              958     extern FInstrumentClearEvent
                              959     jsr PushA
                              960     move #>event,a
                              961     jsr FInstrumentClearEvent
                              962     jsr PopA
                              963   endif 
                              964   endm
                              966 ;///////////////////////////////////////////////////////////////////////////////
                              967 ;
                              968 ;>  Name:           InstrumentToggleEvent 
                              969 ;
                              970 ;   Type:           Macro
                              971 ;
                              972 ;   Description:    calls the instrument functions specified.
                              973 ;
                              974 ;   Inputs:         event
                              975 ;                        
                              976 ;   Outputs:        none
                              977 ;   
                              978 ;   Notes:          This does not modify any registers  
                              979 ;
                              980 ;   SeeAlso:        
                              981 ;
                              982 ;<
                              983 ;///////////////////////////////////////////////////////////////////////////////
                              984 InstrumentToggleEvent macro event
                              985   if (@DEF('USE_INSTRUMENTATION'))
                              986     extern FInstrumentToggleEvent
                              987     jsr PushA
                              988     move #>event,a
                              989     jsr FInstrumentToggleEvent
                              990     jsr PopA
                              991   endif 
                              992   endm
                               90 ;*******************************************************************************
                               91 ;  X memory
                               92 ;*******************************************************************************
X:0000                         93       org     x,"SYSFUN_Module_X":
                               96 ;*******************************************************************************
                               97 ;  Y memory
                               98 ;*******************************************************************************
Y:0000                         99       org     y,"SYSFUN_Module_Y":
                              101 ;ModuleNumberShadow      dc      0
                              102 ;ModuleWaitShadow        dc      0
                              103 ;ModuleSignalShadow      dc      0
                              105 ;*******************************************************************************
                              106 ;  P memory
                              107 ;*******************************************************************************
P:0000                        108     org p,"CurrentModule_p":
                              109 CurrentModule:
P:0000 000000                 110         dc  0
P:0000                        113       org     p,"SYSFUN_Module_P":
                              115 ;*******************************************************************************
                              116 ; Private Function: InitModule
                              117 ; Description: Calls C or asm Module_Init func ptr in the ModuleTableEntry.
                              118 ;
                              119 ; Inputs:   r1 = ptr to ModuleTableEntry
                              120 ;
                              121 ; Outputs:  Writes ModuleTableEntry.EventWait (wait to call module's process 
                              122 ;           function next until the event requested by this module init routine's 
                              123 ;           return value occurs)
                              124 ;
                              125 ; Notes:    Private routine called by ExecuteModules only.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              126 ;*******************************************************************************
                              127 InitModule
                              128     ; Save variables
                              129     push    m1
                              130     push    r1
                              132     ; Check if the module needs to be loaded
P:0000 390200         2    2  133     move    #Module_ResourceNumber,n1
                              137     ; Call the module's initialization routine
P:0001 223000         2    4  142     move        r1,r0 ;Copy pModuleTableEntry to r0 for C module init calls. (added at SDK 2.313.006)
P:0002 055F61         2    6  129     movec   m1,y:(r7)+
P:0003 695F00         2    8  130     move    r1,y:(r7)+
P:0004 7EE900         4   12  135     move    y:(r1+n1),n6        ; Resource number of this module
P:0005 390500         2   14  138     move    #Module_Init,n1
P:0006 000000         2   16  138         nop             ; (inserted)
P:0007 6EE900         4   20  140     move    y:(r1+n1),r6 ;Module_Init func ptr for this r1 ModuleTableEntry
                              143     ; After the above r0 set was added, and all modules were made to return proper event 
                              144     ; callback values, no module was allowed to run constantly as some had previously. 
                              145     ; This allowed the main loop's DSP wait for irq instruction to execute which saved
                              146     ; 5% of battery power while increasing the noise floor during full scale audio 
                              147     ; by 5dB on the STMP3410. (meets 74dB spec in all cases)
                              149    ; Call the module table init function for this module entry
P:0008 0BF080 rrrrrr  6   26  150    jsr     SysCallModuleInit
                              151     ; Here, a1 must always have module's wait mask, for storage below into ModuleTableEntry. 
                              152     ; Verified that all module init routines now return wait mask in a1.     
                              154     ; Restore variables
                              155     pop     r1
                              156     pop     m1
P:000A 390100         2   28  157     move    #Module_EventWait,n1
P:000B 69FF00         4   32  155     move    y:-(r7),r1
P:000C 05FF61         4   36  156     movec   y:-(r7),m1
P:000D 000000         2   38  156         nop             ; (inserted)
P:000E 5C6900         4   42  159     move    a1,y:(r1+n1) ;write in the new flags to the ModuleTableEntry's wait mask 
                              160      ;[Defect fixed: Previous ver mistakenly wrote to Module_EventSignal since "+n1" was missing.
                              161      ;This could have caused premature or late calls to module process functions.]
P:000F 00000C         4   46  162     rts
                              163     
                              165 ;*******************************************************************************
                              166 ; API Function: SignalModule
                              167 ; Description:  Set EventSignal bits given into ModuleTableEntry.EventSignal flag
                              168 ;
                              169 ; Input Parameters:  X1: Module Number
                              170 ;                    X0: Event to be signaled for this module number to process
                              171 ;
                              172 ; Outputs: Sets bits in the ModuleTableEntry.EventSignal
                              173 ;
                              174 ; Notes:   ORs the given input parameter event flag bits into the given module 
                              175 ;          number's ModuleTableEntry.EventSignal existing event flag. 
                              176 ;*******************************************************************************
                              178 SignalModule
                              179         ; Calculate the offset into the module table
P:0010 46F400 rrrrrr  3   49  180         move    #>MODULE_ENTRY_SIZE,y0
P:0012 61F4E0 rrrrrr  3   52  181         mpy     x1,y0,a	                #>ModuleTable,r1
P:0014 200022         2   54  182         asr     a                       ; ModuleTableEntry Offset in a0 after shift
                              184         ; Point to the selected entry in the module table
                              189         ; ModuleTableEntry.EventSignal |= Event Param
P:0015 211913         2   56  190         clr     a	                a0,n1
P:0016 000000         2   58  190         nop             ; (inserted)
P:0017 5CE900         4   62  191         move    y:(r1+n1),a1            ; A1 = ModuleTableEntry.EventSignal
P:0018 200042         2   64  192         or      x0,a                    ; A |= (events to be signalled param)
P:0019 5C6900         4   68  193         move    a1,y:(r1+n1)            ; ModuleTableEntry.EventSignal = A1
                              194         
                              195         ; Set address mode back to linear. (mode unchanged)
P:001A 00000C         4   72  197         rts
                              199 ;*******************************************************************************
                              200 ; Function:    ExecuteModules
                              201 ;
                              202 ; Description: Called by the Exec main loop program to execute all  
                              203 ;              ready modules in a cooperative manner. Initializes modules as needed.
                              204 ;
                              205 ; Inputs:      Reads and writes the global ModuleTable Entries.  
                              206 ;
                              207 ; Returns:     Register A as non-zero if any modules have run
                              208 ;
                              209 ; Notes:       Alternate name: InitModules 
                              210 ;              In this cooperative system, each module specifies when it desires
                              211 ;              to run next on each iteration.
                              212 ;*******************************************************************************
                              213 InitModules
                              214 ExecuteModules
                              215                 push SSH
P:001B 055F7C         2   74  215     movec   SSH,y:(r7)+
                              216         ; Start at the beginning of the module table
                              219         ; For each entry in the module table
P:001C 61F413 rrrrrr  3   77  220                 clr a	                #ModuleTable,r1
P:001E 50F41B rrrrrr  3   80  221         clr b	                     #MODULE_COUNT,a0
                              223                 push a0
P:0020 585F00         2   82  223     move    a0,y:(r7)+
                              224 TopOfExecuteModulesLoop
                              225         ; Check if this module has any events to process
P:0021 390100         2   84  226         move    #Module_EventWait,n1
P:0022 000000         2   86  226         nop             ; (inserted)
P:0023 4CE900         4   90  228         move    y:(r1+n1),x0            ; ModuleTableEntry.EventWait flags in x0
                              229         
P:0024 390000         2   92  230         move    #Module_EventSignal,n1
P:0025 000000         2   94  230         nop             ; (inserted)
P:0026 5EE900         4   98  232         move    y:(r1+n1),a            ; ModuleTableEntry.EventSignal flags in A
                              234         ; if (ModuleTableEntry.EventSignal.initBit) InitModule()
P:0027 0ACC17 rrrrrr  6  104  235         jclr    #EVENT_INIT_BITPOS,a1,_check_timer 
                              236         
                              237         ; Set wait for none bit in our copy of CurrentModuleEntry.EventWait
                              238         ; Forces module's process function to run at least once after InitModule.  
P:0029 0AC460         4  108  239         bset    #EVENT_NONE_BITPOS,x0 
                              240         
                              241         push    a2
P:002A 5A5F00         2  110  241     move    a2,y:(r7)+
                              242         push    a1
                              243         push    a0
                              244         push    x0
P:002B 0ACD60         4  114  245         bset    #0,b1
P:002C 5C5F00         2  116  242     move    a1,y:(r7)+
P:002D 585F00         2  118  243     move    a0,y:(r7)+
P:002E 4C5F00         2  120  244     move    x0,y:(r7)+
                              246         push    b1
P:002F 5D5F00         2  122  246     move    b1,y:(r7)+
P:0030 0BF080 rrrrrr  6  128  247         jsr     InitModule ;  Writes ModuleTableEntry.EventWait 
                              248         pop     b1         ; (Run next on x0 events desired by module's init func) 
P:0032 5DFF00         4  132  248     move    y:-(r7),b1
                              249         pop     x0
P:0033 4CFF00         4  136  249     move    y:-(r7),x0
                              250         pop     a0
P:0034 58FF00         4  140  250     move    y:-(r7),a0
                              251         pop     a1
P:0035 5CFF00         4  144  251     move    y:-(r7),a1
                              252         pop     a2
P:0036 5AFF00         4  148  252     move    y:-(r7),a2
                              254 _check_timer  
                              255         ; if(ModuleTableEntry.EventWait.timerBit) Check module's wake-up timer
P:0037 0BC422 rrrrrr  6  154  256         jsset   #EVENT_TIMER_BITPOS,x0,ModuleCheckTimer 
                              257         ; On exit from ModuleCheckTimer: 
                              258         ;   a1 = Module's EventSignal with EVENT_TIMER bit set if it is wake-up time.
                              259         ;   r1 = ptr to current ModuleTableEntry
                              260         ;   x0   still has module's EventWait flags (unchanged)
                              262         ;-----------------------------------------------  
P:0039 0BC464         4  158  263         btst    #EVENT_BACKGROUND_BITPOS,x0
P:003A 0AF0A0 rrrrrr  6  164  264         jcc     Proceed
                              266         ;Check for Background Events
P:003C 390800         2  166  267         move    #Module_Background,n1
P:003D 000000         2  168  267         nop             ; (inserted)
P:003E 6EE900         4  172  269         move    y:(r1+n1),r6
                              270         push    x0
P:003F 4C5F00         2  174  270     move    x0,y:(r7)+
                              271         push    r1
P:0040 695F00         2  176  271     move    r1,y:(r7)+
                              272         push    b1
P:0041 5D5F00         2  178  272     move    b1,y:(r7)+
P:0042 0BE680         4  182  273         jsr     (r6)    ; May be a stub function that just returns.
                              274         pop     b1
P:0043 5DFF00         4  186  274     move    y:-(r7),b1
                              275         pop     r1
P:0044 69FF00         4  190  275     move    y:-(r7),r1
                              276         pop     x0
P:0045 4CFF00         4  194  276     move    y:-(r7),x0
                              277         ;-----------------------------------------------
                              278 Proceed                  ; Module's Event = module's EventWait & EventSignal
P:0046 200046         2  196  279         and     x0,a       ; Only handle events module waited on AND that were signalled. 
P:0047 0AF0AA rrrrrr  6  202  280         jeq     NextModule ; If (EventWait&EventSignal == 0) process Next ModuleTableEntry.
                              281                            ; else{ set the ModuleTableEntry.EventSignal to EVENT_NONE and CallModule }
P:0049 390000         2  204  282         move    #Module_EventSignal,n1
P:004A 44F400 000001  3  207  283         move    #>EVENT_NONE,x0
P:004C 4C6900         4  211  284         move    x0,y:(r1+n1)
                              286         ; Save variables
                              287         push    m1
P:004D 055F61         2  213  287     movec   m1,y:(r7)+
                              288 ;        push    r1
                              289 ;        push    a0
                              290 ;        push    a1
                              291 ;        push    a2
                              292 ;        push    b1
                              293         ; Check if the module is already loaded
                              295         ; Setup arguments for calling SysLoadResource
                              296 ;        move    #>RSRC_TYPE_DATA,x1             ; Resource type is data
                              297 ;        move    #>MAX_MODULE_SIZE,y1            ; Size of the overlay area
                              298 ;        move    #>F_lc_u_bP_Module_overlay,y0            ; Address of the overlay area
                              299 ;        move    #TARGET_MEM_P,a1                ; Overlay area is in P memory
                              301         ;move    x0,p:CurrentModule              ;put the new module into the receptical.  
                              302 ;               move    x0,y:(r6)        
                              303         ; Load the module into the overlay area
                              304 ;        jsr     SysLoadResource
                              307 CallModule
                              308         ; Restore variables
                              309 ;        pop     b1
                              310 ;        pop     a2
                              311 ;        pop     a1
                              312 ;        pop     a0
                              313 ;        pop     r1
                              315         ; Pass the module a pointer to it's message queue descriptor
P:004E 390300         2  215  316         move    #Module_QueueDescriptor,n1
P:004F 058060r        2  217  317         movec   y:<Const_ffffff,m0
P:0050 68E900         4  221  318         move    y:(r1+n1),r0
                              320         ; Save CurrentModuleEntry ptr
                              321         push    r1
                              323         ; Call the module's event processing routine
                              324         ;    A1 = Event(s) that the module needs to process now
                              325         ;    R0 = Pointer to the module's message queue descriptor
                              326         ;    M0 = Linear addressing = -1
P:0051 390400         2  223  327         move    #Module_ProcessEvent,n1
P:0052 695F00         2  225  321     move    r1,y:(r7)+
P:0053 058066r        2  227  330         movec y:<Const_ffffff,m6
P:0054 6EE900         4  231  329         move    y:(r1+n1),r6        ; ptr to module's event processing function
P:0055 390200         2  233  332         move    #Module_ResourceNumber,n1
P:0056 000000         2  235  332         nop             ; (inserted)
P:0057 7EE900         4  239  334         move    y:(r1+n1),n6        ; Resource number of this module
                              336 FCallModule_debug
P:0058 0ACD60         4  243  337         bset    #0,b1
                              338         push    b1
P:0059 5D5F00         2  245  338     move    b1,y:(r7)+
                              339 ;        jsr     (r2)
P:005A 0BF080 rrrrrr  6  251  340                 jsr    SysCallModule
                              341         pop     b1
                              342         ;Module's event processing function returns events it wants to wait for in A1
                              344         ; Restore variables
                              345         pop     r1                  ; CurrentModuleEntry ptr
                              346         pop     m1
                              348         ;Save the EventWait value returned by the module, into its ModuleTableEntry.EventWait field
P:005C 390100         2  253  349         move    #Module_EventWait,n1
P:005D 5DFF00         4  257  341     move    y:-(r7),b1
P:005E 69FF00         4  261  345     move    y:-(r7),r1
P:005F 05FF61         4  265  346     movec   y:-(r7),m1
P:0060 000000         2  267  346         nop             ; (inserted)
P:0061 5C6900         4  271  351         move    a1,y:(r1+n1)
                              352         
                              353         ;Ensure the REPEAT bit is inactive. ModuleTableEntry.EventWait.repeat=0 
P:0062 0A6945         6  277  354         bclr    #>EVENT_REPEAT_BITPOS,y:(r1+n1)            
                              355         
                              356 NextModule
P:0063 0ACC05 rrrrrr  6  283  357         jclr    #>EVENT_REPEAT_BITPOS,a1,_DontRepeat
P:0065 0AF080 rrrrrr  6  289  358         jmp     TopOfExecuteModulesLoop
                              359 _DontRepeat
                              360         ; ***** Go to the next ModuleTableEntry r1 in the ModuleTable *****
P:0067 71F400 rrrrrr  3  292  361         move    #>MODULE_ENTRY_SIZE,n1
P:0069 000000         2  294  361         nop             ; (inserted)
P:006A 204900         2  296  363         move    (r1)+n1
                              364 Loop
P:006B 200013         2  298  365                 clr a
                              366                 pop a0                     ;Decrement MODULE_COUNT for this round robin cycle
P:006C 58FF00         4  302  366     move    y:-(r7),a0
P:006D 00000A         2  304  367                 dec a
                              368                 push a0
P:006E 585F03         2  306  369                 tst a	            a0,y:(r7)+
P:006F 0AF0A2 rrrrrr  6  312  370                 jne TopOfExecuteModulesLoop
                              371                 pop a0
                              372         ; No Modules left to execute. Return to main program aka super loop.
                              374         pop SSH
P:0071 058061r        2  314  375         movec   y:<Const_ffffff,m1 ;Set the r1 adressing mode back to linear
P:0072 58FF00         4  318  371     move    y:-(r7),a0
P:0073 05FF7C         4  322  374     movec   y:-(r7),SSH
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0074 21AE00         2  324  373         move    b1,a               ;move the 'has any module been called' variable to A
P:0075 00000C         4  328  376         rts
                              379 ;*******************************************************************************
                              380 ; API Function: ModuleSetTimer
                              381 ; Description:  Used by module process functions to set module's next runtime.
                              382 ;
                              383 ; Inputs:       x0 = time in milliseconds
                              384 ;               a1 = Module_EventWait 
                              385 ;
                              386 ; Outputs:      a1 = Module_EventWait with EVENT_TIMER bit set
                              387 ;
                              388 ; Notes:       
                              389 ;*******************************************************************************
                              390 ModuleSetTimer
                              394     ;If using funclet, function will be executed via funclet kernel
                              395     CallFunclet RSRC_FUNCLET_MODULESETTIMER
P:0076 0D0080         4  332  395     jsr       $80
P:0077 000165                 395     DC       RSRC_FUNCLET_MODULESETTIMER  ; 1 word
P:0000                        397     org p,"SYSFUNCLET_ModuleSetTimer_P":
                              398     
P:0000 000165                 399     dc      RSRC_FUNCLET_MODULESETTIMER           ; Funclet Resource number
                              403     ; Get current time and add the wait count to it
                              404     push    a1                                  ; save the Module_EventWait
P:0001 5C5F00         2    2  404     move    a1,y:(r7)+
P:0002 0BF080 rrrrrr  6    8  405     jsr     SysGetCurrentTime                   ; get the current time
P:0004 20001B         2   10  406     clr     b                                   ; put the low count in b
P:0005 210F00         2   12  407     move    a0,b
P:0006 200048         2   14  408     add     x0,b                                ; add the time to wait
P:0007 0AF0A0 rrrrrr  6   20  409     jcc     _no_wrap
P:0009 4C8000r        2   22  410     move    y:<Const_000001,x0                              ; rollover in low count so
P:000A 200040         2   24  411     add     x0,a                                ;   increment high count
                              412 _no_wrap
                              414     
                              415     ; search the ModuleTable for the current module
                              416     ; TODO - we could get around this search by having the module init pass in
                              417     ;   the pointer to the modules table entry & have each module save it away,
                              418     ;   then pass it into this function.
P:000B 380200         2   26  419     move    #Module_ResourceNumber,n0           ; current module resource num ptr
                              420 ;    movem   p:CurrentModule,b   ; Resource number of currently loaded module
                              425    
P:000C 058060r        2   28  427     movec   y:<Const_ffffff,m0
P:000D 66F400 rrrrrr  3   31  422     move    #Fg_ModuleRegion,r6
P:000F 60F400 rrrrrr  3   34  426     move    #ModuleTable,r0                     ; index into the module table
P:0011 21A800         2   36  413     move    b1,a0                               ; put the count back together
P:0012 5FE600         2   38  424     move    y:(r6),b
P:0013 060080rrrrrrr  6   44  428     do      #0,_end_search           
P:0015 4DE800         4   48  429         move    y:(r0+n0),x1                    ; get the resource number
P:0016 20006D         2   50  430         cmp     x1,b                            ; is this the one?
P:0017 0AF0A2 rrrrrr  6   56  431         jne     _keep_looking
P:0019 00008C         2   58  432         enddo
P:001A 0AF080 rrrrrr  6   64  433         jmp     _stop_looking
                              434 _keep_looking
P:001C 70F400 rrrrrr  3   67  435         move    #MODULE_ENTRY_SIZE,n0           ; point to the next table entry
P:001E 000000         2   69  435         nop             ; (inserted)
P:001F 204800         2   71  437         move    (r0)+n0
P:0020 380200         2   73  438         move    #Module_ResourceNumber,n0       ; setup for 
                              439 _stop_looking
P:0021 000000         2   75  439         nop             ; (inserted)
                        (31)  441 _end_search
                              442     ; TODO - no error checking.  Problem if module not found.
P:0022 380600         2   77  443     move    #Module_Timer_High,n0               ; write the high time value
P:0023 000000         2   79  443         nop             ; (inserted)
P:0024 5C6800         4   83  445     move    a1,y:(r0+n0)
P:0025 380700         2   85  446     move    #Module_Timer_Low,n0                ; write the high time value
P:0026 000000         2   87  446         nop             ; (inserted)
P:0027 586800         4   91  448     move    a0,y:(r0+n0)                        ; write the low time value
                              449     pop     a1                                  ; get the Module_EventWait
P:0028 5CFF00         4   95  449     move    y:-(r7),a1
P:0029 0ACC62         4   99  450     bset    #EVENT_TIMER_BITPOS,a1              ; set the timer wait signal
P:002A 00000C         4  103  451     rts
                              455     ;If using funclet, switch counter back to original here
P:0078                        456     org    p,"SYSFUN_Module_P":
                              457     
                              459                                    
                              460 ;*******************************************************************************
                              461 ;  Private Function: ModuleCheckTimer
                              462 ;
                              463 ;  Inputs:   a1 = Module_EventSignal 
                              464 ;            r1 = ptr to current ModuleTableEntry in ModuleTable
                              465 ;            n1 = ValueX
                              466 ;
                              467 ;  Outputs:  a1 = Module_EventSignal with EVENT_TIMER bit set if it's time to run
                              468 ;            r1 = ptr to current ModuleTableEntry in ModuleTable
                              469 ;            n1 = ValueX
                              470 ;
                              471 ;  Notes:    preserves x0
                              472 ;*******************************************************************************
                              473 ModuleCheckTimer
                              475     push    n1
P:0078 795F00         2  334  475     move    n1,y:(r7)+
                              476     push    a1
P:0079 5C5F00         2  336  476     move    a1,y:(r7)+
                              477     
P:007A 0BF080 rrrrrr  6  342  478     jsr     SysGetCurrentTime           ; get the current time. preserves x0
                              479     
                              480     ;Get the two word module target time from the ModuleTableEntry.Module_Timer in B
P:007C 39061B         2  344  482     clr     b	            #Module_Timer_High,n1
P:007D 000000         2  346  482         nop             ; (inserted)
P:007E 5DE900         4  350  483     move    y:(r1+n1),b1
P:007F 390700         2  352  484     move    #Module_Timer_Low,n1
P:0080 000000         2  354  484         nop             ; (inserted)
P:0081 59E900         4  358  486     move    y:(r1+n1),b0
                              487     
                              488     ; Compare current time in A to module's target run time in B
P:0082 5CFF0D         4  362  489     cmp     a,b	            y:-(r7),a1
                              490     pop     a1                              ; module's previous event signal flag
                              491     pop     n1
P:0083 79FF00         4  366  491     move    y:-(r7),n1
P:0084 0AF0AF rrrrrr  6  372  492     jle     _it_is_time
P:0086 00000C         4  376  493     rts
                              494 _it_is_time
P:0087 0ACC62         4  380  495     bset    #EVENT_TIMER_BITPOS,a1 ;signal the module (event signal value with timer bit set)
P:0088 00000C         4  384  496     rts
                              498     endsec
